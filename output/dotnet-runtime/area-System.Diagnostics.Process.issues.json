[
    {
        "url":  "https://github.com/dotnet/runtime/issues/13943",
        "createdAt":  "2014-12-19T21:45:35Z",
        "number":  13943,
        "author":  "pdelvo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCgzKw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "whoisj",
                                            "createdAt":  "2016-12-06T17:11:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ldematte",
                                            "createdAt":  "2017-11-16T14:27:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DmitriiShamrikov",
                                            "createdAt":  "2018-04-19T14:20:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "qmfrederik",
                                            "createdAt":  "2018-09-20T08:17:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maroallegro",
                                            "createdAt":  "2018-09-24T14:19:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "spike0xff",
                                            "createdAt":  "2018-10-12T18:22:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xsoheilalizadeh",
                                            "createdAt":  "2019-01-01T08:05:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yulia-d",
                                            "createdAt":  "2019-01-14T08:53:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2019-04-22T21:13:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "piedar",
                                            "createdAt":  "2019-04-24T15:37:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mletterle",
                                            "createdAt":  "2019-04-29T19:17:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MiguelAlho",
                                            "createdAt":  "2019-06-27T14:51:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "madelson",
                                            "createdAt":  "2019-07-15T21:46:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Implorer",
                                            "createdAt":  "2019-08-12T11:09:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ramprasathdgl",
                                            "createdAt":  "2019-09-27T12:35:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Zagrophyte",
                                            "createdAt":  "2019-12-05T18:37:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tolgabalci",
                                            "createdAt":  "2019-12-21T00:57:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kevin-Price",
                                            "createdAt":  "2020-03-17T01:29:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jdunneln",
                                            "createdAt":  "2020-04-20T21:15:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tyrrrz",
                                            "createdAt":  "2020-05-09T11:26:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AaronRobinsonMSFT",
                                            "createdAt":  "2020-07-18T22:11:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "skendrot",
                                            "createdAt":  "2021-06-01T19:17:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "human33",
                                            "createdAt":  "2022-01-26T07:58:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kwende",
                                            "createdAt":  "2022-07-01T20:37:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "meziantou",
                                            "createdAt":  "2022-11-19T05:01:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Martin-Maat",
                                            "createdAt":  "2022-12-13T21:31:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "manoack",
                                            "createdAt":  "2023-01-17T07:31:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "reduf",
                                            "createdAt":  "2023-03-02T07:07:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "m08pvv",
                                            "createdAt":  "2023-03-15T20:35:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LemmusLemmus",
                                            "createdAt":  "2023-04-10T15:10:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlexRadch",
                                            "createdAt":  "2023-06-22T22:32:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vazde",
                                            "createdAt":  "2023-10-18T09:14:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "msedi",
                                            "createdAt":  "2023-11-28T20:53:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jairbubbles",
                                            "createdAt":  "2024-02-07T11:13:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ghost4Man",
                                            "createdAt":  "2024-04-07T16:14:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "edwardneal",
                                            "createdAt":  "2024-07-13T08:35:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wisemoth",
                                            "createdAt":  "2024-09-23T12:07:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BunnyTub",
                                            "createdAt":  "2025-05-18T23:48:43Z"
                                        }
                                    ],
                          "totalCount":  38
                      },
        "updatedAt":  "2024-07-15T17:21:47Z",
        "body":  "Currently if you call Process.Start internally CreateProcess is called with bInheritHandles = true (hard coded). It would be great to make it possible to change this behavior, e.g. by adding a Property to ProcessStartInfo.\r\n\r\nCurrently there is no way I know of to change this other then reimplementing System.Diagnostics.Process.\r\n# Example\r\n\r\nIf you run this application twice without exiting the first notepad instance the second instance will not be able to open the tcp port, because notepad is still running. This can be a problem for server applications that are starting child processes themself and crash, or are killed by the user before the socket can be closed.\r\n\r\n``` csharp\r\nusing System.Diagnostics;\r\nusing System.Net;\r\nusing System.Net.Sockets;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        TcpListener listener = new TcpListener(IPAddress.Any, 4567);\r\n        listener.Start();\r\n\r\n        Process.Start(new ProcessStartInfo(\"notepad.exe\") { UseShellExecute = false });\r\n        //Simulate application crash without freeing resources\r\n    }\r\n}\r\n```\r\n# Design proposal\r\n\r\nThe easiest way to make this possible is to add a new Property to ProcessStartInfo and use this in the Call to CreateProcess\r\n\r\n``` csharp\r\nnamespace System.Diagnostics\r\n{\r\n    public partial class ProcessStartInfo\r\n    {\r\n        public bool InheritHandles\r\n        {\r\n            get;  // defaults to true\r\n            [MinimumOSPlatform(\"windows7.0\")]\r\n            set;\r\n        }\r\n    }\r\n}\r\n```\r\n# Questions\r\n- Is there a very important reason why this was hardcoded like this in the first place?\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHt-1-Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3ODc5ODUw",
                                           "createdAt":  "2014-12-22T19:38:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "I agree we should add this API. IMO we should also make TcpListener have option to change HandleInheritability and change the default behavior to not inherit handles if possible (at least when targeting newer version of the framework).\n\nIn most cases we should not change InheritHandles on Process and should rather do it whenever we create handles but we should still have an option to disable this.\n",
                                           "updatedAt":  "2014-12-22T19:38:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3OTcyNDUw",
                                           "createdAt":  "2014-12-23T16:52:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pdelvo",
                                           "body":  "I think adding options to TcpListener/TcpClient/Socket would be a good idea. Are there other places where handle inheritance can be a problem? I was not able to create a problem like the one mentioned above by exclusivly opening a file\n",
                                           "updatedAt":  "2014-12-23T16:52:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MDEyNDky",
                                           "createdAt":  "2014-12-24T00:04:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "This seems quite reasonable. As @krwq we should probably do a pass and look into similar classes that perform handle inheritability. This helps in understanding what API we could use.\n",
                                           "updatedAt":  "2014-12-24T00:04:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4Mjg3MzY0",
                                           "createdAt":  "2014-12-29T19:06:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@pdelvo, We were able to repro this with FileStream although that one creates non-inheritable handles by default so had to override that. I believe that every library should have non-inheritable handles by default but that might be hard to change at this point because of compat reasons\n",
                                           "updatedAt":  "2014-12-29T19:06:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5Mzk3OTE2",
                                           "createdAt":  "2015-01-09T20:58:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ellismg",
                                           "body":  "One open question I have is what this would mean when we try to support this feature cross platform.  What would it mean to say that handles are not inherited in Unix?  Does \"handles\" here mean open file descriptors?  If they are not to be inherited, does the framework have to find and close them in the child process?   How does it interact with file descriptors marked FD_CLOEXEC?\n",
                                           "updatedAt":  "2015-01-09T20:58:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5NDEwMDkz",
                                           "createdAt":  "2015-01-09T22:26:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I expect there are going to be a fair number of features in System.Diagnostics.Process that result in PlatformNotSupportedException; this might be one of them, if e.g. explicitly closing all fds above 2 doesn\u0027t work out or is prohibitive for some reason.",
                                           "updatedAt":  "2018-09-19T14:36:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMTg1NDY3",
                                           "createdAt":  "2015-01-15T23:51:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "[We\u0027ve reviewed this proposal](https://github.com/dotnet/apireviews/blob/master/2015-01-14-misc/README.md#306-make-processstart-have-a-option-to-change-handle-inheritance) and don\u0027t believe it\u0027s ready yet. Please take a look at the notes.\n",
                                           "updatedAt":  "2015-01-15T23:51:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NTIxODkwMA==",
                                           "createdAt":  "2016-12-06T17:44:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAFPoMg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Bhaal22",
                                                                               "createdAt":  "2016-12-06T23:18:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Priya91",
                                                                               "createdAt":  "2016-12-07T07:47:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Fixed link: https://github.com/dotnet/apireviews/tree/master/2015/01-14-misc#306-make-processstart-have-a-option-to-change-handle-inheritance",
                                           "updatedAt":  "2016-12-06T17:44:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NTM3OTIwMg==",
                                           "createdAt":  "2016-12-07T07:48:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Priya91",
                                           "body":  "@pdelvo @whoisj Would one of you be interested in working on the api proposal for this, responding to the last api review in @danmosemsft\u0027s link..",
                                           "updatedAt":  "2016-12-07T07:48:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NTQ2Mzk2MA==",
                                           "createdAt":  "2016-12-07T14:41:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "whoisj",
                                           "body":  "@Priya91 yeah I could do something, but likely not until after VS 2017 ships (it is an all consuming effort). If @pdelvo wants to start on something, I\u0027d be happy to collaborate as well.\r\n\r\nWhat are the requirements for CoreFx API changes? Does the API need x-plat support, can there be Windows specific elements? Etc.\r\n\r\nAs a side note, I\u0027d prefer to see a method added to `System.Diagnostics.ProcessStartInfo` like `public void AddInhertiableHandles(IEnumerable\u003cSafeHandle\u003e handles)`, `public void AddInhertiableHandles(IEnumerable\u003cIntPtr\u003e handles)` than a misleading property like `public bool InheritHandles { get; set; }` because any time there\u0027s a redirection of pipes, inheritance needs to be enabled but consumers of the API do not likely mean to inherit every handle the parent process has.",
                                           "updatedAt":  "2016-12-07T14:45:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NTU1NjYwNw==",
                                           "createdAt":  "2016-12-07T20:00:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Priya91",
                                           "body":  "\u003e What are the requirements for CoreFx API changes? Does the API need x-plat support\r\n\r\nWe have the api addition process documented [here](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md). It also elaborates on the design principles. Yeah we do need x-plat support, as .NET Core supports Unix platforms as well.\r\n\r\n\u003e can there be Windows specific elements? Etc.\r\n\r\nAre you asking in terms of exposing an API only on Windows? We can\u0027t do that, although we have some windows specific APIs in .NET Core and throw PNSE on other platforms.  \r\n\r\nFor now the focus should be more on the API design as you suggested in using a method over property etc, which will take shape once we understand the scenarios and requirements on all platforms. ",
                                           "updatedAt":  "2016-12-07T20:00:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NTgwNjU2Mw==",
                                           "createdAt":  "2016-12-08T17:50:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "whoisj",
                                           "body":  "@Priya91 :+1: and thanks.",
                                           "updatedAt":  "2016-12-08T17:50:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2OTM2NjAwNA==",
                                           "createdAt":  "2016-12-27T18:46:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@pdelvo do you want to update per the feedback and retry review? that would be welcome.",
                                           "updatedAt":  "2016-12-27T18:46:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwOTgzMzE2OA==",
                                           "createdAt":  "2017-06-20T17:38:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Next steps: We need to decide how to introduce Windows-only APIs. Ideally BCL is mostly platform agnostic. It is something we want in BCL.\r\nLikely not good up-for-grabs candidate.",
                                           "updatedAt":  "2017-06-20T17:38:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MjQ0MTE2MA==",
                                           "createdAt":  "2018-02-01T23:54:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "@agocke had some interest in this issue with https://github.com/dotnet/corefx/issues/26711, anybody know what is the latest?",
                                           "updatedAt":  "2018-02-01T23:54:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MjE4NDUyNQ==",
                                           "createdAt":  "2018-03-12T03:29:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "In node.js they use the concept from Win32 API `DETACHED_PROCESS` and `CREATE_NEW_PROCESS_GROUP` https://github.com/nodejs/node/blob/3a19122/deps/uv/src/win/process.c#L1089\r\n\r\nSee process creation flags: https://msdn.microsoft.com/en-us/library/windows/desktop/ms684863(v=vs.85).aspx\r\n\r\nThen in Unix, they also use detached process from the options and then call `setsid()` to detach the process. https://github.com/nodejs/node/blob/3a19122/deps/uv/src/unix/process.c#L289\r\n\r\nMaybe instead of calling it `InheritHandles`, use the term `Detach`?\r\n\r\ncc @wfurt ",
                                           "updatedAt":  "2018-03-12T03:29:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MjgwMjkwMw==",
                                           "createdAt":  "2018-03-13T20:14:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "whoisj",
                                           "body":  "@kasper3 that\u0027s fine for NodeJs which is launch processes to behave like threads. Often, developers want to share the console\u0027s standard in/out/err pipes with the child. Additionally, neither `DETACHED_PROCESS` nor `CREATE_NEW_PROCESS_GROUP` prevent handle inheritance (to the best of my knowledge).\r\n\r\n@karelz why not just have the `Process.StartInfo` take an `IEnumerable\u003cSafeHandle\u003e` (or similar) which then causes the handle exclusion logic used by each platform to whittle down the inherited handles to only the set specified by the enumerable (and maybe include standard handles as necessary).",
                                           "updatedAt":  "2018-03-13T20:14:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Mzg3MzM1Mw==",
                                           "createdAt":  "2018-06-01T13:01:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "madelson",
                                           "body":  "According to this thread (https://github.com/brettwooldridge/NuProcess/issues/13#issuecomment-282071125), it sounds like Java is able to solve this issue in it\u0027s Process implementation:\r\n\r\n\u003e The process implementation in Java uses JNI to first fork the JVM process, then the child JVM process performs a close of all file descriptors except for the pipes to the parent, and then executes the user-specified process, which replaces the child process in-situ (never to return) but inherits the file descriptors (now only the pipes to the parent).\r\n\r\nProbably .NET could do something similar?",
                                           "updatedAt":  "2018-06-01T13:01:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MzkwMDQ0NA==",
                                           "createdAt":  "2018-06-01T14:36:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "whoisj",
                                           "body":  "@madelson on Linux? sure. On Windows? not so much.",
                                           "updatedAt":  "2018-06-01T14:36:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Mzk2NTY2Mg==",
                                           "createdAt":  "2018-06-01T18:12:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "madelson",
                                           "body":  "@whoisj The OP calls out that today we call CreateProcess with bInheritHandles = true (hard coded). So on Windows I assumed the solution would be to just pass false for this parameter. From the discussion I thought the main issue was a concern that this behavior couldn\u0027t easily be replicated across OS\u0027s (e. g. @Priya91\u0027s comment about this API being Windows only).\r\n\r\n",
                                           "updatedAt":  "2018-06-01T18:12:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Mzk4MDg5NA==",
                                           "createdAt":  "2018-06-01T19:08:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "whoisj",
                                           "body":  "@madelson passing `false` for `bInheritHandles` doesn\u0027t work if the caller needs stream redirection.\r\n\r\nInstead, I would think (for Windows) we\u0027d want to focus on `InitializeProcThreadAttributeList`.",
                                           "updatedAt":  "2018-06-01T19:08:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMjU1NDUzNA==",
                                           "createdAt":  "2018-09-18T21:05:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAsffwg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2018-09-19T08:49:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tomtheisen",
                                                                               "createdAt":  "2018-11-01T19:23:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2019-07-15T21:47:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "I know exactly why this bug exists. The Process.Start() code was written originally to run on Windows 9x where you literally couldn\u0027t fix this. The API for actually fixing this on Windows was added on Windows Vista, but nobody ever revisited this code. And when the port to Linux was done it was done directly, emulating the bug, probably without thinking about it.\r\n\r\nAnybody using blind inherit handles from any thread other than the main thread is bugged and doesn\u0027t know it yet.",
                                           "updatedAt":  "2018-09-18T21:08:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMjU3MTI5Nw==",
                                           "createdAt":  "2018-09-18T21:59:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@jhudsoncedaron do you have specific changes in mind?\r\n.NET Core 2.1+ supports only Win7+: https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1-supported-os.md#windows so using Vista API should be reasonable.",
                                           "updatedAt":  "2018-09-18T21:59:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMjU3NzQwNA==",
                                           "createdAt":  "2018-09-18T22:21:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "Yup!\r\n\r\nHow to fix (Windows): https://blogs.msdn.microsoft.com/oldnewthing/20111216-00/?p=8873\r\nMore problems caused by this: https://blogs.msdn.microsoft.com/oldnewthing/20131018-00/?p=2893\r\n\r\nTo fix on Unix, the child process needs to enumerate over /proc/self/fd and close any integers \u003e 2 except for the handle being used to enumerate the directory itself.",
                                           "updatedAt":  "2018-09-18T22:21:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMjU3OTYzMA==",
                                           "createdAt":  "2018-09-18T22:30:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "This is not a \"bug\", which suggests you could just change the implementation... doing that would break an absolute ton of code. If we want to add an option to the API (and work through any associated issues), that\u0027s fine, but we must not change the existing behavior of the existing API. And we absolutely thought about the behavior when implementing this for Unix.",
                                           "updatedAt":  "2018-09-18T22:30:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMjU4MDg1OQ==",
                                           "createdAt":  "2018-09-18T22:35:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@stethentoub: If you create two child process from two separate threads without a lock on the unix platform, your code can hang. I\u0027m not certain but I think the build server code in dotnet is affected. It\u0027s difficult to come up with a case on the Windows platform where someone could be depending on random handles being inherited because only socket handles are inherited.",
                                           "updatedAt":  "2018-09-18T22:35:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMjU4MjQ2OA==",
                                           "createdAt":  "2018-09-18T22:42:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e It\u0027s difficult to come up with a case on the Windows platform where someone could be depending on random handles being inherited\r\n\r\ne.g. anonymous pipes\r\n\r\n\u003e If you create two child process from two separate threads without a lock on the unix platform, your code can hang.\r\n\r\nCode _can_ hang for lots of reasons. My point is, the implementation of the API is not buggy; it\u0027s doing exactly what it\u0027s defined to do. You may not like the definition, but that\u0027s different than saying there\u0027s a bug in the implementation.",
                                           "updatedAt":  "2018-09-18T22:42:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMjcxNTg5Ng==",
                                           "createdAt":  "2018-09-19T08:54:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Since a process often contains many components incl. 3rd party libraries it seems very unsafe to inherit handles by default. This could lead to random handles being inherited. The whole model of inheriting all inheritable handles, as pre-Vista OS\u0027es did it, seems fundamentally unsafe.\r\n\r\nInheritable handles are mutable process-global state. Very dangerous in complex processes.\r\n\r\nFor that reason an opt-out option seems very appropriate to have. IMO, all new usages of the `Process` class should opt-out as a best practice.",
                                           "updatedAt":  "2018-09-19T09:24:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMjcxOTUyMw==",
                                           "createdAt":  "2018-09-19T09:06:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7-Bfw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MiguelAlho",
                                                                               "createdAt":  "2019-06-27T14:55:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2019-07-15T21:48:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kyle-rader",
                                                                               "createdAt":  "2023-02-28T06:11:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "m08pvv",
                                                                               "createdAt":  "2023-03-15T20:39:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TigerHix",
                                                                               "createdAt":  "2023-05-18T11:38:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "ayende",
                                           "body":  "This can lead to _really_ hard to figure out bugs, which was our case. Having an option to turn this off is very desriable.",
                                           "updatedAt":  "2018-09-19T09:06:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMjgyMTk1NA==",
                                           "createdAt":  "2018-09-19T14:18:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AArnott",
                                           "body":  "I think the most productive discussion here will not be one to persuade the .NET team to change the current behavior, as @stephentoub says. \r\n\r\nInstead, let us direct our efforts at discussing how we can introduce an _option_ for more desirable behavior in the .NET API so that folks who spawn child processes can get the behavior they want.\r\n\r\nFor example, here are a few starter ideas:\r\n\r\n1. an app.config setting\r\n1. a new overload of Process.Start\r\n1. a new property in ProcessStartInfo",
                                           "updatedAt":  "2018-09-19T14:18:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMjg0MTU4Mw==",
                                           "createdAt":  "2018-09-19T15:12:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7-Bkg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AArnott",
                                                                               "createdAt":  "2018-09-19T15:25:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lukasz-pyrzyk",
                                                                               "createdAt":  "2019-03-07T10:01:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2019-04-05T10:56:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "piedar",
                                                                               "createdAt":  "2019-04-24T15:40:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TigerHix",
                                                                               "createdAt":  "2023-05-18T11:38:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@AArnott : The original \"InheritHandles\" was good enough, but the API review team rejected it. Let us answer their objections: \r\n\r\n\u003e \"There is no good way to disable inhering handles on Linux\"\r\n\r\nOh yes there is. If inherit handles not set, close all handles \u003e 2 in between fork() and exec().\r\n\r\n\u003e \"We should use System.IO.HandleInheritablility enum if we expose this property.\"\r\n\r\nThen do so.\r\n\r\n\u003e \"How does this interact with how this places with redirects and UseShellExecute\"\r\n\r\nthrow, as they already stated.\r\n\r\nWhichever way you set the default for InheritHandles, somebody\u0027s got some code auditing to do. I find I don\u0027t care which way it is. I\u0027m perfectly willing to track down all of my invocations and fix them. Trust me, it\u0027s a lot less trouble than trying to work around socket handles from HttpClient leaking into other processes.",
                                           "updatedAt":  "2018-09-19T15:12:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMjg1MTU1Mg==",
                                           "createdAt":  "2018-09-19T15:40:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "whoisj",
                                           "body":  "@jhudsoncedaron the problem with `InheritHandles` is it __must__ be true for IO redirection to work, so it is not a solution.\r\n\r\nInstead, I believe we should focus on adding a white-list option. If the list is `null` ignore it, if the list exists then only take the handles in the list to the new process. Windows already has this functionality, and Linux does via closing all handles not in the list between `fork()` and `exec()`.",
                                           "updatedAt":  "2018-09-19T15:40:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMjg1NDY2Nw==",
                                           "createdAt":  "2018-09-19T15:48:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@gistofj : I projected that setting the managed \"InheritHandles\" to false/NotInherit would still permit redirection to work. There\u0027s no inherent reason why it wouldn\u0027t. Now if it just passed false to the native CreateProcess that would be a problem. The solution outlined in Raymond\u0027s article has to be used on Windows in any case.\r\n\r\nIf you would really rather provide a list of handles to inherit you can do so.\r\n\r\nThis is one of the few things that is really hard to fix by P/Invoke. Hint: you cannot allocate memory between fork() and exec() on Mac.",
                                           "updatedAt":  "2018-09-19T15:48:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMzE3NjI4Nw==",
                                           "createdAt":  "2018-10-25T19:28:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "https://github.com/dotnet/corefx/pull/32903 disables socket inheritance on Windows and Mac. That fixes the original issue reported here.\r\nAre there other handles being inherited that cause trouble? Or can this issue be closed?",
                                           "updatedAt":  "2018-10-25T19:28:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMzE4NzY1Nw==",
                                           "createdAt":  "2018-10-25T20:07:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@tmds : There are more issues.\r\n\r\n1) Process.Start() races with itself in two threads, occasionally causing child processes to inherit handles intended for other child processes, which can cause deadlocks.\r\n\r\n2) new Socket() can create a socket that is initially inheritable. While there is an API to change it and the framework uses it, this also always races with Process.Start() so it\u0027s worse. Hint: HttpClient. SmtpClient. The list goes on and on.\r\n\r\nI actually discovered this from 1 above the first time.\r\n\r\nTell you what. You settle the API surface, and I can do an implementation for both Linux and Windows. Somebody else will have to do the Mac as I haven\u0027t got access to one.",
                                           "updatedAt":  "2018-10-25T20:12:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMzE5MjU1OA==",
                                           "createdAt":  "2018-10-25T20:23:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e Process.Start() races with itself in two threads, occasionally causing child processes to inherit handles intended for other child processes, which can cause deadlocks.\r\n\r\nThis is very vague.\r\n\r\n\u003e new Socket() can create a socket that is initially inheritable. While there is an API to change it and the framework uses it, this also always races with Process.Start() so it\u0027s worse. Hint: HttpClient. SmtpClient. The list goes on and on.\r\n\r\nOn Linux and Windows there are APIs that create the socket non inheritable. We already used those on Linux, and with https://github.com/dotnet/corefx/pull/32903 we also use them on Windows.",
                                           "updatedAt":  "2018-10-25T20:23:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMzE5NzQ3NQ==",
                                           "createdAt":  "2018-10-25T20:39:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@tmds: The handle that is standard output for one process gets inherited onto another process as well because they both hit the native call at the same time. The deadlock happens if ReadToEnd() is used. Also, one processes\u0027s stdin can be inherited by another process as well. In that case the deadlock happens if the operation mode is feed data to stdin until end as the other child holds the handle open.\r\n\r\nHere is a place where a socket is initially created with inheritable handle and then changed to not inheritable. https://github.com/libuv/libuv/blob/27ba66281199bdcade823677af8dedc161152fb6/src/win/tcp.c#L420",
                                           "updatedAt":  "2018-10-25T20:39:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMzIwMzg1OQ==",
                                           "createdAt":  "2018-10-25T21:00:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e The handle that is standard output for one process gets inherited onto another process as well because they both hit the native call at the same time. The deadlock happens if ReadToEnd() is used. Also, one processes\u0027s stdin can be inherited by another process as well. In that case the deadlock happens if the operation mode is feed data to stdin until end as the other child holds the handle open.\r\n\r\nYou can use `ProcessStartInfo.RedirectStandard{Input,Output,Error}` to avoid leaking stdin/out/err into the children.\r\n\r\n\u003e Here is a place where a socket is initially created with inheritable handle and then changed to not inheritable.\r\n\r\nIn corefx it happens on creation:\r\n\r\nhttps://github.com/dotnet/corefx/blob/27fc4ecc80878f52feeac1d6bb23345ab65f97f5/src/System.Net.Sockets/src/System/Net/Sockets/SafeSocketHandle.Windows.cs#L215",
                                           "updatedAt":  "2018-10-25T21:00:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMzIwNjU1OA==",
                                           "createdAt":  "2018-10-25T21:09:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "The race condition happens when using one of ProcessStartInfo.RedirectStandard{Input,Output,Error} on more than one Process.Start entered simultaneously from different processes.\r\n\r\nI cited that particular call in libuv because libuv is a dependency of net core somehow. I see it get shipped with dotnet package -r",
                                           "updatedAt":  "2018-10-25T21:10:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMzI4MjkyMw==",
                                           "createdAt":  "2018-10-26T04:29:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e The race condition happens when using one of ProcessStartInfo.RedirectStandard{Input,Output,Error} on more than one Process.Start entered simultaneously from different processes.\r\n\r\nSo, the issue is that the end of the pipe that is used by the process to read/write to the child gets cloned into another child?\r\nThis shouldn\u0027t be a problem on Linux. The pipe doesn\u0027t get inherited.\r\nOn Windows, if there is an issue, probably it can be fixed. Please create a separate issue.\r\n\r\n\u003e I cited that particular call in libuv because libuv is a dependency of net core somehow. I see it get shipped with dotnet package -r\r\n\r\nlibuv is used by Kestrel. From Kestrel 2.1 onwards, it is not the default, corefx Sockets are used instead.\r\nThe fix for Windows will be in .NET Core 3.0. Kestrel 2.2 will have a local fix for the socket used by the webserver.",
                                           "updatedAt":  "2018-10-26T06:10:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNjU1NzY2MQ==",
                                           "createdAt":  "2018-11-07T09:19:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "@karelz this can be closed due to improvements in https://github.com/dotnet/corefx/pull/33097 and https://github.com/dotnet/corefx/pull/32903",
                                           "updatedAt":  "2018-11-07T09:19:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzOTA4ODIxMQ==",
                                           "createdAt":  "2018-11-15T15:51:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA4hURA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2020-01-08T01:52:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "whoisj",
                                           "body":  "@tmds, I don\u0027t know that either of those issues will resolve the problem entirely. They sure will make it less prevalent though. I ran into this issue (head first at 90 mph) during the VS 2017 bring-up. At the time I was developing a library to wrap git.exe in a way that Visual Studio could consume it via Team Explorer.\r\n\r\nI was constantly running into git.exe processes that would never exit, they\u0027d just hand there until all of VS was torn down. After a lot of spelunking, the root cause was that VS is a multi-tenant application: there are dozens, if not hundreds of tiny services all running along side each other in blissful ignorance of each other. In my case, msbuild.exe was being launched and then parked awaiting its next build task. Too often is would inherit all of the handles in the VS process, including our local handles to Git\u0027s standard input, output, and error pipes.\r\n\r\nThe net effect was that we\u0027d close our handle to the standard input pipe (the signal to Git that it\u0027s OK to exit) but because the third process would have a duplicate of the handle, the pipe would net get closed and Git would dutifully away input.\r\n\r\nThe solve was not tricks with mutexes or anything like that. The answer was [`ThreadProcAttributeList`](https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-initializeprocthreadattributelist) and its related functions. I highly suggest you take a close look at how these work for Windows. Please remember that Windows doesn\u0027t care on iota about AppDomains or any trick the CLR can bring - this is a kernel level thing happening, and it is old, and unlikely to be changed in the near future (and never to be changed on an older version of Windows).\r\n\r\n\u003e I projected that setting the managed \"InheritHandles\" to false/NotInherit would still permit redirection to work. There\u0027s no inherent reason why it wouldn\u0027t. \r\n\r\n@jhudsoncedaron, I wish you were correct but empirical evidence shows that it does not work. Even if I pass handles to `CreateProcess` for the resulting process to use, if I do not also set `bInherit` to true, it does not work. That is the _entire point_ and reasoning behind `ThreadProcAttributeList`.\r\n\r\nYou can disagree with me about this, but I spent time with the teams responsible for this part of Windows, looking at the source code; and this is was the best answer we could find.\r\n\r\nAs for Linux, I have no idea how to resolve that issue. I am very far from being a Linux SME (subject matter expert).",
                                           "updatedAt":  "2018-11-15T15:57:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzOTA5NDQ0Ng==",
                                           "createdAt":  "2018-11-15T16:08:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@gistofj : The reality is I was focusing on 100% .NET applications not mixed applications. Others must carry the bw-compat vs. reliability debate from here. I have posted how to fix it in Linux.",
                                           "updatedAt":  "2018-11-15T16:08:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzOTEwMjI4MA==",
                                           "createdAt":  "2018-11-15T16:30:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAe_P0Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2018-11-15T17:48:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "whoisj",
                                           "body":  "@jhudsoncedaron I do not see how that\u0027s a _fix_. It is a reasonable workaround if you control the entire situation, but that\u0027s rarely the case in real world scenarios. The proper fix is for the runtime to correctly utilize the functionality provided by the operating system(s).",
                                           "updatedAt":  "2018-11-15T16:30:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzOTEwNTA3OA==",
                                           "createdAt":  "2018-11-15T16:38:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAgEVQA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "whoisj",
                                                                               "createdAt":  "2018-12-07T14:44:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@gistofj : When I said I have posted how to fix it in Linux I wasn\u0027t kidding. I posted how to get the equivalent of ThreadProcAttributeList for file handles on Linux earlier in this thread.",
                                           "updatedAt":  "2018-11-15T16:38:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNzc1Mjg0MQ==",
                                           "createdAt":  "2019-08-02T15:53:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rhegner",
                                           "body":  "We are experiencing this problem in production now in an application which launches a separate updater process which installs a new version and which then launches the new version of our product. \r\n\r\nSo even if we had an option to change handle inheritance in Process.Start, that would not solve the problem for all the instances of the old version which are already running on customers premises.\r\n\r\nI\u0027m therefore looking for a workaround which can be implemented purely in the child process.\r\n\r\nIs there a way to close all the inherited handles at the beginning of a child process? Note that our ASP.NET Core application can run on any platform (primarily Windows and Linux).\r\n\r\nThis is kind of urgent, as we need to ship a new version of our product to customers soon....",
                                           "updatedAt":  "2019-08-02T15:53:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNzc2NDAzNg==",
                                           "createdAt":  "2019-08-02T16:27:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Adding @jeremykuhne for his perspective ",
                                           "updatedAt":  "2019-08-02T16:27:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNzgzOTA4MQ==",
                                           "createdAt":  "2019-08-02T20:45:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@rhegner one thing to try out is to find way to enumerate all process handles on startup and then inspect/close as needed. Perhaps some of those will work for you:\r\nhttps://stackoverflow.com/questions/3019066/get-all-window-handles-for-a-process\r\nhttps://stackoverflow.com/questions/733384/how-to-enumerate-process-handles",
                                           "updatedAt":  "2019-08-02T20:45:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNzg5NTc3NQ==",
                                           "createdAt":  "2019-08-03T05:21:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "Afaik there should be no more issues on Linux.\r\nFor Windows, it would be good to figure out what handles are being leaked.",
                                           "updatedAt":  "2019-08-03T05:21:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNzk3NzU5Mw==",
                                           "createdAt":  "2019-08-04T06:24:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "@rhegner Maybe the child process can re-launch itself with the correct handle inheritance settings.",
                                           "updatedAt":  "2019-08-04T06:24:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxODI2NzExNQ==",
                                           "createdAt":  "2019-08-05T14:52:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rhegner",
                                           "body":  "Thank you all for your answers so far!\r\nFor troubleshooting I created a minimal sample program to reproduce the problem. You can find it here:\r\nhttps://github.com/rhegner/HandleInheritanceTest\r\n\r\nYou can launch it like this (where 5000 is the port):\r\n\r\n    dotnet HandleInheritanceTest.dll Parent 5000 NoFix\r\n\r\nIt will start a webhost, and then start a child process which waits until the parent process has exited, and then also tries to start a webhost on the same port. It fails with\r\n\r\n\u003e System.IO.IOException: Failed to bind to address http://[::]:5000: address already in use.\r\n\r\nI tried to work around the problem by closing all inherited sockets when at the beginning of the child process using `NtQuerySystemInformation` and `NtQueryObject`. This is very ugly code (platform specific, potential issues with 32bit vs. 64bit, \"undocumented\" APIs, `NtQueryObject` hangs under certain condition). I did manage to enumerate all the handles of the child process and get their type and name information. But browsing through that list, nothing looks like it could be a socket handle. So I don\u0027t know which handles to close.\r\n\r\nYou can try this attempted workaround by starting my example program in a different mode like this:\r\n\r\n    dotnet HandleInheritanceTest.dll Parent 5000 CloseInheritedSockets\r\n\r\nTo summarize: I\u0027m still lost here - any help would be appreciated!!\r\n\r\nPS: In the mean time, next thing I\u0027ll try is re-writing Process.Start so it doesn\u0027t leak handles to the new process.",
                                           "updatedAt":  "2019-08-05T14:52:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxODcyMzM2MQ==",
                                           "createdAt":  "2019-08-06T15:35:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "Can you try using .NET Core 3.0 (which has https://github.com/dotnet/corefx/pull/32903)?",
                                           "updatedAt":  "2019-08-06T15:42:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxODc4NDI3MA==",
                                           "createdAt":  "2019-08-06T18:15:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rhegner",
                                           "body":  "Yes chaning my little example project to .NET Core 3.0 solves the problem. That\u0027s good news. \r\nHowever, for our real product re-targeting to a preview version is not an option, so I still need a workaround for the upcomig version of our software...",
                                           "updatedAt":  "2019-08-06T18:15:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxODc5MjI3Mw==",
                                           "createdAt":  "2019-08-06T18:36:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e However, for our real product re-targeting to a preview version is not an option,\r\n\r\nIf it helps, 3.0 will have its stable release next month.",
                                           "updatedAt":  "2019-08-06T18:36:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MTM4MTg1Mw==",
                                           "createdAt":  "2020-01-07T00:50:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Going back to the original proposal, which was\r\n\r\n```c#\r\npublic sealed class ProcessStartInfo {\r\n// ...\r\n    public bool InheritHandles { get; set; } // defaults to true\r\n// ...\r\n}\r\n```\r\nIf I understand this is easy to \"implement\" on Windows by passing bInheritHandles=false to CreateProcessW, but \r\n1. this prevents inheriting the standard handles -- it would need to throw if one or more of these are not being redirected\r\n2. sometimes one wants just certain handles inherited, on Windows this is done with PROC_THREAD_ATTRIBUTE_HANDLE_LIST, as @gistofj noted would need an extended API\r\n\r\n\u003e As a side note, I\u0027d prefer to see a method added to System.Diagnostics.ProcessStartInfo like public void AddInhertiableHandles(IEnumerable\u003cSafeHandle\u003e handles), public void AddInhertiableHandles(IEnumerable\u003cIntPtr\u003e handles) than a misleading property like public bool InheritHandles { get; set; } because any time there\u0027s a redirection of pipes, inheritance needs to be enabled but consumers of the API do not likely mean to inherit every handle the parent process has.\r\n\r\nSo the open questions are \r\n1. Would this be useful without the ability to allow specific handles?\r\n2. What would it do on Linux? ",
                                           "updatedAt":  "2020-01-07T00:50:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MTQ2ODUxMg==",
                                           "createdAt":  "2020-01-07T07:23:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e Would this be useful without the ability to allow specific handles?\r\n\r\nYes. It can avoid that child processes keep handles open which they aren\u0027t using.\r\nAnd improve perf when launching child processes on Windows (https://github.com/dotnet/corefx/issues/42697).\r\n\r\n\u003e What would it do on Linux?\r\n\r\nClose open file descriptors after fork (except for ProcessStartInfo Redirects).",
                                           "updatedAt":  "2020-01-07T07:23:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MTU2NDMyMg==",
                                           "createdAt":  "2020-01-07T12:20:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Close open file descriptors after fork (except for ProcessStartInfo Redirects).\r\n\r\nMeaning:\r\n```C#\r\nfor (int i = 3; i \u003c= short.MaxValue; i++) \r\n    close(i);\r\n```\r\n?",
                                           "updatedAt":  "2020-01-07T12:20:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MTU5NjY0NA==",
                                           "createdAt":  "2020-01-07T13:56:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "After reading through some threads (ref https://sourceware.org/bugzilla/show_bug.cgi?id=10353), there is no nice way to do this on Linux.\r\nIssues mentioned:\r\n* performance looping over a large nr of fds\r\n* risk of closing file descriptors that shouldn\u0027t be closed\r\n\r\nBSDs have a dedicated `closefrom` syscall.\r\nSome frameworks implement a poor man\u0027s `closefrom` that closes fds from `/proc/self/fd` or loop till `_SC_OPEN_MAX`.\r\n\r\nI think real-world issues mentioned in this thread were fixed in .NET Core by using CLOEXEC and Windows equivalent.\r\nExcept for the Windows perf issue: https://github.com/dotnet/corefx/issues/42697.",
                                           "updatedAt":  "2020-01-07T13:58:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MTY1ODkyNQ==",
                                           "createdAt":  "2020-01-07T16:19:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "It\u0027s probable any remaining issues can be reliably solved by exposing an API to take the \"create process\" lock. (Note that all implementations have such a lock, it\u0027s just not the same one for all of them.) Plausible API surface:\r\n\r\n    // owns must be initialized to false before calling\r\n    TryTakeProcessLock(ref bool owns);\r\n    TakeProcessLock(ref bool owns);\r\n    ReleaseProcessLock(ref bool owns); // does nothing if owns is false\r\n\r\nNote this is like the Monitor.Lock functions. The implementation isn\u0027t exactly trivial because Process.Create needs to know about the lock being taken by these APIs on its own thread vs another thread.\r\n\r\nThis only does anything useful for people who intend to create their own native handles.\r\n\r\nDon\u0027t like this idea, feel free to ignore it.",
                                           "updatedAt":  "2020-01-07T16:19:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MTY5OTQyMw==",
                                           "createdAt":  "2020-01-07T17:56:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA5U2IA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2020-01-08T01:56:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "whoisj",
                                                                               "createdAt":  "2020-01-17T16:29:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "whoisj",
                                                                               "createdAt":  "2020-01-17T16:29:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e I think real-world issues mentioned in this thread were fixed in .NET Core by using CLOEXEC and Windows equivalent.\r\n\r\nFor handles we create, right? Anyone can create their own. The example @gistofj mentioned is spawning processes from VS, a large app with plenty of native code owned by other components, creating lots of inheritable handles. Presumably that scenario exists on Unix as well -- it would be unfortunate to offer a new API that blocks inheritance on Windows but not on Unix if the problem can exist on both.",
                                           "updatedAt":  "2020-01-07T17:56:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MTg1NzEzNg==",
                                           "createdAt":  "2020-01-08T01:59:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "madelson",
                                           "body":  "\u003e Would this be useful without the ability to allow specific handles?\r\n\r\nI think it would still be useful, especially if any redirected standard IO handles were automatically included in the opt-in list used to create the process.\r\n\r\nIf there is an exposed API for specifying a list of handles to be inherited, then it should still automatically append any redirected standard IO handles to the list under the hood (this doesn\u0027t deprive the caller of any control since they must already opt into redirection explicitly anyway).",
                                           "updatedAt":  "2020-01-08T01:59:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NDEzODkxMA==",
                                           "createdAt":  "2020-01-14T11:52:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "madelson",
                                           "body":  "@danmosemsft what is the next step here? Here is a potential updated proposal:\r\n\r\n**API**\r\n\r\n```\r\npublic sealed class ProcessStartInfo {\r\n    ...\r\n    public SafeHandle[] InheritedHandles { get; set; }\r\n    ...\r\n}\r\n```\r\n\r\n**Behavior**\r\n\r\n`InheritedHandles` defaults to `null` (for backwards compat). If `InheritedHandles` is set to a non-null value, then only the handles specified will be inherited by the child process. \r\n\r\nAny standard IO handles that get created during process creation will always be inherited (these are already opt-in and it is pointless to create them without inheritance).\r\n\r\nTherefore, the most common usage of this property would be to disable non-standard-IO handle inheritance by setting it to `Array.Empty\u003cSafeHandle\u003e()`. Arguably, this would be the \"right\" thing to do for almost all scenarios, so it may be worth considering making `Array.Empty\u003cSafeHandle\u003e()` the default value (perhaps behind a switch of some sort).\r\n\r\n**Implementation**\r\n\r\nIf `InheritedHandles` is null, the current behavior is maintained.\r\n\r\nOn Windows, this can be implemented straightforwardly with functionality in CreateProcess. Likely we should throw if any of the provided `InheritedHandles` are specifically flagged as not being inheritable.\r\n\r\nOn Unix, there are two options:\r\n* It seems like Java\u0027s approach is to have the rest of the framework always open handles with FD_CLOEXEC. If this is the case for .NET, then after fork but before exec we simply have to remove this flag from any standard IO handles or any specified `InheritedHandles`. One downside of this approach is that there could be an open non-FD_CLOEXEC handle created by native code, but arguably this is not something we should be trying to control for.\r\n* We can loop over all file descriptors after fork but before exec and close them if they are not one of the redirected standard IO descriptors or one of the specified `InheritedHandles`. This loop can be over a fixed integer range, over the entries in `/proc/self/fd` if it is available, or using one of these methods for the range of descriptors below the max inherited value and then using `closefrom` after that if `closefrom` is available.",
                                           "updatedAt":  "2020-01-14T11:52:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NDI1MTEyMw==",
                                           "createdAt":  "2020-01-14T16:13:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "\u003e over the entries in `/proc/self/fd` if it is available\r\n\r\nSo I\u0027m going to add some information here. Yes, you can write this code. Unfortunately you can\u0027t use `opendir()` because `opendir()` calls `malloc()` and you can\u0027t all `malloc()` in a `fork()` child in a multi-threaded process. If another thread was in `malloc()` at the time, you get a deadlock. The way to allocate memory not on the stack is `mmap()`.\r\n\r\nThis means you need to write platform specific code for all platforms. It\u0027s not even hard. I\u0027ve done it before.",
                                           "updatedAt":  "2020-01-14T16:13:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NDU0OTk1NQ==",
                                           "createdAt":  "2020-01-15T08:27:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e ne downside of this approach is that there could be an open non-FD_CLOEXEC handle created by native code, but arguably this is not something we should be trying to control for.\r\n\r\nI\u0027d prefer to accept that Linux doesn\u0027t support the concept of not inheriting handles well. And by design requires multi-threaded applications to create CLOEXEC handles.\r\n\r\n\u003e public SafeHandle[] InheritedHandles { get; set; }\r\n\r\nThis should be some IntPtr -\u003e SafeHandle Dictionary type. You want to control the handle values that are seen by the child.\r\n\r\n\u003e If InheritedHandles is null, the current behavior is maintained.\r\n\r\nAnd if it is set, we can use this on Windows for `bInheritHandles=false` to eliminate taking the lock.\r\n\r\n\u003e Likely we should throw if any of the provided InheritedHandles are specifically flagged as not being inheritable.\r\n\r\nThis gives issue for Linux CLOEXEC handles that you try to inherit.\r\n\r\nInheritedHandles will allow a superset of what is proposed in https://github.com/dotnet/corefx/issues/35685.",
                                           "updatedAt":  "2020-01-15T08:27:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NDYxNzUwOQ==",
                                           "createdAt":  "2020-01-15T11:23:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "madelson",
                                           "body":  "\u003e This should be some IntPtr -\u003e SafeHandle Dictionary type. You want to control the handle values that are seen by the child.\r\n\r\n@tmds can you explain? `SafeHandle` holds an `IntPtr` internally which you can retrieve with `DangerousGetHandle()`. My understanding is that modern .NET code should use `SafeHandle` over `IntPtr` to make it easier to ensure that handles are GC\u0027d at the right time.",
                                           "updatedAt":  "2020-01-15T11:23:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NDY3OTQxMQ==",
                                           "createdAt":  "2020-01-15T14:18:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e @tmds can you explain? SafeHandle holds an IntPtr internally which you can retrieve with DangerousGetHandle(). My understanding is that modern .NET code should use SafeHandle over IntPtr to make it easier to ensure that handles are GC\u0027d at the right time.\r\n\r\nThese IntPtr are the values of filedescriptors the program is operating on. For example, stderr is file descriptor 2. If you ad `2\u003e/dev/null` to a commandline, you\u0027re telling it to open `/dev/null` and make that file descriptor 2 of the program that is started.\r\nBetween fork and execve, [dup2/dup3](http://man7.org/linux/man-pages/man2/dup.2.html) are used to map the SafeHandle.IntPtrs to the fds the application is expecting.",
                                           "updatedAt":  "2020-01-15T14:18:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NDc0NTQzMQ==",
                                           "createdAt":  "2020-01-15T16:40:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@madelson If I were actually trying to use this API for explicitly controlling extra inherited handles, it\u0027s most likely I only have them in `IntPtr`, not `SafeHandle` in the first place, because they came from native API requests.",
                                           "updatedAt":  "2020-01-15T16:40:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NDkwODc1Nw==",
                                           "createdAt":  "2020-01-15T23:39:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "madelson",
                                           "body":  "@jhudsoncedaron I may be mistaken, but doesn\u0027t `SafeHandle` work with p/invoke?",
                                           "updatedAt":  "2020-01-15T23:39:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NDkxMDkwNA==",
                                           "createdAt":  "2020-01-15T23:47:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@madelson: Try declaring two functions with identical signatures except for return two different derived classes of `SafeHandle` because the handle ownership rule in effect depends on the call locus.\r\n\r\n`SafeHandle` is great for higher-level abstractions. `SafeHandle` is great for libraries. `SafeHandle` is a problem for a streight-shot set of calls to set up and use a native handle in one function ten times (that is, ten functions, each with one native handle local scoped to the function.)",
                                           "updatedAt":  "2020-01-15T23:50:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NTY5NzM0OA==",
                                           "createdAt":  "2020-01-17T16:29:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "whoisj",
                                           "body":  "Native API more often than not return integer or Boolean values to signal success/failure, with output values generally being written to provided arguments. Think C#\u0027s `out` parameters. In which case, it is easy to provide both `IntPtr` and `SafeHandle` support.\r\n\r\n```C#\r\npublic static extern int NativeFunction(IntPtr input, out IntPtr handle_out);\r\n\r\npublic static extern int NativeFunction(SafeHandle input, out SafeHandle handle_out);\r\n```",
                                           "updatedAt":  "2020-01-17T16:29:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NTc1MjQyNA==",
                                           "createdAt":  "2020-01-17T18:58:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "cc @JeremyKuhne @carlossanlop (for IO)\r\n@stephentoub @jkotas how would you feel about [the proposal above](https://github.com/dotnet/corefx/issues/306#issuecomment-574138910)? Disregarding the exact API shape which can be figured out. For Windows, the value seems clear and also the implementation. The sticking point is that it would probably have to throw PNSE for Linux, unless someone comes up with a new idea here. So we would have a Windows-only API.",
                                           "updatedAt":  "2020-01-17T18:58:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NTc2MDA0NA==",
                                           "createdAt":  "2020-01-17T19:20:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I would be fine with adding an API for this.\r\n\r\n\u003e The sticking point is that it would probably have to throw PNSE for Linux\r\n\r\nIt can be no-op on platforms where this cannot be controlled. The API would basically say \"I do not depend on inheritance of random handles in the process, except for the ones that I have explicitly listed here. The implementation may, but is not required to, take advantage of this fact for better performance.\".",
                                           "updatedAt":  "2020-01-17T19:20:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NTc2MDE5NA==",
                                           "createdAt":  "2020-01-17T19:20:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Related: https://www.microsoft.com/en-us/research/publication/a-fork-in-the-road/",
                                           "updatedAt":  "2020-01-17T19:20:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NTc2NzU3NA==",
                                           "createdAt":  "2020-01-17T19:41:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e It can be no-op on platforms where this cannot be controlled. The API would basically say \"I do not depend on inheritance of random handles in the process, except for the ones that I have explicitly listed here. The implementation may, but is not required to, take advantage of this fact for better performance.\".\r\n\r\nMy only thought here is, would that make it hard to implement later? One might say \"may, but is not required to\" in the docs, but that doesn\u0027t stop code assuming that it doesn\u0027t, and getting surprised later. Whereas throwing would make it possible to implement later.\r\n\r\n(Sounds like possibly `spawn` and its `file_actions` might offer a way forward on Linux someday ? - but I am completely out of my area of expertise. @tmds?)\r\n",
                                           "updatedAt":  "2020-01-17T19:41:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NTc2OTM0MQ==",
                                           "createdAt":  "2020-01-17T19:46:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@danmosemsft : I\u0027ve been able to do it on Linux since it was first proposed. If I had to do it on Mac I\u0027d have revert to the close 32k handles loop because I don\u0027t have a Mac to verify the `/proc` route. Unfortunately, implementing handle inheritance control as inherit all is deadlock territory.\r\n\r\nYou can\u0027t use the `spawn` family because you want to support changing userid and current directory.",
                                           "updatedAt":  "2020-01-17T19:46:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NTc3Mzk5NQ==",
                                           "createdAt":  "2020-01-17T20:00:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "There are two different purposes discussed here:\r\n\r\n1. Better create process performance / scalability: An API that opts-in better create process performance can be no-op where the underlying platform does not support. It is what I had in my mind in my response above.\r\n\r\n2. Functionality - guaranteeing that all random handles are closed: An API for this would have to throw when the underlying platform does not allow us to implement this. It is unclear what this API would do when it is possible to implement, but the implementation is slow (ie via the 32k handles loop).\r\n\r\nWe may want to look at these as two APIs.\r\n\r\n\u003e  doesn\u0027t stop code assuming that it doesn\u0027t\r\n\r\nThe code out there makes invalid assumptions like these all the time. We do not maintain bug-for-bug compatibility between major .NET Core versions to keep code with invalid assumptions like these working.",
                                           "updatedAt":  "2020-01-17T20:00:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NTc3NTk2Ng==",
                                           "createdAt":  "2020-01-17T20:07:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@jkotas : I can write a fast solution for a Mac if you can test it.",
                                           "updatedAt":  "2020-01-17T20:07:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjE2Mjc1MQ==",
                                           "createdAt":  "2020-05-09T11:41:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tyrrrz",
                                           "body":  "This issue is causing problems in a project I\u0027m maintaining when combined with self-contained single-file deployments. It appears that when a self-contained single-file app runs, it claims a file handle on its exe and then unpacks the contents to a temp directory, without freeing the handle right away. Because of that, child processes inherit the handle and can\u0027t obtain write access for the original exe file (which my project needs to overwrite it with a different file as part of an auto-update).",
                                           "updatedAt":  "2020-05-09T11:42:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjE5MTA4NQ==",
                                           "createdAt":  "2020-05-09T15:16:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e It appears that when a self-contained single-file app runs, it claims a file handle on its exe and then unpacks the contents to a temp directory, without freeing the handle right away. \r\n\r\nA bug like this was fixed by https://github.com/dotnet/runtime/pull/2272 . Do you see the problem with this fix? You can try nightly .NET 5 build from https://github.com/dotnet/installer . Also, the fix is scheduled to be included in .NET 3.1.4 update (https://github.com/dotnet/core-setup/pull/9010).",
                                           "updatedAt":  "2020-05-09T15:16:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjE5MTMxOA==",
                                           "createdAt":  "2020-05-09T15:18:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tyrrrz",
                                           "body":  "@jkotas that seems to be exactly the fix for my problem, thanks!",
                                           "updatedAt":  "2020-05-09T15:18:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjE5NjExNw==",
                                           "createdAt":  "2020-05-09T15:52:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Joe4evr",
                                           "body":  "\u003e Next steps: We need to decide how to introduce Windows-only APIs. Ideally BCL is mostly platform agnostic. It is something we want in BCL.\r\n\r\nNow that the plan for .NET 5 (and beyond) is to have platform-specific APIs shipped under a TFM suffix, is this not solved? When the developer doesn\u0027t target `net5.0-windows`, they won\u0027t get light-up on the new property, and if they want to multi-target, they should `#ifdef` around the line where they set it.",
                                           "updatedAt":  "2020-05-09T15:52:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjIwMTc1Nw==",
                                           "createdAt":  "2020-05-09T16:30:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@terrajobst  is that consistent with your TFM plan?",
                                           "updatedAt":  "2020-05-09T16:30:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyOTM3NzI1MA==",
                                           "createdAt":  "2020-05-15T17:12:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Ping @terrajobst ",
                                           "updatedAt":  "2020-05-15T17:12:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2Mjg2MDI5MQ==",
                                           "createdAt":  "2020-07-23T07:30:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This should be ready to review. We have a plan for Windows-specific APIs now, we have just approved other similar Windows specific properties (https://github.com/dotnet/runtime/issues/28114).",
                                           "updatedAt":  "2020-07-23T07:30:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzY1MjE5MQ==",
                                           "createdAt":  "2020-07-24T17:37:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "[Video](https://www.youtube.com/watch?v=TofmrPLEeFI\u0026t=0h10m48s)\n\n* It shouldn\u0027t default to `true`, it should return the actual behavior of the underlying platform.\r\n* Marking the setter as platform specific makes sense, assuming we can\u0027t (or don\u0027t want to) implement the necessary gymnastics.\r\n* @adamsitnik @eiriktsarpalis please check what the possible behavior/desirable behavior for Linux/Unix/macOS is\r\n\r\n```C#\r\nnamespace System.Diagnostics\r\n{\r\n    public partial class ProcessStartInfo\r\n    {\r\n        public bool InheritHandles\r\n        {\r\n            get;\r\n            [MinimumOSPlatform(\"windows7.0\")]\r\n            set;\r\n        }\r\n    }\r\n}\r\n```\r\n",
                                           "updatedAt":  "2020-07-24T19:23:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzY1NTQ4Mg==",
                                           "createdAt":  "2020-07-24T17:45:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "In the UNIX environment, if you don\u0027t lift a finger the behavior will be `true` for outside-provided handles and `false` for handles opened by the framework itself. Pretty much everybody\u0027s depending on the fact that framework-opened handles aren\u0027t inherited.",
                                           "updatedAt":  "2020-07-24T17:45:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzY1OTk3Nw==",
                                           "createdAt":  "2020-07-24T17:56:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e it should return the actual behavior of the underlying platform.\r\n\r\nThe default behavior of both Windows and Unix is to inherit handles that are marked as inheritable.\r\n\r\n\u003e In the UNIX environment, if you don\u0027t lift a finger the behavior will be true for outside-provided handles and false for handles opened by the framework itself\r\n\r\nRight, the difference between Windows and Unix is that handles in ordinary code are typically opened as non-inheritable on Windows and inheritable on Unix.",
                                           "updatedAt":  "2020-07-24T17:56:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc421eur",
                                           "createdAt":  "2021-09-15T12:49:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e there is no nice way to do this on Linux.\r\n\r\nIn the meanwhile Linux 5.9 (nov 2020) introduced [close_range](https://man7.org/linux/man-pages/man2/close_range.2.html).\r\n\r\nThe sensible default would be to not inherit handles (beside stdin/out/err) since that is what most applications need, and that avoids issues due to inherited handles. However, that would be a breaking change.",
                                           "updatedAt":  "2021-09-15T12:50:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43N-4E",
                                           "createdAt":  "2021-09-24T07:34:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "This issue has been on my mind since I looked into https://github.com/dotnet/runtime/pull/59079.\r\n\r\nI\u0027d like there to be more control to allow passing handles, without unintentionally leaking others.\r\n\r\nSomething like:\r\n\r\n```cs\r\n    public partial class ProcessStartInfo\r\n    {\r\n        public SafeHandle?[]? Handles { get; set; }\r\n    }\r\n```\r\n\r\nWhen set, this controls the handles passed to the child.\r\n\r\nThe assigned array must have a length of at least 3 to explicitly indicate the handles for stdin, stdout, stderr.\r\n\r\nThe item at index `i` becomes `fd` `i` in the child.\r\n\r\nAll file descriptors at `Handles.Length` and higher are closed (if the platform supports it).\r\n\r\nWhen an item is `null` it is passed as is to to the child.\r\n\r\nThe proposed `InheritHandles` can remain as a shortcut to setting `Handles = new[] { null, null, null }` (when `InheritHandles = false`).\r\n\r\nIt would be doable to implement this on Linux/Unix.\r\nCan this API be implemented on Windows?",
                                           "updatedAt":  "2021-09-24T07:43:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Ov0y",
                                           "createdAt":  "2021-09-24T13:10:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB-Joog==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "whoisj",
                                                                               "createdAt":  "2021-10-13T16:01:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Can this API be implemented on Windows?\r\n\r\nI do not think this is implementable on Windows. Windows only lets you specify the subset of inheritable handles to inherit for given process (look for `PROC_THREAD_ATTRIBUTE_HANDLE_LIST`).",
                                           "updatedAt":  "2021-09-24T13:10:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Sf1D",
                                           "createdAt":  "2021-09-27T07:13:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCR_p5g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "whoisj",
                                                                               "createdAt":  "2021-10-13T16:03:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2022-03-08T22:52:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tmds",
                                           "body":  "Thank you for the pointer @jkotas.\r\n\r\nI took a look at the docs. From what I read, on Windows we can\u0027t control what file descriptor the handle becomes in the child process. We can drop that requirement.\r\n\r\nThe rest should be doable by setting `hStdInput`, `hStdOutput`, `hStdError` based on the first three items in `Handles`, and passing remaining handles via `PROC_THREAD_ATTRIBUTE_HANDLE_LIST`.\r\n\r\nThe approved `InheritHandles` is meaningful on its own.\r\n\r\nI\u0027ll write up a separate issue about the `Handles` use-case.",
                                           "updatedAt":  "2021-09-27T07:13:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_T5vW",
                                           "createdAt":  "2022-03-08T20:32:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Going through stale issues -- this is well understood and can be up for grabs, right? Anyone interested in offering a PR?",
                                           "updatedAt":  "2022-03-08T20:32:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DwQY7",
                                           "createdAt":  "2022-05-25T04:51:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "@danmoseley I think this issue is important for quite a lot of users (see 👍🏼-Reactions of the top post).\r\nCan we schedule this for .NET 7? Or is it already too late for that?",
                                           "updatedAt":  "2022-05-25T04:51:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Dw7dP",
                                           "createdAt":  "2022-05-25T07:40:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "@deeprobin fyi, because .NET opens handles with CLOEXEC, this is less of a problem now on Linux than when the issue was first created.\r\n\r\n_Future_ milestone means Microsoft doesn\u0027t have it planned for .NET 7. Community can still make the contribution.",
                                           "updatedAt":  "2022-05-25T07:40:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DxX-q",
                                           "createdAt":  "2022-05-25T09:33:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Is it even feasible @tmds? It feels like we would need to change all existing open handles, right? (e.g. undo CLOEXEC)\r\n\r\nI\u0027m wondering if we should focus on API to pass specific handle to child process. (and close this) ",
                                           "updatedAt":  "2022-05-25T09:33:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Dy2uB",
                                           "createdAt":  "2022-05-25T15:06:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Future milestone means Microsoft doesn\u0027t have it planned for .NET 7. Community can still make the contribution.\r\n\r\n@deeprobin Feel free to grab this issue if you are interested.\r\n\r\n\u003e Is it even feasible @tmds? \r\n\r\nIt is not reasonably possible to implement this proposal on non-Windows. It is why the property is marked as Windows-specific. It is addressing a specific real problem on Windows.\r\n\r\n\u003e I\u0027m wondering if we should focus on API to pass specific handle to child process. (and close this)\r\n\r\nIt is very hard to design a uniform API set around this. Windows and Unix treat handles very differently during create process.",
                                           "updatedAt":  "2022-05-25T15:06:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Dy4RM",
                                           "createdAt":  "2022-05-25T15:09:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@jkotas : The proposed API from ages ago that you give a list of handles to inherit can be implemented on both. You can undo CLOEXEC in the fork child with fcntl calls on Unix, and you can use the CreateProcess thing that gives the list of handles to inherit on Windows.",
                                           "updatedAt":  "2022-05-25T15:09:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EDw-v",
                                           "createdAt":  "2022-05-31T08:33:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOChj9hA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "whoisj",
                                                                               "createdAt":  "2022-06-13T17:48:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e Is it even feasible @tmds? It feels like we would need to change all existing open handles, right? (e.g. undo CLOEXEC)\r\n\r\nI think the main use-case for this API is to prevent handles from leaking into the child by setting `InheritHandles = false`.\r\n\r\nSo in case of `InheritHandles = true` we can keep doing what we\u0027re currently doing (which is good for backwards compat).\r\n\r\nAnd in case of `InheritHandles = false` we\u0027d `close` all `fds \u003e 2`.\r\n\r\n\u003e I\u0027m wondering if we should focus on API to pass specific handle to child process. (and close this)\r\nIt is very hard to design a uniform API set around this. Windows and Unix treat handles very differently during create process.\r\n\r\nOn Unix, the child process expects the caller to pass files as specific fds (by using [dup](https://man7.org/linux/man-pages/man2/dup.2.html)).\r\n\r\nOn Windows, the handle value stays the same. And it is communicated to the child process for example via an argument as shown in the documentation of `AnonymousPipeServerStream`: https://docs.microsoft.com/en-us/dotnet/api/system.io.pipes.anonymouspipeserverstream?view=net-6.0.\r\n\r\nSee https://github.com/dotnet/runtime/issues/13943#issuecomment-926412292 and next comments about a potential `Handles` API.",
                                           "updatedAt":  "2022-05-31T08:33:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fw6_W",
                                           "createdAt":  "2022-06-29T20:15:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "\u003e @deeprobin Feel free to grab this issue if you are interested.\r\n\r\nI can take a look at the Issue. I think the Windows implementation will not be that difficult. \r\n\r\n@tmds is the whole thing possible on Unix to the extent of this API?",
                                           "updatedAt":  "2022-06-29T20:15:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fw7du",
                                           "createdAt":  "2022-06-29T20:18:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joshudson",
                                           "body":  "@deeprobin : I can implement on Linux even on very old kernels. Need somebody else for Mac OSX though. It is not allowed to call `malloc()` and therefore `opendir()` from inside a `fork()` child when the parent process is multithread because of deadlocks; thus making the implementation system-specific.",
                                           "updatedAt":  "2022-06-29T20:19:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J0k-z",
                                           "createdAt":  "2022-09-06T18:39:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "I run into a small problem in the Windows implementation.\r\n\r\n`Kernel32.CreateProcess` has the possibility to pass an argument for InheritHandles, but this is not possible if the process should be created for a certain user (`Advapi32.CreateProcessWithLogonW`). \r\nIs there a possibility to tell Windows that handles should be inherited?",
                                           "updatedAt":  "2022-09-06T18:39:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J0l55",
                                           "createdAt":  "2022-09-06T18:44:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC23xfA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kyle-rader",
                                                                               "createdAt":  "2023-02-28T06:08:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "Also, I\u0027m not sure how to proceed if the property UseShellExecute = true as well as InheritHandles = true, which technically is not possible through the Windows API.\r\nThrow an exception? Ignore? \r\n\r\n/cc @danmoseley @terrajobst ",
                                           "updatedAt":  "2022-09-06T18:44:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J0m0c",
                                           "createdAt":  "2022-09-06T18:48:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC23xdw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kyle-rader",
                                                                               "createdAt":  "2023-02-28T06:08:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@deeprobin : I\u0027d expect a throw if both UseShellExecute and InheritHandles are set.\r\n\r\nCreateProcessWithLogonW is _bugged_ in Windows. What I end up having to do is give it an executable that I control and fix stuff up on the other side.",
                                           "updatedAt":  "2022-09-06T18:48:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KCJ-B",
                                           "createdAt":  "2022-09-09T14:54:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "whoisj",
                                           "body":  "\u003e CreateProcessWithLogonW is bugged in Windows.\r\n\r\nthat is an incredibly bold statement, and I am not sure it is correct. in fact, I highly doubt that it is correct. an API as fundamental as `CreateProcessWithLogonW` is very unlikely to be \"bugged\". It is far more likely that it just doesn\u0027t behave in a manner that you might expect or prefer.\r\n\r\nYou might notice that I was [asked to propose an API for this](https://github.com/dotnet/runtime/issues/13943#issuecomment-265379202), but that never happened because I left MSFT shortly thereafter for my current role. Even so, the best method to achieve what people are looking for here is to use [`InitializeProcThreadAttributeList`](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-initializeprocthreadattributelist) and mostly ignore `bInheritHandles` because the later conflicts with redirected input/output.",
                                           "updatedAt":  "2022-09-09T14:54:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KCOdV",
                                           "createdAt":  "2022-09-09T15:08:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@whoisj : The time has long passed to ship a service that provides new API endpoints for login management. I have been faced with too many arbitrary limitations because no API at all does what is necessary and everybody hates it when you reach for NtCreateToken because there is no other.\r\n\r\nOne scenario: My code has admin rights and needs to start a process as a user that it has username and password for, but the user only has privileges to log in as a service. I have STDIN, STDOUT, and STDERR redirects that need to be placed. I ought to be able to do this, but I can\u0027t because of arbitrary restrictions.",
                                           "updatedAt":  "2022-09-09T15:17:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Nax4S",
                                           "createdAt":  "2022-11-01T17:25:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "whoisj",
                                           "body":  "@jhudsoncedaron if you\u0027re on Windows there are [advapi32!SaferCreateLevel](https://learn.microsoft.com/en-us/windows/win32/api/winsafer/nf-winsafer-safercreatelevel) and [advapi32!CreateProcessAsUserW](https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessasuserw) which do most of what you want. You\u0027ll likely have to use [kernel32!CreateNamedPipeW](https://learn.microsoft.com/en-us/windows/win32/api/namedpipeapi/nf-namedpipeapi-createnamedpipew) to create proper stdin, stdout, and stderr pipes to make it work ; but it CAN work - I\u0027ve done it. That how Visuals Studio executes `git.exe` when you use Team Explorer.",
                                           "updatedAt":  "2022-11-01T17:28:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Na0Cf",
                                           "createdAt":  "2022-11-01T17:32:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@whoisj : CreateProcessAsUserW requires SE_ASSIGNPRIMARYTOKEN_NAME; which admins don\u0027t have. I tried that already. I was able to get some parts of it working by spawning a service, but ultimately process ends up in the wrong session if I do that.",
                                           "updatedAt":  "2022-11-01T17:34:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Na20t",
                                           "createdAt":  "2022-11-01T17:42:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "whoisj",
                                           "body":  "when user run Visual Studio elevated (many do), VS runs git not elevated, and it uses `CreateProcessAsUserW` to do so.\r\n\r\nthese are just regular users using the \"Run as administrator\" option - as you know, Windows does have needless \"root\" accounts - so they\u0027re just running as an elevated version of their normal user account.\r\n\r\nThis works just fine for Visual Studio. There\u0027s no magic \"secret sauce\" or \"hidden API\" involved, it\u0027s all public stuff.",
                                           "updatedAt":  "2022-11-01T17:43:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Na4My",
                                           "createdAt":  "2022-11-01T17:47:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@whoisj: Oh. You missed \"user only has privileges to log in as a service\" out of the scenario.",
                                           "updatedAt":  "2022-11-01T17:47:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NuhEX",
                                           "createdAt":  "2022-11-04T19:10:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "whoisj",
                                           "body":  "ah my mistake. not sure how to resolve that issue as I\u0027ve never tried. sorry.",
                                           "updatedAt":  "2022-11-04T19:10:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WWNLH",
                                           "createdAt":  "2023-02-28T18:25:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESjlXw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2023-02-28T23:21:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TigerHix",
                                                                               "createdAt":  "2023-05-18T11:41:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-11-04T19:19:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BunnyTub",
                                                                               "createdAt":  "2025-05-18T23:49:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "kyle-rader",
                                           "body":  "To beat a dead horse, this was the root cause of a tricky bug in a CLI framework we use internally that handles automatic telemetry collection. To avoid blocking your shell while waiting to send that telemetry, the framework spawns an instance of the CLI with event data so it can go send it in the background and not wait (fire and forget). This works great at a shell/terminal. Shaves off almost 500ms of runtime. It also works great when calling these tools from other languages where handles are not being inherited automatically. But if another Dotnet process, shells out to one of these apps, it ends up getting blocked on both the main CLI process and any children telemetry processes. We\u0027ve mitigated this by moving to `UseShellExecute = true`, but now we can\u0027t stream event data over stdin :(. ",
                                           "updatedAt":  "2023-02-28T18:25:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mIv0h",
                                           "createdAt":  "2023-09-11T10:01:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODzNq-Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2024-01-10T09:17:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wisemoth",
                                                                               "createdAt":  "2024-09-23T12:15:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "krwq",
                                           "body":  "Since this API is approved I\u0027d suggest if anyone is interested to contribute. Even throwing PNSE on platforms you currently don\u0027t plan to support would improve the state. Most people don\u0027t need this and it\u0027s only useful when you actually encounter bugs like mentioned above. Make sure to look at the API notes and let us know if you plan to pick this up so that no one duplicates work. For now I can set milestone to 9.0 so this issue is considered for 9.0 (given number of upvotes, weird issues affected people can see, how long this has been open and how relatively cheap it is to add support at least on Windows - haven\u0027t investigated Linux/macOS) - note this doesn\u0027t guarantee we will actually do anything in 9.0 but we can at least consider this - we\u0027ll look at the area holistically and pick which issues are most important.",
                                           "updatedAt":  "2023-09-11T10:01:01Z"
                                       }
                                   ],
                         "totalCount":  112
                     },
        "title":  "Make Process.Start have a option to change handle inheritance",
        "labels":  [
                       "api-approved",
                       "area-System.Diagnostics.Process",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/18697",
        "createdAt":  "2016-09-24T19:52:29Z",
        "number":  18697,
        "author":  "agocke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC662nQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "svick",
                                            "createdAt":  "2016-09-25T12:03:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GalaxiaGuy",
                                            "createdAt":  "2016-09-26T08:19:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shmuelie",
                                            "createdAt":  "2016-09-26T14:45:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aersam",
                                            "createdAt":  "2016-09-27T06:12:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dasMulli",
                                            "createdAt":  "2016-10-11T23:15:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "natemcmaster",
                                            "createdAt":  "2016-10-14T17:51:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "akoeplinger",
                                            "createdAt":  "2016-11-29T11:48:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nil4",
                                            "createdAt":  "2016-11-29T17:04:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jnm2",
                                            "createdAt":  "2016-11-30T16:35:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adamjez",
                                            "createdAt":  "2017-05-06T07:51:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yufeih",
                                            "createdAt":  "2018-08-17T02:24:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2019-01-21T09:40:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jp2masa",
                                            "createdAt":  "2019-01-26T01:37:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2019-05-13T05:48:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielchalmers",
                                            "createdAt":  "2019-08-19T07:52:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Daniel15",
                                            "createdAt":  "2019-10-14T00:22:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AnthonyMastrean",
                                            "createdAt":  "2021-10-14T15:56:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-09-11T00:13:05Z"
                                        }
                                    ],
                          "totalCount":  18
                      },
        "updatedAt":  "2022-10-07T20:05:14Z",
        "body":  "The `Exited` event API is cumbersome for 99% of the way I use processes (run external command, get output when exited). I end up writing a Task-based wrapper every time. It would be great if we could just add an API for that.\r\n\r\nEdit:\r\n- [x] [WaitForExitAsync](https://github.com/dotnet/corefx/issues/34689)\r\n\r\nOther similar issues:\r\n- https://github.com/dotnet/corefx/issues/3483",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOS9HdOA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI0OTM4NTUzOA==",
                                           "createdAt":  "2016-09-24T20:22:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAFGG7w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2016-11-30T16:35:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Yes! I always end up writing this.\n",
                                           "updatedAt":  "2016-09-24T20:22:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1MDE4MDA4Nw==",
                                           "createdAt":  "2016-09-28T14:19:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@agocke, can you propose what you\u0027d want the API to look like?  Are you asking for a method like:\n\n``` C#\npublic Task\u003cint\u003e WaitForExitAsync();\n```\n\nor one like:\n\n``` C#\npublic static Task\u003cProcess\u003e StartAndWaitForExitAsync(ProcessStartInfo startInfo);\n```\n\nor both or something else?\n",
                                           "updatedAt":  "2016-09-28T14:19:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1MDkzNTQ1NQ==",
                                           "createdAt":  "2016-10-01T20:25:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAh5NWA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2016-11-30T16:35:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2019-01-21T09:40:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "svick",
                                           "body":  "Since this would be a convenience API, I think it:\n- should be as convenient as possible\n- doesn\u0027t need to be very efficient\n- doesn\u0027t have to be able to do everything\n\nBecause of that, the API that I would like to see would be something like:\n\n``` c#\npublic class Process\n{\n    public static Task\u003cProcessResult\u003e RunAsync(string fileName);\n    public static Task\u003cProcessResult\u003e RunAsync(string fileName, string arguments);\n\n    // OR:\n    public static Task\u003cProcessResult\u003e RunAsync(string fileName, string arguments = null);\n}\n\npublic class ProcessResult\n{\n    public ProcessResult(int exitCode, string standardOutput, string standardError);\n\n    public int ExitCode { get; }\n    public string StandardOutput { get; }\n    public string StandardError { get; }\n}\n```\n\nThis way, it\u0027s very easy to start a process, wait for it to exit and then get its output.\n\nMy questions:\n- Are there any properties of `ProcessStartInfo` that are common enough that they would be missed here? (`Process.Start()` has overloads that accept `userName`, `password` and `domain`, but entering them doesn\u0027t seem to be a common use case to me.)\n  - If yes, should there be an overload of `RunAsync()` that takes `ProcessStartInfo`? Or should `RunAsync()` have overloads with some additional parameters?\n- Are there any properties of `Process` that would be missed on `ProcessResult`?\n  - If yes, should `ProcessResult` just include a `Process` property?\n  - Should `ProcessResult` have properties for `FileName` and `Arguments`? (If `ProcessResult` had the `Process` property, those would be accessible as e.g. `.Process.StartInfo.FileName`, but that\u0027s pretty long.)\n- Is always capturing both `StandardOutput` and `StandardError` into a `string` acceptable? If not, how should it be controlled?\n",
                                           "updatedAt":  "2016-10-01T20:27:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1MDkzNTY3Mw==",
                                           "createdAt":  "2016-10-01T20:29:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAD_IAA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2016-10-01T20:31:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dasMulli",
                                                                               "createdAt":  "2016-10-11T23:16:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "agocke",
                                           "body":  "I like @svick\u0027s proposal. A few more arguments that could be useful: working directory, environment variables, and \"standard in\" text.\n\nWe have a Roslyn test helper that looks like this:\n\n``` csharp\n        public static ProcessResult Run(\n            string fileName,\n            string arguments,\n            string workingDirectory = null,\n            IEnumerable\u003cKeyValuePair\u003cstring, string\u003e\u003e additionalEnvironmentVars = null,\n            string stdInput = null)\n```\n",
                                           "updatedAt":  "2016-10-01T20:29:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MzU0NTc0Mg==",
                                           "createdAt":  "2016-11-29T11:24:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAFGHCw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JonHanna",
                                                                               "createdAt":  "2016-11-29T12:10:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nil4",
                                                                               "createdAt":  "2016-11-29T17:05:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2016-11-30T16:36:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e Is always capturing both StandardOutput and StandardError into a string acceptable? If not, how should it be controlled?\r\n\r\nI think these should be Streams/Writer/Reader instead of strings. The more I think about it, the more I think there needs to be 2 sets of methods:\r\n\r\n- StartAsync, WaitForExistAsync\r\n- StartAndWaitForExitAsync\r\n",
                                           "updatedAt":  "2016-11-29T11:24:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MzYxODY0Mw==",
                                           "createdAt":  "2016-11-29T16:22:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@davidfowl Why would `StartAsync` need to be `async`? If that was the convenience version that returns something like `ProcessResult`, wouldn\u0027t calling it `StartAsync`/`Start` be confusing, since the existing `Start` returns something different (`Process`)?",
                                           "updatedAt":  "2016-11-29T16:22:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NjQxMzMxMg==",
                                           "createdAt":  "2018-12-12T00:17:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MattKotsenas",
                                           "body":  "Hey everyone, I started to take a look at this issue, and I have an initial proposal and a few additional thoughts.\r\n\r\nI think `WaitForExitAsync` is a pretty straightforward building block API that’s relatively easy to understand and use correctly. I have a version available here: [feature/12039-process-waitforexitasync](https://github.com/dotnet/corefx/compare/master...MattKotsenas:feature/12039-process-waitforexitasync). I can PR it ASAP if people agree. Here\u0027s the proposed API:\r\n\r\n```csharp\r\npublic partial class Process\r\n{\r\n    public Task\u003cbool\u003e WaitForExitAsync(CancellationToken cancellationToken = default) { throw null; }\r\n}\r\n```\r\n\r\nRationale for the API is as follows:\r\n* Method returns `bool` to determine if the process or exited or not, which matches `WaitForExit` semantics.\r\n* Method takes a single, optional parameter, a `CancellationToken`, to support timeouts, which matches `WaitForExit(int timeout)` semantics.\r\n* Method returns `true` if the process terminated before the CancellationToken is cancelled, `false` otherwise. The method does _not_ throw an `OperationCanceledException`.\r\n\r\nDesign notes:\r\n* API doesn\u0027t expose an `WaitForExitAsync(int timeout)` overload since `CancellationToken` has a constructor that takes a timeout, and there\u0027s `CancellationToken.TimeoutAfter()`.\r\n* Because the method internally relies on the `Exited` event and there\u0027s a potential race between setting `EnableRaisingEvents` and the process exiting, I introduced a new instance of `InvalidOperationException` informing the caller to set `EnableRaisingEvents` to make this explicit. If this is deemed undesirable coupling I can move the set into this method, at the expense of possibly throwing and catching the `InvalidOperationException` from `GetProcessHandle()`, which I\u0027d rather avoid if possible.\r\n* The implementation could avoid an `await` in the case that the waited-on process has already exited. I declined to do that for the initial implementation to keep the logic clean for review. I can add that if deemed desirable.\r\n-----\r\n\r\n@davidfowl, I’d like to know more about your thoughts around `StartAsync` and `StartAndWaitForExitAsync`? As @svick mentioned, `Start` and `StartAsync` seems confusing to me, since in both cases the process is just started and doesn’t block the thread.\r\n\r\nI started playing around with a `StartAndWaitForExitAsync`, but I’ve run into a roadblock around how to handle input and output.\r\n\r\n1. Doing something like @svick’s `ProcessResult` that returns Readers / Writers could result in deadlocks for large inputs, unless the API copies output to another buffer that we control, which feels bad for perf.\r\n2. Looking at usage across places like StackOverflow, lots of people are using the input / output buffers as an ad-hoc communication protocol and need to interleave writes to StandardInput based on the results of the previous data read from StandardOutput. That means an API like this might be limited to simple \"start-and-wait-without-interaction\" scenarios, in which case it doesn’t gain much over `process.Start(); await process.WaitForExitAsync();`.\r\n\r\nThe best I’ve come up with so far is this [feature/12039-process-startandwaitforexitasync](https://github.com/MattKotsenas/corefx/compare/feature/12039-process-waitforexitasync...MattKotsenas:feature/12039-process-startandwaitforexitasync).\r\n\r\n```csharp\r\npublic partial class Process\r\n{\r\n    public Task\u003cProcess\u003e StartAndWaitForExitAsync(Action\u003cstring\u003e onStandardOutputWrite = null, Action\u003cstring\u003e onStandardErrorWrite = null, CancellationToken cancellationToken = default) { throw null; }\r\n}\r\n```\r\n\r\nRationale and design notes for the API is as follows:\r\n* Method returns `Process` so the user can inspect the process and get information as needed (e.g. `ExitCode`). A new object such as `ProcessResult` could be introduced, but if cancellation is requested before the process terminates, the user needs access to the process to possibly take action (i.e. wait on it again or kill it). Additionally, making the ProcessResult hold the process requires ProcessResult to implement `IDisposable`, which seems like a bad tradeoff given that any information on the ProcessResult can also be gotten from the Process.\r\n* By making the user responsible for collecting strings again we can avoid the buffer deadlock issues, at the expense of having optional parameters that have to align with the process’s StartInfo.\r\n* Waiting semantics are delegated to `WaitForExitAsync`.\r\n* Note that this API _forces_ processes with redirected output to use the async read pattern, but since the API returns a `Process`, users could attempt to access the underlying streams, which would be empty (and probably lead to confusion).\r\n\r\nAgain, I’m not super thrilled with this design, so if we feel it’s important I want to discuss what use cases we’re after. The Process class already has a fair bit of “call this before you use that or it breaks” style pitfalls that I’d like to avoid contributing to.\r\n\r\nIf there’s anything else, or if you have any questions, please let me know. Thanks!\r\n",
                                           "updatedAt":  "2018-12-12T00:17:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NDU2MTQ3Nw==",
                                           "createdAt":  "2019-01-15T21:38:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MattKotsenas",
                                           "body":  "Since this issue is pretty stale, I\u0027m pinging @wtgodbe, @krwq, as area owners per [this document](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/issue-guide.md) to hopefully get the discussion started again.\r\n\r\nIf there\u0027s another more appropriate place or method to discuss this, please let me know. Thanks!",
                                           "updatedAt":  "2019-01-15T21:38:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NDU5NDEwOQ==",
                                           "createdAt":  "2019-01-15T23:40:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@MattKotsenas I don\u0027t see a point of returning a bool for WaitForExitAsync, I think `Task\u003cint\u003e` or just `Task` makes more sense.. If process has exited then Task will be completed otherwise it won\u0027t. If you want to finish waiting earlier then you request cancellation and still can check if cancellation happened earlier than normal completion. As for StartAsync I can see how in many cases you want to just run short-living process and get the exit code and get output and possibly write some output.\r\n\r\nPossibly StartAsync could take StreamWriter/StreamReader or just Stream for each of stdout, stderr and stdin and basically give Process class sole control of them until it is done. I.e. if you pass Console.OpenStandardOutput() to that it would start printing to standard output - null would mean you don\u0027t want to redirect.",
                                           "updatedAt":  "2019-01-15T23:40:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NDk1OTMyOA==",
                                           "createdAt":  "2019-01-16T21:57:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MattKotsenas",
                                           "body":  "@krwq I agree that just `Task` makes the most sense for `WaitForExitAsync`; it more naturally follows idiomatic `async` / `await` coding styles. I\u0027ve updated my branch [feature/12039-process-waitforexitasync](https://github.com/dotnet/corefx/compare/master...MattKotsenas:feature/12039-process-waitforexitasync) with the updated API signature and tests to show some example uses.\r\n\r\nNow instead of checking the `bool`, the caller can explicity check `process.HasExited` for process status, and for cancellation either catch the `OperationCanceledException` or check the task\u0027s `IsCanceled` property.\r\n\r\nTo keep things simple, mind if we just focus on `WaitForExitAsync` for now, and come back to the \"start and wait for exit async\" once the first API is settled?",
                                           "updatedAt":  "2019-01-16T21:57:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NTI5MjU2OA==",
                                           "createdAt":  "2019-01-17T19:08:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "Sounds good to me. WaitForExitAsync is fairly agreed on while the StartAsync still has some open ends.\r\n\r\nLet\u0027s perhaps create a separate issue for WaitForExitAsync and I\u0027ll update the first post here with the link to that.",
                                           "updatedAt":  "2019-01-17T19:08:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NTcyOTAzNg==",
                                           "createdAt":  "2019-01-19T00:24:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MattKotsenas",
                                           "body":  "@krwq Opened dotnet/corefx#34689 to split off `WaitForExitAsync`. Let me know if you need anything else. Thanks!",
                                           "updatedAt":  "2019-01-19T00:24:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NjAwOTQyMA==",
                                           "createdAt":  "2019-01-21T09:43:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "I made a proposal for a more convenient process API a while ago: https://github.com/dotnet/corefx/issues/3483\r\n\r\nThere is a lot of overlap with [svick\u0027s proposal](https://github.com/dotnet/corefx/issues/12039#issuecomment-250935455) but also some alternative ideas.",
                                           "updatedAt":  "2019-01-21T09:43:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NjE3NDcxNg==",
                                           "createdAt":  "2019-01-21T19:14:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@GSPP thanks for linking to this issue, I\u0027ve edited the first post so it doesn\u0027t get lost.",
                                           "updatedAt":  "2019-01-21T19:14:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5OTA3MzAyNw==",
                                           "createdAt":  "2021-03-15T04:00:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NicolasDorier",
                                           "body":  "For those stuck, I am currently copy/pasting this class in almost all my projects when I have to deal with Process.\r\n\r\nhttps://github.com/dotnet/sdk/blob/master/src/BuiltInTools/dotnet-watch/Internal/ProcessRunner.cs\r\n",
                                           "updatedAt":  "2021-03-15T04:05:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5L0d04",
                                           "createdAt":  "2022-10-07T20:05:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FrankPalmieri",
                                           "body":  "There are two projects on github: [RunProcessAsTask](https://github.com/jamesmanning/RunProcessAsTask) and [CliWrap](https://github.com/Tyrrrz/CliWrap) which provide similar functionality - I prefer RunProcessAsTask and have been using in production for a few years - seems like a pretty straightforward extension to the current Process class.  ",
                                           "updatedAt":  "2022-10-07T20:05:14Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "Proposal: Add Task-based Run API for System.Diagnostics.Process",
        "labels":  [
                       "api-needs-work",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/21941",
        "createdAt":  "2017-05-24T16:51:17Z",
        "number":  21941,
        "author":  "powercode",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3ZZbQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SRGOM",
                                            "createdAt":  "2019-03-30T04:37:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AraHaan",
                                            "createdAt":  "2021-03-20T17:12:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "augustoproiete",
                                            "createdAt":  "2021-09-02T23:12:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mklement0",
                                            "createdAt":  "2022-12-03T15:34:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cfbao",
                                            "createdAt":  "2023-06-05T04:53:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fitdev",
                                            "createdAt":  "2023-12-18T14:22:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bogdan-patraucean",
                                            "createdAt":  "2024-03-16T22:44:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "victor-yarema",
                                            "createdAt":  "2024-04-22T16:02:59Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2021-09-02T23:05:37Z",
        "body":  "# Rationale and Usage\r\n\r\nWhen writing tools, it is often useful to be able to get to information about the processes you manage.\r\nThis is easy on Linux with /proc, but harder on windows.\r\nWhen getting parent process, it is important to check the start time of the process with the PID of the queried process to see if it is older to prevent errors when process ids are recycled.\r\n\r\n# API proposal\r\n```csharp\r\nnamespace System.Diagnostics\r\n{\r\n     public class  Process : Component\r\n     {\r\n           public string CommandLine { get; }\r\n           public IDictionary\u003cstring,string\u003e Environment{ get; }\r\n           public Process ParentProcess { get; }\r\n     }\r\n}\r\n```\r\n\r\nI would suggest returning `null` if the user doesn\u0027t have access to the requested property instead of having to handle exceptions.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONl3VMQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NzI4NjQ2Mw==",
                                           "createdAt":  "2018-01-12T16:30:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rainersigwald",
                                           "body":  "We could use this in MSBuild. We attempt to find worker processes to connect to by enumerating running MSBuild processes and then trying to connect to them.\r\n\r\nOn Windows + full framework, this is done with `Process.GetProcessesByName(\"MSBuild\")`, but on core (any OS) the process name tends to be the host . . . so we\u0027ll have to try to connect to every `dotnet` process, instead of filtering to only ones that are running MSBuild. If we had access to the command line, we could be smarter in both cases by attempting to connect only to processes started with the background-process command line parameters.",
                                           "updatedAt":  "2018-01-12T16:30:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NTEwODI1Nw==",
                                           "createdAt":  "2018-02-13T00:17:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfGtuA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "victor-yarema",
                                                                               "createdAt":  "2024-04-22T16:03:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jnm2",
                                           "body":  "`IReadOnlyDictionary`?",
                                           "updatedAt":  "2018-02-13T00:17:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NTE2OTIzNQ==",
                                           "createdAt":  "2018-02-13T07:00:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "powercode",
                                           "body":  "I think a `string` is better. There may be many nuances to how a command line is split into it\u0027s parts, and I think that should be left to some higher level.",
                                           "updatedAt":  "2018-02-13T07:00:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NTI0NzM5OA==",
                                           "createdAt":  "2018-02-13T12:04:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwoEnA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mklement0",
                                                                               "createdAt":  "2022-12-03T15:35:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jnm2",
                                           "body":  "Unless you\u0027re not on Windows. Then to get a single string you have to join the native process args, so you lose information.",
                                           "updatedAt":  "2018-02-13T12:04:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NTI2MTcxMQ==",
                                           "createdAt":  "2018-02-13T13:08:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "powercode",
                                           "body":  "In that case, we should be able to do the same thing on windows as .net executables do to get the `string[] args`  in the `Main` function.",
                                           "updatedAt":  "2018-02-13T13:08:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NTI2MjAwOQ==",
                                           "createdAt":  "2018-02-13T13:10:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "powercode",
                                           "body":  "Oh, now I understand that we may be talking about the environment. And in that case `IReadOnlyDictionary` seams reasonable.",
                                           "updatedAt":  "2018-02-13T13:10:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NTI2MjM2Mg==",
                                           "createdAt":  "2018-02-13T13:11:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jnm2",
                                           "body":  "Ah, sorry! Yes, `IReadOnlyDictionary\u003cstring, string\u003e` for the environment.\r\n`string` for the command line works well on Windows but what about other operating systems? Do we want two properties like is being added for ProcessStartInfo (https://github.com/dotnet/corefx/issues/23592)?",
                                           "updatedAt":  "2018-02-13T13:12:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NTI5NTA3MQ==",
                                           "createdAt":  "2018-02-13T15:09:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "powercode",
                                           "body":  "it is a string in `/proc/`",
                                           "updatedAt":  "2018-02-13T15:09:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMDQ5NjQ1NQ==",
                                           "createdAt":  "2018-09-12T03:03:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CJHarmath",
                                           "body":  "This would also fix PowerShell Get-Process missing the command line argument\r\nhttps://github.com/PowerShell/PowerShell/issues/1849",
                                           "updatedAt":  "2018-09-12T03:03:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42XdUx",
                                           "createdAt":  "2021-09-02T23:05:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@joeloff asked today about getting parent process ID, for an installer scenario. I suppose the argument for returning a Process object vs GetProcessById() is to avoid races with pid recycling.\r\n\r\nI wonder whether it would help to consider environment, command line, and parent as separate requests. ",
                                           "updatedAt":  "2021-09-02T23:05:37Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Proposal: Add new property for getting process command line, environment and parent process",
        "labels":  [
                       "api-needs-work",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/24046",
        "createdAt":  "2017-11-03T21:55:30Z",
        "number":  24046,
        "author":  "svick",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC96dsg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jnm2",
                                            "createdAt":  "2017-11-14T17:40:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2025-01-06T19:25:36Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-01-06T19:28:09Z",
        "body":  "`Process.WaitForExit(int)` does not validate its parameter `milliseconds`, but passes it on:\r\n\r\nhttps://github.com/dotnet/corefx/blob/1100d8faa87656f447bfe8944686d13e7b3af5e9/src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs#L1287-L1295\r\n\r\nOn Windows, it\u0027s then passed onto `WaitHandle.WaitOne(int)`:\r\n\r\nhttps://github.com/dotnet/corefx/blob/1fc008a7e174345826e658672b74aa449fb3573f/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs#L144-L156\r\n\r\nThis means that if the value of the parameter is invalid value for `WaitOne()`:\r\n\r\n* The thrown `System.ArgumentOutOfRangeException` has the wrong `ParamName` (`WaitOne`\u0027s `millisecondsTimeout` instead of `WaitForExit`\u0027s `milliseconds`).\r\n* If the handle is invalid, the parameter is not validated at all. (Though I haven\u0027t been able to reproduce this.)\r\n\r\nOn Unix, it\u0027s passed onto `ProcessWaitState.WaitForExit(int)`:\r\n\r\nhttps://github.com/dotnet/corefx/blob/1fc008a7e174345826e658672b74aa449fb3573f/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L120-L122\r\n\r\nWhich then has a special case for -1 (`Timeout.Infinite`), but not other negative values:\r\n\r\nhttps://github.com/dotnet/corefx/blob/1fc008a7e174345826e658672b74aa449fb3573f/src/System.Diagnostics.Process/src/System/Diagnostics/ProcessWaitState.Unix.cs#L362-L379\r\n\r\nAs far as I can tell, this means that on Unix `process.WaitForExit(-2)` behaves effectively the same as `process.WaitForExit(0)`: it doesn\u0027t wait at all, it just returns whether the process already exited.\r\n\r\nThe options I can see are:\r\n\r\n1. Do nothing.\r\n2. Validate the input only on Windows. This would fix the `ParamName` on Windows, and wouldn\u0027t cause a breaking change on Unix. But it would mean Windows and Unix are going to stay inconsistent.\r\n3. Always validate the input. This would fix the `ParamName` on Windows and it would mean the behavior on Unix would be deliberate, not accidental. But it would also be a breaking change: code that didn\u0027t throw before would start throwing.\r\n\r\nWhat do you think is the best approach here? Personally, I prefer 3.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmWiczw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ZaJzP",
                                           "createdAt":  "2025-01-06T19:27:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "This seems reasonable to keep open.",
                                           "updatedAt":  "2025-01-06T19:27:58Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Process.WaitForExit should validate the range of its input",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/24423",
        "createdAt":  "2017-12-12T15:25:24Z",
        "number":  24423,
        "author":  "bgribaudo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODHpHSg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "enghch",
                                            "createdAt":  "2017-12-12T15:41:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "coin8086",
                                            "createdAt":  "2018-04-13T02:06:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "giggio",
                                            "createdAt":  "2018-08-29T22:41:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cocowalla",
                                            "createdAt":  "2019-03-16T19:28:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "abelykh0",
                                            "createdAt":  "2019-05-02T17:26:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xced",
                                            "createdAt":  "2019-05-08T12:18:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vabka",
                                            "createdAt":  "2019-07-04T12:03:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "snowinmars",
                                            "createdAt":  "2019-07-25T16:02:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vicancy",
                                            "createdAt":  "2019-09-11T07:58:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fandrei",
                                            "createdAt":  "2020-06-25T21:33:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pedoc",
                                            "createdAt":  "2020-07-30T13:39:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "darthwalsh",
                                            "createdAt":  "2020-11-01T16:49:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "phxnsharp",
                                            "createdAt":  "2021-04-14T21:57:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MaceWindu",
                                            "createdAt":  "2021-09-13T15:31:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jyrkive",
                                            "createdAt":  "2021-09-14T11:08:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "austinkinross",
                                            "createdAt":  "2021-09-30T20:41:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "workgroupengineering",
                                            "createdAt":  "2022-02-03T08:45:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "konard",
                                            "createdAt":  "2022-03-26T11:50:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DevSelchow",
                                            "createdAt":  "2022-04-26T07:21:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "paralaxsd",
                                            "createdAt":  "2022-12-04T15:41:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ransagy",
                                            "createdAt":  "2022-12-04T18:50:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mika76",
                                            "createdAt":  "2022-12-04T20:13:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Michielfx",
                                            "createdAt":  "2023-01-02T23:55:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "halllky",
                                            "createdAt":  "2023-02-26T22:19:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tyrrrz",
                                            "createdAt":  "2023-03-31T13:59:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Fs00",
                                            "createdAt":  "2023-04-02T21:24:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cfbao",
                                            "createdAt":  "2023-06-05T00:42:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joadoumie",
                                            "createdAt":  "2023-06-07T22:43:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jnm2",
                                            "createdAt":  "2023-08-12T16:17:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danieldsmith",
                                            "createdAt":  "2023-09-01T00:32:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "oleg-shilo",
                                            "createdAt":  "2023-11-08T11:23:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fitdev",
                                            "createdAt":  "2023-12-18T14:20:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "compujuckel",
                                            "createdAt":  "2024-01-08T16:16:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bogdan-patraucean",
                                            "createdAt":  "2024-03-16T22:42:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JustArion",
                                            "createdAt":  "2024-07-16T12:14:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cachius",
                                            "createdAt":  "2025-02-27T18:07:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexey-leonovich",
                                            "createdAt":  "2025-04-18T06:49:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EmperorArthur",
                                            "createdAt":  "2025-06-12T16:10:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bricelam",
                                            "createdAt":  "2025-06-30T19:46:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Athari",
                                            "createdAt":  "2025-07-19T00:11:51Z"
                                        }
                                    ],
                          "totalCount":  40
                      },
        "updatedAt":  "2025-04-18T16:59:10Z",
        "body":  "## Issue\r\n.Net Standard does not expose a means to identify the parent or child processes of a given process. \r\n\r\n## Rationale\r\nWhen this request was originally proposed, the use case identified was for killing a tree of processes. That use case was subsequently satisfied by providing `Kill((bool entireProcessTree))`. \r\n\r\nLater feedback received on this issue suggests that there are separate use cases for exposing parent and/or child process details (see below comments).\r\n\r\n## Proposal\r\n````\r\npublic partial class Process : ....    {\r\n  public Process GetParentProcess() { … } \r\n  public Process[] GetChildProcesses() { ... } // returns a best-effort attempt list of immediate child processes (same children as would be affected if Kill(entireProcessTree: false) were called instead of this method\r\n\r\n  // Additional ideas. If there is interest, could also expose either or both of the following:\r\n  public bool IsParentOf(Process process) { ... }\r\n  public Process[] GetChildProcesses(bool includeAllDescendants = false) { ... } // adds param to return entire descendant pr    }\r\n````\r\n\r\nWhy `Get*` methods instead of properties? A process\u0027s parent can change. Instead of caching this value and so potentially returning incorrect (out of date) values, it seems desirable to compute and return the then-correct value each time it is requested. Per the API design guidelines, methods are preferred over properties when \"calling the member twice in succession results in different results.\"",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp8U7fw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MTExNjI1NA==",
                                           "createdAt":  "2017-12-12T17:02:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXfYgA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cocowalla",
                                                                               "createdAt":  "2019-03-16T19:28:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "w3lld0ne",
                                                                               "createdAt":  "2024-02-21T13:38:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PathogenDavid",
                                                                               "createdAt":  "2025-06-22T12:05:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "If implementing this for Windows note that processes expose their parent PID but this can represent a parent that has terminated and the PID may have been reused. The correct way (according to Win32 folks) is to also check the start time of the parent process is not after that of the child. See https://github.com/Microsoft/msbuild/blob/b499c93e95f440b98967b8d5edd910ee8556f504/src/Shared/NativeMethodsShared.cs#L1146",
                                           "updatedAt":  "2017-12-12T18:23:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NDgyOTcwMQ==",
                                           "createdAt":  "2018-01-02T17:52:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAYdGVg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bgribaudo",
                                                                               "createdAt":  "2018-01-04T16:09:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krwq",
                                                                               "createdAt":  "2018-06-26T20:14:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "If a common use case would be to terminate process trees, then exposing GetParentProcessId() might lead callers to the \"pit of failure\" since they will not necessarily know to check the start time.\r\n\r\nIt also suggests that perhaps we should have an API to terminate a process tree \"correctly\"",
                                           "updatedAt":  "2018-01-02T17:52:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NTMyNzM0NA==",
                                           "createdAt":  "2018-01-04T16:24:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bgribaudo",
                                           "body":  "\u003e If a common use case would be to terminate process trees, then exposing GetParentProcessId() might lead callers to the \"pit of failure\" since they will not necessarily know to check the start time.\r\n\r\n@danmosemsft , good point! For my purposes, I wouldn\u0027t be opposed to dropping GetParentProcessId(). The nice thing about GetParentProcess() and GetChildProcesses() is that they can factor in the start time check.\r\n\r\n\u003e It also suggests that perhaps we should have an API to terminate a process tree \"correctly\"\r\n\r\nI like the idea. Maybe something like:\r\n  \r\n    Kill(bool entireProcessTree = false); // false = existing behavior of Kill()\r\n\r\nCan you think of use cases that would make it desirable to also offer an option to recursively CloseMainWindow() on the entire process tree?",
                                           "updatedAt":  "2018-01-04T16:24:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NTMzMTkzOA==",
                                           "createdAt":  "2018-01-04T16:40:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "It seems to me that GetParentProcess() and GetChildProcesses() could lead to the pit of failure as well, since the Process object when initialized is keyed by the process ID, which can be repurposed. It does not get a handle to the process until it needs one. So GetParentProcess() eg could give you a Process object that when you ultimately use it could act on an unrelated process.\r\n\r\nIf the scenario is killing a tree, can we just add  `Kill(bool includeChildren = false)`   only?\r\n\r\nI haven\u0027t personally had a scenario for CloseMainWindow() recursively. That can be added later if a scenario emerges. \r\n \r\nIf this makes sense please update the top comment (and title) as that\u0027s what the API review looks at.",
                                           "updatedAt":  "2018-01-04T16:46:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1NjMxMzkwOQ==",
                                           "createdAt":  "2018-01-09T15:18:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bgribaudo",
                                           "body":  "Thanks, @danmosemsft! I created a new issue (#26234) for the kill all proposal. I left this as a separate issue as an alternative/complement to the new issue. If this issue doesn\u0027t gain traction soon (it\u0027s fine with me if it doesn\u0027t), I should probably close it.",
                                           "updatedAt":  "2018-01-09T15:18:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4ODQ2NTY2OQ==",
                                           "createdAt":  "2018-05-11T19:39:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "natemcmaster",
                                           "body":  "I ran into a need for this, too. If choosing between this and https://github.com/dotnet/corefx/issues/26234, I would prefer dotnet/corefx#26234.\r\n\r\nEither way, I think this is a good API. It appears there is a real need for working with process trees. Process tree killing has been implemented in several places already -- in MSBuild, ASP.NET Core, and the CLI. Would be nice to have one, common version of it in corefx.",
                                           "updatedAt":  "2018-05-11T19:39:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4ODQ2OTc2Mg==",
                                           "createdAt":  "2018-05-11T19:56:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAWncww==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bgribaudo",
                                                                               "createdAt":  "2018-05-16T12:36:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@joperezr perhaps you could guide this and/or https://github.com/dotnet/corefx/issues/26234 to api-ready-for-review if appropriate?",
                                           "updatedAt":  "2018-05-11T19:56:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDA2MTQ3OA==",
                                           "createdAt":  "2018-06-25T19:05:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bgribaudo",
                                           "body":  "Hi @joperezr (or @danmosemsft)! Is there anything I could do to help further this along?",
                                           "updatedAt":  "2018-06-25T19:05:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDE4NTUyNA==",
                                           "createdAt":  "2018-06-26T05:42:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "Should \r\n```c#\r\n    public Process[] GetChildProcesses(bool includeAllDescendants = false) \r\n```\r\nbe\r\n```c#\r\n    public IEnumerable\u003cProcess\u003e GetChildProcesses(bool includeAllDescendants = false) \r\n```\r\n?",
                                           "updatedAt":  "2018-06-26T05:42:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDQxNjUwOQ==",
                                           "createdAt":  "2018-06-26T18:27:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "It seems the real scenario is killing a process tree. We\u0027re generally hesitant to add policy with complex policy where the behavior is hard to predict (although I personally believe killing the process is reasonably well defined as \"kill as much as possible and keep going\").\r\n\r\nThe trouble with exposing process navigation APIs that walking up often fails due to security concerns (walking down usually seem to succeed though).\r\n\r\nMy concern is that if the primary scenario is killing a tree, I\u0027d really prefer this to be a single method call as this has a much higher chance of being reliable and a custom walk with exception handling.\r\n\r\n@JeremyKuhne, do you own process?",
                                           "updatedAt":  "2018-06-26T18:27:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDQyMzA1NQ==",
                                           "createdAt":  "2018-06-26T18:49:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@wtgodbe, @krwq own Process (see [owners list](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/issue-guide.md))\r\n\r\nI suggest adding `Process.Kill(includeDescendants = false)` (not sure whether it should return void or not, but for safety descendants should be excluded by default) but _not_ adding parent/child accessors because there is no other scenario at the moment and they are likely to have subtle behaviors.",
                                           "updatedAt":  "2018-06-26T18:49:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDQ0OTU2Ng==",
                                           "createdAt":  "2018-06-26T20:24:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEczGyA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "w3lld0ne",
                                                                               "createdAt":  "2024-02-21T13:39:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "u7pro",
                                                                               "createdAt":  "2025-08-01T12:29:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "krwq",
                                           "body":  "- Kill which allows to kill the subtree - IMO it is a good idea.\r\n- Children - I do not have anything against but I think we should understand scenarios first so that we do not create an API which will be used only in one/two specific context (if that\u0027s the case I\u0027d rather only have those two APIs)\r\n-  For exposing parent I do not think it is a good idea - parent should control and know the sub-processes but not necessarily the other way around (parent process can always give its pid as an argument when starting child process) - I\u0027m not convinced we should have it - especially after the pitfall @danmosemsft mentioned.",
                                           "updatedAt":  "2018-06-26T20:24:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDY3Mjc3OQ==",
                                           "createdAt":  "2018-06-27T13:33:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBVXcWg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krwq",
                                                                               "createdAt":  "2018-06-27T19:51:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "darthwalsh",
                                                                               "createdAt":  "2020-11-01T16:50:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "bgribaudo",
                                           "body":  "`Process.Kill(includeDescendants = false)` (or the equivalent) meets my needs. The idea of adding child \u0026 parent navigation (this issue) was an attempt to come up with a more generic way to provide what I needed to manually do the kill all descendants. \r\n\r\nSo, maybe move forward with dotnet/corefx#26234 and let this issue wait until someone presents a use scenario that specifically needs what it suggests?\r\n ",
                                           "updatedAt":  "2018-06-27T13:33:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDcyMzU2Mg==",
                                           "createdAt":  "2018-06-27T15:42:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@bgribaudo sounds good, could you please update your top post with the reduced proposal? API review looks at that - should be able to review againnext week",
                                           "updatedAt":  "2018-06-27T15:42:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDc1MTAwOA==",
                                           "createdAt":  "2018-06-27T16:49:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bgribaudo",
                                           "body":  "@danmosemsft, thanks! Would you like me to do that on this issue or over on dotnet/corefx#26234?",
                                           "updatedAt":  "2018-06-27T16:49:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDc1NzM5NA==",
                                           "createdAt":  "2018-06-27T17:03:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@bgribaudo oh, good point. Let\u0027s leave this aside then. I\u0027ll mark as api-needs-work while we wait for scenarios. Or you can close if you want.",
                                           "updatedAt":  "2018-06-27T17:03:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDc2Mzg0Nw==",
                                           "createdAt":  "2018-06-27T17:22:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bgribaudo",
                                           "body":  "Thanks, @danmosemsft!",
                                           "updatedAt":  "2018-06-27T17:22:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwMDM3MjczMA==",
                                           "createdAt":  "2020-03-18T01:04:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "atruskie",
                                           "body":  "Stumbled across this while looking for a an API to get parent process.\r\n\r\nAn application we\u0027re porting to .NET Core changes behaviour based on what parent process launched it. We were using p/invoke on ntdll.dll but that is obviously not cross-platform. Our current choice is to runtime test around the call and to choose a good default behaviour for other platforms while emitting a warning.",
                                           "updatedAt":  "2020-03-18T01:04:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTg3MzY0NQ==",
                                           "createdAt":  "2021-04-14T21:55:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6eSuA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "valeriob",
                                                                               "createdAt":  "2021-04-15T04:51:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JDCain",
                                                                               "createdAt":  "2021-04-15T10:47:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rhnatiuk",
                                                                               "createdAt":  "2021-07-28T11:33:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ManneN1",
                                                                               "createdAt":  "2021-08-18T20:43:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StingyJack",
                                                                               "createdAt":  "2022-01-01T00:45:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MHDante",
                                                                               "createdAt":  "2022-09-30T02:32:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "haykbuilds",
                                                                               "createdAt":  "2023-04-24T15:36:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "phxnsharp",
                                           "body":  "Valid use case for wanting to get children: We have a program that allows users to launch sub-processes that are out of our control and may themselves launch further sub-processes. I would like to provide a view where they can see all the launched processes to monitor their state. \r\n\r\nGiving us the parent or the children will allow us to do this. ",
                                           "updatedAt":  "2021-04-14T21:55:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CXznn",
                                           "createdAt":  "2022-04-29T17:08:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I guess the status of this is -- needs clear scenarios? \r\n\r\nhttps://github.com/dotnet/diagnostics/issues/2977 is one, but perhaps not particularly compelling. Does anyone have others? If there are significant scenarios, this is a quite reasonable API to add IMO.",
                                           "updatedAt":  "2022-04-29T17:08:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CX3m6",
                                           "createdAt":  "2022-04-29T17:27:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "phxnsharp",
                                           "body":  "\u003e Does anyone have others?\r\n\r\n@danmoseley What else do you want to know about the use case I posted on Apr 14, 2021 with 5 thumbs ups? Our program manages third party executables and we would like to show the user what sub-processes the parent executables have launched.\r\n\r\n",
                                           "updatedAt":  "2022-04-29T17:27:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CX4_U",
                                           "createdAt":  "2022-04-29T17:34:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCai09w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "phxnsharp",
                                                                               "createdAt":  "2022-04-29T17:44:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@phxnsharp ungh -- reading too many issues today. I see also @atruskie\u0027s scenario there.\r\n\r\nDo either of you have feedback on the API shape?\r\n\r\n@tmds do you have input from the Linux/Unix side here -- are there any subtle differences between Unix and Windows expectations?\r\n\r\n@krwq you expressed concerns earlier -- do those remain? With respect to security issues, I actually think it\u0027s not much different to using the existing Process API\u0027s -- you will only see what you have rights to see. We don\u0027t enforce any security boundary, just have to choose whether to throw exceptions or eat errors in each case. And the implementation of Process.Kill had to deal with this too.\r\n\r\ncc @dotnet/area-system-diagnostics-process for any other thoughts.",
                                           "updatedAt":  "2022-04-29T17:34:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CX-GS",
                                           "createdAt":  "2022-04-29T17:58:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "phxnsharp",
                                           "body":  "@danmoseley My requirement is that I can find all the sub-processes in a tree called from a known parent process. In an idealistic sense, having it deal with [platform dependent idiosyncrasies](https://github.com/dotnet/runtime/issues/24423#issuecomment-351116254) instead of us having to do it would be wonderful. But I completely understand if that is out of scope for what dotnet is trying to do. At this point merely being able to do it would be a big win. \r\n\r\nAs for the [other pitfall of the Process class only taking and ID and only creating a Handle on use](https://github.com/dotnet/runtime/issues/24423#issuecomment-355331938), I would argue that that is a bug that is larger in scope than just the proposed GetParentProcess and GetChildProcesses APIs. Any API that returns a Process could fall prey to that bug and it should probably be fixed regardless of whether the new APIs are added (record the ID and the start time and throw if you later find the start time changed). \r\n\r\nIn short:\r\n - Add GetParentProcess() and GetChildProcesses()\r\n - On Windows:\r\n   - Make GetParentProcess() validate the start time such that you don\u0027t return an invalid parent process\r\n   - Make the constructor take an ID and a Start Time, and validate that the start time hasn\u0027t changed when you later instantiate the handle.\r\n\r\nThank you!",
                                           "updatedAt":  "2022-04-29T17:58:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Caxxm",
                                           "createdAt":  "2022-05-01T19:24:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Thanks to the previous implementation of `Kill(bool entireProcessTree)` we already have proven implementations of `IsParentOf(Process possibleChildProcess)` and `private int ParentProcessId` (the latter could be a method) for each OS. \r\n\r\n`Kill()` is able to terminate processes before it enumerates their children, so the outcome is well defined: when it returns there will be zero children remaining. Does it matter that what is returned from `GetChildProcesses(bool includeAllDescendants)` is not so well defined, because it may not include child processes that were spawned during the enumeration? It may also included processes that have since terminated, or even that have changed their parent (not sure possible circumstances of that).  ",
                                           "updatedAt":  "2022-05-01T19:24:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CdC47",
                                           "createdAt":  "2022-05-02T13:53:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "phxnsharp",
                                           "body":  "Sounds fine for our purpose. Thanks.",
                                           "updatedAt":  "2022-05-02T13:53:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CdQf9",
                                           "createdAt":  "2022-05-02T14:33:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "If `ParentProcessId` is included it should be a property, similar to the other info exposed by `Process`.\r\nIt can be cached, and invalidated when `Refresh` is called",
                                           "updatedAt":  "2022-05-02T14:33:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CdXOU",
                                           "createdAt":  "2022-05-02T14:51:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bgribaudo",
                                           "body":  "\u003e If `ParentProcessId` is included it should be a property, similar to the other info exposed by `Process`. It can be cached, and invalidated when `Refresh` is called\r\n\r\n@tmds, are you proposing that the parent process id be loaded + cached by default for every `Process` instance, or just that it be cached if the property is read? \r\n\r\nRight now, `Process` only needs to spend the effort figuring out the parent if the property is read, so the associated (small, presumably) cost isn\u0027t paid for the vast majority of users to who don\u0027t need paternal info.",
                                           "updatedAt":  "2022-05-02T14:51:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CdaUz",
                                           "createdAt":  "2022-05-02T15:03:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bgribaudo",
                                           "body":  "\u003e````\r\n\u003epublic int GetParentProcessId() { ... } // returns parent process Id currently associated with this process\r\n\u003epublic Process GetParentProcess() { … } // returns parent process currently associated with this process````\r\n\r\nIs there a significant need for directly exposing the parent process ID from the child? Thinking that most of the time if someone gets the parent process ID directly, they\u0027ll just turn around and create a `Process` instance using that ID--which scenario is satisfied by the second quoted line.\r\n\r\nWondering if the first quoted line should be removed from the proposal (so still offer to return a [validated] `Process` instance for the parent, but not directly offer the parent process id).",
                                           "updatedAt":  "2022-05-02T15:03:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Cde5M",
                                           "createdAt":  "2022-05-02T15:18:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e or just that it be cached if the property is read\r\n\r\nSimilar to the other properties, cached when read.\r\n\r\n\u003e Wondering if the first quoted line should be removed from the proposal (so still offer to return a [validated] Process instance for the parent, but not directly offer the parent process id).\r\n\r\nIf you want to lay out the tree. The most efficient way would be to call `GetChildProcesses(true)` and then figure out the parent child relationship from the `ParentProcessId`.\r\n\r\nWithout `ParentProcessId` you\u0027d need to recursively call `GetChildProcesses(false)`.",
                                           "updatedAt":  "2022-05-02T15:18:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CdgSg",
                                           "createdAt":  "2022-05-02T15:23:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "The issue with `ParentProcessId` is that between the time you retrieve the Id and when you use it, the Id may have been recycled. You can only rely on it if you control the lifetime of the parent process.\r\n\r\nGiven that I\u0027m inclined to propose just GetParentProcessId() (and GetChildProcesses(bool))",
                                           "updatedAt":  "2022-05-02T15:23:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C5bMX",
                                           "createdAt":  "2022-05-10T12:50:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e The issue with ParentProcessId is that between the time you retrieve the Id and when you use it, the Id may have been recycled. You can only rely on it if you control the lifetime of the parent process.\r\n\r\nDoesn\u0027t the `Process` instance returned by `GetParentProcessId()` have the same issue?\r\n\r\nIf you want to reconstitute the parent-child relationship from `GetChildProcesses(includeAllDescendants: true)` return value, `ParentProcessId` is useful.",
                                           "updatedAt":  "2022-05-10T12:51:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LSIYx",
                                           "createdAt":  "2022-09-30T02:54:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MHDante",
                                           "body":  "I would like to add a voice to say: getting the parent process Id, even with the recycling issues on windows is much prefered to the current state of having to add a ton of special cases for unix/windows (not to mention that this introduces compile define or PInvoke complexities)\r\n\r\nEven in the case where the PPID was recycled, that PPID might have been stored in a table somewhere for checking later and the user would still benefit from knowing the now-recycled PPID.\r\n\r\nAn example use case: \r\nMy Process X spawns a process A.exe that then spawns processes B.exe (1), B.exe (2) and B.exe (3) and then closes itself.\r\nI can record the PID of my A instance and the start/end time. \r\nLater on, If I want to clean up, I can scan for Processes that have name B and PPID matching the recorded PID.\r\n\r\nI know this sounds convoluted, but I\u0027m dealing with this very scenario (Unity opens Python opens Unity). 🫠\r\n\r\nAny user dealing with process trees in windows should be familiar with the PPID recycling issue. \r\nAn implementation of `GetParentProcessId()` should return even an outdated Id.\r\nHowever, I would agree with `GetParentProcess()` returning null if the parent is no longer accessible. or its start time is after the child\u0027s. This would even be semantically correct, as the orphaned process would now be at the root of the process tree.\r\n\r\nA result of this would be 2 methods:\r\n`GetParentProcess()`\r\n`GetParentProcessId()`\r\n\r\nUsers looking to get a hydrated Process object would likely select the GetParentProcess method.\r\nI don\u0027t think the API should concern itself on whether they would for some reason select to store the Id and get the process \r\nlater. Especially since the user is already exposed to this issue through Process.ProcessId.\r\n\r\n",
                                           "updatedAt":  "2022-09-30T02:54:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NVfO0",
                                           "createdAt":  "2022-10-31T18:11:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC-poSg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JustArion",
                                                                               "createdAt":  "2023-06-21T21:46:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bgribaudo",
                                           "body":  "@danmoseley, where do you think this stands? Do you think it is ready for me to make cleanup tweaks to the proposal then go through API review?\r\n\r\nIdea is to propose:\r\n\r\n````\r\n public Process GetParentProcess() { … } \r\n public Process[] GetChildProcesses() { ... } // returns a best-effort attempt list of immediate child processes (same children as would be affected if Kill(entireProcessTree: false) were called instead of this method\r\n````\r\n\r\nAdditional options, if there is interest, could be to also expose either or both of the following:\r\n````\r\n bool IsParentOf(Process process) { ... }\r\n public Process[] GetChildProcesses(bool includeAllDescendants = false) { ... } // adds param to return entire descendant process tree when set to true...wondering if this capability is needed now; if not, can always be added later as the API signature change just involves adding a param with a default\r\n````",
                                           "updatedAt":  "2022-10-31T18:11:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NVsP5",
                                           "createdAt":  "2022-10-31T18:57:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@bgribaudo I think that would be ideal - if you agree you could edit the top post to make it the proposal.\r\n\r\nI should say I am not on this team anymore and the area owners @dotnet/area-system-diagnostics-process would need to mark api-ready-for-review if they agree..",
                                           "updatedAt":  "2022-10-31T18:57:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NV7nC",
                                           "createdAt":  "2022-10-31T19:50:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwpUHA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "ransagy",
                                                                               "createdAt":  "2022-12-04T18:50:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bgribaudo",
                                           "body":  "Thanks, @danmoseley. Proposal revised. \r\n\r\n@dotnet/area-system-diagnostics-process, is this something that would be ready for review?",
                                           "updatedAt":  "2022-10-31T19:50:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PqTge",
                                           "createdAt":  "2022-12-04T18:51:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ransagy",
                                           "body":  "The odd thing about this is i can\u0027t find any external library that attemped to do it either. Is it such a niche concept to want to query the model of the process in an app?\r\n\r\nEither way, I hope this moves forward into discussion at least.",
                                           "updatedAt":  "2022-12-04T18:51:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PsJNU",
                                           "createdAt":  "2022-12-05T08:50:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwrPwQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ransagy",
                                                                               "createdAt":  "2022-12-05T10:49:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "\u003e  i can\u0027t find any external library\r\n\r\nPowerShell uses custom code to get ParentId for Get-Process cmdlet and we will be happy to use standard .Net API.",
                                           "updatedAt":  "2022-12-05T08:50:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PsQR5",
                                           "createdAt":  "2022-12-05T09:12:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "There is https://github.com/dotnet/runtime/issues/21941 with another proposal to get a property:\r\n```c#\r\nnamespace System.Diagnostics\r\n{\r\n     public class  Process : Component\r\n     {\r\n           public Process ParentProcess { get; }\r\n     }\r\n}\r\n```\r\nI wonder how a child process could get another parent one over time.",
                                           "updatedAt":  "2022-12-05T09:12:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PsvJA",
                                           "createdAt":  "2022-12-05T10:50:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ransagy",
                                           "body":  "\u003e \u003e i can\u0027t find any external library\r\n\u003e \r\n\u003e PowerShell uses custom code to get ParentId for Get-Process cmdlet and we will be happy to use standard .Net API.\r\n\r\nRight you are! Thank you for that hint, I\u0027ve looked at the code for the System.Management.Automation library for Powershell and the matching NuGet as a reference point/stopgap while this is being discussed.\r\n\r\nFor those interested, beyond the above mentioned NuGet, the code sits mostly in here - https://github.com/PowerShell/PowerShell/blob/3dc95ced87d38c347a9fc3a222eb4c52eaad4615/src/System.Management.Automation/engine/ProcessCodeMethods.cs",
                                           "updatedAt":  "2022-12-05T10:50:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CzE22",
                                           "createdAt":  "2024-06-27T11:22:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JustArion",
                                           "body":  "A while ago I wrote up a little helper to provide this functionality for me on Windows. \nFor Linux you can just read `/proc/TARGET_PID/status` then just look for \"PPid:\\t\"\n\nMy rough implementation for windows can be found here [SnapshotRelationsImpl.cs](https://gist.github.com/JustArion/fd9f93e9aeffc9811eac6548fb951b27), it uses `Vanara.PInvoke.Kernel32` for my own convenience.\n\nEdit: A drawback for the Windows version is that it enumerates all processes. Though is still considerably faster than a WMI query. I don\u0027t know of a faster way to do this on Windows.\n\nEdit: Please bear in mind that the implementation doesn\u0027t implement the start time checks addressed by @danmoseley. It should be added though.",
                                           "updatedAt":  "2025-04-18T16:59:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nxTt_",
                                           "createdAt":  "2025-04-18T07:03:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexey-leonovich",
                                           "body":  "@danmoseley how can we contact this area owners to make this issue move forward? It has been idle for the last 2.5 years.\nLooks like @dotnet/area-system-diagnostics-process doesn\u0027t respond. Hope we will finally have this in .NET 10.",
                                           "updatedAt":  "2025-04-18T07:05:00Z"
                                       }
                                   ],
                         "totalCount":  41
                     },
        "title":  "Expose Parent/Child Process Information via System.Diagnostics.Process",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/24890",
        "createdAt":  "2018-02-02T11:05:29Z",
        "number":  24890,
        "author":  "powercode",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODK8lIA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CollectorOfBolts",
                                            "createdAt":  "2025-08-12T22:18:21Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-04-19T15:59:48Z",
        "body":  "When starting a process, I would like to be able to set the priority of the process in the ProcessStartInfo.\r\n```csharp\r\nvar pi = new ProcessStartInfo(\"cmd.exe\", \"/c dir\")\r\n{ \r\n    Priority = ProcessPriorityClass.BelowNormal \r\n};\r\nusing(var p = Process.Start(pi)){\r\n...\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOFew7zA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2Mjc4NDYzNA==",
                                           "createdAt":  "2018-02-03T06:29:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@powercode can you update your top comment into the [APi review format](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md)? ",
                                           "updatedAt":  "2018-02-03T06:29:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NzQ4NDE0OQ==",
                                           "createdAt":  "2018-02-21T21:44:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Worth considering whether this must be a Windows specific API. Probably it has to be, because the priority classes are Windows specific, plus I\u0027m not sure there is a clear mapping to a Linux concept. fork()/exec() don\u0027t take a priority of some kind. In a quick look it seems that after spawning the child, one must do something to adjust its priority.",
                                           "updatedAt":  "2018-02-21T21:44:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NzQ4ODE0Ng==",
                                           "createdAt":  "2018-02-21T21:57:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Unix has numeric values @danmosemsft : https://askubuntu.com/questions/656771/process-niceness-vs-priority\r\n\r\nhttps://linux.die.net/man/3/nice\r\nhttps://linux.die.net/man/3/setpriority\r\n",
                                           "updatedAt":  "2018-02-21T21:57:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NzgwMzM0MA==",
                                           "createdAt":  "2018-02-22T20:00:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "BTW Mono (https://github.com/mono/mono/blob/master/mcs/class/System/System.Diagnostics/ThreadPriorityLevel.cs ) uses \r\n``` C#\r\nnamespace System.Diagnostics {\r\n        public enum ThreadPriorityLevel {\r\n                AboveNormal=1,\r\n                BelowNormal=-1,\r\n                Highest=2,\r\n                Idle=-15,\r\n                Lowest=-2,\r\n                Normal=0,\r\n                TimeCritical=15,\r\n        }\r\n}\r\n\r\n```\r\nThat looks reasonable and may be improvement without adding new API @danmosemsft \r\nOn Windows we could do exactly what framework does.  ",
                                           "updatedAt":  "2018-02-22T20:00:26Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Make it possible to specify ProcessPriorityClass when starting a process",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/28838",
        "createdAt":  "2019-03-01T10:26:30Z",
        "number":  28838,
        "author":  "tmds",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOB-V48w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FraserWaters-GR",
                                            "createdAt":  "2019-09-27T11:42:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AnthonyMastrean",
                                            "createdAt":  "2021-10-14T15:55:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "walljm",
                                            "createdAt":  "2021-10-14T16:05:14Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-02-14T17:42:22Z",
        "body":  "The default configuration when launching a process is the child remains connected to the terminal of the parent process.\r\nWhen the application shouldn\u0027t interact with the user, it is preferable to have an easy way to disconnect the child from the terminal.\r\n\r\nThis can done by adding the following properties to `ProcessStartInfo`:\r\n\r\n```c#\r\n// semantics of `\u003c/dev/null`\r\n// This is: the child can read from standard in. Reading from standard in returns 0 bytes, i.e.: EOF.\r\n// alternative names: NoStandardInput/CloseStandardInput/StandardInputEOF\r\nbool EmptyStandardInput;\r\n// semantics of `\u003e/dev/null`\r\n// This is: the child can write to standard out. Anything written to standard out is ignored.\r\nbool DiscardStandardOutput;\r\n// semantics of `2\u003e/dev/null`\r\n// This is: the child can write to standard error. Anything written to standard error is ignored.\r\nbool DiscardStandardError;\r\n\r\n// including request https://github.com/dotnet/corefx/issues/32387 in this API suggestion:\r\n// semantics of `2\u003e\u00261`\r\n// This is: the parent will read both standard error and standard output from Process.StandardOutput.\r\n// This means the ordering used by the child when writing to standard error/out is preserved. (This is lost when reading from Process.StandardOutput and Standard.Error separately).\r\nbool RedirectStandardErrorToStandardOutput;\r\n```\r\n\r\n**Example**\r\n\r\nThis starts `dotnet build` as a child process.\r\nWe set `EmtpyStandarInput` to `true`. Should the process try to read from stdin, it will not cause a prompt on the terminal, and read an EOF.\r\nWe also set `RedirectStandardErrorToStandardOutput` to `true`. This makes it possible to read both stdout and stderr from `Process.StandardOutput` together in the order the application wrote to those file descriptors.\r\n\r\n```c#\r\nvar psi = new ProcessStartInfo\r\n{\r\n   FileName = \"dotnet\",\r\n   Arguments = \"build\",\r\n   RedirectStandardErrorToStandardOutput = true,\r\n   EmptyStandardInput = true\r\n};\r\nusing (var process = Process.Start(psi))\r\n{\r\n   string output = process.StandardOutput.ReadToEnd();\r\n}\r\n```\r\n\r\nCC @jhudsoncedaron",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOc-O44Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2ODcxOTQ5OA==",
                                           "createdAt":  "2019-03-01T16:16:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAkPWMQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tmds",
                                                                               "createdAt":  "2019-03-01T16:34:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "In general, this is a really good idea. I\u0027ve emulated this with dumb pipes and background threads way too many times.\r\n\r\nStarting process `stdin/stdout/stderr` closed is actually very badly defined on unix systems but glibc repairs this to avoid security vulnerabilities that have appeared in the past. Correct solution: replace the handle with a handle to `/dev/null` instead. You already have properties proposed to do this for standard output and standard error. So we need one more:\r\n\r\n    // semantics of `\u003c/dev/null`\r\n    bool EmptyStandardInput",
                                           "updatedAt":  "2019-03-01T16:16:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2ODcyNTg4OA==",
                                           "createdAt":  "2019-03-01T16:33:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e Starting process stdin/stdout/stderr closed is actually very badly defined on unix systems but glibc repairs this to avoid security vulnerabilities that have appeared in the past. Correct solution: replace the handle with a handle to /dev/null instead.\r\n\r\nInteresting. Updating proposed:\r\n\r\n```c#\r\n// semantics of `\u003c\u0026-`\r\nbool CloseStandardInput\r\n// semantics of `1\u003c\u0026-`\r\nbool CloseStandardOutput\r\n// semantics of `2\u003c\u0026-`\r\nbool CloseStandardError\r\n\r\n// semantics of `\u003e/dev/null`\r\nbool DiscardStandardOutput\r\n// semantics of `2\u003e/dev/null`\r\nbool DiscardStandardError\r\n\r\n// including request https://github.com/dotnet/corefx/issues/32387 in this API suggestion:\r\n// semantics of `2\u003e\u00261`\r\nbool RedirectStandardErrorToStandardOutput\r\n```\r\nto:\r\n\r\n```c#\r\n// semantics of `\u003c/dev/null`\r\nbool EmptyStandardInput\r\n// semantics of `\u003e/dev/null`\r\nbool DiscardStandardOutput\r\n// semantics of `2\u003e/dev/null`\r\nbool DiscardStandardError\r\n\r\n// including request https://github.com/dotnet/corefx/issues/32387 in this API suggestion:\r\n// semantics of `2\u003e\u00261`\r\nbool RedirectStandardErrorToStandardOutput\r\n```\r\n\r\nThe process that is started with `EmptyStandardInput` gets a readable standard in that is at the EOF.",
                                           "updatedAt":  "2019-03-01T16:33:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2ODczNjIxNg==",
                                           "createdAt":  "2019-03-01T17:03:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Thanks @tmds. Can you please keep the top post updated with your proposal (since API review look there). You might also extend the text to a bit more match the format mentioned here\r\nhttps://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md",
                                           "updatedAt":  "2019-03-01T17:03:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MTQ3MjI2Mg==",
                                           "createdAt":  "2019-03-11T09:49:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "I\u0027ve updated the top post with the most recent proposal, some additional info and an example.",
                                           "updatedAt":  "2019-03-11T09:49:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MTQ3NTI1MQ==",
                                           "createdAt":  "2019-03-11T09:58:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBIQYjg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2020-06-23T13:21:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmds",
                                           "body":  "As an alternative, which would enable even more, we could add properties that accept filenames for the redirects, and add a static sentinel filename for \u0027/dev/null\u0027 that enables the `EmptyStandardInput`, `DiscardStandardOutput`, `DiscardStandardError` use-cases.\r\n\r\n```C#\r\n// Replacing EmptyStandardInput, DiscardStandardOutput, DiscardStandardError:\r\nstring RedirectStandardOutputTo;\r\nstring RedirectStandardInputTo;\r\nstring RedirectStandardErrorTo;\r\nconst string DevNull = \"/dev/null\";\r\n\r\n// same as before\r\nbool RedirectStandardErrorToStandardOutput;\r\n```",
                                           "updatedAt":  "2019-03-11T09:58:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MTU4MTk2MQ==",
                                           "createdAt":  "2019-03-11T15:16:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBIQeMw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2020-06-23T13:31:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "DevNull feels wrong. NullFile or NullDevice would be better. I wonder which of these is actually better:\r\n\r\n    const string NullDevice = \"/dev/null\";\r\n\r\nor\r\n\r\n    #if WINDOWS\r\n    static readonly string NullDevice = \"NUL\";\r\n    #else\r\n    static readonly string NullDevice = \"/dev/null\";\r\n    #endif",
                                           "updatedAt":  "2019-03-11T15:16:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0ODE0ODEzNg==",
                                           "createdAt":  "2020-06-23T13:29:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e As an alternative, which would enable even more, we could add properties that accept filenames for the redirects, and add a static sentinel filename for \u0027/dev/null\u0027 that enables the EmptyStandardInput, DiscardStandardOutput, DiscardStandardError use-cases.\r\n\r\nYes please. Supporting arbitrary filenames would add immense value to an already useful enhancement. Would you be able to update the OP and I\u0027ll see if I can get it in for API review.",
                                           "updatedAt":  "2020-06-23T13:29:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44PIkB",
                                           "createdAt":  "2021-10-14T15:54:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AnthonyMastrean",
                                           "body":  "Is this comment, from the reporter\u0027s code snippet, actually true, particularly the difference in ordering guarantees? Is this documented somewhere or is there something in the implementation that explains this ordering?\r\n\r\n\u003e // This means the ordering used by the child when writing to standard error/out is preserved. (This is lost when reading from Process.StandardOutput and Standard.Error separately).\r\n\r\nI ask because we\u0027re reading STDOUT and STDERR separately and noticing wild differences in order. STDOUT seems to have priority and necessary lines from STDERR are appearing _way_ later than expected, compared to running the process on a real terminal and observing the intended order.",
                                           "updatedAt":  "2021-10-14T15:54:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44PK47",
                                           "createdAt":  "2021-10-14T16:06:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e Is this comment, from the reporter\u0027s code snippet, actually true, particularly the difference in ordering guarantees? Is this documented somewhere or is there something in the implementation that explains this ordering?\r\n\r\nThe child process writes to separate pipes for `stdout` and `stderr`. The data in these pipes is completely separate, so the ordering is gone.",
                                           "updatedAt":  "2021-10-14T16:06:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44PMGe",
                                           "createdAt":  "2021-10-14T16:11:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "walljm",
                                           "body":  "if the `RedirectStandardErrorToStandardOutput` property is set to true, the comment would seem to indicate both STDOUT and STDERR  would be merged.  The question @AnthonyMastrean is asking is, is the order in which the ERR and OUT messages are originated preserved.  Because we\u0027ve seen the order change significantly in production depending on load factors.",
                                           "updatedAt":  "2021-10-14T16:12:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44PQMG",
                                           "createdAt":  "2021-10-14T16:30:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e if the RedirectStandardErrorToStandardOutput property is set to true, the comment would seem to indicate both STDOUT and STDERR would be merged. The question @AnthonyMastrean is asking is, is the order in which the ERR and OUT messages are originated preserved.\r\n\r\nWhen set to `true`, both would write to the same pipe, and that preserves the ordering.\r\n\r\nIf .NET buffers before writing to the pipe, that could still cause things to go out-of-order. You need to remove buffers, or Flush at appropriate time.\r\n\r\n\u003e Because we\u0027ve seen the order change significantly in production depending on load factors.\r\n\r\nThe current implementation doesn\u0027t guarantee ordering. There is no way to `RedirectStandardErrorToStandardOutput`.",
                                           "updatedAt":  "2021-10-14T16:33:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zuV5P",
                                           "createdAt":  "2024-02-13T13:33:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chrishamm",
                                           "body":  "Regarding #98347 it would be nice to have an additional parameter to specify if only the IO from the launched process should be redirected or from all launched sub-processes. As far as I understand the latter is currently the case.",
                                           "updatedAt":  "2024-02-13T13:33:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zuZu2",
                                           "createdAt":  "2024-02-13T13:39:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e to specify if only the IO from the launched process should be redirected or from all launched sub-processes.\r\n\r\nThe grand parent can\u0027t separate the two. It reads one end of a pipe, the other end goes to the child, and if the child doesn\u0027t redirect, the grand-child inherits it. To the grand parent, these are al writers to the same pipe.",
                                           "updatedAt":  "2024-02-13T13:39:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zukvf",
                                           "createdAt":  "2024-02-13T14:02:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chrishamm",
                                           "body":  "There might be a way to inhibit this kind of inheritance on Linux, but no idea if that is feasible on Windows. The reason I am saying this is because systemd writes log messages with the corresponding pid of the respective grand-children (of course provided the parent process does not redirect its children\u0027s output). Example log:\r\n\r\n```\r\nDuetPluginService[7166]: [info] Plugin x: Process has been started (pid 15583)\r\nDuetPluginService[15583]: x Plugin v3.5.0-rc.3+7\r\n...\r\n-\u003e xplugin launches dpkg to update itself:\r\n...\r\nDuetPluginService[15360]: Unpacking xplugin (3.5.0~rc.3+7) over (3.5.0~rc.3+7) ...\r\nDuetPluginService[15360]: Setting up xplugin (3.5.0~rc.3+7) ...\r\n```\r\n\r\nIf it isn\u0027t possible to implement that kind of filter, what about an alternative option to stop reading when the main process is terminated? That way WaitForExit(Async) could behave uniformly regardless of whether IO redirection is used or not.",
                                           "updatedAt":  "2024-02-13T14:02:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zuvI1",
                                           "createdAt":  "2024-02-13T14:24:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e to stop reading when the main process is terminated\r\n\r\nWhen the process terminates, there may still be readable data on the pipe. We can\u0027t stop reading as soon as the child process terminates. This is also the reason why `WaitForExit` waits until the pipe is closed.\r\n\r\nA user can pick some timeout and use the overload on `WaitForExitAsync` that accepts a `CancellationToken`, and pass it a token that gets canceled after that timeout.",
                                           "updatedAt":  "2024-02-13T14:24:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zu-9X",
                                           "createdAt":  "2024-02-13T14:55:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@chrishamm : As the grandparent we can\u0027t do it, Windows or Linux, without injecting code. So don\u0027t.",
                                           "updatedAt":  "2024-02-13T14:55:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z2uR0",
                                           "createdAt":  "2024-02-14T13:01:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chrishamm",
                                           "body":  "\u003e A user can pick some timeout and use the overload on `WaitForExitAsync` that accepts a `CancellationToken`, and pass it a token that gets canceled after that timeout.\r\n\r\nUnfortunately not feasible for my application. There should be just a switch to specify if `WaitForExitAsync` returns after the awaited process is terminated regardless of any open pipes. I agree it makes sense to check the output pipes again for pending data after the process is dead, but I find the current behaviour of `WaitForExitAsync` inconsistent.\r\n\r\n`WaitForExitAsync` should  - as the name implies - wait for the started process, and not for the entire process chain. It already does exactly that *unless* IO is redirected.",
                                           "updatedAt":  "2024-02-14T13:01:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z3-Pm",
                                           "createdAt":  "2024-02-14T15:22:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@chrishamm : Take the PID, construct a new process object, and call WaitForExitAsync on that process object.",
                                           "updatedAt":  "2024-02-14T15:22:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z47jh",
                                           "createdAt":  "2024-02-14T17:41:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e There should be just a switch to specify if WaitForExitAsync returns after the awaited process is terminated regardless of any open pipes.\r\n\r\nThe reason is that it works well for this:\r\n```cs\r\nusing Process process = ...\r\n...\r\nprocess.WaitForExitAsync();\r\n```\r\nWhen the `WaitForExitAsync` returns we\u0027ve received all data and the pipe handle get disposed by `Process.Dispose`.\r\n\r\nWhen the process/pipe handle get disposed earlier, that may cause an issue for a child (or further descendants) that are writing to the pipe.\r\n\r\n\u003e Take the PID, construct a new process object, and call WaitForExitAsync on that process object.\r\n\r\nThat\u0027s nice! This instance won\u0027t know/care about the redirected streams.",
                                           "updatedAt":  "2024-02-14T17:42:22Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "api suggestion: extend stdin/in/out/err control when launching a Process",
        "labels":  [
                       "api-needs-work",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/29383",
        "createdAt":  "2019-04-26T02:14:18Z",
        "number":  29383,
        "author":  "AriNuer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:03:06Z",
        "body":  "Test **System.Diagnostics.Tests.ProcessTests/LongProcessNamesAreSupported** has failed.\n\n\u003c!-- Error message template  --\u003e\n## Error Message\n```json\n{\n  \"ErrorMessage\": \"at System.Diagnostics.Tests.ProcessTests.LongProcessNamesAreSupported()\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\nMessage :\n```\nAssert.Contains() Failure\nNot found: (filter expression)\nIn value:  Process[] [System.Diagnostics.Process (sh), System.Diagnostics.Process (sh), System.Diagnostics.Process (bash), System.Diagnostics.Process (dotnet)]\n```\nStack Trace :\n```\nat System.Diagnostics.Tests.ProcessTests.LongProcessNamesAreSupported() in /__w/1/s/src/System.Diagnostics.Process/tests/ProcessTests.cs:line 1883\n```\n\nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190425.7/workItem/System.Diagnostics.Process.Tests/analysis/xunit/System.Diagnostics.Tests.ProcessTests~2FLongProcessNamesAreSupported\n\u003c!-- Known issue validation start --\u003e\n ### Known issue validation\n**Build: :mag_right:** \n**Result validation:** :warning: Provided build not found. Provide a valid build in the \"**Build:** :mag_right:\" line.\n**Validation performed at:** 3/10/2025 10:46:51 PM UTC\n\u003c!-- Known issue validation end --\u003e\n\u003c!-- Known issue validation start --\u003e\n ### Known issue validation\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=973726\n**Error message validated:** `[[FAIL] System.Diagnostics.Tests.ProcessTests.LongProcessNamesAreSupported`]\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\n**Validation performed at:** 3/10/2025 10:56:44 PM UTC\n\u003c!-- Known issue validation end --\u003e\n\u003c!--Known issue error report start --\u003e\n\n### Report\n#### Summary\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\n|---|---|---|\n|0|0|0|\n\u003c!--Known issue error report end --\u003e\n\u003c!-- Known issue validation start --\u003e\n ### Known issue validation\n**Build: :mag_right:** \n**Result validation:** :warning: Provided build not found. Provide a valid build in the \"**Build:** :mag_right:\" line.\n**Validation performed at:** 6/9/2025 4:42:50 PM UTC\n\u003c!-- Known issue validation end --\u003e\n\u003c!--Known issue error report start --\u003e\n\n### Report\n#### Summary\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\n|---|---|---|\n|0|0|0|\n\u003c!--Known issue error report end --\u003e\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** \r\n**Result validation:** :warning: Provided build not found. Provide a valid build in the \"**Build:** :mag_right:\" line.\r\n**Validation performed at:** 6/9/2025 4:43:59 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\n\u003c!--Known issue error report start --\u003e\n\n### Report\n#### Summary\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\n|---|---|---|\n|0|0|0|\n\u003c!--Known issue error report end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1151832](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151832)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.LongProcessNamesAreSupported](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151832\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31819216\u0026resultId=131167)||\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|1|1|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOl2qkzQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4ODgwMzE0OQ==",
                                           "createdAt":  "2019-05-02T19:33:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "Closing as part of https://github.com/dotnet/corefx/issues/37198",
                                           "updatedAt":  "2019-05-02T19:33:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDg5MzU0Mg==",
                                           "createdAt":  "2021-02-08T06:04:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Anipik",
                                           "body":  "Failed again here https://dev.azure.com/dnceng/public/_build/results?buildId=982443\u0026view=logs\u0026j=b9b7de4d-2126-5581-6453-1576f9aaac5f\u0026t=db048d48-40e8-5399-9b14-d587763f33ff\r\n\r\nlog https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-master-f42ca9b897964959b9/System.Diagnostics.Process.Tests/console.006564c7.log?sv=2019-07-07\u0026se=2021-02-27T14%3A16%3A51Z\u0026sr=c\u0026sp=rl\u0026sig=NdWxmCLpMC65XXifBPdBuJjlZWau5zODq1eSLz3DZNQ%3D\r\n\r\n```\r\n  Discovering: System.Diagnostics.Process.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Diagnostics.Process.Tests (found 246 of 304 test cases)\r\n  Starting:    System.Diagnostics.Process.Tests (parallel test collections = on, max threads = 2)\r\n    System.Diagnostics.Tests.ProcessStartInfoTests.ShellExecute_Nano_Fails_Start [SKIP]\r\n      Condition(s) not met: \"IsWindowsNanoServer\"\r\nLinux\r\nLinux\r\nLinux\r\nLinux\r\nNone of the following programs were installed on this machine: xdg-open,gnome-open,kfmclient.\r\n    System.Diagnostics.Tests.ProcessTests.TestProcessRecycledPid [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabledAndRemoteExecutorSupported\"\r\n    System.Diagnostics.Tests.ProcessTests.LongProcessNamesAreSupported [FAIL]\r\n      Assert.Contains() Failure\r\n      Not found: (filter expression)\r\n      In value:  Process[] [System.Diagnostics.Process (helix_docker_work.sh), System.Diagnostics.Process (execute.sh), System.Diagnostics.Process (bash), System.Diagnostics.Process (dotnet), System.Diagnostics.Process (123456789012345)]\r\n      Stack Trace:\r\n        /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs(2067,0): at System.Diagnostics.Tests.ProcessTests.LongProcessNamesAreSupported()\r\n  Finished:    System.Diagnostics.Process.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Diagnostics.Process.Tests  Total: 307, Errors: 0, Failed: 1, Skipped: 2, Time: 10.385s\r\n/root/helix/work/workitem\r\n```",
                                           "updatedAt":  "2021-02-08T06:04:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h6Rvs",
                                           "createdAt":  "2023-07-19T19:51:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Failed again in https://github.com/dotnet/runtime/pull/89196\r\n```\r\n    System.Diagnostics.Tests.ProcessTests.LongProcessNamesAreSupported [FAIL]\r\n      Assert.Contains() Failure\r\n      Not found: (filter expression)\r\n      In value:  Process[] [System.Diagnostics.Process (helix_docker_work.sh), System.Diagnostics.Process (execute.sh), System.Diagnostics.Process (bash), System.Diagnostics.Process (dotnet), System.Diagnostics.Process (123456789012345)]\r\n      Stack Trace:\r\n        /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs(2298,0): at System.Diagnostics.Tests.ProcessTests.LongProcessNamesAreSupported()\r\n        /_/src/mono/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.Mono.cs(22,0): at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs(57,0): at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```",
                                           "updatedAt":  "2023-07-19T19:51:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h6UTB",
                                           "createdAt":  "2023-07-19T20:00:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Relevant test case:\r\nhttps://github.com/dotnet/runtime/blob/50ba405797f6cc57d57ff4d2503079b4c32acc7b/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs#L2289C45-L2298\r\n\r\nSeems to me like that last process is the one, but it\u0027s name was truncated:\r\n`System.Diagnostics.Process (123456789012345)`",
                                           "updatedAt":  "2023-07-19T20:00:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XYWoi",
                                           "createdAt":  "2024-12-12T18:34:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "Failed again in [runtime-coreclr libraries-jitstress](https://dev.azure.com/dnceng-public/public/_build?definitionId=138\u0026_a=summary)/[20241211.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=893308)\n- net10.0-linux-Release-arm-jitstress1_tiered-(Debian.12.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-12-helix-arm32v7\n\n\n```\n  Discovering: System.Diagnostics.Process.Tests (method display = ClassAndMethod, method display options = None)\n  Discovered:  System.Diagnostics.Process.Tests (found 262 of 324 test cases)\n  Starting:    System.Diagnostics.Process.Tests (parallel test collections = on [2 threads], stop on fail = off)\n    System.Diagnostics.Tests.ProcessStartInfoTests.ShellExecute_Nano_Fails_Start [SKIP]\n      Condition(s) not met: \"IsWindowsNanoServer\"\nLinux\nLinux\nLinux\nLinux\n    System.Diagnostics.Tests.ProcessTests.TestBasePriorityOnUnix [SKIP]\n      Condition(s) not met: \"IsPrivilegedProcess\"\nNone of the following programs were installed on this machine: xdg-open,gnome-open,kfmclient.\n    System.Diagnostics.Tests.ProcessTests.TestPriorityClassUnix [SKIP]\n      Condition(s) not met: \"IsPrivilegedProcess\"\n    System.Diagnostics.Tests.ProcessTests.TestProcessRecycledPid [SKIP]\n      Condition(s) not met: \"IsStressModeEnabledAndRemoteExecutorSupported\"\n    System.Diagnostics.Tests.ProcessTests.LongProcessNamesAreSupported [FAIL]\n      Assert.Contains() Failure: Filter not matched in collection\n      Collection: [System.Diagnostics.Process (helix_docker_work.sh), System.Diagnostics.Process (execute.sh), System.Diagnostics.Process (bash), System.Diagnostics.Process (dotnet), System.Diagnostics.Process (123456789012345)]\n      Stack Trace:\n        /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs(2300,0): at System.Diagnostics.Tests.ProcessTests.LongProcessNamesAreSupported()\n```",
                                           "updatedAt":  "2024-12-12T18:34:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XaqTN",
                                           "createdAt":  "2024-12-13T01:39:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20241211.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=893308\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23413850\u0026resultId=143255\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-arm-jitstress1_tiered-(Debian.12.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-12-helix-arm32v7\n    - System.Diagnostics.Tests.ProcessTests.LongProcessNamesAreSupported\n```\n\n**Error message:**\n```\n Assert.Contains() Failure: Filter not matched in collection\nCollection: [System.Diagnostics.Process (helix_docker_work.sh), System.Diagnostics.Process (execute.sh), System.Diagnostics.Process (bash), System.Diagnostics.Process (dotnet), System.Diagnostics.Process (123456789012345)]\n```\n\n**Stack trace:**\n```\n   at System.Diagnostics.Tests.ProcessTests.LongProcessNamesAreSupported() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs:line 2300\n   at System.RuntimeMethodHandle.InvokeMethod(ObjectHandleOnStack target, Void** arguments, ObjectHandleOnStack sig, BOOL isConstructor, ObjectHandleOnStack result)\n   at System.RuntimeMethodHandle.InvokeMethod(ObjectHandleOnStack target, Void** arguments, ObjectHandleOnStack sig, BOOL isConstructor, ObjectHandleOnStack result)\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor) in /_/src/coreclr/System.Private.CoreLib/src/System/RuntimeHandles.cs:line 1128\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 48\n```",
                                           "updatedAt":  "2024-12-13T01:39:10Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Test Failure: System.Diagnostics.Tests.ProcessTests/LongProcessNamesAreSupported",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "test-run-core",
                       "blocking-clean-ci-optional",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/30011",
        "createdAt":  "2019-06-24T21:54:35Z",
        "number":  30011,
        "author":  "joshmackey",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-11-12T17:19:11Z",
        "body":  "We have an integration test written using MSTest. It works fine in Windows but it crashes in linux with a `Test host process crashed` error.\r\n\r\nThe logs suggest a segfault: `Testhost processId: 8481 exited with exitcode: 139 error: \u0027\u0027` but nothing more specific can be found.\r\n\r\nEven more interesting, is that I added a Main method to the test project and had it call the test method directly, and it completed without issues.\r\n\r\n\r\ndotnet info\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.300\r\n Commit:    73efd5bd87\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.300/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.5\r\n  Commit:  0a3c9209c0\r\n\r\n.NET Core SDKs installed:\r\n  2.2.300 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n[test.host.19-06-24_14-48-51_26198_6.txt](https://github.com/dotnet/corefx/files/3322714/test.host.19-06-24_14-48-51_26198_6.txt)\r\n[test.txt](https://github.com/dotnet/corefx/files/3322715/test.txt)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOaeOag==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwNzc2ODQ5NA==",
                                           "createdAt":  "2019-07-02T17:17:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joshmackey",
                                           "body":  "We found out what caused the segfault, but it is unknown as to why it only occurred during a `dotnet test` run rather than running directly via `dotnet run`. Some architecture difference it seems.",
                                           "updatedAt":  "2019-07-02T17:17:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NjgzMTUwMg==",
                                           "createdAt":  "2021-02-26T18:53:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCCWl-w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DigiBanks99",
                                                                               "createdAt":  "2021-11-12T17:17:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bhavyanshu",
                                           "body":  "can you tell what was the fix for it? We tried migrating our project to Dotnet 5.0 from 3.1. On Windows dotnet test executes perfectly fine but not on Ubuntu/Linux Docker. I see the exact same issue as you.",
                                           "updatedAt":  "2021-02-26T18:53:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMzQ2MjU2NQ==",
                                           "createdAt":  "2021-04-05T15:44:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Oceania2018",
                                           "body":  "Same question.",
                                           "updatedAt":  "2021-04-05T15:44:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45p45q",
                                           "createdAt":  "2021-11-12T17:18:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DigiBanks99",
                                           "body":  "Same issue on .NET Core 3.1, Ubuntu 20.04. One thing about the test project where it fails is that it is the one using EF Core with SQLite.",
                                           "updatedAt":  "2021-11-12T17:19:11Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "dotnet test on linux - Test host process crashed. Segfault?",
        "labels":  [
                       "question",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/30124",
        "createdAt":  "2019-07-03T16:03:14Z",
        "number":  30124,
        "author":  "nick2893",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAsNFXQ==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "nmanis",
                                            "createdAt":  "2019-07-10T19:13:09Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-07-26T08:44:06Z",
        "body":  "Here: \r\ncorefx/src/Common/src/Interop/Windows/Kernel32/Interop.CreateProcess.cs \r\n\r\nhttps://github.com/dotnet/corefx/blob/8c5260061b11323dfd97fbab614d54402405513f/src/Common/src/Interop/Windows/Kernel32/Interop.CreateProcess.cs \r\n\r\nAnd here: \r\n\r\nhttps://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/Process.cs,c50d8ac0eb7bc0d6,references \r\n\r\nsystem/diagnosticts/Process.cs - StartWithCreateProcess \r\n\r\nI have a problem because I spent a lot of money on machines with a lot of CPUs.  Specifically, I have more than 1 NUMA Processor group.  In C++ I was able to deal with this as, \r\n\r\nGROUP_AFFINITY aff; \r\nRtlZeroMemory(\u0026aff, sizeof(GROUP_AFFINITY)); \r\naff.Group = iProcessorGroup; \r\naff.Mask = 0xffffffff; \r\nLPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList; \r\nlpAttributeList = reinterpret_cast\u003cLPPROC_THREAD_ATTRIBUTE_LIST\u003e \r\n(HeapAlloc(GetProcessHeap(), 0, size)); \r\nfSuccess = InitializeProcThreadAttributeList(lpAttributeList, 1, 0, \u0026size); \r\nfSuccess = UpdateProcThreadAttribute(lpAttributeList, \r\n0, PROC_THREAD_ATTRIBUTE_PREFERRED_NODE, \u0026aff.Group, sizeof(aff.Group), NULL, NULL); \r\nSTARTUPINFOEX info; \r\nZeroMemory(\u0026info, sizeof(info)); \r\nZeroMemory(\u0026info.StartupInfo, sizeof(STARTUPINFO)); \r\ninfo.StartupInfo.cb = sizeof(info); \r\ninfo.lpAttributeList = lpAttributeList; \r\n\r\nAnd then, when calling CreateProcess with \u0026info.StartupInfo - it would correctly start on the processor group where I want it to start.  However, in .NET, this cannot be done, I cannot specify on which NUMA node / processor group to start my process.  (Sometimes I use round-robin, sometimes the least utilized group, sometimes whatever the GUI provides).  However, in .NET 4.8 or Core, this option doesn\u0027t exist. \r\n\r\nCan we add STARTUPINFOEX to CreateProcess so that I\u0027m not wasting CPU (groups) or running through piles of Win32 API code to start a .NET Process? ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJqINJg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0ODE1NDQwNg==",
                                           "createdAt":  "2020-06-23T13:39:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Hi @nick2893 \r\n\r\nThank you for your valuable suggestion!\r\n\r\nWe should add two new APIs that would allow for:\r\n\r\n* specifying Processor Group and Affinity when starting a new process\r\n* specifying Processor Group when setting Affinity of a process that is already running\r\n\r\nIf possible, the new APIs should support 1 Processor Group with more than 64 CPUs.\r\n\r\nThis would make .NET definitely more Numa-friendly (cc @DamianEdwards )\r\n\r\n\u003e running through piles of Win32 API code to start a .NET Process\r\n\r\nAs a workaround, you can try to use the `start /NODE $x /AFFINITY $y $program $args` command:\r\n\r\n```cmd\r\nstart /?\r\n```\r\n\r\n```log\r\nStarts a separate window to run a specified program or command.\r\n\r\nSTART [\"title\"] [/D path] [/I] [/MIN] [/MAX] [/SEPARATE | /SHARED]\r\n      [/LOW | /NORMAL | /HIGH | /REALTIME | /ABOVENORMAL | /BELOWNORMAL]\r\n      [/NODE \u003cNUMA node\u003e] [/AFFINITY \u003chex affinity mask\u003e] [/WAIT] [/B]\r\n      [command/program] [parameters]\r\n\r\n    \"title\"     Title to display in window title bar.\r\n    path        Starting directory.\r\n    B           Start application without creating a new window. The\r\n                application has ^C handling ignored. Unless the application\r\n                enables ^C processing, ^Break is the only way to interrupt\r\n                the application.\r\n    I           The new environment will be the original environment passed\r\n                to the cmd.exe and not the current environment.\r\n    MIN         Start window minimized.\r\n    MAX         Start window maximized.\r\n    SEPARATE    Start 16-bit Windows program in separate memory space.\r\n    SHARED      Start 16-bit Windows program in shared memory space.\r\n    LOW         Start application in the IDLE priority class.\r\n    NORMAL      Start application in the NORMAL priority class.\r\n    HIGH        Start application in the HIGH priority class.\r\n    REALTIME    Start application in the REALTIME priority class.\r\n    ABOVENORMAL Start application in the ABOVENORMAL priority class.\r\n    BELOWNORMAL Start application in the BELOWNORMAL priority class.\r\n    NODE        Specifies the preferred Non-Uniform Memory Architecture (NUMA)\r\n                node as a decimal integer.\r\n    AFFINITY    Specifies the processor affinity mask as a hexadecimal number.\r\n                The process is restricted to running on these processors.\r\n\r\n                The affinity mask is interpreted differently when /AFFINITY and\r\n                /NODE are combined.  Specify the affinity mask as if the NUMA\r\n                node\u0027s processor mask is right shifted to begin at bit zero.\r\n                The process is restricted to running on those processors in\r\n                common between the specified affinity mask and the NUMA node.\r\n                If no processors are in common, the process is restricted to\r\n                running on the specified NUMA node.\r\n    WAIT        Start application and wait for it to terminate.\r\n    command/program\r\n                If it is an internal cmd command or a batch file then\r\n                the command processor is run with the /K switch to cmd.exe.\r\n                This means that the window will remain after the command\r\n                has been run.\r\n\r\n                If it is not an internal cmd command or batch file then\r\n                it is a program and will run as either a windowed application\r\n                or a console application.\r\n\r\n    parameters  These are the parameters passed to the command/program.\r\n```\r\n\r\nA sample .NET Core code (works on Windows only):\r\n\r\n```cs\r\nstatic ProcessStartInfo GetProcessStartInfo(string fileName, uint group, uint mask, params string[] arguments)\r\n{\r\n    var startInfo = new ProcessStartInfo(\"cmd.exe\");\r\n\r\n    startInfo.ArgumentList.Add(\"/c\");\r\n    startInfo.ArgumentList.Add(\"start\");\r\n    startInfo.ArgumentList.Add(\"/NODE\");\r\n    startInfo.ArgumentList.Add(group.ToString());\r\n    startInfo.ArgumentList.Add(\"/AFFINITY\");\r\n    startInfo.ArgumentList.Add(mask.ToString(\"X2\"));\r\n    startInfo.ArgumentList.Add(fileName);\r\n\r\n    foreach (var argument in arguments)\r\n    {\r\n        startInfo.ArgumentList.Add(argument);\r\n    }\r\n\r\n    return startInfo;\r\n}\r\n```\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2020-06-23T13:40:46Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  ".NET and .NET Core missing Processor Group on Process.Start",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/30278",
        "createdAt":  "2019-07-16T14:17:21Z",
        "number":  30278,
        "author":  "nick2893",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-19T15:44:39Z",
        "body":  "This file: \r\n\r\ncorefx/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs \r\n\r\nContains the comments: \r\n\r\n                // Duplicate the parent handle to be non-inheritable so that the child process \r\n                // doesn\u0027t have access. This is done for correctness sake, exact reason is unclear. \r\n                // One potential theory is that child process can do something brain dead like \r\n                // closing the parent end of the pipe and there by getting into a blocking situation \r\n                // as parent will not be draining the pipe at the other end anymore. \r\n\r\nPlease clarify to include information in the following link; the same two separate reasons for calling DuplicateHandle are used in the API and in .NET. \r\n\r\nhttps://support.microsoft.com/en-us/help/190351/how-to-spawn-console-processes-with-redirected-standard-handles \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsiGCCg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxMTgzNzAwMA==",
                                           "createdAt":  "2019-07-16T14:20:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@nick2893 thanks for the suggestion, if you think the comment can be improved feel free to throw up a PR.",
                                           "updatedAt":  "2019-07-16T14:20:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6yIYIK",
                                           "createdAt":  "2025-06-19T15:44:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jilles-sg",
                                           "body":  "The link above seems dead, but the same reason as on Unix-like systems seems to apply, at least. Passing both ends of the pipe to the child process tends to cause deadlocks/hangs:\n* For the standard input pipe: if the child process waits for an end of file condition, it will never happen.\n* For the standard output and standard error pipes: if the parent process has closed its end of the pipe and the child process writes so much that the system blocks it until something is read from the other end of the pipe, it will stay blocked until it is terminated.\n\nIn either case, for all the system knows some thread in the child process will do something with the other side of the pipe at some point.",
                                           "updatedAt":  "2025-06-19T15:44:26Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Process.windows.cs CreatePipe() comment",
        "labels":  [
                       "documentation",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/13757",
        "createdAt":  "2019-11-08T02:27:06Z",
        "number":  13757,
        "author":  "AriNuer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-28T05:58:09Z",
        "body":  "Frequency:\r\n\r\n- 4/1-7/22 -- 23 hits (2x official runs, 21x PR) ... average: 1-2 hits per week\r\n\r\n```kusto\r\nlet failedTests = (testNameSubstring : string, methodName : string, includePR : bool, messageSubstr: string, includePassedOnRerun : bool) {\r\ncluster(\u0027engsrvprod.kusto.windows.net\u0027).database(\u0027engineeringdata\u0027).AzureDevOpsTests\r\n    | where TestName contains testNameSubstring\r\n    | where includePassedOnRerun or (Outcome == \u0027Failed\u0027)\r\n    | extend startOfTestName = indexof_regex(TestName, @\"[^.]+$\")\r\n    | extend Method = substring(TestName, startOfTestName)\r\n    | extend Type = substring(TestName, 0, startOfTestName - 1)\r\n    | project-away startOfTestName\r\n    | where (methodName == \u0027\u0027) or (Method == methodName)\r\n    | where Message contains messageSubstr\r\n    | distinct JobId, WorkItemId, Message, StackTrace, Method, Type, Arguments, Outcome\r\n    | join kind=inner (cluster(\u0027engsrvprod.kusto.windows.net\u0027).database(\u0027engineeringdata\u0027).Jobs\r\n        | where ((Branch == \u0027refs/heads/main\u0027) or (Branch == \u0027refs/heads/master\u0027) or (includePR and (Source startswith \"pr/\")))\r\n        | where Type startswith \"test/functional/cli/\"\r\n            and not(Properties contains \"runtime-staging\")\r\n        | summarize arg_max(Finished, Properties, Type, Branch, Source, Started, QueueName) by JobId\r\n        | project-rename JobType = Type) on JobId\r\n    | extend PropertiesJson = parse_json(Properties)\r\n    | extend OS = replace_regex(tostring(PropertiesJson.operatingSystem), @\u0027\\((.*)\\).*|([^\\(].*)\u0027, @\u0027\\1\\2\u0027)\r\n    | extend Runtime = iif(PropertiesJson.runtimeFlavor == \"mono\", \"Mono\", iif(PropertiesJson.DefinitionName contains \"coreclr\", \"CoreCLR\", \"\"))\r\n    | extend TargetBranch = extractjson(\"$.[\u0027System.PullRequest.TargetBranch\u0027]\", Properties)\r\n    | extend Architecture = PropertiesJson.architecture\r\n    | extend Scenario = iif(isempty(PropertiesJson.scenario), \"--\", PropertiesJson.scenario)\r\n    //| extend DefinitionName = PropertiesJson.DefinitionName\r\n    | project-away PropertiesJson\r\n};\r\nfailedTests(\u0027\u0027, \u0027ProcessNameMatchesScriptName\u0027, true, \u0027Assert\u0027, true);\r\n```\r\n\r\n**Job:**\r\n[coreclr-corefx-jitstress:20191106.1](https://dev.azure.com/dnceng/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_build/results?buildId=418620)\r\n\r\n**Details:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/dc1d0990-ba17-4d58-bba6-42bfb71b843b/workitems/System.Diagnostics.Process.Tests/console\r\n\r\n**OS \u0026 Arch:**\r\nLinux x64\r\n\r\n**Mode:**\r\nexport COMPlus_TieredCompilation=0\r\nexport COMPlus_DbgEnableMiniDump=1\r\nexport COMPlus_DbgMiniDumpName=$HELIX_DUMP_FOLDER/coredump.%d.dmp\r\nexport COMPlus_JitStress=2\r\n\r\n**Log:**\r\n```\r\n~/work/dc1d0990-ba17-4d58-bba6-42bfb71b843b/Work/0df10b6f-33b8-45e5-93e8-6b9124ec38b0/Exec ~/work/dc1d0990-ba17-4d58-bba6-42bfb71b843b/Work/0df10b6f-33b8-45e5-93e8-6b9124ec38b0/Exec\r\n  Discovering: System.Diagnostics.Process.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Diagnostics.Process.Tests (found 214 of 272 test cases)\r\n  Starting:    System.Diagnostics.Process.Tests (parallel test collections = on, max threads = 2)\r\n    System.Diagnostics.Tests.ProcessStartInfoTests.ShellExecute_Nano_Fails_Start [SKIP]\r\n      Condition(s) not met: \"IsWindowsNanoServer\"\r\nLinux\r\nLinux\r\nLinux\r\nLinux\r\nNone of the following programs were installed on this machine: xdg-open,gnome-open,kfmclient.\r\n    System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName [FAIL]\r\n      Assert.Equal() Failure\r\n                â†“ (pos 0)\r\n      Expected: /bin/sh\\0/tmp/ProcessTests_uvir03tc.k5r/PrÂ·Â·Â·\r\n      Actual:   \r\n                â†‘ (pos 0)\r\n      Stack Trace:\r\n        /_/src/System.Diagnostics.Process/tests/ProcessTests.Unix.cs(180,0): at System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName()\r\n    System.Diagnostics.Tests.ProcessTests.TestProcessRecycledPid [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabled\"\r\n  Finished:    System.Diagnostics.Process.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Diagnostics.Process.Tests  Total: 268, Errors: 0, Failed: 1, Skipped: 2, Time: 57.208s\r\n~/work/dc1d0990-ba17-4d58-bba6-42bfb71b843b/Work/0df10b6f-33b8-45e5-93e8-6b9124ec38b0/Exec\r\n----- end Thu Nov 7 07:57:14 UTC 2019 ----- exit code 1 ----------------------------------------------------------\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSGXKXQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MjQ2Mjk3OQ==",
                                           "createdAt":  "2020-02-05T15:29:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "Failed again in https://dev.azure.com/dnceng/public/_build/results?buildId=508452\u0026view=logs\u0026jobId=79ac38c7-786b-5db2-e2cf-2984d488b711.\r\n\r\nConfiguration: `netcoreapp5.0-Linux-Debug-x64-CoreCLR_checked-Ubuntu.1804.Amd64.Open`\r\n\r\n```\r\nAssert.Equal() Failure\\n ↓ (pos 0)\\nExpected: /bin/sh\\0/tmp/ProcessTests_rgk4di2i.ycq/Pr···\\nActual: \\n ↑ (pos 0)\r\n\r\n   at System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs:line 177\r\n```",
                                           "updatedAt":  "2020-02-05T15:29:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NTIwMjEyMg==",
                                           "createdAt":  "2020-02-12T13:21:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "And again in my PR today: https://helix.dot.net/api/2019-06-17/jobs/33ec1ed2-e6c8-44dc-a96b-5eb7178a3e42/workitems/System.Diagnostics.Process.Tests/console",
                                           "updatedAt":  "2020-02-12T13:21:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5ODUwMjk0Nw==",
                                           "createdAt":  "2020-03-13T01:21:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Hit again in my PR: https://dev.azure.com/dnceng/public/_build/results?buildId=557866\u0026view=logs\u0026j=71afe768-e493-597c-228c-037834193aeb\u0026t=3e74a8b7-5e62-58f8-6a85-9e36ef39d1c1",
                                           "updatedAt":  "2020-03-13T01:21:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42I5Lp",
                                           "createdAt":  "2021-08-30T12:28:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "Failed again in https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-58357-merge-81d9e3ef9eac4db793/System.Diagnostics.Process.Tests/1/console.2c15c039.log?sv=2019-07-07\u0026se=2021-09-19T11%3A46%3A46Z\u0026sr=c\u0026sp=rl\u0026sig=ArtgsaoLEKX4rXmEVe2yR8GjkEMWcmL82%2ByuioXfTwU%3D\r\n\r\nConfiguration: `net6.0-Linux-Debug-x64-CoreCLR_release-(Fedora.34.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-34-helix-20210728124700-4f64125`\r\n\r\n```\r\n  Discovering: System.Diagnostics.Process.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Diagnostics.Process.Tests (found 255 of 312 test cases)\r\n  Starting:    System.Diagnostics.Process.Tests (parallel test collections = on, max threads = 2)\r\n    System.Diagnostics.Tests.ProcessStartInfoTests.ShellExecute_Nano_Fails_Start [SKIP]\r\n      Condition(s) not met: \"IsWindowsNanoServer\"\r\nLinux\r\nLinux\r\nLinux\r\nLinux\r\nNone of the following programs were installed on this machine: xdg-open,gnome-open,kfmclient.\r\n    System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName [FAIL]\r\n      Assert.Equal() Failure\r\n                â†“ (pos 0)\r\n      Expected: /bin/sh\\0/tmp/ProcessTests_ca4tz2bk.sol/PrÂ·Â·Â·\r\n      Actual:   \r\n                â†‘ (pos 0)\r\n      Stack Trace:\r\n        /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs(176,0): at System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName()\r\n    System.Diagnostics.Tests.ProcessTests.TestProcessRecycledPid [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabledAndRemoteExecutorSupported\"\r\n  Finished:    System.Diagnostics.Process.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Diagnostics.Process.Tests  Total: 316, Errors: 0, Failed: 1, Skipped: 2, Time: 17.844s\r\n```",
                                           "updatedAt":  "2021-08-30T12:28:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AZXKq",
                                           "createdAt":  "2022-03-28T09:10:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Failed again, from [console logs](https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-5ea0f2fd833d45088e/System.Diagnostics.Process.Tests/1/console.7f468dd7.log?sv=2019-07-07\u0026se=2022-04-14T20%3A54%3A59Z\u0026sr=c\u0026sp=rl\u0026sig=FgagH8O56p5dd5tvlDL8guX%2By8R1O2BG0yX%2BAUNkOtE%3D):\r\n\r\n```log\r\nConsole log: \u0027System.Diagnostics.Process.Tests\u0027 from job 5ea0f2fd-833d-4508-8e58-b565b6a4f16d workitem ee26e64c-d3e5-4cef-a3de-c90c6a5816d1 (redhat.7.amd64.open.rt) executed on machine a000ZXN\r\n+ ./RunTests.sh --runtime-path /mnt/work/B0FD097F/p\r\n----- start Fri Mar 25 21:06:19 UTC 2022 =============== To repro directly: =====================================================\r\npushd .\r\n/mnt/work/B0FD097F/p/dotnet exec --runtimeconfig System.Diagnostics.Process.Tests.runtimeconfig.json --depsfile System.Diagnostics.Process.Tests.deps.json xunit.console.dll System.Diagnostics.Process.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing \r\npopd\r\n===========================================================================================================\r\n/mnt/work/B0FD097F/w/C1C10A38/e /mnt/work/B0FD097F/w/C1C10A38/e\r\n  Discovering: System.Diagnostics.Process.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Diagnostics.Process.Tests (found 257 of 314 test cases)\r\n  Starting:    System.Diagnostics.Process.Tests (parallel test collections = on, max threads = 2)\r\n    System.Diagnostics.Tests.ProcessStartInfoTests.ShellExecute_Nano_Fails_Start [SKIP]\r\n      Condition(s) not met: \"IsWindowsNanoServer\"\r\nLinux\r\nLinux\r\nLinux\r\nLinux\r\nxdg-open: file \u0027/nosuchfile\u0027 does not exist\r\n    System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName [FAIL]\r\n      Assert.Equal() Failure\r\n                ↓ (pos 0)\r\n      Expected: /bin/sh\\0/tmp/ProcessTests_dcap2jdw.jl4/Pr···\r\n      Actual:   \r\n                ↑ (pos 0)\r\n      Stack Trace:\r\n        /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs(177,0): at System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName()\r\n    System.Diagnostics.Tests.ProcessTests.TestProcessRecycledPid [SKIP]\r\n```",
                                           "updatedAt":  "2022-03-28T09:10:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AcsPl",
                                           "createdAt":  "2022-03-28T23:57:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@tmds any idea why we\u0027re occasionally not successfully getting a process name on Linux? ",
                                           "updatedAt":  "2022-03-28T23:57:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A0PMW",
                                           "createdAt":  "2022-04-04T11:24:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "Do we have some data on how long the test runs in case it fails?\r\n\r\nIn particular: is it about the duration of the script that we\u0027re running as the child process?\r\n\r\nhttps://github.com/dotnet/runtime/blob/c830e33c1aa0526ceefead48e39c3d483e7732c9/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs#L167",
                                           "updatedAt":  "2022-04-04T11:24:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BJ1h1",
                                           "createdAt":  "2022-04-08T17:09:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "@dotnet/area-system-diagnostics-process this issue hit the rolling builds today, specifically the `Libraries Test Run release mono Linux x64 Release` pipeline : https://dev.azure.com/dnceng/public/_build/results?buildId=1705722\u0026view=results\r\n\r\n- Job: https://dev.azure.com/dnceng/public/_build/results?buildId=1705722\u0026view=logs\u0026j=3b5945b0-87a7-52cf-843a-406c21a8e27e\u0026t=e39ccb1c-c254-5fe4-1311-a73734943961\u0026l=873\r\n- Log: https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-6595bdb8f3654fd48b/System.Diagnostics.Process.Tests/1/console.8d54464b.log?sv=2019-07-07\u0026se=2022-04-27T20%3A55%3A57Z\u0026sr=c\u0026sp=rl\u0026sig=NbpDYcsoHNDVEOr4iTnEcTYySWjAL11BiBcZcXYNpPA%3D\r\n- Callstack:\r\n```\r\nSystem.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName [FAIL]\r\n      Assert.Equal() Failure\r\n                ↓ (pos 0)\r\n      Expected: /bin/sh\\0/tmp/ProcessTests_54oj45rb.rvr/Pr···\r\n      Actual:   \r\n                ↑ (pos 0)\r\n      Stack Trace:\r\n        /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs(177,0): at System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName()\r\n        /_/src/mono/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.Mono.cs(386,0): at System.Reflection.RuntimeMethodInfo.InvokeWorker(Object obj, BindingFlags invokeAttr, Span`1 parameters)\r\n```",
                                           "updatedAt":  "2022-04-08T17:09:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BJ8kn",
                                           "createdAt":  "2022-04-08T17:41:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "To answer @tmds question, these seem to be finishing quickly:\r\n\u003c!-- csl: https://engsrvprod.kusto.windows.net/engineeringdata --\u003e\r\n```kusto\r\nTestResults\r\n| join kind=inner WorkItems on WorkItemId\r\n| join kind=inner Jobs on JobId\r\n| where Method == \"ProcessNameMatchesScriptName\"\r\n| where Finished \u003e= now(-30d)\r\n| where Result == \"Fail\"\r\n| where Message startswith \"Assert.Equal() Failure\" //and Message contains \"···\"\r\n| project Type, Method,\r\n  Pipeline = tostring(parse_json(Properties).DefinitionName),//WorkItemFriendlyName,\r\n  Pipeline_Configuration = tostring(parse_json(Properties).configuration),\r\n  OS = QueueName,\r\n  Arch = tostring(parse_json(Properties).architecture),\r\n // Test = Type1,\r\n //Result,\r\n Finished,\r\n Build,//, WorkItemFriendlyName, WorkItemName,\r\n  Duration,\r\n // Method,\r\n // Build = tostring(parse_json(Properties).BuildNumber),\r\n   Message//,//\r\n ,StackTrace\r\n```\r\n\r\n|Type|Method|Pipeline|Pipeline_Configuration|OS|Arch|Finished|Build|Duration|Message|StackTrace|\r\n|---|---|---|---|---|---|---|---|---|---|---|\r\n|System.Diagnostics.Tests.ProcessTests|ProcessNameMatchesScriptName|runtime|Debug|ubuntu.1604.amd64.open.rt|x64|2022-03-21 10:17:23.5910000||0.007|Assert.Equal() Failure\u003cbr\u003e          ↓ (pos 0)\u003cbr\u003eExpected: /bin/sh\\0/tmp/ProcessTests_2w1u51xv.llx/Pr···\u003cbr\u003eActual:   \u003cbr\u003e          ↑ (pos 0)|   at System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs:line 177|\r\n|System.Diagnostics.Tests.ProcessTests|ProcessNameMatchesScriptName|runtime|Release|redhat.7.amd64.open.rt|x64|2022-03-25 21:06:45.4410000||0.004|Assert.Equal() Failure\u003cbr\u003e          ↓ (pos 0)\u003cbr\u003eExpected: /bin/sh\\0/tmp/ProcessTests_dcap2jdw.jl4/Pr···\u003cbr\u003eActual:   \u003cbr\u003e          ↑ (pos 0)|   at System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs:line 177|\r\n|System.Diagnostics.Tests.ProcessTests|ProcessNameMatchesScriptName|runtime|Debug|ubuntu.1804.amd64.open.rt|x64|2022-03-25 23:42:18.8780000||0.004|Assert.Equal() Failure\u003cbr\u003e          ↓ (pos 0)\u003cbr\u003eExpected: /bin/sh\\0/tmp/ProcessTests_bg1j300a.kye/Pr···\u003cbr\u003eActual:   \u003cbr\u003e          ↑ (pos 0)|   at System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs:line 177|\r\n|System.Diagnostics.Tests.ProcessTests|ProcessNameMatchesScriptName|runtime|Debug|ubuntu.1604.amd64.open.rt|x64|2022-04-02 12:34:26.0670000||0.004|Assert.Equal() Failure\u003cbr\u003e          ↓ (pos 0)\u003cbr\u003eExpected: /bin/sh\\0/tmp/ProcessTests_tf1otouy.3xk/Pr···\u003cbr\u003eActual:   \u003cbr\u003e          ↑ (pos 0)|   at System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs:line 177|\r\n|System.Diagnostics.Tests.ProcessTests|ProcessNameMatchesScriptName|runtime|Debug|ubuntu.1804.amd64.open.rt|x64|2022-04-05 21:09:29.6060000||0.063|Assert.Equal() Failure\u003cbr\u003e          ↓ (pos 0)\u003cbr\u003eExpected: /bin/sh\\0/tmp/ProcessTests_5gj4kzdy.jia/Pr···\u003cbr\u003eActual:   \u003cbr\u003e          ↑ (pos 0)|   at System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs:line 177\u003cbr\u003e   at System.Reflection.RuntimeMethodInfo.InvokeWorker(Object obj, BindingFlags invokeAttr, Span`1 parameters) in /_/src/mono/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.Mono.cs:line 386|\r\n|System.Diagnostics.Tests.ProcessTests|ProcessNameMatchesScriptName|runtime|Release|ubuntu.1804.amd64.open.rt|x64|2022-04-07 21:17:47.2680000||0.006|Assert.Equal() Failure\u003cbr\u003e          ↓ (pos 0)\u003cbr\u003eExpected: /bin/sh\\0/tmp/ProcessTests_54oj45rb.rvr/Pr···\u003cbr\u003eActual:   \u003cbr\u003e          ↑ (pos 0)|   at System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs:line 177\u003cbr\u003e   at System.Reflection.RuntimeMethodInfo.InvokeWorker(Object obj, BindingFlags invokeAttr, Span`1 parameters) in /_/src/mono/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.Mono.cs:line 386|\r\n",
                                           "updatedAt":  "2022-04-08T17:41:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C0-gu",
                                           "createdAt":  "2022-05-09T14:33:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@tmds  any other idea here? Not sure how to look next.",
                                           "updatedAt":  "2022-05-09T14:33:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EbPDB",
                                           "createdAt":  "2022-06-06T22:18:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Failing about every 2 days. @agocke @steveisok what is \"windows.10.amd64.android.open\" ? From the message, it\u0027s clearly not Windows.\r\n\r\n\u003c!-- csl: https://engsrvprod.kusto.windows.net/engineeringdata --\u003e\r\n```kusto\r\nTestResults\r\n| join kind=inner WorkItems on WorkItemId\r\n| join kind=inner Jobs on JobId\r\n| where Method == \"ProcessNameMatchesScriptName\"\r\n| where Finished \u003e= now(-30d)\r\n| where Result == \"Fail\"\r\n| where Message startswith \"Assert.Equal() Failure\" //and Message contains \"···\"\r\n| project Type, Method,\r\n  Pipeline = tostring(parse_json(Properties).DefinitionName),//WorkItemFriendlyName,\r\n  Pipeline_Configuration = tostring(parse_json(Properties).configuration),\r\n  OS = QueueName,\r\n  Arch = tostring(parse_json(Properties).architecture),\r\n // Test = Type1,\r\n //Result,\r\n Finished,//,Message,\r\n Build,//, WorkItemFriendlyName, WorkItemName,\r\n  Duration//,\r\n // Method,\r\n // Build = tostring(parse_json(Properties).BuildNumber),\r\n //,StackTrace\r\n```\r\n\r\n|Type|Method|Pipeline|Pipeline_Configuration|OS|Arch|Finished|Build|Duration|\r\n|---|---|---|---|---|---|---|---|---|\r\n|System.Diagnostics.Tests.ProcessTests|ProcessNameMatchesScriptName|runtime|Debug|ubuntu.1804.amd64.open.rt|x64|2022-05-13 17:07:23.0780000||0.024|\r\n|System.Diagnostics.Tests.ProcessTests|ProcessNameMatchesScriptName|runtime|Debug|ubuntu.1804.amd64.open.rt|x64|2022-05-13 22:42:10.6780000||0.003|\r\n|System.Diagnostics.Tests.ProcessTests|ProcessNameMatchesScriptName|runtime|Debug|ubuntu.1804.amd64.open.rt|x64|2022-05-19 18:28:44.6890000||0.01|\r\n|System.Diagnostics.Tests.ProcessTests|ProcessNameMatchesScriptName|runtime|Debug|ubuntu.1804.amd64.open.rt|x64|2022-05-20 04:23:05.4560000||0.006|\r\n|System.Diagnostics.Tests.ProcessTests|ProcessNameMatchesScriptName|runtime|Debug|ubuntu.1804.amd64.open.rt|x64|2022-05-21 13:25:33.7590000||0.007|\r\n|System.Diagnostics.Tests.ProcessTests|ProcessNameMatchesScriptName|runtime-staging|Release|windows.10.amd64.android.open|arm64|2022-05-24 19:52:12.1370000||0.03|\r\n|System.Diagnostics.Tests.ProcessTests|ProcessNameMatchesScriptName|runtime-staging|Release|windows.10.amd64.android.open|arm64|2022-05-25 17:37:48.9960000||0.02|\r\n|System.Diagnostics.Tests.ProcessTests|ProcessNameMatchesScriptName|runtime|Debug|ubuntu.1604.amd64.open.rt|x64|2022-05-29 09:50:10.8050000||0.007|\r\n|System.Diagnostics.Tests.ProcessTests|ProcessNameMatchesScriptName|runtime-coreclr libraries-jitstress|Release|ubuntu.1804.amd64.open.rt|x64|2022-05-31 16:40:28.1310000||0.006|\r\n|System.Diagnostics.Tests.ProcessTests|ProcessNameMatchesScriptName|runtime-extra-platforms|Release|ubuntu.1804.amd64.open.svc|x64|2022-06-01 08:59:55.8300000||0.003|\r\n|System.Diagnostics.Tests.ProcessTests|ProcessNameMatchesScriptName|runtime-staging|Release|windows.10.amd64.android.open|arm64|2022-06-01 10:46:23.1430000||0.05|\r\n|System.Diagnostics.Tests.ProcessTests|ProcessNameMatchesScriptName|runtime|Debug|ubuntu.1804.amd64.open.rt|x64|2022-06-03 01:44:40.2080000||0.003|\r\n",
                                           "updatedAt":  "2022-06-06T22:18:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EbTcn",
                                           "createdAt":  "2022-06-06T22:47:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "My guess was this is the Android emulation layer in Windows 10, but I don\u0027t understand why we would be running coreclr in that environment.",
                                           "updatedAt":  "2022-06-06T22:47:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EbT76",
                                           "createdAt":  "2022-06-06T22:51:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "\u003e Failing about every 2 days. @agocke @steveisok what is \"windows.10.amd64.android.open\" ? From the message, it\u0027s clearly not Windows.\r\n\r\nThe queue is for Android devices.  They are tethered to a windows machine.\r\n\r\n@directhex do you have any insight on why this may be flaky on Android?\r\n",
                                           "updatedAt":  "2022-06-06T22:51:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Egm7f",
                                           "createdAt":  "2022-06-08T02:56:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e @tmds any other idea here? Not sure how to look next.\r\n\r\nFrom the tables that got shared, the distros seem to be \u0027old\u0027. Does it happen on newer kernels?",
                                           "updatedAt":  "2022-06-08T02:56:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E5nRI",
                                           "createdAt":  "2022-06-15T03:54:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Assuming I\u0027m doing this right, mostly the tests run in containers on the same kernel, either Ubuntu 18.04 or 16.04. @MattGal @agocke am I reading this right? Have we considered running containers on newer kernels?\r\n\r\nAlso, do we use eg Ubuntu 18.04 with its original kernel (4.15) or do we use the refreshed versions that pick up newer kernels (https://ubuntu.com/kernel/lifecycle)\r\n\r\n\u003c!-- csl: https://engsrvprod.kusto.windows.net/engineeringdata --\u003e\r\n```kusto\r\nTestResults\r\n| join kind=inner WorkItems on WorkItemId\r\n| join kind=inner Jobs on JobId\r\n| where Method == \"ProcessNameMatchesScriptName\"\r\n| where Finished \u003e= now(-30d)\r\n| extend IsOneOfTheseFailures = (Result == \"Fail\" and Message startswith \"Assert.Equal() Failure\")\r\n| project IsOneOfTheseFailures,Type, Method,\r\n  Pipeline = tostring(parse_json(Properties).DefinitionName),//WorkItemFriendlyName,\r\n  Pipeline_Configuration = tostring(parse_json(Properties).configuration),\r\n  Container = tostring(parse_json(Properties).operatingSystem),\r\n  Kernel = QueueName,\r\n  Arch = tostring(parse_json(Properties).architecture),\r\n // Test = Type1,\r\n //Result,\r\n Finished,\r\n Build,//, WorkItemFriendlyName, WorkItemName,\r\n  Duration,\r\n // Method,\r\n // Build = tostring(parse_json(Properties).BuildNumber),\r\n   Message//,//\r\n ,StackTrace\r\n | summarize count() by Kernel, Container, IsOneOfTheseFailures\r\n```\r\n\r\n|Kernel|Container|IsOneOfTheseFailures|count_|\r\n|---|---|---|---|\r\n|ubuntu.1804.amd64.open.rt|(Debian.10.Amd64.Open)Ubuntu.1804.Amd64.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-10-helix-amd64-20210304164434-56c6673|1|4|\r\n|ubuntu.1604.amd64.open.svc|(Alpine.312.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.12-helix-20211214164128-aca80d8|0|9|\r\n|ubuntu.1604.amd64.open.svc|(Alpine.314.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.14-helix-amd64-20210910135833-1848e19|0|9|\r\n|sles.12.amd64.open.svc|SLES.12.Amd64.Open|0|10|\r\n|centos.7.amd64.open.svc|Centos.7.Amd64.Open|0|10|\r\n|ubuntu.1604.amd64.open.svc|(Fedora.29.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-29-helix-a12566d-20191210224553|0|8|\r\n|ubuntu.1604.amd64.open.svc|(Fedora.30.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-30-helix-4f8cef7-20200121150022|0|8|\r\n|ubuntu.1604.amd64.open.svc|Ubuntu.1604.Amd64.Open|0|10|\r\n|ubuntu.1804.amd64.open.svc|Ubuntu.1804.Amd64.Open|0|10|\r\n|ubuntu.1604.amd64.open.svc|(Ubuntu.1910.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-19.10-helix-amd64-cfcfd50-20191030180623|0|10|\r\n|redhat.7.amd64.open.svc|RedHat.7.Amd64.Open|0|10|\r\n|debian.9.amd64.open.svc|Debian.9.Amd64.Open|0|11|\r\n|sles.15.amd64.open.svc|SLES.15.Amd64.Open|0|10|\r\n|ubuntu.1804.armarch.open|(Alpine.313.Arm64.Open)ubuntu.1804.armarch.open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.13-helix-arm64v8-20210910135808-8a6f4f3|0|9|\r\n|ubuntu.1604.amd64.open.svc|(Debian.10.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-10-helix-amd64-bfcd90a-20200121150006|0|10|\r\n|ubuntu.1804.armarch.open|(Debian.9.Arm32.Open)Ubuntu.1804.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-9-helix-arm32v7-bfcd90a-20200121150037|0|8|\r\n|ubuntu.1804.armarch.open|(Ubuntu.1604.Arm64.Open)Ubuntu.1804.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-16.04-helix-arm64v8-bfcd90a-20200127194925|0|8|\r\n|ubuntu.1804.armarch.open|(Alpine.314.Arm64.Open)ubuntu.1804.armarch.open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.14-helix-arm64v8-20210910135810-8a6f4f3|0|9|\r\n|ubuntu.1604.amd64.open.svc|(Fedora.30.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-30-helix-20200512010621-4f8cef7|0|2|\r\n|ubuntu.1604.amd64.open.svc|(Fedora.32.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-32-helix-20200512010618-efb9f14|0|2|\r\n|ubuntu.1604.amd64.open.svc|(Alpine.312.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.12-helix-20200601195603-e06dc59|0|1|\r\n|ubuntu.1804.armarch.open|(Ubuntu.1804.ArmArch.Open)Ubuntu.1804.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-16.04-helix-arm64v8-bfcd90a-20200127194925|0|1|\r\n|ubuntu.1804.amd64.android.29.open.rt|Ubuntu.1804.Amd64.Android.29.Open|1|1|\r\n|windows.10.amd64.android.open|Windows.10.Amd64.Android.Open|1|3|\r\n|ubuntu.1804.amd64.open.rt|Ubuntu.1804.Amd64.Open|1|1|\r\n|ubuntu.1804.amd64.open.svc|(Alpine.313.Amd64.Open)Ubuntu.1804.Amd64.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.13-helix-amd64-20210910135845-8a6f4f3|1|1|\r\n|ubuntu.1604.amd64.open.rt|(Centos.7.Amd64.Open)Ubuntu.1604.Amd64.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-mlnet-helix-20210714125435-dde38af|1|1|\r\n",
                                           "updatedAt":  "2022-06-15T03:54:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E8crS",
                                           "createdAt":  "2022-06-15T16:41:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MattGal",
                                           "body":  "\u003e  @MattGal @agocke am I reading this right? Have we considered running containers on newer kernels?\r\n\r\nThat\u0027s correct; My understanding is the choice is yours, you could instead be using `ubuntu.2004.amd64.*` but aren\u0027t currently (no special .rt version of it, yet, since you don\u0027t use the other one), and we have not added 22.04 yet.  If you want either thing (22.04 queue / a special 20.04 .rt queue) just file an issue in dotnet/arcade asking for it. \r\n\r\n\u003e do we use eg Ubuntu 18.04 with its original kernel (4.15) or do we use the refreshed versions that pick up newer kernels\r\n\r\nWe strive to stay on the latest version published in the public Azure gallery; currently that\u0027s 18.04.202205270, or May 27th, so fairly fresh.",
                                           "updatedAt":  "2022-06-15T16:41:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FRjRU",
                                           "createdAt":  "2022-06-21T19:23:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "OK, opened an issue, and we can throw another kernel version into our mix..",
                                           "updatedAt":  "2022-06-21T19:23:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FSE9Z",
                                           "createdAt":  "2022-06-21T21:09:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "Failed again in https://github.com/dotnet/runtime/pull/71013/checks?check_run_id=6972717112:\r\n```log\r\nSystem.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName [FAIL]\r\n      Assert.Equal() Failure\r\n                ↓ (pos 0)\r\n      Expected: /bin/sh\\0/tmp/#ProcessTests_gvzvm1lb.l0c/P···\r\n      Actual:   \r\n                ↑ (pos 0)\r\n      Stack Trace:\r\n        /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs(179,0): at System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName()\r\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodInvoker.cs(69,0): at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n    System.Diagnostics.Tests.ProcessTests.TestProcessRecycledPid [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabledAndRemoteExecutorSupported\"\r\n  Finished:    System.Diagnostics.Process.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Diagnostics.Process.Tests  Total: 322, Errors: 0, Failed: 1, Skipped: 4, Time: 21.929s\r\n```\r\nhttps://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-71013-merge-cba83cce404640ce9e/System.Diagnostics.Process.Tests/1/console.4e45405d.log?helixlogtype=result",
                                           "updatedAt":  "2022-06-21T21:09:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HFC4n",
                                           "createdAt":  "2022-07-22T12:06:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Frequency updated in top post ... lately it is 1 hit per week (in average 1-2 hits per week). Removing blocking-clean-ci label now.",
                                           "updatedAt":  "2022-07-22T12:06:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IYsOA",
                                           "createdAt":  "2022-08-14T19:04:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Failed in https://github.com/dotnet/runtime/pull/73912  in NativeAOT run on arm64\r\n\r\n```\r\n[FAIL] System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName\r\nAssert.Equal() Failure\r\n          ↓ (pos 0)\r\nExpected: /bin/sh\\0/tmp/#ProcessTests_macg3lw5.q45/P···\r\nActual:   \r\n          ↑ (pos 0)\r\n   at System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName() + 0x3bc\r\n   at System.Diagnostics.Process!\u003cBaseAddress\u003e+0x105aad4\r\n   at System.Reflection.DynamicInvokeInfo.Invoke(Object, IntPtr, Object[], BinderBundle, Boolean) + 0xd8\r\n```\r\n",
                                           "updatedAt":  "2022-08-14T19:04:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IYsX_",
                                           "createdAt":  "2022-08-14T19:09:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "And here - failed again:\r\n\r\nhttps://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-73912-merge-6a50d560c07e4c518e/System.Diagnostics.Process.Tests/1/console.ee9855dd.log?helixlogtype=result\r\n\r\n```\r\n[FAIL] System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName\r\nAssert.Equal() Failure\r\n          ↓ (pos 0)\r\nExpected: /bin/sh\\0/tmp/#ProcessTests_x5rcuvjz.evg/P···\r\nActual:   \r\n          ↑ (pos 0)\r\n   at System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName() + 0x3bc\r\n   at System.Diagnostics.Process!\u003cBaseAddress\u003e+0x105aa34\r\n   at System.Reflection.DynamicInvokeInfo.Invoke(Object, IntPtr, Object[], BinderBundle, Boolean) + 0xd8\r\n```\r\n\r\nThis is on `(ubuntu.1804.armarch.open) using docker image mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm64v8-20220427172132-97d8652`",
                                           "updatedAt":  "2022-08-14T19:11:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IYu87",
                                           "createdAt":  "2022-08-14T20:25:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Is it happening at all on Ubuntu 2204 (newer kernel)?",
                                           "updatedAt":  "2022-08-14T20:25:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IZcpd",
                                           "createdAt":  "2022-08-15T05:23:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "It\u0027s possible this fails a lot more often with NativeAOT. I\u0027ve seen it fail in several of my PR\u0027s as well. Or we just send it to a different Helix queue for NativeAOT testing. But with NativeAOT it reproes in a significant percentage of runs. I would estimate one out of five runs.",
                                           "updatedAt":  "2022-08-15T05:23:18Z"
                                       }
                                   ],
                         "totalCount":  23
                     },
        "title":  "Test failure : System.Diagnostics.Tests.ProcessTests.ProcessNameMatchesScriptName",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "disabled-test",
                       "os-linux",
                       "test-bug",
                       "arch-x64"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1287",
        "createdAt":  "2020-01-03T22:42:12Z",
        "number":  1287,
        "author":  "Symbai",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCwpIOw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kirsan31",
                                            "createdAt":  "2020-01-04T08:30:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sirkadirov",
                                            "createdAt":  "2020-07-28T23:45:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "just-ero",
                                            "createdAt":  "2022-10-05T12:54:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2022-11-01T23:17:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xparadoxical",
                                            "createdAt":  "2023-06-12T17:23:30Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2023-05-19T13:01:12Z",
        "body":  "I would like to start a discussion about modernizing System.Diagnostics.Process class because I feel it\u0027s missing a lot of options most developers may need and all of them require a LOT of code. Also the class contains a couple of unnecessary strange behaviors from old dates which are left there for compatibility reasons. Since this modernization is supposed to be a breaking change, we shouldn\u0027t focus on the that it breaks old code rather if its worth it and whether we remain compatibility by moving all these changes into a new class similar to the new System.Text.Json.\r\n\r\n#### (Doable) Fixes:\r\n- Don\u0027t throw if something is inaccessible instead only return null. Typical situation when accessing an evaluated process while the current isn\u0027t or accessing main module filename on an UWP process.\r\n- Return all modules of a 64bit process when the current is 32bit\r\n\r\n#### New properties:\r\n- Bitness of the current process\r\n- Parent Process\r\n- IEnumerable of all windows\r\n  * Window Position\r\n  * Window Handle\r\n  * Window Size\r\n  * Window Title\r\n  * Window Class\r\n- IEnumerable of all memory regions\r\n  * Expose MEMORY_BASIC_INFORMATION information\r\n- IEnumerable of all threads\r\n  * Expose THREADENTRY information\r\n- IEnumerable of all handles\r\n  * Thread Handle\r\n  * Thread Flags\r\n  * Thread GrantedAccess\r\n- Whether its UWP or Win32 (enum or property?)\r\n- Commandline the process is executed with (there is no windows API (why?!) so this one might be questionable as we need to read the process memory to obtain these information)\r\n- Environment variables of the process  (there is no windows API (why?!) so this one might be questionable as we need to read the process memory to obtain these information)\r\n- WaitForExitAsync (there is a pull request for this https://github.com/dotnet/runtime/pull/1278 but not merged yet)\r\n\r\n#### New overloads:\r\n- Option to choose which information should be fetched on enumeration / creation. This can heavily improve the performance of Process.GetProcesses... when modules / windows etc. are not needed immediately and can be enumerated when the property is accessed instead.\r\n\r\nNearly all of them is doable with using WinAPIs already but requires the developer to know how to call them, which adds a ton of code and requires a lot of time to lookup. Some of the properties may be questionable like memory regions or thread handles because those might not be used that much, while others like bitness or memory modules are more often used and still currently not supported. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXKhbvw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MDc0MTI1Mg==",
                                           "createdAt":  "2020-01-04T00:52:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Process is already a huge class with several responsibilities that is tough to maintain so we would probably not want to add much more unless it is well defined on all platforms (Windows API should go elsewhere on some Windows specific type/library) using some reasonable query API.\r\n\r\nBitness is already covered here https://github.com/dotnet/runtime/issues/1124. Parent PID seems reasonable.\r\n\r\nCommand line and environment variables might depend as you say on whether there is reasonable API to get them.",
                                           "updatedAt":  "2020-01-04T00:52:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MDk3NDU3MA==",
                                           "createdAt":  "2020-01-06T01:51:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Parent PID is already implemented, just private: that should be an easy one.",
                                           "updatedAt":  "2020-01-06T01:51:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MTIwMDkwMw==",
                                           "createdAt":  "2020-01-06T16:13:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Symbai",
                                           "body":  "IEnumerable of all windows should easy too since you do this already when looking for the main window text. Most of it isn\u0027t too difficult or add too much new, just expose more information: https://source.dot.net/#System.Diagnostics.Process/System/Diagnostics/ProcessManager.Win32.cs,52\r\n\r\nFixing retrieving all modules regardless of bitness (I wonder what the Linux behavior here is, whether this is just a carried Windows-only bug kept for compatibility) should be relative simple too. https://source.dot.net/#System.Diagnostics.Process/System/Diagnostics/ProcessManager.Win32.cs,90 Calling Kernel32.CreateToolhelp32Snapshot and enumerate with Kernel32.Module32First always works when snapshot is created with flags TH32CS_SNAPMODULE32 and TH32CS_SNAPMODULE\r\n\r\nBitness also requires a single WinAPI call, again no idea about Linux at this point.\r\n\r\nIn my opinion the whole process class could get an overhaul and rid of old issues with 5.0 release. Either that or its get a new class to remain compatibility and avoid breaking changes. But the fact that for example enumerating memory modules fails on different bitness forcing developers to switch to WinAPI unless the bitness is known and guaranteed doesn\u0027t feel right in 2020. I feel like I am not only one but most are afraid of breaking changes so it kept left like this for many years now. Same as throwing instead of returning null. Already reported it but were told nobody knows why only that it exists since .NET 1 era. This is why I started this discussion to see how we can make things easier and better.",
                                           "updatedAt":  "2020-01-06T16:13:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzY3MjcwMA==",
                                           "createdAt":  "2020-10-05T14:34:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ohadschn",
                                           "body":  "Would this include parity with [CreateProcess](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa)?\r\n\r\nSpecifically, support for [Process Creation Flags](https://docs.microsoft.com/en-us/windows/win32/procthread/process-creation-flags) would be useful.",
                                           "updatedAt":  "2020-10-05T14:34:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PHO-A",
                                           "createdAt":  "2022-11-25T10:25:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "just-ero",
                                           "body":  "How would one start addressing a task such as this?\r\n\r\nEvidently, the `System.Diagnostics.Process` class is very lacking. I use it a lot and I find myself having to use a lot of Win32 API just to do a lot of things which either fix the class\u0027 functionality, or expand upon it with features which I would expect to be part of the class by default.\r\n\r\nA lot of the features I\u0027m looking for are mentioned in the original post; architecture, memory regions, debug symbols, windows, threads, better error handling, and a more modern API in general (async, TryX).\r\n\r\n---\r\n\r\nHowever, there\u0027s a pretty big hurdle to overcome for working on any features related to `System.Diagnostics.Process`: How does one test *literally anything*?\r\n\r\nIt\u0027s unreasonable to assume any given contributor has the capability to test the class in all possible environments; MacOS, Linux, Windows, Android, iOS, and various more obscure operating systems. With that in mind, is it even possible for someone tackling an issue such as this to implement features in a way where we can be sure that they work as intended on all machines?\r\n\r\n---\r\n\r\nOn a different note: Could we simply obsolete the entire existence of the `System.Diagnostics.Process` class by exposing `System.Diagnostics.ProcessManager.GetProcessIdFromHandle`? With that, a user can implement their own implementation of a process class and use methods such as `Process.GetProcessById(Process.GetProcessIdFromHandle(handle))`, getting a process from anywhere, any way they want.\r\n\r\nThe current `System.Diagnostics.Process` class doesn\u0027t exactly lend itself to fixes from an absolutely ancient implementation without introducing many handsful of breaking changes.",
                                           "updatedAt":  "2022-11-25T10:25:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cqFu_",
                                           "createdAt":  "2023-05-19T13:01:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "https://github.com/Tyrrrz/CliWrap is a great library that shows how SDP could be modernized and made more user friendly",
                                           "updatedAt":  "2023-05-19T13:01:11Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[Discussion] Modernize System.Diagnostics.Process class",
        "labels":  [
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/32225",
        "createdAt":  "2020-02-13T13:59:32Z",
        "number":  32225,
        "author":  "riku76",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-02T07:37:19Z",
        "body":  "On Linux I have a native daemon that is running my .NET Core 3.1.1 application as a child and this child is spawning another native child (eg. df or grep) the WaitForExit never returns even if the StandardOutput/Error are NOT redirected. From htop I can see that the child exits, shows quickly as a Zombie and then goes away, so it looks like .NET Core is closing the handle, but somehow ignoring that it exited. Also, the same code works fine if executed on command-line OR under Mono 6.4.0 (even under daemon). Platform is Raspberry Pi 4 (armv7).\r\n\r\nvar psi = new System.Diagnostics.ProcessStartInfo(\"/bin/df\", \"-h\");\r\npsi.UseShellExecute = false;\r\npsi.CreateNoWindow = true;\r\n\r\nvar p = new System.Diagnostics.Process();\r\np.StartInfo = psi;\r\n\r\np.WaitForExit();  //Hangs if running under a daemon process\r\n\r\nAs a workaround it is possible to redirect the StandardOutput, use ReadToEnd on it to wait and then dispose the process object. However, the application exit code is then lost.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUZTayA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NTgxMzA2OA==",
                                           "createdAt":  "2020-02-13T15:24:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "Does the issue happen also when the .NET application itself is the daemon?\r\nAre you using systemd? or another init system?\r\nWhat should I do to reproduce this?",
                                           "updatedAt":  "2020-02-13T15:24:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NjEyMzU5Mg==",
                                           "createdAt":  "2020-02-14T06:51:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "riku76",
                                           "body":  "Haven\u0027t tried with the .NET app itself as the daemon. Running under systemd. In my scenario a native daemon app is starting the .NET Core 3.1.1 app, which is then using the System.Diagnostics.Process to spawn another native app, with the code above.",
                                           "updatedAt":  "2020-02-14T06:51:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NjIxMjkyMA==",
                                           "createdAt":  "2020-02-14T11:04:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "riku76",
                                           "body":  "I tested that it does not repro if .NET Core app is directly ran as daemon, you need to be a child process of daemon for it to repeat. Here is full .NET test code that I used (and that reproduces the problem):\r\n\r\n`namespace HangTest\r\n{\r\n\tclass Program\r\n\t{\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\tusing(var sw=new System.IO.StreamWriter(\"/tmp/HangTest\"))\r\n\t\t\t{\r\n\t\t\t\tsw.AutoFlush=true;\r\n\t\t\t\tfor(int i=0;i\u003c100;i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tsw.WriteLine(\"HangTest iteration #\" + i);\r\n\t\t\t\t\tvar psi = new System.Diagnostics.ProcessStartInfo(\"/bin/df\", \"-h\");\r\n\t\t\t\t\tpsi.UseShellExecute = false;\r\n\t\t\t\t\tpsi.CreateNoWindow = true;\r\n\r\n\t\t\t\t\tusing(var p = new System.Diagnostics.Process())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tp.StartInfo = psi;\r\n\t\t\t\t\t\tp.Start();\r\n\r\n\t\t\t\t\t\tp.WaitForExit(); //Hangs if running as a child of a daemon process\r\n\t\t\t\t\t}\r\n\t\t\t\t\tSystem.Threading.Thread.Sleep(1000);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n`\r\n\r\nFrom /tmp/HangTest it is easy to monitor whether it works or hangs. ",
                                           "updatedAt":  "2020-02-14T11:05:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NzQ3MzU0OA==",
                                           "createdAt":  "2020-02-18T14:00:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e you need to be a child process of daemon for it to repeat.\r\n\r\nHow can I reproduce this?",
                                           "updatedAt":  "2020-02-18T14:00:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MDkzODQzNw==",
                                           "createdAt":  "2020-02-25T15:55:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tester346",
                                           "body":  "@riku76 \r\n\r\nI\u0027m not sure if it may help you, but check this approach:\r\n\r\nhttps://stackoverflow.com/a/60355879/10522960\r\n\r\n\tpublic static void ExecuteScriptRx(string path, int processTimeOutMilliseconds, out string logs, out bool success, params string[] args)\r\n\t{\r\n\t\tStringBuilder output = new StringBuilder();\r\n\t\tStringBuilder error = new StringBuilder();\r\n\r\n\t\tusing (var process = new Process())\r\n\t\tusing (var disposables = new CompositeDisposable())\r\n\t\t{\r\n\t\t\tprocess.StartInfo = new ProcessStartInfo\r\n\t\t\t{\r\n\t\t\t\tWindowStyle = ProcessWindowStyle.Hidden,\r\n\t\t\t\tFileName = \"powershell.exe\",\r\n\t\t\t\tRedirectStandardOutput = true,\r\n\t\t\t\tRedirectStandardError = true,\r\n\t\t\t\tUseShellExecute = false,\r\n\t\t\t\tArguments = $\"-ExecutionPolicy Bypass -File \\\"{path}\\\"\",\r\n\t\t\t\tWorkingDirectory = Path.GetDirectoryName(path)\r\n\t\t\t};\r\n\r\n\t\t\tif (args.Length \u003e 0)\r\n\t\t\t{\r\n\t\t\t\tvar arguments = string.Join(\" \", args.Select(x =\u003e $\"\\\"{x}\\\"\"));\r\n\t\t\t\tprocess.StartInfo.Arguments += $\" {arguments}\";\r\n\t\t\t}\r\n\r\n\t\t\toutput.AppendLine($\"args:\u0027{process.StartInfo.Arguments}\u0027\");\r\n\r\n\t\t\t// Raise the Process.Exited event when the process terminates.\r\n\t\t\tprocess.EnableRaisingEvents = true;\r\n\r\n\t\t\t// Subscribe to OutputData\r\n\t\t\tObservable.FromEventPattern\u003cDataReceivedEventArgs\u003e(process, nameof(Process.OutputDataReceived))\r\n\t\t\t\t.Subscribe(\r\n\t\t\t\t\teventPattern =\u003e output.AppendLine(eventPattern.EventArgs.Data),\r\n\t\t\t\t\texception =\u003e error.AppendLine(exception.Message)\r\n\t\t\t\t).DisposeWith(disposables);\r\n\r\n\t\t\t// Subscribe to ErrorData\r\n\t\t\tObservable.FromEventPattern\u003cDataReceivedEventArgs\u003e(process, nameof(Process.ErrorDataReceived))\r\n\t\t\t\t.Subscribe(\r\n\t\t\t\t\teventPattern =\u003e error.AppendLine(eventPattern.EventArgs.Data),\r\n\t\t\t\t\texception =\u003e error.AppendLine(exception.Message)\r\n\t\t\t\t).DisposeWith(disposables);\r\n\r\n\t\t\tvar processExited =\r\n\t\t\t\t// Observable will tick when the process has gracefully exited.\r\n\t\t\t\tObservable.FromEventPattern\u003cEventArgs\u003e(process, nameof(Process.Exited))\r\n\t\t\t\t\t// First two lines to tick true when the process has gracefully exited and false when it has timed out.\r\n\t\t\t\t\t.Select(_ =\u003e true)\r\n\t\t\t\t\t.Timeout(TimeSpan.FromMilliseconds(processTimeOutMilliseconds), Observable.Return(false))\r\n\t\t\t\t\t// Force termination when the process timed out\r\n\t\t\t\t\t.Do(exitedSuccessfully =\u003e { if (!exitedSuccessfully) { try { process.Kill(); } catch {} } } );\r\n\r\n\t\t\t// Subscribe to the Process.Exited event.\r\n\t\t\tprocessExited\r\n\t\t\t\t.Subscribe()\r\n\t\t\t\t.DisposeWith(disposables);\r\n\r\n\t\t\t// Start process(ing)\r\n\t\t\tprocess.Start();\r\n\r\n\t\t\tprocess.BeginOutputReadLine();\r\n\t\t\tprocess.BeginErrorReadLine();\r\n\r\n\t\t\t// Wait for the process to terminate (gracefully or forced)\r\n\t\t\tprocessExited.Take(1).Wait();\r\n\r\n\t\t\tlogs = output + Environment.NewLine + error;\r\n\t\t\tsuccess = process.ExitCode == 0;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/// \u003csummary\u003e\r\n\t/// Extension methods associated with the IDisposable interface.\r\n\t/// \u003c/summary\u003e\r\n\tpublic static class DisposableExtensions\r\n\t{\r\n\t\t/// \u003csummary\u003e\r\n\t\t/// Ensures the provided disposable is disposed with the specified \u003csee cref=\"CompositeDisposable\"/\u003e.\r\n\t\t/// \u003c/summary\u003e\r\n\t\tpublic static T DisposeWith\u003cT\u003e(this T item, CompositeDisposable compositeDisposable)\r\n\t\t\twhere T : IDisposable\r\n\t\t{\r\n\t\t\tif (compositeDisposable == null)\r\n\t\t\t{\r\n\t\t\t\tthrow new ArgumentNullException(nameof(compositeDisposable));\r\n\t\t\t}\r\n\r\n\t\t\tcompositeDisposable.Add(item);\r\n\t\t\treturn item;\r\n\t\t}\r\n\t}",
                                           "updatedAt":  "2020-02-25T15:58:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RlNSp",
                                           "createdAt":  "2023-01-02T07:32:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EHerzog76",
                                           "body":  "Process.WaitForExit() hangs forever\r\nProcess.WaitForExit(60000) hangs until the timeout is reached.\r\n   =\u003e on Linux and on Windows\r\n\r\nIn the case, when you use    RedirectStandardOutput\r\n    -) and you read the result synchron  with   Proess.ReadToEnd()\r\n    -) and you start a child-process e.g.:\r\n               Process.StartInfo.FileName = \"powershell.exe\";\r\n               Process.StartInfo.Arguments = \"-NonInteractive -NoProfile -Command \"\u0026 {Write-Output \\\"Create a session with New-PSSession ...\\\"; Invoke-Command -Session $session -ScriptBlock { Get-Process | ConvertTo-Json }; Write-Output \\\"Delete your session ...\\\"}\";\r\n\r\nUntil now the only work-a-round is to read the StandardOutput  asynchron   with   Process.BeginOutputReadLine();\r\nWorking code pattern can be found here:\r\nhttps://stackoverflow.com/questions/139593/processstartinfo-hanging-on-waitforexit-why/53504707#53504707\r\n",
                                           "updatedAt":  "2023-01-02T07:32:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RlNrI",
                                           "createdAt":  "2023-01-02T07:37:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EHerzog76",
                                           "body":  "The code pattern from   tester346\r\nworks also, because it do the job asynchronous...  ",
                                           "updatedAt":  "2023-01-02T07:37:18Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Process.WaitForExit() hangs forever on Linux when .NET Core process is run as a child of a daemon",
        "labels":  [
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/32456",
        "createdAt":  "2020-02-17T23:32:49Z",
        "number":  32456,
        "author":  "616E64726173",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBWMHbg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "amsoedal",
                                            "createdAt":  "2020-11-09T19:11:10Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-04-06T11:45:26Z",
        "body":  "Version: DotNet Core 3.1\r\nOS: MacOSX Catalina\r\n\r\nRight now I am using \"open -W\" as a workaround but it\u0027s not ideal. \r\nAdditionally, differences in how MacOS handles Applications means that even if it did work as intended, in most cases we actually want to monitor the spawned child process. Opening TextEdit will in fact invoke TextEdit, but will wait on the entire TextEdit application to exit and not just the opened file. \r\n\r\nCorrect me if I am wrong, but there is presently no way in .NET to obtain the child PID except by calling Process.GetProcesses() and hoping you select the right one.\r\n\r\nExpected behavior: For it to work.\r\nActual behavior: It does not work.\r\nIdeal behavior: Return the child process if there is one, likely not possible since the invoked application will be the only one aware of the PID.\r\n\r\n```\r\n            using (var process = Process.Start(\"chrome\", \"www.bing.com\"))\r\n            {\r\n                process.WaitForExit();\r\n            }\r\n```\r\nSome Googling reveals people encountering similar issues.\r\n\r\n[https://stackoverflow.com/questions/55639285/process-waitforexit-is-not-waiting-in-mac-os-x-asp-net-core-2-2](https://stackoverflow.com/questions/55639285/process-waitforexit-is-not-waiting-in-mac-os-x-asp-net-core-2-2)\r\n\r\n\r\n\r\n[dotnet/corefx/Process.OSX.cs:48](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.Process/src/System/Diagnostics/Process.OSX.cs#L48) shows that it is invoking open; so I am getting the PID of open and not even the spawned application, explaining why Exited immediately fires.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMIV9dg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NzI0ODc4Mw==",
                                           "createdAt":  "2020-02-18T02:51:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "@wfurt ",
                                           "updatedAt":  "2020-02-18T02:51:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NzI2Njg1NA==",
                                           "createdAt":  "2020-02-18T03:58:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "\u003e TextEdit will in fact invoke TextEdit, but will wait on the entire TextEdit application to exit and not just the opened file.\r\n\r\nThat is how the Process API work. You can know when a process is finished but it does not give out information when a particular action is taken or completed.  It seems like the difference is that Linux would start fresh process but on OSX it could reuse an existing app.\r\nSo as there is a difference if the app exits when done processing a given task or not. \r\nIt seems like you would need to find a way how to tell the app to exit. \r\n\r\nIf you feel there is an issue with `WaitForExit`, please post runnable repro. ",
                                           "updatedAt":  "2020-02-18T03:58:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MzU1NjY3NA==",
                                           "createdAt":  "2020-03-02T18:47:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "616E64726173",
                                           "body":  "Yes, there is an issue with WaitForExit on OS X. It doesn\u0027t work at all and nowhere in the code does it append -W, which is the wait flag, that causes open to wait for it\u0027s child to be closed. \r\n\r\nAs I said, in [dotnet/corefx/Process.OSX.cs:48 ](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.Process/src/System/Diagnostics/Process.OSX.cs#L48)you can clearly see that it invokes /usr/bin/open to spin up a process.\r\n\r\n[dotnet/corefx/System.Diagnostics.Process/src/System/Diagnostics/Process.cs:1333](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs#L1333) simply waits for the exit event to be raised, which happens almost immediately as soon as /usr/bin/open completes launching the child process because it\u0027s monitoring the PID and events for \u0027open\u0027, which is it\u0027s own process, and not the process it launches.\r\n\r\nAdditionally, because of how this is being done, dotnet is NOT the parent process, bin/open is.",
                                           "updatedAt":  "2020-03-03T23:39:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczOTYxOTMwMw==",
                                           "createdAt":  "2020-12-07T02:04:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been automatically marked as no recent activity because it has been marked as needing more info but has not had any activity for 14 days. It will be closed if no further activity occurs within 7 more days.",
                                           "updatedAt":  "2020-12-07T02:04:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNDA1NDc3NA==",
                                           "createdAt":  "2021-04-06T11:45:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "amsoedal",
                                           "body":  "I\u0027m also interested in a fix for this! We were able to repro this using `bool WaitForExit(int milliseconds)`, but when we switched to `void WaitForExit()` it seemed to work. ",
                                           "updatedAt":  "2021-04-06T11:45:25Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Mac OS X - process.WaitForExit() does not work.",
        "labels":  [
                       "bug",
                       "area-System.Diagnostics.Process",
                       "os-mac-os-x"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36777",
        "createdAt":  "2020-05-20T19:36:10Z",
        "number":  36777,
        "author":  "DmitryKhryukin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCCcvzw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "2BitSalute",
                                            "createdAt":  "2021-11-14T19:55:21Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-11-15T02:18:48Z",
        "body":  "### Description\r\n\r\nI\u0027m trying to get information about current running processes. And I\u0027m getting InvalidOperationException exception accessing TotalProcessorTime Process property. \r\nPlease see the configuration and the error message below. \r\n\r\nHere is my example code (I\u0027ve created a test console app [here](https://github.com/DmitryKhryukin/TotalProcessorTimeOsxProblem))\r\n\r\n```\r\n        static void Main(string[] args)\r\n        {\r\n            var processes = Process.GetProcesses();\r\n\r\n            try\r\n            {\r\n                var timeInformationToBeUsed = processes.Select(x =\u003e x.TotalProcessorTime).ToList();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Console.WriteLine($\"Hi dear, I\u0027m {e.GetType()}!\");\r\n                Console.WriteLine(\"Why am I happening? :P\");\r\n                Console.WriteLine($\"Message: {e.Message}\");\r\n                Console.WriteLine($\"StackTrace: {e.StackTrace}\");\r\n            }\r\n\r\n            Console.ReadKey();\r\n        }\r\n```\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\n### Configuration\r\n\r\nSDK: 3.1.101\r\nFramework: .NETCoreApp v3.1 (I\u0027ve tried v2.1 too - the same result)\r\nOS: macOS Catalina Version 10.15.4\r\n\r\nNot sure if it\u0027s possible to reproduce it on other configurations.\r\n\r\n### Regression?\r\n\r\nI\u0027ve tried .NETCoreApp v2.1 too - the same result\r\n\r\n### Other information\r\n\r\n\u003e Message: Failed to set or retrieve rusage information. See the error code for OS-specific error information.\r\n\r\n\r\n\u003e StackTrace:   \r\n\u003e at Interop.libproc.proc_pid_rusage(Int32 pid)\r\n\u003e at System.Diagnostics.Process.get_TotalProcessorTime()\r\n\u003e at TotalProcessorTimeOsxProblem.Program.\u003c\u003ec.\u003cMain\u003eb__0_0(Process x) in /Projects/TotalProcessorTimeOsxProblem/TotalProcessorTimeOsxProblem/Program.cs:line 15\r\n\u003e at System.Linq.Enumerable.SelectArrayIterator`2.ToList()\r\n\u003e at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n\u003e at TotalProcessorTimeOsxProblem.Program.Main(String[] args) in /Projects/TotalProcessorTimeOsxProblem/TotalProcessorTimeOsxProblem/Program.cs:line 15\r\n\r\n\r\nSo the exception is happening in [Process.OSX.cs ](https://github.com/dotnet/runtime/blob/4f9ae42d861fcb4be2fcd5d3d55d5f227d30e723/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.OSX.cs)\r\n\r\n```\r\n        public TimeSpan TotalProcessorTime\r\n        {\r\n            get\r\n            {\r\n                EnsureState(State.HaveNonExitedId);\r\n                Interop.libproc.rusage_info_v3 info = Interop.libproc.proc_pid_rusage(_processId);\r\n                return new TimeSpan(Convert.ToInt64((info.ri_system_time + info.ri_user_time) / NanosecondsTo100NanosecondsFactor));\r\n            }\r\n        }\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOObl-qw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTY4MjQzMA==",
                                           "createdAt":  "2020-05-20T19:36:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-05-20T19:36:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTczNjY2MA==",
                                           "createdAt":  "2020-05-20T21:28:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DmitryKhryukin",
                                           "body":  "same problem with UserProcessorTime and PrivilegedProcessorTime\r\n\r\n`Interop.libproc.rusage_info_v3 info = Interop.libproc.proc_pid_rusage(_processId);`",
                                           "updatedAt":  "2020-05-20T21:28:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTczNzMxMQ==",
                                           "createdAt":  "2020-05-20T21:29:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBIkAyw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DmitryKhryukin",
                                                                               "createdAt":  "2020-05-20T21:33:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2020-06-25T17:47:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I don\u0027t know the cause of your problem, but I think we\u0027d welcome a PR to include the error code in the exception at least - the message suggests to look at it but doesn\u0027t include it!\r\n```c#\r\n            // Get the PIDs rusage info\r\n            int result = proc_pid_rusage(pid, RUSAGE_INFO_V3, \u0026info);\r\n            if (result \u003c 0)\r\n            {\r\n                throw new InvalidOperationException(SR.RUsageFailure);\r\n            }\r\n\r\n            return info;\r\n```",
                                           "updatedAt":  "2020-05-20T21:29:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTg2OTczMQ==",
                                           "createdAt":  "2020-05-21T04:19:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBFGeJQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DmitryKhryukin",
                                                                               "createdAt":  "2020-05-22T15:15:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Ideally it could append the actual message from the system corresponding to the code. That might be done with `Interop.Sys.StrError(result)`",
                                           "updatedAt":  "2020-05-21T04:19:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTkxMjA3Mw==",
                                           "createdAt":  "2020-05-21T06:35:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DmitryKhryukin",
                                           "body":  "on Windows it throws another exception: \r\nSystem.ComponentModel.Win32Exception\r\n\r\n```\r\nMessage: Access is denied.\r\nStackTrace:    at System.Diagnostics.ProcessManager.OpenProcess(Int32 processId, Int32 access, Boolean throwIfExited)\r\n   at System.Diagnostics.Process.GetProcessHandle(Int32 access, Boolean throwIfExited)\r\n   at System.Diagnostics.Process.GetProcessTimes()\r\n   at System.Diagnostics.Process.get_TotalProcessorTime()\r\n   at TotalProcessorTimeOsxProblem.Program.\u003c\u003ec.\u003cMain\u003eb__0_0(Process x) in C:\\Users\\xxx\\Documents\\TotalProcessorTimeOsxProblem-master\\TotalProcessorTimeOsxProblem-master\\TotalProcessorTimeOsxProblem\\Program.cs:line 15\r\n   at System.Linq.Enumerable.SelectArrayIterator`2.ToList()\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n   at TotalProcessorTimeOsxProblem.Program.Main(String[] args) in C:\\Users\\xxx\\Documents\\TotalProcessorTimeOsxProblem-master\\TotalProcessorTimeOsxProblem-master\\TotalProcessorTimeOsxProblem\\Program.cs:line 15\r\n```\r\n\r\nso looks like it might be some system processes which are not accessible ",
                                           "updatedAt":  "2020-05-21T06:35:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTkyNjYzOQ==",
                                           "createdAt":  "2020-05-21T07:15:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBE7ehg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DmitryKhryukin",
                                                                               "createdAt":  "2020-05-21T07:24:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "likely a different cause : need that Mac error code ",
                                           "updatedAt":  "2020-05-21T07:15:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTkzMTU5NQ==",
                                           "createdAt":  "2020-05-21T07:27:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCCdq7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "2BitSalute",
                                                                               "createdAt":  "2021-11-15T02:18:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "DmitryKhryukin",
                                           "body":  "I\u0027ve updated my [test project ](https://github.com/DmitryKhryukin/TotalProcessorTimeOsxProblem/blob/master/TotalProcessorTimeOsxProblem/Program.cs)a bit to get more info about the processes which I can\u0027t get an access to. \r\n\r\nAll of them have empty ProcessName. So I guess it might mean all of them are some system processes.",
                                           "updatedAt":  "2020-05-21T07:27:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NDQ3Mjc3Ng==",
                                           "createdAt":  "2020-07-06T21:23:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@DmitryKhryukin any interest in offering a PR to add such code?",
                                           "updatedAt":  "2020-07-06T21:23:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjY5NDM2OQ==",
                                           "createdAt":  "2020-07-10T14:05:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DmitryKhryukin",
                                           "body":  "@danmosemsft yep, I\u0027ll have a look soon. cheers ",
                                           "updatedAt":  "2020-07-10T14:05:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NDQxMDA4OQ==",
                                           "createdAt":  "2020-12-14T12:34:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@DmitryKhryukin have you made any progress on this? please let me know if you need some help",
                                           "updatedAt":  "2020-12-14T12:34:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45uX6r",
                                           "createdAt":  "2021-11-15T02:18:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "2BitSalute",
                                           "body":  "\u003e I\u0027ve updated my [test project ](https://github.com/DmitryKhryukin/TotalProcessorTimeOsxProblem/blob/master/TotalProcessorTimeOsxProblem/Program.cs)a bit to get more info about the processes which I can\u0027t get an access to.\r\n\u003e \r\n\u003e All of them have empty ProcessName. So I guess it might mean all of them are some system processes.\r\n\r\nThat is what I see, also.\r\n\r\nMy own project started off as this SignalR ASP.NET Core tutorial, by the way:\r\nhttps://docs.microsoft.com/en-us/aspnet/core/tutorials/signalr?WT.mc_id=dotnet-35129-website\u0026view=aspnetcore-6.0\u0026tabs=visual-studio-code",
                                           "updatedAt":  "2021-11-15T02:18:48Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Process Property TotalProcessorTime throws InvalidOperationException exception on macOS",
        "labels":  [
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/39060",
        "createdAt":  "2020-07-01T03:49:52Z",
        "number":  39060,
        "author":  "fawdlstty",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-10-05T18:20:22Z",
        "body":  "# (ASP.Net Core) new process to create new process failed\r\n\r\n```csharp\r\n[Public]\r\n[AcceptVerbs (\"GET\", \"POST\")]\r\npublic IActionResult update () {\r\n\t_ = Task.Run (async () =\u003e {\r\n\t\t_hostApplicationLifetime.StopApplication ();\r\n\t\tvar (_p1, _p2) = RuntimeInformation.IsOSPlatform (OSPlatform.Linux)\r\n\t\t\t? (\"nohup\", $\"./{Assembly.GetExecutingAssembly ().GetName ().Name} \u0026\")\r\n\t\t\t: (\"dotnet\", Assembly.GetExecutingAssembly ().Location);\r\n\t\tusing (var _ps2 = Process.Start (new ProcessStartInfo (_p1, _p2) {\r\n\t\t\tWorkingDirectory = Environment.CurrentDirectory,//AppContext.BaseDirectory\r\n\t\t\tRedirectStandardInput = true,\r\n\t\t\tRedirectStandardOutput = true,\r\n\t\t\tRedirectStandardError = true\r\n\t\t})) { }\r\n\t\tawait Task.Delay (1000);\r\n\t\tEnvironment.Exit (0);\r\n\t});\r\n\treturn ApiReturns.Success ();\r\n}\r\n```\r\n\r\nI use this code to restart the server under Linux, the effect is always, the first time to create successfully and exit itself, the second time (new process) to create failed and exit itself, what is the cause of this problem, how to fix?\r\n\r\n# General\r\n\r\ncentos7.5\r\n.net core 3.1 (current latest version)\r\nindependent publish",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKBuWaw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MjY4NTE1Nw==",
                                           "createdAt":  "2020-07-01T22:55:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBPiVzg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2020-09-05T16:26:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Pilchie",
                                           "body":  "I don\u0027t think this is specific to ASP.NET.  I think you need to look at the standard input/output/logs/etc to see what\u0027s going wrong.",
                                           "updatedAt":  "2020-07-01T22:55:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MjY4NTM1Mg==",
                                           "createdAt":  "2020-07-01T22:56:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Pilchie",
                                           "body":  "@carlossanlop  I would move this to the runtime repo for Process.Start.",
                                           "updatedAt":  "2020-07-01T22:56:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MjcyNzUxMw==",
                                           "createdAt":  "2020-07-02T01:32:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fawdlstty",
                                           "body":  "I don\u0027t think this is specific to ASP.NET too, but it\u0027s not standard output",
                                           "updatedAt":  "2020-07-02T01:32:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1Mjc5MTk0OA==",
                                           "createdAt":  "2020-07-02T05:30:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "Is it possible the 2nd process is trying to bind to a port that the 1st process still has, and bombing?",
                                           "updatedAt":  "2020-07-02T05:30:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MjgzMzk4Mg==",
                                           "createdAt":  "2020-07-02T07:24:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fawdlstty",
                                           "body":  "`_hostApplicationLifetime.StopApplication ();`\r\nthis code may unbind port and the first restart are success",
                                           "updatedAt":  "2020-07-02T07:25:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjQyOTk2MA==",
                                           "createdAt":  "2020-07-10T01:24:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fawdlstty",
                                           "body":  "what should I do? close this issue and reopen from runtime?",
                                           "updatedAt":  "2020-07-10T01:24:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjQ5MjQzOQ==",
                                           "createdAt":  "2020-07-10T05:34:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-07-10T05:34:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MjgxMDUwMg==",
                                           "createdAt":  "2020-08-12T11:16:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Hello @fawdlstty \r\n\r\n\u003e [Public]\r\n\r\nFirst of all, exposing a public API method for stopping (or crashing) your service can allow some attackers to easily take your service down (imagine that someone writes a script that pings this url in a neverending loop). Please don\u0027t do it. (cc @GrabYourPitchforks @bartonjs)\r\n\r\n\u003e I use this code to restart the server under Linux\r\n\r\nWhat do you use to host your app? Most of the web servers should allow for restarting selected services on demand.\r\n\r\nAnother question I have is why do you want to restart your app? Is it because it has entered a faulty state? Have you considered implementing a [Fail Fast](http://joeduffyblog.com/2014/10/13/if-youre-going-to-fail-do-it-fast/) approach and configure your web server to reboot the app after every failure?\r\n\r\nThanks,\r\nAdam\r\n\r\n",
                                           "updatedAt":  "2020-08-12T11:16:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3Mjg5NjYxOQ==",
                                           "createdAt":  "2020-08-12T14:13:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fawdlstty",
                                           "body":  "\u003e Another question I have is why do you want to restart your app?\r\n\r\nCalled by Webhook and used for continuous deployment, the address is normally so complex that there is almost no vulnerability.\r\nThe software is very small and wants to be as simple as possible, so daemons and docker are not used.\r\n\r\n\u003e What do you use to host your app?\r\n\r\nHosting mode is Kestrel.\r\n",
                                           "updatedAt":  "2020-08-12T14:16:01Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "[question] new process to create new process failed",
        "labels":  [
                       "question",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45685",
        "createdAt":  "2020-12-07T16:35:27Z",
        "number":  45685,
        "author":  "eiriktsarpalis",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBZI2Fw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adamsitnik",
                                            "createdAt":  "2020-12-07T16:51:29Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-07-09T06:54:24Z",
        "body":  "@adamsitnik has suggested we create a unit test that validates the new parsing logic using a fixed `maps` file input. We would need to include the implementation source files in the test project given that they are internal.\r\n\r\n_Originally posted by @eiriktsarpalis in https://github.com/dotnet/runtime/issues/45401#issuecomment-740029704_\r\n\r\nCf. https://github.com/dotnet/runtime/blob/738dcf7994167ab5e4c792f2163b72f79dc9c3a2/src/libraries/Common/src/Interop/Linux/procfs/Interop.ProcFsStat.cs#L129",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLBv9CQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDAzMTU2MQ==",
                                           "createdAt":  "2020-12-07T16:35:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-12-07T16:35:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDAzMTc1Mw==",
                                           "createdAt":  "2020-12-07T16:35:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n@adamsitnik has suggested we create a unit test that validates the new parsing logic using a fixed `maps` file input. We would need to include the implementation source files in the test project given that they are internal.\r\n\r\n_Originally posted by @eiriktsarpalis in https://github.com/dotnet/runtime/issues/45401#issuecomment-740029704_\r\n\r\nCf. https://github.com/dotnet/runtime/blob/738dcf7994167ab5e4c792f2163b72f79dc9c3a2/src/libraries/Common/src/Interop/Linux/procfs/Interop.ProcFsStat.cs#L129\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeiriktsarpalis\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `test enhancement`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-12-07T16:35:48Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add unit tests that validate ProcessModule parsing on Linux",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "test-enhancement"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49107",
        "createdAt":  "2021-03-04T02:49:51Z",
        "number":  49107,
        "author":  "sdmaclea",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-09T06:59:43Z",
        "body":  "See https://dev.azure.com/dnceng/public/_build/results?buildId=1021947\r\n\r\n```console\r\n----- start Wed Mar 3 17:35:59 PST 2021 =============== To repro directly: =====================================================\r\npushd .\r\n/tmp/helix/working/C24F0A5F/p/dotnet exec --runtimeconfig System.Diagnostics.Process.Tests.runtimeconfig.json --depsfile System.Diagnostics.Process.Tests.deps.json xunit.console.dll System.Diagnostics.Process.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=IgnoreForCI -notrait category=failing \r\npopd\r\n===========================================================================================================\r\n/private/tmp/helix/working/C24F0A5F/w/A42D099B/e /private/tmp/helix/working/C24F0A5F/w/A42D099B/e\r\n  Discovering: System.Diagnostics.Process.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Diagnostics.Process.Tests (found 247 of 310 test cases)\r\n  Starting:    System.Diagnostics.Process.Tests (parallel test collections = on, max threads = 8)\r\n    System.Diagnostics.Tests.ProcessStartInfoTests.ShellExecute_Nano_Fails_Start [SKIP]\r\n      Condition(s) not met: \"IsWindowsNanoServer\"\r\n    System.Diagnostics.Tests.ProcessTests.ProcessStart_UseShellExecute_OnWindows_OpenMissingFile_Throws [SKIP]\r\n      Condition(s) not met: \"HasWindowsShell\"\r\nDarwin\r\n    System.Diagnostics.Tests.ProcessTests.ProcessStart_UseShellExecute_OnWindows_DoesNotThrow [SKIP]\r\n      Condition(s) not met: \"HasWindowsShell\"\r\n    System.Diagnostics.Tests.ProcessTests.TestProcessRecycledPid [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabledAndRemoteExecutorSupported\"\r\n\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help         Display help.\r\n  --info            Display .NET information.\r\n  --list-sdks       Display the installed SDKs.\r\n  --list-runtimes   Display the installed runtimes.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\n    System.Diagnostics.Tests.ProcessTests.TestVirtualMemorySize64 [FAIL]\r\n      Assert.InRange() Failure\r\n      Range:  (1 - 9223372036854775807)\r\n      Actual: 0\r\n      Stack Trace:\r\n        /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs(742,0): at System.Diagnostics.Tests.ProcessTests.TestVirtualMemorySize64()\r\nin OSX, programToOpenWith is /usr/bin/open, while ProcessName is dotnet.\r\nin OSX, programToOpenWith is /usr/bin/nano, while ProcessName is dotnet.\r\n  Finished:    System.Diagnostics.Process.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Diagnostics.Process.Tests  Total: 307, Errors: 0, Failed: 1, Skipped: 4, Time: 17.581s\r\n/private/tmp/helix/working/C24F0A5F/w/A42D099B/e\r\n----- end Wed Mar 3 17:36:17 PST 2021 ----- exit code 1 ----------------------------------------------------------\r\n```\r\n\r\n/cc @sandreenko Might be an ABI issue ???",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPOM_Kw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MDI0NjExMQ==",
                                           "createdAt":  "2021-03-04T02:49:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: \nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSee https://dev.azure.com/dnceng/public/_build/results?buildId=1021947\r\n\r\n```console\r\n----- start Wed Mar 3 17:35:59 PST 2021 =============== To repro directly: =====================================================\r\npushd .\r\n/tmp/helix/working/C24F0A5F/p/dotnet exec --runtimeconfig System.Diagnostics.Process.Tests.runtimeconfig.json --depsfile System.Diagnostics.Process.Tests.deps.json xunit.console.dll System.Diagnostics.Process.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=IgnoreForCI -notrait category=failing \r\npopd\r\n===========================================================================================================\r\n/private/tmp/helix/working/C24F0A5F/w/A42D099B/e /private/tmp/helix/working/C24F0A5F/w/A42D099B/e\r\n  Discovering: System.Diagnostics.Process.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Diagnostics.Process.Tests (found 247 of 310 test cases)\r\n  Starting:    System.Diagnostics.Process.Tests (parallel test collections = on, max threads = 8)\r\n    System.Diagnostics.Tests.ProcessStartInfoTests.ShellExecute_Nano_Fails_Start [SKIP]\r\n      Condition(s) not met: \"IsWindowsNanoServer\"\r\n    System.Diagnostics.Tests.ProcessTests.ProcessStart_UseShellExecute_OnWindows_OpenMissingFile_Throws [SKIP]\r\n      Condition(s) not met: \"HasWindowsShell\"\r\nDarwin\r\n    System.Diagnostics.Tests.ProcessTests.ProcessStart_UseShellExecute_OnWindows_DoesNotThrow [SKIP]\r\n      Condition(s) not met: \"HasWindowsShell\"\r\n    System.Diagnostics.Tests.ProcessTests.TestProcessRecycledPid [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabledAndRemoteExecutorSupported\"\r\n\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help         Display help.\r\n  --info            Display .NET information.\r\n  --list-sdks       Display the installed SDKs.\r\n  --list-runtimes   Display the installed runtimes.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\n    System.Diagnostics.Tests.ProcessTests.TestVirtualMemorySize64 [FAIL]\r\n      Assert.InRange() Failure\r\n      Range:  (1 - 9223372036854775807)\r\n      Actual: 0\r\n      Stack Trace:\r\n        /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs(742,0): at System.Diagnostics.Tests.ProcessTests.TestVirtualMemorySize64()\r\nin OSX, programToOpenWith is /usr/bin/open, while ProcessName is dotnet.\r\nin OSX, programToOpenWith is /usr/bin/nano, while ProcessName is dotnet.\r\n  Finished:    System.Diagnostics.Process.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Diagnostics.Process.Tests  Total: 307, Errors: 0, Failed: 1, Skipped: 4, Time: 17.581s\r\n/private/tmp/helix/working/C24F0A5F/w/A42D099B/e\r\n----- end Wed Mar 3 17:36:17 PST 2021 ----- exit code 1 ----------------------------------------------------------\r\n```\r\n\r\n/cc @sandreenko Might be an ABI issue ???\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esdmaclea\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-arm64`, `area-System.Diagnostics.Process`, `os-mac-os-x-big-sur`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-04T02:49:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NDExMjcwNw==",
                                           "createdAt":  "2021-03-09T16:20:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sdmaclea",
                                           "body":  "Seems to be possibly an intermittent failure. It didn\u0027t fail in one of my runs, but it did fail again in https://dev.azure.com/dnceng/public/_build/results?buildId=1028375",
                                           "updatedAt":  "2021-03-09T16:20:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NTE2MTA1OA==",
                                           "createdAt":  "2021-06-05T01:16:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sandreenko",
                                           "body":  "@sdmaclea I think it is the same intermittent failure that you are fighting with not related to JitStress but happening there oftener because of the longer runs. Feel free to assign it back if it stays after your fix.",
                                           "updatedAt":  "2021-06-05T01:16:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NTQ1MjAzOA==",
                                           "createdAt":  "2021-06-06T19:44:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sandreenko",
                                           "body":  "I left it running for a night yesterday (just the single test) and it shows some errors:\r\n```\r\nhundreds of successful runs before\r\n\r\n   System.Diagnostics.Process.Tests  Total: 1, Errors: 0, Failed: 0, Skipped: 0, Time: 0.404s\r\n  Discovering: System.Diagnostics.Process.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Diagnostics.Process.Tests (found 1 of 310 test case)\r\n  Starting:    System.Diagnostics.Process.Tests (parallel test collections = on, max threads = 8)\r\n    System.Diagnostics.Tests.ProcessTests.TestVirtualMemorySize64 [STARTING]\r\nA fatal error occurred. The folder [/Users/seandree/git/runtime/artifacts/bin/testhost/net6.0-OSX-Release-arm64/shared/Microsoft.NETCore.App/6.0.0/host/fxr] does not exist\r\n    System.Diagnostics.Tests.ProcessTests.TestVirtualMemorySize64 [FAIL]\r\n      Assert.InRange() Failure\r\n      Range:  (1 - 9223372036854775807)\r\n      Actual: 0\r\n      Stack Trace:\r\n        /Users/seandree/git/runtime/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs(750,0): at System.Diagnostics.Tests.ProcessTests.TestVirtualMemorySize64()\r\n    System.Diagnostics.Tests.ProcessTests.TestVirtualMemorySize64 [FINISHED] Time: 0.1286223s\r\n  Finished:    System.Diagnostics.Process.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Diagnostics.Process.Tests  Total: 1, Errors: 0, Failed: 1, Skipped: 0, Time: 0.607s\r\n  Discovering: System.Diagnostics.Process.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Diagnostics.Process.Tests (found 1 of 310 test case)\r\n  Starting:    System.Diagnostics.Process.Tests (parallel test collections = on, max threads = 8)\r\n    System.Diagnostics.Tests.ProcessTests.TestVirtualMemorySize64 [STARTING]\r\nA fatal error occurred. The folder [/Users/seandree/git/runtime/artifacts/bin/testhost/net6.0-OSX-Release-arm64/shared/Microsoft.NETCore.App/6.0.0/host/fxr] does not exist\r\n    System.Diagnostics.Tests.ProcessTests.TestVirtualMemorySize64 [FAIL]\r\n      Assert.InRange() Failure\r\n      Range:  (1 - 9223372036854775807)\r\n      Actual: 0\r\n      Stack Trace:\r\n        /Users/seandree/git/runtime/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs(750,0): at System.Diagnostics.Tests.ProcessTests.TestVirtualMemorySize64()\r\n    System.Diagnostics.Tests.ProcessTests.TestVirtualMemorySize64 [FINISHED] Time: 0.1283732s\r\n  Finished:    System.Diagnostics.Process.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Diagnostics.Process.Tests  Total: 1, Errors: 0, Failed: 1, Skipped: 0, Time: 0.516s\r\n  Discovering: System.Diagnostics.Process.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Diagnostics.Process.Tests (found 1 of 310 test case)\r\n  Starting:    System.Diagnostics.Process.Tests (parallel test collections = on, max threads = 8)\r\n    System.Diagnostics.Tests.ProcessTests.TestVirtualMemorySize64 [STARTING]\r\nA fatal error occurred. The folder [/Users/seandree/git/runtime/artifacts/bin/testhost/net6.0-OSX-Release-arm64/shared/Microsoft.NETCore.App/6.0.0/host/fxr] does not exist\r\n    System.Diagnostics.Tests.ProcessTests.TestVirtualMemorySize64 [FAIL]\r\n      Assert.InRange() Failure\r\n      Range:  (1 - 9223372036854775807)\r\n      Actual: 0\r\n      Stack Trace:\r\n        /Users/seandree/git/runtime/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs(750,0): at System.Diagnostics.Tests.ProcessTests.TestVirtualMemorySize64()\r\n    System.Diagnostics.Tests.ProcessTests.TestVirtualMemorySize64 [FINISHED] Time: 0.1293544s\r\n  Finished:    System.Diagnostics.Process.Tests\r\n\r\nhundreds of successful runs after\r\n\r\n```\r\n\r\nlooks like it still exists and my initial testing was not lucky to catch it. I will return the exclusion. It is suspicious that the failures happened one after each other and showed this `The folder [/Users/seandree/git/runtime/artifacts/bin/testhost/net6.0-OSX-Release-arm64/shared/Microsoft.NETCore.App/6.0.0/host/fxr] does not exist`, could it be an OS issue with a blocked file or something?\r\n",
                                           "updatedAt":  "2021-06-06T19:44:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41BL_b",
                                           "createdAt":  "2021-07-29T22:32:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "this means libproc.GetProcessInfoById(pid).Value.ptinfo.pti_virtual_size was 0. \r\nInterop definitions are in https://github.com/dotnet/runtime/blob/e7b743cae325d4720fceaf7f84f68aaaf7bb7dbe/src/libraries/Common/src/Interop/OSX/Interop.libproc.GetProcessInfoById.cs.\r\nIt all seems done correctly as far as I can see looking at \r\nhttps://opensource.apple.com/source/xnu/xnu-7195.81.3/bsd/sys/proc_info.h.auto.html\r\nhttps://opensource.apple.com/source/xnu/xnu-7195.81.3/bsd/kern/proc_info.c.auto.html\r\nIt also does check the return code of proc_pidinfo correctly.\r\n\r\nThe simplest explanation is that the API just occasionally returning 0 on Apple Silicon.",
                                           "updatedAt":  "2021-07-29T22:32:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc484z8r",
                                           "createdAt":  "2022-01-25T19:19:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Can we take a closer look at this in 7.0?  We\u0027d like to remove test exceptions on Apple Silicon.",
                                           "updatedAt":  "2022-01-25T19:19:46Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[macOS-arm64] System.Diagnostics.Tests.ProcessTests.TestVirtualMemorySize64 [FAIL] on CoreCLR",
        "labels":  [
                       "arch-arm64",
                       "area-System.Diagnostics.Process",
                       "disabled-test",
                       "os-macos-bigsur (macOS11)"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49788",
        "createdAt":  "2021-03-17T23:32:45Z",
        "number":  49788,
        "author":  "SteveL-MSFT",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBme1Qw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mklement0",
                                            "createdAt":  "2021-03-18T15:30:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matsest",
                                            "createdAt":  "2021-04-08T16:40:04Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2021-07-13T05:34:19Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\nWhen using `Process.Start()` where `ProcessStartInfo.UseShellExecute = true` on Unix systems, the dotnet runtime relies on xdg-open (etc...) on Linux and open on macOS to call the shell to start that process.  However, if those commands fail, you get stderr written directly to the console.  Instead the exit code should be checked and if fails, then an exception containing stderr should be thrown.\r\n\r\n```csharp\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var p = new Process();\r\n            var psi = new ProcessStartInfo();\r\n            psi.FileName = \"foo\";\r\n            psi.UseShellExecute = true;\r\n            p.StartInfo = psi;\r\n            p.Start();\r\n        }\r\n    }\r\n```\r\n\r\nIn this example, it expects `foo` to not exist.  Instead of an exception, you get this written directly to the console:\r\n\r\n```output\r\nThe file /Users/steve/test/useshellexecute/foo does not exist.\r\n```\r\n\r\nIf you run `open foo` directly on macOS, you see the same error message written to stderr and the exit code is `1`.\r\n\r\n### Configuration\r\n\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\n6.0.100-preview.2.21155.3\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Other information\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOL84t4g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMTUxODg4NQ==",
                                           "createdAt":  "2021-03-18T00:02:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I think in general we do not know whether \"foo\" is a file in this case. It can be a URL, for example. How can we distinguish this case, from simply launching a process that returned 1? ",
                                           "updatedAt":  "2021-03-18T00:02:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMTY2Mjc1OA==",
                                           "createdAt":  "2021-03-18T06:19:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "\u003e It can be a URL, for example.\r\n\r\nBut it is true for Windows too.",
                                           "updatedAt":  "2021-03-18T06:19:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMjAyMjM4Nw==",
                                           "createdAt":  "2021-03-18T15:30:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mklement0",
                                           "body":  "I agree with @SteveL-MSFT that we should throw an _exception_ in response to a nonzero exit code from `open` (macOS) / `xdg-open` (Linux), which would be the equivalent of the ShellExecute WinAPI function reporting failure (which apparently _does_ already get reported as an exception).\r\n\r\nA nonzero exit code from these utilities signals _fundamental_ failure to interpret the operand, as opposed to whether the ultimate operation fails _once successfully delegated to the GUI shell_, which is not `open` / `xdg-open`\u0027s responsibility:\r\n\r\nIn practice, this means that `xdg-open` and `open` fail (report a nonzero exit code) ONLY:\r\n\r\n* If a given operand starts with [what looks like] an _unsupported_ URI protocol specifier, e.g. `xdg-open nosuch://bogus`\r\n  * Note that a _supported_ protocol specifier _always_ reports success, because the URI is then handed off to the protocol handler, and not failing at _that_ is considered success - even if the URI ultimately turns out not to exist (or even turns out to be malformed); e.g., `xdg-open http://bogus` returns exit code `0`.\r\n  * As an inconsequential aside: \r\n    * `xdg-open` does interpret this as a _URI_ and reports non-support for this protocol with `The specified location is not supported`\r\n    * `open` falls back to interpreting this as a _file_.\r\n  * By contrast, Windows takes a more hopeful approach and, instead of failing, offers to look in the Microsoft Store for applications that can handle such URIs - from the perspective of ShellExecute this is _not_ a failure, so no exception occurs.\r\n\r\n* In the absence of a what looks like a protocol specifier, the operand is assumed to be _file_ or _folder_, and both utilities fail if no such file-system item exists (e.g., `xdg-open nosuchfile`); ditto on Windows.\r\n\r\nIn short: A failure reported by whatever underlying system \"function\" is used - which on Unix means a nonzero exit code from an external utility - should translate into an exception - as it already does on Windows.\r\n\r\n",
                                           "updatedAt":  "2021-03-18T15:41:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMjA0MTMxNA==",
                                           "createdAt":  "2021-03-18T15:54:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBj_Phg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mklement0",
                                                                               "createdAt":  "2021-03-18T15:55:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@mklement0 that makes sense. I\u0027ll let the crew for this area make a determination.\r\n\r\nLooks like Mono has the same behavior that we currently do: https://github.com/mono/mono/blob/79b6e3f256a59ede74596ce82547f320bf1e9a99/mcs/class/System/Test/System.Diagnostics/ProcessTest.cs#L365-L368",
                                           "updatedAt":  "2021-03-18T15:54:18Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "UseShellExecute doesn\u0027t throw if fails on Linux/macOS",
        "labels":  [
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50201",
        "createdAt":  "2021-03-24T19:35:12Z",
        "number":  50201,
        "author":  "mklement0",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-04-08T21:49:10Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nmacOS has a kernel process with PID `0`.\r\n\r\n`System.Diagnostics.Process.GetProcessById(0)` does report it, but:\r\n\r\n* [as expected] when running without `sudo` with few properties filled in due to lack of permissions\r\n* [the bug] with `.SessionId` mistakenly reflecting _the current process\u0027_  session ID - both with and without `sudo`\r\n\r\nNote: A user process\u0027 `.SessionId` appears to be the session / process group leader, such as a shell process (incidentally, this should be clarified in https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process.sessionid) - process `0` does _not_ belong to it, and if you run the same code from different shell sessions, the session IDs are _always_ the same, implying that a spurious value is reported for process `0`.\r\n\r\n### Configuration\r\n\r\n.NET 6.0.100-preview.2.21155.3 on macOS 10.15.7 (Catalina)\r\n\r\n```csharp\r\n// !! Unexpectedly true\r\nSystem.Diagnostics.Process.GetProcessById(0).SessionId == System.Diagnostics.Process.GetCurrentProcess().SessionId\r\n```\r\n\r\n### Regression?\r\n\r\nNo.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMKbs1w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNjgxNjgyMw==",
                                           "createdAt":  "2021-03-25T14:06:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "The implementation uses the libc `getsid` function, which is described in the man page as (bolding is mind):\r\n\r\n\u003e getsid(0) returns the session ID of the calling process.\r\n\u003e getsid() returns the session ID of the process with process ID\r\n\u003e pid.  **If pid is 0, getsid() returns the session ID of the calling\r\n\u003e process.**\r\n\r\nSo the libc function being used is what\u0027s returning the session ID for the calling process when you request it for 0.\r\n\r\nWhat is it you believe it should be doing instead?  What would you do to retrieve that value if you were writing this in C?",
                                           "updatedAt":  "2021-03-25T14:06:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNjk1NTczMg==",
                                           "createdAt":  "2021-03-25T15:31:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mklement0",
                                           "body":  "Thanks for digging deeper, @stephentoub.\r\n\r\n\u003e What is it you believe it should be doing instead? What would you do to retrieve that value if you were writing this in C?\r\n\r\n* In terms of system calls there\u0027s an inherent design limitation we cannot overcome, I presume.\r\n* Pragmatically speaking, I think it makes much more sense to return `0` as the `SessionId`, which means:\r\n  * Special-case PID `0` on macOS and do _not_ call `getsid()` for it.\r\n  * Instead:\r\n    * return a hard-coded value of `0` as the session ID (what\u0027s good enough for Activity Monitor should be good enough for .NET - see below)\r\n    * document this assumption.\r\n\r\nNote that Linux systems appear _not_ to have a process with PID `0`.\r\n\r\nMore detailed rationale below.\r\n\r\n---\r\n\r\n* It looks like the system calls assume that `0` isn\u0027t a valid PID and therefore use it as a _placeholder_ value to represent the _current_ process.\r\n  * Similarly, `ps 0` does _not_ find a process.\r\n\r\n* However, there _is_ an actual process according to the Activity Monitor (as also reported by `Process.GetProcess()` and `Process.GetProcessById(0)`).\r\n\r\nExample screenshot:\r\n\r\n![image](https://user-images.githubusercontent.com/588825/112494755-b1d40500-8d59-11eb-9b24-073da27cbdaa.png)\r\n\r\nNote that Activity Monitor only lists a `Process Group`, not a _session_  (my superficial understanding is that a session can comprise multiple groups but only applies to _terminal_-based processes), and for PID `0` it is also `0`.\r\n\r\nConversely, the `Process` class only has a `SessionId` property, not also a `GroupId` property.\r\n\r\nI\u0027m _assuming_ the following is true (do tell me if I\u0027m wrong): \r\n\r\n* If a process is part of a process _group_, but not also of a _session_, it is the process _group_ ID (the PID of the process group _leader_) that is the session ID\r\n* If a process isn\u0027t even part of a group, as appears to be the case for process `0`, is its _own_ PID the acts as both the group and the session ID.\r\n\r\nIf the above assumptions are true, the session ID process with PID `0`  should be `0` too, since - in the absence of being associated with a _terminal_, the absence of a real session ID would make the _group_ ID  the session ID - which is `0`, as shown (though it begs the question how Activity Monitor determined this - perhaps hard-coded? undocumented APIs?).\r\n",
                                           "updatedAt":  "2021-03-25T15:35:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNjAyMTQ1Mw==",
                                           "createdAt":  "2021-04-08T17:53:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "If we decide to special case `Process.GetProcessById(0)` anyone actually relying on it to get the current process would be broken. \r\n\r\n@mklement0 what\u0027s your goal on trying to get information about PID 0? I am just trying to understand your scenario to see if it\u0027s worth taking the breaking change.",
                                           "updatedAt":  "2021-04-08T17:53:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNjA0Njk4OA==",
                                           "createdAt":  "2021-04-08T18:32:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mklement0",
                                           "body":  "@Jozkee.\r\n\r\nThe proposal is _not_ to special-case `.GetProcessById(0)`.\r\n\r\nInstead, it is to special-case `getsid(0)` in the sense of _not calling it_ if the PID is `0`, because it only ever gives you the _current_ process\u0027 session identifier, not the one of the bona fide PID `0` process on macOS.\r\n\r\nAnd it is _the wrong thing to do_ to report the _current_ process\u0027 session ID as the `.SessionId` value of the completely unrelated process with PID `0`.\r\n\r\nFor example, say I want to get all processes that belong to the same session as the current process in PowerShell:\r\n\r\n```powershell\r\nPS\u003e Get-Process | where SessionId -eq (Get-Process -Id $PID).SessionId | select Id\r\n   Id\r\n   --\r\n    0\r\n26830\r\n26831\r\n```\r\n\r\nAs you can see, process `0` was _incorrectly_ reported, due to its `.SessionId` property falsely reflecting the _current_ process\u0027 session ID.\r\n",
                                           "updatedAt":  "2021-04-08T18:33:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNjIzMzg3NA==",
                                           "createdAt":  "2021-04-08T21:38:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "\u003e The proposal is not to special-case .GetProcessById(0).\r\n\r\nAh right, I used the wrong words to say, special case PID 0 and do not call `getsid` in that case.\r\nAlso I just noticed that calling `getsid` is OSX specific. \r\n\r\nIn that case I think we have two options: either special case `0`, as you suggest, and verify that there is no issue doing so OR look for an alternative function that retrieves process information and stop using `getsid` (perhaps this option is not worth chasing since there may be a reason why we do what we do today for OSX).\r\n\r\nI am still curious, is this scenario affecting you in any way or is something that you noticed by toying around?",
                                           "updatedAt":  "2021-04-08T21:38:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNjI0NTk3NQ==",
                                           "createdAt":  "2021-04-08T21:49:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mklement0",
                                           "body":  "\u003e OR look for an alternative function that retrieves process information and stop using getsid (perhaps this option is not worth chasing since there may be a reason why we do what we do today for OSX).\r\n\r\nI do agree that this option is _not_ worth chasing.\r\n\r\nReporting a hard-coded `0` as the `.SessionId` value for the process with PID `0` strikes me as perfectly reasonable, [as argued above](https://github.com/dotnet/runtime/issues/50201#issuecomment-8069557320).\r\n\r\n\u003e I am still curious, is this scenario affecting you\r\n\r\nIf the PowerShell example I gave [above](https://github.com/dotnet/runtime/issues/50201#issuecomment-816046988) doesn\u0027t convince you that there is a problem, I don\u0027t know what else to say.",
                                           "updatedAt":  "2021-04-08T21:49:10Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "macOS: process with PID 0 is reported with spurious .SessionId property",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "os-mac-os-x"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50207",
        "createdAt":  "2021-03-24T21:09:18Z",
        "number":  50207,
        "author":  "mklement0",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-04-08T17:31:15Z",
        "body":  "### Description\r\n\r\nOn macOS, the following two system processes _may_ be running on a given system:\r\n\r\n* `/usr/libexec/firmwarecheckers/ethcheck/ethcheck`\r\n* `/usr/sbin/cupsd`\r\n\r\nTheir file modes are unusual - `-rwx--x--x` and `-r-x------` respectively. That is, they deny _read_ access to everyone but the root user.\r\n\r\nPresumably that is the reason that `System.Diagnostics.Process` fails to obtain the process _name_ and fails to populate the modules\u0027 `Modules` `.FileInfoVersion` property, whereas `.FileName` _does_ work.\r\n\r\n```csharp\r\nint pid = ??; // IMPORTANT: Substitute one of the PIDs reported by `pgrep cupsd ethcheck` in a shell here:\r\nvar p = System.Diagnostics.Process.GetProcessById(pid);\r\nConsole.WriteLine($\"Name: {p.ProcessName}\");\r\nforeach (System.Diagnostics.ProcessModule m in p.Modules)\r\n{ \r\n  Console.WriteLine(m.FileName);\r\n  Console.WriteLine(m.FileVersionInfo.FileName);\r\n}\r\n```\r\n\r\nNote: These processes aren\u0027t necessarily running on _all_ macOS systems.\r\n\r\nWith `pid` set to the value of `pgrep ethcheck`, for instance, the **expected output** is:\r\n\r\n```\r\nName: ethcheck\r\n/usr/libexec/firmwarecheckers/ethcheck/ethcheck\r\n/usr/libexec/firmwarecheckers/ethcheck/ethcheck\r\n```\r\n\r\nThe **actual output** is:\r\n\r\n```\r\nName: \r\n/usr/libexec/firmwarecheckers/ethcheck/ethcheck\r\nUnhandled exception. System.UnauthorizedAccessException: Access to the path \u0027/usr/libexec/firmwarecheckers/ethcheck/ethcheck\u0027 is denied.\r\n ---\u003e System.IO.IOException: Permission denied\r\n   --- End of inner exception stack trace ---\r\n   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\r\n   at System.IO.FileStream.OpenHandle(FileMode mode, FileShare share, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, Boolean useAsync)\r\n   at System.Diagnostics.FileVersionInfo.TryLoadManagedAssemblyMetadata()\r\n   at System.Diagnostics.FileVersionInfo.GetVersionInfo(String fileName)\r\n   at System.Diagnostics.ProcessModule.get_FileVersionInfo()\r\n   at demo.ConsoleApp.Main(String[] args) in /Users/.../Program.cs:line 74\r\n```\r\n\r\nThat is, `.ProcessName` quietly returned `\"\"` (the empty string), and accessing a module\u0027s `.FileVersionInfo.FileName` property caused an access-denied exception.\r\n\r\n\r\nNote: When run with `sudo` , the behavior is as expected, but _this shouldn\u0027t be required_, given that standard utilities such as `pgrep` and `ps` can access this information without it.\r\n\r\n### Configuration\r\n\r\n.NET 6.0.100-preview.2.21155.3 on macOS 10.15.7 (Catalina)\r\n\r\n### Regression?\r\n\r\nNo.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMA2-pQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNjE5NzY4Mg==",
                                           "createdAt":  "2021-03-24T21:27:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Do I understand correctly, that ProcessName ought to be able to work (returning the file name) even if no information about the process itself can be read? Or are you expecting that more should work than ProcessName?",
                                           "updatedAt":  "2021-03-24T21:27:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNjIwMzk2NA==",
                                           "createdAt":  "2021-03-24T21:40:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mklement0",
                                           "body":  "Yes, `.ProcessName` should work, and so should  `.FileName` and `.FileVersionInfo.FileName` on the elements of the `.Modules` collection - accessing this information does _not_ require `sudo`.\r\n\r\n(`.FileName` already works, and on Unix the `.FileVersionInfo` type doesn\u0027t contain any additional information anyway).\r\n\r\nThis may apply to other properties too - I haven\u0027t looked.",
                                           "updatedAt":  "2021-03-24T21:42:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNjIwNzE0MQ==",
                                           "createdAt":  "2021-03-24T21:47:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mklement0",
                                           "body":  "P.S.: It\u0027s an interesting question what native utilities such as `pgrep` use to determine the process name - whether they truly just use the underlying binary\u0027s _file name_ I do not know.",
                                           "updatedAt":  "2021-03-24T21:47:17Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "macOS: System.Diagnostics.Process fails to obtain certain information about select system processes",
        "labels":  [
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50632",
        "createdAt":  "2021-04-02T03:12:21Z",
        "number":  50632,
        "author":  null,
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-04-08T22:39:42Z",
        "body":  "## Background and Motivation\r\n\r\nAlmost every API function that works with threads in Windows uses a handle to the thread, similar to that of the process functions. Currently there exists `Process.SafeHandle` which can be passed to functions that are being PInvoked such as `ReadProcessMemory` without the need to open the handle yourself. `ProcessThread` objecsts, however, only have an `Id` property, forcing you to open handles yourself if you wish to use functions such as `SuspendThread`. It would be a nice quality of life improvement to have this added as a property, similar to how it is done with the `Process` one, considering the only information needed to open a handle is the ID, which is already present in the object.\r\n\r\n## Proposed API\r\n\r\n```c#\r\n\r\ninternal static class Kernel32\r\n{\r\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\r\n    internal static extern bool CloseHandle(IntPtr handle);\r\n}\r\n\r\npublic sealed class SafeThreadHandle : SafeHandleZeroOrMinusOneIsInvalid\r\n{\r\n    private SafeThreadHandle() : base(true) { }\r\n\r\n    protected override bool ReleaseHandle()\r\n    {\r\n        return Kernel32.CloseHandle(handle);\r\n    }\r\n}\r\n\r\npublic partial class ProcessThread\r\n{\r\n    ...\r\n    public SafeThreadHandle SafeHandle { get; }\r\n}\r\n```\r\n\r\nThe value would simply be retrived via a call to `OpenThread` like is done for `Process.SafeHandle` using `OpenProcess`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMKdn5w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMjI5MzM0Mg==",
                                           "createdAt":  "2021-04-02T03:12:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @carlossanlop\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\nAlmost every API function that works with threads in Windows uses a handle to the thread, similar to that of the process functions. Currently there exists `Process.SafeHandle` which can be passed to functions that are being PInvoked such as `ReadProcessMemory` without the need to open the handle yourself. `ProcessThread` objecsts, however, only have an `Id` property, forcing you to open handles yourself if you wish to use functions such as `SuspendThread`. It would be a nice quality of life improvement to have this added as a property, similar to how it is done with the `Process` one, considering the only information needed to open a handle is the ID, which is already present in the object.\r\n\r\n## Proposed API\r\n\r\n```c#\r\npublic partial class ProcessThread\r\n{\r\n    ...\r\n    public SafeThreadHandle SafeHandle { get; }\r\n}\r\n```\r\n\r\nThe value would simply be retrived via a call to `OpenThread` like is done for `Process.SafeHandle` using `OpenProcess`.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDewera\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-02T03:12:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMjMwODUxNg==",
                                           "createdAt":  "2021-04-02T04:20:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "What would it do on Unix?",
                                           "updatedAt":  "2021-04-02T04:20:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMjQxNTgwMw==",
                                           "createdAt":  "2021-04-02T08:36:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "\u003e What would it do on Unix?\r\n\r\nFrom my understanding there is no concept of handles on Unix, so it would function the same way as the current implementation of `Process.SafeHandle` does on Unix systems (whatever that may be.)\r\n",
                                           "updatedAt":  "2021-04-02T08:36:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMzU3NDQ0Nw==",
                                           "createdAt":  "2021-04-05T18:53:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e From my understanding there is no concept of handles on Unix, so it would function the same way as the current implementation of Process.SafeHandle does on Unix systems (whatever that may be.)\r\n\r\nWe make a synthetic handle on Unix, which can only be used to wait on the process to exit. I\u0027m guessing that in your case, though, it would have to throw PlatformNotSupportedException() (which may be OK). I\u0027ll let the crew that own this area triage. Thanks for the suggestion!\r\n\r\nhttps://github.com/dotnet/runtime/blob/eed3c7642ada205a4645dc3153fcb4c3c04c363c/src/libraries/System.Diagnostics.Process/src/Microsoft/Win32/SafeHandles/SafeProcessHandle.Unix.cs#L17-L26",
                                           "updatedAt":  "2021-04-05T18:53:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNTk5NDc5NQ==",
                                           "createdAt":  "2021-04-08T17:12:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "@Dewera `SafeThreadHandle` also needs to be exposed, could you please add that type to your API proposal?",
                                           "updatedAt":  "2021-04-08T17:12:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNjI3NzQ3OQ==",
                                           "createdAt":  "2021-04-08T22:39:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "@Jozkee I believe there\u0027s an implementation for this in [framework](https://referencesource.microsoft.com/#System/compmod/microsoft/win32/safehandles/SafeThreadHandle.cs) that was internal at that stage\r\n\r\nThe implementation I was using was similar but I\u0027ll include it in the proposal anyway.",
                                           "updatedAt":  "2021-04-08T22:39:10Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Add a SafeHandle property to ProcessThread",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Process",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51277",
        "createdAt":  "2021-04-14T22:40:47Z",
        "number":  51277,
        "author":  "Kuinox",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-OpAw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rshad",
                                            "createdAt":  "2022-11-07T10:31:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CoenraadS",
                                            "createdAt":  "2023-02-26T18:17:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AndreyFedorovIID",
                                            "createdAt":  "2023-05-22T14:16:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Evengard",
                                            "createdAt":  "2023-09-06T21:15:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dogboydog",
                                            "createdAt":  "2024-04-18T01:25:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichalPavlik",
                                            "createdAt":  "2024-07-18T09:06:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kevingosse",
                                            "createdAt":  "2024-08-01T14:03:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "philasmar",
                                            "createdAt":  "2024-11-08T19:33:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YuliiaKovalova",
                                            "createdAt":  "2025-01-17T09:42:37Z"
                                        }
                                    ],
                          "totalCount":  9
                      },
        "updatedAt":  "2025-01-17T12:34:03Z",
        "body":  "### Description\r\n\r\n[This bug](https://github.com/dotnet/msbuild/issues/2981) was first reported in the msbuild repo but I believe it\u0027s a bug in the Process class itself and not in msbuild.  \r\nThe issue is that `WaitForExit()` will synchronously wait for the stderr/stdout to complete, the summoned process has exited, but it has childs process still running (the nodereuse processes in msbuild case).\r\nIn this case, it looks like that the stderr/stdout pipes wont close.\r\nSo we are stuck in the waits there:  \r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs#L186\r\n\r\nWe hit this code path because the timeout is `Timeout.Infinite`.\r\nThere is hope for a beginning of a workaround:\r\nWe can avoid the deadlock if we call `WaitForExit(int milliseconds)`.\r\nBut there is an issue in this case \r\n\u003e When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when this method returns. To ensure that asynchronous event handling has been completed, call the WaitForExit() overload that takes no parameter after receiving a true from this overload.  \r\n\r\nNow there is no way to retrieve the data in the stdout/stderr without a concurrency issue that would cause data to be lost in case of a race condition.\r\n\r\n### Other information\r\n\r\nThis bug happens on Windows ~~but by looking at the [*nix implementation](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L213) of `WaitForExitCore`, it may be affected too (I have no idea how the lifecycle of the pipes are supposed to work on linux/windows, so it\u0027s probably wrong)~~\r\n\r\nEdit: I tested on WSL with ubuntu and it doesn\u0027t have a problem, so it\u0027s a Windows only problem.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmt53Nw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTg5NTUxMA==",
                                           "createdAt":  "2021-04-14T22:40:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @carlossanlop\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\n[This bug](https://github.com/dotnet/msbuild/issues/2981) was first reported in the msbuild repo but I believe it\u0027s a bug in the Process class itself and not in msbuild.  \r\nThe issue is that `WaitForExit()` will synchronously wait for the stderr/stdout to complete, the summoned process has exited, but it has childs process still running (the nodereuse processes in msbuild case).\r\nIn this case, it looks like that the stderr/stdout pipes wont close.\r\nSo we are stuck in the waits there:  \r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs#L186\r\n\r\nWe hit this code path because the timeout is `Timeout.Infinite`.\r\nThere is hope for a beginning of a workaround:\r\nWe can avoid the deadlock if we call `WaitForExit(int milliseconds)`.\r\nBut there is an issue in this case \r\n\u003e When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when this method returns. To ensure that asynchronous event handling has been completed, call the WaitForExit() overload that takes no parameter after receiving a true from this overload.  \r\n\r\nNow there is no way to retrieve the data in the stdout/stderr without a concurrency issue that would cause data to be lost in case of a race condition.\r\n\r\n### Other information\r\n\r\nThis bug happens on Windows but by looking at the [*nix implementation](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L213) of `WaitForExitCore`, it may be affected too (I have no idea how the lifecycle of the pipes are supposed to work on linux/windows, so it\u0027s probably wrong)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eKuinox\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-14T22:40:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42nNKe",
                                           "createdAt":  "2021-09-09T16:19:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kuinox",
                                           "body":  "I wrote a workaround thats allow to retrieve the stdout/stderr of a process that may cause a deadlock like this.  \r\nOnly time will tell if it really fixed the deadlock without dataloss (I don\u0027t know what will happen if we receive a lot of data when the program exit , and the CTS of the AsyncStreamReader is triggered.).\r\n\r\n```csharp\r\nprocess.WaitForExit( int.MaxValue ); //First we need for the program to exit.\r\n// Here the program exited, but background may still pump messages\r\nReflectionHack( process ); // This will cancel the reads in the pipes background loop.\r\nprocess.WaitForExit(); // This allow to wait for the 2 pipes async to finish looping and flushing the last messages.\r\n// Here you shouldn\u0027t receive any message.\r\n\r\n/// \u003csummary\u003e\r\n/// This method shut down things in \u003csee cref=\"Process\"/\u003e. Call it when you know that the process has exited.\r\n/// Sometimes the \u003csee cref=\"Process\"/\u003e class deadlock itself.\r\n/// See this for more info: https://github.com/dotnet/runtime/issues/51277\r\n/// \u003c/summary\u003e\r\n/// \u003cparam name=\"process\"\u003e\u003c/param\u003e\r\nstatic void ReflectionHack( Process process )\r\n{\r\n    const BindingFlags bindingFlags = BindingFlags.NonPublic | BindingFlags.Instance;\r\n    FieldInfo? outputField = typeof( Process ).GetField( \"_output\", bindingFlags );\r\n    FieldInfo? errorField = typeof( Process ).GetField( \"_error\", bindingFlags );\r\n    ((IDisposable)outputField!.GetValue( process )!).Dispose();\r\n    ((IDisposable)errorField!.GetValue( process )!).Dispose();\r\n}\r\n```\r\n\r\nSadly the cleanest way I found to work around this issue is with this little reflection hack. \r\n\r\nEdit: I now think that this reflection hack may lead to data loss at the end of the process.",
                                           "updatedAt":  "2024-07-16T08:37:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46yRfm",
                                           "createdAt":  "2021-12-05T16:08:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kuinox",
                                           "body":  "Hello, \r\nBy lookin up for the code of the new WaitForExitAsync, I think it will be prone to the same issue.\r\nCan this issue be looked up ?\r\n",
                                           "updatedAt":  "2021-12-05T16:08:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc465K8A",
                                           "createdAt":  "2021-12-07T16:05:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kuinox",
                                           "body":  "I made a reproduction here: \r\nhttps://github.com/Kuinox/DotnetProcessBugRepro (Run ProcessStarter)",
                                           "updatedAt":  "2021-12-09T17:07:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47aNoG",
                                           "createdAt":  "2021-12-17T13:35:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kuinox",
                                           "body":  "I found a SO post from 2016 about this bug: \r\nhttps://stackoverflow.com/questions/26713373/process-waitforexit-doesnt-return-even-though-process-hasexited-is-true",
                                           "updatedAt":  "2021-12-17T13:35:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5x3HHe",
                                           "createdAt":  "2024-01-25T13:58:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Evengard",
                                           "body":  "https://github.com/dotnet/runtime/pull/79817\r\nDid that solve the issue I wonder?",
                                           "updatedAt":  "2024-01-25T13:58:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5x3Sum",
                                           "createdAt":  "2024-01-25T14:26:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kuinox",
                                           "body":  "\u003e #79817 Did that solve the issue I wonder?\r\n\r\nI just tested on WSL-ubuntu and it doesn\u0027t have the problem at all, so unix was just unaffected.  \r\nThe patch is also Unix specific so I don\u0027t think it solved the issue.  \r\nI also upgraded my reproduction repo from 5.0 to 8.0 and it still deadlock itself in 8.0  \r\nhttps://github.com/Kuinox/DotnetProcessBugRepro",
                                           "updatedAt":  "2024-01-25T14:27:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Fba0F",
                                           "createdAt":  "2024-07-19T07:34:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPavlik",
                                           "body":  "Could you please investigate this issue as it seems to be impacting our team (MSBuild)? Your attention to this matter would be greatly appreciated.\r\n\r\ncc:@baronfel",
                                           "updatedAt":  "2024-09-04T08:42:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MQeA2",
                                           "createdAt":  "2024-09-16T14:43:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kuinox",
                                           "body":  "@MichalPavlik hey, this issue is a bit in a limbo state due to the \"need-further-triage\" tag, none in the runtime team looked at this issue for the past 3 years.",
                                           "updatedAt":  "2024-09-16T14:43:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MZtSt",
                                           "createdAt":  "2024-09-17T12:12:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPavlik",
                                           "body":  "@Kuinox we are still trying to resurrect this issue :)\r\n@baronfel was you able to find someone who would be willing to take a second look?",
                                           "updatedAt":  "2024-09-17T12:12:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S9i9O",
                                           "createdAt":  "2024-11-08T19:33:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "philasmar",
                                           "body":  "I am running into this issue as well! Any updates?",
                                           "updatedAt":  "2024-11-08T19:33:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6a3QbW",
                                           "createdAt":  "2025-01-17T11:39:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "YuliiaKovalova",
                                           "body":  "it seems to be closed by design: https://github.com/dotnet/runtime/issues/29232#issuecomment-1451584094",
                                           "updatedAt":  "2025-01-17T11:39:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6a3nc3",
                                           "createdAt":  "2025-01-17T12:34:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kuinox",
                                           "body":  "The problem is that there is a simple use case and it looks like there is no solution to it:  \nI need to summon a process, like `dotnet build`, get it\u0027s full output without it being truncated.",
                                           "updatedAt":  "2025-01-17T12:34:02Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Process.WaitForExit() deadlock if there are childprocess still running.",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54002",
        "createdAt":  "2021-06-10T14:32:27Z",
        "number":  54002,
        "author":  "fhammerl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-02T16:51:10Z",
        "body":  "### Description\r\n\r\n* I have two dotnet executables, P1 and P2. P1 uses `System.Diagnostics.Process.Start` to start P2. P2 then executes some security sensitive operation, say `new System.Security.Cryptography.X509Certificates.X509Certificate2(\"key.pfx\", \"\")`. If I start P1 traditionally (double click on exe, cmd, start it as a powershell script), it starts P2 which then executes the operation successfully. \r\nIf P1 was started using impersonation (a scheduled task in this example), P2 will fail with `Exception calling \".ctor\" with \"2\" argument(s): \"The specified network password is not correct.\"`. This is strange, because if I start P2 directly in the scheduled task, it will execute it successfully.\r\n* Steps to reproduce: https://github.com/fhammerl/ps-task-repro.git\r\nTo make the repro easier, in this repo I used powershell scripts, but the behaviour is the same in PS Core / PS7 as well. Originally, we ran into this problem using .NET executables using .NET 3.1.302.\r\n* What behaviour are you seeing, and what behaviour would you expect?\r\n**Expected Behaviour:** \r\nI expect the P2 process created by P1 to have the same permissions and capabilities P1 does.\r\n**Actual behaviour:**\r\nP2 has \u0027lost its identity\u0027 or it fails to impersonate successfully so I can\u0027t use secure libraries. `new X509Certificate2(\"key.pfx\", \"\")` fails with \"The specified network password is not correct.\"\r\n\r\n### Configuration\r\n\r\n* Which version of .NET is the code running on?\r\n.NET 3.1.302\r\n* What OS and version, and what distro if applicable?\r\nWindows Server 2019\r\n\r\n\r\n### Other information\r\nIt this turns out to be intended, how can I preserve the user context when starting a new Process?\r\n\r\nOriginally we ran into this issue while trying to run a job in the GitHub actions runner. If the runner was started in a scheduled task, it the job process it created could not execute secure operations.\r\nIssue that sparked the discussion: https://github.com/actions/runner/issues/1123\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONR5DEA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODY3NDYxMA==",
                                           "createdAt":  "2021-06-10T14:32:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @bartonjs, @vcsjones, @krwq, @GrabYourPitchForks\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\n* I have two dotnet executables, P1 and P2. P1 uses `System.Diagnostics.Process.Start` to start P2. P2 then executes some security sensitive operation, say `new System.Security.Cryptography.X509Certificates.X509Certificate2(\"key.pfx\", \"\")`. If I start P1 traditionally (double click on exe, cmd, start it as a powershell script), it starts P2 which then executes the operation successfully. \r\nIf P1 was started using impersonation (a scheduled task in this example), P2 will fail with `Exception calling \".ctor\" with \"2\" argument(s): \"The specified network password is not correct.\"`. This is strange, because if I start P2 directly in the scheduled task, it will execute it successfully.\r\n* Steps to reproduce: https://github.com/fhammerl/ps-task-repro.git\r\nTo make the repro easier, in this repo I used powershell scripts, but the behaviour is the same in PS Core / PS7 as well. Originally, we ran into this problem using .NET executables using .NET 3.1.302.\r\n* What behaviour are you seeing, and what behaviour would you expect?\r\n**Expected Behaviour:** \r\nI expect the P2 process created by P1 to have the same permissions and capabilities P1 does.\r\n**Actual behaviour:**\r\nP2 has \u0027lost its identity\u0027 or it fails to impersonate successfully so I can\u0027t use secure libraries. `new X509Certificate2(\"key.pfx\", \"\")` fails with \"The specified network password is not correct.\"\r\n\r\n### Configuration\r\n\r\n* Which version of .NET is the code running on?\r\n.NET 3.1.302\r\n* What OS and version, and what distro if applicable?\r\nWindows Server 2019\r\n\r\n\r\n### Other information\r\nIt this turns out to be intended, how can I preserve the user context when starting a new Process?\r\n\r\nOriginally we ran into this issue while trying to run a job in the GitHub actions runner. If the runner was started in a scheduled task, it the job process it created could not execute secure operations.\r\nIssue that sparked the discussion: https://github.com/actions/runner/issues/1123\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efhammerl\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Security`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-10T14:32:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1ODcwNzI2OA==",
                                           "createdAt":  "2021-06-10T15:11:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @carlossanlop\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\n* I have two dotnet executables, P1 and P2. P1 uses `System.Diagnostics.Process.Start` to start P2. P2 then executes some security sensitive operation, say `new System.Security.Cryptography.X509Certificates.X509Certificate2(\"key.pfx\", \"\")`. If I start P1 traditionally (double click on exe, cmd, start it as a powershell script), it starts P2 which then executes the operation successfully. \r\nIf P1 was started using impersonation (a scheduled task in this example), P2 will fail with `Exception calling \".ctor\" with \"2\" argument(s): \"The specified network password is not correct.\"`. This is strange, because if I start P2 directly in the scheduled task, it will execute it successfully.\r\n* Steps to reproduce: https://github.com/fhammerl/ps-task-repro.git\r\nTo make the repro easier, in this repo I used powershell scripts, but the behaviour is the same in PS Core / PS7 as well. Originally, we ran into this problem using .NET executables using .NET 3.1.302.\r\n* What behaviour are you seeing, and what behaviour would you expect?\r\n**Expected Behaviour:** \r\nI expect the P2 process created by P1 to have the same permissions and capabilities P1 does.\r\n**Actual behaviour:**\r\nP2 has \u0027lost its identity\u0027 or it fails to impersonate successfully so I can\u0027t use secure libraries. `new X509Certificate2(\"key.pfx\", \"\")` fails with \"The specified network password is not correct.\"\r\n\r\n### Configuration\r\n\r\n* Which version of .NET is the code running on?\r\n.NET 3.1.302\r\n* What OS and version, and what distro if applicable?\r\nWindows Server 2019\r\n\r\n\r\n### Other information\r\nIt this turns out to be intended, how can I preserve the user context when starting a new Process?\r\n\r\nOriginally we ran into this issue while trying to run a job in the GitHub actions runner. If the runner was started in a scheduled task, it the job process it created could not execute secure operations.\r\nIssue that sparked the discussion: https://github.com/actions/runner/issues/1123\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efhammerl\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-10T15:11:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc404Jp7",
                                           "createdAt":  "2021-07-27T01:15:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@GrabYourPitchforks you are very familiar with how impersonation, etc works. Do the symptoms above bring any obvious cause to mind?",
                                           "updatedAt":  "2021-07-27T01:15:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41HkMQ",
                                           "createdAt":  "2021-08-02T16:50:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e If I start P1 traditionally (double click on exe, cmd, start it as a powershell script), it starts P2 which then executes the operation successfully.\r\n\u003e If P1 was started using impersonation (a scheduled task in this example), P2 will fail with Exception calling \".ctor\" with \"2\" argument(s): \"The specified network password is not correct.\". This is strange, because if I start P2 directly in the scheduled task, it will execute it successfully.\r\n\r\nI am not a security expert, but it looks like a [double hop](https://docs.microsoft.com/en-us/archive/blogs/askds/understanding-kerberos-double-hop) issue, caused by the way Scheduled Task starts a new process (only one hop is allowed for processes started by Scheduled Task)",
                                           "updatedAt":  "2021-08-02T16:50:07Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Process.Start() loses identity when started from a Scheduled Task on Windows Server 2019",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/55990",
        "createdAt":  "2021-07-20T10:39:06Z",
        "number":  55990,
        "author":  "warappa",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCwY2Mw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bogdan-patraucean",
                                            "createdAt":  "2023-05-30T17:18:39Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-05-30T12:08:07Z",
        "body":  "### Intent\r\nI want to read the **standard output** from _**any**_ program I start with `Process.Start(...)` - and read it with the **correct** encoding.\r\n\r\nWhile testing, `sfc.exe` causes encoding troubles.\r\n\r\n### Research\r\nAside countless other posts, I found an [StackOverflow post](https://stackoverflow.com/questions/57749808/sfc-output-redirection-formatting-issue-powershell-batch) describing this behavior of `sfc.exe` \"unusual\". But nonetheless, the **_standard_ consoles** like `cmd` or `powershell` can correctly decode the output of `sfc` and `ping`. **How do they do that?**\r\n\r\n### Tries\r\n#### A) Set StandardOutputEncoding to the current OEM codepage\r\n```csharp\r\nvar codePage = CultureInfo.CurrentCulture.TextInfo.OEMCodePage;\r\nvar encoding = Encoding.GetEncoding(codePage);\r\n\r\nvar process = new Process();\r\n\r\nprocess.StartInfo = new ProcessStartInfo\r\n{\r\n    CreateNoWindow = true,\r\n    RedirectStandardError = true,\r\n    RedirectStandardOutput = true,\r\n    RedirectStandardInput = true,\r\n    StandardOutputEncoding = encoding,\r\n    StandardErrorEncoding = encoding,\r\n    StandardInputEncoding = encoding,\r\n    FileName = ProcessName,\r\n    Arguments = ProcessCommandLine,\r\n    WorkingDirectory = \".\\\\\",\r\n    LoadUserProfile = true\r\n};\r\n```\r\nPro: for standard programs like `ping` this works\r\nCon: for `sfc.exe` it doesn\u0027t\r\n\r\n#### B) Set StandardOutputEncoding to Unicode\r\n```csharp\r\nvar encoding = Encoding.Unicode;\r\n\r\nvar process = new Process();\r\n\r\nprocess.StartInfo = new ProcessStartInfo\r\n{\r\n    CreateNoWindow = true,\r\n    RedirectStandardError = true,\r\n    RedirectStandardOutput = true,\r\n    RedirectStandardInput = true,\r\n    StandardOutputEncoding = encoding,\r\n    StandardErrorEncoding = encoding,\r\n    StandardInputEncoding = encoding,\r\n    FileName = ProcessName,\r\n    Arguments = ProcessCommandLine,\r\n    WorkingDirectory = \".\\\\\",\r\n    LoadUserProfile = true\r\n};\r\n```\r\nPro: for `sfc.exe` this works\r\nCon: for standard programs like `ping` it doesn\u0027t\r\n\r\n#### C) Try To Detect The Output Encoding\r\nI tried to read the `BaseStream` of `StandardOutput` and interpret it with libraries like `Ude.NetStandard` or `UTF.Unknown`, but no success.\r\n\r\n#### D) Pipe it through CMD With `chcp`\r\n```csharp\r\nprocess.StartInfo = new ProcessStartInfo\r\n            {\r\n                CreateNoWindow = true,\r\n                FileName = \"cmd.exe\",\r\n                Arguments = $@\"/C chcp {encoding.CodePage} \u003e NUL \u0026 \"\"{ProcessName}\"\" {ProcessCommandLine}\",\r\n                UseShellExecute = false,\r\n                RedirectStandardOutput = true,\r\n                RedirectStandardError = true,\r\n                StandardOutputEncoding = encoding,\r\n                StandardErrorEncoding = encoding,\r\n                RedirectStandardInput = true,\r\n                StandardInputEncoding = encoding,\r\n            };\r\n```\r\nNo success.\r\n\r\n#### E) Use Some Environment Variables Found On The Internet That Are Linked To Encoding\r\n```csharp\r\nprocess.StartInfo.EnvironmentVariables[\"LANG\"] = $\".{codePage}\";\r\nprocess.StartInfo.EnvironmentVariables[\"LC_COLLATE\"] = $\".{codePage}\";\r\nprocess.StartInfo.EnvironmentVariables[\"LC_ALL\"] = $\".{codePage}\";\r\nprocess.StartInfo.EnvironmentVariables[\"LC_CTYPE\"] = $\".{codePage}\";\r\n```\r\nNo success.\r\n\r\n### Request\r\nGetting the output of a program should be straight forward, especially given there are options like `StandardOutputEncoding` in `ProcessStartInfo`.\r\n\r\nHow can we read standard output _**reliably**_?\r\n\r\nIs there any guidance or anyone on this repo who knows how the default terminals like `cmd` or `powershell` handle this issue correclty? I\u0027m even open for **Win32 pinvoke suggestions**. Is there any Windows API to query the standard output encoding of another process? Or an environment variable to be set?\r\n\r\n### Information\r\nWindows version: **10 21H1 19043.1110**\r\n.NET version: **6 Preview 6**\r\nDefault OEM codepage: **850**",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXXquPA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc40peyq",
                                           "createdAt":  "2021-07-20T10:39:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Intent\r\nI want to read the **standard output** from _**any**_ program I start with `Process.Start(...)` - and read it with the **correct** encoding.\r\n\r\nWhile testing, `sfc.exe` causes encoding troubles.\r\n\r\n### Research\r\nAside countless other posts, I found an [StackOverflow post](https://stackoverflow.com/questions/57749808/sfc-output-redirection-formatting-issue-powershell-batch) describing this behavior of `sfc.exe` \"unusual\". But nonetheless, the **_standard_ consoles** like `cmd` or `powershell` can correctly decode the output of `sfc` and `ping`. **How do they do that?**\r\n\r\n### Tries\r\n#### A) Set StandardOutputEncoding to the current OEM codepage\r\n```csharp\r\nvar codePage = CultureInfo.CurrentCulture.TextInfo.OEMCodePage;\r\nvar encoding = Encoding.GetEncoding(codePage);\r\n\r\nvar process = new Process();\r\n\r\nprocess.StartInfo = new ProcessStartInfo\r\n{\r\n    CreateNoWindow = true,\r\n    RedirectStandardError = true,\r\n    RedirectStandardOutput = true,\r\n    RedirectStandardInput = true,\r\n    StandardOutputEncoding = encoding,\r\n    StandardErrorEncoding = encoding,\r\n    StandardInputEncoding = encoding,\r\n    FileName = ProcessName,\r\n    Arguments = ProcessCommandLine,\r\n    WorkingDirectory = \".\\\\\",\r\n    LoadUserProfile = true\r\n};\r\n```\r\nPro: for standard programs like `ping` this works\r\nCon: for `sfc.exe` it doesn\u0027t\r\n\r\n#### B) Set StandardOutputEncoding to Unicode\r\n```csharp\r\nvar encoding = Encoding.Unicode;\r\n\r\nvar process = new Process();\r\n\r\nprocess.StartInfo = new ProcessStartInfo\r\n{\r\n    CreateNoWindow = true,\r\n    RedirectStandardError = true,\r\n    RedirectStandardOutput = true,\r\n    RedirectStandardInput = true,\r\n    StandardOutputEncoding = encoding,\r\n    StandardErrorEncoding = encoding,\r\n    StandardInputEncoding = encoding,\r\n    FileName = ProcessName,\r\n    Arguments = ProcessCommandLine,\r\n    WorkingDirectory = \".\\\\\",\r\n    LoadUserProfile = true\r\n};\r\n```\r\nPro: for `sfc.exe` this works\r\nCon: for standard programs like `ping` it doesn\u0027t\r\n\r\n#### C) Try To Detect The Output Encoding\r\nI tried to read the `BaseStream` of `StandardOutput` and interpret it with libraries like `Ude.NetStandard` or `UTF.Unknown`, but no success.\r\n\r\n#### D) Pipe it through CMD With `chcp`\r\n```csharp\r\nprocess.StartInfo = new ProcessStartInfo\r\n            {\r\n                CreateNoWindow = true,\r\n                FileName = \"cmd.exe\",\r\n                Arguments = $@\"/C chcp {encoding.CodePage} \u003e NUL \u0026 \"\"{ProcessName}\"\" {ProcessCommandLine}\",\r\n                UseShellExecute = false,\r\n                RedirectStandardOutput = true,\r\n                RedirectStandardError = true,\r\n                StandardOutputEncoding = encoding,\r\n                StandardErrorEncoding = encoding,\r\n                RedirectStandardInput = true,\r\n                StandardInputEncoding = encoding,\r\n            };\r\n```\r\nNo success.\r\n\r\n#### E) Use Some Environment Variables Found On The Internet That Are Linked To Encoding\r\n```csharp\r\nprocess.StartInfo.EnvironmentVariables[\"LANG\"] = $\".{codePage}\";\r\nprocess.StartInfo.EnvironmentVariables[\"LC_COLLATE\"] = $\".{codePage}\";\r\nprocess.StartInfo.EnvironmentVariables[\"LC_ALL\"] = $\".{codePage}\";\r\nprocess.StartInfo.EnvironmentVariables[\"LC_CTYPE\"] = $\".{codePage}\";\r\n```\r\nNo success.\r\n\r\n### Request\r\nGetting the output of a program should be straight forward, especially given there are options like `StandardOutputEncoding` in `ProcessStartInfo`.\r\n\r\nHow can we read standard output _**reliably**_?\r\n\r\nIs there any guidance or anyone on this repo who knows how the default terminals like `cmd` or `powershell` handle this issue correclty? I\u0027m even open for **Win32 pinvoke suggestions**. Is there any Windows API to query the standard output encoding of another process? Or an environment variable to be set?\r\n\r\n### Information\r\nWindows version: **10 21H1 19043.1110**\r\n.NET version: **6 Preview 6**\r\nDefault OEM codepage: **850**\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ewarappa\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-20T10:39:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40q32l",
                                           "createdAt":  "2021-07-20T19:55:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "warappa",
                                           "body":  "I have to add:\r\nI\u0027m testing with `sfc` and `dism` and the interesting fact is: **if one works, the other doesn\u0027t**.\r\n\r\nHere are more details about my configuration:\r\n\r\nCurrentCulture.TextInfo/CurrentUICulture.TextInfo/InstalledUICulture.TextInfo:\r\n* Name: de-DE\r\n* LCID: 1031\r\n* OEMCodePage: 850 \"Western European (DOS)\"\r\n* AnsiCodePage: 1252\r\n\r\nInvariantCulture.TextInfo\r\n* Name: \u003cempty\u003e\r\n* LCID: 127\r\n* OEMCodePage: 437 \"OEM United States\"\r\n* AnsiCodePage: 1252\r\n\r\nNo given Culture\r\n* Selected codepage: 1252 \"Western European (Windows)\"\r\n\r\nI tried this code with `CurrentCulture` and `InvariantCulture` (both with `ANSICodePage` and `OEMCodePage`), and no given Culture. Launching direct, and through `cmd` with `chcp`. Never all 4 test-cases pass (3 and 4 should be equal).\r\n\r\nHere is my test code:\r\n```csharp\r\n        public string Output = \"\";\r\n\r\n        public async Task StartSfc()\r\n        {\r\n            await RunProgram(\"sfc.exe\", \"/?\", /*Encoding.Unicode*/ null);\r\n        }\r\n\r\n        public async Task StartDism()\r\n        {\r\n                await RunProgram(\"dism.exe\", \"/?\", null);\r\n        }\r\n\r\n        public async Task StartWhoAmI()\r\n        {\r\n                await RunProgram(\"whoami.exe\", \"\", null);\r\n        }\r\n\r\n        public async Task StartEncoding()\r\n        {\r\n\r\n            await Task.Run(async () =\u003e\r\n            {\r\n                await RunProgram(\"cmd\", \"/C echo äö\", null);\r\n            }\r\n            );\r\n        }\r\n\r\n        private async Task RunProgram(string filename, string arguments, Encoding encoding = null)\r\n        {\r\n            var codePage = CultureInfo.CurrentUICulture.TextInfo.OEMCodePage; //Console.OutputEncoding.CodePage\r\n            encoding = encoding ?? Encoding.GetEncoding(codePage);\r\n            \r\n            Output = \"\";\r\n\r\n            using var p = new Process();\r\n\r\n            p.StartInfo = new ProcessStartInfo\r\n            {\r\n                CreateNoWindow = true,\r\n                //FileName = \"cmd.exe\",\r\n                //Arguments = $@\"/C chcp {encoding.CodePage} \u003e NUL \u0026 \"\"{filename}\"\" {arguments}\",\r\n                FileName = filename,\r\n                Arguments = arguments,\r\n                UseShellExecute = false,\r\n                RedirectStandardOutput = true,\r\n                RedirectStandardError = true,\r\n                StandardOutputEncoding = encoding,\r\n                StandardErrorEncoding = encoding,\r\n                RedirectStandardInput = true,\r\n                StandardInputEncoding = encoding,\r\n            };\r\n            //p.StartInfo.EnvironmentVariables[\"LC_ALL\"] = $\".{codePage}\";\r\n\r\n            var success = p.Start();\r\n\r\n            var outputEncoding = p.StandardOutput.CurrentEncoding;\r\n            using var reader = new StreamReader(p.StandardOutput.BaseStream, p.StandardOutput.CurrentEncoding);\r\n            var line = \"\";\r\n            while ((line = await reader.ReadLineAsync()) != null)\r\n            {\r\n                if (line == \"\" ||\r\n                    (line?.Length == 1 \u0026\u0026 line[0] == 0))\r\n                {\r\n                    continue;\r\n                }\r\n                Output += $\"{line}\\n\";\r\n            }\r\n\r\n            await p.WaitForExitAsync();\r\n\r\n            Output+= \"\\n(quit)\";\r\n            Output+= $\"\\nEncoding \u0027{outputEncoding.EncodingName}\u0027 ({outputEncoding.CodePage})\";\r\n        }\r\n```",
                                           "updatedAt":  "2021-07-20T19:55:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41W2H0",
                                           "createdAt":  "2021-08-09T12:27:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Hi @warappa \r\n\r\nThere is no way of forcing given process to use the provided encoding. That is why the [docs](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.processstartinfo.standardoutputencoding?view=net-5.0) of `ProcessStartInfo.StandardOutputEncoding` call it **preferred** encoding.\r\n\r\n\u003e  Is there any Windows API to query the standard output encoding of another process?\r\n\r\nAs far as I know, there is none. The [GetConsoleOutputCP](https://docs.microsoft.com/en-us/windows/console/getconsoleoutputcp?redirectedfrom=MSDN) method works only for the calling process.\r\n\r\n\u003e  But nonetheless, the standard consoles like cmd or powershell can correctly decode the output of sfc and ping. How do they do that?\r\n\r\nI don\u0027t know, but [PowerShell](https://github.com/PowerShell/PowerShell/) is open source, so you should be able to create an issue in PowerShell repo and just ask them directly.\r\n\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2021-08-09T12:27:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41XgS9",
                                           "createdAt":  "2021-08-09T16:13:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8uL7g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Tyrrrz",
                                                                               "createdAt":  "2023-02-25T19:53:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bogdan-patraucean",
                                                                               "createdAt":  "2023-05-30T12:19:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "warappa",
                                           "body":  "Thanks @adamsitnik for taking your time to take a look and reply.\r\n\r\nI followed your advice and took a look into the Powershell repository and _I think_ I found the code of how they redirect.\r\nhttps://github.com/PowerShell/PowerShell/blob/088eb6d0396fb78565cc9af91a2ddd40d80438c9/src/Microsoft.PowerShell.Commands.Management/commands/management/Process.cs#L2371 and https://github.com/PowerShell/PowerShell/blob/088eb6d0396fb78565cc9af91a2ddd40d80438c9/src/Microsoft.PowerShell.Commands.Management/commands/management/Process.cs#L2289.\r\n\r\nUnix seems working straight forward, whereas Windows requires heavy workarounds (native Windows API usage with `CreateFileW(...)`, `SECURITY_ATTRIBUTES`, creating suspended process,... and some other special treatment).\r\n\r\n### .NET 7+?\r\nAs this whole procedure is not obvious (I guess for any level of .NET seniority), wouldn\u0027t it be the right thing to do to take this code and make it part of .NET, opting in with a switch like `startInfo.EnforceEncoding = true` or `startInfo.UnicodeMode = true`, to improve the situation for *all* developers using .NET? And if there is data showing output redirection is not widely used in .NET ecosystem, then this complexity may be a reason for this situation.",
                                           "updatedAt":  "2021-08-09T16:16:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5deq48",
                                           "createdAt":  "2023-05-30T12:08:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIJgDA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "warappa",
                                                                               "createdAt":  "2023-05-31T19:26:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "R-Django",
                                                                               "createdAt":  "2024-12-29T14:20:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hyuga327",
                                                                               "createdAt":  "2025-03-02T01:57:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "bogdan-patraucean",
                                           "body":  "There are multiple tools having this issue when the output is parsed with **Process**, like dism and chkdsk. I\u0027m intrested in a reliable way of parsing them correctly as well.",
                                           "updatedAt":  "2023-05-30T12:08:07Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Start Process with RedirectStandardOutput: How to Detect/Enforce Encoding?",
        "labels":  [
                       "question",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56827",
        "createdAt":  "2021-08-04T08:33:35Z",
        "number":  56827,
        "author":  "DanielOstovary",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOB1ErUQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fschmied",
                                            "createdAt":  "2021-08-04T14:05:01Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-05-06T08:25:56Z",
        "body":  "I have seen that when using _System.Diagnostics.ProcessStartInfo\u0027s ArgumentList_ to pass arguments to _System.Diagnostics.Process_ and then start the process on Windows the _ArgumentList_ seems to be securely concatenated to a command string (i.e. existing quotes are escaped and each argument is wrapped in non-escaped quotes) and is then passed to _CreateProcessWithLogonW_. Under the assumption that _CreateProcessWithLogonW_ parses the command string solely based on non-escaped quotes using _Process_ with _ArgumentList_ is secure against argument/parameter injection. Secure against argument/parameter injection means that e.g. when calling _test.exe -test unsanitized_user_input_ the unsanitized user input is unable to escape its current context, meaning it will never be interpreted as anything else than a value to _-test_.\r\n\r\nIs using _Process_ with _ProcessStartInfo\u0027s_ _ArgumentList_ intentionally secure against argument/parameter injection (i.e. if there was a vulnerability, would you fix it)? Have you been in contact with the Windows team to ensure that _CreateProcessWithLogonW_ parses the command string solely based on non-escaped quotes or are you otherwise certain that _CreateProcessWithLogonW_ parses the command string securely?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfOXqfw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41Mg_n",
                                           "createdAt":  "2021-08-04T08:33:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI have seen that when using _System.Diagnostics.ProcessStartInfo\u0027s ArgumentList_ to pass arguments to _System.Diagnostics.Process_ and then start the process on Windows the _ArgumentList_ seems to be securely concatenated to a command string (i.e. existing quotes are escaped and each argument is wrapped in non-escaped quotes) and is then passed to _CreateProcessWithLogonW_. Under the assumption that _CreateProcessWithLogonW_ parses the command string solely based on non-escaped quotes using _Process_ with _ArgumentList_ is secure against argument/parameter injection. Secure against argument/parameter injection means that e.g. when calling _test.exe -test \u003cunsanitized user input\u003e_ the unsanitized user input is unable to escape its current context, meaning it will never be interpreted as anything else than a value to _-test_.\r\n\r\nIs using _Process_ with _ProcessStartInfo\u0027s_ _ArgumentList_ intentionally secure against argument/parameter injection (i.e. if there was a vulnerability, would you fix it)? Have you been in contact with the Windows team to ensure that _CreateProcessWithLogonW_ parses the command string solely based on non-escaped quotes or are you otherwise certain that _CreateProcessWithLogonW_ parses the command string securely?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDanielOstovary\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-04T08:33:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41M128",
                                           "createdAt":  "2021-08-04T10:49:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Hi @DanielOstovary \r\n\r\nThis API predates me as a current owner of `System.Diagnostics.Process`, so the best I can do is tag people who might know the answers to your questions:\r\n\r\n@Anipik who implemented the API in https://github.com/dotnet/corefx/pull/27191\r\n@GrabYourPitchforks @bartonjs who own .NET security\r\n\r\n\u003e if there was a vulnerability, would you fix it\r\n\r\nDefinitely! If you have found any vulnerability please follow the steps described in https://github.com/dotnet/runtime/security/policy#reporting-a-vulnerability to report it\r\n",
                                           "updatedAt":  "2021-08-04T10:49:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43cK_o",
                                           "createdAt":  "2021-09-29T12:32:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DanielOstovary",
                                           "body":  "Hi, thanks for your answer @adamsitnik! I\u0027d really appreciate a timely statement by @Anipik or @GrabYourPitchforks for that matter. I work on a project with high security requirements and would really need more information on the current state of security of System.Diagnostics.Process to use it in production.",
                                           "updatedAt":  "2021-09-29T12:32:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43dEVp",
                                           "createdAt":  "2021-09-29T17:07:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Anipik",
                                           "body":  "Talking with the security about it. will update soon",
                                           "updatedAt":  "2021-09-29T17:07:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44SYZX",
                                           "createdAt":  "2021-10-15T14:21:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@Anipik any updates on this?",
                                           "updatedAt":  "2021-10-15T14:21:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44jqLO",
                                           "createdAt":  "2021-10-21T18:00:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Anipik",
                                           "body":  "no updates yet, @GrabYourPitchforks is currently oof.",
                                           "updatedAt":  "2021-10-21T18:00:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BmLS-",
                                           "createdAt":  "2022-04-16T03:48:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@GrabYourPitchforks ?",
                                           "updatedAt":  "2022-04-16T03:48:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BmSfG",
                                           "createdAt":  "2022-04-16T03:56:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "I think they are currently backlogged (according to hovering on their mention).",
                                           "updatedAt":  "2022-04-16T03:56:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc585BZl",
                                           "createdAt":  "2024-05-06T07:05:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fschmied",
                                           "body":  "@Anipik It\u0027s been some time, has there been a statement from security in the meantime regarding whether this API is (meant to be) secure against injection attacks?",
                                           "updatedAt":  "2024-05-06T07:05:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc585ep_",
                                           "createdAt":  "2024-05-06T08:25:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgww2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fschmied",
                                                                               "createdAt":  "2024-05-06T09:48:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "it is meant to be secured I think, yes.",
                                           "updatedAt":  "2024-05-06T08:25:55Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Security of Using System.Diagnostics.Process with System.Diagnostics.ProcessStartInfo\u0027s ArgumentList on Windows",
        "labels":  [
                       "question",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58069",
        "createdAt":  "2021-08-24T22:15:05Z",
        "number":  58069,
        "author":  "shadowfoxish",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-27T08:14:45Z",
        "body":  "I was working on a program that needs to shell out to an OS handler to do some printing, and was continually getting this error while I was debugging.\r\n\r\n\u003e The Process object must have the UseShellExecute property set to false in order to use environment variables.\r\n\r\n**Short summary**; if you (or anything including a debugger, serializer, etc) accesses ProcessStartInfo.EnvironmentVariables it gets set to not null and causes an exception later on when you try to use UseShellExecute = true and start the process.\r\n\r\nWhat is occurring is the check [here Process.Win32.cs#L47](https://github.com/dotnet/runtime/blob/2053d653bfd7fc0a5d073a5d31e01600d2d5fa3f/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Win32.cs#L47) has a conflict with the lazy initialization logic [here ProcessStartInfo.cs#L78](https://github.com/dotnet/runtime/blob/2053d653bfd7fc0a5d073a5d31e01600d2d5fa3f/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs#L78).\r\n\r\n-  **Suggested Improvement 1**; In StartWithShellExecuteEx during the argument validation phase, rather than just check _environmentVariables = null, add a check for an empty collection.\r\n\r\n```c#\r\nif (startInfo._environmentVariables != null \u0026\u0026 _environmentVariables.Any())\r\n                throw new InvalidOperationException(SR.CantUseEnvVars);\r\n```\r\nThis would be the least impactful to the API and allows a user struggling with this problem to simply issue myProcessStartInfo.EnvironmentVariables.Clear(); to remove the environment variables. However, if a user does clear the EnvironmentVariables collection, they still had to silently load them at some point, due to the lazy loading logic.\r\n\r\n- **Suggested Improvement 2**; In ProcessStartInfo, add a check for UseShellExecute to gate access or creation of the EnvironmentVariables collection. Something like this:\r\n\r\n```c#\r\n        public IDictionary\u003cstring, string?\u003e Environment\r\n        {\r\n            get\r\n            {\r\n                if (_environmentVariables == null \u0026\u0026 UseShellExecute == false)\r\n                {\r\n                 [..do the needful..]\r\n```\r\n\r\nThis isn\u0027t a full solution since there\u0027s partial classes at work here, but this would in principle prevent the _environmentVariables variable from getting initialized if UseShellExecute was set to true. This creates an order of operations issue which would also have to be considered. If you accessed EnvironmentVariables and then later set UseShellExecute=true, what should happen? \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjcg_Yg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc418WcB",
                                           "createdAt":  "2021-08-24T22:15:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI was working on a program that needs to shell out to an OS handler to do some printing, and was continually getting this error while I was debugging.\r\n\r\n\u003e The Process object must have the UseShellExecute property set to false in order to use environment variables.\r\n\r\n**Short summary**; if you (or anything including a debugger, serializer, etc) accesses ProcessStartInfo.EnvironmentVariables it gets set to not null and causes an exception later on when you try to use UseShellExecute = true and start the process.\r\n\r\nWhat is occurring is the check [here Process.Win32.cs#L47](https://github.com/dotnet/runtime/blob/2053d653bfd7fc0a5d073a5d31e01600d2d5fa3f/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Win32.cs#L47) has a conflict with the lazy initialization logic [here ProcessStartInfo.cs#L78](https://github.com/dotnet/runtime/blob/2053d653bfd7fc0a5d073a5d31e01600d2d5fa3f/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs#L78).\r\n\r\n-  **Suggested Improvement 1**; In StartWithShellExecuteEx during the argument validation phase, rather than just check _environmentVariables = null, add a check for an empty collection.\r\n\r\n```c#\r\nif (startInfo._environmentVariables != null \u0026\u0026 _environmentVariables.Any())\r\n                throw new InvalidOperationException(SR.CantUseEnvVars);\r\n```\r\nThis would be the least impactful to the API and allows a user struggling with this problem to simply issue myProcessStartInfo.EnvironmentVariables.Clear(); to remove the environment variables. However, if a user does clear the EnvironmentVariables collection, they still had to silently load them at some point, due to the lazy loading logic.\r\n\r\n- **Suggested Improvement 2**; In ProcessStartInfo, add a check for UseShellExecute to gate access or creation of the EnvironmentVariables collection. Something like this:\r\n\r\n```c#\r\n        public IDictionary\u003cstring, string?\u003e Environment\r\n        {\r\n            get\r\n            {\r\n                if (_environmentVariables == null \u0026\u0026 UseShellExecute == false)\r\n                {\r\n                 [..do the needful..]\r\n```\r\n\r\nThis isn\u0027t a full solution since there\u0027s partial classes at work here, but this would in principle prevent the _environmentVariables variable from getting initialized if UseShellExecute was set to true. This creates an order of operations issue which would also have to be considered. If you accessed EnvironmentVariables and then later set UseShellExecute=true, what should happen? \r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eshadowfoxish\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-24T22:15:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc419WTn",
                                           "createdAt":  "2021-08-25T08:00:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "Another option may be to track whether the `IDictionary\u003cstring, string?\u003e` that was returned to the user was mutated.\r\nAnd if it wasn\u0027t, not throw an exception.",
                                           "updatedAt":  "2021-08-25T08:00:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NyD9i",
                                           "createdAt":  "2024-09-27T08:14:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karthikpn",
                                           "body":  "Is there any workaround for this?",
                                           "updatedAt":  "2024-09-27T08:14:43Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Diagnostics.Process.Start: UseShellExecute=true and EnvironmentVariables gotcha",
        "labels":  [
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58492",
        "createdAt":  "2021-09-01T10:41:08Z",
        "number":  58492,
        "author":  "krwq",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0pvbQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "loligans",
                                            "createdAt":  "2023-12-14T19:17:20Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-12-15T00:13:24Z",
        "body":  "Couple of issues related to using long paths with System.Diagnostics.Process\r\n\r\nIn all cases below I\u0027ve used following ProcessStartInfo options:\r\n\r\n```csharp\r\nProcessStartInfo si = new();\r\nsi.WorkingDirectory = dir; // depending on case this line might have been skipped\r\nsi.FileName = file;\r\n\r\nsi.ArgumentList.Add(\"foo\");\r\nsi.RedirectStandardOutput = true;\r\nsi.RedirectStandardError = true;\r\nsi.CreateNoWindow = true;\r\nsi.UseShellExecute = false;\r\n\r\n// and then process started with:\r\nProcess process = Process.Start(si);\r\n```\r\n\r\n- Starting a process by passing FileName into ProcessStartInfo where file name is a full path longer than MAX_PATH regardless of prefixing path with `\\\\?\\` always ends up with exception:\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eClick to see exception details\u003c/summary\u003e\r\nWhen using `\\\\?\\` prefix:\r\n\r\n```\r\nUnhandled exception. System.ComponentModel.Win32Exception (206): The filename or extension is too long.\r\n   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo) in System.Diagnostics.Process.dll:token 0x600016a+0x37c\r\n   at System.Diagnostics.Process.Start() in System.Diagnostics.Process.dll:token 0x600013f+0xab\r\n   at System.Diagnostics.Process.Start(ProcessStartInfo startInfo) in System.Diagnostics.Process.dll:token 0x6000143+0x1b\r\n   at ConsoleApp40.Program.Main(String[] args) in C:\\Users\\kwicher\\source\\repos\\ConsoleApp40\\x\\ConsoleApp40\\Program.cs:line 77\r\n```\r\n\r\nWhen using path directly:\r\n\r\n```\r\nUnhandled exception. System.ComponentModel.Win32Exception (2): The system cannot find the file specified.\r\n   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo) in System.Diagnostics.Process.dll:token 0x600016a+0x37c\r\n   at System.Diagnostics.Process.Start() in System.Diagnostics.Process.dll:token 0x600013f+0xab\r\n   at System.Diagnostics.Process.Start(ProcessStartInfo startInfo) in System.Diagnostics.Process.dll:token 0x6000143+0x1b\r\n   at ConsoleApp40.Program.Main(String[] args) in C:\\Users\\kwicher\\source\\repos\\ConsoleApp40\\x\\ConsoleApp40\\Program.cs:line 77\r\n```\r\n\r\n\u003c/details\u003e\r\nIt\u0027s possible to workaround this issue by using `GetShortPathName`, i.e. (in this example shorten the path by using `GetFileName` method):\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eClick to expand code\u003c/summary\u003e\r\n\r\n```csharp\r\n        [DllImport(\"kernel32.dll\", CharSet = CharSet.Unicode)]\r\n        private static unsafe extern int GetShortPathName(char* longPath, char* shortPath, int numChars);\r\n\r\n        public static unsafe string GetFileName(string longPath)\r\n        {\r\n            longPath = Path.GetFullPath(longPath);\r\n            const int MAX_PATH = 260;\r\n            if (longPath.Length \u003c MAX_PATH)\r\n            {\r\n                return longPath;\r\n            }\r\n\r\n            if (!longPath.StartsWith(@\"\\\\?\\\"))\r\n            {\r\n                longPath = @\"\\\\?\\\" + longPath;\r\n            }\r\n\r\n            fixed (char* longPathBuff = longPath)\r\n            {\r\n                int size = GetShortPathName(longPathBuff, null, 0);\r\n                if (size == 0)\r\n                {\r\n                    // error, best attempt is to at least try with that path:\r\n                    return longPath;\r\n                }\r\n\r\n                char[] buff = new char[size];\r\n                fixed (char* shortPathBuff = buff)\r\n                {\r\n                    if (GetShortPathName(longPathBuff, shortPathBuff, size) == 0)\r\n                    {\r\n                        // error, best attempt:\r\n                        return longPath;\r\n                    }\r\n                }\r\n\r\n                return new string(buff);\r\n            }\r\n        }\r\n```\r\n\r\n\u003c/details\u003e\r\n\r\n- When starting a process by passing just a file name (without directory) to `FileName` and directory to `WorkingDirectory` in the ProcessStructInfo this always throws an exception as well:\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eClick to see exception details\u003c/summary\u003e\r\n\r\nRegardless of using `\\\\?\\` prefix you get the same exception:\r\n\r\n```\r\nUnhandled exception. System.ComponentModel.Win32Exception (267): The directory name is invalid.\r\n   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo) in System.Diagnostics.Process.dll:token 0x600016a+0x37c\r\n   at System.Diagnostics.Process.Start() in System.Diagnostics.Process.dll:token 0x600013f+0xab\r\n   at System.Diagnostics.Process.Start(ProcessStartInfo startInfo) in System.Diagnostics.Process.dll:token 0x6000143+0x1b\r\n   at ConsoleApp40.Program.Main(String[] args) in C:\\Users\\kwicher\\source\\repos\\ConsoleApp40\\x\\ConsoleApp40\\Program.cs:line 78\r\n```\r\n\r\nPossibly  same workaround as above could work to fix this although have not tried.\r\n\r\n\u003c/details\u003e\r\n\r\n- When using workaround from the first bullet point the arguments passed to ProcessStartInfo disappear, meaning that `args` in main has zero length even though arguments were passed - I have not digged into why this happens or where do they get lost\r\n\r\n\r\nI\u0027ve tried on netcoreapp3.1, net5.0 and net6.0 (preview) and seeing the same results.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObqjCCw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42P-3g",
                                           "createdAt":  "2021-09-01T10:41:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCouple of issues related to using long paths with System.Diagnostics.Process\r\n\r\nIn all cases below I\u0027ve used following ProcessStartInfo options:\r\n\r\n```csharp\r\nProcessStartInfo si = new();\r\nsi.WorkingDirectory = dir; // depending on case this line might have been skipped\r\nsi.FileName = file;\r\n\r\nsi.ArgumentList.Add(\"foo\");\r\nsi.RedirectStandardOutput = true;\r\nsi.RedirectStandardError = true;\r\nsi.CreateNoWindow = true;\r\nsi.UseShellExecute = false;\r\n\r\n// and then process started with:\r\nProcess process = Process.Start(si);\r\n```\r\n\r\n- Starting a process by passing FileName into ProcessStartInfo where file name is a full path longer than MAX_PATH regardless of prefixing path with `\\\\?\\` always ends up with exception:\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eClick to see exception details\u003c/summary\u003e\r\nWhen using `\\\\?\\` prefix:\r\n\r\n```\r\nUnhandled exception. System.ComponentModel.Win32Exception (206): The filename or extension is too long.\r\n   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo) in System.Diagnostics.Process.dll:token 0x600016a+0x37c\r\n   at System.Diagnostics.Process.Start() in System.Diagnostics.Process.dll:token 0x600013f+0xab\r\n   at System.Diagnostics.Process.Start(ProcessStartInfo startInfo) in System.Diagnostics.Process.dll:token 0x6000143+0x1b\r\n   at ConsoleApp40.Program.Main(String[] args) in C:\\Users\\kwicher\\source\\repos\\ConsoleApp40\\x\\ConsoleApp40\\Program.cs:line 77\r\n```\r\n\r\nWhen using path directly:\r\n\r\n```\r\nUnhandled exception. System.ComponentModel.Win32Exception (2): The system cannot find the file specified.\r\n   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo) in System.Diagnostics.Process.dll:token 0x600016a+0x37c\r\n   at System.Diagnostics.Process.Start() in System.Diagnostics.Process.dll:token 0x600013f+0xab\r\n   at System.Diagnostics.Process.Start(ProcessStartInfo startInfo) in System.Diagnostics.Process.dll:token 0x6000143+0x1b\r\n   at ConsoleApp40.Program.Main(String[] args) in C:\\Users\\kwicher\\source\\repos\\ConsoleApp40\\x\\ConsoleApp40\\Program.cs:line 77\r\n```\r\n\r\n\u003c/details\u003e\r\nIt\u0027s possible to workaround this issue by using `GetShortPathName`, i.e. (in this example shorten the path by using `GetFileName` method):\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eClick to expand code\u003c/summary\u003e\r\n\r\n```csharp\r\n        [DllImport(\"kernel32.dll\", CharSet = CharSet.Unicode)]\r\n        private static unsafe extern int GetShortPathName(char* longPath, char* shortPath, int numChars);\r\n\r\n        public static unsafe string GetFileName(string longPath)\r\n        {\r\n            longPath = Path.GetFullPath(longPath);\r\n            const int MAX_PATH = 260;\r\n            if (longPath.Length \u003c MAX_PATH)\r\n            {\r\n                return longPath;\r\n            }\r\n\r\n            if (!longPath.StartsWith(@\"\\\\?\\\"))\r\n            {\r\n                longPath = @\"\\\\?\\\" + longPath;\r\n            }\r\n\r\n            fixed (char* longPathBuff = longPath)\r\n            {\r\n                int size = GetShortPathName(longPathBuff, null, 0);\r\n                if (size == 0)\r\n                {\r\n                    // error, best attempt is to at least try with that path:\r\n                    return longPath;\r\n                }\r\n\r\n                char[] buff = new char[size];\r\n                fixed (char* shortPathBuff = buff)\r\n                {\r\n                    if (GetShortPathName(longPathBuff, shortPathBuff, size) == 0)\r\n                    {\r\n                        // error, best attempt:\r\n                        return longPath;\r\n                    }\r\n                }\r\n\r\n                return new string(buff);\r\n            }\r\n        }\r\n```\r\n\r\n\u003c/details\u003e\r\n\r\n- When starting a process by passing just a file name (without directory) to `FileName` and directory to `WorkingDirectory` in the ProcessStructInfo this always throws an exception as well:\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eClick to see exception details\u003c/summary\u003e\r\n\r\nRegardless of using `\\\\?\\` prefix you get the same exception:\r\n\r\n```\r\nUnhandled exception. System.ComponentModel.Win32Exception (267): The directory name is invalid.\r\n   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo) in System.Diagnostics.Process.dll:token 0x600016a+0x37c\r\n   at System.Diagnostics.Process.Start() in System.Diagnostics.Process.dll:token 0x600013f+0xab\r\n   at System.Diagnostics.Process.Start(ProcessStartInfo startInfo) in System.Diagnostics.Process.dll:token 0x6000143+0x1b\r\n   at ConsoleApp40.Program.Main(String[] args) in C:\\Users\\kwicher\\source\\repos\\ConsoleApp40\\x\\ConsoleApp40\\Program.cs:line 78\r\n```\r\n\r\nPossibly  same workaround as above could work to fix this although have not tried.\r\n\r\n\u003c/details\u003e\r\n\r\n- When using workaround from the first bullet point the arguments passed to ProcessStartInfo disappear, meaning that `args` in main has zero length even though arguments were passed - I have not digged into why this happens or where do they get lost\r\n\r\n\r\nI\u0027ve tried on netcoreapp3.1, net5.0 and net6.0 (preview) and seeing the same results.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekrwq\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-01T10:41:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BYySB",
                                           "createdAt":  "2022-04-12T17:47:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "I would assume based on the exception that this bug only occurs on Windows.\r\nCan you label this `os-windows`?\r\n\r\nDoes the error also occur with `ShellExecute`, because internally different paths are chosen in the ShellExecute case?\r\n\r\nhttps://github.com/dotnet/runtime/blob/42044c65e9a09ae3d6f056d53bb1af83aa6ae449/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Win32.cs#L25-L27\r\n\r\n\u0026 does this also occur if specify a [`UserName`](https://docs.microsoft.com/de-de/dotnet/api/system.diagnostics.processstartinfo.username?view=net-6.0), because this uses CreateProcessAsUserW afaik.\r\n\r\nAlso, can you verify if this is due to the .NET API or simply a limitation of the WinAPI - See [`CreateProcessW`](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw)?\r\n\r\n",
                                           "updatedAt":  "2022-04-12T17:47:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FGJf_",
                                           "createdAt":  "2022-06-17T21:30:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODPpLIA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JeremyKuhne",
                                                                               "createdAt":  "2022-06-20T17:55:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "loligans",
                                                                               "createdAt":  "2023-12-14T19:52:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "rseanhall",
                                           "body":  "I\u0027m running into this issue, too. The problem is this line:\r\n\r\nhttps://github.com/dotnet/runtime/blob/bfceef9dbd57c1ae9170949ea7845c48ca1ad2ce/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs#L569\r\n\r\nAccording to the documentation:\r\n\r\n\u003e If lpApplicationName is NULL, the module name portion of lpCommandLine is limited to MAX_PATH characters.\r\n\r\nThe code needs to pass the path to the executable into `lpApplicationName` as well so that it can be longer than `MAX_PATH`.",
                                           "updatedAt":  "2022-06-17T21:30:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FItIp",
                                           "createdAt":  "2022-06-20T02:52:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RussKie",
                                           "body":  "May be @JeremyKuhne has any insights?",
                                           "updatedAt":  "2022-06-20T02:52:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FI3dV",
                                           "createdAt":  "2022-06-20T04:19:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e The code needs to pass the path to the executable into lpApplicationName as well so that it can be longer than MAX_PATH.\n\nIf this wouldn\u0027t break anyone, we\u0027d welcome a PR.\n\nDoes enabling long paths change behaviors:\n\nhttps://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=cmd#enable-long-paths-in-windows-10-version-1607-and-later",
                                           "updatedAt":  "2022-06-20T04:19:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FK6lJ",
                                           "createdAt":  "2022-06-20T14:03:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rseanhall",
                                           "body":  "\u003e Does enabling long paths change behaviors\r\n\r\nNo, at least as of the current Win11.\r\n\r\n\u003e If this wouldn\u0027t break anyone\r\n\r\nYeah, about that... it turns out this probably can\u0027t be done in a non-breaking way.\r\n\r\n1. From the documentation: `If the executable module is a 16-bit application, lpApplicationName should be NULL, and the string pointed to by lpCommandLine should specify the executable module as well as its arguments.` I don\u0027t know how many .NET 7 applications will be running 16-bit .exes though.\r\n\r\n2. From the documentation: `If lpApplicationName is NULL, ... If the file name does not contain an extension, .exe is appended. Therefore, if the file name extension is .com, this parameter must include the .com extension. If the file name ends in a period (.) with no extension, or if the file name contains a path, .exe is not appended. If the file name does not contain a directory path, the system searches for the executable file in the following sequence.` None of this behavior is done when `lpApplicationName` is not null. I guess this could theoretically be worked around but it wouldn\u0027t be pretty.\r\n\r\n3. `System.Diagnostics.Process` tries to always add double quotes around the module name, but it is not properly ensuring that this happens. For example, if the file name is `my exe` then it will properly quote it as `\"my exe\"`. But `\"my\" \"exe\"` will be left as is instead of properly escaping it to `\"\\\"my\\\" \\\"exe\\\"\"`. On top of that, it currently accepts `\"my exe\"` as valid but if you pass `\"C:\\my exe.exe\"` into `lpApplicationName` then `CreateProcessW` will literally look for `\"C:\\my exe.exe\"` instead of `C:\\my exe.exe`.",
                                           "updatedAt":  "2022-06-20T14:03:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FLR3S",
                                           "createdAt":  "2022-06-20T15:26:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "For (1) -- 16 bit support does not exist on 64 bit Windows. It\u0027s off by default on 32 bit Windows 10 apparently, and 32 bit Windows 11 doesn\u0027t exist. So at least in theory, it could safely work on those.\r\n\r\nBut for (2) and (3) .. that does seem risky as you say.",
                                           "updatedAt":  "2022-06-20T15:26:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FLSWb",
                                           "createdAt":  "2022-06-20T15:28:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "What about only following this code path when we know the path is too long and will fail anyway? Or, conversely, when process start has failed and we believe this is why (eg error 206 when path is prefixed with `\\\\?\\`) then try again with the other code path?",
                                           "updatedAt":  "2022-06-20T15:28:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FLUzC",
                                           "createdAt":  "2022-06-20T15:38:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rseanhall",
                                           "body":  "We would have to assume people weren\u0027t doing something crazy like putting all the arguments in the file name. `\"path\\to\\my.exe\" assume all the arguments are longer than MAX_PATH \"here\"` for example.",
                                           "updatedAt":  "2022-06-20T15:38:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FL8Sq",
                                           "createdAt":  "2022-06-20T19:02:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "@danmoseley This could use some debugging on our part to see precisely what the limitations are. I did some quick looking at the current code (which is over 4000 lines) and didn\u0027t see many `MAX_PATH` references.\r\n\r\n- There is definitely a `MAX_PATH` restriction on `lpCurrentDirectory` if you specify it (which the original description does).\r\n- If `lpApplicationName` isn\u0027t present, the buffer for the file name (not path) is `MAX_PATH`, which should be fine.\r\n- If `lpApplicationName` isn\u0027t present, the heuristics it uses to figure out the unquoted exe name are impacted by `MAX_PATH`.\r\n- 16bit applications have a `MAX_PATH` limitation under `PsCreateFailOnSectionCreate`.\r\n\r\nA good article on the `CreateProcess` process can be found [here](https://www.microsoftpressstore.com/articles/article.aspx?p=2233328\u0026seqNum=3).\r\n\r\n@rseanhall repro arguments would be useful.",
                                           "updatedAt":  "2022-06-20T19:02:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FMAVP",
                                           "createdAt":  "2022-06-20T19:24:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rseanhall",
                                           "body":  "Repro arguments for what exactly? All I was trying to point out was that because the current `System.Diagnostics.Process` code allows double quotes in the file name, it makes it impossible for us to tell whether the entire string is supposed to be the file name. So the `ProcessStartInfo.FileName` string might be more than MAX_PATH, but the actual file portion isn\u0027t. And if we try to parse the file name as if it\u0027s a command line, then we might run into issues because pathological cases like `my.exe\" arg1 \"arg2` can work today (that will be changed to `\"my.exe\" arg1 \"arg2\"` before passing it to `CreateProcess`).",
                                           "updatedAt":  "2022-06-20T19:24:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FMCnF",
                                           "createdAt":  "2022-06-20T19:36:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "\u003e Repro arguments for what exactly? \r\n\r\n@rseanhall your repro of the `MAX_PATH` problem.",
                                           "updatedAt":  "2022-06-20T19:36:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FQRT2",
                                           "createdAt":  "2022-06-21T15:09:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCi9w8g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JeremyKuhne",
                                                                               "createdAt":  "2022-06-21T19:49:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rseanhall",
                                           "body":  "This is a simplified repro. The actual test is running our native executable to verify we have removed MAX_PATH limitations from it. That is a work in progress and will eventually be at https://github.com/wixtoolset/wix4.\r\n\r\nEdit:\r\n\r\nWhen long paths are disabled or not supported in the OS, Process.Start fails with ERROR_FILE_NOT_FOUND.\r\n\r\n\u003cdetails\u003e\r\n    \u003csummary\u003eClick to expand\u003c/summary\u003e\r\n\r\n```\r\nSystem.ComponentModel.Win32Exception : The system cannot find the file specified.\r\nStack Trace:\r\n   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)\r\n   at System.Diagnostics.Process.Start()\r\n   at System.Diagnostics.Process.Start(ProcessStartInfo startInfo)\r\n```\r\n\u003c/details\u003e\r\n\r\nWhen long paths are enabled in the registry and .exe manifest, Process.Start fails with ERROR_FILENAME_EXCED_RANGE.\r\n\r\n\u003cdetails\u003e\r\n    \u003csummary\u003eClick to expand\u003c/summary\u003e\r\n\r\n```\r\nSystem.ComponentModel.Win32Exception : An error occurred trying to start process \u0027C:\\Users\\admin\\AppData\\Local\\Temp\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\\cmd.exe\u0027 with working directory \u0027C:\\burn\\longpath3\u0027. The filename or extension is too long.\r\n  Stack Trace:\r\n   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)\r\n   at System.Diagnostics.Process.Start()\r\n   at System.Diagnostics.Process.Start(ProcessStartInfo startInfo)\r\n```\r\n\u003c/details\u003e\r\n\r\n```c#\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.IO;\r\nusing System.Text;\r\nusing Xunit;\r\n\r\nnamespace LongPathTests\r\n{\r\n    \r\n    public class Process\r\n    {\r\n        [Fact]\r\n        public void CanStartProcessFromLongPath()\r\n        {\r\n            const int subdirLength = 100;\r\n            var baseFolder = Path.Combine(Path.GetTempPath(), new string(\u0027a\u0027, subdirLength), new string(\u0027b\u0027, subdirLength), new string(\u0027c\u0027, subdirLength));\r\n            Directory.CreateDirectory(baseFolder);\r\n\r\n            try\r\n            {\r\n                const string targetExe = \"cmd.exe\";\r\n                var sourceFile = new FileInfo(Path.Combine(Environment.SystemDirectory, targetExe));\r\n                var destFilePath = Path.Combine(baseFolder, targetExe);\r\n                sourceFile.CopyTo(destFilePath);\r\n\r\n                var exitCode = new Random().Next();\r\n                var psi = new ProcessStartInfo(destFilePath, $\"/c exit /b {exitCode}\")\r\n                {\r\n                    CreateNoWindow = true,\r\n                    RedirectStandardError = true,\r\n                    RedirectStandardOutput = true,\r\n                    UseShellExecute = false,\r\n                    WorkingDirectory = string.Empty,\r\n                };\r\n\r\n                using (var process = Process.Start(psi))\r\n                {\r\n                    var standardOutput = new StringBuilder();\r\n                    var standardError = new StringBuilder();\r\n\r\n                    process.ErrorDataReceived += (s, e) =\u003e { if (e.Data != null) { standardError.AppendLine(e.Data); } };\r\n                    process.OutputDataReceived += (s, e) =\u003e { if (e.Data != null) { standardOutput.AppendLine(e.Data); } };\r\n\r\n                    process.BeginErrorReadLine();\r\n                    process.BeginOutputReadLine();\r\n\r\n                    process.WaitForExit();\r\n\r\n                    if (exitCode != process.ExitCode)\r\n                    {\r\n                        Assert.True(false, $\"Expected exit code {exitCode}, but got {process.ExitCode}.\\r\\nOutput: {standardOutput}\\r\\nError: {standardError}\");\r\n                    }\r\n                }\r\n            }\r\n            finally\r\n            {\r\n                Directory.Delete(baseFolder, true);\r\n            }\r\n        }\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2022-06-21T15:19:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FVa7P",
                                           "createdAt":  "2022-06-22T15:16:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rseanhall",
                                           "body":  "\u003e There is definitely a MAX_PATH restriction on lpCurrentDirectory if you specify it (which the original description does).\r\n\r\nAnother thing to consider is that `CreateProcessW` tries to use the current directory of the current process if `lpCurrentDirectory` is NULL or an empty string. When long paths are enabled, the current directory can be longer than `MAX_PATH`. In this case, `CreateProcessW` fails with `ERROR_INVALID_PARAMETER` (87). You have to pass in a valid path less than `MAX_PATH` to avoid this error.",
                                           "updatedAt":  "2022-06-22T15:17:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FX8QE",
                                           "createdAt":  "2022-06-23T04:07:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "Does this also occur if `lpCurrentDirectory` is not NULL and the current work directory is longer than `MAX_PATH`? ",
                                           "updatedAt":  "2022-06-23T04:07:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FZx2D",
                                           "createdAt":  "2022-06-23T13:06:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rseanhall",
                                           "body":  "I have only seen this when `lpCurrentDirectory` is NULL or an empty string.",
                                           "updatedAt":  "2022-06-23T13:06:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FgLKb",
                                           "createdAt":  "2022-06-24T23:22:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCj0gUQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-06-27T07:59:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "We cannot consume APIs which are not publicly documented (generally this means documented on `docs.microsoft.com`).\r\n\r\nThey are not publicly available and are not meant for direct consumption. The have no guarantees, can be removed at any time, and are effectively \"private implementation detail\".",
                                           "updatedAt":  "2022-06-24T23:22:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5up4Ev",
                                           "createdAt":  "2023-12-14T19:40:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loligans",
                                           "body":  "Taken from the documentation here: https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw#parameters\r\n\r\n\u003e `[in, out, optional] lpCommandLine`\r\n\u003e \r\n\u003e The command line to be executed.\r\n\u003e \r\n\u003e The maximum length of this string is 32,767 characters, including the Unicode terminating null character. If `lpApplicationName` is NULL, the module name portion of `lpCommandLine` is limited to MAX_PATH characters.\r\n\r\nThis suggests when `lpApplicationName` is NULL then the `lpCommandLine` is limited to `MAX_PATH`\r\n\r\nLooking at the code for `System.Diagnostics.Process` it appears we pass `NULL` for `lpApplicationName` and I wonder if that could be what is triggering the `MAX_PATH` limit. Reference to places in code below.\r\n\r\nHere:\r\nhttps://github.com/dotnet/runtime/blob/07b6e338bb010b0dba1e72bdf546c69ade6f3f6c/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs#L555C33-L566C94\r\n\r\nAnd Here:\r\nhttps://github.com/dotnet/runtime/blob/07b6e338bb010b0dba1e72bdf546c69ade6f3f6c/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs#L583C29-L594C31",
                                           "updatedAt":  "2023-12-14T19:40:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5up9Kb",
                                           "createdAt":  "2023-12-14T19:55:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loligans",
                                           "body":  "One potential fix would be to expose a property `ApplicationName` with a default value of `null` and use the property for setting the `lpApplicationName` field. That way developers can override the `ApplicationName` how they see fit and the existing functionality is preserved @danmoseley ",
                                           "updatedAt":  "2023-12-14T20:39:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uqMIL",
                                           "createdAt":  "2023-12-14T20:39:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "loligans",
                                           "body":  "I did some testing on my own and confirmed that adding `lpApplicationName` as well as `lpCommandLine` does not resolve the problem. `lpCurrentDirectory` is still limited by `MAX_PATH`. However, in addition I tested using the extended-length path prefix `\\\\?\\` which correctly functions as a path string but it ironically does not allow paths longer than `MAX_PATH`.\r\n\r\nNow if I pass a `ShortPath` string that resolves to a path longer than `MAX_PATH` it works correctly. https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getshortpathnamew\r\n\r\nTake the following 319-character longpath example:\r\n\u003e C:\\tmp\\longpathnamelongpathnamelongpathnamelongpathname\\longpathnamelongpathnamelongpathnamelongpathname\\longpathnamelongpathnamelongpathnamelongpathname\\longpathnamelongpathnamelongpathnamelongpathnamelongpathnamelongpathnamelongpathnamelongpathn\\longpathnamelongpathnamelongpathnamelongpath\\longname\\longname\\longname\r\n\r\nIf I pass it to `GetShortPathName` I receive the following path:\r\n\u003e C:\\tmp\\LONGPA\\~1\\LONGPA\\~1\\LONGPA\\~1\\LONGPA\\~1\\LONGPA\\~1\\longname\\longname\\longname\r\n\r\nPassing the short path into the `lpCurrentDirectory` will resolve to the full path and start the application correctly. I tested this by using a dotnet console app to spawn `powershell.exe`. I confirmed it by checking the `[Environment]::CurrentDirectory` value in powershell and saw that it had resolved the short-path into the full long-path that exceeds the `MAX_PATH` limit\r\n\r\nI think this is a bug with `CreateProcessW` WinAPI and using short paths is simply a workaround.",
                                           "updatedAt":  "2023-12-15T00:13:24Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "System.Diagnostics.Process long paths issues",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "os-windows"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58872",
        "createdAt":  "2021-09-09T14:28:47Z",
        "number":  58872,
        "author":  "UnityAlex",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-09-10T18:00:03Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nTo reproduce/investigate use provided project and run:\r\n`lsof -c dotnet | egrep \"PIPE\" | awk \u0027{ print $1; }\u0027| sort -rn | uniq -c | sort -rn | head -20`\r\nbetween iterations. The documentation for Process does not indicate that the user needs to dispose of the pipe. \r\n\r\nRepo Code:\r\n```\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nnamespace TestPipeLeak\r\n{\r\n    /*\r\n     * Execute lsof -c dotnet | egrep \"PIPE\" | awk \u0027{ print $1; }\u0027| sort -rn | uniq -c | sort -rn | head -20\r\n     * on \u0027nix platforms before/between iterations to watch 2 pipes leak per iteration.\r\n     */\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n            Console.ReadKey();\r\n            for (int i = 0; i \u003c 2; i++)\r\n            {\r\n                using (var process = new Process())\r\n                {\r\n                    process.StartInfo.FileName = \"bash\";\r\n                    process.StartInfo.Arguments = \"--version\";\r\n                    process.StartInfo.UseShellExecute = false;\r\n                    process.StartInfo.RedirectStandardOutput = true;\r\n                    process.StartInfo.RedirectStandardError = true;\r\n                    process.Start();\r\n\r\n                    var output = process.StandardOutput.ReadToEnd();\r\n                    var err = process.StandardError.ReadToEnd();\r\n                    process.WaitForExit();\r\n                    var exitCode = process.ExitCode;\r\n                    // This fixes the issue. Do we need to dispose streams ourselves?\r\n                    //process.StandardOutput.Dispose();\r\n                    //process.StandardError.Dispose();\r\n                    process.Close();\r\n                }\r\n                Console.WriteLine(\"iteration complete. Press any key to continue\");\r\n                Console.ReadKey();\r\n            }\r\n\r\n            Console.WriteLine(\"All Done. Press any key to exit\");\r\n            Console.ReadKey();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Configuration\r\n\r\n* dotnet version `5.0.201` also occurs for mono runtime.\r\n* MacOS `11.5.2`\r\n* x64\r\n\r\n### Regression?\r\n\r\nUnsure\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONqiZfQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42m1pb",
                                           "createdAt":  "2021-09-09T14:28:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nTo reproduce/investigate use provided project and run:\r\n`lsof -c dotnet | egrep \"PIPE\" | awk \u0027{ print $1; }\u0027| sort -rn | uniq -c | sort -rn | head -20`\r\nbetween iterations. The documentation for Process does not indicate that the user needs to dispose of the pipe. \r\n\r\nRepo Code:\r\n```\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nnamespace TestPipeLeak\r\n{\r\n    /*\r\n     * Execute lsof -c dotnet | egrep \"PIPE\" | awk \u0027{ print $1; }\u0027| sort -rn | uniq -c | sort -rn | head -20\r\n     * on \u0027nix platforms before/between iterations to watch 2 pipes leak per iteration.\r\n     */\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n            Console.ReadKey();\r\n            for (int i = 0; i \u003c 2; i++)\r\n            {\r\n                using (var process = new Process())\r\n                {\r\n                    process.StartInfo.FileName = \"bash\";\r\n                    process.StartInfo.Arguments = \"--version\";\r\n                    process.StartInfo.UseShellExecute = false;\r\n                    process.StartInfo.RedirectStandardOutput = true;\r\n                    process.StartInfo.RedirectStandardError = true;\r\n                    process.Start();\r\n\r\n                    var output = process.StandardOutput.ReadToEnd();\r\n                    var err = process.StandardError.ReadToEnd();\r\n                    process.WaitForExit();\r\n                    var exitCode = process.ExitCode;\r\n                    // This fixes the issue. Do we need to dispose streams ourselves?\r\n                    //process.StandardOutput.Dispose();\r\n                    //process.StandardError.Dispose();\r\n                    process.Close();\r\n                }\r\n                Console.WriteLine(\"iteration complete. Press any key to continue\");\r\n                Console.ReadKey();\r\n            }\r\n\r\n            Console.WriteLine(\"All Done. Press any key to exit\");\r\n            Console.ReadKey();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Configuration\r\n\r\n* dotnet version `5.0.201` also occurs for mono runtime.\r\n* MacOS `11.5.2`\r\n* x64\r\n\r\n### Regression?\r\n\r\nUnsure\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eUnityAlex\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-09T14:28:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42ooLd",
                                           "createdAt":  "2021-09-10T04:23:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@tmds maybe has context?",
                                           "updatedAt":  "2021-09-10T04:23:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42o-Bg",
                                           "createdAt":  "2021-09-10T07:56:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "```cs\r\n                     // This fixes the issue. Do we need to dispose streams ourselves?\r\n                    //process.StandardOutput.Dispose();\r\n                    //process.StandardError.Dispose();\r\n```\r\n\r\nYes, you need to dispose the streams:\r\n\r\nhttps://github.com/dotnet/runtime/blob/331823f4046da1530dd950ac3ad8a87b3cdd584d/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.cs#L871-L872",
                                           "updatedAt":  "2021-09-10T07:56:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42o_1K",
                                           "createdAt":  "2021-09-10T08:09:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "todi1856",
                                           "body":  "\u003e ```cs\r\n\u003e                      // This fixes the issue. Do we need to dispose streams ourselves?\r\n\u003e                     //process.StandardOutput.Dispose();\r\n\u003e                     //process.StandardError.Dispose();\r\n\u003e ```\r\n\u003e \r\n\u003e Yes, you need to dispose the streams:\r\n\u003e \r\n\u003e https://github.com/dotnet/runtime/blob/331823f4046da1530dd950ac3ad8a87b3cdd584d/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.cs#L871-L872\r\n\r\nWould that mean that MSDN examples are wrong, for ex., here - https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.processstartinfo.redirectstandardoutput?view=net-5.0 ?",
                                           "updatedAt":  "2021-09-10T08:09:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42pIzO",
                                           "createdAt":  "2021-09-10T09:07:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB52CoA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "UnityAlex",
                                                                               "createdAt":  "2021-09-10T13:25:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e Would that mean that MSDN examples are wrong, for ex., here\r\n\r\nYes, the docs could be improved to cover this.\r\n\r\nFor completeness: when not disposed, the Handle finalizer becomes responsible for closing the pipe.",
                                           "updatedAt":  "2021-09-10T09:07:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42qJl9",
                                           "createdAt":  "2021-09-10T16:01:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB55EvQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "todi1856",
                                                                               "createdAt":  "2021-09-10T18:49:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@todi1856 we\u0027d welcome an update to the docs, if you\u0027re willing. The code is in dotnet/dotnet-api-docs repo.",
                                           "updatedAt":  "2021-09-10T16:01:46Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Process class leaks pipes on MacOS when redirecting stdout and stderr",
        "labels":  [
                       "documentation",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59750",
        "createdAt":  "2021-09-22T13:33:52Z",
        "number":  59750,
        "author":  "raymenliu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-10-15T14:23:29Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate. If you\u0027re not sure of an answer, just skip it. We\u0027ll help you! --\u003e\r\n\r\n### Description\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\nafter installed run  \"dotnet --info\"  found error message.\r\n### Configuration\r\n\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and for Linux, what distro?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\n\r\n### Regression?\r\n\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Other information\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n\r\nUnhandled exception. System.UnauthorizedAccessException: Access to the path \u0027/proc/stat\u0027 is denied.\r\n ---\u003e System.IO.IOException: Permission denied\r\n   --- End of inner exception stack trace ---\r\n   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.Strategies.FileStreamHelpers.ChooseStrategy(FileStream fileStream, String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.StreamReader.ValidateArgsAndOpenPath(String path, Encoding encoding, Int32 bufferSize)\r\n   at System.IO.File.InternalReadAllText(String path, Encoding encoding)\r\n   at System.IO.File.ReadAllText(String path)\r\n   at System.Diagnostics.Process.get_BootTime()\r\n   at System.Diagnostics.Process.BootTimeToDateTime(TimeSpan timespanAfterBoot)\r\n   at System.Diagnostics.Process.get_StartTimeCore()\r\n   at System.Diagnostics.Process.get_StartTime()\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\nAborted",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOEmK-g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43apU2",
                                           "createdAt":  "2021-09-29T00:49:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mairaw",
                                           "body":  "@dsplaisted can you help with this? Should this issue be moved to a different repo?",
                                           "updatedAt":  "2021-09-29T00:49:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43aqj2",
                                           "createdAt":  "2021-09-29T01:02:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dsplaisted",
                                           "body":  "@raymenliu What Operating System are you running on?\r\n\r\n@dotnet/platform-deps-team @jeffschwMSFT @agocke Can you route this?  It looks like a failure in getting Process.StartTime.",
                                           "updatedAt":  "2021-09-29T01:02:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43ceHS",
                                           "createdAt":  "2021-09-29T14:05:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-09-29T14:05:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43ceIr",
                                           "createdAt":  "2021-09-29T14:05:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate. If you\u0027re not sure of an answer, just skip it. We\u0027ll help you! --\u003e\r\n\r\n### Description\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\nafter installed run  \"dotnet --info\"  found error message.\r\n### Configuration\r\n\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and for Linux, what distro?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\n\r\n### Regression?\r\n\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Other information\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n\r\nUnhandled exception. System.UnauthorizedAccessException: Access to the path \u0027/proc/stat\u0027 is denied.\r\n ---\u003e System.IO.IOException: Permission denied\r\n   --- End of inner exception stack trace ---\r\n   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.Strategies.FileStreamHelpers.ChooseStrategy(FileStream fileStream, String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.StreamReader.ValidateArgsAndOpenPath(String path, Encoding encoding, Int32 bufferSize)\r\n   at System.IO.File.InternalReadAllText(String path, Encoding encoding)\r\n   at System.IO.File.ReadAllText(String path)\r\n   at System.Diagnostics.Process.get_BootTime()\r\n   at System.Diagnostics.Process.BootTimeToDateTime(TimeSpan timespanAfterBoot)\r\n   at System.Diagnostics.Process.get_StartTimeCore()\r\n   at System.Diagnostics.Process.get_StartTime()\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\nAborted\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eraymenliu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-29T14:05:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44SYr6",
                                           "createdAt":  "2021-10-15T14:23:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@tmds Is it OK for .NET to expect that the user has permissions to read `\u0027/proc/stat\u0027` ?",
                                           "updatedAt":  "2021-10-15T14:23:29Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "dotnet  install from aarch64",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59746",
        "createdAt":  "2021-09-29T10:52:52Z",
        "number":  59746,
        "author":  "PetarRAutoAddress",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3xBNQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "patricksadowski",
                                            "createdAt":  "2022-02-11T10:03:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maknapp",
                                            "createdAt":  "2022-08-26T14:30:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MiguelAlho",
                                            "createdAt":  "2022-11-11T14:59:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2024-03-12T04:24:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kanpov",
                                            "createdAt":  "2024-05-08T14:45:41Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2024-10-08T09:37:56Z",
        "body":  "[The .NET Process class on Linux](https://developers.redhat.com/blog/2019/10/29/the-net-process-class-on-linux#the_basics)\r\n\r\nSo, it seems that on Linux (container) using .NET I can start a new process, but I cannot tell it to gracefully terminate ?\r\n\r\nThis seems a major problem, that makes any serious process handling on Linux  non-viable.\r\n\r\nAny suggestions?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjwNJsw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43b690",
                                           "createdAt":  "2021-09-29T10:52:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-09-29T10:52:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43b8E8",
                                           "createdAt":  "2021-09-29T11:00:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PetarRAutoAddress",
                                           "body":  "\u003e I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).\r\n\r\narea-System.Diagnostics.Process",
                                           "updatedAt":  "2021-09-29T11:00:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43cBYE",
                                           "createdAt":  "2021-09-29T11:33:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1Q-ZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PetarRAutoAddress",
                                                                               "createdAt":  "2021-09-29T11:37:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-10-08T14:30:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "PathogenDavid",
                                           "body":  "I agree this is probably something that the runtime would provide and seems like a natural extension of https://github.com/dotnet/runtime/issues/50527.\r\n\r\nThat being said if you need something that works today, I\u0027ve used [Mono.Unix](https://www.nuget.org/packages/Mono.Unix) for this in the past. (Despite the name, it is not Mono-specific.)\r\n\r\nHere\u0027s an example using it:\r\n\r\n```csharp\r\n//using Mono.Unix;\r\n//using Mono.Unix.Native;\r\n//using System;\r\n//using System.Diagnostics;\r\n\r\nvoid SendSigInt(Process process)\r\n{\r\n    if (Syscall.kill(process.Id, Signum.SIGINT) == 0)\r\n    {\r\n        Console.WriteLine(\"Sent SIGINT successfully.\");\r\n    }\r\n    else\r\n    {\r\n        Errno errno = Stdlib.GetLastError();\r\n        Console.WriteLine($\"Failed to send SIGINT, errno = {errno} ({UnixMarshal.GetErrorDescription(errno)})\");\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2021-09-29T11:33:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43cB0u",
                                           "createdAt":  "2021-09-29T11:36:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB8Py9w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "PathogenDavid",
                                                                               "createdAt":  "2021-09-29T12:03:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "PetarRAutoAddress",
                                           "body":  "Thanks.\r\nCan it send SIGTERM as well ?",
                                           "updatedAt":  "2021-09-29T11:36:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43cEDM",
                                           "createdAt":  "2021-09-29T11:50:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n[The .NET Process class on Linux](https://developers.redhat.com/blog/2019/10/29/the-net-process-class-on-linux#the_basics)\r\n\r\nSo, it seems that on Linux (container) using .NET I can start a new process, but I cannot tell it to gracefully terminate ?\r\n\r\nThis seems a major problem, that makes any serious process handling on Linux  non-viable.\r\n\r\nAny suggestions?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ePetarRAutoAddress\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-29T11:50:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43cGDm",
                                           "createdAt":  "2021-09-29T12:03:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB8P0RQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PetarRAutoAddress",
                                                                               "createdAt":  "2021-09-29T12:05:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "PathogenDavid",
                                           "body":  "\u003e Thanks. Can it send SIGTERM as well ?\r\n\r\nYes, that and [basically every signal you\u0027d ever want](https://github.com/mono/mono.posix/blob/057e4db75dd7d1f51e5409f214c94b91f7849b89/src/Mono.Unix/Mono.Unix.Native/Syscall.cs#L304-L340).\r\n\r\nMono.Unix is a thin wrapper around much of the Unix/POSIX API. So when you call `Sys.kill` you\u0027re basically calling [kill(2)](https://manpages.ubuntu.com/manpages/focal/en/man2/kill.2.html) directly.",
                                           "updatedAt":  "2021-09-29T12:03:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43cLI1",
                                           "createdAt":  "2021-09-29T12:33:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB8QKUg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PetarRAutoAddress",
                                                                               "createdAt":  "2021-09-29T12:40:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmds",
                                           "body":  "Alternatively, you can:\r\n\r\n```cs\r\nusing System.Diagnostics;\r\nusing System.Runtime.InteropServices;\r\n\r\npublic static class ProcessExtensions\r\n{\r\n    private const int SIGTERM = 15;\r\n\r\n    public static void Terminate(this Process process)\r\n    {\r\n        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (!process.HasExited)\r\n        {\r\n            kill(process.Id, SIGTERM);\r\n        }\r\n    }\r\n\r\n    [DllImport(\"libc\")]\r\n    private static extern int kill(int pid, int sig);\r\n}\r\n```",
                                           "updatedAt":  "2021-09-29T12:33:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43cMW2",
                                           "createdAt":  "2021-09-29T12:40:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PetarRAutoAddress",
                                           "body":  "Great! Thanks.",
                                           "updatedAt":  "2021-09-29T12:40:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54RURi",
                                           "createdAt":  "2024-03-25T11:36:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "moh-hassan",
                                           "body":  "Can this feature to be part of NET9",
                                           "updatedAt":  "2024-03-25T11:36:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PA0mz",
                                           "createdAt":  "2024-10-08T09:37:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xecrets",
                                           "body":  "The suggested interim solution https://github.com/mono/mono.posix doesn\u0027t support Windows, while #50527 does. It would be very nice with a .NET API supported across all platforms, within the limitation of the respective platform obviously. But at least the equivalent of SIGINT is possible to generate on Windows, and it should be supported if this issue does get implemented. Currently platform specific code with various kludges are necessary to achieve this, similar to https://github.com/devlooped/dotnet-stop . It would be nice to have a simple supported .NET API for this!",
                                           "updatedAt":  "2024-10-08T09:37:55Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Expose API to send signals",
        "labels":  [
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60191",
        "createdAt":  "2021-10-08T17:45:16Z",
        "number":  60191,
        "author":  "CarnaViire",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-10-16T00:39:49Z",
        "body":  "`StartInfo_NotepadWithContent` and `StartInfo_NotepadWithContent_withArgumentList` fail with the following\r\n```\r\nAssert.Equal() Failure\r\n          ↓ (pos 0)\r\nExpected: notepad\r\nActual:   Notepad\r\n          ↑ (pos 0)\r\n```\r\n\r\nDate | Count | Branch \r\n-- | -- | --\r\n4 | 2021-10-08 | PR #60173\r\n4 | 2021-10-07 | PR #59925\r\n4 | 2021-10-01 | PR #59475\r\n4 | 2021-09-28 | PR #59712\r\n4 | 2021-09-21 | PR #59204\r\n4 | 2021-09-16 | PR #51736\r\n4 | 2021-09-14 | PR #57634\r\n4 | 2021-09-13 | PR #58922\r\n8 | 2021-09-10 | PR #58922, PR #57324",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOFDplg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44UOmW",
                                           "createdAt":  "2021-10-16T00:39:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "```diff\r\n--- a/src/libraries/System.Diagnostics.Process/tests/ProcessStartInfoTests.cs\r\n+++ b/src/libraries/System.Diagnostics.Process/tests/ProcessStartInfoTests.cs\r\n@@ -1318,7 +1318,7 @@ private void VerifyNotepadMainWindowTitle(Process process, string filename)\r\n             string expected = Path.GetFileNameWithoutExtension(filename);\r\n\r\n             process.WaitForInputIdle(); // Give the file a chance to load\r\n-            Assert.Equal(\"notepad\", process.ProcessName);\r\n+            Assert.Equal(\"notepad\", process.ProcessName, ignoreCase: true);\r\n\r\n             // Notepad calls CreateWindowEx with pWindowName of empty string, then calls SetWindowTextW\r\n             // with \"Untitled - Notepad\" then finally if you\u0027re opening a file, calls SetWindowTextW\r\n```\r\nwhile this will fix the assertion failure. As to the reason for the difference, it could be:\r\n\r\n* it is spelled as `Notepad.exe` under system32 on that particular machine or generally on that version of windows?\r\n* the  underlying Win32 API, `NtQuerySystemInformation`\u0027s [documentation](https://docs.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntquerysysteminformation) seem to provide no version-to-version compatibility guarantees:\r\n    \u003e NtQuerySystemInformation may be altered or unavailable in future versions of Windows. Applications should use the alternate functions listed in this topic.\r\n\r\n    #59672 is changing ProcessName to use `QueryFullProcessImageName` which may (or may not) return the lower case on Windows 11. If someone with rights can run outerloop pipeline on that PR, we will find out.\r\n* something else?",
                                           "updatedAt":  "2021-10-16T00:39:49Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Test failures: System.Diagnostics.Tests.ProcessStartInfoTests on windows.11.amd64.clientpre",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63532",
        "createdAt":  "2022-01-08T07:27:09Z",
        "number":  63532,
        "author":  "GSPP",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-01-10T15:38:57Z",
        "body":  "Currently, `Process.Kill` sets the exit code to `-1`. It would be useful to be able to customize the exit code.\r\n\r\nIn my use case, there is a child process running custom code. The child is using error codes to signal outcomes to the parent. I\u0027d like termination to use a number that fits in well with the existing scheme of error codes.\r\n\r\n```diff\r\npublic class Process\r\n{\r\n+    public void Kill(int exitCode);\r\n+    public void Kill(bool entireProcessTree, int exitCode);\r\n}\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPCQu4g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc48E1wY",
                                           "createdAt":  "2022-01-08T07:27:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCurrently, `Process.Kill` sets the exit code to `-1`. It would be useful to be able to customize the exit code.\r\n\r\nIn my use case, there is a child process running custom code. The child is using error codes to signal outcomes to the parent. I\u0027d like termination to use a number that fits in well with the existing scheme of error codes.\r\n\r\n```diff\r\npublic class Process\r\n{\r\n+    public void Kill(int exitCode);\r\n+    public void Kill(bool entireProcessTree, int exitCode);\r\n}\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eGSPP\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-08T07:27:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48FeKM",
                                           "createdAt":  "2022-01-08T17:10:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e It would be useful to be able to customize the exit code.\r\n\r\nDo the non-Windows OSes have a way to customize the exit code when the process is killed? Would this be a Windows-specific API?",
                                           "updatedAt":  "2022-01-08T17:10:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48F65c",
                                           "createdAt":  "2022-01-08T23:48:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "quixoticaxis",
                                           "body":  "\u003e \u003e It would be useful to be able to customize the exit code.\n\u003e \n\u003e Do the non-Windows OSes have a way to customize the exit code when the process is killed? Would this be a Windows-specific API?\n\nAs far as I know, Linux does not, it\u0027s up to the process being killed, and `kill` does not report it in any way. As far as I understand, there are also no guaranrees that the process is actually killed at the time of utility return. I may be wrong though.\n\nUpdate: the current implementation uses `Interop.Sys.Signals.SIGKILL`. I could not find documentation whether the exit code is standartised, but it is definitely not customizable from the signal issuer side.",
                                           "updatedAt":  "2022-01-09T16:18:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Im5L",
                                           "createdAt":  "2022-01-10T13:47:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e As far as I know, Linux does not\r\n\r\n@tmds is that true?",
                                           "updatedAt":  "2022-01-10T13:47:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48JC7i",
                                           "createdAt":  "2022-01-10T15:38:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "Yes, on Linux the process itself determines the exit code.\r\n\r\nIf the process gets terminated by an unhandled signal, the signal number that killed the process can be retrieved.\r\n\r\nBy convention, `bash` (and others) map the signal numbers as `exit code = 128 + signal`.\r\n.NET does the same thing:\r\n\r\nhttps://github.com/dotnet/runtime/blob/c1426130b7727f17abc2dc281190de891d08efe9/src/native/libs/System.Native/pal_process.c#L725-L729",
                                           "updatedAt":  "2022-01-10T15:38:56Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Allow Process.Kill to specify the exit code",
        "labels":  [
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64042",
        "createdAt":  "2022-01-20T13:50:36Z",
        "number":  64042,
        "author":  "kevingosse",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-03-16T00:05:31Z",
        "body":  "For a diagnostic tool I\u0027m writing, I need to check if a target process has loaded a given assembly. To do so, I retrieve the `Process` instance, then check the contents of `Process.Modules`. This works on Windows, but on Linux I can\u0027t find the assembly even though it\u0027s definitely loaded in the target process.\r\n\r\nAfter digging further, it seems that the module is listed in `/proc/\u003cpid\u003e/maps` as expected, but it has the following permissions: \r\n```\r\n7f98d5dc2000-7f98d5fd1000 r--s 00000000 08:40 127037                     /project/tracer/bin/tracer-home/netcoreapp3.1/Datadog.Trace.dll\r\n```\r\n\r\n`Interop.procfs.ParseMapsModulesCore` only adds the module if it has the \u0027execute\u0027 permission:\r\n\r\nhttps://github.com/dotnet/runtime/blob/fd33b9eac6f259ef731e0204bcd2aebd534b8ddc/src/libraries/Common/src/Interop/Linux/procfs/Interop.ProcFsStat.ParseMapModules.cs#L85-L93\r\n\r\nIt looks like the execution flag is not set when the assembly is loaded at runtime (for instance with `Assembly.LoadFrom` or `AssemblyLoadContext.LoadFromAssemblyPath`), and therefore it won\u0027t be listed in the modules.\r\n\r\nI\u0027m not sure what to make of that, this behavior has surprised me so I wanted to bring it to your attention. On my side I\u0027ll just manually parse the maps file.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPnEEzg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc48pitB",
                                           "createdAt":  "2022-01-20T13:50:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFor a diagnostic tool I\u0027m writing, I need to check if a target process has loaded a given assembly. To do so, I retrieve the `Process` instance, then check the contents of `Process.Modules`. This works on Windows, but on Linux I can\u0027t find the assembly even though it\u0027s definitely loaded in the target process.\r\n\r\nAfter digging further, it seems that the module is listed in `/proc/\u003cpid\u003e/maps` as expected, but it has the following permissions: \r\n```\r\n7f98d5dc2000-7f98d5fd1000 r--s 00000000 08:40 127037                     /project/tracer/bin/tracer-home/netcoreapp3.1/Datadog.Trace.dll\r\n```\r\n\r\n`Interop.procfs.ParseMapsModulesCore` only adds the module if it has the \u0027execute\u0027 permission:\r\n\r\nhttps://github.com/dotnet/runtime/blob/fd33b9eac6f259ef731e0204bcd2aebd534b8ddc/src/libraries/Common/src/Interop/Linux/procfs/Interop.ProcFsStat.ParseMapModules.cs#L85-L93\r\n\r\nIt looks like the execution flag is not set when the assembly is loaded at runtime (with for instance with `Assembly.LoadFrom` or `AssemblyLoadContext.LoadFromAssemblyPath`), and therefore it won\u0027t be listed in the modules.\r\n\r\nI\u0027m not sure what to make of that, this behavior has surprised me so I wanted to bring it to your attention. On my side I\u0027ll just manually parse the maps file.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekevingosse\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-20T13:50:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48pwwH",
                                           "createdAt":  "2022-01-20T14:43:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Dup of https://github.com/dotnet/runtime/issues/24768 ?",
                                           "updatedAt":  "2022-01-20T14:43:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48pwzE",
                                           "createdAt":  "2022-01-20T14:43:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFor a diagnostic tool I\u0027m writing, I need to check if a target process has loaded a given assembly. To do so, I retrieve the `Process` instance, then check the contents of `Process.Modules`. This works on Windows, but on Linux I can\u0027t find the assembly even though it\u0027s definitely loaded in the target process.\r\n\r\nAfter digging further, it seems that the module is listed in `/proc/\u003cpid\u003e/maps` as expected, but it has the following permissions: \r\n```\r\n7f98d5dc2000-7f98d5fd1000 r--s 00000000 08:40 127037                     /project/tracer/bin/tracer-home/netcoreapp3.1/Datadog.Trace.dll\r\n```\r\n\r\n`Interop.procfs.ParseMapsModulesCore` only adds the module if it has the \u0027execute\u0027 permission:\r\n\r\nhttps://github.com/dotnet/runtime/blob/fd33b9eac6f259ef731e0204bcd2aebd534b8ddc/src/libraries/Common/src/Interop/Linux/procfs/Interop.ProcFsStat.ParseMapModules.cs#L85-L93\r\n\r\nIt looks like the execution flag is not set when the assembly is loaded at runtime (for instance with `Assembly.LoadFrom` or `AssemblyLoadContext.LoadFromAssemblyPath`), and therefore it won\u0027t be listed in the modules.\r\n\r\nI\u0027m not sure what to make of that, this behavior has surprised me so I wanted to bring it to your attention. On my side I\u0027ll just manually parse the maps file.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekevingosse\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-20T14:43:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48p2Hv",
                                           "createdAt":  "2022-01-20T15:06:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevingosse",
                                           "body":  "\u003e Dup of #24768 ?\r\n\r\nThe entry point is listed in the modules as far as I can tell, so I think it\u0027s a separate problem 🤔 \r\nThough #24768 is pretty old, so maybe it was hitting the same issue when applications were started with `dotnet app.dll` and therefore the entrypoint was loaded dynamically.",
                                           "updatedAt":  "2022-01-20T15:09:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48p3zN",
                                           "createdAt":  "2022-01-20T15:13:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e it was hitting the same issue when applications were started with dotnet app.dll and therefore the entrypoint was loaded dynamically.\r\n\r\nI am pretty sure that it was the case.",
                                           "updatedAt":  "2022-01-20T15:13:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48p6u2",
                                           "createdAt":  "2022-01-20T15:25:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevingosse",
                                           "body":  "Makes sense. Do you want me to close this issue and move the information to the other one?",
                                           "updatedAt":  "2022-01-20T15:25:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48qput",
                                           "createdAt":  "2022-01-20T18:49:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "cc @tmds",
                                           "updatedAt":  "2022-01-20T18:49:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48sjaC",
                                           "createdAt":  "2022-01-21T09:03:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCK8XZg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-01-21T09:44:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e // we only add module to collection, if at least one row had \u0027r\u0027 and \u0027x\u0027 set.\r\n\r\nI guess an assembly that has no native code won\u0027t map with the \u0027x\u0027 bit set, and an assembly that has native code (e.g. cross-genned) will?\r\n\r\nWe could consider to include all files that end with `.dll` even if they don\u0027t have the \u0027x\u0027 set.\r\n\r\ncc @janvorli ",
                                           "updatedAt":  "2022-01-21T09:03:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-FKXJ",
                                           "createdAt":  "2022-02-16T14:20:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e We could consider to include all files that end with .dll even if they don\u0027t have the \u0027x\u0027 set.\r\n\r\n@janvorli @jkotas what do you think?",
                                           "updatedAt":  "2022-02-16T14:20:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-GfC9",
                                           "createdAt":  "2022-02-16T17:06:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCPINkA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-02-17T09:29:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The current implementation approach is always going to be unreliable on non-Windows for listing managed modules loaded into the process. I do not have an opinion on whether it is better to have more false positives or false negatives. Resolving this issue as won\u0027t fix would be fine with me as well.\r\n\r\nThe reliable way to get accurate list of managed modules loaded into the process would be via tracing/eventpipe or via debugger apis. It feels too heavy weight to take dependency on those in core framework to implement this API. We have separate libraries for that (e.g. https://github.com/microsoft/clrmd).",
                                           "updatedAt":  "2022-02-16T17:06:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-cQTO",
                                           "createdAt":  "2022-02-22T09:29:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e I do not have an opinion on whether it is better to have more false positives or false negatives.\r\n\r\nBecause most apps don\u0027t map dlls themselves, we will mostly be adding valid dlls.\r\nSo I have a slight preference for including them.",
                                           "updatedAt":  "2022-02-22T09:29:24Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Process.Modules does not list dynamically loaded assemblies on Linux",
        "labels":  [
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64742",
        "createdAt":  "2022-02-03T12:37:57Z",
        "number":  64742,
        "author":  "stinos",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-18T14:34:48Z",
        "body":  "### Description\r\n\r\nThe `StartTime` from a `Process` instance seems to use another timebase than the rest of the date/time-related functions, i.e. `DateTime.Now`. Tried on different machines and the StartTime seems to be too early, ranging from a couple to more than 100mSec depending on platform.\r\n\r\n### Reproduction Steps\r\n\r\nFirst encountered this in Powershell on WSL, but it does the same when running on hardware.\r\n\r\nTest script for Powershell:\r\n```\r\n$t1 = [System.DateTime]::Now\r\n$pipeline = ({head -n 1}).GetSteppablePipeline($MyInvocation.CommandOrigin)\r\n$pipeline.Begin($true)\r\nStart-Sleep -Milliseconds 500\r\n$t3 = (Get-Process head).StartTime\r\nWrite-Output \"t1 = $($t1.Second).$($t1.MilliSecond), StartTime = $($t3.Second).$($t3.MilliSecond), $($process.StartTime -ge $t2)\"\r\n$pipeline.Process(\u0027foo\u0027)\r\n$pipeline.End()\r\n```\r\nsample output on WSL 1 (`Linux version 4.4.0-19041-Microsoft (Microsoft@Microsoft.com) (gcc version 5.4.0 (GCC) ) #1237-Microsoft Sat Sep 11 14:32:00 PST 2021`) running with Powershell Core v7.2.1:\r\n```\r\n\u003e pwsh ./CheckPsDateTime.ps1\r\nt1 = 23.361, StartTime = 22.610, False\r\nfoo\r\n```\r\n\r\nTried the same on actual hardware (`Linux version 5.4.0-77-generic (buildd@lgw01-amd64-021) (gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)) #86~18.04.1-Ubuntu SMP Fri Jun 18 01:23:22 UTC 2021)` but with dotnet sdk 6.0.101, installed from snap, with this code in Program.cs created by `dotnet new`:\r\n```\r\nvar t1 = System.DateTime.Now;\r\nvar proc = System.Diagnostics.Process.Start(\"head\");\r\nvar t2 = proc.StartTime;\r\nConsole.WriteLine($\"{t1.Second}.{t1.Millisecond} vs {t2.Second}.{t2.Millisecond}\");\r\n```\r\nsample output :\r\n```\r\n\u003e /snap/dotnet-sdk/current/dotnet run\r\n6.770 vs 7.760\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nProcess StartTime should use the same timebase as the other timing-related functions.\r\n\r\n### Actual behavior\r\n\r\nProcess StartTime returns values which are too small (or DateTime.Now returns values too large, hard to tell).\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nSee Reproduction Steps above\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPVSAlA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49VICU",
                                           "createdAt":  "2022-02-03T12:38:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThe `StartTime` from a `Process` instance seems to use another timebase than the rest of the date/time-related functions, i.e. `DateTime.Now`. Tried on different machines and the StartTime seems to be too early, ranging from a couple to more than 100mSec depending on platform.\n\n### Reproduction Steps\n\nFirst encountered this in Powershell on WSL, but it does the same when running on hardware.\r\n\r\nTest script for Powershell:\r\n```\r\n$t1 = [System.DateTime]::Now\r\n$pipeline = ({head -n 1}).GetSteppablePipeline($MyInvocation.CommandOrigin)\r\n$pipeline.Begin($true)\r\nStart-Sleep -Milliseconds 500\r\n$t3 = (Get-Process head).StartTime\r\nWrite-Output \"t1 = $($t1.Second).$($t1.MilliSecond), StartTime = $($t3.Second).$($t3.MilliSecond), $($process.StartTime -ge $t2)\"\r\n$pipeline.Process(\u0027foo\u0027)\r\n$pipeline.End()\r\n```\r\nsample output on WSL (Linux version 4.4.0-19041-Microsoft (Microsoft@Microsoft.com) (gcc version 5.4.0 (GCC) ) #1237-Microsoft Sat Sep 11 14:32:00 PST 2021) running with Powershell Core v7.2.1:\r\n```\r\n\u003e pwsh ./CheckPsDateTime.ps1\r\nt1 = 23.361, StartTime = 22.610, False\r\nfoo\r\n```\r\n\r\nTried the same on actual hardware (`Linux version 5.4.0-77-generic (buildd@lgw01-amd64-021) (gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)) #86~18.04.1-Ubuntu SMP Fri Jun 18 01:23:22 UTC 2021)` but with dotnet sdk 6.0.101, installed from snap, with this code in Program.cs created by `dotnet new`:\r\n```\r\nvar t1 = System.DateTime.Now;\r\nvar proc = System.Diagnostics.Process.Start(\"head\");\r\nvar t2 = proc.StartTime;\r\nConsole.WriteLine($\"{t1.Second}.{t1.Millisecond} vs {t2.Second}.{t2.Millisecond}\");\r\n```\r\nsample output :\r\n```\r\n\u003e /snap/dotnet-sdk/current/dotnet run\r\n6.770 vs 7.760\r\n```\r\n\n\n### Expected behavior\n\nProcess StartTime should use the same timebase as the other timing-related functions.\n\n### Actual behavior\n\nProcess StartTime returns values which are too small (or DateTime.Now returns values too large, hard to tell).\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nSee Reproduction Steps above\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estinos\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-03T12:38:02Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Linux Process.StartTime seems to use a different timebase than System.DataTime.Now and others",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "os-linux",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66417",
        "createdAt":  "2022-02-11T17:56:16Z",
        "number":  66417,
        "author":  "speed2048",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-09T18:56:34Z",
        "body":  "\r\nWindows 11 SDK has support for setting a process to use the efficiency cores for Windows 11 on 12th Generation Intel Core i7 processors \r\n\r\nhttps://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprocessinformation\r\n\r\nIs it possible for .net to set a priority of process to use the execution cores?\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nAdd a enumerator value to ProcessPriorityClass, BasePriority   that tells the scheduler to use efficiency  cores if available.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnb48Lw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4_Ypm6",
                                           "createdAt":  "2022-02-11T17:56:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label.",
                                           "updatedAt":  "2022-02-11T17:56:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_Ypne",
                                           "createdAt":  "2022-03-09T22:15:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\r\nWindows 11 SDK has support for setting a process to use the efficiency cores for Windows 11 on 12th Generation Intel Core i7 processors \r\n\r\nhttps://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprocessinformation\r\n\r\nIs it possible for .net to set a priority of process to use the execution cores?\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nAdd a enumerator value to ProcessPriorityClass, BasePriority   that tells the scheduler to use efficiency  cores if available.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003espeed2048\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003edsplaisted\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-09T22:15:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_lJFt",
                                           "createdAt":  "2022-03-14T12:00:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@tmds does Linux provide any equivalent of this API?",
                                           "updatedAt":  "2022-03-14T12:00:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HiycE",
                                           "createdAt":  "2022-07-30T22:05:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "veikkoeeva",
                                           "body":  "I\u0027ll go ahead and cross-reference a related discussion from https://github.com/microsoft/WindowsAppSDK/discussions/2525. I\u0027m fairly sure this pops up on Maui land too (even if the APIs were Windows specific to start with), especially since one selling point for native is better integration and resources.\r\n\r\nThere maybe is something on Linux and MacOS, but in the meanwhile example of one library readily offering a .NET wrapper over Win32 is at https://github.com/dahall/Vanara/blob/f28c7c3d8b21d58a603b3077bcd432d8b811bb45/UnitTests/PInvoke/Kernel32/ProcessThreadsTests.cs#L477.",
                                           "updatedAt":  "2022-07-30T22:40:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hiz56",
                                           "createdAt":  "2022-07-30T22:50:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "speed2048",
                                           "body":  "Thank you for the update. I have a question, where can I post a issue with a Win32API function?. It is call GetProcessInformation and trying to query the current process power throttling state and is returning error code 87 - The parameter is incorrect. I can provide c++ ..\r\n",
                                           "updatedAt":  "2022-07-31T00:44:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hkveg",
                                           "createdAt":  "2022-08-01T07:21:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@speed2048 \"The parameter is incorrect.\" typically means that the input for given method does not satisfy the method requirements (example: the memory is not aligned when it needs to be) or that it\u0027s simply invalid (wrong value for enum, wrong size etc) You can share the repro here and I can take a look. ",
                                           "updatedAt":  "2022-08-01T07:21:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HnfrX",
                                           "createdAt":  "2022-08-01T18:05:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "speed2048",
                                           "body":  "Hi Adam,\r\nHere is the c++ code that is causing error code 87.\r\n\r\n\r\n#include  iostream     /* put \u003c\u003e around iostream github blanks out the iostream   \r\n#include \u003cwindows.h\u003e\r\n#include \u003cwinnt.h\u003e\r\n\r\nint main()\r\n{\r\n    PROCESS_POWER_THROTTLING_STATE state;\r\n    RtlZeroMemory(\u0026state, sizeof(state));\r\n    state.Version = PROCESS_POWER_THROTTLING_CURRENT_VERSION;\r\n\r\n    if (GetProcessInformation(GetCurrentProcess(), PROCESS_INFORMATION_CLASS::ProcessPowerThrottling, \u0026state, sizeof(state)))\r\n    {\r\n        std::cout \u003c\u003c state.Version \u003c\u003c \" : \" \u003c\u003c state.StateMask \u003c\u003c \"\\n\";\r\n    }\r\n    else\r\n    {\r\n               std::cout \u003c\u003c GetLastError() \u003c\u003c \"\\n\";\r\n       }\r\n}",
                                           "updatedAt":  "2022-08-04T19:28:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K7Y1o",
                                           "createdAt":  "2022-09-24T23:27:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCsymPQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-09-26T07:51:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "speed2048",
                                           "body":  "HI Adam,\r\n\r\nThis is fixed in Windows 11 22H2. Thanks  if you had a hand in fixing this..",
                                           "updatedAt":  "2022-09-24T23:27:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Q1_6R",
                                           "createdAt":  "2022-12-17T17:04:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mann1x",
                                           "body":  "@adamsitnik \r\n\r\nJust wanted to chime in about having the same issue with the SetProcessInformation on Windows 10 22H2 (couldn\u0027t test on Windows 11).\r\n\r\nFor PROCESS_POWER_THROTTLING_STATE, setting ControlMask on PROCESS_POWER_THROTTLING_EXECUTION_SPEED works fine but PROCESS_POWER_THROTTLING_IGNORE_TIMER_RESOLUTION gives always Error 87.\r\n\r\nThis basically prevents any custom timer resolution.",
                                           "updatedAt":  "2022-12-17T17:04:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6duFXW",
                                           "createdAt":  "2025-02-09T07:15:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "@tannergooding -- I\u0027m curious what you think about this proposal. We\u0027re not seeing a lot of interest in the proposal from what I can tell; do you think this is something we would pursue? If not, we could go ahead and close it as not planned.",
                                           "updatedAt":  "2025-02-09T07:15:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6duIu6",
                                           "createdAt":  "2025-02-09T08:06:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFwKnQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2025-02-09T18:49:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mann1x",
                                           "body":  "@jeffhandley \n\nGuess for the proposal you mean the original question, ability to schedule on the efficiency cores.\n\nWhile maybe not wildly requested it\u0027d be an highly welcome and helpful feature for anybody running background tasks.\nLike apps which sits in the system tray or services, that doesn\u0027t need to execute on high performance cores and should not raise power consumption of the system.\nAt the same time would be also helpful to not interfere with applications that would benefit from the exclusive use of high power cores, like games.",
                                           "updatedAt":  "2025-02-09T08:06:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dvgQk",
                                           "createdAt":  "2025-02-09T18:43:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFwKmg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2025-02-09T18:49:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@jeffhandley, I\u0027m not sure about this proposal in particular, which is not in an \"actionable\" state as is. That is, it doesn\u0027t follow the API proposal requirements such that we could actually take this for review. Someone needs to sit down and consider the API design and how it might look more broadly for .NET\n\nHowever, I do think .NET more broadly should consider exposing some type of affinization support for tasks/threads that allows us to scale better to modern processors which may have more cores and heterogenous setups (whether in the cores themselves or the supported cache sizes, etc).\n\nMore generally I think some \"soft affinitization\" APIs are warranted and likely easy to expose. That is by \"soft\" it means APIs which may not guarantee a behavior but which rather give guidance to the runtime or Operating System about the type of work that is likely to help with the automatic scheduling considerations. Such considerations can be important to cloud, AI, gaming, and other scenarios (see for example: https://www.intel.com/content/www/us/en/developer/articles/guide/12th-gen-intel-core-processor-gamedev-guide.html)\n\nThis would likely entail new API surface that allows specifying things like hinting:\n* the relative prioritization compared to other threads, allowing less important work to be explicit \"background\"\n* whether a task should prefer performance or energy efficiency\n\nI don\u0027t think we strictly need to start with any \"hard\" affinitization APIs, such as saying that a CPU can only run on a specific CPU core or even soft affinitization APIs that allow specifying specific cores. These can certainly be useful, but they are more fine tuned than the broader concepts which are more along the lines of `TaskCreationOptions.LongRunning` or `TaskCreationOptions.PreferFairness`\n\nCorrespondingly, what I think .NET should expose would be along the lines of `TaskCreationOptions.PreferPerformance`, `TaskCreationOptions.PreferEfficiency`, `TaskCreationOptions.PreferBackground`, etc. The task scheduler and default thread pool would then be updated to be \"aware\" of these options and use the OS APIs to help affinitize the used threads as appropriate.",
                                           "updatedAt":  "2025-02-09T18:43:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dvjwv",
                                           "createdAt":  "2025-02-09T18:55:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Thanks, folks. I\u0027ll tag this as needing work to turn it into an actionable API proposal, along with the [help wanted](https://github.com/dotnet/runtime/labels/help%20wanted) label, and leave it open in the backlog.\n\nWe would need to see a prototype implementation along with the formal API proposal in order to move this into API Review.",
                                           "updatedAt":  "2025-02-09T18:55:46Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Set process priority to use  efficiency cores.",
        "labels":  [
                       "api-needs-work",
                       "area-System.Diagnostics.Process",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67506",
        "createdAt":  "2022-04-03T16:34:28Z",
        "number":  67506,
        "author":  "DanPristupov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-20T23:11:59Z",
        "body":  "### Description\r\n\r\nStarting and running processes as separate tasks increases the execution time up to 10 times.\r\n\r\n### Configuration\r\n\r\n.Net 6.0\r\nSo far, I\u0027ve reproduced the problem on both Intel and M1 macs.\r\n\r\nThe following code runs `ls`, but it can be any other process.\r\n\r\n``` csharp\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nConsole.WriteLine(\"Start processes sync\");\r\nRun(16, \"/bin/ls\", async: false);\r\n\r\nConsole.WriteLine(\"Start processes async\");\r\nRun(16, \"/bin/ls\", async: true);\r\n\r\nConsole.WriteLine(\"Done!\");\r\n\r\n\r\nvoid Run(int count, string fileName, bool async)\r\n{\r\n    if (async)\r\n    {\r\n        var tasks = new Task[count];\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            var task = new Task(() =\u003e {\r\n                RunProcess(fileName);\r\n            });\r\n            tasks[i] = task;\r\n            task.Start();\r\n        }\r\n        Task.WaitAll(tasks);\r\n    }\r\n    else\r\n    {\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            RunProcess(fileName);\r\n        }\r\n    }\r\n}\r\n\r\nvoid RunProcess(string fileName)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n\r\n    using (var process = new Process())\r\n    {\r\n        process.StartInfo = new ProcessStartInfo\r\n        {\r\n            FileName = fileName,\r\n            UseShellExecute = false,\r\n            RedirectStandardOutput = true,\r\n            ErrorDialog = false,\r\n            CreateNoWindow = true,\r\n            RedirectStandardInput = true,\r\n            StandardOutputEncoding = Encoding.UTF8,\r\n        };\r\n\r\n        process.Start();\r\n\r\n        var output = process.StandardOutput.ReadToEnd();\r\n\r\n        process.WaitForExit();\r\n    }\r\n    Console.WriteLine($\"{fileName}: {stopWatch.Elapsed.TotalMilliseconds}\");\r\n}\r\n```\r\n\r\n### Data\r\n\r\n```\r\ndotnet run --release\r\nStart processes sync\r\n/bin/ls: 103.4258\r\n/bin/ls: 32.4446\r\n/bin/ls: 31.3135\r\n/bin/ls: 26.2724\r\n/bin/ls: 32.4081\r\n/bin/ls: 28.5405\r\n/bin/ls: 51.8288\r\n/bin/ls: 27.8595\r\n/bin/ls: 26.0885\r\n/bin/ls: 31.0516\r\n/bin/ls: 29.5644\r\n/bin/ls: 28.7161\r\n/bin/ls: 28.6573\r\n/bin/ls: 25.2447\r\n/bin/ls: 27.5642\r\n/bin/ls: 28.2451\r\nStart processes async\r\n/bin/ls: 179.849\r\n/bin/ls: 179.9062\r\n/bin/ls: 179.9018\r\n/bin/ls: 179.9322\r\n/bin/ls: 179.7889\r\n/bin/ls: 179.818\r\n/bin/ls: 179.9126\r\n/bin/ls: 255.7262\r\n/bin/ls: 255.3477\r\n/bin/ls: 256.478\r\n/bin/ls: 152.9311\r\n/bin/ls: 152.9212\r\n/bin/ls: 152.8825\r\n/bin/ls: 152.9134\r\n/bin/ls: 152.9793\r\n/bin/ls: 153.5875\r\nDone!\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOU2P3Yg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5AyNRe",
                                           "createdAt":  "2022-04-03T16:34:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nStarting and running processes as separate tasks increases the execution time up to 10 times.\r\n\r\n### Configuration\r\n\r\n.Net 6.0\r\nSo far, I\u0027ve reproduced the problem on both Intel and M1 macs.\r\n\r\nThe following code runs `ls`, but it can be any other process.\r\n\r\n``` csharp\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nConsole.WriteLine(\"Start processes sync\");\r\nRun(16, \"/bin/ls\", async: false);\r\n\r\nConsole.WriteLine(\"Start processes async\");\r\nRun(16, \"/bin/ls\", async: true);\r\n\r\nConsole.WriteLine(\"Done!\");\r\n\r\n\r\nvoid Run(int count, string fileName, bool async)\r\n{\r\n    if (async)\r\n    {\r\n        var tasks = new Task[count];\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            var task = new Task(() =\u003e {\r\n                RunProcess(fileName);\r\n            });\r\n            tasks[i] = task;\r\n            task.Start();\r\n        }\r\n        Task.WaitAll(tasks);\r\n    }\r\n    else\r\n    {\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            RunProcess(fileName);\r\n        }\r\n    }\r\n}\r\n\r\nvoid RunProcess(string fileName)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n\r\n    using (var process = new Process())\r\n    {\r\n        process.StartInfo = new ProcessStartInfo\r\n        {\r\n            FileName = fileName,\r\n            UseShellExecute = false,\r\n            RedirectStandardOutput = true,\r\n            ErrorDialog = false,\r\n            CreateNoWindow = true,\r\n            RedirectStandardInput = true,\r\n            StandardOutputEncoding = Encoding.UTF8,\r\n        };\r\n\r\n        process.Start();\r\n\r\n        var output = process.StandardOutput.ReadToEnd();\r\n\r\n        process.WaitForExit();\r\n    }\r\n    Console.WriteLine($\"{fileName}: {stopWatch.Elapsed.TotalMilliseconds}\");\r\n}\r\n```\r\n\r\n### Data\r\n\r\n```\r\ndotnet run --release\r\nStart processes sync\r\n/bin/ls: 103.4258\r\n/bin/ls: 32.4446\r\n/bin/ls: 31.3135\r\n/bin/ls: 26.2724\r\n/bin/ls: 32.4081\r\n/bin/ls: 28.5405\r\n/bin/ls: 51.8288\r\n/bin/ls: 27.8595\r\n/bin/ls: 26.0885\r\n/bin/ls: 31.0516\r\n/bin/ls: 29.5644\r\n/bin/ls: 28.7161\r\n/bin/ls: 28.6573\r\n/bin/ls: 25.2447\r\n/bin/ls: 27.5642\r\n/bin/ls: 28.2451\r\nStart processes async\r\n/bin/ls: 179.849\r\n/bin/ls: 179.9062\r\n/bin/ls: 179.9018\r\n/bin/ls: 179.9322\r\n/bin/ls: 179.7889\r\n/bin/ls: 179.818\r\n/bin/ls: 179.9126\r\n/bin/ls: 255.7262\r\n/bin/ls: 255.3477\r\n/bin/ls: 256.478\r\n/bin/ls: 152.9311\r\n/bin/ls: 152.9212\r\n/bin/ls: 152.8825\r\n/bin/ls: 152.9134\r\n/bin/ls: 152.9793\r\n/bin/ls: 153.5875\r\nDone!\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDanPristupov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-03T16:34:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A2iah",
                                           "createdAt":  "2022-04-04T21:39:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChrML",
                                           "body":  "What happens if you use threads instead?\r\n\r\nI see there\u0027s a difference in the task vs non-task variant in that the async example starts all processes simultaneously (or as many as the threadpool will allow). While the sync variant starts them one by one sequentially. Meaning the problem could be anywhere, perhaps not related to tasks at all.\r\n\r\nWhat happens if you modify the code to wait for each task one by one?",
                                           "updatedAt":  "2022-04-04T21:39:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A2t4i",
                                           "createdAt":  "2022-04-04T22:48:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I ran this and consistently the child processes are slower -- even if I ensure the `ls` takes extra time by passing in `-R /home/`\r\n\r\nHow many cores do you have? I am guessing part of the issue is the the threadpool assumes you are giving it CPU bound work and will not allow more active threads than roughly the number of cores (or whatever its starting heuristic is). If launching and running `ls` is in fact mostly IO bound then this is a bad strategy.\r\n\r\nStepping back -- what are you trying to achieve?",
                                           "updatedAt":  "2022-04-04T22:48:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A2t77",
                                           "createdAt":  "2022-04-04T22:48:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-threading-tasks\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nStarting and running processes as separate tasks increases the execution time up to 10 times.\r\n\r\n### Configuration\r\n\r\n.Net 6.0\r\nSo far, I\u0027ve reproduced the problem on both Intel and M1 macs.\r\n\r\nThe following code runs `ls`, but it can be any other process.\r\n\r\n``` csharp\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nConsole.WriteLine(\"Start processes sync\");\r\nRun(16, \"/bin/ls\", async: false);\r\n\r\nConsole.WriteLine(\"Start processes async\");\r\nRun(16, \"/bin/ls\", async: true);\r\n\r\nConsole.WriteLine(\"Done!\");\r\n\r\n\r\nvoid Run(int count, string fileName, bool async)\r\n{\r\n    if (async)\r\n    {\r\n        var tasks = new Task[count];\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            var task = new Task(() =\u003e {\r\n                RunProcess(fileName);\r\n            });\r\n            tasks[i] = task;\r\n            task.Start();\r\n        }\r\n        Task.WaitAll(tasks);\r\n    }\r\n    else\r\n    {\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            RunProcess(fileName);\r\n        }\r\n    }\r\n}\r\n\r\nvoid RunProcess(string fileName)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n\r\n    using (var process = new Process())\r\n    {\r\n        process.StartInfo = new ProcessStartInfo\r\n        {\r\n            FileName = fileName,\r\n            UseShellExecute = false,\r\n            RedirectStandardOutput = true,\r\n            ErrorDialog = false,\r\n            CreateNoWindow = true,\r\n            RedirectStandardInput = true,\r\n            StandardOutputEncoding = Encoding.UTF8,\r\n        };\r\n\r\n        process.Start();\r\n\r\n        var output = process.StandardOutput.ReadToEnd();\r\n\r\n        process.WaitForExit();\r\n    }\r\n    Console.WriteLine($\"{fileName}: {stopWatch.Elapsed.TotalMilliseconds}\");\r\n}\r\n```\r\n\r\n### Data\r\n\r\n```\r\ndotnet run --release\r\nStart processes sync\r\n/bin/ls: 103.4258\r\n/bin/ls: 32.4446\r\n/bin/ls: 31.3135\r\n/bin/ls: 26.2724\r\n/bin/ls: 32.4081\r\n/bin/ls: 28.5405\r\n/bin/ls: 51.8288\r\n/bin/ls: 27.8595\r\n/bin/ls: 26.0885\r\n/bin/ls: 31.0516\r\n/bin/ls: 29.5644\r\n/bin/ls: 28.7161\r\n/bin/ls: 28.6573\r\n/bin/ls: 25.2447\r\n/bin/ls: 27.5642\r\n/bin/ls: 28.2451\r\nStart processes async\r\n/bin/ls: 179.849\r\n/bin/ls: 179.9062\r\n/bin/ls: 179.9018\r\n/bin/ls: 179.9322\r\n/bin/ls: 179.7889\r\n/bin/ls: 179.818\r\n/bin/ls: 179.9126\r\n/bin/ls: 255.7262\r\n/bin/ls: 255.3477\r\n/bin/ls: 256.478\r\n/bin/ls: 152.9311\r\n/bin/ls: 152.9212\r\n/bin/ls: 152.8825\r\n/bin/ls: 152.9134\r\n/bin/ls: 152.9793\r\n/bin/ls: 153.5875\r\nDone!\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDanPristupov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Threading.Tasks`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-04T22:48:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A4FAl",
                                           "createdAt":  "2022-04-05T08:53:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DanPristupov",
                                           "body":  "Thank you for your response.\r\n\r\n@danmoseley \r\n\r\n\u003e Stepping back -- what are you trying to achieve?\r\n\r\nMy use case is pretty simple. GUI application runs about 10-15 relatively short (~30-50ms) git commands on start which makes a noticeable freeze. The operations are (seemingly) absolutely independent. Surprisingly, after running them as tasks, the execution time of a single process increases multiple times and the total time remains basically the same.\r\n\r\nWhile I was investigating the problem, I noticed, that the problem can be reproduced with any process, even with `/bin/ls` or `/bin/date`.\r\n\r\nA few notes:\r\n\r\n* My Intel MBP has 8 cores, the M1 Max machine has 10.\r\n\r\n* I tried to increase the threadpool size, but that doesn\u0027t help. (btw, threadpool overflow usually looks different: some tasks execute normally and some tasks don\u0027t start. Instead we see that **all** processes are waiting for something).\r\n\r\n* I also tried to run same operations first as warm up, but it makes no difference and I removed that code to make the example more simple.\r\n\r\n* in debug mode, the slow down is even more noticeable.\r\n\r\n@ChrML \r\n\r\n\u003e I see there\u0027s a difference in the task vs non-task variant in that the async example starts all processes simultaneously (or as many as the threadpool will allow)\r\n\u003e Meaning the problem could be anywhere, perhaps not related to tasks at all.\r\n\r\nIt seems to me the problem is in the Process class, but I don\u0027t have enough expertise to confirm that (or not).\r\n\r\n\u003e What happens if you use threads instead?\r\n\r\nI don\u0027t see any difference. Expand the following section for the details:\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eThreads instead of Tasks. Increased Thread Pool\u003c/summary\u003e\r\n  \r\n``` csharp\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nConsole.WriteLine(\"Start processes sync\");\r\nRun(16, \"/bin/ls\", async: false);\r\n\r\nConsole.WriteLine(\"Start processes async\");\r\nRun(16, \"/bin/ls\", async: true);\r\n\r\nConsole.WriteLine(\"Done!\");\r\n\r\n\r\nvoid Run(int count, string fileName, bool async)\r\n{\r\n    if (async)\r\n    {\r\n        ThreadPool.SetMinThreads(count + 10, count + 10);\r\n\r\n        var threads = new Thread[count];\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            threads[i] = new Thread(ThreadProc);\r\n        }\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            threads[i].Start(fileName);\r\n        }\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            threads[i].Join();\r\n        }\r\n    }\r\n    else\r\n    {\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            RunProcess(fileName);\r\n        }\r\n    }\r\n}\r\n\r\nvoid ThreadProc(object? obj)\r\n{\r\n    RunProcess((obj as string)!);\r\n}\r\n\r\nvoid RunProcess(string fileName)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n\r\n    using (var process = new Process())\r\n    {\r\n        process.StartInfo = new ProcessStartInfo\r\n        {\r\n            FileName = fileName,\r\n            UseShellExecute = false,\r\n            RedirectStandardOutput = true,\r\n            ErrorDialog = false,\r\n            CreateNoWindow = true,\r\n            RedirectStandardInput = true,\r\n            StandardOutputEncoding = Encoding.UTF8,\r\n        };\r\n\r\n        process.Start();\r\n\r\n        var output = process.StandardOutput.ReadToEnd();\r\n\r\n        process.WaitForExit();\r\n    }\r\n    Console.WriteLine($\"{fileName}: {stopWatch.Elapsed.TotalMilliseconds}\");\r\n}\r\n```\r\n\r\nResults:\r\n```\r\ndotnet run --release\r\nStart processes sync\r\n/bin/ls: 101.7049\r\n/bin/ls: 30.1693\r\n/bin/ls: 27.4484\r\n/bin/ls: 25.5091\r\n/bin/ls: 28.6075\r\n/bin/ls: 28.6546\r\n/bin/ls: 28.2078\r\n/bin/ls: 51.508\r\n/bin/ls: 24.8652\r\n/bin/ls: 28.4048\r\n/bin/ls: 25.6099\r\n/bin/ls: 24.9029\r\n/bin/ls: 25.7239\r\n/bin/ls: 26.31\r\n/bin/ls: 25.509\r\n/bin/ls: 24.9722\r\nStart processes async\r\n/bin/ls: 49.5739\r\n/bin/ls: 138.7723\r\n/bin/ls: 115.4152\r\n/bin/ls: 140.6831\r\n/bin/ls: 164.2454\r\n/bin/ls: 165.0776\r\n/bin/ls: 228.894\r\n/bin/ls: 185.5192\r\n/bin/ls: 300.4582\r\n/bin/ls: 185.252\r\n/bin/ls: 184.9457\r\n/bin/ls: 185.1772\r\n/bin/ls: 323.0178\r\n/bin/ls: 208.1066\r\n/bin/ls: 208.5017\r\n/bin/ls: 209.9374\r\nDone!\r\n\r\n```\r\n\u003c/details\u003e\r\n\r\n\r\n\r\n\u003e What happens if you modify the code to wait for each task one by one?\r\n\r\nThis way the processes are executed as fast as they should. Please expand the section below for the details:\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eWait for each thread\u003c/summary\u003e\r\n\r\n``` csharp\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nConsole.WriteLine(\"Start processes sync\");\r\nRun(16, \"/bin/ls\", async: false);\r\n\r\nConsole.WriteLine(\"Start processes async\");\r\nRun(16, \"/bin/ls\", async: true);\r\n\r\nConsole.WriteLine(\"Done!\");\r\n\r\n\r\nvoid Run(int count, string fileName, bool async)\r\n{\r\n    if (async)\r\n    {\r\n        ThreadPool.SetMinThreads(count + 10, count + 10);\r\n\r\n        var threads = new Thread[count];\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            threads[i] = new Thread(ThreadProc);\r\n        }\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            threads[i].Start(fileName);\r\n            threads[i].Join();\r\n        }\r\n    }\r\n    else\r\n    {\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            RunProcess(fileName);\r\n        }\r\n    }\r\n}\r\n\r\nvoid ThreadProc(object? obj)\r\n{\r\n    RunProcess((obj as string)!);\r\n}\r\n\r\nvoid RunProcess(string fileName)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n\r\n    using (var process = new Process())\r\n    {\r\n        process.StartInfo = new ProcessStartInfo\r\n        {\r\n            FileName = fileName,\r\n            UseShellExecute = false,\r\n            RedirectStandardOutput = true,\r\n            ErrorDialog = false,\r\n            CreateNoWindow = true,\r\n            RedirectStandardInput = true,\r\n            StandardOutputEncoding = Encoding.UTF8,\r\n        };\r\n\r\n        process.Start();\r\n\r\n        var output = process.StandardOutput.ReadToEnd();\r\n\r\n        process.WaitForExit();\r\n    }\r\n    Console.WriteLine($\"{fileName}: {stopWatch.Elapsed.TotalMilliseconds}\");\r\n}\r\n\r\n```\r\n\r\nResults:\r\n```\r\ndotnet run --release\r\nStart processes sync\r\n/bin/ls: 92.785\r\n/bin/ls: 21.1047\r\n/bin/ls: 18.0883\r\n/bin/ls: 19.9052\r\n/bin/ls: 18.3877\r\n/bin/ls: 20.165\r\n/bin/ls: 18.944\r\n/bin/ls: 19.4233\r\n/bin/ls: 18.045\r\n/bin/ls: 19.8717\r\n/bin/ls: 37.9207\r\n/bin/ls: 19.257\r\n/bin/ls: 18.8873\r\n/bin/ls: 21.1175\r\n/bin/ls: 21.6771\r\n/bin/ls: 19.7997\r\nStart processes async\r\n/bin/ls: 18.4013\r\n/bin/ls: 19.3454\r\n/bin/ls: 17.8117\r\n/bin/ls: 19.2499\r\n/bin/ls: 17.5375\r\n/bin/ls: 18.1795\r\n/bin/ls: 17.9971\r\n/bin/ls: 19.0148\r\n/bin/ls: 17.4245\r\n/bin/ls: 19.1555\r\n/bin/ls: 17.822\r\n/bin/ls: 19.2319\r\n/bin/ls: 18.1246\r\n/bin/ls: 19.3281\r\n/bin/ls: 19.161\r\n/bin/ls: 19.4298\r\nDone!\r\n\r\n\r\n```\r\n\u003c/details\u003e\r\n\r\n\r\nI think I\u0027ve answered all your questions. Please let me know if I missed something.",
                                           "updatedAt":  "2022-04-05T08:53:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A4auj",
                                           "createdAt":  "2022-04-05T10:25:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChrML",
                                           "body":  "Nice details, and research!\r\n\r\nBased on this, the slowdown should be related to the degree of parallelism and processes started simultaneously, and not tasks/threads by themselves. Since waiting for each task/thread seems to yield the fast result. Maybe the application has to wait for a common lock or a blocking OS resource during process Start.\r\n\r\nI don\u0027t have too much insight into the Process implementation under Linux. Maybe someone else have and can explain why this occurs. Could also be valuable to see if the same occurs on Windows.",
                                           "updatedAt":  "2022-04-05T10:26:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A4m4u",
                                           "createdAt":  "2022-04-05T11:18:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "devsko",
                                           "body":  "@DanPristupov Can you please measure the total elapsed time for sync / async. ",
                                           "updatedAt":  "2022-04-05T11:18:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A4pco",
                                           "createdAt":  "2022-04-05T11:30:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "devsko",
                                           "body":  "Windows:\r\n```\r\nStart processes sync\r\nC:\\Windows\\System32\\cmd.exe: 89,7152\r\nC:\\Windows\\System32\\cmd.exe: 49,1774\r\nC:\\Windows\\System32\\cmd.exe: 49,8015\r\nC:\\Windows\\System32\\cmd.exe: 50,6141\r\nC:\\Windows\\System32\\cmd.exe: 52,5395\r\nC:\\Windows\\System32\\cmd.exe: 50,8179\r\nC:\\Windows\\System32\\cmd.exe: 48,7166\r\nC:\\Windows\\System32\\cmd.exe: 50,4042\r\nC:\\Windows\\System32\\cmd.exe: 53,0987\r\nC:\\Windows\\System32\\cmd.exe: 57,6313\r\nC:\\Windows\\System32\\cmd.exe: 64,7421\r\nC:\\Windows\\System32\\cmd.exe: 52,3299\r\nC:\\Windows\\System32\\cmd.exe: 53,0856\r\nC:\\Windows\\System32\\cmd.exe: 52,6622\r\nC:\\Windows\\System32\\cmd.exe: 56,1951\r\nC:\\Windows\\System32\\cmd.exe: 52,1156\r\nTOTAL sync: 913,2566\r\nStart processes async\r\nC:\\Windows\\System32\\cmd.exe: 109,2501\r\nC:\\Windows\\System32\\cmd.exe: 115,1507\r\nC:\\Windows\\System32\\cmd.exe: 129,4584\r\nC:\\Windows\\System32\\cmd.exe: 133,1002\r\nC:\\Windows\\System32\\cmd.exe: 145,9811\r\nC:\\Windows\\System32\\cmd.exe: 155,326\r\nC:\\Windows\\System32\\cmd.exe: 163,7159\r\nC:\\Windows\\System32\\cmd.exe: 179,9286\r\nC:\\Windows\\System32\\cmd.exe: 149,8854\r\nC:\\Windows\\System32\\cmd.exe: 140,2502\r\nC:\\Windows\\System32\\cmd.exe: 169,6546\r\nC:\\Windows\\System32\\cmd.exe: 161,2332\r\nC:\\Windows\\System32\\cmd.exe: 129,9286\r\nC:\\Windows\\System32\\cmd.exe: 140,7953\r\nC:\\Windows\\System32\\cmd.exe: 152,6978\r\nC:\\Windows\\System32\\cmd.exe: 130,9094\r\nTOTAL async: 319,4197\r\nDone!\r\n```\r\n",
                                           "updatedAt":  "2022-04-05T11:30:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A5pxm",
                                           "createdAt":  "2022-04-05T15:18:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DanPristupov",
                                           "body":  "@ChrML \r\n\r\n\u003e I don\u0027t have too much insight into the Process implementation under Linux.\r\n\r\nIt\u0027s MacOS. Sorry if it wasn\u0027t clear. Still *nix though.\r\n\r\n\u003e Could also be valuable to see if the same occurs on Windows.\r\n\r\n@devsko posted that just above. Looks like Windows can also be affected.\r\n\r\n\u003e the slowdown should be related to the degree of parallelism and processes started simultaneously\r\n\r\nI tried to distribute the process start and added `Thread.Sleep(10)` to the task initialization loop, but it made no difference.",
                                           "updatedAt":  "2022-04-05T15:26:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A5q5I",
                                           "createdAt":  "2022-04-05T15:22:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DanPristupov",
                                           "body":  "As a side note, starting a process on M1(ARM) CPU is 10 times slower than on Intel CPU:\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eSource code\u003c/summary\u003e\r\n\r\n```csharp\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nConsole.WriteLine(\"Start processes sync\");\r\nRun(16, \"/bin/ls\", async: false);\r\n\r\nConsole.WriteLine(\"Start processes async\");\r\nRun(16, \"/bin/ls\", async: true);\r\n\r\nConsole.WriteLine(\"Done!\");\r\n\r\nvoid Run(int count, string fileName, bool async)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n    if (async)\r\n    {\r\n        var tasks = new Task[count];\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            var task = new Task(() =\u003e {\r\n                RunProcess(fileName);\r\n            });\r\n            tasks[i] = task;\r\n            task.Start();\r\n        }\r\n        Task.WaitAll(tasks);\r\n    }\r\n    else\r\n    {\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            RunProcess(fileName);\r\n        }\r\n    }\r\n    var typeString = async ? \"async\" : \"sync\";\r\n    Console.WriteLine($\"Total type {typeString} {stopWatch.Elapsed.TotalMilliseconds}\");\r\n}\r\n\r\nvoid RunProcess(string fileName)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n\r\n    using (var process = new Process())\r\n    {\r\n        process.StartInfo = new ProcessStartInfo\r\n        {\r\n            FileName = fileName,\r\n            UseShellExecute = false,\r\n            RedirectStandardOutput = true,\r\n            ErrorDialog = false,\r\n            CreateNoWindow = true,\r\n            RedirectStandardInput = true,\r\n            StandardOutputEncoding = Encoding.UTF8,\r\n        };\r\n\r\n        process.Start();\r\n\r\n        var output = process.StandardOutput.ReadToEnd();\r\n\r\n        process.WaitForExit();\r\n    }\r\n    Console.WriteLine($\"{fileName}: {stopWatch.Elapsed.TotalMilliseconds}\");\r\n}\r\n```\r\n\u003c/details\u003e\r\n\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eIntel (2.3ms avg)\u003c/summary\u003e\r\n\r\n```\r\ndotnet run --release\r\nStart processes sync\r\n/bin/ls: 25.0932\r\n/bin/ls: 3.6286\r\n/bin/ls: 3.565\r\n/bin/ls: 3.6467\r\n/bin/ls: 2.3761\r\n/bin/ls: 2.3586\r\n/bin/ls: 2.5641\r\n/bin/ls: 2.4136\r\n/bin/ls: 2.3298\r\n/bin/ls: 2.2895\r\n/bin/ls: 2.2861\r\n/bin/ls: 2.274\r\n/bin/ls: 2.2964\r\n/bin/ls: 2.346\r\n/bin/ls: 2.2755\r\n/bin/ls: 2.3004\r\nTotal type sync 65.3108\r\nStart processes async\r\n/bin/ls: 17.7733\r\n/bin/ls: 12.6006\r\n/bin/ls: 12.7846\r\n/bin/ls: 12.7583\r\n/bin/ls: 14.2065\r\n/bin/ls: 17.7802\r\n/bin/ls: 13.1571\r\n/bin/ls: 15.8159\r\n/bin/ls: 15.4926\r\n/bin/ls: 17.8502\r\n/bin/ls: 16.8834\r\n/bin/ls: 17.7844\r\n/bin/ls: 17.8358\r\n/bin/ls: 14.8688\r\n/bin/ls: 15.8335\r\n/bin/ls: 14.6468\r\nTotal type async 20.3364\r\nDone!\r\n```\r\n\u003c/details\u003e\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eM1 (25ms avg)\u003c/summary\u003e\r\n\r\n```\r\ndotnet run --release\r\nStart processes sync\r\n/bin/ls: 100.2816\r\n/bin/ls: 26.076\r\n/bin/ls: 21.451\r\n/bin/ls: 23.9278\r\n/bin/ls: 21.1879\r\n/bin/ls: 24.8415\r\n/bin/ls: 25.9347\r\n/bin/ls: 22.8774\r\n/bin/ls: 42.4205\r\n/bin/ls: 21.7012\r\n/bin/ls: 23.1033\r\n/bin/ls: 23.0439\r\n/bin/ls: 20.8563\r\n/bin/ls: 21.0834\r\n/bin/ls: 20.9084\r\n/bin/ls: 25.0697\r\nTotal type sync 468.7015\r\nStart processes async\r\n/bin/ls: 210.5708\r\n/bin/ls: 210.7278\r\n/bin/ls: 210.601\r\n/bin/ls: 210.5951\r\n/bin/ls: 210.6887\r\n/bin/ls: 210.6435\r\n/bin/ls: 210.7237\r\n/bin/ls: 210.6702\r\n/bin/ls: 210.6927\r\n/bin/ls: 210.6554\r\n/bin/ls: 120.661\r\n/bin/ls: 120.6573\r\n/bin/ls: 120.6377\r\n/bin/ls: 120.5842\r\n/bin/ls: 120.631\r\n/bin/ls: 121.3627\r\nTotal type async 344.2012\r\nDone!\r\n\r\n```\r\n\u003c/details\u003e\r\n\r\nDo you think I should create a separate issue for that?",
                                           "updatedAt":  "2022-04-05T15:22:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A5xo9",
                                           "createdAt":  "2022-04-05T15:40:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e Do you think I should create a separate issue for that?\r\n\r\nYes please, it was flagged here https://github.com/dotnet/runtime/issues/67339 but we didn\u0027t create an issue.",
                                           "updatedAt":  "2022-04-05T15:40:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A526j",
                                           "createdAt":  "2022-04-05T15:52:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e I ran this and consistently the child processes are slower -- even if I ensure the ls takes extra time by passing in -R /home/\r\n\r\nI just realized I used Linux. My M1 hasn\u0027t arrived yet. Does this repro on Linux for someone else? Or is somehow specific to Windows and Mac (?!)\r\n\r\nWhat if you log the time (eg ticks) between when the loop starts, and when process.Start is called? presumably that will show a delay, which ideally in your case would be zero for each call.\r\n\r\n",
                                           "updatedAt":  "2022-04-05T15:52:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A6H7Q",
                                           "createdAt":  "2022-04-05T16:25:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DanPristupov",
                                           "body":  "@danmoseley \r\n\r\n\u003e What if you log the time (eg ticks) between when the loop starts, and when process.Start is called? presumably that will show a delay, which ideally in your case would be zero for each call.\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eSource code\u003c/summary\u003e\r\n\r\n```csharp\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nConsole.WriteLine(\"Start processes async\");\r\nRun(16, \"/bin/ls\", async: true);\r\n\r\nConsole.WriteLine(\"Done!\");\r\n\r\nvoid Run(int count, string fileName, bool async)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n    if (async)\r\n    {\r\n        var tasks = new Task[count];\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            var task = new Task(() =\u003e {\r\n                Console.WriteLine($\"delay: {stopWatch.ElapsedMilliseconds} ms\");\r\n                RunProcess(fileName);\r\n            });\r\n            tasks[i] = task;\r\n            task.Start();\r\n        }\r\n        Task.WaitAll(tasks);\r\n    }\r\n    else\r\n    {\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            RunProcess(fileName);\r\n        }\r\n    }\r\n    var typeString = async ? \"async\" : \"sync\";\r\n    Console.WriteLine($\"Total type {typeString} {stopWatch.Elapsed.TotalMilliseconds}\");\r\n}\r\n\r\nvoid RunProcess(string fileName)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n\r\n    using (var process = new Process())\r\n    {\r\n        process.StartInfo = new ProcessStartInfo\r\n        {\r\n            FileName = fileName,\r\n            UseShellExecute = false,\r\n            RedirectStandardOutput = true,\r\n            ErrorDialog = false,\r\n            CreateNoWindow = true,\r\n            RedirectStandardInput = true,\r\n            StandardOutputEncoding = Encoding.UTF8,\r\n        };\r\n\r\n        process.Start();\r\n\r\n        var output = process.StandardOutput.ReadToEnd();\r\n\r\n        process.WaitForExit();\r\n    }\r\n    Console.WriteLine($\"{fileName}: {stopWatch.Elapsed.TotalMilliseconds}\");\r\n}\r\n\r\n```\r\n\u003c/details\u003e\r\n\r\nMBP16 M1 Max:\r\n```\r\ndotnet run --release\r\nStart processes async\r\ndelay: 11 ms\r\ndelay: 11 ms\r\ndelay: 11 ms\r\ndelay: 11 ms\r\ndelay: 11 ms\r\ndelay: 11 ms\r\ndelay: 11 ms\r\ndelay: 11 ms\r\ndelay: 11 ms\r\ndelay: 11 ms\r\n/bin/ls: 412.8496\r\n/bin/ls: 412.8208\r\n/bin/ls: 412.8002\r\n/bin/ls: 412.8127\r\n/bin/ls: 412.8233\r\n/bin/ls: 412.7961\r\n/bin/ls: 412.819\r\n/bin/ls: 412.8425\r\n/bin/ls: 412.837\r\n/bin/ls: 412.8167\r\ndelay: 431 ms\r\ndelay: 431 ms\r\ndelay: 431 ms\r\ndelay: 431 ms\r\ndelay: 432 ms\r\ndelay: 432 ms\r\n/bin/ls: 200.0511\r\n/bin/ls: 200.1575\r\n/bin/ls: 200.0651\r\n/bin/ls: 200.1079\r\n/bin/ls: 200.1359\r\n/bin/ls: 200.1537\r\nTotal type async 632.3171\r\nDone!\r\n```\r\n\r\nMy current machine has 10 cores, so the ThreadPool size is also 10. There are 16 tasks, and because of the ThreadPool overflow 2 virtual groups appeared: 10 and 6 simultaneous tasks.\r\n\r\nWe can see that each single process in a group somehow waits for the whole group of the parallel processes.",
                                           "updatedAt":  "2022-04-05T16:25:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BFrxN",
                                           "createdAt":  "2022-04-07T17:28:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fernandozago",
                                           "body":  "Hello everyone. \r\nI ran it on windows 10 (Ryzen 3700x - 8cores, 16threads)\r\n\r\nCommand: CMD /c dir\r\n\r\n```\r\nStart processes sync\r\ncmd: 40,7933\r\ncmd: 26,7772\r\ncmd: 25,3197\r\ncmd: 23,502\r\ncmd: 24,3611\r\ncmd: 29,0904\r\ncmd: 28,5455\r\ncmd: 28,3005\r\ncmd: 24,7782\r\ncmd: 26,6514\r\ncmd: 26,4133\r\ncmd: 31,5373\r\ncmd: 26,9445\r\ncmd: 25,1255\r\ncmd: 28,9803\r\ncmd: 31,7677\r\nTotal type sync 458,4898\r\nStart processes async\r\ncmd: 37,7033\r\ncmd: 40,5682\r\ncmd: 37,5978\r\ncmd: 49,1791\r\ncmd: 51,8796\r\ncmd: 53,8477\r\ncmd: 58,7341\r\ncmd: 60,0082\r\ncmd: 63,2641\r\ncmd: 49,1104\r\ncmd: 56,1296\r\ncmd: 55,8794\r\ncmd: 68,7703\r\ncmd: 58,1821\r\ncmd: 57,7187\r\ncmd: 59,6214\r\nTotal type async 102,5157\r\nDone!\r\n```\r\n\r\nBut i think it maybe something with multiple Tasks running at the same time.\r\nDue common OS locking for starting processes like @ChrML said.\r\nOr even an antivirus heuristic trying to monitor fast processes starts to avoid some virus replication.\r\nIf you change your code to run single instance at a time (like on the sync code), it returns nearly the same result for me.\r\n\r\n```\r\nStart processes sync\r\ncmd: 44,3693\r\ncmd: 26,5006\r\ncmd: 23,815\r\ncmd: 25,1439\r\ncmd: 29,0849\r\ncmd: 28,9684\r\ncmd: 25,3439\r\ncmd: 24,5733\r\ncmd: 28,3871\r\ncmd: 34,0787\r\ncmd: 30,0783\r\ncmd: 29,2867\r\ncmd: 29,1504\r\ncmd: 27,2343\r\ncmd: 29,0069\r\ncmd: 24,982\r\nTotal type sync 470,7642\r\nStart processes async\r\ncmd: 24,8412\r\ncmd: 26,7439\r\ncmd: 33,3553\r\ncmd: 31,74\r\ncmd: 28,5698\r\ncmd: 27,5991\r\ncmd: 31,2083\r\ncmd: 28,8033\r\ncmd: 26,6959\r\ncmd: 23,7428\r\ncmd: 22,9894\r\ncmd: 23,6098\r\ncmd: 23,5023\r\ncmd: 23,6591\r\ncmd: 22,7147\r\ncmd: 22,8315\r\nTotal type async 425,0549\r\nDone!\r\n```",
                                           "updatedAt":  "2022-04-07T17:40:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BIALK",
                                           "createdAt":  "2022-04-08T08:53:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DanPristupov",
                                           "body":  "I decided to run the profiler.\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eSource code\u003c/summary\u003e\r\n\r\n```csharp\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nSystem.Threading.Thread.Sleep(5*1000); // sleep to allow to attach the profiler\r\n\r\nConsole.WriteLine(\"Start processes async\");\r\nRun(16, \"/bin/ls\", async: true);\r\n\r\nConsole.WriteLine(\"Done!\");\r\n\r\nvoid Run(int count, string fileName, bool async)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n    if (async)\r\n    {\r\n        var tasks = new Task[count];\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            var task = new Task(() =\u003e {\r\n                RunProcess(fileName);\r\n            });\r\n            tasks[i] = task;\r\n            task.Start();\r\n        }\r\n        Task.WaitAll(tasks);\r\n    }\r\n    else\r\n    {\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            RunProcess(fileName);\r\n        }\r\n    }\r\n    var typeString = async ? \"async\" : \"sync\";\r\n    Console.WriteLine($\"Total type {typeString} {stopWatch.Elapsed.TotalMilliseconds}\");\r\n}\r\n\r\nvoid RunProcess(string fileName)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n\r\n    using (var process = new Process())\r\n    {\r\n        process.StartInfo = new ProcessStartInfo\r\n        {\r\n            FileName = fileName,\r\n            UseShellExecute = false,\r\n            RedirectStandardOutput = true,\r\n            ErrorDialog = false,\r\n            CreateNoWindow = true,\r\n            RedirectStandardInput = true,\r\n            StandardOutputEncoding = Encoding.UTF8,\r\n        };\r\n\r\n        process.Start();\r\n\r\n        var output = process.StandardOutput.ReadToEnd();\r\n\r\n        process.WaitForExit();\r\n    }\r\n    Console.WriteLine($\"{fileName}: {stopWatch.Elapsed.TotalMilliseconds}\");\r\n}\r\n```\r\n\u003c/details\u003e\r\n\r\nRun the profiler on M1 Max:\r\n```\r\n% ~/.dotnet/tools/dotnet-trace collect -n StartProcessTes --format SpeedScope\r\nNo profile or providers specified, defaulting to trace profile \u0027cpu-sampling\u0027\r\n\r\nProvider Name                           Keywords            Level               Enabled By\r\nMicrosoft-DotNETCore-SampleProfiler     0x0000F00000000000  Informational(4)    --profile \r\nMicrosoft-Windows-DotNETRuntime         0x00000014C14FCCBD  Informational(4)    --profile \r\n\r\nProcess        : /Users/dan/src/StartProcessTest/bin/Debug/net6.0/StartProcessTest\r\nOutput File    : /Users/dan/src/StartProcessTest/StartProcessTest_20220408_102243.nettrace\r\n\r\n[00:00:00:04]\tRecording trace 460.164  (KB)\r\nPress \u003cEnter\u003e or \u003cCtrl+C\u003e to exit...\r\n\r\nTrace completed.\r\nWriting:\t/Users/dan/src/StartProcessTest/StartProcessTest_20220408_102243.speedscope.json\r\nConversion complete\r\n```\r\n\r\nThe hot point is the `Interop.Sys.ForkAndExecProcess` call in `runtime/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs`.\r\n\r\n\u003cimg width=\"1118\" alt=\"Screenshot 2022-04-08 at 10 39 09\" src=\"https://user-images.githubusercontent.com/618115/162399804-91bf0abe-1e0f-4949-a3b4-a3b02ebb6d66.png\"\u003e\r\n\r\nDirect link to the source code: https://github.com/dotnet/runtime/blob/6a889d234267a4c96ed21d0e1660dce787d78a38/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L519\r\n\r\n```csharp\r\n                // Invoke the shim fork/execve routine.  It will create pipes for all requested\r\n                // redirects, fork a child process, map the pipe ends onto the appropriate stdin/stdout/stderr\r\n                // descriptors, and execve to execute the requested process.  The shim implementation\r\n                // is used to fork/execve as executing managed code in a forked process is not safe (only\r\n                // the calling thread will transfer, thread IDs aren\u0027t stable across the fork, etc.)\r\n                int errno = Interop.Sys.ForkAndExecProcess(\r\n                    resolvedFilename, argv, envp, cwd,\r\n                    startInfo.RedirectStandardInput, startInfo.RedirectStandardOutput, startInfo.RedirectStandardError,\r\n                    setCredentials, userId, groupId, groups,\r\n                    out childPid, out stdinFd, out stdoutFd, out stderrFd);\r\n```\r\n\r\nI\u0027ve attached the full trace file here [StartProcessTest_20220408_102243.speedscope.json.zip](https://github.com/dotnet/runtime/files/8450157/StartProcessTest_20220408_102243.speedscope.json.zip)\r\n\r\nYou can unzip and open it yourself on https://speedscope.net\r\n\r\nAlso: [StartProcessTest_20220408_102243.nettrace.zip](https://github.com/dotnet/runtime/files/8450851/StartProcessTest_20220408_102243.nettrace.zip)\r\n\r\n\r\n~~How can we go deeper into `Interop.Sys.ForkAndExecProcess`?~~\r\nUpdate: The `Interop.Sys.ForkAndExecProcess` source code is available here: https://github.com/dotnet/runtime/blob/6a889d234267a4c96ed21d0e1660dce787d78a38/src/libraries/Common/src/Interop/Unix/System.Native/Interop.ForkAndExecProcess.cs\r\n\r\nThen it calls `SystemNative_ForkAndExecProcess`: https://github.com/dotnet/corefx/blob/5c83394112febe1b481ab1c0b61a45c850677165/src/Native/Unix/System.Native/pal_process.c#L206",
                                           "updatedAt":  "2022-04-08T10:07:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BIDqZ",
                                           "createdAt":  "2022-04-08T09:09:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DanPristupov",
                                           "body":  "There is a comment in `ForkAndExecProcess` which implies that allowing multiple processes to start concurrently was at least considered during initial the implementation.\r\n\r\nhttps://github.com/dotnet/runtime/blob/6a889d234267a4c96ed21d0e1660dce787d78a38/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L502\r\n\r\n```csharp\r\n            // Lock to avoid races with OnSigChild\r\n            // By using a ReaderWriterLock we allow multiple processes to start concurrently.\r\n            s_processStartLock.EnterReadLock();\r\n```\r\n\r\nMaybe if has never been working properly or it could be a regression.",
                                           "updatedAt":  "2022-04-08T09:09:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BMU87",
                                           "createdAt":  "2022-04-09T06:45:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Even if there were a global lock I\u0027d expect the total time to be roughly the same. A global lock would at most reduce concurrency to 1, as before. Lock overhead can\u0027t be relevant here. Why is it 10x slower?",
                                           "updatedAt":  "2022-04-09T06:45:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BN8fQ",
                                           "createdAt":  "2022-04-10T04:39:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCXQw-w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2022-04-10T06:13:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmds",
                                           "body":  "The reader lock gets taken while starting processes, the writer lock is taken when a process exits.\r\n\r\nIn the async case, different processes are starting simultaneous, so the `WaitForExit` is blocked by acquiring the writer lock.\r\n\r\nFor the sync case, you need to sum the elapsed times.\r\nFor the async case, they are measuring concurrent events.\r\n\r\nIf you move the `StopWatch` to the `Run` method you get this result:\r\n\r\n```\r\n$ dotnet run -c Release\r\nStart processes sync\r\n/bin/ls: 60.3433\r\nStart processes async\r\n/bin/ls: 18.8684\r\nDone!\r\n```",
                                           "updatedAt":  "2022-04-10T04:39:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BN8ub",
                                           "createdAt":  "2022-04-10T04:47:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "For some additional info, see https://github.com/dotnet/runtime/issues/25879.",
                                           "updatedAt":  "2022-04-10T04:47:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BOZGS",
                                           "createdAt":  "2022-04-10T14:58:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DanPristupov",
                                           "body":  "@tmds \r\n\u003e In the async case, different processes are starting simultaneous, so the WaitForExit is blocked by acquiring the writer lock.\r\n\r\nI\u0027m might be missing something, but it looks like `WaitForExit` is not related. At least on the profiler graph in my previous post (https://github.com/dotnet/runtime/issues/67506#issuecomment-1092616906) it doesn\u0027t take a significant time (~20ms comparing to ~200ms of `ForkAndExecProcess`).\r\n\r\n\u003e If you move the `StopWatch` to the `Run` method you get this result:\r\n\u003e \r\n\u003e ```\r\n\u003e $ dotnet run -c Release\r\n\u003e Start processes sync\r\n\u003e /bin/ls: 60.3433\r\n\u003e Start processes async\r\n\u003e /bin/ls: 18.8684\r\n\u003e Done!\r\n\u003e ```\r\n\r\n\r\nDo you mean like this?\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eSource code\u003c/summary\u003e\r\n\r\n```csharp\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nConsole.WriteLine(\"Start processes sync\");\r\nRun(16, \"/bin/ls\", async: false);\r\n\r\nConsole.WriteLine(\"Start processes async\");\r\nRun(16, \"/bin/ls\", async: true);\r\n\r\nConsole.WriteLine(\"Done!\");\r\n\r\nvoid Run(int count, string fileName, bool async)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n    if (async)\r\n    {\r\n        var tasks = new Task[count];\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            var task = new Task(() =\u003e {\r\n                RunProcess(fileName);\r\n            });\r\n            tasks[i] = task;\r\n            task.Start();\r\n        }\r\n        Task.WaitAll(tasks);\r\n    }\r\n    else\r\n    {\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            RunProcess(fileName);\r\n        }\r\n    }\r\n    var typeString = async ? \"async\" : \"sync\";\r\n    Console.WriteLine($\"Total time {typeString} {stopWatch.Elapsed.TotalMilliseconds}\");\r\n}\r\n\r\nvoid RunProcess(string fileName)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n\r\n    using (var process = new Process())\r\n    {\r\n        process.StartInfo = new ProcessStartInfo\r\n        {\r\n            FileName = fileName,\r\n            UseShellExecute = false,\r\n            RedirectStandardOutput = true,\r\n            ErrorDialog = false,\r\n            CreateNoWindow = true,\r\n            RedirectStandardInput = true,\r\n            StandardOutputEncoding = Encoding.UTF8,\r\n        };\r\n\r\n        process.Start();\r\n\r\n        var output = process.StandardOutput.ReadToEnd();\r\n\r\n        process.WaitForExit();\r\n    }\r\n}\r\n```\r\n\u003c/details\u003e\r\n\r\nIn my case, the total time doesn\u0027t change that much.\r\n\r\nM1:\r\n```\r\ndotnet run -c Release\r\nStart processes sync\r\nTotal time sync 444.3092\r\nStart processes async\r\nTotal time async 383.883\r\nDone!\r\n```\r\n\u003c/details\u003e\r\n\r\n\r\n\r\n\u003e For the sync case, you need to sum the elapsed times.\u2028\r\n\u003e For the async case, they are measuring concurrent events.\r\n\r\nWell, yes, but I don\u0027t understand why each of the concurrent events take 5-10 times longer. It doesn\u0027t excuse the fact that user must wait for output of a single process 200ms instead of 30ms.\r\n\r\n",
                                           "updatedAt":  "2022-04-10T15:44:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BOmwh",
                                           "createdAt":  "2022-04-10T18:53:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCXepOg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "DanPristupov",
                                                                               "createdAt":  "2022-04-11T16:40:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmds",
                                           "body":  "Sorry, I had overlooked this issue was for macOS specifically.\r\n\r\nOn macOS, process starts are serialized due to missing `pipe2`:\r\n\r\nhttps://github.com/dotnet/runtime/blob/cde7799901885d47c6c9c12dc3e2166d1a33d90a/src/native/libs/System.Native/pal_process.c#L286-L297\r\n",
                                           "updatedAt":  "2022-04-10T18:53:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BPp1r",
                                           "createdAt":  "2022-04-11T06:58:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e On macOS, process starts are serialized due to missing pipe2:\r\n\r\nAnd for similar reasons, Windows has a lock also:\r\n\r\nhttps://github.com/dotnet/runtime/blob/2087c07830770d3c7b8e8452e42a398b16ac0a0b/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs#L451-L455",
                                           "updatedAt":  "2022-04-11T06:58:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BRbIY",
                                           "createdAt":  "2022-04-11T13:57:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DanPristupov",
                                           "body":  "@tmds is there any possible workaround for that particular use case (i.e. running about 10 processes about 60ms each). I\u0027m just trying to decrease the delay a user must wait for data to appear.",
                                           "updatedAt":  "2022-04-11T13:57:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BXloa",
                                           "createdAt":  "2022-04-12T13:04:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "If you can remove the `WaitForExit` call, those Tasks won\u0027t end up waiting to acquire the writer lock which is being held by the processes that are starting sequentially. So the output of the first processes will be available sooner.\r\n\r\nAlso, if you are blocking Tasks you might starve the ThreadPool causing things to go even slower. For processes that run long, you should use `LongRunning` (which will use a dedicated thread for the Task). Or use async APIs in your Task.",
                                           "updatedAt":  "2022-04-12T13:04:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BXvJ2",
                                           "createdAt":  "2022-04-12T13:38:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DanPristupov",
                                           "body":  "\u003e If you can remove the `WaitForExit` call, those Tasks won\u0027t end up waiting to acquire the writer lock which is being held by the processes that are starting sequentially. So the output of the first processes will be available sooner.\r\n\r\nNo. I removed it and the result is the same :(\r\n\r\nWith `WaitForExit` (Total time async `335ms`):\r\n```\r\ndotnet run -c Release\r\nStart processes sync\r\n/bin/ls: 98.0125\r\n/bin/ls: 26.7105\r\n/bin/ls: 20.9646\r\n/bin/ls: 23.403\r\n/bin/ls: 20.2838\r\n/bin/ls: 20.8735\r\n/bin/ls: 21.4462\r\n/bin/ls: 24.2901\r\n/bin/ls: 40.2885\r\n/bin/ls: 20.1572\r\n/bin/ls: 20.286\r\n/bin/ls: 24.0907\r\n/bin/ls: 20.8128\r\n/bin/ls: 21.826\r\n/bin/ls: 20.0096\r\n/bin/ls: 24.9194\r\nTotal time sync 452.1408\r\nStart processes async\r\n/bin/ls: 158.3848\r\n/bin/ls: 158.4169\r\n/bin/ls: 158.3936\r\n/bin/ls: 158.4039\r\n/bin/ls: 158.3727\r\n/bin/ls: 158.4184\r\n/bin/ls: 158.4634\r\n/bin/ls: 196.3038\r\n/bin/ls: 196.3243\r\n/bin/ls: 196.9643\r\n/bin/ls: 126.9954\r\n/bin/ls: 126.9804\r\n/bin/ls: 127.0865\r\n/bin/ls: 127.0429\r\n/bin/ls: 127.0582\r\n/bin/ls: 127.8567\r\nTotal time async 335.4064\r\nDone!\r\n```\r\n\r\nWithout `WaitForExit` (Total time async `400ms`):\r\n```\r\ndotnet run -c Release\r\nStart processes sync\r\n/bin/ls: 99.3795\r\n/bin/ls: 28.0014\r\n/bin/ls: 26.4949\r\n/bin/ls: 23.8075\r\n/bin/ls: 22.1625\r\n/bin/ls: 28.9287\r\n/bin/ls: 25.5122\r\n/bin/ls: 42.618\r\n/bin/ls: 25.3854\r\n/bin/ls: 23.391\r\n/bin/ls: 23.8038\r\n/bin/ls: 23.0368\r\n/bin/ls: 24.1766\r\n/bin/ls: 23.3039\r\n/bin/ls: 25.1493\r\n/bin/ls: 23.2374\r\nTotal time sync 492.1862\r\nStart processes async\r\n/bin/ls: 139.389\r\n/bin/ls: 139.3716\r\n/bin/ls: 139.3997\r\n/bin/ls: 139.409\r\n/bin/ls: 139.4599\r\n/bin/ls: 139.9483\r\n/bin/ls: 213.2685\r\n/bin/ls: 237.7443\r\n/bin/ls: 237.7407\r\n/bin/ls: 238.8761\r\n/bin/ls: 46.5697\r\n/bin/ls: 92.3975\r\n/bin/ls: 121.6485\r\n/bin/ls: 121.612\r\n/bin/ls: 122.8951\r\n/bin/ls: 151.5456\r\nTotal time async 400.4798\r\nDone!\r\n```\r\n\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eSource code\u003c/summary\u003e\r\n\r\n```csharp\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nConsole.WriteLine(\"Start processes sync\");\r\nRun(16, \"/bin/ls\", async: false);\r\n\r\nConsole.WriteLine(\"Start processes async\");\r\nRun(16, \"/bin/ls\", async: true);\r\n\r\nConsole.WriteLine(\"Done!\");\r\n\r\nvoid Run(int count, string fileName, bool async)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n    if (async)\r\n    {\r\n        var tasks = new Task[count];\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            var task = new Task(() =\u003e {\r\n                RunProcess(fileName);\r\n            });\r\n            tasks[i] = task;\r\n            task.Start();\r\n        }\r\n        Task.WaitAll(tasks);\r\n    }\r\n    else\r\n    {\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            RunProcess(fileName);\r\n        }\r\n    }\r\n    var typeString = async ? \"async\" : \"sync\";\r\n    Console.WriteLine($\"Total time {typeString} {stopWatch.Elapsed.TotalMilliseconds}\");\r\n}\r\n\r\nvoid RunProcess(string fileName)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n\r\n    using (var process = new Process())\r\n    {\r\n        process.StartInfo = new ProcessStartInfo\r\n        {\r\n            FileName = fileName,\r\n            UseShellExecute = false,\r\n            RedirectStandardOutput = true,\r\n            ErrorDialog = false,\r\n            CreateNoWindow = true,\r\n            RedirectStandardInput = true,\r\n            StandardOutputEncoding = Encoding.UTF8,\r\n        };\r\n\r\n        process.Start();\r\n\r\n        var output = process.StandardOutput.ReadToEnd();\r\n\r\n//        process.WaitForExit();\r\n    }\r\n    Console.WriteLine($\"{fileName}: {stopWatch.Elapsed.TotalMilliseconds}\");\r\n}\r\n```\r\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-12T13:38:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BXxIm",
                                           "createdAt":  "2022-04-12T13:45:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "```\r\n/bin/ls: 46.5697\r\n/bin/ls: 92.3975\r\n```\r\nYou get these lower values due to not waiting for exit.",
                                           "updatedAt":  "2022-04-12T13:45:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BYif9",
                                           "createdAt":  "2022-04-12T16:37:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DanPristupov",
                                           "body":  "I was curious how that case is handled by **Swift**. It turned out on Swift async is always faster.\r\n\r\nM1 (sync: `17ms`, async: `3ms`). Async is `5.65` times faster!\r\n```\r\ndan@MBP16-M1 StartProcessTest % swiftc program.swift \r\ndan@MBP16-M1 StartProcessTest % ./program\r\nStart processes sync\r\n/bin/ls 2ms\r\n/bin/ls 1ms\r\n/bin/ls 1ms\r\n/bin/ls 1ms\r\n/bin/ls 1ms\r\n/bin/ls 0ms\r\n/bin/ls 1ms\r\n/bin/ls 0ms\r\n/bin/ls 0ms\r\n/bin/ls 0ms\r\n/bin/ls 0ms\r\n/bin/ls 0ms\r\n/bin/ls 0ms\r\n/bin/ls 0ms\r\n/bin/ls 0ms\r\n/bin/ls 0ms\r\nTotal time sync 17ms\r\nStart processes async\r\n/bin/ls 2ms\r\n/bin/ls 2ms\r\n/bin/ls 2ms\r\n/bin/ls 2ms\r\n/bin/ls 2ms\r\n/bin/ls 2ms\r\n/bin/ls 2ms\r\n/bin/ls 2ms\r\n/bin/ls 2ms\r\n/bin/ls 3ms\r\n/bin/ls 1ms\r\n/bin/ls 2ms\r\n/bin/ls 1ms\r\n/bin/ls 1ms\r\n/bin/ls 2ms\r\n/bin/ls 3ms\r\nTotal time async 3ms\r\n```\r\n\r\nIntel (sync: `31ms`, async: `4ms`). Async is `7.75` times faster!\r\n```\r\ndan@MBP16-Intel StartProcessTest % swiftc program.swift\r\ndan@MBP16-Intel StartProcessTest % ./program\r\nStart processes sync\r\n/bin/ls 2ms\r\n/bin/ls 1ms\r\n/bin/ls 1ms\r\n/bin/ls 1ms\r\n/bin/ls 1ms\r\n/bin/ls 1ms\r\n/bin/ls 1ms\r\n/bin/ls 1ms\r\n/bin/ls 1ms\r\n/bin/ls 1ms\r\n/bin/ls 1ms\r\n/bin/ls 1ms\r\n/bin/ls 1ms\r\n/bin/ls 1ms\r\n/bin/ls 1ms\r\n/bin/ls 1ms\r\nTotal time sync 31ms\r\nStart processes async\r\n/bin/ls 2ms\r\n/bin/ls 2ms\r\n/bin/ls 3ms\r\n/bin/ls 2ms\r\n/bin/ls 3ms\r\n/bin/ls 3ms\r\n/bin/ls 3ms\r\n/bin/ls 3ms\r\n/bin/ls 3ms\r\n/bin/ls 3ms\r\n/bin/ls 3ms\r\n/bin/ls 3ms\r\n/bin/ls 3ms\r\n/bin/ls 3ms\r\n/bin/ls 3ms\r\n/bin/ls 3ms\r\nTotal time async 4ms\r\n```\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eSource code\u003c/summary\u003e\r\n\r\n```swift\r\nimport Foundation\r\n\r\n\r\nrun(count: 16, path: \"/bin/ls\", async: false)\r\nrun(count: 16, path: \"/bin/ls\", async: true)\r\n\r\nfunc run(count: Int, path: String, async: Bool) {\r\n    print(\"Start processes \\(async ? \"async\" : \"sync\")\")\r\n    let start = DispatchTime.now()\r\n    let operationQueue = OperationQueue()\r\n\r\n    if !async {\r\n        operationQueue.addOperation {\r\n            for _ in 0..\u003ccount {\r\n                runProcess(path: path)\r\n            }\r\n        }\r\n    } else {\r\n        for _ in 0..\u003ccount {\r\n            operationQueue.addOperation {\r\n                runProcess(path: path)\r\n            }\r\n        }\r\n    }\r\n    \r\n    operationQueue.waitUntilAllOperationsAreFinished()\r\n\r\n    let nanoTime = DispatchTime.now().uptimeNanoseconds - start.uptimeNanoseconds\r\n    let elapsed = Int(Double(nanoTime) / 1_000_000)\r\n\r\n    print(\"Total time \\(async ? \"async\" : \"sync\") \\(elapsed)ms\")\r\n}\r\n\r\nfunc runProcess(path: String) {\r\n    let start = DispatchTime.now()\r\n    let process = Process()\r\n    process.launchPath = path\r\n    let outputPipe = Pipe()\r\n    process.standardOutput = outputPipe\r\n\r\n    process.launch()\r\n\r\n    let _ = outputPipe.fileHandleForReading.readDataToEndOfFile()\r\n\r\n    process.waitUntilExit()\r\n\r\n    let nanoTime = DispatchTime.now().uptimeNanoseconds - start.uptimeNanoseconds\r\n    let elapsed = Int(Double(nanoTime) / 1_000_000)\r\n    print(\"\\(path) \\(elapsed)ms\")\r\n}\r\n```\r\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-12T16:37:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BawyZ",
                                           "createdAt":  "2022-04-13T04:12:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e I was curious how that case is handled by Swift. It turned out on Swift async is always faster.\r\n\r\nThis uses the macOS specific `POSIX_SPAWN_CLOEXEC_DEFAULT` which means child processes only inherit specified handles.\r\n\r\nWith .NET, any inheritable handle is available to any child.\r\n\r\nThere is an open issue for an API that would allow to specify the inheritance: https://github.com/dotnet/runtime/issues/13943.\r\n\r\nHowever, because there may be a child `Process` that enable inheritance, the lock that causes the .NET process starts to be serialized on macOS must still be used (even for processes that disable inheritance).\r\n\r\nTo use `POSIX_SPAWN_CLOEXEC_DEFAULT` on macOS like Swift does, inheritance must be disabled process-wide for all children.",
                                           "updatedAt":  "2022-04-13T04:12:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TY_di",
                                           "createdAt":  "2023-01-20T23:11:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nStarting and running processes as separate tasks increases the execution time up to 10 times.\r\n\r\n### Configuration\r\n\r\n.Net 6.0\r\nSo far, I\u0027ve reproduced the problem on both Intel and M1 macs.\r\n\r\nThe following code runs `ls`, but it can be any other process.\r\n\r\n``` csharp\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nConsole.WriteLine(\"Start processes sync\");\r\nRun(16, \"/bin/ls\", async: false);\r\n\r\nConsole.WriteLine(\"Start processes async\");\r\nRun(16, \"/bin/ls\", async: true);\r\n\r\nConsole.WriteLine(\"Done!\");\r\n\r\n\r\nvoid Run(int count, string fileName, bool async)\r\n{\r\n    if (async)\r\n    {\r\n        var tasks = new Task[count];\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            var task = new Task(() =\u003e {\r\n                RunProcess(fileName);\r\n            });\r\n            tasks[i] = task;\r\n            task.Start();\r\n        }\r\n        Task.WaitAll(tasks);\r\n    }\r\n    else\r\n    {\r\n        for (var i = 0; i \u003c count; i += 1)\r\n        {\r\n            RunProcess(fileName);\r\n        }\r\n    }\r\n}\r\n\r\nvoid RunProcess(string fileName)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n\r\n    using (var process = new Process())\r\n    {\r\n        process.StartInfo = new ProcessStartInfo\r\n        {\r\n            FileName = fileName,\r\n            UseShellExecute = false,\r\n            RedirectStandardOutput = true,\r\n            ErrorDialog = false,\r\n            CreateNoWindow = true,\r\n            RedirectStandardInput = true,\r\n            StandardOutputEncoding = Encoding.UTF8,\r\n        };\r\n\r\n        process.Start();\r\n\r\n        var output = process.StandardOutput.ReadToEnd();\r\n\r\n        process.WaitForExit();\r\n    }\r\n    Console.WriteLine($\"{fileName}: {stopWatch.Elapsed.TotalMilliseconds}\");\r\n}\r\n```\r\n\r\n### Data\r\n\r\n```\r\ndotnet run --release\r\nStart processes sync\r\n/bin/ls: 103.4258\r\n/bin/ls: 32.4446\r\n/bin/ls: 31.3135\r\n/bin/ls: 26.2724\r\n/bin/ls: 32.4081\r\n/bin/ls: 28.5405\r\n/bin/ls: 51.8288\r\n/bin/ls: 27.8595\r\n/bin/ls: 26.0885\r\n/bin/ls: 31.0516\r\n/bin/ls: 29.5644\r\n/bin/ls: 28.7161\r\n/bin/ls: 28.6573\r\n/bin/ls: 25.2447\r\n/bin/ls: 27.5642\r\n/bin/ls: 28.2451\r\nStart processes async\r\n/bin/ls: 179.849\r\n/bin/ls: 179.9062\r\n/bin/ls: 179.9018\r\n/bin/ls: 179.9322\r\n/bin/ls: 179.7889\r\n/bin/ls: 179.818\r\n/bin/ls: 179.9126\r\n/bin/ls: 255.7262\r\n/bin/ls: 255.3477\r\n/bin/ls: 256.478\r\n/bin/ls: 152.9311\r\n/bin/ls: 152.9212\r\n/bin/ls: 152.8825\r\n/bin/ls: 152.9134\r\n/bin/ls: 152.9793\r\n/bin/ls: 153.5875\r\nDone!\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDanPristupov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `tenet-performance`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-20T23:11:59Z"
                                       }
                                   ],
                         "totalCount":  29
                     },
        "title":  ".Net 6. Running processes as separate tasks increases the execution time drastically",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67591",
        "createdAt":  "2022-04-05T15:57:49Z",
        "number":  67591,
        "author":  "DanPristupov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCq0ppQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kevinclancy",
                                            "createdAt":  "2022-10-02T04:58:09Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-08-02T04:51:31Z",
        "body":  "### Description\r\n\r\nI noticed that starting and running a process on M1 (ARM) CPU is 10 times slower than on Intel CPU.\r\n\r\n### Configuration\r\n\r\nI made measures on MacOS on MBP16 Intel and MBP16 M1 Max (both are the latest available models at the moment).\r\n\r\nI run `/bin/ls` as an example, but it can be any other process, for example `/bin/date`\r\n\r\n```csharp\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nConsole.WriteLine(\"Start processes\");\r\nRun(16, \"/bin/ls\");\r\n\r\nvoid Run(int count, string fileName)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n    for (var i = 0; i \u003c count; i += 1)\r\n    {\r\n        RunProcess(fileName);\r\n    }\r\n    Console.WriteLine($\"Total {stopWatch.Elapsed.TotalMilliseconds}\");\r\n}\r\n\r\nvoid RunProcess(string fileName)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n\r\n    using (var process = new Process())\r\n    {\r\n        process.StartInfo = new ProcessStartInfo\r\n        {\r\n            FileName = fileName,\r\n            UseShellExecute = false,\r\n            RedirectStandardOutput = true,\r\n            ErrorDialog = false,\r\n            CreateNoWindow = true,\r\n            RedirectStandardInput = true,\r\n            StandardOutputEncoding = Encoding.UTF8,\r\n        };\r\n\r\n        process.Start();\r\n\r\n        var output = process.StandardOutput.ReadToEnd();\r\n\r\n        process.WaitForExit();\r\n    }\r\n    Console.WriteLine($\"{fileName}: {stopWatch.Elapsed.TotalMilliseconds}\");\r\n}\r\n```\r\n\r\n### Data\r\n\r\nIntel (2.5 ms avg)\r\n\r\n```\r\ndotnet run --release\r\nStart processes\r\n/bin/ls: 25.0932\r\n/bin/ls: 3.6286\r\n/bin/ls: 3.565\r\n/bin/ls: 3.6467\r\n/bin/ls: 2.3761\r\n/bin/ls: 2.3586\r\n/bin/ls: 2.5641\r\n/bin/ls: 2.4136\r\n/bin/ls: 2.3298\r\n/bin/ls: 2.2895\r\n/bin/ls: 2.2861\r\n/bin/ls: 2.274\r\n/bin/ls: 2.2964\r\n/bin/ls: 2.346\r\n/bin/ls: 2.2755\r\n/bin/ls: 2.3004\r\nTotal 65.3108\r\nDone!\r\n```\r\nM1 (25ms avg)\r\n\r\n```\r\ndotnet run --release\r\nStart processes\r\n/bin/ls: 100.2816\r\n/bin/ls: 26.076\r\n/bin/ls: 21.451\r\n/bin/ls: 23.9278\r\n/bin/ls: 21.1879\r\n/bin/ls: 24.8415\r\n/bin/ls: 25.9347\r\n/bin/ls: 22.8774\r\n/bin/ls: 42.4205\r\n/bin/ls: 21.7012\r\n/bin/ls: 23.1033\r\n/bin/ls: 23.0439\r\n/bin/ls: 20.8563\r\n/bin/ls: 21.0834\r\n/bin/ls: 20.9084\r\n/bin/ls: 25.0697\r\nTotal 468.7015\r\nDone!\r\n```\r\n\r\nP.S. You might be interested in seeing the roots of that issue: https://github.com/dotnet/runtime/issues/67506",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQP3G8w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5A558H",
                                           "createdAt":  "2022-04-05T15:57:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI noticed that starting and running a process on M1 (ARM) CPU is 10 times slower than on Intel CPU.\r\n\r\n### Configuration\r\n\r\nI made measures on MacOS on MBP16 Intel and MBP16 M1 Max (both are the latest available models at the moment).\r\n\r\nI run `/bin/ls` as an example, but it can be any other process, for example `/bin/date`\r\n\r\n```csharp\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nConsole.WriteLine(\"Start processes\");\r\nRun(16, \"/bin/ls\");\r\n\r\nvoid Run(int count, string fileName)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n    for (var i = 0; i \u003c count; i += 1)\r\n    {\r\n        RunProcess(fileName);\r\n    }\r\n    Console.WriteLine($\"Total {stopWatch.Elapsed.TotalMilliseconds}\");\r\n}\r\n\r\nvoid RunProcess(string fileName)\r\n{\r\n    var stopWatch = Stopwatch.StartNew();\r\n\r\n    using (var process = new Process())\r\n    {\r\n        process.StartInfo = new ProcessStartInfo\r\n        {\r\n            FileName = fileName,\r\n            UseShellExecute = false,\r\n            RedirectStandardOutput = true,\r\n            ErrorDialog = false,\r\n            CreateNoWindow = true,\r\n            RedirectStandardInput = true,\r\n            StandardOutputEncoding = Encoding.UTF8,\r\n        };\r\n\r\n        process.Start();\r\n\r\n        var output = process.StandardOutput.ReadToEnd();\r\n\r\n        process.WaitForExit();\r\n    }\r\n    Console.WriteLine($\"{fileName}: {stopWatch.Elapsed.TotalMilliseconds}\");\r\n}\r\n```\r\n\r\n### Data\r\n\r\nIntel (2.5 ms avg)\r\n\r\n```\r\ndotnet run --release\r\nStart processes\r\n/bin/ls: 25.0932\r\n/bin/ls: 3.6286\r\n/bin/ls: 3.565\r\n/bin/ls: 3.6467\r\n/bin/ls: 2.3761\r\n/bin/ls: 2.3586\r\n/bin/ls: 2.5641\r\n/bin/ls: 2.4136\r\n/bin/ls: 2.3298\r\n/bin/ls: 2.2895\r\n/bin/ls: 2.2861\r\n/bin/ls: 2.274\r\n/bin/ls: 2.2964\r\n/bin/ls: 2.346\r\n/bin/ls: 2.2755\r\n/bin/ls: 2.3004\r\nTotal 65.3108\r\nDone!\r\n```\r\nM1 (25ms avg)\r\n\r\n```\r\ndotnet run --release\r\nStart processes\r\n/bin/ls: 100.2816\r\n/bin/ls: 26.076\r\n/bin/ls: 21.451\r\n/bin/ls: 23.9278\r\n/bin/ls: 21.1879\r\n/bin/ls: 24.8415\r\n/bin/ls: 25.9347\r\n/bin/ls: 22.8774\r\n/bin/ls: 42.4205\r\n/bin/ls: 21.7012\r\n/bin/ls: 23.1033\r\n/bin/ls: 23.0439\r\n/bin/ls: 20.8563\r\n/bin/ls: 21.0834\r\n/bin/ls: 20.9084\r\n/bin/ls: 25.0697\r\nTotal 468.7015\r\nDone!\r\n```\r\n\r\nP.S. You might be interested in seeing the roots of that issue: https://github.com/dotnet/runtime/issues/67506\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDanPristupov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-05T15:57:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A571S",
                                           "createdAt":  "2022-04-05T16:02:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCWTyGQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-04-05T16:12:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I assume you don\u0027t see such a difference if you just run the commands from the shell and time how long they take to invoke?",
                                           "updatedAt":  "2022-04-05T16:02:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A6cu5",
                                           "createdAt":  "2022-04-05T17:11:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Seems like it got better in .NET 7.0:\r\n![image](https://user-images.githubusercontent.com/523221/161812404-fbd1506e-c98c-407a-b91d-2076a01db9de.png)\r\n(at least for x64)",
                                           "updatedAt":  "2022-04-05T17:11:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A6fC2",
                                           "createdAt":  "2022-04-05T17:17:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DanPristupov",
                                           "body":  "@EgorBo may be I\u0027m missing something, but the \u0027Apple M1 Max\u0027 processor on your screenshot is marked as \u0027Same\u0027.",
                                           "updatedAt":  "2022-04-05T17:17:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A6fih",
                                           "createdAt":  "2022-04-05T17:19:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCWUzfA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DanPristupov",
                                                                               "createdAt":  "2022-04-05T17:26:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Sorry I didn\u0027t notice you were talking about M1 specifically",
                                           "updatedAt":  "2022-04-05T17:19:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A_YlT",
                                           "createdAt":  "2022-04-06T14:46:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@DanPristupov can you observe the same difference if you run these commands from shell?",
                                           "updatedAt":  "2022-04-06T14:46:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A_cbz",
                                           "createdAt":  "2022-04-06T15:00:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DanPristupov",
                                           "body":  "@adamsitnik \r\n\r\nIntel (3ms):\r\n\r\n```\r\ntime ls\r\nls  0.00s user 0.00s system 80% cpu 0.003 total\r\n```\r\n\r\nM1 (4ms):\r\n\r\n```\r\ntime ls\r\nls  0.00s user 0.00s system 49% cpu 0.004 total\r\n```\r\n\r\nIs that what you ask?",
                                           "updatedAt":  "2022-04-06T15:00:29Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Starting a process on M1(ARM) CPU is 10 times slower than on Intel CPU",
        "labels":  [
                       "arch-arm64",
                       "area-System.Diagnostics.Process",
                       "os-mac-os-x",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67642",
        "createdAt":  "2022-04-06T09:03:54Z",
        "number":  67642,
        "author":  "powercode",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4Qf8A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Fabi",
                                            "createdAt":  "2022-04-06T11:28:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NN---",
                                            "createdAt":  "2022-04-08T05:42:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2022-04-19T06:59:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gnalvesteffer",
                                            "createdAt":  "2023-01-02T04:11:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "istupakov",
                                            "createdAt":  "2023-03-11T16:51:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nick-beer",
                                            "createdAt":  "2024-03-22T19:18:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fryderykhuang",
                                            "createdAt":  "2024-05-30T06:57:18Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2022-05-11T09:42:44Z",
        "body":  "It is a lot of work with the current API, to for example get a process attached to a job before it has a way to spawn child processes.\r\n\r\nIt requires native interop code to create the processes suspended and reflection to set up the IO streams on the process object.\r\n\r\nIf the Process class supported some way to create the process suspended, these scenarios would be much simpler.\r\n\r\nMaybe an overload to `Start`, with a bool suspended` flag, returning some object with a `ResumeMainThread` method and a `Process` property?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQucnUQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5A-I8P",
                                           "createdAt":  "2022-04-06T09:04:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIt is a lot of work with the current API, to for example get a process attached to a job before it has a way to spawn child processes.\r\n\r\nIt requires native interop code to create the processes suspended and reflection to set up the IO streams on the process object.\r\n\r\nIf the Process class supported some way to create the process suspended, these scenarios would be much simpler.\r\n\r\nMaybe an overload to `Start`, with a bool suspended` flag, returning some object with a `ResumeMainThread` method and a `Process` property?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epowercode\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-06T09:04:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5A_IH_",
                                           "createdAt":  "2022-04-06T13:43:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Hello can you say more about your scenario? Is this a windows job object for example?\nI wonder how widespread this need is.",
                                           "updatedAt":  "2022-04-06T13:43:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BHalF",
                                           "createdAt":  "2022-04-08T05:45:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NN---",
                                           "body":  "Once I needed to start process suspended in order to change permissions to the main thread.\r\nAfter performing all necessary work, the main thread downgraded its permissions to be the same as the process.",
                                           "updatedAt":  "2022-04-08T05:45:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BOGQb",
                                           "createdAt":  "2022-04-10T08:16:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "powercode",
                                           "body":  "In my use case, I attach the process to a job, both to ensure termination of all children, and to set a priority class.\r\n",
                                           "updatedAt":  "2022-04-10T08:16:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BOHXr",
                                           "createdAt":  "2022-04-10T08:37:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NN---",
                                           "body":  "Windows makes it possible to set priority during the process creation:\n\nhttps://docs.microsoft.com/en-us/windows/win32/procthread/process-creation-flags\n\n.NET AFAIK doesn\u0027t provide access to this API, only to update the priority after the process is running.\nhttps://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process.priorityclass?view=net-6.0",
                                           "updatedAt":  "2022-04-10T08:37:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Bsbma",
                                           "createdAt":  "2022-04-19T07:02:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "I have needed this for child process jobs as well. Windows Job Objects are the best way to ensure child process termination.\r\n\r\nSetting priority before any code runs was also something that I wanted. I just made due without that capability. In my case, the child processes were consuming 100% CPU by design. It is risky to launch such processes at normal priority. They can crowd out the controlling process from the CPU making it unable to adjust priority.\r\n\r\nThe process class would need a way to start suspended, and then to resume the child process.",
                                           "updatedAt":  "2022-04-19T07:02:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Csfhr",
                                           "createdAt":  "2022-05-05T19:16:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@tmds would it be possible to achieve something like this on Linux?",
                                           "updatedAt":  "2022-05-05T19:16:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C5ydR",
                                           "createdAt":  "2022-05-10T14:06:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "You can send SIGSTOP/SIGCONT to stop/continue a process.\r\n\r\n`SIGSTOP` is used by .NET\u0027s `Process.Kill(entireProcessTree: true)` implementation. It\u0027s best effort because `kill(SIGSTOP)` gets sent asynchronously: when the syscall returns, the process may not have stopped yet.",
                                           "updatedAt":  "2022-05-10T14:06:16Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Make it possible to start a process suspended, and later resume it.",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/69846",
        "createdAt":  "2022-05-26T08:55:06Z",
        "number":  69846,
        "author":  "Caskia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-22T14:16:02Z",
        "body":  "### Description\n\nWhen process\u0027 name length more than 15  ```Process.GetProcessesByName``` get null result on macOS. Call ```Process.GetProcesses``` will get all processes in this system and you will find the target process\u0027 name length is cut off to 15, so can not find the right process.\n\n### Reproduction Steps\n\n1. find a process which name is more than 15 in macOS\u0027 \"Activity Monitor\" app. For example process name is \"CrashReporterSupportHelper\".\r\n2. call API ```Process.GetProcessesByName(\"CrashReporterSupportHelper\")``` \r\n3. check the result \n\n### Expected behavior\n\nShould get the right process instance which name is \"CrashReporterSupportHelper\" above.\n\n### Actual behavior\n\nBut get null result.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nTargetFramework: .net core 6.0\r\nRuntimeIdentity: osx-x64\r\nOS: macOS Monterey\r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQ9rJhg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5D2VFo",
                                           "createdAt":  "2022-05-26T08:55:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen process\u0027 name length more than 15  ```Process.GetProcessesByName``` get null result on macOS. Call ```Process.GetProcesses``` will get all processes in this system and you will find the target process\u0027 name length is cut off to 15, so can not find the right process.\n\n### Reproduction Steps\n\n1. find a process which name is more than 15 in macOS\u0027 \"Activity Monitor\" app. For example process name is \"CrashReporterSupportHelper\".\r\n2. call API ```Process.GetProcessesByName(\"CrashReporterSupportHelper\")``` \r\n3. check the result \n\n### Expected behavior\n\nShould get the right process instance which name is \"CrashReporterSupportHelper\" above.\n\n### Actual behavior\n\nBut get null result.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nTargetFramework: .net core 6.0\r\nRuntimeIdentity: osx-x64\r\nOS: macOS Monterey\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCaskia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-26T08:55:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D2smG",
                                           "createdAt":  "2022-05-26T11:01:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "This is the same root issue as https://github.com/dotnet/runtime/issues/52860,  just a different symptom.",
                                           "updatedAt":  "2022-05-26T11:01:01Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "macOS Process.GetProcessesByName can not get process when process name length more than 15",
        "labels":  [
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70014",
        "createdAt":  "2022-05-31T14:28:25Z",
        "number":  70014,
        "author":  "valentiniliescu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-17T21:55:59Z",
        "body":  "### Description\n\nWhen executing `Process.CloseMainWindow` for an existing process on MacOS, it always returns false and the main window does not close.\r\n\r\nNote that when executing the same code on Windows or on MacOS under Mono, `Process.CloseMainWindow` returns true and closes the window, as expected.\n\n### Reproduction Steps\n\n```\r\nusing System.Diagnostics;\r\n\r\n// manually launch TextEdit before executing this code\r\nforeach (var process in Process.GetProcessesByName(\"TextEdit\"))\r\n{\r\n    Console.WriteLine($\"Found process {process.ProcessName} with id {process.Id}\");\r\n    var closeResult = process.CloseMainWindow();\r\n    Console.WriteLine($\"Was main window closed: {closeResult}\");\r\n}\r\n```\n\n### Expected behavior\n\nThe code snippet prints out:\r\n```\r\nFound process TextEdit with id 46109\r\nWas main window closed: True\r\n```\r\nand the TextEdit window is closed\n\n### Actual behavior\n\nThe code snippet prints out:\r\n```\r\nFound process TextEdit with id 46109\r\nWas main window closed: False\r\n```\r\nand the TextEdit window is still visible\n\n### Regression?\n\nIt works fine when running under Mono 6.12.0.114 on the same MacOS version listed in the configuration.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.202\r\n Commit: f8a55617d2\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  12.4\r\n OS Platform: Darwin\r\n RID:         osx.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/6.0.202/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.4\r\n  Commit: be98e88c76\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYbA_XA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5EFMJ8",
                                           "createdAt":  "2022-05-31T14:28:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen executing `Process.CloseMainWindow` for an existing process on MacOS, it always returns false and the main window does not close.\r\n\r\nNote that when executing the same code on Windows or on MacOS under Mono, `Process.CloseMainWindow` returns true and closes the window, as expected.\n\n### Reproduction Steps\n\n```\r\nusing System.Diagnostics;\r\n\r\n// manually launch TextEdit before executing this code\r\nforeach (var process in Process.GetProcessesByName(\"TextEdit\"))\r\n{\r\n    Console.WriteLine($\"Found process {process.ProcessName} with id {process.Id}\");\r\n    var closeResult = process.CloseMainWindow();\r\n    Console.WriteLine($\"Was main window closed: {closeResult}\");\r\n}\r\n```\n\n### Expected behavior\n\nThe code snippet prints out:\r\n```\r\nFound process TextEdit with id 46109\r\nWas main window closed: True\r\n```\r\nand the TextEdit window is closed\n\n### Actual behavior\n\nThe code snippet prints out:\r\n```\r\nFound process TextEdit with id 46109\r\nWas main window closed: False\r\n```\r\nand the TextEdit window is still visible\n\n### Regression?\n\nIt works fine when running under Mono 6.12.0.114 on the same MacOS version listed in the configuration.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.202\r\n Commit: f8a55617d2\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  12.4\r\n OS Platform: Darwin\r\n RID:         osx.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/6.0.202/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.4\r\n  Commit: be98e88c76\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evalentiniliescu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-31T14:28:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EFeC5",
                                           "createdAt":  "2022-05-31T15:26:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Currently `CloseMainWindow` has no support for non-Windows platforms. Support may be ported from Mono.",
                                           "updatedAt":  "2022-05-31T15:26:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EFg7k",
                                           "createdAt":  "2022-05-31T15:36:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "valentiniliescu",
                                           "body":  "\u003e Currently `CloseMainWindow` has no support for non-Windows platforms. Support may be ported from Mono.\r\n\r\nIn this case I would expect to get a `PlatformNotSupportedException`",
                                           "updatedAt":  "2022-05-31T15:36:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EGUz5",
                                           "createdAt":  "2022-05-31T18:28:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e Support may be ported from Mono.\r\n\r\nMono doesn\u0027t quite implement it either. It basically does what `.Kill()` method does which exists in .NET 6 and is implemented on macOS.",
                                           "updatedAt":  "2022-05-31T18:28:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FZiRX",
                                           "createdAt":  "2022-06-23T12:02:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@stephentoub there are multiple `Process` APIs that are implemented only on Windows, they are not marked with `[SupportedOSPlatform(\"windows\")]` and they do nothing or return defaul value for non-Windows configs:\r\n* `CloseMainWindow`\r\n* `EnterDebugMode`\r\n* `LeaveDebugMode`\r\n* `MainWindowHandle`\r\n* `MainWindowTitle`\r\n\r\nThese methods don\u0027t seem to be hints like `ProcessThread.IdealProcessor` and `ProcessThread.I.ResetIdealProcessor`\r\n\r\nIs there any reason for why we should not annotate them properly and make them throw PNSE?\r\n",
                                           "updatedAt":  "2022-06-23T12:02:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FZ8CJ",
                                           "createdAt":  "2022-06-23T13:44:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "EnterDebugMode and LeaveDebugMode have little use on anything other than Windows; you\u0027d use them if you wanted to query for certain things that you can only do when you have the right privileges, and you can\u0027t query for those on other OSes, so these methods don\u0027t need to do anything special on those OSes.  Thus nop is a valid implementation.  We can mark them as unsupported if you want, but I expect that would only increase friction without actually helping anything.\r\n\r\nMainWindowTitle returns string.Empty on Windows if it can\u0027t get a title.  So that\u0027s what we do on other OSes as well.  If we can enhance the implementations to do better on Linux/macOS, great, but changing it to throw PNSE and be unsupported seems inconsistent and doesn\u0027t help with much.\r\n\r\nSame for MainWindowHandle... on Windows if it can\u0027t find one, it returns IntPtr.Zero.  Linux and macOS do the same.\r\n\r\nFor CloseMainWindow, it returns a bool indicating whether a main window could be successfully closed.  It can return false on Windows.  I\u0027m also not seeing a big benefit of changing the behavior of the method to have an exceptional mode.",
                                           "updatedAt":  "2022-06-23T13:44:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FaIIR",
                                           "createdAt":  "2022-06-23T14:25:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@stephentoub how about just annotating these methods with `[SupportedOSPlatform(\"windows\")]`? I just would like to make sure that our customers know about the fact that these methods are Windows-specific before they deploy their apps to other OSes and find out about it the hard way.",
                                           "updatedAt":  "2022-06-23T14:25:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FadbC",
                                           "createdAt":  "2022-06-23T15:34:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "We can if you really think the benefits outweigh the cons.  It means code like\r\nhttps://github.com/PowerShell/PowerShell/blob/ea3ea96cc75f51eab30e0bd93c7b4f8c31bbf14b/src/System.Management.Automation/engine/remoting/commands/EnterPSHostProcessCommand.cs#L815-L828\r\nwill start issuing warnings.  Does that bring enough benefit to justify it?  Up to you.",
                                           "updatedAt":  "2022-06-23T15:34:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hP6Tc",
                                           "createdAt":  "2023-07-11T21:55:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mightypanda",
                                           "body":  "So, what is the suggested method to gracefully close a process with a UI window on MacOS ?",
                                           "updatedAt":  "2023-07-11T21:55:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hQuly",
                                           "createdAt":  "2023-07-12T02:55:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e So, what is the suggested method to gracefully close a process with a UI window on MacOS ?\r\n\r\nYou can search for the native way to send the signal, and define P/Invoke.",
                                           "updatedAt":  "2023-07-12T02:55:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hoUZp",
                                           "createdAt":  "2023-07-17T11:41:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e You can search for the native way to send the signal, and define P/Invoke.\r\n\r\n@huoyaoyuan is right, we don\u0027t have a dedicated managed API for sending signals to processes. \r\n\r\nBTW @stephentoub have we considered adding such API in the past? Perhaps when you were working on  https://github.com/dotnet/runtime/pull/55333 ?\r\n\r\nFor now, you can call the sys-call directly. Here is how we do it in System.CommandLine:\r\n\r\nhttps://github.com/dotnet/command-line-api/blob/2c8df7382615b7b0d88e78a2a6205af0a8130eb0/src/System.CommandLine.Tests/Invocation/CancelOnProcessTerminationTests.cs#L103\r\n\r\nhttps://github.com/dotnet/command-line-api/blob/2c8df7382615b7b0d88e78a2a6205af0a8130eb0/src/System.CommandLine.Tests/Invocation/CancelOnProcessTerminationTests.cs#L114-L115\r\n",
                                           "updatedAt":  "2023-07-17T11:41:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hpHyb",
                                           "createdAt":  "2023-07-17T13:40:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "This may be an alternative.\n\nhttps://www.nuget.org/packages/Mono.Posix",
                                           "updatedAt":  "2023-07-17T13:40:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hsD9c",
                                           "createdAt":  "2023-07-17T21:55:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBBpdA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2023-07-18T11:42:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e BTW @stephentoub have we considered adding such API in the past? Perhaps when you were working on https://github.com/dotnet/runtime/pull/55333 ?\r\n\r\nYes, it\u0027s been on our list to consider.  I think @tmds was thinking about what APIs would look like at one point.  And in the meantime there\u0027s the Mono.Posix nuget that Dan mentions.",
                                           "updatedAt":  "2023-07-17T21:55:59Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Process.CloseMainWindow does not work on MacOS",
        "labels":  [
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71515",
        "createdAt":  "2022-07-01T01:03:35Z",
        "number":  71515,
        "author":  "alexrp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODIef1g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NN---",
                                            "createdAt":  "2022-12-13T13:22:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gnalvesteffer",
                                            "createdAt":  "2023-01-02T04:13:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kjkrum",
                                            "createdAt":  "2023-10-13T03:00:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "satyapramodh",
                                            "createdAt":  "2024-02-01T06:55:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nick-beer",
                                            "createdAt":  "2024-03-22T20:13:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tmat",
                                            "createdAt":  "2024-10-31T22:52:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MiroKaku",
                                            "createdAt":  "2024-11-29T04:30:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Cyberboss",
                                            "createdAt":  "2025-05-29T21:18:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ikskuh",
                                            "createdAt":  "2025-07-25T07:31:44Z"
                                        }
                                    ],
                          "totalCount":  9
                      },
        "updatedAt":  "2022-07-19T14:54:35Z",
        "body":  "### Background and motivation\r\n\r\nThe `Process` API currently provides no way to control the [process creation flags](https://docs.microsoft.com/en-us/windows/win32/procthread/process-creation-flags) used on Windows. This is unfortunate as there are a number of flags that are quite useful, such as `CREATE_NEW_PROCESS_GROUP`, `CREATE_SUSPENDED`, and `DEBUG_PROCESS`.\r\n\r\nOf course, you can P/Invoke `CreateProcessW` to use these flags and this works for extremely trivial use cases. But as soon as you need anything more than \"just run an executable with these flags\", things get hairy: You have to reimplement environment block construction, `string[]` -\u003e `string` command line pasting, and standard I/O piping. Not a fun experience at all.\r\n\r\nI propose that `ProcessStartInfo` simply gets a Windows-specific `CreationFlags` property to set the process creation flags. These would just get OR\u0027d with whichever flags `Process` itself needs to set based on other properties (e.g. `CREATE_NO_WINDOW`).\r\n\r\nThe implementation effort here should be extremely minimal while providing huge convenience to people who need to set process creation flags on Windows.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Diagnostics.Process;\r\n\r\npublic sealed partial class ProcessStartInfo\r\n{\r\n    [SupportedOSPlatform(\"windows\")]\r\n    public uint CreationFlags { get; set; }\r\n}\r\n```\r\n\r\n* I don\u0027t think there needs to be any validation of the flags beyond what `CreateProcessW` might do; the assumption would be that anyone using this property knows what they\u0027re doing.\r\n* I\u0027m agnostic on whether the property should throw `PlatformNotSupportedException` on non-Windows platforms vs just being ignored.\r\n* `CreationFlags` could be strongly typed as an enum, but I\u0027m not sure the BCL should be in the business of exposing such an enum and keeping it up to date with the Win32 API.\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar info = new ProcessStartInfo(fileName);\r\n\r\nforeach (var arg in args)\r\n    info.ArgumentList.Add(arg);\r\n\r\ninfo.CreationFlags = 0x4 /* CREATE_SUSPENDED */;\r\n\r\nusing var proc = new Process\r\n{\r\n    StartInfo = info,\r\n};\r\n\r\nproc.Start();\r\n\r\n// Do some Win32-specific stuff that ultimately causes the process to be woken up.\r\n\r\nproc.WaitForExit();\r\n```\r\n\r\n### Alternative Designs\r\n\r\nIndividual properties for each flag is also an option.\r\n\r\n### Risks\r\n\r\nNone.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORuEZtw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5F2Hjs",
                                           "createdAt":  "2022-07-01T01:03:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nThe `Process` API currently provides no way to control the [process creation flags](https://docs.microsoft.com/en-us/windows/win32/procthread/process-creation-flags) used on Windows. This is unfortunate as there are a number of flags that are quite useful, such as `CREATE_NEW_PROCESS_GROUP`, `CREATE_SUSPENDED`, and `DEBUG_PROCESS`.\r\n\r\nOf course, you can P/Invoke `CreateProcessW` to use these flags and this works for extremely trivial use cases. But as soon as you need anything more than \"just run an executable with these flags\", things get hairy: You have to reimplement environment block construction, `string[]` -\u003e `string` command line pasting, and standard I/O piping. Not a fun experience at all.\r\n\r\nI propose that `ProcessStartInfo` simply gets a Windows-specific `CreationFlags` property to set the process creation flags. These would just get OR\u0027d with whichever flags `Process` itself needs to set based on other properties (e.g. `CREATE_NO_WINDOW`).\r\n\r\nThe implementation effort here should be extremely minimal while providing huge convenience to people who need to set process creation flags on Windows.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Diagnostics.Process;\r\n\r\npublic sealed partial class ProcessStartInfo\r\n{\r\n    [SupportedOSPlatform(\"windows\")]\r\n    public uint CreationFlags { get; set; }\r\n}\r\n```\r\n\r\n* I don\u0027t think there needs to be any validation of the flags beyond what `CreateProcessW` might do; the assumption would be that anyone using this property knows what they\u0027re doing.\r\n* I\u0027m agnostic on whether the property should throw `PlatformNotSupportedException` on non-Windows platforms vs just being ignored.\r\n* `CreationFlags` could be strongly typed as an enum, but I\u0027m not sure the BCL should be in the business of exposing such an enum and keeping it up to date with the Win32 API.\n\n### API Usage\n\n```csharp\r\nvar info = new ProcessStartInfo(fileName);\r\n\r\nforeach (var arg in args)\r\n    info.ArgumentList.Add(arg);\r\n\r\ninfo.CreationFlags = 0x4 /* CREATE_SUSPENDED */;\r\n\r\nusing var proc = new Process\r\n{\r\n    StartInfo = info,\r\n};\r\n\r\nproc.Start();\r\n\r\n// Do some Win32-specific stuff that ultimately causes the process to be woken up.\r\n\r\nproc.WaitForExit();\r\n```\n\n### Alternative Designs\n\nNone.\n\n### Risks\n\nNone.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ealexrp\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Diagnostics.Process`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-01T01:03:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F2NKn",
                                           "createdAt":  "2022-07-01T01:47:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "There are number of other Windows-specific parameters that ProcessStartInfo does not expose. For example, all parameters from https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-updateprocthreadattribute\r\n\r\nIf one needs a full control over the Windows-specific parameters, it is better to PInvoke `CreateProcess` Windows API directly. For example, using https://github.com/dotnet/pinvoke/ .",
                                           "updatedAt":  "2022-07-01T01:47:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F2PA_",
                                           "createdAt":  "2022-07-01T02:04:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "\u003e There are number of other Windows-specific parameters that ProcessStartInfo does not expose. For example, all parameters from https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-updateprocthreadattribute\r\n\r\nYes, but these aren\u0027t simple flags. The complexity of exposing this functionality would be considerably higher, and I\u0027m also not sure to what extent anyone actually needs/wants them.\r\n\r\nBy contrast, I have 3 separate projects where I have the need to add extra process creation flags.\r\n\r\n\u003e If one needs a full control over the Windows-specific parameters, it is better to PInvoke `CreateProcess` Windows API directly. For example, using https://github.com/dotnet/pinvoke/ .\r\n\r\nThis ignores what I wrote in the motivation section:\r\n\r\n\u003e You have to reimplement environment block construction, `string[]` -\u003e `string` command line pasting, and standard I/O piping.\r\n\r\nI think it\u0027s unreasonable to ask people to reimplement all of that when exposing a `CreationFlags` property is so trivial.\r\n\r\nI\u0027ll also add that there\u0027s precedent in other languages:\r\n\r\n* https://docs.python.org/3/library/subprocess.html#subprocess.Popen\r\n* https://doc.rust-lang.org/std/process/struct.Command.html#method.creation_flags",
                                           "updatedAt":  "2022-07-01T02:04:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F20jM",
                                           "createdAt":  "2022-07-01T06:48:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NN---",
                                           "body":  "https://github.com/dotnet/runtime/issues/67642",
                                           "updatedAt":  "2022-07-01T06:48:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F20y7",
                                           "createdAt":  "2022-07-01T06:50:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NN---",
                                           "body":  "Perhaps there should be a constructor from SafeProcessHandle similar to Socket constructor from SafeSockegHandle:\r\n https://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.socket.-ctor?view=net-6.0#system-net-sockets-socket-ctor(system-net-sockets-safesockethandle)",
                                           "updatedAt":  "2022-07-01T06:50:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F3B-V",
                                           "createdAt":  "2022-07-01T07:57:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "\u003e Perhaps there should be a constructor from SafeProcessHandle similar to Socket constructor from SafeSockegHandle\r\n\r\nThat would not actually address any of the issues outlined in the motivation section above.",
                                           "updatedAt":  "2022-07-01T07:57:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F4HFV",
                                           "createdAt":  "2022-07-01T13:15:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "Another problem that arises is that there is no way to go from a process handle to a `Process` object, which locks you out of any APIs requiring the latter once you dive down to that level. You can attempt to work around this by using the process ID* instead (which you can retrieve a `Process` for), but then you\u0027re still unable to take advantage of features like stream redirection.\r\n\r\n\\* Notably, there is no API to retrieve the process ID from a pseudo-handle allocated by `Process.Handle` on non-Windows.",
                                           "updatedAt":  "2022-07-01T13:18:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F7bJI",
                                           "createdAt":  "2022-07-04T00:19:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fbrosseau",
                                           "body":  "Constructing a `Process` from a pre-existing handle would be very useful thing on its own, and it would probably be a lot less controversial since there are precedents. I think this would be a good API addition alone. However:\r\n\u003e but then you\u0027re still unable to take advantage of features like stream redirection.\r\n\r\nI do not see how you could possibly achieve that with in any way with an existing handle? If you have a handle, it is too late. \r\n\r\nBut I definitely see the value in the idea of constructing Process objects from handles - there are cases where `GetProcessById` simply is impossible - such as when the process in question is higher-privileged. In those cases, then you need to PInvoke absolutely everything, even things that are nicely available in the framework.\r\n\r\n--\r\n\r\nFor the actual proposal in this issue, as others said I think there are extremely few cases where all you would want are the flags, but not the other options, the primary one being tightly controlling handle inheritance. Another one that\u0027s almost always required is STARTUPINFO::dwFlags. Creating processes just has too many knobs - and I imagine there are as many various knobs in Linux, in Mac...\r\n",
                                           "updatedAt":  "2022-07-04T00:19:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F71Au",
                                           "createdAt":  "2022-07-04T03:56:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJgu8g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kjkrum",
                                                                               "createdAt":  "2023-10-13T03:03:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alexrp",
                                           "body":  "\u003e For the actual proposal in this issue, as others said I think there are extremely few cases where all you would want are the flags, but not the other options\r\n\r\nI have a bunch of use cases right off the bat:\r\n\r\n* `CREATE_NEW_PROCESS_GROUP` can be used to achieve more POSIX-like semantics for synthesized console break signals. It\u0027s the only way to correctly obtain the process group ID for a process.\r\n* Needing to suspend a process with `CREATE_SUSPENDED` as it\u0027s created to tightly control its initial execution, allowing binary patching of some fundamental facilities of the process (e.g. `malloc`/`free`).\r\n* `DEBUG_ONLY_THIS_PROCESS`/`DEBUG_PROCESS` are immensely useful when doing any kind of diagnostic or binary analysis work.\r\n* I\u0027ve had some multiprocessing situations where `CREATE_NEW_CONSOLE` would have been convenient.\r\n\r\n\u003e Another one that\u0027s almost always required is STARTUPINFO::dwFlags. Creating processes just has too many knobs - and I imagine there are as many various knobs in Linux, in Mac...\r\n\r\nI think we can address those knobs as use cases come up. It doesn\u0027t seem to me that they would conflict with this proposal.",
                                           "updatedAt":  "2022-07-04T04:00:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F8Oe7",
                                           "createdAt":  "2022-07-04T06:45:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "@fbrosseau \r\n\u003e I do not see how you could possibly achieve that with in any way with an existing handle? If you have a handle, it is too late.\r\n\r\nYeah. I didn\u0027t word it as clearly as I\u0027d hoped, but I was intending to say that being able to go from handle -\u003e Process would be a nice addition, though it wouldn\u0027t solve the root issue mentioned by the OP: being able to provide creation flags and still take advantage of the `ProcessStartInfo` functionality.\r\n\r\n@alexrp \r\n\u003e Needing to suspend a process with `CREATE_SUSPENDED` as it\u0027s created to tightly control its initial execution, allowing binary patching of some fundamental facilities of the process (e.g. malloc/free).\r\n\r\nIt should be noted that `CREATE_SUSPENDED` requires a bit more than just passing the flag, since you need a handle to the main thread too, so you can resume it. This is currently thrown away on process creation.",
                                           "updatedAt":  "2022-07-04T06:45:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F8Xuz",
                                           "createdAt":  "2022-07-04T07:29:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "\u003e It should be noted that `CREATE_SUSPENDED` requires a bit more than just passing the flag, since you need a handle to the main thread too, so you can resume it. This is currently thrown away on process creation.\r\n\r\nThere are lots of ways to get at the main thread or simply resume it while ignoring the returned handle from `CreateProcessW`: tool help APIs, `NtQuerySystemInformation` (and by extension the `Process.Threads` property), `NtResumeProcess`, etc. I\u0027m not too concerned about this aspect.",
                                           "updatedAt":  "2022-07-04T07:29:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F9Y0H",
                                           "createdAt":  "2022-07-04T11:43:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fbrosseau",
                                           "body":  "\u003e [alexrp] I have a bunch of use cases right off the bat:\r\n\r\nBut that is not my point - and from what I understand, not the point of other posters in this thread.\r\nThe point is this: Yes, there are many important use cases for the creation flags - they play a key role. However, it is very rarely enough to customize just that. This API suggestion is not enough, and doing enough would be too much :)\r\n\r\nBesides, every listed use case idea in this list would require at least some amount of extra PInvoke after creation.",
                                           "updatedAt":  "2022-07-04T11:46:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F9hRB",
                                           "createdAt":  "2022-07-04T12:20:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOClAd_Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DaZombieKiller",
                                                                               "createdAt":  "2022-07-04T12:33:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alexrp",
                                           "body":  "\u003e The point is this: Yes, there are many important use cases for the creation flags - they play a key role. **However, it is very rarely enough to customize just that.**\r\n\r\nBut how do you actually figure that? I\u0027ve put forth several real use cases where the only thing needed from the `System.Diagnostics.Process` API is the ability to actually set the flags. Everything else in my use cases can be achieved without any further support from `System.Diagnostics.Process`.\r\n\r\n\u003e This API suggestion is not enough, and doing enough would be too much :)\r\n\r\nBut it *is* enough for those cases I listed. I am not trying to solve every process creation problem under the sun, just a fairly reasonable subset for Windows. And, judging by the precedent in other languages that I mentioned above, I\u0027m not the only person who thinks it\u0027s a reasonable subset.\r\n\r\n\u003e Besides, every listed use case idea in this list would require at least some amount of extra PInvoke after creation.\r\n\r\nAll of which are quite trivial, but that\u0027s besides the point.\r\n\r\nThe principal motivation for this API proposal is the maintenance nightmare that would result in the alternative solution: I would be copying almost all of the `System.Diagnostics.Process` code to every project where I need to set process creation flags, otherwise I\u0027m simply not able to do stream redirection, for example. At least for argument pasting and environment block creation, I could copy only a subset of the code, but for stream redirection, the design of the API is such that I would be copying basically everything. And even if I did that, all of that code would now no longer integrate with the actual `System.Diagnostics.Process` class. I would have effectively created a fork of the `System.Diagnostics.Process.dll` assembly at that point.\r\n\r\nIt\u0027s plainly untenable.",
                                           "updatedAt":  "2022-07-04T12:20:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F90oo",
                                           "createdAt":  "2022-07-04T13:38:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e judging by the precedent in other languages that I mentioned above, I\u0027m not the only person who thinks it\u0027s a reasonable subset.\r\n\r\nPython exposes `STARTUPINFOEX.lpAttributeList` as `startupinfo` too, only supports one specific attribute currently.",
                                           "updatedAt":  "2022-07-04T13:38:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F96Pp",
                                           "createdAt":  "2022-07-04T14:01:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "\u003e Python exposes `STARTUPINFOEX.lpAttributeList` as `startupinfo` too, only supports one specific attribute currently.\r\n\r\nSure. Just to be clear, I\u0027m not at all against exposing more process creation options. But I see e.g. `lpAttributeList` as completely independent of what\u0027s being proposed here. It can be added in the future in a separate proposal if needed, and it will not conflict with this proposal either. The `Process` code can just do `info.CreationFlags | EXTENDED_STARTUPINFO_PRESENT` as needed if/when that day comes. We could even go one step further and throw `NotSupportedException` today if the user tries to set `EXTENDED_STARTUPINFO_PRESENT` on `CreationFlags`.\r\n\r\nSince what\u0027s being asked for here is very simple and straightforward to implement, and won\u0027t conflict with future efforts to add more similar functionality, I\u0027d just like to avoid scope creep so that this has a chance of actually happening.",
                                           "updatedAt":  "2022-07-04T14:01:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F-iK4",
                                           "createdAt":  "2022-07-04T17:22:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Since what\u0027s being asked for here is very simple and straightforward to implement, and won\u0027t conflict with future efforts to add more similar functionality\r\n\r\nIt is not obvious that it won\u0027t conflict. We prefer to review API proposals with full solution to the problem, so that we can see what the full API shape may look like eventually.\r\n\r\nWe have number of examples where we failed to follow this principle, added an API in one version of the runtime, and added a new API in next version that is duplicate or inconsistent with the one added earlier.",
                                           "updatedAt":  "2022-07-04T17:22:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F-k4s",
                                           "createdAt":  "2022-07-04T17:41:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "\u003e It is not obvious that it won\u0027t conflict.\r\n\r\nI\u0027m just not seeing it, I suppose. `EXTENDED_STARTUPINFO_PRESENT` is the only one that stands out to me as potentially problematic, and as I said, I\u0027m fine with actively blocking that one until we figure out a proper design for it (if/when there\u0027s demand).\r\n\r\nI also said in the issue description that I\u0027m okay with individual properties for each flag. The 5 that I mentioned [here](https://github.com/dotnet/runtime/issues/71515#issuecomment-1173311534) are the ones I would personally really like to see (I could also see arguments for `CREATE_BREAKAWAY_FROM_JOB` and `DETACHED_PROCESS`, but I have no use for those myself). Would you be more comfortable with that approach?\r\n\r\n\u003e We prefer to review API proposals with full solution to the problem, so that we can see what the full API shape may look like eventually.\r\n\r\nThat is understandable, but at the same time, \"full solution to the problem\" seems kind of nebulous here. It doesn\u0027t seem like anyone actually has an idea what the proposal should cover in full, so even if I were willing to spec out a full API, I wouldn\u0027t know what to do.\r\n\r\nIt also seems to conflict with the notion that API proposals should be driven by real world needs. I\u0027ve seen many cases where an API proposal gets shot down (and rightfully so) because it\u0027s either a solution looking for a problem, or there isn\u0027t a compelling enough use case.",
                                           "updatedAt":  "2022-07-04T17:42:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GAIsa",
                                           "createdAt":  "2022-07-04T22:39:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e \"full solution to the problem\" seems kind of nebulous here. \r\n\r\nThis proposal is based on the premise that there are platform-specific details that one needs to pass into the OS API that backs `Process.Start`, but that it does not make sense to expose these details as proper managed API. These details include `dwCreationFlags` (Windows), `STARTUPINFOEX.lpAttributeList` (Windows) and `posix_spawnattr` set of API on non-Windows. It would be useful see a pattern for how we may deal with all of these.\r\n\r\n\u003e It also seems to conflict with the notion that API proposals should be driven by real world needs. \r\n\r\nIt is a long tail, but I believe that you will be able to find some real-world need for any of these platform-specific details. For example, github search shows number of instance of `InitializeProcThreadAttributeList` used in C#: https://github.com/search?l=C%23\u0026q=InitializeProcThreadAttributeList\u0026type=Code",
                                           "updatedAt":  "2022-07-04T22:39:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GA3f8",
                                           "createdAt":  "2022-07-05T05:33:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "\u003e This proposal is based on the premise that there are platform-specific details that one needs to pass into the OS API that backs `Process.Start`, but that it does not make sense to expose these details as proper managed API.\r\n\r\nWell, not exactly. Like I said, I\u0027m open to `bool` properties for the flags that make sense. I just didn\u0027t imagine the team would be interested in going that far for relatively niche process options like these.\r\n\r\nDue to the nature of the `UpdateProcThreadAttribute` API, I think it would be a very unwieldy and excessively \u0027un-.NET\u0027 API if not designed as a proper managed API. If there *is* appetite for specifying a proper managed API for all the extended process creation options, I can do it. However, I would probably only personally commit to implementing the subset of options that I\u0027m interested in. Would this all be acceptable?\r\n\r\n\u003e These details include `dwCreationFlags` (Windows), `STARTUPINFOEX.lpAttributeList` (Windows)\r\n\r\nThere\u0027s also a whole bunch of stuff on `STARTUPINFO`, e.g. `dwFlags` and all the fields it controls.\r\n\r\n\u003e and `posix_spawnattr` set of API on non-Windows\r\n\r\nI think we use `fork`/`exec` on Unix platforms, so this wouldn\u0027t apply per se. That said, we could probably just emulate what `posix_spawnattr` provides.",
                                           "updatedAt":  "2022-07-05T05:33:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Guji5",
                                           "createdAt":  "2022-07-17T21:21:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danielkornev",
                                           "body":  "btw does this all mean that launching console apps using Process.Start on Windows silently is no longer an option (for NET6.0 and beyond)?",
                                           "updatedAt":  "2022-07-17T21:21:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gujvp",
                                           "createdAt":  "2022-07-17T21:26:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "\u003e btw does this all mean that launching console apps using Process.Start on Windows silently is no longer an option (for NET6.0 and beyond)?\r\n\r\nCan you elaborate? It\u0027s not obvious to me how that\u0027s connected to the proposal here; no functionality would be taken away.",
                                           "updatedAt":  "2022-07-17T21:26:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Guj83",
                                           "createdAt":  "2022-07-17T21:33:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danielkornev",
                                           "body":  "Sure. This might be unrelated as I don\u0027t have an understanding of how the Process.Start works internally. \r\n\r\nHere\u0027s a case: I have a NET6.0 WPF app that needs to launch a console app and keep it hidden. The WPF app runs on Windows and so it should be able to control this behavior in a way like below:\r\nhttps://stackoverflow.com/questions/836427/how-to-run-a-c-sharp-console-application-with-the-console-hidden\r\n\r\nIn NETFX this works but I don\u0027t see this working in NET6.0. So given that Process.Start in NET6.0 is cross-platform (and given some other conversations like https://github.com/PowerShell/PowerShell/issues/3028) I thought that maybe the ability to run console apps hidden in Process.Start was a Windows-only feature. If that\u0027s the case then I suppose one cannot achieve silent/hidden launch of console apps in NET6.0, right?\r\n\r\nIf these assumptions are wrong then I apologize for the intrusion!",
                                           "updatedAt":  "2022-07-17T21:33:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GwVMB",
                                           "createdAt":  "2022-07-18T11:00:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCnZGjQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danielkornev",
                                                                               "createdAt":  "2022-07-19T11:50:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alexrp",
                                           "body":  "@danielkornev I have to admit I\u0027m a bit confused at what the concern is still, but, if `ProcessStartInfo.WindowStyle` works on .NET Framework and doesn\u0027t on .NET 6, that sounds like a bug that should be filed separately.\r\n\r\n\u003e I thought that maybe the ability to run console apps hidden in Process.Start was a Windows-only feature.\r\n\r\nIt is. `WindowStyle` is ignored on non-Windows platforms for a variety of reasons - e.g. on Linux, the concept of a \"window\" is not as well-defined as on Windows and there\u0027s no guarantee that libraries related to window manipulation are even present, so it is not obvious what `WindowStyle` ought to do there.\r\n\r\n\u003e If that\u0027s the case then I suppose one cannot achieve silent/hidden launch of console apps in NET6.0, right?\r\n\r\nYou should be able to achieve that on Windows just like with .NET Framework.",
                                           "updatedAt":  "2022-07-18T11:00:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GwV6p",
                                           "createdAt":  "2022-07-18T11:01:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "By the way, @jkotas ping re: my questions in https://github.com/dotnet/runtime/issues/71515#issuecomment-1174632444.",
                                           "updatedAt":  "2022-07-18T11:01:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GyWx3",
                                           "createdAt":  "2022-07-18T14:57:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCnanJQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexrp",
                                                                               "createdAt":  "2022-07-19T13:46:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Due to the nature of the UpdateProcThreadAttribute API, I think it would be a very unwieldy and excessively \u0027un-.NET\u0027 API if not designed as a proper managed API\r\n\r\nIt argues that the `dwCreationFlags` should be a proper managed API too (bool properties).\r\n\r\n\u003e I would probably only personally commit to implementing the subset of options that I\u0027m interested in. Would this all be acceptable?\r\n\r\nI think so.",
                                           "updatedAt":  "2022-07-18T14:57:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G2FJk",
                                           "createdAt":  "2022-07-19T04:24:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "The approach of creating a Process object form an existing process handle sounds more powerful to me, allows for more interoperability and avoids OS-exclusive APIs.",
                                           "updatedAt":  "2022-07-19T04:24:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G3IWW",
                                           "createdAt":  "2022-07-19T10:04:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "\u003e The approach of creating a Process object form an existing process handle sounds more powerful to me, allows for more interoperability and avoids OS-exclusive APIs.\r\n\r\nAs I mentioned earlier, it does not actually solve the problem that this proposal is trying to solve.",
                                           "updatedAt":  "2022-07-19T10:04:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G4Kxq",
                                           "createdAt":  "2022-07-19T14:31:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e \u003e The approach of creating a Process object form an existing process handle sounds more powerful to me, allows for more interoperability and avoids OS-exclusive APIs.\r\n\r\n\u003e As I mentioned earlier, it does not actually solve the problem that this proposal is trying to solve.\r\n\r\nI think it can be an option if it is accompanied by several helper APIs like an API to create the input/output redirection streams to address your concern. Yes, such APIs would be OS-exclusive, but it is likely going to be much smaller public surface than all possible APIs to customize the process creation.",
                                           "updatedAt":  "2022-07-19T14:31:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G4Rm3",
                                           "createdAt":  "2022-07-19T14:54:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "\u003e I think it can be an option if it is accompanied by several helper APIs like an API to create the input/output redirection streams to address your concern.\r\n\r\nThat\u0027s a good point. I can include that as a possible alternative in the proposal.\r\n\r\nIt would need to also cover argument pasting and environment block creation, and the hypothetical `Process.Open(SafeProcessHandle)` API would also need overloads that accept redirection streams that were created prior.",
                                           "updatedAt":  "2022-07-19T14:54:35Z"
                                       }
                                   ],
                         "totalCount":  29
                     },
        "title":  "[API Proposal]: `ProcessStartInfo.CreationFlags` (for Windows only)",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71595",
        "createdAt":  "2022-07-03T16:20:46Z",
        "number":  71595,
        "author":  "NN---",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-09T09:55:08Z",
        "body":  "### Background and motivation\n\nThere are plenty of ways to create a process where .NET does not support this or where there is already a process handle from native method.\r\nCurrently there is no possibility to create a .NET Process object from the SafeProcessHandle.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Diagnostics;\r\n\r\npublic class Process\r\n{\r\n public Process(SafeProcessHandle process)\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nusing SafeProcessHandle processHandle = Win32Api.CreateProcess(…);\r\nProcess process = new Process(processHandle);\r\n```\r\n\n\n### Alternative Designs\n\nAdding per platform different process creation options.\nSuch as #71515\n\n### Risks\n\nThere should be no risk.\r\nWe already have a precedent with Socket constructor from SafeSockegHandle.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnbkbSw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5F7IxC",
                                           "createdAt":  "2022-07-03T16:20:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nThere are plenty of ways to create a process where .NET does not support this or where there is already a process handle from native method.\r\nCurrently there is no possibility to create a .NET Process object from the SafeProcessHandle.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Diagnostics;\r\n\r\npublic class Process\r\n{\r\n public Process(SafeProcessHandle process)\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nusing SafeProcessHandle processHandle = Win32Api.CreateProcess(…);\r\nProcess process = new Process(processHandle);\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nThere should be no risk.\r\nWe already have a precedent with Socket constructor from SafeSockegHandle.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNN---\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Diagnostics.Process`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-03T16:20:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F7MTa",
                                           "createdAt":  "2022-07-03T17:58:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Would this be a Windows-only API? Not clear to me how you\u0027d get a SafeProcessHandle from a native method on Linux or Mac.",
                                           "updatedAt":  "2022-07-03T17:58:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F7Nwf",
                                           "createdAt":  "2022-07-03T18:37:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "I am sure there is a way yes since they too have process ID\u0027s.",
                                           "updatedAt":  "2022-07-03T18:37:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F7Oen",
                                           "createdAt":  "2022-07-03T18:59:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "\u003e Would this be a Windows-only API? Not clear to me how you\u0027d get a SafeProcessHandle from a native method on Linux or Mac.\r\n\r\nOn non-Windows, `Process.SafeHandle` will return a pseudo-`SafeProcessHandle` wrapping the process ID, but there\u0027s no way to get the wrapped process ID from the handle, making the pseudo-handle *almost* useless since you can\u0027t get back to the `Process`. I don\u0027t think you can get such an instance from a P/Invoke, though I\u0027ve never tried.",
                                           "updatedAt":  "2022-07-03T18:59:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F7dsw",
                                           "createdAt":  "2022-07-04T00:50:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fbrosseau",
                                           "body":  "\u003e Would this be a Windows-only API? Not clear to me how you\u0027d get a SafeProcessHandle from a native method on Linux or Mac.\r\n\r\nModern linux does have proper process file descriptors, but that feature may be _too_ modern for dotnet support (I don\u0027t know?). They do solve many problems however - race conditions around PID recycling, etc.\r\n",
                                           "updatedAt":  "2022-07-04T00:57:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GB31H",
                                           "createdAt":  "2022-07-05T10:26:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "Thinking about this further, would it make more sense for this to be exposed as a `static` method like `GetProcessById`?\r\n```cs\r\nusing Microsoft.Win32.SafeHandles;\r\n\r\nnamespace System.Diagnostics;\r\n\r\npublic partial class Process\r\n{\r\n    public static Process GetProcessByHandle(SafeProcessHandle handle);\r\n    public static Process GetProcessByHandle(IntPtr handle); // potential extra API\r\n}\r\n```\r\nHaving a constructor would be consistent with `Socket`, but the `static` method is more consistent with the other APIs on `Process`. It\u0027d also open up the opportunity for the `Process` objects to be cached, though I don\u0027t believe they are currently, even for `GetProcessById`.",
                                           "updatedAt":  "2022-07-05T10:26:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GCjsd",
                                           "createdAt":  "2022-07-05T13:41:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCnUh4Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DaZombieKiller",
                                                                               "createdAt":  "2022-07-05T14:05:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jozkee",
                                                                               "createdAt":  "2022-07-19T04:32:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "For creating a Process from a native process handle (SafeProcessHandle or IntPtr) on Windows, I don\u0027t think caching would be a good idea. The handle might not have the same access rights as what the Process class specifies when it opens a process handle, and it might have access to a process that the current process is not normally authorised to open. If I created a Process object from such a handle, I would not want that to affect the behaviour of future Process.GetProcessById calls because such an effect would make my app more difficult to test. Also, I would not want Process.Dispose of a different process object to close my process handle prematurely.\n\nRe implementing this on Linux, [pidfd_open](https://man7.org/linux/man-pages/man2/pidfd_open.2.html) seems to be the function referenced in \u003chttps://github.com/dotnet/runtime/issues/71595#issuecomment-1173216048\u003e. If I read this correctly, a pidfd does not carry any access rights (if you receive a pidfd, you cannot use that to kill a process that you wouldn\u0027t otherwise be authorised to kill).",
                                           "updatedAt":  "2022-07-05T13:41:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6duC6M",
                                           "createdAt":  "2025-02-09T06:34:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "To move this forward, we would need to see a prototype implementation that would help us assess the feasibility. Marking as https://github.com/dotnet/runtime/labels/help%20wanted in case someone is interested in putting that together.",
                                           "updatedAt":  "2025-02-09T06:34:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6duDLT",
                                           "createdAt":  "2025-02-09T06:38:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NN---",
                                           "body":  "I am not sure what kind of implementation is acceptable.\nAdding a constructor as suggested and opening PR is not hard.",
                                           "updatedAt":  "2025-02-09T06:38:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6duRtL",
                                           "createdAt":  "2025-02-09T09:55:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEF6uqw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NN---",
                                                                               "createdAt":  "2025-02-11T05:40:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Adding a constructor as suggested and opening PR is not hard.\n\nThe proposed constructor is not implementable on Unix with the current implementation of SafeProcessHandle. SafeProcessHandle is implemented as [a wrapper over SafeWaitHandle on Unix](https://github.com/dotnet/runtime/blob/34ec4f5f0bf2b67764db8a6413ba9975c41bc35a/src/libraries/System.Diagnostics.Process/src/Microsoft/Win32/SafeHandles/SafeProcessHandle.Unix.cs#L27-L28). There is no good way for the user code to create the SafeProcessHandle on Unix and to get from the SafeWaitHandle to the process details.\n\nThe prototype implementation would have to change implementation of SafeProcessHandle. It is the non-trivial part that we are not sure about.",
                                           "updatedAt":  "2025-02-09T09:55:06Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "[API Proposal]: Process constructor from SafeProcessHandle",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Process",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71596",
        "createdAt":  "2022-07-03T19:01:24Z",
        "number":  71596,
        "author":  "AraHaan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCnCUfw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "DaZombieKiller",
                                            "createdAt":  "2022-07-05T08:15:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "MichalPetryka",
                                            "createdAt":  "2022-07-06T13:22:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "epeshk",
                                            "createdAt":  "2022-07-16T09:40:39Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-02-10T19:31:41Z",
        "body":  "### Background and motivation\r\n\r\nFor a long time I have used my own type to start processes (ProcessStartOptions) and it has became successful and I even recommended for multiple projects to copy the code to their program the moment they wanted an even simpler option to start their processes.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Diagnostics;\r\n\r\n/// \u003csummary\u003e\r\n/// Creates a Process with additional options.\r\n/// \u003c/summary\u003e\r\npublic sealed class ProcessStartOptions\r\n{\r\n    /// \u003csummary\u003e\r\n    /// Gets a value indicating whether the process is executing or not.\r\n    /// False if executed already.\r\n    /// \u003c/summary\u003e\r\n    public bool Executing { get; internal set; }\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets a value indicating whether the process is running or not.\r\n    /// False if not running yet or if the process terminated.\r\n    /// \u003c/summary\u003e\r\n    public bool Running { get; internal set; }\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets a value indicating whether the process start information to use when executing the process.\r\n    /// \u003c/summary\u003e\r\n    public ProcessStartInfo StartInfo { get; private set; }\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets a value indicating whether the process should wait indefinitely until exited.\r\n    /// \u003c/summary\u003e\r\n    public bool WaitForProcessExit { get; set; }\r\n\r\n    /// \u003csummary\u003e\r\n    /// Adds start information to this process options instance.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cparam name=\"fileName\"\u003eThe file name to execute.\u003c/param\u003e\r\n    /// \u003cparam name=\"arguments\"\u003eThe arguments to execute the file with.\u003c/param\u003e\r\n    /// \u003cparam name=\"redirectStandardOutput\"\u003eRedirect standard output on the executed file.\u003c/param\u003e\r\n    /// \u003cparam name=\"redirectStandardError\"\u003eRedirect standard error on the executed file.\u003c/param\u003e\r\n    /// \u003cparam name=\"useShellExecute\"\u003eTo optionally use shell execute to execute the process.\u003c/param\u003e\r\n    /// \u003cparam name=\"createNoWindow\"\u003eTo optionally create no Window on the executed process.\u003c/param\u003e\r\n    /// \u003cparam name=\"windowStyle\"\u003eThe window style to use on the executed process.\u003c/param\u003e\r\n    /// \u003cparam name=\"workingDirectory\"\u003eThe working directory of the executed process.\u003c/param\u003e\r\n    /// \u003creturns\u003eThis instance of \u003csee cref=\"ProcessStartOptions\" /\u003e.\u003c/returns\u003e\r\n    public ProcessStartOptions WithStartInformation(string fileName, string arguments, bool redirectStandardOutput, bool redirectStandardError, bool useShellExecute, bool createNoWindow, ProcessWindowStyle windowStyle, string workingDirectory);\r\n\r\n    /// \u003csummary\u003e\r\n    /// Executes the process.\r\n    /// \u003c/summary\u003e\r\n    /// \u003creturns\u003eThe process\u0027s redirected outputs.\u003c/returns\u003e\r\n    /// \u003cexception cref=\"InvalidOperationException\"\u003eWhen the instance\u0027s startup information is null.\u003c/exception\u003e\r\n    /// \u003cexception cref=\"FileNotFoundException\"\u003eWhen the file to the process to execute does not exist on disk.\u003c/exception\u003e\r\n    public string Start();\r\n\r\n    /// \u003csummary\u003e\r\n    /// Executes the process.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cparam name=\"startInfo\"\u003eThe process start information to use to start the process.\u003c/param\u003e\r\n    /// \u003creturns\u003eThe process\u0027s redirected outputs.\u003c/returns\u003e\r\n    /// \u003cexception cref=\"InvalidOperationException\"\u003eWhen the instance\u0027s startup information is null.\u003c/exception\u003e\r\n    /// \u003cexception cref=\"FileNotFoundException\"\u003eWhen the file to the process to execute does not exist on disk.\u003c/exception\u003e\r\n    public string Start(ProcessStartInfo startInfo);\r\n}\r\n```\r\n(implementation for those curious on how it works [here](https://github.com/Elskom/runtime/blob/main/src/Common/Common/ProcessStartOptions.cs))\r\n\r\n### API Usage\r\n\r\n```cs\r\npublic class Foo\r\n{\r\n    private static ProcessStartOptions ProcessStartOptions { get; }\r\n        = new ProcessStartOptions\r\n        {\r\n            WaitForProcessExit = true,\r\n        }.WithStartInformation(\r\n            $\"[process path here]\",\r\n            \"[process args here]\",\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            ProcessWindowStyle.Normal,\r\n            $\"[process working directory here]\");\r\n\r\n    // use the property below and it will dispose of the created process internally and return it\u0027s output and/or error streams as strings.\r\n    // Also can be used multiple times to spin up multiple instances which are managed by the ProcessStartOptions and\r\n    // will properly dispose of the underlying process for the developer (eliminates dispose bugs where they forgot to dispose).\r\n}\r\n```\r\n\r\nSuch code might also help simplify unit testing frameworks as well which also starts processes and redirects outputs.\r\n\r\n### Alternative Designs\r\n\r\nNone yet.\r\n\r\n### Risks\r\n\r\nMinimal, I think .NET 7 or .NET 8 could use this built in. It would also help me be able to delete some of my own code which would make it easier for me to maintain (without breaking anything) if this is approved for System.Diagnostics.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOneUMQw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5F7Ojm",
                                           "createdAt":  "2022-07-03T19:01:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nFor a long time I have used my own type to start processes (ProcessStartOptions) and it has became successful and I even recommended for multiple projects to copy the code to their program the moment they wanted an even simpler option to start their processes.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Diagnostics;\r\n\r\n/// \u003csummary\u003e\r\n/// Creates a Process with additional options.\r\n/// \u003c/summary\u003e\r\npublic sealed class ProcessStartOptions\r\n{\r\n    /// \u003csummary\u003e\r\n    /// Gets a value indicating whether the process is executing or not.\r\n    /// False if executed already.\r\n    /// \u003c/summary\u003e\r\n    public bool Executing { get; internal set; }\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets a value indicating whether the process is running or not.\r\n    /// False if not running yet or if the process terminated.\r\n    /// \u003c/summary\u003e\r\n    public bool Running { get; internal set; }\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets a value indicating whether the process start information to use when executing the process.\r\n    /// \u003c/summary\u003e\r\n    public ProcessStartInfo StartInfo { get; private set; }\r\n\r\n    /// \u003csummary\u003e\r\n    /// Gets or sets a value indicating whether the process should wait indefinitely until exited.\r\n    /// \u003c/summary\u003e\r\n    public bool WaitForProcessExit { get; set; }\r\n\r\n    /// \u003csummary\u003e\r\n    /// Adds start information to this process options instance.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cparam name=\"fileName\"\u003eThe file name to execute.\u003c/param\u003e\r\n    /// \u003cparam name=\"arguments\"\u003eThe arguments to execute the file with.\u003c/param\u003e\r\n    /// \u003cparam name=\"redirectStandardOutput\"\u003eRedirect standard output on the executed file.\u003c/param\u003e\r\n    /// \u003cparam name=\"redirectStandardError\"\u003eRedirect standard error on the executed file.\u003c/param\u003e\r\n    /// \u003cparam name=\"useShellExecute\"\u003eTo optionally use shell execute to execute the process.\u003c/param\u003e\r\n    /// \u003cparam name=\"createNoWindow\"\u003eTo optionally create no Window on the executed process.\u003c/param\u003e\r\n    /// \u003cparam name=\"windowStyle\"\u003eThe window style to use on the executed process.\u003c/param\u003e\r\n    /// \u003cparam name=\"workingDirectory\"\u003eThe working directory of the executed process.\u003c/param\u003e\r\n    /// \u003creturns\u003eThis instance of \u003csee cref=\"ProcessStartOptions\" /\u003e.\u003c/returns\u003e\r\n    public ProcessStartOptions WithStartInformation(string fileName, string arguments, bool redirectStandardOutput, bool redirectStandardError, bool useShellExecute, bool createNoWindow, ProcessWindowStyle windowStyle, string workingDirectory);\r\n\r\n    /// \u003csummary\u003e\r\n    /// Executes the process.\r\n    /// \u003c/summary\u003e\r\n    /// \u003creturns\u003eThe process\u0027s redirected outputs.\u003c/returns\u003e\r\n    /// \u003cexception cref=\"InvalidOperationException\"\u003eWhen the instance\u0027s startup information is null.\u003c/exception\u003e\r\n    /// \u003cexception cref=\"FileNotFoundException\"\u003eWhen the file to the process to execute does not exist on disk.\u003c/exception\u003e\r\n    public string Start();\r\n\r\n    /// \u003csummary\u003e\r\n    /// Executes the process.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cparam name=\"startInfo\"\u003eThe process start information to use to start the process.\u003c/param\u003e\r\n    /// \u003creturns\u003eThe process\u0027s redirected outputs.\u003c/returns\u003e\r\n    /// \u003cexception cref=\"InvalidOperationException\"\u003eWhen the instance\u0027s startup information is null.\u003c/exception\u003e\r\n    /// \u003cexception cref=\"FileNotFoundException\"\u003eWhen the file to the process to execute does not exist on disk.\u003c/exception\u003e\r\n    public string Start(ProcessStartInfo startInfo);\r\n}\r\n```\r\n\n\n### API Usage\n\n```cs\r\npublic class Foo\r\n{\r\n    private static ProcessStartOptions ProcessStartOptions { get; }\r\n        = new ProcessStartOptions\r\n        {\r\n            WaitForProcessExit = true,\r\n        }.WithStartInformation(\r\n            $\"[process path here]\",\r\n            \"[process args here]\",\r\n            false,\r\n            false,\r\n            false,\r\n            false,\r\n            ProcessWindowStyle.Normal,\r\n            $\"[process working directory here]\");\r\n\r\n    // use the property below and it will dispose of the created process internally and return it\u0027s output and/or error streams as strings.\r\n    // Also can be used multiple times to spin up multiple instances which are managed by the ProcessStartOptions and\r\n    // will properly dispose of the underlying process for the developer (eliminates dispose bugs where they forgot to dispose).\r\n}\r\n```\r\n\r\nSuch code might also help simplify unit testing frameworks as well which also starts processes and redirects outputs.\n\n### Alternative Designs\n\nNone yet.\n\n### Risks\n\nMinimal, I think .NET 7 or .NET 8 could use this built in. It would also help me be able to delete some of my own code which would make it easier for me to maintain (without breaking anything) if this is approved for System.Diagnostics.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAraHaan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-03T19:01:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GGXK0",
                                           "createdAt":  "2022-07-06T10:47:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "The proposal duplicates a lot of existing API from `Process`/`ProcessStartInfo`.\r\n\r\nI\u0027ve seen various of these `Process` wrappers and most of them deal with getting the stdout/stderr of the process in an easy way. This one does that too by returning a `string` from the `Start` method.\r\n\r\nMaybe you can focus on that specific use-case?",
                                           "updatedAt":  "2022-07-06T10:47:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GGrCv",
                                           "createdAt":  "2022-07-06T12:20:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "True, However unlike ``ProcessStartInfo`` it does not expose an ``WaitForProcessExit`` property that could be set so then it *could* wait for exit for you. Also unlike ``Process``, this will dispose of it when done (it would create an temp process then dispose when it exits). Likewise, it also does not have boolean values for when async code wants to check if it\u0027s spinned up process is ``Running``, or ``Executing``, or neither (which will tell it to restart it). However if startinfo was to get those members, and then Process getting the version of Start that returns a string it would be ok too.",
                                           "updatedAt":  "2022-07-06T12:20:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6duDa4",
                                           "createdAt":  "2025-02-09T06:42:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "@AraHaan Thank you for sharing this suggestion and your implementation for this. I agree with @tmds\u0027s comment that we would prefer for a proposal that doesn\u0027t introduce as much of a concept duplication. If you want to edit the proposal to reflect that and comment back here, we can take another look.",
                                           "updatedAt":  "2025-02-09T06:42:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6d4vYK",
                                           "createdAt":  "2025-02-10T18:29:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "Alright, I will see what I can do.",
                                           "updatedAt":  "2025-02-10T18:29:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6d5QxD",
                                           "createdAt":  "2025-02-10T19:28:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "I am thinking of a single ``Start`` method in this class, with ``StartInfo`` + standard inputs, output, and redirection support for free and as members of an internal class that is part of it\u0027s implementation details, I am thinking if I should combine both bools as well for ``Executing`` and ``Running`` or some other method of getting if they are still \"running\" or executing even if the process creates a mutex and \"hides itself\" from any and all processes including the one that started it. The original goal of this class to it allow to detect if a process that does hide itself from other processes is still running anyways but those 2 bools feels like a little hack to me so I should consider if there is not a better solution to that issue.\n\nLikewise, I wonder if instead of exposing if the process is running to users outside of the class if that type of functionality could be internal to it and have the ``Start`` method throw if it is still running (when trying to run a specific process from multiple threads).",
                                           "updatedAt":  "2025-02-10T19:31:41Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal]: Add ProcessStartOptions to System.Diagnostics.",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Process",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76140",
        "createdAt":  "2022-09-24T21:53:44Z",
        "number":  76140,
        "author":  "karelz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:00:16Z",
        "body":  "Affected tests:\r\n- **ProcessStartInfoEnvironmentDoesNotThrowForCaseSensitiveDuplicates** - `System.Diagnostics.Tests.ProcessStartInfoTests.ProcessStartInfoEnvironmentDoesNotThrowForCaseSensitiveDuplicates`\r\n- **ProcessStartInfoEnvironmentVariablesDoesNotThrowForCaseSensitiveDuplicates** - `System.Diagnostics.Tests.ProcessStartInfoTests.ProcessStartInfoEnvironmentVariablesDoesNotThrowForCaseSensitiveDuplicates`\r\n- **EnvironmentGetEnvironmentVariablesIsCaseSensitive** - `System.Diagnostics.Tests.ProcessStartInfoTests.EnvironmentGetEnvironmentVariablesIsCaseSensitive`\r\n\r\nRegression on 9/21 - first occurrence in PR [25181](https://runfo.azurewebsites.net/view/build/?number=25181)\r\n\r\nRunfo queries:\r\n- ProcessStartInfoEnvironmentDoesNotThrowForCaseSensitiveDuplicates - [last 30 days](https://runfo.azurewebsites.net/search/tests/?q=started%3A%7E30+definition%3Aruntime-extra-platforms+name%3A%22system.diagnostics.tests.processstartinfotests.processstartinfoenvironmentdoesnotthrowforcasesensitiveduplicates%22)\r\n- ProcessStartInfoEnvironmentVariablesDoesNotThrowForCaseSensitiveDuplicates - [last 30 days](https://runfo.azurewebsites.net/search/tests/?q=started%3A~30+definition%3Aruntime-extra-platforms+name%3A%22system.diagnostics.tests.processstartinfotests.processstartinfoenvironmentvariablesdoesnotthrowforcasesensitiveduplicates%22)\r\n- EnvironmentGetEnvironmentVariablesIsCaseSensitive - [last 30 days](https://runfo.azurewebsites.net/search/tests/?q=started%3A%7E30+definition%3Aruntime-extra-platforms+name%3A%22system.diagnostics.tests.processstartinfotests.environmentgetenvironmentvariablesiscasesensitive%22)\r\n\r\nAs of 9/24 there are 10 hits on the same builds in each test:\r\n- All 10 hits on platform `net7.0-Linux-Release-arm64-Mono_Release_LinuxBionic-Windows.10.Amd64.Android.Open`\r\n\r\nDay | Run | Logs\r\n-- | -- | --\r\n9/23 | Rolling run [28538](https://runfo.azurewebsites.net/view/build/?number=28538) (7.0) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-a988ea84eb46494894/System.Diagnostics.Process.Tests/1/console.07adf68a.log?%3Fhelixlogtype%3Dresult)\r\n9/23 | Rolling run [28539](https://runfo.azurewebsites.net/view/build/?number=28539) (release/5 - ???) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-5-c689650c01414a9bad/System.Diagnostics.Process.Tests/1/console.0f7c6a50.log?%3Fhelixlogtype%3Dresult)\r\n9/23 | PR [28221](https://runfo.azurewebsites.net/view/build/?number=28221) (7.0) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-76052-merge-6772b9cdcd464bd8ba/System.Diagnostics.Process.Tests/1/console.903ca50b.log?%3Fhelixlogtype%3Dresult)\r\n9/23 | PR [27908](https://runfo.azurewebsites.net/view/build/?number=27908) (main) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-75612-merge-e93451d286614532a8/System.Diagnostics.Process.Tests/1/console.a643c4fb.log?%3Fhelixlogtype%3Dresult)\r\n9/22 | Rolling run [27273](https://runfo.azurewebsites.net/view/build/?number=27273) (release/5 - ???) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-5-9cd780087f674bf798/System.Diagnostics.Process.Tests/1/console.06f15d4f.log?%3Fhelixlogtype%3Dresult)\r\n9/22 | Rolling run [27269](https://runfo.azurewebsites.net/view/build/?number=27269) (7.0) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-f1537a3ca14e4a3883/System.Diagnostics.Process.Tests/1/console.5d1fa961.log?%3Fhelixlogtype%3Dresult)\r\n9/22 | Rolling run [26575](https://runfo.azurewebsites.net/view/build/?number=26575) (7.0-rc2) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-rc2-d34aa0dbad8c45ff8f/System.Diagnostics.Process.Tests/1/console.f5ea6025.log?%3Fhelixlogtype%3Dresult)\r\n9/22 | PR [25945](https://runfo.azurewebsites.net/view/build/?number=25945) (main) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-76000-merge-cbf972e573f349e584/System.Diagnostics.Process.Tests/1/console.7f5caf76.log?%3Fhelixlogtype%3Dresult)\r\n9/21 | Rolling run [25911](https://runfo.azurewebsites.net/view/build/?number=25911) (7.0) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-07f685fcf37a43c5bc/System.Diagnostics.Process.Tests/1/console.1a32ff1a.log?%3Fhelixlogtype%3Dresult)\r\n9/21 | PR [25181](https://runfo.azurewebsites.net/view/build/?number=25181) (main) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-75730-merge-9f8608e565d3469aba/System.Diagnostics.Process.Tests/1/console.cc1da050.log?%3Fhelixlogtype%3Dresult)\r\n\r\n```json\r\n {\r\n    \"ErrorMessage\" : \" The input is not a valid Base-64 string as it contains a non-base 64 character\",\r\n    \"BuildRetry\": false\r\n }\r\n```\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** \r\n**Result validation: :warning:** Validation could not be done without an Azure DevOps build URL on the issue. Please add it to the \"**Build: :mag_right:**\" line.\r\n\u003c!-- Known issue validation end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXBzEzQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5K7WOB",
                                           "createdAt":  "2022-09-24T21:53:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAffected tests:\r\n- **ProcessStartInfoEnvironmentDoesNotThrowForCaseSensitiveDuplicates** - `System.Diagnostics.Tests.ProcessStartInfoTests.ProcessStartInfoEnvironmentDoesNotThrowForCaseSensitiveDuplicates`\r\n- **ProcessStartInfoEnvironmentVariablesDoesNotThrowForCaseSensitiveDuplicates** - `System.Diagnostics.Tests.ProcessStartInfoTests.ProcessStartInfoEnvironmentVariablesDoesNotThrowForCaseSensitiveDuplicates`\r\n- **EnvironmentGetEnvironmentVariablesIsCaseSensitive** - `System.Diagnostics.Tests.ProcessStartInfoTests.EnvironmentGetEnvironmentVariablesIsCaseSensitive`\r\n\r\nRegression on 9/21 - first occurrence in PR [25181](https://runfo.azurewebsites.net/view/build/?number=25181)\r\n\r\nRunfo queries:\r\n- ProcessStartInfoEnvironmentDoesNotThrowForCaseSensitiveDuplicates - [last 30 days](https://runfo.azurewebsites.net/search/tests/?q=started%3A%7E30+definition%3Aruntime-extra-platforms+name%3A%22system.diagnostics.tests.processstartinfotests.processstartinfoenvironmentdoesnotthrowforcasesensitiveduplicates%22)\r\n- ProcessStartInfoEnvironmentVariablesDoesNotThrowForCaseSensitiveDuplicates - [last 30 days](https://runfo.azurewebsites.net/search/tests/?q=started%3A~30+definition%3Aruntime-extra-platforms+name%3A%22system.diagnostics.tests.processstartinfotests.processstartinfoenvironmentvariablesdoesnotthrowforcasesensitiveduplicates%22)\r\n- EnvironmentGetEnvironmentVariablesIsCaseSensitive - [last 30 days](https://runfo.azurewebsites.net/search/tests/?q=started%3A%7E30+definition%3Aruntime-extra-platforms+name%3A%22system.diagnostics.tests.processstartinfotests.environmentgetenvironmentvariablesiscasesensitive%22)\r\n\r\nAs of 9/24 there are 10 hits on the same builds in each test:\r\n\r\nDay | Run | Logs\r\n-- | -- | --\r\n9/23 | Rolling run [28538](https://runfo.azurewebsites.net/view/build/?number=28538) (7.0) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-a988ea84eb46494894/System.Diagnostics.Process.Tests/1/console.07adf68a.log?%3Fhelixlogtype%3Dresult)\r\n9/23 | Rolling run [28539](https://runfo.azurewebsites.net/view/build/?number=28539) (release/5 - ???) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-5-c689650c01414a9bad/System.Diagnostics.Process.Tests/1/console.0f7c6a50.log?%3Fhelixlogtype%3Dresult)\r\n9/23 | PR [28221](https://runfo.azurewebsites.net/view/build/?number=28221) (7.0) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-76052-merge-6772b9cdcd464bd8ba/System.Diagnostics.Process.Tests/1/console.903ca50b.log?%3Fhelixlogtype%3Dresult)\r\n9/23 | PR [27908](https://runfo.azurewebsites.net/view/build/?number=27908) (main) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-75612-merge-e93451d286614532a8/System.Diagnostics.Process.Tests/1/console.a643c4fb.log?%3Fhelixlogtype%3Dresult)\r\n9/22 | Rolling run [27273](https://runfo.azurewebsites.net/view/build/?number=27273) (release/5 - ???) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-5-9cd780087f674bf798/System.Diagnostics.Process.Tests/1/console.06f15d4f.log?%3Fhelixlogtype%3Dresult)\r\n9/22 | Rolling run [27269](https://runfo.azurewebsites.net/view/build/?number=27269) (7.0) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-f1537a3ca14e4a3883/System.Diagnostics.Process.Tests/1/console.5d1fa961.log?%3Fhelixlogtype%3Dresult)\r\n9/22 | Rolling run [26575](https://runfo.azurewebsites.net/view/build/?number=26575) (7.0-rc2) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-rc2-d34aa0dbad8c45ff8f/System.Diagnostics.Process.Tests/1/console.f5ea6025.log?%3Fhelixlogtype%3Dresult)\r\n9/22 | PR [25945](https://runfo.azurewebsites.net/view/build/?number=25945) (main) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-76000-merge-cbf972e573f349e584/System.Diagnostics.Process.Tests/1/console.7f5caf76.log?%3Fhelixlogtype%3Dresult)\r\n9/21 | Rolling run [25911](https://runfo.azurewebsites.net/view/build/?number=25911) (7.0) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-07f685fcf37a43c5bc/System.Diagnostics.Process.Tests/1/console.1a32ff1a.log?%3Fhelixlogtype%3Dresult)\r\n9/21 | PR [25181](https://runfo.azurewebsites.net/view/build/?number=25181) (main) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-75730-merge-9f8608e565d3469aba/System.Diagnostics.Process.Tests/1/console.cc1da050.log?%3Fhelixlogtype%3Dresult)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekarelz\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics`, `blocking-clean-ci`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-24T21:53:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K7WP5",
                                           "createdAt":  "2022-09-24T21:55:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@carlossanlop any idea what is the release/5 branch? Is it 5.0.x servicing?",
                                           "updatedAt":  "2022-09-24T21:55:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K7WSk",
                                           "createdAt":  "2022-09-24T21:56:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAffected tests:\r\n- **ProcessStartInfoEnvironmentDoesNotThrowForCaseSensitiveDuplicates** - `System.Diagnostics.Tests.ProcessStartInfoTests.ProcessStartInfoEnvironmentDoesNotThrowForCaseSensitiveDuplicates`\r\n- **ProcessStartInfoEnvironmentVariablesDoesNotThrowForCaseSensitiveDuplicates** - `System.Diagnostics.Tests.ProcessStartInfoTests.ProcessStartInfoEnvironmentVariablesDoesNotThrowForCaseSensitiveDuplicates`\r\n- **EnvironmentGetEnvironmentVariablesIsCaseSensitive** - `System.Diagnostics.Tests.ProcessStartInfoTests.EnvironmentGetEnvironmentVariablesIsCaseSensitive`\r\n\r\nRegression on 9/21 - first occurrence in PR [25181](https://runfo.azurewebsites.net/view/build/?number=25181)\r\n\r\nRunfo queries:\r\n- ProcessStartInfoEnvironmentDoesNotThrowForCaseSensitiveDuplicates - [last 30 days](https://runfo.azurewebsites.net/search/tests/?q=started%3A%7E30+definition%3Aruntime-extra-platforms+name%3A%22system.diagnostics.tests.processstartinfotests.processstartinfoenvironmentdoesnotthrowforcasesensitiveduplicates%22)\r\n- ProcessStartInfoEnvironmentVariablesDoesNotThrowForCaseSensitiveDuplicates - [last 30 days](https://runfo.azurewebsites.net/search/tests/?q=started%3A~30+definition%3Aruntime-extra-platforms+name%3A%22system.diagnostics.tests.processstartinfotests.processstartinfoenvironmentvariablesdoesnotthrowforcasesensitiveduplicates%22)\r\n- EnvironmentGetEnvironmentVariablesIsCaseSensitive - [last 30 days](https://runfo.azurewebsites.net/search/tests/?q=started%3A%7E30+definition%3Aruntime-extra-platforms+name%3A%22system.diagnostics.tests.processstartinfotests.environmentgetenvironmentvariablesiscasesensitive%22)\r\n\r\nAs of 9/24 there are 10 hits on the same builds in each test:\r\n- All 10 hits on platform `net7.0-Linux-Release-arm64-Mono_Release_LinuxBionic-Windows.10.Amd64.Android.Open`\r\n\r\nDay | Run | Logs\r\n-- | -- | --\r\n9/23 | Rolling run [28538](https://runfo.azurewebsites.net/view/build/?number=28538) (7.0) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-a988ea84eb46494894/System.Diagnostics.Process.Tests/1/console.07adf68a.log?%3Fhelixlogtype%3Dresult)\r\n9/23 | Rolling run [28539](https://runfo.azurewebsites.net/view/build/?number=28539) (release/5 - ???) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-5-c689650c01414a9bad/System.Diagnostics.Process.Tests/1/console.0f7c6a50.log?%3Fhelixlogtype%3Dresult)\r\n9/23 | PR [28221](https://runfo.azurewebsites.net/view/build/?number=28221) (7.0) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-76052-merge-6772b9cdcd464bd8ba/System.Diagnostics.Process.Tests/1/console.903ca50b.log?%3Fhelixlogtype%3Dresult)\r\n9/23 | PR [27908](https://runfo.azurewebsites.net/view/build/?number=27908) (main) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-75612-merge-e93451d286614532a8/System.Diagnostics.Process.Tests/1/console.a643c4fb.log?%3Fhelixlogtype%3Dresult)\r\n9/22 | Rolling run [27273](https://runfo.azurewebsites.net/view/build/?number=27273) (release/5 - ???) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-5-9cd780087f674bf798/System.Diagnostics.Process.Tests/1/console.06f15d4f.log?%3Fhelixlogtype%3Dresult)\r\n9/22 | Rolling run [27269](https://runfo.azurewebsites.net/view/build/?number=27269) (7.0) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-f1537a3ca14e4a3883/System.Diagnostics.Process.Tests/1/console.5d1fa961.log?%3Fhelixlogtype%3Dresult)\r\n9/22 | Rolling run [26575](https://runfo.azurewebsites.net/view/build/?number=26575) (7.0-rc2) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-rc2-d34aa0dbad8c45ff8f/System.Diagnostics.Process.Tests/1/console.f5ea6025.log?%3Fhelixlogtype%3Dresult)\r\n9/22 | PR [25945](https://runfo.azurewebsites.net/view/build/?number=25945) (main) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-76000-merge-cbf972e573f349e584/System.Diagnostics.Process.Tests/1/console.7f5caf76.log?%3Fhelixlogtype%3Dresult)\r\n9/21 | Rolling run [25911](https://runfo.azurewebsites.net/view/build/?number=25911) (7.0) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-07f685fcf37a43c5bc/System.Diagnostics.Process.Tests/1/console.1a32ff1a.log?%3Fhelixlogtype%3Dresult)\r\n9/21 | PR [25181](https://runfo.azurewebsites.net/view/build/?number=25181) (main) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-75730-merge-9f8608e565d3469aba/System.Diagnostics.Process.Tests/1/console.cc1da050.log?%3Fhelixlogtype%3Dresult)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekarelz\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics`, `blocking-clean-ci`, `os-android`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-24T21:56:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K7WVP",
                                           "createdAt":  "2022-09-24T21:58:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "/cc @mdh1418 ",
                                           "updatedAt":  "2022-09-24T21:58:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K7ycu",
                                           "createdAt":  "2022-09-25T12:51:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "All 3 of the listed tests require RemoteExecutor support, which is not supported on Android and I think extends to LB. ",
                                           "updatedAt":  "2022-09-25T12:51:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LARrG",
                                           "createdAt":  "2022-09-26T17:15:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "\u003e @carlossanlop any idea what is the release/5 branch? Is it 5.0.x servicing?\r\n\r\n@karelz for runtime specifically, 5.0 is handled internally only, since it\u0027s out of support. Will send you the branch via chat.",
                                           "updatedAt":  "2022-09-26T17:15:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LXfPX",
                                           "createdAt":  "2022-10-01T18:38:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e All 3 of the listed tests require RemoteExecutor support, which is not supported on Android and I think extends to LB.\r\n\r\nIt is not what the code says: https://github.com/dotnet/arcade/blob/5fb434d9e8b99ff4d64381ef2f0c577b314a56e2/src/Microsoft.DotNet.RemoteExecutor/src/RemoteExecutor.cs#L99-L108",
                                           "updatedAt":  "2022-10-01T18:38:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cEhQt",
                                           "createdAt":  "2023-05-11T21:13:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAffected tests:\r\n- **ProcessStartInfoEnvironmentDoesNotThrowForCaseSensitiveDuplicates** - `System.Diagnostics.Tests.ProcessStartInfoTests.ProcessStartInfoEnvironmentDoesNotThrowForCaseSensitiveDuplicates`\r\n- **ProcessStartInfoEnvironmentVariablesDoesNotThrowForCaseSensitiveDuplicates** - `System.Diagnostics.Tests.ProcessStartInfoTests.ProcessStartInfoEnvironmentVariablesDoesNotThrowForCaseSensitiveDuplicates`\r\n- **EnvironmentGetEnvironmentVariablesIsCaseSensitive** - `System.Diagnostics.Tests.ProcessStartInfoTests.EnvironmentGetEnvironmentVariablesIsCaseSensitive`\r\n\r\nRegression on 9/21 - first occurrence in PR [25181](https://runfo.azurewebsites.net/view/build/?number=25181)\r\n\r\nRunfo queries:\r\n- ProcessStartInfoEnvironmentDoesNotThrowForCaseSensitiveDuplicates - [last 30 days](https://runfo.azurewebsites.net/search/tests/?q=started%3A%7E30+definition%3Aruntime-extra-platforms+name%3A%22system.diagnostics.tests.processstartinfotests.processstartinfoenvironmentdoesnotthrowforcasesensitiveduplicates%22)\r\n- ProcessStartInfoEnvironmentVariablesDoesNotThrowForCaseSensitiveDuplicates - [last 30 days](https://runfo.azurewebsites.net/search/tests/?q=started%3A~30+definition%3Aruntime-extra-platforms+name%3A%22system.diagnostics.tests.processstartinfotests.processstartinfoenvironmentvariablesdoesnotthrowforcasesensitiveduplicates%22)\r\n- EnvironmentGetEnvironmentVariablesIsCaseSensitive - [last 30 days](https://runfo.azurewebsites.net/search/tests/?q=started%3A%7E30+definition%3Aruntime-extra-platforms+name%3A%22system.diagnostics.tests.processstartinfotests.environmentgetenvironmentvariablesiscasesensitive%22)\r\n\r\nAs of 9/24 there are 10 hits on the same builds in each test:\r\n- All 10 hits on platform `net7.0-Linux-Release-arm64-Mono_Release_LinuxBionic-Windows.10.Amd64.Android.Open`\r\n\r\nDay | Run | Logs\r\n-- | -- | --\r\n9/23 | Rolling run [28538](https://runfo.azurewebsites.net/view/build/?number=28538) (7.0) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-a988ea84eb46494894/System.Diagnostics.Process.Tests/1/console.07adf68a.log?%3Fhelixlogtype%3Dresult)\r\n9/23 | Rolling run [28539](https://runfo.azurewebsites.net/view/build/?number=28539) (release/5 - ???) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-5-c689650c01414a9bad/System.Diagnostics.Process.Tests/1/console.0f7c6a50.log?%3Fhelixlogtype%3Dresult)\r\n9/23 | PR [28221](https://runfo.azurewebsites.net/view/build/?number=28221) (7.0) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-76052-merge-6772b9cdcd464bd8ba/System.Diagnostics.Process.Tests/1/console.903ca50b.log?%3Fhelixlogtype%3Dresult)\r\n9/23 | PR [27908](https://runfo.azurewebsites.net/view/build/?number=27908) (main) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-75612-merge-e93451d286614532a8/System.Diagnostics.Process.Tests/1/console.a643c4fb.log?%3Fhelixlogtype%3Dresult)\r\n9/22 | Rolling run [27273](https://runfo.azurewebsites.net/view/build/?number=27273) (release/5 - ???) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-5-9cd780087f674bf798/System.Diagnostics.Process.Tests/1/console.06f15d4f.log?%3Fhelixlogtype%3Dresult)\r\n9/22 | Rolling run [27269](https://runfo.azurewebsites.net/view/build/?number=27269) (7.0) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-f1537a3ca14e4a3883/System.Diagnostics.Process.Tests/1/console.5d1fa961.log?%3Fhelixlogtype%3Dresult)\r\n9/22 | Rolling run [26575](https://runfo.azurewebsites.net/view/build/?number=26575) (7.0-rc2) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-rc2-d34aa0dbad8c45ff8f/System.Diagnostics.Process.Tests/1/console.f5ea6025.log?%3Fhelixlogtype%3Dresult)\r\n9/22 | PR [25945](https://runfo.azurewebsites.net/view/build/?number=25945) (main) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-76000-merge-cbf972e573f349e584/System.Diagnostics.Process.Tests/1/console.7f5caf76.log?%3Fhelixlogtype%3Dresult)\r\n9/21 | Rolling run [25911](https://runfo.azurewebsites.net/view/build/?number=25911) (7.0) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-07f685fcf37a43c5bc/System.Diagnostics.Process.Tests/1/console.1a32ff1a.log?%3Fhelixlogtype%3Dresult)\r\n9/21 | PR [25181](https://runfo.azurewebsites.net/view/build/?number=25181) (main) | [Console](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-75730-merge-9f8608e565d3469aba/System.Diagnostics.Process.Tests/1/console.cc1da050.log?%3Fhelixlogtype%3Dresult)\r\n\r\n```json\r\n {\r\n    \"ErrorMessage\" : \" The input is not a valid Base-64 string as it contains a non-base 64 character\",\r\n    \"BuildRetry\": false\r\n }\r\n```\r\n\u003c!--Known issue error report start --\u003e\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[269752](https://dev.azure.com/dnceng-public/public/_build/results?buildId=269752)|dotnet/runtime|[normal-System.Runtime.Extensions.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=269752\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=5318494\u0026resultId=139312)|dotnet/runtime#85920|\r\n|[268070](https://dev.azure.com/dnceng-public/public/_build/results?buildId=268070)|dotnet/runtime|[System.Tests.ConvertTests.Base64_AllMethodsRoundtripConsistently](https://dev.azure.com/dnceng-public/public/_build/results?buildId=268070\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=5280624\u0026resultId=141591)|dotnet/runtime#85920|\r\n|[266368](https://dev.azure.com/dnceng-public/public/_build/results?buildId=266368)|dotnet/runtime|[normal-System.Runtime.Extensions.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=266368\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=5244640\u0026resultId=149547)|dotnet/runtime#85920|\r\n|[261505](https://dev.azure.com/dnceng-public/public/_build/results?buildId=261505)|dotnet/runtime|[System.Diagnostics.Process.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=261505\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=5126934\u0026resultId=177087)||\r\n|[255151](https://dev.azure.com/dnceng-public/public/_build/results?buildId=255151)|dotnet/runtime|[System.Diagnostics.Process.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=255151\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4969654\u0026resultId=179639)||\r\n|[253657](https://dev.azure.com/dnceng-public/public/_build/results?buildId=253657)|dotnet/runtime|[System.Diagnostics.Process.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=253657\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4929848\u0026resultId=179607)||\r\n|[250732](https://dev.azure.com/dnceng-public/public/_build/results?buildId=250732)|dotnet/runtime|[System.Diagnostics.Process.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=250732\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4857506\u0026resultId=180073)||\r\n|[248101](https://dev.azure.com/dnceng-public/public/_build/results?buildId=248101)|dotnet/runtime|[System.Diagnostics.Process.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=248101\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4788468\u0026resultId=179265)||\r\n|[243650](https://dev.azure.com/dnceng-public/public/_build/results?buildId=243650)|dotnet/runtime|[System.Diagnostics.Process.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=243650\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4694862\u0026resultId=198009)|dotnet/runtime#82045|\r\n|[241763](https://dev.azure.com/dnceng-public/public/_build/results?buildId=241763)|dotnet/runtime|[System.Diagnostics.Process.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=241763\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4647826\u0026resultId=210134)|dotnet/runtime#82045|\r\n|[236899](https://dev.azure.com/dnceng-public/public/_build/results?buildId=236899)|dotnet/runtime|[System.Diagnostics.Process.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=236899\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4527806\u0026resultId=180274)||\r\n|[235129](https://dev.azure.com/dnceng-public/public/_build/results?buildId=235129)|dotnet/runtime|[System.Diagnostics.Process.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=235129\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4485046\u0026resultId=180931)||\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|1|3|12|\r\n\u003c!--Known issue error report end --\u003e\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekarelz\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics`, `area-System.Diagnostics.Process`, `disabled-test`, `os-android`, `Known Build Error`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-11T21:13:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cHMTN",
                                           "createdAt":  "2023-05-12T08:39:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "I don\u0027t understand one thing: in #76585 @steveisok has disabled this test by applying following attribute:\r\n\r\n```cs\r\n[ActiveIssue(\"https://github.com/dotnet/runtime/issues/76140\", TestPlatforms.LinuxBionic)]\r\n```\r\n\r\nbut it keeps failing for `Mono_Release_LinuxBionic-Windows.10.Amd64.Android.Open`\r\n\r\nWhy is that?\r\n\r\n",
                                           "updatedAt":  "2023-05-12T08:39:59Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "3 System.Diagnostics tests failing - System.FormatException : The input is not a valid Base-64",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "disabled-test",
                       "os-android",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76153",
        "createdAt":  "2022-09-25T18:07:15Z",
        "number":  76153,
        "author":  "ErikXu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-09-27T22:26:57Z",
        "body":  "When I run command `yum update -y`, the output is \r\n\r\n``` bash\r\n...\r\nDelta RPMs disabled because /usr/bin/applydeltarpm not installed.\r\n(1/147): libreport-python-2.1.11-53.el7.centos.x86_64.rpm                                                           |  71 kB  00:00:00\r\n(2/147): libreport-plugin-ureport-2.1.11-53.el7.centos.x86_64.rpm                                                   |  59 kB  00:00:00\r\n(3/147): libreport-web-2.1.11-53.el7.centos.x86_64.rpm                                                              |  58 kB  00:00:00\r\n(4/147): libseccomp-2.3.1-4.el7.x86_64.rpm                                                                          |  56 kB  00:00:00\r\n(5/147): libselinux-2.5-15.el7.i686.rpm                                                                             | 166 kB  00:00:00\r\n(6/147): libselinux-2.5-15.el7.x86_64.rpm                                                                           | 162 kB  00:00:00\r\n(7/147): libselinux-python-2.5-15.el7.x86_64.rpm                                                                    | 236 kB  00:00:00\r\n(8/147): libselinux-utils-2.5-15.el7.x86_64.rpm                                                                     | 151 kB  00:00:00\r\n(9/147): libss-1.42.9-19.el7.x86_64.rpm                                                                             |  47 kB  00:00:00\r\n...\r\n(328/328): zlib-1.2.7-20.el7_9.i686.rpm                                                                             |  91 kB  00:00:00\r\n-------------------------------------------------------------------------------------------------------------------------------------------\r\nTotal                                                                                                       20 MB/s | 360 MB  00:00:17\r\nRunning transaction check\r\nRunning transaction test\r\nTransaction test succeeded\r\nRunning transaction\r\n...\r\n```\r\n\r\nThen I use `Process.Start()` to run `yum update -y` in a new machine, the output is \r\n\r\n``` bash\r\n...\r\nDelta RPMs disabled because /usr/bin/applydeltarpm not installed.\r\n--------------------------------------------------------------------------------\r\nTotal                                               21 MB/s | 360 MB  00:17\r\nRunning transaction check\r\nRunning transaction test\r\nTransaction test succeeded\r\nRunning transaction\r\n...\r\n```\r\n\r\nThe progress part is missing, and my code is written in .Net 6: \r\n\r\n``` csharp\r\nnamespace Test\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var code = ExecuteCommand(\"yum update -y\");\r\n        }\r\n\r\n        public static int ExecuteCommand(string command)\r\n        {\r\n            var escapedArgs = command.Replace(\"\\\"\", \"\\\\\\\"\");\r\n            var process = new Process\r\n            {\r\n                StartInfo = new ProcessStartInfo\r\n                {\r\n                    FileName = \"/bin/bash\",\r\n                    Arguments = $\"-c \\\"{escapedArgs}\\\"\",\r\n                    RedirectStandardInput = true,\r\n                    RedirectStandardOutput = true,\r\n                    RedirectStandardError = true,\r\n                    UseShellExecute = false,\r\n                    CreateNoWindow = true\r\n                }\r\n            };\r\n\r\n            process.OutputDataReceived += new DataReceivedEventHandler(OutputHandler);\r\n            process.ErrorDataReceived += new DataReceivedEventHandler(OutputHandler);\r\n\r\n            process.Start();\r\n            process.BeginOutputReadLine();\r\n            process.BeginErrorReadLine();\r\n            process.WaitForExit();\r\n\r\n            return process.ExitCode;\r\n        }\r\n\r\n        private static void OutputHandler(object sendingProcess, DataReceivedEventArgs outLine)\r\n        {\r\n            if (outLine.Data != null)\r\n            {\r\n                Console.WriteLine(outLine.Data);\r\n            }\r\n        }\r\n    }\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSwhTwg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5K8BGC",
                                           "createdAt":  "2022-09-25T18:07:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-09-25T18:07:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K8G1T",
                                           "createdAt":  "2022-09-25T20:13:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Are you sure the process even outputs the progress when you redirect the output? I would expect that to be the culprit and you can easily verify it with running \r\n\r\n```\r\nyum update -y \u003e yum.txt\r\ncat yum.txt\r\n```",
                                           "updatedAt":  "2022-09-25T20:13:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K8G3Y",
                                           "createdAt":  "2022-09-25T20:14:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen I run command `yum update -y`, the output is \r\n\r\n``` bash\r\n...\r\nDelta RPMs disabled because /usr/bin/applydeltarpm not installed.\r\n(1/147): libreport-python-2.1.11-53.el7.centos.x86_64.rpm                                                           |  71 kB  00:00:00\r\n(2/147): libreport-plugin-ureport-2.1.11-53.el7.centos.x86_64.rpm                                                   |  59 kB  00:00:00\r\n(3/147): libreport-web-2.1.11-53.el7.centos.x86_64.rpm                                                              |  58 kB  00:00:00\r\n(4/147): libseccomp-2.3.1-4.el7.x86_64.rpm                                                                          |  56 kB  00:00:00\r\n(5/147): libselinux-2.5-15.el7.i686.rpm                                                                             | 166 kB  00:00:00\r\n(6/147): libselinux-2.5-15.el7.x86_64.rpm                                                                           | 162 kB  00:00:00\r\n(7/147): libselinux-python-2.5-15.el7.x86_64.rpm                                                                    | 236 kB  00:00:00\r\n(8/147): libselinux-utils-2.5-15.el7.x86_64.rpm                                                                     | 151 kB  00:00:00\r\n(9/147): libss-1.42.9-19.el7.x86_64.rpm                                                                             |  47 kB  00:00:00\r\n...\r\n(328/328): zlib-1.2.7-20.el7_9.i686.rpm                                                                             |  91 kB  00:00:00\r\n-------------------------------------------------------------------------------------------------------------------------------------------\r\nTotal                                                                                                       20 MB/s | 360 MB  00:00:17\r\nRunning transaction check\r\nRunning transaction test\r\nTransaction test succeeded\r\nRunning transaction\r\n...\r\n```\r\n\r\nThen I use `Process.Start()` to run `yum update -y` in a new machine, the output is \r\n\r\n``` bash\r\n...\r\nDelta RPMs disabled because /usr/bin/applydeltarpm not installed.\r\n--------------------------------------------------------------------------------\r\nTotal                                               21 MB/s | 360 MB  00:17\r\nRunning transaction check\r\nRunning transaction test\r\nTransaction test succeeded\r\nRunning transaction\r\n...\r\n```\r\n\r\nThe progress part is missing, and my code is written in .Net 6: \r\n\r\n``` csharp\r\nnamespace Test\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var code = ExecuteCommand(\"yum update -y\");\r\n        }\r\n\r\n        public static int ExecuteCommand(string command)\r\n        {\r\n            var escapedArgs = command.Replace(\"\\\"\", \"\\\\\\\"\");\r\n            var process = new Process\r\n            {\r\n                StartInfo = new ProcessStartInfo\r\n                {\r\n                    FileName = \"/bin/bash\",\r\n                    Arguments = $\"-c \\\"{escapedArgs}\\\"\",\r\n                    RedirectStandardInput = true,\r\n                    RedirectStandardOutput = true,\r\n                    RedirectStandardError = true,\r\n                    UseShellExecute = false,\r\n                    CreateNoWindow = true\r\n                }\r\n            };\r\n\r\n            process.OutputDataReceived += new DataReceivedEventHandler(OutputHandler);\r\n            process.ErrorDataReceived += new DataReceivedEventHandler(OutputHandler);\r\n\r\n            process.Start();\r\n            process.BeginOutputReadLine();\r\n            process.BeginErrorReadLine();\r\n            process.WaitForExit();\r\n\r\n            return process.ExitCode;\r\n        }\r\n\r\n        private static void OutputHandler(object sendingProcess, DataReceivedEventArgs outLine)\r\n        {\r\n            if (outLine.Data != null)\r\n            {\r\n                Console.WriteLine(outLine.Data);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eErikXu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-25T20:14:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K8TGF",
                                           "createdAt":  "2022-09-26T00:20:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ErikXu",
                                           "body":  "The missing part cannot be found in `yum.txt` either. I found some hints in this post: \u003chttps://superuser.com/questions/361654/capturing-yum-progress-bar-percentage\u003e.\r\nBut the solution seems not working in .Net 6. ",
                                           "updatedAt":  "2022-09-26T00:20:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K_TU_",
                                           "createdAt":  "2022-09-26T14:15:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Gnbrkm41",
                                           "body":  "Looks like it\u0027s yum not writing progressbar output to stdout when it\u0027s not connected to actual terminals - it\u0027s not .NET\u0027s fault: \r\nhttps://github.com/rpm-software-management/yum/blob/4ed25525ee4781907bd204018c27f44948ed83fe/output.py#L3342-L3356\r\n\r\n\u003e isatty()\r\nReturn True if the stream is interactive (i.e., connected to a terminal/tty device).",
                                           "updatedAt":  "2022-09-26T14:15:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LCFPC",
                                           "createdAt":  "2022-09-27T01:01:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ErikXu",
                                           "body":  "@Gnbrkm41 Yes, you\u0027re right. The progress bar does not print to stdout. I found a library `pty` written in `golang` can deal with this problem: \u003chttps://github.com/creack/pty\u003e. Is there a similar way in .Net? I also found a pty.net: \u003chttps://github.com/microsoft/vs-pty.net\u003e, but it seems to not be the same thing.",
                                           "updatedAt":  "2022-09-27T01:01:45Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Process does not redirect all output.",
        "labels":  [
                       "question",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76176",
        "createdAt":  "2022-09-26T11:19:36Z",
        "number":  76176,
        "author":  "hamarb123",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-10-28T07:13:26Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the performance problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n  --\u003e\r\nIf someone wants to get an up-to-date value for `Process.PrivateMemorySize64`, then they have to call `Process.Refresh`. I noticed that this was really slow and I only wanted a value for `PrivateMemorySize64`.\r\n\r\nWindows has an API called `GetProcessMemoryInfo` which we should use to get these value since it is much faster. We can open the process with the `OpenProcess` API and store it in a safehandle \u0026 use `CloseHandle` to close it.\r\n\r\n### Configuration\r\n\r\n.NET 6.0.9 x64\r\nWindows 10 21H2 v10.0.19044.2006 x64\r\n\u003c!--\r\n(If you are posting Benchmark.NET results, this info will be included.)\r\n* Which version of .NET is the code running on?\r\n* What OS version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* If relevant, what are the specs of the machine?\r\n  --\u003e\r\n\r\n### Regression?\r\n\r\n\u003c!--\r\n* Is this a regression from a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\nNo\r\n\r\n### Data\r\n\r\n\u003c!--\r\n* Please include any benchmark results, images of graphs, timings or measurements, or callstacks that are relevant.\r\n* If possible please include text as text rather than images (so it shows up in searches).\r\n* If applicable please include before and after measurements.\r\n* There is helpful information about measuring code in this repo [here](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md).\r\n  --\u003e\r\nThe following bits of code execute in a similar amount of time:\r\n```cs\r\nvar p = Process.GetCurrentProcess();\r\nfor (int i = 0; i \u003c 2000; i++) { p.Refresh(); _ = p.PrivateMemorySize64; }\r\n```\r\n```cs\r\n//appropriate p/invoke required for the below\r\nvar handle = OpenProcess(0x1000 /*PROCESS_QUERY_LIMITED_INFORMATION*/, false, (uint)Process.GetCurrentProcess().Id);\r\nfor (int i = 0; i \u003c 10_000_000; i++) GetProcessMemoryInfo(handle, out var counters, (uint)Marshal.SizeOf\u003cPROCESS_MEMORY_COUNTERS_EX\u003e());\r\nCloseHandle(handle);\r\n```\r\n```cs\r\n//appropriate p/invoke required for the below\r\n//this one does\u0027t cache the handle but is still very fast\r\nvar pid = Process.GetCurrentProcess().Id;\r\nfor (int i = 0; i \u003c 3_000_000; i++)\r\n{\r\n    var handle = OpenProcess(0x1000 /*PROCESS_QUERY_LIMITED_INFORMATION*/, false, (uint)pid);\r\n    if (handle == IntPtr.Zero)\r\n    {\r\n        throw new Exception(\"Failed to open process handle to read current process information.\");\r\n    }\r\n    GetProcessMemoryInfo(handle, out var counters, (uint)Marshal.SizeOf\u003cPROCESS_MEMORY_COUNTERS_EX\u003e());\r\n    CloseHandle(handle);\r\n}\r\n```\r\n\r\nWhich means we can do it ~5000x faster (for the speeds on my machine anyway).\r\n\r\n### Analysis\r\n\r\n\u003c!--\r\n* If you have an idea where the problem might lie, let us know that here.\r\n* Please include any pointers to code, relevant changes, or related issues you know of.\r\n* If you don\u0027t know, you can delete this section.\r\n  --\u003e\r\n\r\nIt seems like we retrieve info for every process every time we do anything (https://github.com/dotnet/runtime/blob/a5f3676cc71e176084f0f7f1f6beeecd86fbeafc/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/ProcessManager.Windows.cs). We can probably also apply similar optimisations to the other methods - I\u0027d also be interested in investigating the other functions and how they can be optimised once we get this one approved - I\u0027d like to do the different functions as seperate PRs if I get approved to do it.\r\n\r\nWe should use `GetProcessMemoryInfo` for the info that can be gathered from it. I\u0027d like to make a PR for this if it is approved by the area-owners which would be merged by .NET 8 ideally (please add me to assignees also on this and the PR if approved, thanks).\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTSlo3g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5K-bQz",
                                           "createdAt":  "2022-09-26T11:19:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the performance problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n  --\u003e\r\nIf someone wants to get an up-to-date value for `Process.PrivateMemorySize64`, then they have to call `Process.Refresh`. I noticed that this was really slow and I only wanted a value for `PrivateMemorySize64`.\r\n\r\nWindows has an API called `GetProcessMemoryInfo` which we should use to get these value since it is much faster. We can open the process with the `OpenProcess` API and store it in a safehandle \u0026 use `CloseHandle` to close it.\r\n\r\n### Configuration\r\n\r\n.NET 6.0.9 x64\r\nWindows 10 21H2 v10.0.19044.2006 x64\r\n\u003c!--\r\n(If you are posting Benchmark.NET results, this info will be included.)\r\n* Which version of .NET is the code running on?\r\n* What OS version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* If relevant, what are the specs of the machine?\r\n  --\u003e\r\n\r\n### Regression?\r\n\r\n\u003c!--\r\n* Is this a regression from a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\nNo\r\n\r\n### Data\r\n\r\n\u003c!--\r\n* Please include any benchmark results, images of graphs, timings or measurements, or callstacks that are relevant.\r\n* If possible please include text as text rather than images (so it shows up in searches).\r\n* If applicable please include before and after measurements.\r\n* There is helpful information about measuring code in this repo [here](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md).\r\n  --\u003e\r\nThe following bits of code execute in a similar amount of time:\r\n```cs\r\nvar p = Process.GetCurrentProcess();\r\nfor (int i = 0; i \u003c 2000; i++) { p.Refresh(); _ = p.PrivateMemorySize64; }\r\n```\r\n```cs\r\n//appropriate p/invoke required for the below\r\nvar handle = OpenProcess(0x1000 /*PROCESS_QUERY_LIMITED_INFORMATION*/, false, (uint)Process.GetCurrentProcess().Id);\r\nfor (int i = 0; i \u003c 10_000_000; i++) GetProcessMemoryInfo(handle, out var counters, (uint)Marshal.SizeOf\u003cPROCESS_MEMORY_COUNTERS_EX\u003e());\r\nCloseHandle(handle);\r\n```\r\n\r\nWhich means we can do it ~5000x faster (for the speeds on my machine anyway).\r\n\r\n### Analysis\r\n\r\n\u003c!--\r\n* If you have an idea where the problem might lie, let us know that here.\r\n* Please include any pointers to code, relevant changes, or related issues you know of.\r\n* If you don\u0027t know, you can delete this section.\r\n  --\u003e\r\n\r\nIt seems like we retrieve info for every process every time we do anything (https://github.com/dotnet/runtime/blob/a5f3676cc71e176084f0f7f1f6beeecd86fbeafc/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/ProcessManager.Windows.cs). We can probably also apply similar optimisations to the other methods - I\u0027d also be interested in investigating the other functions and how they can be optimised once we get this one approved - I\u0027d like to do the different functions as seperate PRs if I get approved to do it.\r\n\r\nWe should use `GetProcessMemoryInfo` for the info that can be gathered from it. I\u0027d like to make a PR for this if it is approved by the area-owners.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehamarb123\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `tenet-performance`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-26T11:19:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K-bhX",
                                           "createdAt":  "2022-09-26T11:20:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "(also, when on earth did I add that label lol, and how do i do it in the future?)",
                                           "updatedAt":  "2022-09-26T11:20:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K_X98",
                                           "createdAt":  "2022-09-26T14:28:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Gnbrkm41",
                                           "body":  "\u003e (also, when on earth did I add that label lol, and how do i do it in the future?)\r\n\r\nMust\u0027ve used the performance issue template. 😁 \r\n\r\nWhile it sounds like a promising change it definitely would break the contract that [\u0027the process component is a snapshot of the process resource at the time they are associated.\u0027](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.refresh?view=net-6.0#system-diagnostics-process-refresh:~:text=The%20Process%20component%20is%20a%20snapshot%20of%20the%20process%20resource%20at%20the%20time%20they%20are%20associated). Perhaps it would be better if exposed as a new API (dunno, maybe `GetCurrentPrivateMemorySize64`)? In which case, it also might be a good idea to expose similar APIs for other properties like processor times and other memory related properties.",
                                           "updatedAt":  "2022-09-26T14:33:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LA6dt",
                                           "createdAt":  "2022-09-26T19:41:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "\u003e In which case, it also might be a good idea to expose similar APIs for other properties like processor times and other memory related properties.\r\n\r\nSimilar properties are already exposed in `System.Environment` so that place would be a natural fit. For example, there\u0027s `Environment.WorkingSet` that exposes a value from `PROCESS_MEMORY_COUNTERS`.",
                                           "updatedAt":  "2022-09-26T19:41:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LBYVz",
                                           "createdAt":  "2022-09-26T21:27:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "\u003e Similar properties are already exposed in `System.Environment` so that place would be a natural fit. For example, there\u0027s `Environment.WorkingSet` that exposes a value from `PROCESS_MEMORY_COUNTERS`.\r\n\r\n`GetProcessMemoryInfo` can get it for any process, so we\u0027d want a new set of APIs or to put it with Process. I was unaware that Process was a snapshot at a particular point in time (is this completely true on unix platforms?).\r\n\r\nPerhaps we could add a new property to `Process` and `ProcessStartInfo` that allows the user to change the mode of caching between something like `Snapshot`, `Current`, and `CurrentCached`. If we did this we would want to update all of the relevant APIs at once. Is there a complete list of APIs that would need to be changed, presumably just everything that is changed by `Refresh` right?",
                                           "updatedAt":  "2022-09-26T21:27:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MoHGQ",
                                           "createdAt":  "2022-10-20T13:52:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@hamarb123 thank you for your proposal!\r\n\r\nIf I understand correctly you would like to change `Refresh` to update only the properties that have been used so far by using specialized, cheaper sys-calls?\r\n\r\nDo we currently have the possibility to verify whether `PrivateMemorySize64` was the only property being initialized so far?",
                                           "updatedAt":  "2022-10-20T13:52:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MqCAc",
                                           "createdAt":  "2022-10-20T20:13:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "\u003e If I understand correctly you would like to change `Refresh` to update only the properties that have been used so far by using specialized, cheaper sys-calls?\r\n\u003e \r\n\u003e Do we currently have the possibility to verify whether `PrivateMemorySize64` was the only property being initialized so far?\r\n\r\nCurrently when we do `Refresh()` we get a process snapshot, which requires iterating through every process on the system (I think this is the only way to get a snapshot) and we extract all the information at once from it (which means all the info is consistent with itself). This is why it\u0027s so much slower.\r\n\r\nHowever I think there are probably cases where people want this behaviour so I think we should keep this as an option (which is my proposed `Snapshot` caching mode).\r\n\r\nNote: It is technically a breaking change to change this snapshot behaviour to not be the default, [\u0027the process component is a snapshot of the process resource at the time they are associated.\u0027](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.refresh?view=net-6.0#system-diagnostics-process-refresh:~:text=The%20Process%20component%20is%20a%20snapshot%20of%20the%20process%20resource%20at%20the%20time%20they%20are%20associated). So I\u0027m not sure if we want to keep it as the default (but it wouldn\u0027t be a breaking change afaik if we do, but also many new users would miss out on this faster code), but we should definitely keep it as an option.\r\n\r\nBut most of the time I don\u0027t think people need more than a few changing properties from a `Process` object, and if you only need 1, then this overhead is ridiculous. Hence why I propose 2 new modes `Current` and `CurrentCached`; `CurrentCached` would be the same as `Current` except that it will cache the values until a refresh and `Current` will return an up-to-date value every time. For `CurrentCached`, refresh will just clear the cache and not get anything, and for `Current` it will do nothing.\r\n\r\nThe `Current` mode will use APIs per property (or groups of properties if they come all at once e.g. as the memory information does on Windows at least). Since these APIs aren\u0027t worried about getting all the process\u0027 info at once in a completely consistent state, they are much faster - and if we can\u0027t find a way to get a particular piece of information on its own, we can fall back to getting it the way we get it for snapshots.\r\n\r\nIn terms of `CurrentCached` re the groups of properties, I think we should only cache the properties we have already read before (since the last refresh) and the property we\u0027re trying to reading; so the user doesn\u0027t get a surprising cached value from ages before they think it should be from (due to calculating another property) - but maybe this would be an option too since it\u0027s just a change in the caching mechanism and wouldn\u0027t be too hard to implement.",
                                           "updatedAt":  "2022-10-20T20:13:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NF9iY",
                                           "createdAt":  "2022-10-27T11:48:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "@hamarb123 let\u0027s say, a developer wants to query a related set of performance variables such as the three CPU numbers (total, user, system). You propose to query the \"group\" from the kernel just once instead of three times. How would that work? This seems to be in conflict with the idea of the `Current` mode to not cache.",
                                           "updatedAt":  "2022-10-27T11:48:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NI31B",
                                           "createdAt":  "2022-10-27T22:19:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "That\u0027s a good point. I think the `Current` and `CurrentCached` modes are still valuable as-is, but we probably should have a mode to store all of the grouped values at once, note: this will (probably) also require deciding which values those are and documenting them if we want to avoid undefined behaviour.\r\n\r\nIt could be called `Grouped`, here\u0027s how it could work: whenever you request a value in the group, it will get all of the values for the group and cache them together; when you request that value or any other value in the group next time, it will return the cached value (and the cache can be reset with `Refresh()` obviously).\r\n\r\nNote: instead of locking in the groups permanently, we could add a bitfield enum which lists each property (of type `ulong` to make sure we don\u0027t run out), and a (static?) method which will return which properties are in the group of a given property, and then developers could query this when they want to make sure they are getting a new enough value in `Grouped` mode (and any other mode that may have special behaviour based on groups). I think I\u0027m leaning towards this instead of deciding what the groups are and documenting them, in case we found a way to group more properties, or ungroup them into faster seperate calls in the future.\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003e\r\nIn-depth examples of each mode:\r\n\u003c/summary\u003e\r\n\r\nBelow is an example of how the different modes should work when running the following code (with a gap of any arbitrary length between each function call):\r\n```cs\r\n//Process p = ...;\r\np.Refresh();\r\n_ = p.PrivateMemorySize64;\r\n_ = p.VirtualMemorySize64;\r\n_ = p.BasePriority;\r\n_ = p.PrivateMemorySize64;\r\n```\r\n\r\n(For the purpose of the explanation below) Assume that `PrivateMemorySize64` and `VirtualMemorySize64` are in a group, `BasePriority` is in a group on its own, these are all of the properties that are available, and all of these properties can be read at once in `Snapshot` mode.\r\n\r\n`Snapshot` (which is currently the only mode):\r\n- `Refresh()` - the cache is cleared.\r\n- `PrivateMemorySize64` - every property is read about the process all at once in a snapshot and saved to cache, value is returned from cache\r\n- `VirtualMemorySize64` - returned from cache\r\n- `BasePriority` - returned from cache\r\n- `PrivateMemorySize64` - returned from cache\r\n- Note: some properties are not currently a part of the snapshot, we should document which ones specifically when we make this mode and probably leave the behaviour as-is.\r\n\r\n`Current`:\r\n- `Refresh()` - does nothing.\r\n- `PrivateMemorySize64` - read this property (and any others that happen to come with it) and return just this one\r\n- `VirtualMemorySize64` - read this property (and any others that happen to come with it) and return just this one\r\n- `BasePriority` - read this property (and any others that happen to come with it) and return just this one\r\n- `PrivateMemorySize64` - read this property (and any others that happen to come with it) and return just this one\r\n- Note: this mode guarantees \u0027the property is at least as new as when you called the property\u0027\r\n\r\n`CurrentCached`:\r\n- `Refresh()` - the cache is cleared.\r\n- `PrivateMemorySize64` - read this property (and any others that happen to come with it e.g. `VirtualMemorySize64`), save just this one to the cache and return it\r\n- `VirtualMemorySize64` - read this property (and any others that happen to come with it e.g. `PrivateMemorySize64`), save this one and `PrivateMemorySize64` (since it has been cached already) to the cache and and return this one\r\n- `BasePriority` - read this property (and any others that happen to come with it), save just this one to the cache and return it\r\n- `PrivateMemorySize64` - read this property from the cache and return it\r\n- Note: this one intentionally doesn\u0027t cache properties that haven\u0027t been read since refresh since it would guarantee \u0027the property is at least as new as the first time you read it since a `Refresh()`\u0027\r\n\r\n`Grouped`:\r\n- `Refresh()` - the cache is cleared.\r\n- `PrivateMemorySize64` - read `PrivateMemorySize64` and `VirtualMemorySize64`, cache both of them, return this property\r\n- `VirtualMemorySize64` - read this property from the cache\r\n- `BasePriority` - read this property, cache it and return it\r\n- `PrivateMemorySize64` - read this property from the cache\r\n- Note: this mode guarantees \u0027when properties can be read in groups to save native calls, they will be\u0027\r\n\r\n\u003c/details\u003e\r\n\r\nI would also like to note: the way I would implement it, these modes would all share most of the code (other than `Snapshot`, which is inherently quite different) and would be easy to maintain.",
                                           "updatedAt":  "2022-10-27T22:19:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NKQOM",
                                           "createdAt":  "2022-10-28T06:43:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e Currently when we do Refresh() we get a process snapshot, which requires iterating through every process on the system (I think this is the only way to get a snapshot) and we extract all the information at once from it (which means all the info is consistent with itself). This is why it\u0027s so much slower.\r\n\r\nThis is definitely expensive. I believe that we should try a simpler (but not most optimal) approach first:\r\n\r\nWhen `processId` is known:\r\n\r\nhttps://github.com/dotnet/runtime/blob/68cf2474e2503a11e3db3f305f8a61b76e1fef3e/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/ProcessManager.Windows.cs#L108\r\n\r\nDon\u0027t fetch all processes information:\r\n\r\nhttps://github.com/dotnet/runtime/blob/68cf2474e2503a11e3db3f305f8a61b76e1fef3e/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/ProcessManager.Win32.cs#L290-L294\r\n\r\nand then read all fields at once:\r\n\r\nhttps://github.com/dotnet/runtime/blob/68cf2474e2503a11e3db3f305f8a61b76e1fef3e/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/ProcessManager.Win32.cs#L353-L369\r\n\r\nJust use corresponding sys-calls for getting the info for single process and assign all of the information at once:\r\n\r\n- [GetProcessMemoryInfo ](https://learn.microsoft.com/en-us/windows/win32/api/psapi/nf-psapi-getprocessmemoryinfo) to get memory info\r\n- [ProcessIdToSessionId](https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-processidtosessionid) to get session id\r\n- [GetProcessHandleCount](https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getprocesshandlecount) to get handle count\r\n\r\n\r\nThis should be relatively easier to implement as we would not need to introduce a new state flag for \"incomplete process information\":\r\nhttps://github.com/dotnet/runtime/blob/68cf2474e2503a11e3db3f305f8a61b76e1fef3e/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.cs#L498\r\n\r\nand hence avoid the need for cache invalidation (we all know how it usually ends ;) ) and even more differences between Windows and other OS-es implementation for `ProcessManager:.\r\n\r\n![image](https://user-images.githubusercontent.com/6011991/198520766-cf29bd9c-b9fd-49e1-a9b4-d5660a9805aa.png)\r\n\r\nThis could work an order of magnitude faster and be simple (assuming there are no major windows 7 vs 7+ differences) and straightforward to implement, without breaking and risky changes.\r\n\r\n@hamarb123 what do you think?\r\n\r\n",
                                           "updatedAt":  "2022-10-28T06:43:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NKWje",
                                           "createdAt":  "2022-10-28T07:13:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "2 issues with this, but otherwise I think it is probably fine - but I\u0027d still prefer to go the route with the different modes (would need to get the additional APIs required with this approved first obviously).\r\n\r\nFirstly, would technically be a breaking change as stated [here](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.refresh?view=net-6.0#system-diagnostics-process-refresh:~:text=The%20Process%20component%20is%20a%20snapshot%20of%20the%20process%20resource%20at%20the%20time%20they%20are%20associated).\r\n\r\nSecondly, it\u0027s unclear to me how the caching would work, currently you have to call `Refresh()` to get current info. Are you suggesting we basically implement the `Grouped` mode from above? I\u0027d be fine with this. Or do you mean the `Current` mode? This has the issue that grouped properties are requested brand new every time.\r\n\r\nAlso, the reason I say the different modes would be easy to maintain is because we could do it basically like this (names can be changed obviously, and below is just a rough sketch of how it would work):\r\n- Have a `static class` that gets the process info from native calls `ProcessInfoGetter` - this would be the only part that is OS specific (other than saying an api is not supported). It would have 3 functions, one to get the sizes needed to store the output for the next function, one which takes a ref bitfield enum saying which field to read (which gets changed to which ones were read) and takes spans for the output, and one which says which fields are in a group. Exposing it like this allows us to avoid any unnecessary allocations.\r\n- Have 3 classes that each represent one of the caching modes (they can be singletons). They will have a function that takes a parameter for the field bitfield enum, a ref parameter for the caching info, and return the value requested. This function will use the `ProcessInfoGetter` class to get the info as required. These all share from the same base class.\r\n- One class to implement `Snapshot` mode (has the same base class and interface).\r\n- The caching struct will have 3 functions: 1 to see if a property is cached, 1 to read the cached property, and 1 to write the cached property. If we implement this cleverly enough, the 3 caching mode classes shouldn\u0027t even need to know the list of all properties. We probably will also need a function to say whether a field is an object or a struct, assuming there are objects that we get this way - these would be from the one of the spans.\r\n- In the `Process` class itself, we add a field to store the class for the current mode, and one to store the enum, and then we change all of the implementations for the properties to use the ones from there.\r\n\r\nI think this design would be extensible, maintainable, and fast.",
                                           "updatedAt":  "2022-10-28T07:13:26Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Optimise Process.PrivateMemorySize64 and similar APIs on Windows",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78565",
        "createdAt":  "2022-11-18T17:26:25Z",
        "number":  78565,
        "author":  "VasiliyNovikov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-19T15:36:29Z",
        "body":  "### Description\n\nWhen using System.Diagnostics.Process.OutputDataReceived there is no way to determine if output has or doesn\u0027t have final newline\n\n### Reproduction Steps\n\nTest that shows the issue:\r\n\r\n```cs\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing Xunit;\r\n\r\nnamespace ProcessRedirectOutputApiIssue;\r\n\r\npublic static class ProcessRedirectOutputTests\r\n{\r\n    private static Process EchoProcess(string output) =\u003e\r\n        new()\r\n        {\r\n            StartInfo =\r\n            {\r\n                FileName = \"echo\",\r\n                ArgumentList = { \"-n\", output },\r\n                RedirectStandardOutput = true\r\n            }\r\n        };\r\n\r\n    // Capture output from Process.StandardOutput for the reference\r\n    private static string Output_From_Stream(Process process)\r\n    {\r\n        process.WaitForExit();\r\n        return process.StandardOutput.ReadToEnd();\r\n    }\r\n\r\n    // Capture output via Process.OutputDataReceived the way it is stated in the official documentation\r\n    private static string Output_From_Event(Process process)\r\n    {\r\n        process.BeginOutputReadLine();\r\n        var output = new StringBuilder();\r\n        process.OutputDataReceived += (_, e) =\u003e\r\n        {\r\n            if (e.Data != null)\r\n            {\r\n                output.Append(e.Data);\r\n                output.Append(\u0027\\n\u0027);\r\n            }\r\n        };\r\n        process.WaitForExit();\r\n        return output.ToString();\r\n    }\r\n\r\n    // Alternative way to capture output via Process.OutputDataReceived - skip final newline\r\n    private static string Output_From_Event_Skip_Final_Newline(Process process)\r\n    {\r\n        process.BeginOutputReadLine();\r\n        var output = new StringBuilder();\r\n        process.OutputDataReceived += (_, e) =\u003e\r\n        {\r\n            if (e.Data != null)\r\n            {\r\n                if (output.Length \u003e 0)\r\n                    output.Append(\u0027\\n\u0027);\r\n                output.Append(e.Data);\r\n            }\r\n        };\r\n        process.WaitForExit();\r\n        return output.ToString();\r\n    }\r\n\r\n    private static readonly string[] Outputs =\r\n    {\r\n        \"\",\r\n        \"\\n\",\r\n        \"ab\",\r\n        \"ab\\n\",\r\n        \"ab\\ncd\",\r\n        \"ab\\ncd\\n\",\r\n    };\r\n\r\n    private static readonly Func\u003cProcess, string\u003e[] OutputCapturers =\r\n    {\r\n        Output_From_Stream,\r\n        Output_From_Event,\r\n        Output_From_Event_Skip_Final_Newline\r\n    };\r\n\r\n    public static IEnumerable\u003cobject[]\u003e TestData =\u003e from o in Outputs\r\n                                                    from oc in OutputCapturers\r\n                                                    select new object[] {o, oc}; \r\n\r\n    [Theory]\r\n    [MemberData(nameof(TestData))]\r\n    public static void Process_Redirect_Output_Test(string output, Func\u003cProcess, string\u003e outputCapturer)\r\n    {\r\n        using var process = EchoProcess(output);\r\n        process.Start();\r\n        var capturedOutput = outputCapturer(process);\r\n        Assert.Equal(output, capturedOutput);\r\n    }\r\n}\r\n```\r\n\r\ncsproj:\r\n```csproj\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet6.0\u003c/TargetFramework\u003e\r\n  \u003c/PropertyGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.4.0\" /\u003e\r\n    \u003cPackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.5\" /\u003e\r\n    \u003cPackageReference Include=\"xunit\" Version=\"2.4.2\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\n\n### Expected behavior\n\nThere should be some way to determine if there is a final new line or not. Maybe the case above where final newline is skipped should succeed\n\n### Actual behavior\n\nThere is no way to determine from OutputDataReceived event if final newline exists or doesn\u0027t exist in the standard output:\r\n![image](https://user-images.githubusercontent.com/4021496/202765092-2cd2b0b4-284c-4bca-8414-5bae9e5207e8.png)\r\n\r\n\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nLatest .NET 6 (or 7) SDK on Ubuntu 18.04\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUz_tUQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5OsnAZ",
                                           "createdAt":  "2022-11-18T17:26:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen using System.Diagnostics.Process.OutputDataReceived there is no way to determine if output has or doesn\u0027t have final newline\n\n### Reproduction Steps\n\nTest that shows the issue:\r\n\r\n```cs\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing Xunit;\r\n\r\nnamespace ProcessRedirectOutputApiIssue;\r\n\r\npublic static class ProcessRedirectOutputTests\r\n{\r\n    private static Process EchoProcess(string output) =\u003e\r\n        new()\r\n        {\r\n            StartInfo =\r\n            {\r\n                FileName = \"echo\",\r\n                ArgumentList = { \"-n\", output },\r\n                RedirectStandardOutput = true\r\n            }\r\n        };\r\n\r\n    // Capture output from Process.StandardOutput for the reference\r\n    private static string Output_From_Stream(Process process)\r\n    {\r\n        process.WaitForExit();\r\n        return process.StandardOutput.ReadToEnd();\r\n    }\r\n\r\n    // Capture output via Process.OutputDataReceived the way it is stated in the official documentation\r\n    private static string Output_From_Event(Process process)\r\n    {\r\n        process.BeginOutputReadLine();\r\n        var output = new StringBuilder();\r\n        process.OutputDataReceived += (_, e) =\u003e\r\n        {\r\n            if (e.Data != null)\r\n            {\r\n                output.Append(e.Data);\r\n                output.Append(\u0027\\n\u0027);\r\n            }\r\n        };\r\n        process.WaitForExit();\r\n        return output.ToString();\r\n    }\r\n\r\n    // Alternative way to capture output via Process.OutputDataReceived - skip final newline\r\n    private static string Output_From_Event_Skip_Final_Newline(Process process)\r\n    {\r\n        process.BeginOutputReadLine();\r\n        var output = new StringBuilder();\r\n        process.OutputDataReceived += (_, e) =\u003e\r\n        {\r\n            if (e.Data != null)\r\n            {\r\n                if (output.Length \u003e 0)\r\n                    output.Append(\u0027\\n\u0027);\r\n                output.Append(e.Data);\r\n            }\r\n        };\r\n        process.WaitForExit();\r\n        return output.ToString();\r\n    }\r\n\r\n    private static readonly string[] Outputs =\r\n    {\r\n        \"\",\r\n        \"\\n\",\r\n        \"ab\",\r\n        \"ab\\n\",\r\n        \"ab\\ncd\",\r\n        \"ab\\ncd\\n\",\r\n    };\r\n\r\n    private static readonly Func\u003cProcess, string\u003e[] OutputCapturers =\r\n    {\r\n        Output_From_Stream,\r\n        Output_From_Event,\r\n        Output_From_Event_Skip_Final_Newline\r\n    };\r\n\r\n    public static IEnumerable\u003cobject[]\u003e TestData =\u003e from o in Outputs\r\n                                                    from oc in OutputCapturers\r\n                                                    select new object[] {o, oc}; \r\n\r\n    [Theory]\r\n    [MemberData(nameof(TestData))]\r\n    public static void Process_Redirect_Output_Test(string output, Func\u003cProcess, string\u003e outputCapturer)\r\n    {\r\n        using var process = EchoProcess(output);\r\n        process.Start();\r\n        var capturedOutput = outputCapturer(process);\r\n        Assert.Equal(output, capturedOutput);\r\n    }\r\n}\r\n```\r\n\r\ncsproj:\r\n```csproj\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet6.0\u003c/TargetFramework\u003e\r\n  \u003c/PropertyGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.4.0\" /\u003e\r\n    \u003cPackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.5\" /\u003e\r\n    \u003cPackageReference Include=\"xunit\" Version=\"2.4.2\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\n\n### Expected behavior\n\nThere should be some way to determine if there is a final new line or not. Maybe the case above where final newline is skipped should succeed\n\n### Actual behavior\n\nThere is no way to determine from OutputDataReceived event if final newline exists or doesn\u0027t exist in the standard output:\r\n![image](https://user-images.githubusercontent.com/4021496/202765092-2cd2b0b4-284c-4bca-8414-5bae9e5207e8.png)\r\n\r\n\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nLatest .NET 6 (or 7) SDK on Ubuntu 18.04\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eVasiliyNovikov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-18T17:26:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TOIgf",
                                           "createdAt":  "2023-01-18T23:09:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD6kakQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kezzyhko",
                                                                               "createdAt":  "2024-11-12T21:17:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jozkee",
                                           "body":  "I suspect this is expected:\r\nhttps://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/AsyncStreamReader.cs#L141-L146\r\n\r\n...and changing it now would result in a breaking change. ",
                                           "updatedAt":  "2023-01-18T23:10:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TP-1R",
                                           "createdAt":  "2023-01-19T09:47:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD8EqaQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DanJBower",
                                                                               "createdAt":  "2024-11-22T10:57:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "VasiliyNovikov",
                                           "body":  "@Jozkee, then can this be explicitly mentioned in the docs to avoid confusion like I\u0027ve got and maybe some alternatives provided?",
                                           "updatedAt":  "2023-01-19T09:47:08Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "System.Diagnostics.Process.OutputDataReceived - determine final newline",
        "labels":  [
                       "documentation",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80425",
        "createdAt":  "2023-01-10T12:47:36Z",
        "number":  80425,
        "author":  "Alezy80",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-31T18:14:41Z",
        "body":  "### Description\r\n\r\nI write program, that collect data from many sources. On Linux processor load and responsiveness much worse than on Windows. Some investigations lead me to timers. Timers are used for periodical acquiring data and in some places I\u0027ve use `Task.Delay`, which use `Timer` under the hood.\r\n\r\nExample. The program creates 1000 timers, which increases the counter. Once a second, it prints how much counter was increased (callback count) and how much processor time was spent. On Windows and Linux counts are almost same, but on Windows processor time is near zero, but on Linux it is about 600 ms on 8 core machine.\r\n```\r\nusing System.Diagnostics;\r\n\r\nconst int TimersCount = 1000;\r\nconst int Interval = 16;\r\nlong counter = 0;\r\n\r\nvar process = Process.GetCurrentProcess();\r\nvar timers = new List\u003cTimer\u003e();\r\nfor (int i = 0; i \u003c TimersCount; i++)\r\n{\r\n    timers.Add(new(_ =\u003e Interlocked.Increment(ref counter), null, Interval, Interval));\r\n}\r\n\r\nvar prevCnt = 0L;\r\nvar prevTime = TimeSpan.Zero;\r\nwhile (true)\r\n{\r\n    Thread.Sleep(1000);\r\n    var nowCnt = Interlocked.Read(ref counter);\r\n    process.Refresh();\r\n    var nowTime = process.TotalProcessorTime;\r\n    Console.WriteLine($\"cnt={nowCnt - prevCnt} processor time={(nowTime - prevTime).TotalMilliseconds}\");\r\n    prevCnt = nowCnt;\r\n    prevTime = nowTime;\r\n}\r\n```\r\n\r\n### Configuration\r\n* Which version of .NET is the code running on? .NET6, .NET7. No much difference\r\n* What OS version? Windows 10 22H2, Linux Mint 21.1 (Ubuntu 22.04 based) and custom Slackware based distro.\r\n* What is the architecture? x64\r\n* What are the specs of the machine? Intel i7-8550U CPU, 16Gb RAM\r\n\r\n### Data\r\n\r\nWindows output like\r\n```\r\ncnt=63000 processor time=0\r\ncnt=62000 processor time=15.625\r\n```\r\nLinux output like\r\n```\r\ncnt=63000 processor time=700\r\ncnt=64000 processor time=600\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUhcTUg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5SFok8",
                                           "createdAt":  "2023-01-10T12:47:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI write program, that collect data from many sources. On Linux processor load and responsiveness much worse than on Windows. Some investigations lead me to timers. Timers are used for periodical acquiring data and in some places I\u0027ve use `Task.Delay`, which use `Timer` under the hood.\r\n\r\nExample. The program creates 1000 timers, which increases the counter. Once a second, it prints how much counter was increased (callback count) and how much processor time was spent. On Windows and Linux counts are almost same, but on Windows processor time is near zero, but on Linux it is about 600 ms on 8 core machine.\r\n```\r\nusing System.Diagnostics;\r\n\r\nconst int TimersCount = 1000;\r\nconst int Interval = 16;\r\nlong counter = 0;\r\n\r\nvar process = Process.GetCurrentProcess();\r\nvar timers = new List\u003cTimer\u003e();\r\nfor (int i = 0; i \u003c TimersCount; i++)\r\n{\r\n    timers.Add(new(_ =\u003e Interlocked.Increment(ref counter), null, Interval, Interval));\r\n}\r\n\r\nvar prevCnt = 0L;\r\nvar prevTime = TimeSpan.Zero;\r\nwhile (true)\r\n{\r\n    Thread.Sleep(1000);\r\n    var nowCnt = Interlocked.Read(ref counter);\r\n    process.Refresh();\r\n    var nowTime = process.TotalProcessorTime;\r\n    Console.WriteLine($\"cnt={nowCnt - prevCnt} processor time={(nowTime - prevTime).TotalMilliseconds}\");\r\n    prevCnt = nowCnt;\r\n    prevTime = nowTime;\r\n}\r\n```\r\n\r\n### Configuration\r\n* Which version of .NET is the code running on? .NET6, .NET7. No much difference\r\n* What OS version? Windows 10 22H2, Linux Mint 21.1 (Ubuntu 22.04 based) and custom Slackware based distro.\r\n* What is the architecture? x64\r\n* What are the specs of the machine? Intel i7-8550U CPU, 16Gb RAM\r\n\r\n### Data\r\n\r\nWindows output like\r\n```\r\ncnt=63000 processor time=0\r\ncnt=62000 processor time=15.625\r\n```\r\nLinux output like\r\n```\r\ncnt=63000 processor time=700\r\ncnt=64000 processor time=600\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAlezy80\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-10T12:47:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SFp6Q",
                                           "createdAt":  "2023-01-10T12:52:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Hi @Alezy80 \r\n\r\n\u003e Some investigations lead me to timers\r\n\r\nWhich profiler did you use? Could you please share the trace file?\r\n\r\nIf you have not used any profiler yet, please use [perfcollect](https://github.com/dotnet/runtime/blob/main/docs/project/linux-performance-tracing.md) and share a trace file. ",
                                           "updatedAt":  "2023-01-10T12:52:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SFp9g",
                                           "createdAt":  "2023-01-10T12:53:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-01-10T12:53:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SFxNS",
                                           "createdAt":  "2023-01-10T13:16:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Alezy80",
                                           "body":  "Trace of sample program under Linux Mint 22.1\r\n[sampleTrace.trace.zip](https://github.com/dotnet/runtime/files/10383023/sampleTrace.trace.zip)\r\n",
                                           "updatedAt":  "2023-01-10T13:16:45Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Linux Timer performance much worse than on Windows",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "tenet-performance",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81896",
        "createdAt":  "2023-02-09T15:53:19Z",
        "number":  81896,
        "author":  "drauch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCunRxA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "madelson",
                                            "createdAt":  "2023-02-13T00:33:12Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "SJMakin",
                                            "createdAt":  "2023-02-27T19:57:55Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-07-18T14:51:16Z",
        "body":  "### Description\r\n\r\nIf you run a System.Diagnostics.Process and redirect both stdout and stderr in an async way (using the BeginOutputReadLine/BeginErrorReadLine methods) it blocks a thread pool thread.\r\n\r\n### Reproduction Steps\r\n\r\nThe following C# interactive notebook:\r\n\r\n```\r\nusing System.Diagnostics;\r\nusing System.Threading;\r\n\r\nbool stop = false;\r\nvar threadPoolMonitoringThread = new Thread(() =\u003e { while (!stop) { Console.WriteLine($\"{DateTime.Now}: ThreadCount: {ThreadPool.ThreadCount}, PendingWorkItemCount: {ThreadPool.PendingWorkItemCount}\"); Thread.Sleep(1000); } });\r\nthreadPoolMonitoringThread.Start();\r\n\r\nvar tasks = Enumerable.Range(0, 10).Select(async _ =\u003e {\r\n  using (Process process = new Process())\r\n    {\r\n      process.StartInfo.FileName = \"pwsh.exe\";\r\n      process.StartInfo.Arguments = \"-Command Start-Sleep -Seconds 10\";\r\n      process.StartInfo.UseShellExecute = false;\r\n      process.StartInfo.CreateNoWindow = true;\r\n      process.StartInfo.RedirectStandardOutput = true;\r\n      process.StartInfo.RedirectStandardError = true;\r\n      \r\n      process.OutputDataReceived += (s, a) =\u003e { };\r\n      process.ErrorDataReceived += (s, a) =\u003e { };\r\n\r\n      process.Start();    \r\n\r\n      process.BeginOutputReadLine();      \r\n      process.BeginErrorReadLine();\r\n\r\n      await process.WaitForExitAsync();      \r\n    }\r\n});\r\n\r\nawait Task.WhenAll(tasks);\r\nstop = true;\r\n```\r\n\r\nreproduces the problem. You can immediately see the PendingWorkItemCount raising to very high numbers, while actually all the WaitForExitAsync calls should not block threads on the thread pool at all.\r\n\r\nIf you either remove the `BeginOutputReadLine` or the `BeginErrorReadLine` call the PendingWorkItemCount stays 0 as expected. So it must have something to do with redirecting both streams.\r\n\r\n### Expected behavior\r\n\r\nThe thread pool should not be filled by 10 parallel async calls.\r\n\r\n### Actual behavior\r\n\r\nThe thread pool is filled up, because each call blocks a thread pool thread.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nReproduced on .NET 6 and .NET 7\r\n\r\n### Other information\r\n\r\nI\u0027m pretty confident that I\u0027m using the Process API correctly, also various other Process-class-Wrappers like MedallionShell or CliWrap are having the same problem.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVplz0Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5U5uTK",
                                           "createdAt":  "2023-02-09T15:53:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nIf you run a System.Diagnostics.Process and redirect both stdout and stderr in an async way (using the BeginOutputReadLine/BeginErrorReadLine methods) blocks a thread pool thread.\n\n### Reproduction Steps\n\nThe following C# interactive notebook:\r\n\r\n```\r\nusing System.Diagnostics;\r\nusing System.Threading;\r\n\r\nbool stop = false;\r\nvar threadPoolMonitoringThread = new Thread(() =\u003e { while (!stop) { Console.WriteLine($\"{DateTime.Now}: ThreadCount: {ThreadPool.ThreadCount}, PendingWorkItemCount: {ThreadPool.PendingWorkItemCount}\"); Thread.Sleep(1000); } });\r\nthreadPoolMonitoringThread.Start();\r\n\r\nvar tasks = Enumerable.Range(0, 10).Select(async _ =\u003e {\r\n  using (Process process = new Process())\r\n    {\r\n      process.StartInfo.FileName = \"pwsh.exe\";\r\n      process.StartInfo.Arguments = \"-Command Start-Sleep -Seconds 10\";\r\n      process.StartInfo.UseShellExecute = false;\r\n      process.StartInfo.CreateNoWindow = true;\r\n      process.StartInfo.RedirectStandardOutput = true;\r\n      process.StartInfo.RedirectStandardError = true;\r\n      \r\n      process.OutputDataReceived += (s, a) =\u003e { };\r\n      process.ErrorDataReceived += (s, a) =\u003e { };\r\n\r\n      process.Start();    \r\n\r\n      process.BeginOutputReadLine();      \r\n      process.BeginErrorReadLine();\r\n\r\n      await process.WaitForExitAsync();      \r\n    }\r\n});\r\n\r\nawait Task.WhenAll(tasks);\r\nstop = true;\r\n```\r\n\r\nreproduces the problem. You can immediately see the PendingWorkItemCount raising to very high numbers, while actually all the WaitForExitAsync blocks should not block threads on the thread pool at all.\r\n\r\nIf you either remove the `BeginOutputReadLine` or the `BeginErrorReadLine` call the PendingWorkItemCount stays 0 as expected.\n\n### Expected behavior\n\nThe thread pool should not be filled by 10 parallel async calls.\n\n### Actual behavior\n\nThe thread pool is filled up, because each call blocks a thread pool thread.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nReproduced on .NET 6 and .NET 7\n\n### Other information\n\nI\u0027m pretty confident that I\u0027m using the Process API correctly, also various other Process-class-Wrappers like MedallionShell are having the same problem.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edrauch\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-09T15:53:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U5vdW",
                                           "createdAt":  "2023-02-09T15:56:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "drauch",
                                           "body":  "Here is a Dropbox link to the Polyglot Notebook I\u0027ve posted above:\r\nhttps://www.dropbox.com/s/qjnuwmv7zu1306q/Repro81896.ipynb?dl=0",
                                           "updatedAt":  "2023-02-09T15:56:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U5zVH",
                                           "createdAt":  "2023-02-09T16:06:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "If you look in the Parallel Stacks window in VS, you\u0027ll see something like:\r\n\u003cimg width=\"212\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2642209/217868232-e42d0221-52c9-40ff-b1c1-305f9807edf2.png\"\u003e\r\nThat\u0027s because Process is creating anonymous pipes for the child process\u0027s stdout/stderr, and anonymous pipes on Windows don\u0027t support overlapped I/O.  As such, all reads are blocking.",
                                           "updatedAt":  "2023-02-09T16:07:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U530s",
                                           "createdAt":  "2023-02-09T16:19:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "drauch",
                                           "body":  "Thank you for your quick reply.\r\n\r\n\u003e That\u0027s because Process is creating anonymous pipes for the child process\u0027s stdout/stderr, and anonymous pipes on Windows don\u0027t support overlapped I/O. As such, all reads are blocking.\r\n\r\nI understand, is there a suitable workaround? We want to run a process as part of an ASP.NET Core request and blocking thread pool threads is a no-go in that area.\r\n\r\nRequirements:\r\n* Get live stdout/stderr output from the process\r\n* Being able to set a maximum timeout for the process\r\n\r\nWould really appreciate it :-) \r\n\r\nBest regards,\r\nD.R.",
                                           "updatedAt":  "2023-02-09T16:19:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U566n",
                                           "createdAt":  "2023-02-09T16:28:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e is there a suitable workaround?\r\n\r\nMy expectation is that you wouldn\u0027t hit such an issue on Linux, so if deploying on Linux is an option, you could try that.\r\n\r\nOther than that, I can\u0027t think of any workarounds.\r\n\r\nSomeone could experiment with using something other than anonymous pipes, e.g. maybe named pipes could be used instead (e.g. with the server pipe created to expect overlapped I/O).  I don\u0027t know what the ramifications of that would be for launched processes, though, and whether such a difference would be observable in an impactful way.",
                                           "updatedAt":  "2023-02-12T03:25:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U6Cuq",
                                           "createdAt":  "2023-02-09T16:50:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "drauch",
                                           "body":  "We\u0027re stuck on Windows unfortunately. Thanks for trying anyways.",
                                           "updatedAt":  "2023-02-09T16:50:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U9eQ7",
                                           "createdAt":  "2023-02-10T08:22:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fschmied",
                                           "body":  "So, if we want to avoid ThreadPool threads from being blocked, the best thing we can do is to avoid the `Begin...` methods and instead use something like this, right?\r\n\r\n    var t1 = Task.Factory.StartNew (() =\u003e process.StandardOutput.ReadToEnd(), TaskCreationOptions.LongRunning);\r\n    var t2 = Task.Factory.StartNew (() =\u003e process.StandardError.ReadToEnd(), TaskCreationOptions.LongRunning);\r\n    var t3 = process.WaitForExitAsync();\r\n    \r\n    await Task.WhenAll(t1, t2, t3);\r\n",
                                           "updatedAt":  "2023-02-10T08:22:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U9fFI",
                                           "createdAt":  "2023-02-10T08:25:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fschmied",
                                           "body":  "Should this be documented on the `Process` class docs? (https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process?view=net-7.0)",
                                           "updatedAt":  "2023-02-10T08:25:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U_uGp",
                                           "createdAt":  "2023-02-10T15:41:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e the best thing we can do is to avoid the Begin... methods and instead use something like this, right?\r\n\r\nTo my knowledge that\u0027s currently the way you\u0027d avoid blocking pool threads.",
                                           "updatedAt":  "2023-02-10T15:41:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U_wi_",
                                           "createdAt":  "2023-02-10T15:48:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e I understand, is there a suitable workaround? We want to run a process as part of an ASP.NET Core request and blocking thread pool threads is a no-go in that area.\r\n\r\nIs this a remote console via the browser (using websockets to marshal the std/in/out/err)?\r\n",
                                           "updatedAt":  "2023-02-10T15:48:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U_zu2",
                                           "createdAt":  "2023-02-10T15:58:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "drauch",
                                           "body":  "\u003e \u003e I understand, is there a suitable workaround? We want to run a process as part of an ASP.NET Core request and blocking thread pool threads is a no-go in that area.\r\n\u003e \r\n\u003e Is this a remote console via the browser (using websockets to marshal the std/in/out/err)?\r\n\r\nNo, requests trigger the execution of various different Windows executables. The output is used to return suitable responses to the clients. Unfortunately, we can\u0027t change the executables either (i.e., to read the output from, e.g., a file).",
                                           "updatedAt":  "2023-02-10T15:58:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U_6Ks",
                                           "createdAt":  "2023-02-10T16:18:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I see, my only advice would be to limit concurrency of those requests or use a separate pool of threads.",
                                           "updatedAt":  "2023-02-10T16:18:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VDUPQ",
                                           "createdAt":  "2023-02-12T03:23:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fbrosseau",
                                           "body":  "\u003e \u003e is there a suitable workaround?\r\n\u003e \r\n\u003e My expectation is that you wouldn\u0027t hit such an issue on Linux, so if deploying on Linux is an option, you could try that.\r\n\u003e \r\n\u003e Other than that, I can\u0027t think of any workarounds.\r\n\u003e \r\n\u003e Someone could experiment with using something other than anonymous pipes, e.g. maybe named pipes could be used instead (e.g. with the client pipe created to expect overlapped I/O). I don\u0027t know what the ramifications of that would be for launched processes, though, and whether such a difference would be observable in an impactful way.\r\n\r\nRegular pipes would work, the host process creates both the server (overlapped) and the client (non-overlapped), and client end goes to the child process. The client pipe must remain non-overlapped because 99% of arbitrary processes are not ready to receive an overlapped handle for their stdout/stderr (although nothing would prevent it from working if the child process were overlapped-aware).\r\n\r\nShort of doing a scheme like this within the framework, the only scalable way to have very many child processes is to pinvoke CreateProcess\u0026co yourself and do exactly this, and that\u0027s not the most trivial.",
                                           "updatedAt":  "2023-02-12T03:26:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VDUTt",
                                           "createdAt":  "2023-02-12T03:26:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Regular pipes would work\r\n\r\nBy \"regular\", you mean \"named\", like I stated, yes?",
                                           "updatedAt":  "2023-02-12T03:26:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VDUU5",
                                           "createdAt":  "2023-02-12T03:26:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fbrosseau",
                                           "body":  "Yes. Effectively \"anonymous named pipes\", named pipes with random names.",
                                           "updatedAt":  "2023-02-12T03:26:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VDUVT",
                                           "createdAt":  "2023-02-12T03:26:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Right.",
                                           "updatedAt":  "2023-02-12T03:26:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WmXPR",
                                           "createdAt":  "2023-03-03T03:15:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chylex",
                                           "body":  "This really should be documented... I just spent several hours hunting for why my application became almost entirely unresponsive for several minutes, and the majority of the worker threads were inexplicably stuck in `NtReadFile` with no obvious reason why. PerfView and `dotnet-dump` were not of much help.\r\n\r\n![obrazek](https://user-images.githubusercontent.com/3685160/222622001-824691fb-aa94-4a80-9632-99fba9ed0da2.png)\r\n\r\nIf the documentation states:\r\n\r\n\u003e Begins **asynchronous** read operations on the redirected StandardOutput stream of the application.\r\n\r\nthen I have no reason to suspect these methods to be the reason why the entire worker pool stops running tasks.",
                                           "updatedAt":  "2023-03-03T03:15:00Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "Running a System.Diagnostics.Process with both async stdout/stderr redirection blocks a ThreadPool thread",
        "labels":  [
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82220",
        "createdAt":  "2023-02-16T04:58:30Z",
        "number":  82220,
        "author":  "vkg-mca",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2fTAw==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2023-02-16T06:36:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2023-02-16T06:36:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sandersaares",
                                            "createdAt":  "2024-03-13T06:30:49Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2023-08-01T08:25:04Z",
        "body":  "### Description\n\nI have been working on setting process affinity for a couple days now, tried multiple options with no luck.\r\n`Process.GetCurrentProcess().ProcessorAffinity `does not allow to set the affinity across multiple cpu groups.\r\nAlternatively, I used SetInformationJobObject from \"kernel32.dll\" that makes machine crash if goes wrong\r\n```\r\n[DllImport(\"kernel32.dll\", SetLastError = true)]\r\n\t\tstatic extern bool SetInformationJobObject(IntPtr hJob, JobObjectInfoType infoType, IntPtr lpJobObjectInfo, UInt32 cbJobObjectInfoLength);\r\n\r\n```\r\nThe above method method makes machine crash if there are already application threads running on different cpu group than the cpu group in my applied affinity setting.\r\n\r\nTo mange machine not to crash I called  `Process.GetCurrentProcess().ProcessorAffinity ` before calling `SetInformationJobObject` and if  `Process.GetCurrentProcess().ProcessorAffinity ` produces an exception then exit the process without calling  `SetInformationJobObject` but this is not the right way, it can only help the machine not to crash but doesn\u0027t help to achieve the goal.\n\n### Reproduction Steps\n\n```\r\npublic class Program\r\n\t{\r\n\t\t[STAThread]\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\tbool isAffinitySetSuccess = ProcessAffinity.Setup(out string affinitySetResult);\r\n\t\t\t\r\n\t\t\tLogManager.UseLogger(\"nlog.config\", LoggerType.Nlog);\r\n\r\n\t\t\tif (!isAffinitySetSuccess)\r\n\t\t\t{\r\n\t\t\t\tILogWriter logger = LogManager.GetLogger(AppInfo.GetInstance().AppName);\r\n\t\t\t\tlogger.Error($\"ProcessAffinity:{affinitySetResult}\");\r\n\t\t\t\tMessageBox.Show(affinitySetResult, $\"ProcessAffinity set failed on process {Process.GetCurrentProcess().Id}\", MessageBoxButton.OK, MessageBoxImage.Error);\r\n\t\t\t\tEnvironment.Exit(-1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tProcessPriority.TrySetProcessPriority();\r\n\r\n\t\t\tApp app = new App();\r\n\t\t\tapp.InitializeComponent();\r\n\t\t\tapp.Run();\r\n\t\t}\r\n\t}\r\n\r\n```\r\n```\r\npublic class ProcessAffinity\r\n\t{\r\n\t\t[DllImport(\"kernel32.dll\", CharSet = CharSet.Unicode, SetLastError = true)]\r\n\t\tstatic extern IntPtr CreateJobObject(IntPtr a, string lpName);\r\n\r\n\t\t[DllImport(\"kernel32.dll\", CharSet = CharSet.Unicode, SetLastError = true)]\r\n\t\tstatic extern IntPtr CreateJobObject([In] ref SECURITY_ATTRIBUTES lpJobAttributes, string lpName);\r\n\r\n\t\t[DllImport(\"kernel32.dll\", SetLastError = true)]\r\n\t\tstatic extern bool SetInformationJobObject(IntPtr hJob, JobObjectInfoType infoType, IntPtr lpJobObjectInfo, UInt32 cbJobObjectInfoLength);\r\n\r\n\t\t[DllImport(\"kernel32.dll\", SetLastError = true)]\r\n\t\tstatic extern bool AssignProcessToJobObject(IntPtr job, IntPtr process);\r\n\r\n\t\t[DllImport(\"kernel32.dll\", SetLastError = true)]\r\n\t\t[return: MarshalAs(UnmanagedType.Bool)]\r\n\t\tstatic extern bool CloseHandle(IntPtr hObject);\r\n\r\n\t\t[DllImport(\"kernel32\", SetLastError = true)]\r\n\t\tprivate static extern IntPtr GetCurrentThread();\r\n\r\n\t\t[DllImport(\"kernel32\", SetLastError = true)]\r\n\t\tprivate static extern Boolean SetThreadGroupAffinity(IntPtr hThread, ref _GROUP_AFFINITY GroupAffinity, ref _GROUP_AFFINITY PreviousGroupAffinity);\r\n\r\n\t\t[DllImport(\"kernel32\", SetLastError = true)]\r\n\t\tprivate static extern uint GetLastError(out uint pulErrCode, char[] strBuf, ref ushort pusBufLen);\r\n\r\n\t\t[DllImport(\"kernel32.dll\", SetLastError = true)]\r\n\t\tstatic extern uint GetLastError();\r\n\r\n\t\t[DllImport(\"advapi32.dll\", EntryPoint = \"SetSecurityInfo\", CallingConvention = CallingConvention.Winapi, SetLastError = true, ExactSpelling = true, CharSet = CharSet.Unicode)]\r\n\t\tinternal static extern /*DWORD*/ uint SetSecurityInfoByHandle(SafeHandle handle, /*DWORD*/ uint objectType, /*DWORD*/ uint securityInformation, byte[] owner, byte[] group, byte[] dacl, byte[] sacl);\r\n\r\n\t\t[DllImport(\"kernel32.dll\", SetLastError = true)]\r\n\t\tpublic static extern bool QueryInformationJobObject(IntPtr hJob, JobObjectInfoClass JobObjectInformationClass, ref JOBOBJECT_BASIC_PROCESS_ID_LIST lpJobObjectInfo, int cbJobObjectInfoLength, IntPtr lpReturnLength);\r\n\r\n\t\t[DllImport(\"kernel32.dll\", SetLastError = true)]\r\n\t\tpublic static extern UInt16 GetActiveProcessorGroupCount();\r\n\r\n\t\t[DllImport(\"kernel32.dll\", SetLastError = true)]\r\n\t\tprivate static extern bool GetNumaHighestNodeNumber(out uint count);\r\n\r\n\t\tprivate static IntPtr handle;\r\n\t\tprivate static AppSetting appSetting = AppSetting.GetInstance();\r\n\t\t\r\n\t\tpublic static bool Setup(out string result)\r\n\t\t{\r\n\t\t\tif (!appSetting.EnableProcessAffinity)\r\n\t\t\t{\r\n\t\t\t\tresult = $\"{AffinityStatus.NotEnabled}, EnableProcessAffinity=F\";\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (string.IsNullOrWhiteSpace(appSetting.ProcessAffinity))\r\n\t\t\t{\r\n\t\t\t\tresult = $\"{AffinityStatus.NotEnabled}, ProcessAffinity is empty\";\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tif (!TryGetAffinityRanges(appSetting.ProcessAffinity, out Dictionary\u003cint, List\u003cint\u003e\u003e cpuGroupCoresDict, out result))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (!IsValidInput(appSetting.ProcessAffinity, cpuGroupCoresDict, out ushort groupId, out int[] cores, out result))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (!TryGetCpuMask(appSetting.ProcessAffinity, cores, out long cpuMask, out result))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// if (!TrySetThreadProcessorAffinity(groupId, cpuMask, out result))\r\n\t\t\t// {\r\n\t\t\t// \treturn false;\r\n\t\t\t// }\r\n\r\n\t\t\tif (!TrySetProcessorAffinity(cpuMask, out result))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (!TrySetInformationJobObject(groupId, cpuMask, out result))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tpublic static bool TrySetProcessorAffinity(long cpuMask, out string result)\r\n\t\t{\r\n\t\t\tresult = string.Empty;\r\n\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tif (cpuMask \u003c 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, cpuMask cannot be a negative value, cpuMask:{cpuMask}\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tProcess.GetCurrentProcess().ProcessorAffinity = (IntPtr)cpuMask;\r\n\t\t\t\t\t\tresult = $\"{AffinityStatus.InProgress}, TrySetProcessorAffinity succeeded, cpuMask:{cpuMask}\";\r\n\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (Exception ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tProcess.GetCurrentProcess().Refresh();\r\n\t\t\t\t\t\tresult = $\"{AffinityStatus.InProgress}, TrySetProcessorAffinity failed, {ex.Message}, cpuMask:{cpuMask}, process.ProcessorAffinity:{(long)Process.GetCurrentProcess().ProcessorAffinity}\";\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tresult = $\"{AffinityStatus.Fail}, TrySetProcessorAffinity failed, {ex.Message}, cpuMask:{cpuMask}, ErrorCode:{(ex is Win32Exception ? (ex as Win32Exception).NativeErrorCode : ex.HResult)}\";\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic static bool TrySetThreadProcessorAffinity(ushort groupId, long cpuMask, out string result)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tvar hThread = GetCurrentThread();\r\n\t\t\t\tvar previousAffinity = new _GROUP_AFFINITY {Reserved = new ushort[3]};\r\n\t\t\t\tvar newAffinity = new _GROUP_AFFINITY\r\n\t\t\t\t{\r\n\t\t\t\t\tGroup = groupId,\r\n\t\t\t\t\tMask = new UIntPtr((ulong) cpuMask),\r\n\t\t\t\t\tReserved = new ushort[3]\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif (!SetThreadGroupAffinity(hThread, ref newAffinity, ref previousAffinity))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, SetThreadProcessorAffinity failed, newAffinity:{newAffinity.Group}::{newAffinity.Mask}, previousAffinity:{previousAffinity.Group}::{previousAffinity.Mask}, groupId:{groupId}, cpuMask:{cpuMask}\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tresult = $\"{AffinityStatus.Success}, SetThreadProcessorAffinity succeeded, newAffinity:{newAffinity.Group}::{newAffinity.Mask}, previousAffinity:{previousAffinity.Group}::{previousAffinity.Mask}, groupId:{groupId}, cpuMask:{cpuMask}\";\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tresult = $\"{AffinityStatus.Fail}, SetThreadProcessorAffinity failed, {ex.Message}, ErrorCode:{(ex is Win32Exception ? (ex as Win32Exception).NativeErrorCode : ex.HResult)}, groupId:{groupId}, cpuMask:{cpuMask}\";\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic static bool TrySetInformationJobObject(ushort groupId, long cpuMask, out string result)\r\n\t\t{\r\n\t\t\tresult = string.Empty;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\t_GROUP_AFFINITY newAffinity = new _GROUP_AFFINITY\r\n\t\t\t\t{\r\n\t\t\t\t\tGroup = groupId,\r\n\t\t\t\t\tMask = new UIntPtr((ulong)cpuMask),\r\n\t\t\t\t\tReserved = new ushort[3]\r\n\t\t\t\t};\r\n\r\n\t\t\t\tSECURITY_ATTRIBUTES lpJobAttributes = new();\r\n\t\t\t\thandle = CreateJobObject(ref lpJobAttributes, null);\r\n\r\n\t\t\t\tif (!AddProcess(Environment.ProcessId))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, Cannot add current process {Environment.ProcessId} to the Job, groupId:{groupId}, cpuMask:{cpuMask}\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tint length = Marshal.SizeOf(typeof(_GROUP_AFFINITY));\r\n\t\t\t\t//int length = Marshal.SizeOf(newAffinity);\r\n\t\t\t\tIntPtr newAffinityPtr = Marshal.AllocHGlobal(length);\r\n\t\t\t\tMarshal.StructureToPtr(newAffinity, newAffinityPtr, false);\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (SetInformationJobObject(handle, JobObjectInfoType.JobObjectGroupInformationEx, newAffinityPtr, (uint)length))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tresult = $\"{AffinityStatus.Success}, TrySetInformationJobObject succeeded, ProcessId:{Environment.ProcessId}, ProcessAffinity:{appSetting.ProcessAffinity}, newAffinity:{newAffinity.Group}::{newAffinity.Mask}, groupId:{groupId}, cpuMask:{cpuMask}\";\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, TrySetInformationJobObject failed, ProcessAffinity:{appSetting.ProcessAffinity} failed, ErrorCode:{(int)GetLastError()}, groupId:{groupId}, cpuMask:{cpuMask}\";\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (Exception ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tProcess.GetCurrentProcess().Refresh();\r\n\t\t\t\t\t\tresult = $\"{AffinityStatus.InProgress}, TrySetInformationJobObject failed, {ex.Message}, groupId:{groupId}, cpuMask:{cpuMask}\";\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tresult = $\"{AffinityStatus.Fail}, TrySetInformationJobObject failed, {ex.Message}, ErrorCode:{(ex is Win32Exception ? (ex as Win32Exception).NativeErrorCode : ex.HResult)}, groupId:{groupId}, cpuMask:{cpuMask}\";\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tpublic static bool IsValidInput(string processAffinity, Dictionary\u003cint, List\u003cint\u003e\u003e cpuGroupCoreDict, out ushort groupId, out int[] cores, out string result)\r\n\t\t{\r\n\t\t\tgroupId = 0;\r\n\t\t\tcores = null;\r\n\t\t\tresult = string.Empty;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tif (cpuGroupCoreDict == null || cpuGroupCoreDict.Keys.Count == 0 || cpuGroupCoreDict.Values.Count == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, Invalid ProcessAffinity Setting defined [{nameof(processAffinity)}={processAffinity}]\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (cpuGroupCoreDict.Keys.Count \u003e 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, Cross CPU group ProcessAffinity [{nameof(processAffinity)}={processAffinity}] not supported yet\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tint highestNumeNodeNumber = GetNumaHighestNodeNumber();\r\n\t\t\t\tint maxCpuGroupConfigured = cpuGroupCoreDict.Keys.Max();\r\n\t\t\t\tif (maxCpuGroupConfigured \u003e highestNumeNodeNumber)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, Invalid CpuGroup {maxCpuGroupConfigured}, highest CpuGroup value supported on this computer is {highestNumeNodeNumber}\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (cpuGroupCoreDict.ContainsKey(0))\r\n\t\t\t\t{\r\n\t\t\t\t\tgroupId = 0;\r\n\t\t\t\t\tcores = cpuGroupCoreDict[0].ToArray();\r\n\t\t\t\t}\r\n\t\t\t\telse if (cpuGroupCoreDict.ContainsKey(1))\r\n\t\t\t\t{\r\n\t\t\t\t\tgroupId = 1;\r\n\t\t\t\t\tcores = cpuGroupCoreDict[1].ToArray();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tgroupId = (ushort)cpuGroupCoreDict.First().Key;\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, Configured CpuGroupId [{nameof(groupId)}={groupId}] not supported yet\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (groupId \u003c 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, Invalid CpuGroupId [{nameof(groupId)}={groupId}]\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (cores == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, Invalid core range [{nameof(cores)}={cores}]\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (cores.Length == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, At least one core must be specified in ProcessorAffinity\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tresult = $\"{AffinityStatus.Fail}, {ex.Message}\";\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tresult = $\"{AffinityStatus.InProgress}, Validation passed\";\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tpublic static bool TryGetCpuMask(string processAffinity, int[] cores, out long cpuMask, out string result)\r\n\t\t{\r\n\t\t\tcpuMask = 0;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tif (cores.Min() \u003c 0 || cores.Max() \u003e= Environment.ProcessorCount)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, Invalid core number(s) found in the range {processAffinity}. Core number must be in between 0 and {Environment.ProcessorCount - 1}\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tforeach (int core in cores)\r\n\t\t\t\t{\r\n\t\t\t\t\tcpuMask |= 1L \u003c\u003c core;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tresult = $\"{AffinityStatus.Fail}, Obtaining CpuMask failed, Error={ex.Message}\";\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tresult = $\"{AffinityStatus.InProgress}\";\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tprivate static bool AddProcess(int processId) =\u003e AddProcess(Process.GetProcessById(processId).Handle);\r\n\r\n\t\tprivate static bool AddProcess(IntPtr processHandle) =\u003e AssignProcessToJobObject(handle, processHandle);\r\n\r\n\t\tpublic static bool TryGetAffinityRanges(string affinityRange, out Dictionary\u003cint, List\u003cint\u003e\u003e cpuGroupCoresDict, out string result)\r\n\t\t{\r\n\t\t\t//0:0,1-3,4,5;1:6,7,8-10,15\r\n\t\t\tresult = string.Empty;\r\n\t\t\tbool hasValue = false;\r\n\t\t\tcpuGroupCoresDict = new Dictionary\u003cint, List\u003cint\u003e\u003e();\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tstring[] ranges = affinityRange.Split(new char[] { \u0027;\u0027 });\r\n\r\n\t\t\t\tforeach (string range in ranges)\r\n\t\t\t\t{\r\n\t\t\t\t\tstring[] groupCore = range.Split(\u0027:\u0027, StringSplitOptions.RemoveEmptyEntries);\r\n\r\n\t\t\t\t\tif (int.TryParse(groupCore[0], out int group))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcpuGroupCoresDict.Add(group, new List\u003cint\u003e());\r\n\t\t\t\t\t\tstring[] cores = groupCore[1].Split(\u0027,\u0027, StringSplitOptions.RemoveEmptyEntries);\r\n\t\t\t\t\t\tforeach (string core in cores)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (core.Contains(\u0027-\u0027))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tstring[] cpuRange = core.Split(\u0027-\u0027, StringSplitOptions.RemoveEmptyEntries);\r\n\t\t\t\t\t\t\t\tif (int.TryParse(cpuRange[0], out int from) \u0026\u0026 int.TryParse(cpuRange[1], out int to))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (cpuGroupCoresDict.TryGetValue(group, out List\u003cint\u003e cpus))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcpus.AddRange(Enumerable.Range(from, to - from + 1));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcpuGroupCoresDict[group] = Enumerable.Range(from, to - from + 1) as List\u003cint\u003e;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\thasValue = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif (int.TryParse(core, out int cpu))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (cpuGroupCoresDict.TryGetValue(group, out List\u003cint\u003e cpus))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcpus.Add(cpu);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcpuGroupCoresDict[group] = new List\u003cint\u003e() { cpu };\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\thasValue = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tresult = $\"{AffinityStatus.Fail}, Failed during extracting affinity range from ProcessAffinity setting i.e {affinityRange}, Error: {ex.Message}\";\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (!hasValue)\r\n\t\t\t{\r\n\t\t\t\tresult = $\"{AffinityStatus.Fail}, Failed during extracting affinity range from ProcessAffinity setting i.e {affinityRange}\";\r\n\t\t\t}\r\n\t\t\treturn hasValue;\r\n\t\t}\r\n\r\n\t\tprivate static int GetNumaHighestNodeNumber()\r\n\t\t{\r\n\t\t\tuint numaHighestNodeNumber = 0;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tGetNumaHighestNodeNumber(out numaHighestNodeNumber);\r\n\t\t\t}\r\n\t\t\tcatch (Exception)\r\n\t\t\t{\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\r\n\t\t\treturn (int)numaHighestNodeNumber; // Node number start at 0\r\n\t\t}\r\n\r\n\t\tpublic static void Close()\r\n\t\t{\r\n\t\t\tCloseHandle(handle);\r\n\t\t\thandle = IntPtr.Zero;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic enum AffinityStatus\r\n\t{\r\n\t\tNotEnabled,\r\n\t\tFail,\r\n\t\tSuccess,\r\n\t\tInProgress\r\n\t}\r\n\r\n\tpublic enum JobObjectInfoType\r\n\t{\r\n\t\tAssociateCompletionPortInformation = 7,\r\n\t\tBasicLimitInformation = 2,\r\n\t\tBasicUIRestrictions = 4,\r\n\t\tEndOfJobTimeInformation = 6,\r\n\t\tExtendedLimitInformation = 9,\r\n\t\tSecurityLimitInformation = 5,\r\n\t\tGroupInformation = 11,\r\n\t\tJobObjectGroupInformationEx = 14\r\n\t}\r\n\r\n\tpublic enum JobObjectInfoClass\r\n\t{\r\n\t\tJobObjectBasicAccountingInformation = 1,\r\n\t\tJobObjectBasicLimitInformation = 2,\r\n\t\tJobObjectBasicProcessIdList = 3,\r\n\t\tJobObjectBasicUIRestrictions = 4,\r\n\t\tJobObjectSecurityLimitInformation = 5,\r\n\t\tJobObjectEndOfJobTimeInformation = 6,\r\n\t\tJobObjectAssociateCompletionPortInformation = 7,\r\n\t\tJobObjectBasicAndIoAccountingInformation = 8,\r\n\t\tJobObjectExtendedLimitInformation = 9,\r\n\t}\r\n\r\n\t[StructLayout(LayoutKind.Sequential, Pack = 4)]\r\n\tpublic struct _GROUP_AFFINITY\r\n\t{\r\n\t\tpublic UIntPtr Mask;\r\n\t\t[MarshalAs(UnmanagedType.U2)]\r\n\t\tpublic ushort Group;\r\n\t\t[MarshalAs(UnmanagedType.ByValArray, SizeConst = 3, ArraySubType = UnmanagedType.U2)]\r\n\t\tpublic ushort[] Reserved;\r\n\t}\r\n\r\n\t[StructLayout(LayoutKind.Sequential)]\r\n\tstruct JOBOBJECT_EXTENDED_LIMIT_INFORMATION\r\n\t{\r\n\t\tpublic JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;\r\n\t\tpublic IO_COUNTERS IoInfo;\r\n\t\tpublic UIntPtr ProcessMemoryLimit;\r\n\t\tpublic UIntPtr JobMemoryLimit;\r\n\t\tpublic UIntPtr PeakProcessMemoryUsed;\r\n\t\tpublic UIntPtr PeakJobMemoryUsed;\r\n\t}\r\n\r\n\t[StructLayout(LayoutKind.Sequential)]\r\n\tstruct IO_COUNTERS\r\n\t{\r\n\t\tpublic UInt64 ReadOperationCount;\r\n\t\tpublic UInt64 WriteOperationCount;\r\n\t\tpublic UInt64 OtherOperationCount;\r\n\t\tpublic UInt64 ReadTransferCount;\r\n\t\tpublic UInt64 WriteTransferCount;\r\n\t\tpublic UInt64 OtherTransferCount;\r\n\t}\r\n\r\n\t[StructLayout(LayoutKind.Sequential)]\r\n\tstruct JOBOBJECT_BASIC_LIMIT_INFORMATION\r\n\t{\r\n\t\tpublic Int64 PerProcessUserTimeLimit;\r\n\t\tpublic Int64 PerJobUserTimeLimit;\r\n\t\tpublic UInt32 LimitFlags;\r\n\t\tpublic UIntPtr MinimumWorkingSetSize;\r\n\t\tpublic UIntPtr MaximumWorkingSetSize;\r\n\t\tpublic UInt32 ActiveProcessLimit;\r\n\t\tpublic UIntPtr Affinity;\r\n\t\tpublic UInt32 PriorityClass;\r\n\t\tpublic UInt32 SchedulingClass;\r\n\t}\r\n\r\n\t[StructLayout(LayoutKind.Sequential)]\r\n\tpublic struct SECURITY_ATTRIBUTES\r\n\t{\r\n\t\tpublic UInt32 nLength;\r\n\t\tpublic IntPtr lpSecurityDescriptor;\r\n\t\tpublic Int32 bInheritHandle;\r\n\t}\r\n\r\n\tpublic struct JOBOBJECT_BASIC_PROCESS_ID_LIST\r\n\t{\r\n\t\tpublic int NumberOfAssignedProcesses;\r\n\t\tpublic int NumberOfProcessIdsInList;\r\n\t\t[MarshalAs(UnmanagedType.ByValArray, SizeConst = 200)]\r\n\t\tpublic int[] ProcessIdList;\r\n\t}\r\n```\n\n### Expected behavior\n\nI expect when my WPF application calls ProcessAffinity.Setup(out string affinitySetResult) method it should set the process affinity I configured in my application.\r\n\r\nFor Instance\r\nOn my machine with 2 NUMA nodes and 2 cpu groups with 48 cores on each group \r\n\r\nExample-1: if appSetting.ProcessAffinity=\"0:5-15\" then I expect cores 5 to 15 set in cpu group 0\r\nExample-2: if appSetting.ProcessAffinity=\"1:5-15\" then I expect cores 5 to 15 set in cpu group 1\r\n\r\nand so on\r\n\n\n### Actual behavior\n\nThe affinity works randomly, sometimes it sets correctly and sometimes not. With this latest code snippet most of the time it works but the issues is that I need to run from command prompt with this command\r\n\r\n1. start /NODE 0 MyApplication.Exe (for example-1 above) and it sets affinity correctly\r\n2. start /NODE 1 MyApplication.Exe (for example-2 above) and it sets affinity correctly\r\nIn both cases /AFFINITY switch values od start command are optional, it sets correctly.\n\n### Regression?\n\nNo idea but I am doing it on Windows-11 and Windows Server 2022 using .NET-7 development SDK. I think this problem started from Windows-11 and Windows Server 2022 as the affinity expands to all processor groups by default\n\n### Known Workarounds\n\nAs in my above code snippet, I used setting processor affinity  \r\n`Process.GetCurrentProcess().ProcessorAffinity = (IntPtr)cpuMask;`\r\nbefore SetInformationJobObject\r\nSetInformationJobObject(handle, JobObjectInfoType.JobObjectGroupInformationEx, newAffinityPtr, (uint)length)\r\nThis way I could manage machine not to crash and affinity work but I am sure this is not standard way\n\n### Configuration\n\napplication.runtimeconfiguration.json\r\n\r\n```\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"net7.0\",\r\n    \"frameworks\": [\r\n      {\r\n        \"name\": \"Microsoft.NETCore.App\",\r\n        \"version\": \"7.0.0\"\r\n      },\r\n      {\r\n        \"name\": \"Microsoft.WindowsDesktop.App\",\r\n        \"version\": \"7.0.0\"\r\n      }\r\n    ],\r\n    \"configProperties\": {\r\n       \"System.GC.Concurrent\": true,\r\n      \"System.GC.Server\": true,\r\n      \"System.GC.CpuGroup\": true,\r\n      \"System.GC.HeapAffinitizeRanges\": \"0:1-4\",\r\n      \"System.GC.HeapAffinitizeMask\": 15.0\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\n\n### Other information\n\nWe have similar implementation in C++ which always works, but doesn\u0027t work in C#. Something I cant figure out to pass cpu group into the `cpuMask` of this function\r\nProcess.GetCurrentProcess().ProcessorAffinity = (IntPtr)cpuMask;\r\n\r\nMicrosoft documentation https://learn.microsoft.com/en-us/windows/win32/procthread/processor-groups states that\r\n\r\n\u003e By default, an application is constrained to a single group, which should provide ample processing capability for the typical application. The operating system initially assigns each process to a single group in a round-robin manner across the groups in the system. A process begins its execution assigned to one group. The first thread of a process initially runs in the group to which the process is assigned. Each newly created thread is assigned to the same group as the thread that created it.\r\n\r\nSo, looks like I cant supply cpu group to my  `cpuMask`  and dont find any better way to make this work",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWX1g4Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5VYmiR",
                                           "createdAt":  "2023-02-16T04:58:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI have been working on setting process affinity for a couple days now, tried multiple options with no luck.\r\n`Process.GetCurrentProcess().ProcessorAffinity `does not allow to set the affinity across multiple cpu groups.\r\nAlternatively, I used SetInformationJobObject from \"kernel32.dll\" that makes machine crash if goes wrong\r\n```\r\n[DllImport(\"kernel32.dll\", SetLastError = true)]\r\n\t\tstatic extern bool SetInformationJobObject(IntPtr hJob, JobObjectInfoType infoType, IntPtr lpJobObjectInfo, UInt32 cbJobObjectInfoLength);\r\n\r\n```\r\nThe above method method makes machine crash if there are already application threads running on different cpu group than the cpu group in my applied affinity setting.\r\n\r\nTo mange machine not to crash I called  `Process.GetCurrentProcess().ProcessorAffinity ` before calling `SetInformationJobObject` and if  `Process.GetCurrentProcess().ProcessorAffinity ` produces an exception then exit the process without calling  `SetInformationJobObject` but this is not the right way, it can only help the machine not to crash but doesn\u0027t help to achieve the goal.\n\n### Reproduction Steps\n\n```\r\npublic class Program\r\n\t{\r\n\t\t[STAThread]\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\tbool isAffinitySetSuccess = ProcessAffinity.Setup(out string affinitySetResult);\r\n\t\t\t\r\n\t\t\tLogManager.UseLogger(\"nlog.config\", LoggerType.Nlog);\r\n\r\n\t\t\tif (!isAffinitySetSuccess)\r\n\t\t\t{\r\n\t\t\t\tILogWriter logger = LogManager.GetLogger(AppInfo.GetInstance().AppName);\r\n\t\t\t\tlogger.Error($\"ProcessAffinity:{affinitySetResult}\");\r\n\t\t\t\tMessageBox.Show(affinitySetResult, $\"ProcessAffinity set failed on process {Process.GetCurrentProcess().Id}\", MessageBoxButton.OK, MessageBoxImage.Error);\r\n\t\t\t\tEnvironment.Exit(-1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tProcessPriority.TrySetProcessPriority();\r\n\r\n\t\t\tApp app = new App();\r\n\t\t\tapp.InitializeComponent();\r\n\t\t\tapp.Run();\r\n\t\t}\r\n\t}\r\n\r\n```\r\n```\r\npublic class ProcessAffinity\r\n\t{\r\n\t\t[DllImport(\"kernel32.dll\", CharSet = CharSet.Unicode, SetLastError = true)]\r\n\t\tstatic extern IntPtr CreateJobObject(IntPtr a, string lpName);\r\n\r\n\t\t[DllImport(\"kernel32.dll\", CharSet = CharSet.Unicode, SetLastError = true)]\r\n\t\tstatic extern IntPtr CreateJobObject([In] ref SECURITY_ATTRIBUTES lpJobAttributes, string lpName);\r\n\r\n\t\t[DllImport(\"kernel32.dll\", SetLastError = true)]\r\n\t\tstatic extern bool SetInformationJobObject(IntPtr hJob, JobObjectInfoType infoType, IntPtr lpJobObjectInfo, UInt32 cbJobObjectInfoLength);\r\n\r\n\t\t[DllImport(\"kernel32.dll\", SetLastError = true)]\r\n\t\tstatic extern bool AssignProcessToJobObject(IntPtr job, IntPtr process);\r\n\r\n\t\t[DllImport(\"kernel32.dll\", SetLastError = true)]\r\n\t\t[return: MarshalAs(UnmanagedType.Bool)]\r\n\t\tstatic extern bool CloseHandle(IntPtr hObject);\r\n\r\n\t\t[DllImport(\"kernel32\", SetLastError = true)]\r\n\t\tprivate static extern IntPtr GetCurrentThread();\r\n\r\n\t\t[DllImport(\"kernel32\", SetLastError = true)]\r\n\t\tprivate static extern Boolean SetThreadGroupAffinity(IntPtr hThread, ref _GROUP_AFFINITY GroupAffinity, ref _GROUP_AFFINITY PreviousGroupAffinity);\r\n\r\n\t\t[DllImport(\"kernel32\", SetLastError = true)]\r\n\t\tprivate static extern uint GetLastError(out uint pulErrCode, char[] strBuf, ref ushort pusBufLen);\r\n\r\n\t\t[DllImport(\"kernel32.dll\", SetLastError = true)]\r\n\t\tstatic extern uint GetLastError();\r\n\r\n\t\t[DllImport(\"advapi32.dll\", EntryPoint = \"SetSecurityInfo\", CallingConvention = CallingConvention.Winapi, SetLastError = true, ExactSpelling = true, CharSet = CharSet.Unicode)]\r\n\t\tinternal static extern /*DWORD*/ uint SetSecurityInfoByHandle(SafeHandle handle, /*DWORD*/ uint objectType, /*DWORD*/ uint securityInformation, byte[] owner, byte[] group, byte[] dacl, byte[] sacl);\r\n\r\n\t\t[DllImport(\"kernel32.dll\", SetLastError = true)]\r\n\t\tpublic static extern bool QueryInformationJobObject(IntPtr hJob, JobObjectInfoClass JobObjectInformationClass, ref JOBOBJECT_BASIC_PROCESS_ID_LIST lpJobObjectInfo, int cbJobObjectInfoLength, IntPtr lpReturnLength);\r\n\r\n\t\t[DllImport(\"kernel32.dll\", SetLastError = true)]\r\n\t\tpublic static extern UInt16 GetActiveProcessorGroupCount();\r\n\r\n\t\t[DllImport(\"kernel32.dll\", SetLastError = true)]\r\n\t\tprivate static extern bool GetNumaHighestNodeNumber(out uint count);\r\n\r\n\t\tprivate static IntPtr handle;\r\n\t\tprivate static AppSetting appSetting = AppSetting.GetInstance();\r\n\t\t\r\n\t\tpublic static bool Setup(out string result)\r\n\t\t{\r\n\t\t\tif (!appSetting.EnableProcessAffinity)\r\n\t\t\t{\r\n\t\t\t\tresult = $\"{AffinityStatus.NotEnabled}, EnableProcessAffinity=F\";\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (string.IsNullOrWhiteSpace(appSetting.ProcessAffinity))\r\n\t\t\t{\r\n\t\t\t\tresult = $\"{AffinityStatus.NotEnabled}, ProcessAffinity is empty\";\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tif (!TryGetAffinityRanges(appSetting.ProcessAffinity, out Dictionary\u003cint, List\u003cint\u003e\u003e cpuGroupCoresDict, out result))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (!IsValidInput(appSetting.ProcessAffinity, cpuGroupCoresDict, out ushort groupId, out int[] cores, out result))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (!TryGetCpuMask(appSetting.ProcessAffinity, cores, out long cpuMask, out result))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// if (!TrySetThreadProcessorAffinity(groupId, cpuMask, out result))\r\n\t\t\t// {\r\n\t\t\t// \treturn false;\r\n\t\t\t// }\r\n\r\n\t\t\tif (!TrySetProcessorAffinity(cpuMask, out result))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (!TrySetInformationJobObject(groupId, cpuMask, out result))\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tpublic static bool TrySetProcessorAffinity(long cpuMask, out string result)\r\n\t\t{\r\n\t\t\tresult = string.Empty;\r\n\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tif (cpuMask \u003c 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, cpuMask cannot be a negative value, cpuMask:{cpuMask}\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tProcess.GetCurrentProcess().ProcessorAffinity = (IntPtr)cpuMask;\r\n\t\t\t\t\t\tresult = $\"{AffinityStatus.InProgress}, TrySetProcessorAffinity succeeded, cpuMask:{cpuMask}\";\r\n\t\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (Exception ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tProcess.GetCurrentProcess().Refresh();\r\n\t\t\t\t\t\tresult = $\"{AffinityStatus.InProgress}, TrySetProcessorAffinity failed, {ex.Message}, cpuMask:{cpuMask}, process.ProcessorAffinity:{(long)Process.GetCurrentProcess().ProcessorAffinity}\";\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tresult = $\"{AffinityStatus.Fail}, TrySetProcessorAffinity failed, {ex.Message}, cpuMask:{cpuMask}, ErrorCode:{(ex is Win32Exception ? (ex as Win32Exception).NativeErrorCode : ex.HResult)}\";\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic static bool TrySetThreadProcessorAffinity(ushort groupId, long cpuMask, out string result)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tvar hThread = GetCurrentThread();\r\n\t\t\t\tvar previousAffinity = new _GROUP_AFFINITY {Reserved = new ushort[3]};\r\n\t\t\t\tvar newAffinity = new _GROUP_AFFINITY\r\n\t\t\t\t{\r\n\t\t\t\t\tGroup = groupId,\r\n\t\t\t\t\tMask = new UIntPtr((ulong) cpuMask),\r\n\t\t\t\t\tReserved = new ushort[3]\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif (!SetThreadGroupAffinity(hThread, ref newAffinity, ref previousAffinity))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, SetThreadProcessorAffinity failed, newAffinity:{newAffinity.Group}::{newAffinity.Mask}, previousAffinity:{previousAffinity.Group}::{previousAffinity.Mask}, groupId:{groupId}, cpuMask:{cpuMask}\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tresult = $\"{AffinityStatus.Success}, SetThreadProcessorAffinity succeeded, newAffinity:{newAffinity.Group}::{newAffinity.Mask}, previousAffinity:{previousAffinity.Group}::{previousAffinity.Mask}, groupId:{groupId}, cpuMask:{cpuMask}\";\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tresult = $\"{AffinityStatus.Fail}, SetThreadProcessorAffinity failed, {ex.Message}, ErrorCode:{(ex is Win32Exception ? (ex as Win32Exception).NativeErrorCode : ex.HResult)}, groupId:{groupId}, cpuMask:{cpuMask}\";\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic static bool TrySetInformationJobObject(ushort groupId, long cpuMask, out string result)\r\n\t\t{\r\n\t\t\tresult = string.Empty;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\t_GROUP_AFFINITY newAffinity = new _GROUP_AFFINITY\r\n\t\t\t\t{\r\n\t\t\t\t\tGroup = groupId,\r\n\t\t\t\t\tMask = new UIntPtr((ulong)cpuMask),\r\n\t\t\t\t\tReserved = new ushort[3]\r\n\t\t\t\t};\r\n\r\n\t\t\t\tSECURITY_ATTRIBUTES lpJobAttributes = new();\r\n\t\t\t\thandle = CreateJobObject(ref lpJobAttributes, null);\r\n\r\n\t\t\t\tif (!AddProcess(Environment.ProcessId))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, Cannot add current process {Environment.ProcessId} to the Job, groupId:{groupId}, cpuMask:{cpuMask}\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tint length = Marshal.SizeOf(typeof(_GROUP_AFFINITY));\r\n\t\t\t\t//int length = Marshal.SizeOf(newAffinity);\r\n\t\t\t\tIntPtr newAffinityPtr = Marshal.AllocHGlobal(length);\r\n\t\t\t\tMarshal.StructureToPtr(newAffinity, newAffinityPtr, false);\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (SetInformationJobObject(handle, JobObjectInfoType.JobObjectGroupInformationEx, newAffinityPtr, (uint)length))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tresult = $\"{AffinityStatus.Success}, TrySetInformationJobObject succeeded, ProcessId:{Environment.ProcessId}, ProcessAffinity:{appSetting.ProcessAffinity}, newAffinity:{newAffinity.Group}::{newAffinity.Mask}, groupId:{groupId}, cpuMask:{cpuMask}\";\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, TrySetInformationJobObject failed, ProcessAffinity:{appSetting.ProcessAffinity} failed, ErrorCode:{(int)GetLastError()}, groupId:{groupId}, cpuMask:{cpuMask}\";\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (Exception ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tProcess.GetCurrentProcess().Refresh();\r\n\t\t\t\t\t\tresult = $\"{AffinityStatus.InProgress}, TrySetInformationJobObject failed, {ex.Message}, groupId:{groupId}, cpuMask:{cpuMask}\";\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tresult = $\"{AffinityStatus.Fail}, TrySetInformationJobObject failed, {ex.Message}, ErrorCode:{(ex is Win32Exception ? (ex as Win32Exception).NativeErrorCode : ex.HResult)}, groupId:{groupId}, cpuMask:{cpuMask}\";\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tpublic static bool IsValidInput(string processAffinity, Dictionary\u003cint, List\u003cint\u003e\u003e cpuGroupCoreDict, out ushort groupId, out int[] cores, out string result)\r\n\t\t{\r\n\t\t\tgroupId = 0;\r\n\t\t\tcores = null;\r\n\t\t\tresult = string.Empty;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tif (cpuGroupCoreDict == null || cpuGroupCoreDict.Keys.Count == 0 || cpuGroupCoreDict.Values.Count == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, Invalid ProcessAffinity Setting defined [{nameof(processAffinity)}={processAffinity}]\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (cpuGroupCoreDict.Keys.Count \u003e 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, Cross CPU group ProcessAffinity [{nameof(processAffinity)}={processAffinity}] not supported yet\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tint highestNumeNodeNumber = GetNumaHighestNodeNumber();\r\n\t\t\t\tint maxCpuGroupConfigured = cpuGroupCoreDict.Keys.Max();\r\n\t\t\t\tif (maxCpuGroupConfigured \u003e highestNumeNodeNumber)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, Invalid CpuGroup {maxCpuGroupConfigured}, highest CpuGroup value supported on this computer is {highestNumeNodeNumber}\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (cpuGroupCoreDict.ContainsKey(0))\r\n\t\t\t\t{\r\n\t\t\t\t\tgroupId = 0;\r\n\t\t\t\t\tcores = cpuGroupCoreDict[0].ToArray();\r\n\t\t\t\t}\r\n\t\t\t\telse if (cpuGroupCoreDict.ContainsKey(1))\r\n\t\t\t\t{\r\n\t\t\t\t\tgroupId = 1;\r\n\t\t\t\t\tcores = cpuGroupCoreDict[1].ToArray();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tgroupId = (ushort)cpuGroupCoreDict.First().Key;\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, Configured CpuGroupId [{nameof(groupId)}={groupId}] not supported yet\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (groupId \u003c 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, Invalid CpuGroupId [{nameof(groupId)}={groupId}]\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (cores == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, Invalid core range [{nameof(cores)}={cores}]\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (cores.Length == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, At least one core must be specified in ProcessorAffinity\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tresult = $\"{AffinityStatus.Fail}, {ex.Message}\";\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tresult = $\"{AffinityStatus.InProgress}, Validation passed\";\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tpublic static bool TryGetCpuMask(string processAffinity, int[] cores, out long cpuMask, out string result)\r\n\t\t{\r\n\t\t\tcpuMask = 0;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tif (cores.Min() \u003c 0 || cores.Max() \u003e= Environment.ProcessorCount)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult = $\"{AffinityStatus.Fail}, Invalid core number(s) found in the range {processAffinity}. Core number must be in between 0 and {Environment.ProcessorCount - 1}\";\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tforeach (int core in cores)\r\n\t\t\t\t{\r\n\t\t\t\t\tcpuMask |= 1L \u003c\u003c core;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tresult = $\"{AffinityStatus.Fail}, Obtaining CpuMask failed, Error={ex.Message}\";\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tresult = $\"{AffinityStatus.InProgress}\";\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tprivate static bool AddProcess(int processId) =\u003e AddProcess(Process.GetProcessById(processId).Handle);\r\n\r\n\t\tprivate static bool AddProcess(IntPtr processHandle) =\u003e AssignProcessToJobObject(handle, processHandle);\r\n\r\n\t\tpublic static bool TryGetAffinityRanges(string affinityRange, out Dictionary\u003cint, List\u003cint\u003e\u003e cpuGroupCoresDict, out string result)\r\n\t\t{\r\n\t\t\t//0:0,1-3,4,5;1:6,7,8-10,15\r\n\t\t\tresult = string.Empty;\r\n\t\t\tbool hasValue = false;\r\n\t\t\tcpuGroupCoresDict = new Dictionary\u003cint, List\u003cint\u003e\u003e();\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tstring[] ranges = affinityRange.Split(new char[] { \u0027;\u0027 });\r\n\r\n\t\t\t\tforeach (string range in ranges)\r\n\t\t\t\t{\r\n\t\t\t\t\tstring[] groupCore = range.Split(\u0027:\u0027, StringSplitOptions.RemoveEmptyEntries);\r\n\r\n\t\t\t\t\tif (int.TryParse(groupCore[0], out int group))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcpuGroupCoresDict.Add(group, new List\u003cint\u003e());\r\n\t\t\t\t\t\tstring[] cores = groupCore[1].Split(\u0027,\u0027, StringSplitOptions.RemoveEmptyEntries);\r\n\t\t\t\t\t\tforeach (string core in cores)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (core.Contains(\u0027-\u0027))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tstring[] cpuRange = core.Split(\u0027-\u0027, StringSplitOptions.RemoveEmptyEntries);\r\n\t\t\t\t\t\t\t\tif (int.TryParse(cpuRange[0], out int from) \u0026\u0026 int.TryParse(cpuRange[1], out int to))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (cpuGroupCoresDict.TryGetValue(group, out List\u003cint\u003e cpus))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcpus.AddRange(Enumerable.Range(from, to - from + 1));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcpuGroupCoresDict[group] = Enumerable.Range(from, to - from + 1) as List\u003cint\u003e;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\thasValue = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif (int.TryParse(core, out int cpu))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (cpuGroupCoresDict.TryGetValue(group, out List\u003cint\u003e cpus))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcpus.Add(cpu);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcpuGroupCoresDict[group] = new List\u003cint\u003e() { cpu };\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\thasValue = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tresult = $\"{AffinityStatus.Fail}, Failed during extracting affinity range from ProcessAffinity setting i.e {affinityRange}, Error: {ex.Message}\";\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (!hasValue)\r\n\t\t\t{\r\n\t\t\t\tresult = $\"{AffinityStatus.Fail}, Failed during extracting affinity range from ProcessAffinity setting i.e {affinityRange}\";\r\n\t\t\t}\r\n\t\t\treturn hasValue;\r\n\t\t}\r\n\r\n\t\tprivate static int GetNumaHighestNodeNumber()\r\n\t\t{\r\n\t\t\tuint numaHighestNodeNumber = 0;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tGetNumaHighestNodeNumber(out numaHighestNodeNumber);\r\n\t\t\t}\r\n\t\t\tcatch (Exception)\r\n\t\t\t{\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\r\n\t\t\treturn (int)numaHighestNodeNumber; // Node number start at 0\r\n\t\t}\r\n\r\n\t\tpublic static void Close()\r\n\t\t{\r\n\t\t\tCloseHandle(handle);\r\n\t\t\thandle = IntPtr.Zero;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic enum AffinityStatus\r\n\t{\r\n\t\tNotEnabled,\r\n\t\tFail,\r\n\t\tSuccess,\r\n\t\tInProgress\r\n\t}\r\n\r\n\tpublic enum JobObjectInfoType\r\n\t{\r\n\t\tAssociateCompletionPortInformation = 7,\r\n\t\tBasicLimitInformation = 2,\r\n\t\tBasicUIRestrictions = 4,\r\n\t\tEndOfJobTimeInformation = 6,\r\n\t\tExtendedLimitInformation = 9,\r\n\t\tSecurityLimitInformation = 5,\r\n\t\tGroupInformation = 11,\r\n\t\tJobObjectGroupInformationEx = 14\r\n\t}\r\n\r\n\tpublic enum JobObjectInfoClass\r\n\t{\r\n\t\tJobObjectBasicAccountingInformation = 1,\r\n\t\tJobObjectBasicLimitInformation = 2,\r\n\t\tJobObjectBasicProcessIdList = 3,\r\n\t\tJobObjectBasicUIRestrictions = 4,\r\n\t\tJobObjectSecurityLimitInformation = 5,\r\n\t\tJobObjectEndOfJobTimeInformation = 6,\r\n\t\tJobObjectAssociateCompletionPortInformation = 7,\r\n\t\tJobObjectBasicAndIoAccountingInformation = 8,\r\n\t\tJobObjectExtendedLimitInformation = 9,\r\n\t}\r\n\r\n\t[StructLayout(LayoutKind.Sequential, Pack = 4)]\r\n\tpublic struct _GROUP_AFFINITY\r\n\t{\r\n\t\tpublic UIntPtr Mask;\r\n\t\t[MarshalAs(UnmanagedType.U2)]\r\n\t\tpublic ushort Group;\r\n\t\t[MarshalAs(UnmanagedType.ByValArray, SizeConst = 3, ArraySubType = UnmanagedType.U2)]\r\n\t\tpublic ushort[] Reserved;\r\n\t}\r\n\r\n\t[StructLayout(LayoutKind.Sequential)]\r\n\tstruct JOBOBJECT_EXTENDED_LIMIT_INFORMATION\r\n\t{\r\n\t\tpublic JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;\r\n\t\tpublic IO_COUNTERS IoInfo;\r\n\t\tpublic UIntPtr ProcessMemoryLimit;\r\n\t\tpublic UIntPtr JobMemoryLimit;\r\n\t\tpublic UIntPtr PeakProcessMemoryUsed;\r\n\t\tpublic UIntPtr PeakJobMemoryUsed;\r\n\t}\r\n\r\n\t[StructLayout(LayoutKind.Sequential)]\r\n\tstruct IO_COUNTERS\r\n\t{\r\n\t\tpublic UInt64 ReadOperationCount;\r\n\t\tpublic UInt64 WriteOperationCount;\r\n\t\tpublic UInt64 OtherOperationCount;\r\n\t\tpublic UInt64 ReadTransferCount;\r\n\t\tpublic UInt64 WriteTransferCount;\r\n\t\tpublic UInt64 OtherTransferCount;\r\n\t}\r\n\r\n\t[StructLayout(LayoutKind.Sequential)]\r\n\tstruct JOBOBJECT_BASIC_LIMIT_INFORMATION\r\n\t{\r\n\t\tpublic Int64 PerProcessUserTimeLimit;\r\n\t\tpublic Int64 PerJobUserTimeLimit;\r\n\t\tpublic UInt32 LimitFlags;\r\n\t\tpublic UIntPtr MinimumWorkingSetSize;\r\n\t\tpublic UIntPtr MaximumWorkingSetSize;\r\n\t\tpublic UInt32 ActiveProcessLimit;\r\n\t\tpublic UIntPtr Affinity;\r\n\t\tpublic UInt32 PriorityClass;\r\n\t\tpublic UInt32 SchedulingClass;\r\n\t}\r\n\r\n\t[StructLayout(LayoutKind.Sequential)]\r\n\tpublic struct SECURITY_ATTRIBUTES\r\n\t{\r\n\t\tpublic UInt32 nLength;\r\n\t\tpublic IntPtr lpSecurityDescriptor;\r\n\t\tpublic Int32 bInheritHandle;\r\n\t}\r\n\r\n\tpublic struct JOBOBJECT_BASIC_PROCESS_ID_LIST\r\n\t{\r\n\t\tpublic int NumberOfAssignedProcesses;\r\n\t\tpublic int NumberOfProcessIdsInList;\r\n\t\t[MarshalAs(UnmanagedType.ByValArray, SizeConst = 200)]\r\n\t\tpublic int[] ProcessIdList;\r\n\t}\r\n```\n\n### Expected behavior\n\nI expect when my WPF application calls ProcessAffinity.Setup(out string affinitySetResult) method it should set the process affinity I configured in my application.\r\n\r\nFor Instance\r\nOn my machine with 2 NUMA nodes and 2 cpu groups with 48 cores on each group \r\n\r\nExample-1: if appSetting.ProcessAffinity=\"0:5-15\" then I expect cores 5 to 15 set in cpu group 0\r\nExample-2: if appSetting.ProcessAffinity=\"1:5-15\" then I expect cores 5 to 15 set in cpu group 1\r\n\r\nand so on\r\n\n\n### Actual behavior\n\nThe affinity works randomly, sometimes it sets correctly and sometimes not. With this latest code snippet most of the time it works but the issues is that I need to run from command prompt with this command\r\n\r\n1. start /NODE 0 MyApplication.Exe (for example-1 above) and it sets affinity correctly\r\n2. start /NODE 1 MyApplication.Exe (for example-2 above) and it sets affinity correctly\r\nIn both cases /AFFINITY switch values od start command are optional, it sets correctly.\n\n### Regression?\n\nNo idea but I am doing it on Windows-11 and Windows Server 2022 using .NET-7 development SDK. I think this problem started from Windows-11 and Windows Server 2022 as the affinity expands to all processor groups by default\n\n### Known Workarounds\n\nAs in my above code snippet, I used setting processor affinity  \r\n`Process.GetCurrentProcess().ProcessorAffinity = (IntPtr)cpuMask;`\r\nbefore SetInformationJobObject\r\nSetInformationJobObject(handle, JobObjectInfoType.JobObjectGroupInformationEx, newAffinityPtr, (uint)length)\r\nThis way I could manage machine not to crash and affinity work but I am sure this is not standard way\n\n### Configuration\n\napplication.runtimeconfiguration.json\r\n\r\n```\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"net7.0\",\r\n    \"frameworks\": [\r\n      {\r\n        \"name\": \"Microsoft.NETCore.App\",\r\n        \"version\": \"7.0.0\"\r\n      },\r\n      {\r\n        \"name\": \"Microsoft.WindowsDesktop.App\",\r\n        \"version\": \"7.0.0\"\r\n      }\r\n    ],\r\n    \"configProperties\": {\r\n       \"System.GC.Concurrent\": true,\r\n      \"System.GC.Server\": true,\r\n      \"System.GC.CpuGroup\": true,\r\n      \"System.GC.HeapAffinitizeRanges\": \"0:1-4\",\r\n      \"System.GC.HeapAffinitizeMask\": 15.0\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\n\n### Other information\n\nWe have similar implementation in C++ which always works, but doesn\u0027t work in C#. Something I cant figure out to pass cpu group into the `cpuMask` of this function\r\nProcess.GetCurrentProcess().ProcessorAffinity = (IntPtr)cpuMask;\r\n\r\nMicrosoft documentation https://learn.microsoft.com/en-us/windows/win32/procthread/processor-groups states that\r\n\r\n\u003e By default, an application is constrained to a single group, which should provide ample processing capability for the typical application. The operating system initially assigns each process to a single group in a round-robin manner across the groups in the system. A process begins its execution assigned to one group. The first thread of a process initially runs in the group to which the process is assigned. Each newly created thread is assigned to the same group as the thread that created it.\r\n\r\nSo, looks like I cant supply cpu group to my  `cpuMask`  and dont find any better way to make this work\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evkg-mca\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-16T04:58:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VbKti",
                                           "createdAt":  "2023-02-16T14:36:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "cc: @mangod9, @AntonLapounov ",
                                           "updatedAt":  "2023-02-16T14:36:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VdTrJ",
                                           "createdAt":  "2023-02-16T21:37:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntonLapounov",
                                           "body":  "There is no reliable way to set affinity from the process itself (see, for example, https://github.com/dotnet/runtime/issues/72441#issuecomment-1190400109); that should be done by external means.  On the other hand, `SetInformationJobObject` should not crash the OS, this may be a bug worth reporting to the OS team.",
                                           "updatedAt":  "2023-02-16T21:37:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VeeP5",
                                           "createdAt":  "2023-02-17T03:37:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vkg-mca",
                                           "body":  "@AntonLapounov , thanks for reply.\r\nI have a reliable way to set affinity if I run command `start /NODE 0 AppName.Exe` then it works properly, secondly C++ works properly with similar implementation. So something in .NET causing the issue?\r\nAnother finding is that when I make server GC on (in application.runtimeconfig.json with below settings) then it fails (and machine crashes in some cases too) but when I have server gc off then it works always. Is there something to do with server GC?\r\n\r\n```\r\n\"configProperties\": {\r\n       \"System.GC.Concurrent\": true,\r\n      **\"System.GC.Server\": true,**\r\n      \"System.GC.CpuGroup\": true,\r\n      \"System.GC.HeapAffinitizeRanges\": \"0:1-4\",\r\n    }\r\n  }\r\n```",
                                           "updatedAt":  "2023-02-17T03:38:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VfBQx",
                                           "createdAt":  "2023-02-17T07:09:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "Closely related issue: Support controlling thread affinity https://github.com/dotnet/runtime/issues/21363.",
                                           "updatedAt":  "2023-02-17T07:09:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Vgy1g",
                                           "createdAt":  "2023-02-17T13:35:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Related by not exactly the same: https://github.com/dotnet/runtime/issues/30124",
                                           "updatedAt":  "2023-02-17T13:35:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VjY8O",
                                           "createdAt":  "2023-02-17T22:19:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntonLapounov",
                                           "body":  "\u003e I have a reliable way to set affinity if I run command start /NODE 0 AppName.Exe then it works properly, secondly C++ works properly with similar implementation. So something in .NET causing the issue?\r\n\r\nAs soon as any component of the process (e.g., server GC or MsQuic library) calls `SetThreadGroupAffinity` API, the process becomes \"multi-group aware\", after which `SetProcessAffinityMask` can no longer be used to change process affinity. \r\n That is an OS limitation documented in the remarks section [here](https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-setprocessaffinitymask).  For server GC you can override the default (on Windows 11+) behavior of using all processor groups by either setting `DOTNET_GCCpuGroup` environment variable to `0` or by setting `System.GC.CpuGroup` property to `false` in `runtimeconfig.json` file.  However, that may not prevent other libraries, e.g., MsQuic, from calling `SetThreadGroupAffinity` API.  Here is example of a simple ASP.NET application, which is unable to change its affinity after initializing MsQuic library: https://github.com/dotnet/runtime/issues/72441#issuecomment-1190276422.  Since we cannot control every single library that might be using `SetThreadGroupAffinity`, a more reliable way to control process affinity is by external means.  If your NUMA node 0 contains a single processor group, `start /node 0` will restrict the process to a single processor group, which make it possible to reliably set the affinity mask from the process itself.  However, note that some systems (e.g., ARM64 servers) may have multiple processor groups within a single NUMA node, in which case `start /node 0` will not restrict the process to a single processor group as we want.",
                                           "updatedAt":  "2023-02-17T22:19:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VjzQZ",
                                           "createdAt":  "2023-02-18T01:56:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vkg-mca",
                                           "body":  "@AntonLapounov I understand that `SetProcessAffinityMask` stops working after `SetThreadGroupAffinity` is called, but in my above implementation I am calling `SetInformationJobObject`  that making machine crash if failed....\r\n\r\nWell, could you please suggest what should I change in my above code to make it work correctly?\r\n\r\nI appriciate your help on this, I am expected to make it work in DOTNET to not let the application converted in C++\r\n\r\nC++ calls `SetInformationJobObject` too and it works well but it doesn\u0027t work in C#, so what I am missing or what is wrong in my code to fix and make it working, this is my challange. \r\n",
                                           "updatedAt":  "2023-02-18T02:02:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VkDWP",
                                           "createdAt":  "2023-02-18T07:44:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntonLapounov",
                                           "body":  "\u003e in my above implementation I am calling `SetInformationJobObject` that making machine crash if failed....\r\n\r\nI have tried to reproduce the crash on two servers with 80 and 256 logical processors; however, `SetInformationJobObject` would always succeed for me even when the previous `TrySetProcessorAffinity` call failed (I removed `return false;` in case of failure).  If you could share the crash dump, that might help to investigate this further.\r\n\r\n\u003e Well, could you please suggest what should I change in my above code to make it work correctly?\r\n\r\nHave you tried changing the `System.GC.CpuGroup` property to `false` as suggested above?  The `true` value forces the .NET runtime to use all processor groups, in which case you cannot set affinity reliably.",
                                           "updatedAt":  "2023-02-18T07:44:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WIWjf",
                                           "createdAt":  "2023-02-25T08:31:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vkg-mca",
                                           "body":  "Hi @AntonLapounov - Sorry for being a little off the thread as I had to work on something more burning/urgent. \r\n\r\nSetting `System.GC.CpuGroup `property to `false` doesn\u0027t seem to make any difference during my a few test scenarios now, will do some more testing to confirm the result.\r\n \r\nWell, I have created a project in my git repo [with](https://github.com/vkg-mca/Research/tree/develop/ProcessAffinitizer) (https://github.com/vkg-mca/Research/tree/develop/ProcessAffinitizer) this code sample. May I request you use this program for your test and share your feedback if something is wrong?\r\n\r\nI am curious to know about your 256 logical processors case - does your PC has 4 NUMA nodes and 4 CPUGroups with 64 logical processors on each? \r\n\r\nI have 2 types of server architecture, first 96 logical processors with 2 NUMA nodes and 2 CPUGroups with 48 logical processors on each and second 128 logical processors with 2 NUMA nodes and 2 CPUGroups with 64 logical processors on each. This testing I am doing on first type of server architecture\r\n",
                                           "updatedAt":  "2023-02-25T08:31:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XjaZN",
                                           "createdAt":  "2023-03-14T22:03:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntonLapounov",
                                           "body":  "\u003e I am curious to know about your 256 logical processors case - does your PC has 4 NUMA nodes and 4 CPUGroups with 64 logical processors on each?\r\n\r\nCorrect.  The system has two 64-core AMD EPYC processors with two logical processors per core.  Windows Server 2019 Datacenter creates four NUMA nodes to accommodate a one-to-one mapping between processor groups and NUMA nodes.  (Windows 11/Windows Server 2022 would create just two nodes in this case, see [here](https://learn.microsoft.com/en-us/windows/win32/procthread/numa-support#behavior-starting-with-windows-10-build-20348).)\r\n\r\n\u003e Well, I have created a project in my git repo [with](https://github.com/vkg-mca/Research/tree/develop/ProcessAffinitizer) (https://github.com/vkg-mca/Research/tree/develop/ProcessAffinitizer) this code sample. May I request you use this program for your test and share your feedback if something is wrong?\r\n\r\nThat link and https://github.com/vkg-mca/Research/ as well give me a 404 page.  Someone else will pick up this issue as I am no longer with the .NET team,",
                                           "updatedAt":  "2023-03-14T22:03:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZfWDh",
                                           "createdAt":  "2023-04-10T04:53:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vkg-mca",
                                           "body":  "I am sorry about the 404 page (the link was part of the private repository), I have added this to now public repository here: https://github.com/vkg-mca/vkg.codefactory/tree/master/ProcessAffinitizer for your access",
                                           "updatedAt":  "2023-04-10T04:53:54Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "No well define API to set Process Affinity that works on multi-NUMA-node and multi-cpu-groups",
        "labels":  [
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85383",
        "createdAt":  "2023-04-26T08:56:54Z",
        "number":  85383,
        "author":  "notofug",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-16T14:41:12Z",
        "body":  "\r\nThis works as expected and terminates application :\r\n`Process.GetCurrentProcess().Kill(entireProcessTree: false);`\r\n\r\nThis throws InvalidOperation\r\n`Process.GetCurrentProcess().Kill(entireProcessTree: true);`\r\n\r\nException origin here ;\r\nhttps://github.com/dotnet/runtime/blob/10438a57b888cbdc6dc15771dc662adde9fd6b14/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.NonUap.cs#L25\r\n\r\n![image](https://user-images.githubusercontent.com/40484721/234524112-16be6843-391e-4139-9611-1ae465494023.png)\r\n\r\n**\r\n\r\nWould it be possible to allow also the \u0027self-termination-with-children\u0027 scenario gracefully ?\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhPvTug==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ax6-z",
                                           "createdAt":  "2023-04-26T08:57:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\r\nThis works as expected and terminates application :\r\n`Process.GetCurrentProcess().Kill(entireProcessTree: false);`\r\n\r\nThis throws InvalidOperation\r\n`Process.GetCurrentProcess().Kill(entireProcessTree: true);`\r\n\r\nException origin here ;\r\nhttps://github.com/dotnet/runtime/blob/10438a57b888cbdc6dc15771dc662adde9fd6b14/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.NonUap.cs#L25\r\n\r\n![image](https://user-images.githubusercontent.com/40484721/234524112-16be6843-391e-4139-9611-1ae465494023.png)\r\n\r\n**\r\n\r\nWould it be possible to allow also the \u0027self-termination-with-children\u0027 scenario gracefully ?\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enotofug\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-26T08:57:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ayLqL",
                                           "createdAt":  "2023-04-26T09:38:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "The trouble here is that `entireProcessTree: true` starts by killing the target process so that no further children can be created. That\u0027s obviously not going to work if the target is the current process.\r\n\r\nThat said, there\u0027s probably an argument to be made that the developer likely has enough control over the current process to be reasonably certain that it won\u0027t spawn any child processes, in which case the current process could be special-cased to kill the children first?",
                                           "updatedAt":  "2023-04-26T09:38:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ayeYH",
                                           "createdAt":  "2023-04-26T10:24:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "notofug",
                                           "body":  "OK thanks, that explains the observation ; a racing-prevention kill-ordering.\r\nPerhaps another way would be to disallow process-creation (with a flag?) when initiating Kill( ) and reverse the order?\r\nThe developer could also explicitly Kill all children in advance but I see no obvious API for enumerating them?",
                                           "updatedAt":  "2023-04-26T10:24:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a3cVi",
                                           "createdAt":  "2023-04-27T02:21:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "skyoxZ",
                                           "body":  "I wrote a solution letting Windows auto kills my children processes when my application exits some years ago but I can\u0027t find the code now. It\u0027s something using [JobObject](https://learn.microsoft.com/en-us/windows/win32/procthread/job-objects).",
                                           "updatedAt":  "2023-04-27T02:21:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cpkWm",
                                           "createdAt":  "2023-05-19T10:58:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "The best we can do right now is to mark it as `help wanted` (old `up-for-grabs`). The person who would like to pick up this task needs to study the current implementation, do a research whether it\u0027s possible to implement it on Unix and Windows and depending on the outcome, send a PR with a fix or share explanation why it\u0027s impossible and update the docs.",
                                           "updatedAt":  "2023-05-19T10:58:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55_iw3",
                                           "createdAt":  "2024-04-10T07:20:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MojtabaTajik",
                                           "body":  "@adamsitnik Can I pick this ticket up?",
                                           "updatedAt":  "2024-04-10T07:20:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55_lMV",
                                           "createdAt":  "2024-04-10T07:24:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e @adamsitnik Can I pick this ticket up?\r\n\r\n@MojtabaTajik yes! Please let me know if you have any questions",
                                           "updatedAt":  "2024-04-10T07:24:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56EhPN",
                                           "createdAt":  "2024-04-10T16:32:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MojtabaTajik",
                                           "body":  "@adamsitnik \r\nIn Windows, we can use \"Process32First\" and \"Process32Next\" to iterate through all process information, retrieve their parent ID, and compare it against the current process ID. If the IDs are equal, the process is a child of the current process, and we can terminate them before killing ourselves.\r\n\r\nI just tested this workaround, and it works fine.\n\nShould I go for it and open a PR?\n\nFor Linux, I\u0027m still investigating.",
                                           "updatedAt":  "2024-04-10T20:01:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E-9O6",
                                           "createdAt":  "2024-07-16T14:41:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hjrb",
                                           "body":  "in .NET Core Process.Kill(true) does not work correctly. It will only kill the root process. Children will not be killed!",
                                           "updatedAt":  "2024-07-16T14:41:11Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Kill(entireProcessTree: true) - cannot terminate self (?)",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86251",
        "createdAt":  "2023-05-15T15:06:58Z",
        "number":  86251,
        "author":  "Soap-141",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-09-07T14:31:56Z",
        "body":  "### Description\r\n\r\nFor diagnostics and debugging purposes my team and I would like to have `Process.GetCurrentProcess().PrivateMemorySize64` working on iOS.\r\n\r\nSee https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.getcurrentprocess?view=net-6.0 and https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.privatememorysize64?view=net-6.0 for more details.\r\n\r\n### Reproduction Steps\r\n\r\nUse this code snippet on Xamarin or MAUI iOS.\r\n\r\n``` cs\r\nvar currentProcess = Process.GetCurrentProcess();\r\nvar privateMemory = currentProcess.PrivateMemorySize64;\r\n```\r\n\r\nNotice it\u0027s throwing exception.\r\n\r\n### Expected behavior\r\n\r\nShould not throw any exception and work like it\u0027s supposed to.\r\n\r\n### Actual behavior\r\n\r\nThrows an exception.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n- .NET 6/7\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZfCDAg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5cRU_t",
                                           "createdAt":  "2023-05-15T15:07:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nFor diagnostics and debugging purposed my team and I would like to have `Process.GetCurrentProcess().PrivateMemorySize64` working on iOS.\r\n\r\nSee https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.getcurrentprocess?view=net-6.0 and https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.privatememorysize64?view=net-6.0 for more details.\r\nSee  for more details.\n\n### Reproduction Steps\n\nUse this code snippet on Xamarin or MAUI iOS.\r\n\r\n``` cs\r\nvar currentProcess = Process.GetCurrentProcess();\r\nvar privateMemory = currentProcess .PrivateMemorySize64;\r\n```\r\n\r\nNotice it\u0027s throwing exception.\n\n### Expected behavior\n\nShould not throw any exception and work like it\u0027s supposed to.\n\n### Actual behavior\n\nThrows an exception.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n- .NET 6/7\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eSoap-141\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-15T15:07:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cTZMA",
                                           "createdAt":  "2023-05-15T21:12:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@akoeplinger is there a native way that iOS supports working set? I thought process was largely unsupported out of the lack of fork abilities, but is introspection also not supported?",
                                           "updatedAt":  "2023-05-15T21:12:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cT0OO",
                                           "createdAt":  "2023-05-15T22:27:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC71hgA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Soap-141",
                                                                               "createdAt":  "2023-05-16T18:33:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "We\u0027re using `proc_pidinfo` to get these details on macOS and unfortunately that API is not allowed by Apple on the iOS App Store so we had to remove it: https://github.com/dotnet/runtime/issues/61265\r\n\r\nThat said, there\u0027s nothing stopping you from using this API on your own e.g. behind a DEBUG flag that you never compile for a build that ends up on the App Store.\r\n\r\nI\u0027ll take a quick look to see whether there is some allowed API that gives _just_ the memory details though.",
                                           "updatedAt":  "2023-05-15T22:27:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cdCCi",
                                           "createdAt":  "2023-05-17T10:07:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nFor diagnostics and debugging purposes my team and I would like to have `Process.GetCurrentProcess().PrivateMemorySize64` working on iOS.\r\n\r\nSee https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.getcurrentprocess?view=net-6.0 and https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.privatememorysize64?view=net-6.0 for more details.\r\nSee  for more details.\r\n\r\n### Reproduction Steps\r\n\r\nUse this code snippet on Xamarin or MAUI iOS.\r\n\r\n``` cs\r\nvar currentProcess = Process.GetCurrentProcess();\r\nvar privateMemory = currentProcess .PrivateMemorySize64;\r\n```\r\n\r\nNotice it\u0027s throwing exception.\r\n\r\n### Expected behavior\r\n\r\nShould not throw any exception and work like it\u0027s supposed to.\r\n\r\n### Actual behavior\r\n\r\nThrows an exception.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n- .NET 6/7\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eSoap-141\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `os-ios`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-17T10:07:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hGaKG",
                                           "createdAt":  "2023-07-10T14:17:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Soap-141",
                                           "body":  "@akoeplinger Any updates?",
                                           "updatedAt":  "2023-07-10T14:17:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5l8IMC",
                                           "createdAt":  "2023-09-07T14:31:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Soap-141",
                                           "body":  "Still no updates?",
                                           "updatedAt":  "2023-09-07T14:31:56Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[iOS] System.Diagnostics.Process is not supported",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86416",
        "createdAt":  "2023-05-18T01:06:04Z",
        "number":  86416,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-22T01:32:13Z",
        "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20230517.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=276496\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=5478962\u0026resultId=179910\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet8.0-windows-Release-arm64-CoreCLR_checked-jitstress2_tiered-Windows.11.Arm64.Open\r\n    - System.Diagnostics.Tests.ProcessWaitingTests.WaitChain\r\n```\r\n\r\n**Error message:**\r\n```\r\nAssert.True() Failure\r\nExpected: True\r\nActual:   False\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at System.Diagnostics.Tests.ProcessWaitingTests.WaitChain() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessWaitingTests.cs:line 567\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodInvoker.cs:line 59\r\n```\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv33HZA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5chb96",
                                           "createdAt":  "2023-05-18T01:06:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n**Failed in:** [runtime-coreclr libraries-jitstress 20230517.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=276496\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=5478962\u0026resultId=179910\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet8.0-windows-Release-arm64-CoreCLR_checked-jitstress2_tiered-Windows.11.Arm64.Open\r\n    - System.Diagnostics.Tests.ProcessWaitingTests.WaitChain\r\n```\r\n\r\n**Error message:**\r\n```\r\nAssert.True() Failure\r\nExpected: True\r\nActual:   False\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at System.Diagnostics.Tests.ProcessWaitingTests.WaitChain() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessWaitingTests.cs:line 567\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodInvoker.cs:line 59\r\n```\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ev-wenyuxu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-arm64`, `area-System.Diagnostics.Process`, `os-windows`, `JitStress`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-18T01:06:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ckaJm",
                                           "createdAt":  "2023-05-18T13:21:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Triage: lets see if it occurs more frequently, especially for other CI legs (it can be a JIT issue)",
                                           "updatedAt":  "2023-05-18T13:21:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_fcdk",
                                           "createdAt":  "2025-08-22T01:32:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20250821.1](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1128302)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-x64-jitstress1_tiered-Windows.10.Amd64.Open\n    - System.Diagnostics.Tests.ProcessWaitingTests.WaitChain\n```\n\n**Error message:**\n```\nAssert.True() Failure\nExpected: True\nActual:   False\n```\n\n**Stack trace:**\n```\n   at System.Diagnostics.Tests.ProcessWaitingTests.WaitChain() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessWaitingTests.cs:line 567\n   at System.RuntimeMethodHandle.InvokeMethod(ObjectHandleOnStack target, Void** arguments, ObjectHandleOnStack sig, BOOL isConstructor, ObjectHandleOnStack result)\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```\n",
                                           "updatedAt":  "2025-08-22T01:32:13Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Test failure System.Diagnostics.Tests.ProcessWaitingTests.WaitChain",
        "labels":  [
                       "arch-arm64",
                       "area-System.Diagnostics.Process",
                       "os-windows",
                       "JitStress"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87356",
        "createdAt":  "2023-06-09T21:09:31Z",
        "number":  87356,
        "author":  "marcelolynch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-21T23:00:45Z",
        "body":  "### Description\r\nThe following code is throwing (sometimes):\r\n\r\n```\r\nProcess currentProcess = Process.GetCurrentProcess();\r\nvar processThreads = currentProcess.Threads.Count;    // throws\r\n```\r\n\r\nWith this stack trace\r\n\r\n```\r\nException:System.InvalidOperationException: Process has exited, so the requested information is not available.\r\n   at void System.Diagnostics.Process.EnsureState(State state)\r\n   at ProcessThreadCollection System.Diagnostics.Process.get_Threads()\r\n```\r\n\r\nHow can the current process have exited? \r\n\r\nThis issue seems to only be happening on Linux, we\u0027ve been running this code on Windows for years, to my knowledge without encountering it.\r\n\r\n### Configuration\r\n\r\n- OS: `Linux version 5.15.0-1038-azure (buildd@lcy02-amd64-004) (gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0, GNU ld (GNU Binutils for Ubuntu) 2.34) dotnet/core#45~20.04.1-Ubuntu SMP Tue Apr 25 18:45:15 UTC 2023`, \r\n- .NETFramework: No .NET Framework is detected\r\n- Processor:Family 6 Model 85 Stepping 7, GenuineIntel - Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz\r\n- CLR Version: 6.0.16\r\n- Runtime Framework: \u0027.NETCoreApp,Version=v6.0\u0027\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYiDhxQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5efgOg",
                                           "createdAt":  "2023-06-10T00:53:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\nThe following code is throwing (sometimes):\r\n\r\n```\r\nProcess currentProcess = Process.GetCurrentProcess();\r\nvar processThreads = currentProcess.Threads.Count;    // throws\r\n```\r\n\r\nWith this stack trace\r\n\r\n```\r\nException:System.InvalidOperationException: Process has exited, so the requested information is not available.\r\n   at void System.Diagnostics.Process.EnsureState(State state)\r\n   at ProcessThreadCollection System.Diagnostics.Process.get_Threads()\r\n```\r\n\r\nHow can the current process have exited? \r\n\r\nThis issue seems to only be happening on Linux, we\u0027ve been running this code on Windows for years, to my knowledge without encountering it.\r\n\r\n### Configuration\r\n\r\n- OS: `Linux version 5.15.0-1038-azure (buildd@lcy02-amd64-004) (gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0, GNU ld (GNU Binutils for Ubuntu) 2.34) dotnet/core#45~20.04.1-Ubuntu SMP Tue Apr 25 18:45:15 UTC 2023`, \r\n- .NETFramework: No .NET Framework is detected\r\n- Processor:Family 6 Model 85 Stepping 7, GenuineIntel - Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz\r\n- CLR Version: 6.0.16\r\n- Runtime Framework: \u0027.NETCoreApp,Version=v6.0\u0027\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emarcelolynch\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-10T00:53:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ef_bI",
                                           "createdAt":  "2023-06-10T03:23:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@tmds  has advised on such things in the past..",
                                           "updatedAt":  "2023-06-10T03:23:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5elv0Z",
                                           "createdAt":  "2023-06-12T09:29:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "This may happen if we\u0027re unable to read/process the process\u0027 `stat` file.\r\n\r\nCan you add this `catch` which will print out the file, and share what it looks like?\r\n```cs\r\ntry\r\n{\r\n    Process currentProcess = Process.GetCurrentProcess();\r\n    var processThreads = currentProcess.Threads.Count;\r\n}\r\ncatch\r\n{\r\n    Console.WriteLine($\"\u0027{File.ReadAllText(\"/proc/self/stat\")}\u0027\");\r\n\r\n    throw;\r\n}\r\n```",
                                           "updatedAt":  "2023-06-12T09:29:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5enmlq",
                                           "createdAt":  "2023-06-12T14:18:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marcelolynch",
                                           "body":  "@tmds I\u0027ll try this, will report back if I get an example",
                                           "updatedAt":  "2023-06-12T14:18:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5envK_",
                                           "createdAt":  "2023-06-12T14:34:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "Thanks.\r\n\r\nIf it occurs often, try and collect a few samples.\r\n\r\nSince we\u0027re looking at the file just after we got the Exception, it\u0027s a good chance it\u0027s still similar, but it may have changed already.",
                                           "updatedAt":  "2023-06-12T14:44:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fVjwK",
                                           "createdAt":  "2023-06-20T20:59:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marcelolynch",
                                           "body":  "Trying to dump the file contents I encountered what seems to be the cause:\r\n\r\n```\r\nDetails: Original exception message: Process has exited, so the requested information is not available..\r\n Debugging information: /proc/self/stat contents:\r\n(Exception occurred while reading /proc/self/stat: Too many open files : \u0027/proc/self/stat\u0027).\r\n```\r\n\r\nThe same \"Too many open files\" must have been hit when originally trying to open the file",
                                           "updatedAt":  "2023-06-20T20:59:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fWxtk",
                                           "createdAt":  "2023-06-21T00:50:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "You could do `ulimit -n 8192` or something and see if it goes away.\r\n\r\nI assume this could happen on any IO, and it\u0027s not particularly useful to do any work to make this particular path give a better message. Shall we close this now?",
                                           "updatedAt":  "2023-06-21T00:50:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fYiwO",
                                           "createdAt":  "2023-06-21T06:41:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "When .NET starts it increases the limit to the max:\r\n\r\nhttps://github.com/dotnet/runtime/blob/74196a07ce50054c998c298eeed29f22f780bbf2/src/coreclr/pal/src/init/pal.cpp#L1109-L1111\r\n\r\nYou can see the max by running `ulimit -Hn`. On my system that gives: `524288`.\r\n\r\nI wonder if the limit is low on your system, whether your app needs so many file descriptors, or whether it may be leaking file descriptors. \r\n\r\n\u003e I assume this could happen on any IO, and it\u0027s not particularly useful to do any work to make this particular path give a better message. Shall we close this now?\r\n\r\nLooks like the Windows implementation has a more specific exception if an issue occurs while retrieving the process info:\r\n\r\nhttps://github.com/dotnet/runtime/blob/74196a07ce50054c998c298eeed29f22f780bbf2/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/ProcessManager.Win32.cs#L299-L302\r\n\r\nThe actual message is _Couldn\u0027t get process information from performance counter._ because it was written for the other caller in `ProcessManager.Windows.cs`:\r\n\r\nhttps://github.com/dotnet/runtime/blob/74196a07ce50054c998c298eeed29f22f780bbf2/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/ProcessManager.Windows.cs#L446-L461",
                                           "updatedAt":  "2023-06-21T06:41:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fcekN",
                                           "createdAt":  "2023-06-21T17:37:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marcelolynch",
                                           "body":  "\u003e it\u0027s not particularly useful to do any work to make this particular path give a better message\r\n\r\nNot sure I agree with this, but I don\u0027t know the intricacies of making this more clear (at least I would bet it\u0027s not hard to identify). The current message is pretty misleading, and while it\u0027s true this can happen with any IO, so I wouldn\u0027t expect a graceful handling, other places that fail in this manner surface it better, e.g.:\r\n\r\n```cs\r\nException:System.IO.IOException: Too many open files\r\n   at bool Environment.TryGetUserNameFromPasswd(Byte* buf, int bufLen, out string username)\r\n   at string Environment.get_UserName()\r\n```\r\n\r\n@tmds \r\n\u003e When .NET starts it increases the limit to the max [...] I wonder if the limit is low on your system, whether your app needs so many file descriptors, or whether it may be leaking file descriptors.\r\n\r\nIs there an easy way to verify that this has taken effect at runtime (without access to a console: this is running on an azure pipeline)? `ulimit -Hn` gives me `65536` here. My application is a build system, so many active file descriptors are expected, but 65536 does seem like a bit much. I\u0027ll try to add some code to log the count. \r\n\r\nIn any case, I fear this discussion is getting out of scope for the bug itself, so feel free to close if no action is deemed necessary.",
                                           "updatedAt":  "2023-06-21T17:37:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fcnL2",
                                           "createdAt":  "2023-06-21T18:06:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC-nn_A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "marcelolynch",
                                                                               "createdAt":  "2023-06-21T18:42:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e Is there an easy way to verify that this has taken effect at runtime\r\n\r\nDo a `Process.Start` of `ulimit -Sn`. This will print out the limit (which is inherited from the .NET parent).",
                                           "updatedAt":  "2023-06-21T18:07:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fd45p",
                                           "createdAt":  "2023-06-21T21:00:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e In any case, I fear this discussion is getting out of scope for the bug itself, so feel free to close if no action is deemed necessary.\r\n\r\nIf we could make a change to improve the error message, without being so narrow it\u0027s rarely useful, and without too much complexity, I think that would probably be interesting. And it would be fine to use this issue to track it.\r\n\r\nIn a quick look there is not really any wiring right now from the point the read is done. It\u0027s a try-pattern. So code between there and the point of the exception would need to pass the code back somehow. Usually we do a try pattern to avoid the cost of an exception (because we think exceptions could be common and not a fault) so simply changing to throw at the point of the readis probably not desirable. I think if you are interested to take a look you\u0027d be welcome. Actionable error messages are good, it would probably have saved you having to open this issue 😄 ",
                                           "updatedAt":  "2023-06-21T21:00:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iIOHF",
                                           "createdAt":  "2023-07-21T23:00:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "We could definitely get the error message on the syscalls and append it to the caller\u0027s exception:\r\nhttps://github.com/dotnet/runtime/blob/74196a07ce50054c998c298eeed29f22f780bbf2/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/ProcessManager.Linux.cs#L73-L78",
                                           "updatedAt":  "2023-07-21T23:00:17Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "System.Diagnostics.Process.EnsureState called on Process.GetCurrentProcess() indicates current process has exited (\"Process has exited, so the requested information is not available\")",
        "labels":  [
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88161",
        "createdAt":  "2023-06-28T20:59:49Z",
        "number":  88161,
        "author":  "DamianSuess",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-20T06:39:27Z",
        "body":  "### Description\n\nWhen attempting to execute a command as a different user on a Linux machine does not work.\r\n\r\nRelated:\r\n* https://github.com/dotnet/corefx/pull/26431\n\n### Reproduction Steps\n\n```cs\r\nvar bashCommand = \"-c \"\"sudo docker container stop SomeContainer\"\"\";\r\n\r\nvar psi = new ProcessStartInfo\r\n{\r\n  FileName = \"/bin/bash\",\r\n  Arguments = bashCommand,\r\n  UseShellExecute = false,\r\n  CreateNoWindow = true,\r\n  RedirectStandardError = true,\r\n  RedirectStandardInput = true,\r\n  RedirectStandardOutput = true,\r\n};\r\n\r\nif (isSudo)\r\n{\r\n  psi.UserName = \"MyUsername\";\r\n  psi.PasswordInClearText = \"MyPassword\";\r\n}\r\n\r\nusing var process = Process.Start(psi);\r\noutput = process?.StandardOutput.ReadToEnd();\r\nprocess?.WaitForExit();\r\n```\r\n\n\n### Expected behavior\n\nAllow the developer to input a user name and password\n\n### Actual behavior\n\nPassword is only supported on Windows\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiPnclw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5gFt1m",
                                           "createdAt":  "2023-06-28T21:12:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@tmds ",
                                           "updatedAt":  "2023-06-28T21:12:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gFxnl",
                                           "createdAt":  "2023-06-28T21:24:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen attempting to execute a command as a different user on a Linux machine does not work.\r\n\r\nRelated:\r\n* https://github.com/dotnet/corefx/pull/26431\n\n### Reproduction Steps\n\n```cs\r\nvar bashCommand = \"-c \"\"sudo docker container stop SomeContainer\"\"\";\r\n\r\nvar psi = new ProcessStartInfo\r\n{\r\n  FileName = \"/bin/bash\",\r\n  Arguments = bashCommand,\r\n  UseShellExecute = false,\r\n  CreateNoWindow = true,\r\n  RedirectStandardError = true,\r\n  RedirectStandardInput = true,\r\n  RedirectStandardOutput = true,\r\n};\r\n\r\nif (isSudo)\r\n{\r\n  psi.UserName = \"MyUsername\";\r\n  psi.PasswordInClearText = \"MyPassword\";\r\n}\r\n\r\nusing var process = Process.Start(psi);\r\noutput = process?.StandardOutput.ReadToEnd();\r\nprocess?.WaitForExit();\r\n```\r\n\n\n### Expected behavior\n\nAllow the developer to input a user name and password\n\n### Actual behavior\n\nPassword is only supported on Windows\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDamianSuess\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-28T21:24:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gHlx4",
                                           "createdAt":  "2023-06-29T08:10:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "This is by design, `PasswordInClearText` and `Password` are supported only on Windows:\r\n\r\nhttps://github.com/dotnet/runtime/blob/7cf329b773fa5ed544a9377587018713751c73e3/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.Unix.cs#L15-L19\r\n\r\nhttps://github.com/dotnet/runtime/blob/7cf329b773fa5ed544a9377587018713751c73e3/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.Unix.cs#L49-L53\r\n\r\n@tmds is there any way we could make it work on Linux?",
                                           "updatedAt":  "2023-06-29T08:10:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gHl1L",
                                           "createdAt":  "2023-06-29T08:10:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e psi.PasswordInClearText = \"MyPassword\";\r\n\r\nThis is will throw.\r\n\r\n\u003e psi.UserName = \"MyUsername\";\r\n\r\nThis allows to run something as a different user, but the current user already needs permissions to run as that user, for example, the current user is root.\r\n\r\nIf you set `UserName` and launch `sudo`, this tries to run `sudo` under `UserName`.\r\nIt does **not** try to `sudo` to obtain root, and then become `UserName`.\r\n\r\nYou can do something like:\r\n```cs\r\nProcess RunAs(string user, string password, IEnumerable\u003cstring\u003e command)\r\n{\r\n    List\u003cstring\u003e sudoArgs = new()\r\n    {\r\n            \"-k\",       // don\u0027t use cached credentials\r\n            \"-S\",       // read password from stdin\r\n            \"-u\", user, // user\r\n            \"-p\", \"\",   // empty password prompt\r\n            \"--\",       // command separator\r\n    };\r\n    sudoArgs.AddRange(command);\r\n\r\n    var psi = new ProcessStartInfo()\r\n    {\r\n        FileName = \"sudo\",\r\n        RedirectStandardInput = true // for writing the password\r\n    };\r\n    sudoArgs.ForEach(arg =\u003e psi.ArgumentList.Add(arg));\r\n    Process process = Process.Start(psi)!;\r\n\r\n    process.StandardInput.WriteLine(password);\r\n\r\n    return process;\r\n}\r\n```",
                                           "updatedAt":  "2023-06-29T08:10:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gHrHg",
                                           "createdAt":  "2023-06-29T08:28:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e @tmds is there any way we could make it work on Linux?\r\n\r\nMy previous comment gives some idea on how it could be made to work. It anyhow needs `sudo`/`su`.\r\nThe need to redirect standard output may probably be omitted by using an _askpass_ executable.",
                                           "updatedAt":  "2023-06-29T08:28:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gL1VE",
                                           "createdAt":  "2023-06-29T19:47:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODeR_DA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "tmds",
                                                                               "createdAt":  "2023-07-03T17:18:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "DamianSuess",
                                                                               "createdAt":  "2024-04-16T03:27:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "DamianSuess",
                                           "body":  "Thank you, Tom! (@tmds)\r\nI\u0027ll give this a shot tomorrow when I get back to the office. That would be amazing if this works\r\n\r\nOverall, to help paint the scenario... Our application is launched via the `.desktop` icon with regular user access and only the app\u0027s settings area requires elevated access (_i.e. stop/reset the Docker container_). The goal is to have our users use the GUI and not the command line.\r\n\r\nP.S. Thanks again. Especially for creating the Tmds.DBus library, it too is being used by our app for Linux Bluetooth connectivity 😃 ",
                                           "updatedAt":  "2023-06-29T19:53:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gz8PJ",
                                           "createdAt":  "2023-07-06T19:51:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianSuess",
                                           "body":  "Hi @tmds \r\n\r\nJust wanted to let you know, attempts using the `RunAs(..)` didn\u0027t turn out so well. It keeps throwing an exception on the `process.StandardInput.WriteLIne(password)` line. Don\u0027t mind the delay writing back, figured id give it a few attempts before reaching out.  None the less, I appreciate the suggestion :) \r\n\r\n```txt\r\nSystem.IO.IOException: \u0027Broken pipe\u0027\r\nThis exception was originally thrown at this call stack:\r\n    System.Net.Sockets.Socket.Send(System.ReadOnlySpan\u003cbyte\u003e, System.Net.Sockets.SocketFlags)\r\n    System.IO.Pipes.PipeStream.WriteCore(System.ReadOnlySpan\u003cbyte\u003e)\r\n```\r\n",
                                           "updatedAt":  "2023-07-06T19:51:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gz-Vc",
                                           "createdAt":  "2023-07-06T19:59:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e System.IO.IOException: \u0027Broken pipe\u0027\r\n\r\nbroken pipe means the other end isn\u0027t reading.\r\n\r\nYou can try running it from the commandline. Maybe it will tell you something useful. You can run something like:\r\n\r\n```sh\r\necho yourpassword | sudo -k -S -u username -p -- id\r\n```",
                                           "updatedAt":  "2023-07-06T19:59:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5g0BF0",
                                           "createdAt":  "2023-07-06T20:08:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianSuess",
                                           "body":  "holy geeze that was a fast reply!",
                                           "updatedAt":  "2023-07-06T20:08:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5g0ExP",
                                           "createdAt":  "2023-07-06T20:22:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianSuess",
                                           "body":  "Here we go, \"command not found\".\r\nAnd just to verify, the command `sudo docker container stop MyService` does work as expected.\r\n\r\n```sh\r\n$ echo \u0027MY_PASWORD\u0027 | sudo -k -S -u USERNAME -p -- \u0027docker container stop MyService\u0027\r\nsudo: docker container stop MyService: command not found\r\n```\r\n\r\nThough it\u0027s still not stopping the service, I found my broken pipe issue. Was attempting to read the results and WaitForExit().\r\n\r\n```cs\r\nvar cmd = \"docker container stop MYSERVICE\";\r\nvar process = Bash.RunAs(\"USER\", \"PASS\", new[] { cmd });\r\n\r\n// Below caused issues.. so I removed it\r\nvar result = process?.StandardOutput.ReadToEnd();\r\nprocess?.WaitForExit();\r\n```",
                                           "updatedAt":  "2023-07-06T20:30:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5g0JUd",
                                           "createdAt":  "2023-07-06T20:39:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODADdQg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "DamianSuess",
                                                                               "createdAt":  "2023-07-06T21:08:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e \u0027docker container stop MyService\u0027\r\n\r\nYou need to remove the quotes so the shell treats these 4 words as separate arguments.\r\n\r\nAnd similar, in .NET you need to pass 4 strings for this command instead of 1.",
                                           "updatedAt":  "2023-07-06T20:39:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5g0QhW",
                                           "createdAt":  "2023-07-06T21:08:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODeR_QQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "DamianSuess",
                                                                               "createdAt":  "2024-04-16T03:28:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "DamianSuess",
                                           "body":  "HOLY GEEZE YOU\u0027RE AWESOME!!!\r\n\r\n(**UPDATE**) With your debugging tip, it helped to track down that my user account was not a part of the `docker` user group, so the command was failing.\r\n\r\nThe final result looks like so:\r\n(_note, I moved the user/pass creds to a securely encoded location_)\r\n\r\n### Add User to Docker Group\r\n\r\n```sh\r\nsudo addgroup --system docker\r\nsudo adduser $USER docker\r\n```\r\n\r\nOtherwise, the following results were coming back:\r\n\r\n```sh\r\n$ echo \u0027PASSSWORD\u0027 | sudo -k -S -u USERNAME -p -- docker container stop MYSERVICE\r\nGot permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post \"http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/hardware/stop\": dial unix /var/run/docker.sock: connect: permission denied\r\n```\r\n\r\n### Code\r\n\r\n```cs\r\nvar cmd = \"docker container stop MYSERVICE\";\r\nvar process = Bash.RunAs(cmd.Split(\u0027 \u0027));\r\nprocess?.WaitForExit();\r\n```\r\n\r\nTom, if I\u0027m ever out your way, or if you\u0027re traveling States-side of the Atlantic. Your next drink is on me 🍻 ",
                                           "updatedAt":  "2023-07-06T21:21:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5g2P96",
                                           "createdAt":  "2023-07-07T06:42:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODAHG9g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DamianSuess",
                                                                               "createdAt":  "2023-07-07T14:21:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmds",
                                           "body":  "No problem @DamianSuess, happy to help!",
                                           "updatedAt":  "2023-07-07T06:42:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56mKjl",
                                           "createdAt":  "2024-04-15T13:13:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markusschaber",
                                           "body":  "\u003e \u003e @tmds is there any way we could make it work on Linux?\r\n\u003e \r\n\u003e My previous comment gives some idea on how it could be made to work. It anyhow needs `sudo`/`su`. The need to redirect standard output may probably be omitted by using an _askpass_ executable.\r\n\r\nIt can be achieved using `su`. We can \"chat\" with `su` to get the password prompt on stdout/stderr, and then issue the password via stdin.\r\n\r\nThe \"kdesu\" utility does the same: https://github.com/KDE/kdesu/blob/master/src/suprocess.cpp#L222\r\n\r\nCareful consideration of all the arguments necessary for `su` is still required - for example, it looks like `--pty` should be used to prevent against attacks through TIOCSTI / TIOLINUX ioctl.",
                                           "updatedAt":  "2024-04-15T13:15:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-IS1I",
                                           "createdAt":  "2024-05-16T20:15:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODu3S3g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "markusschaber",
                                                                               "createdAt":  "2024-08-20T06:26:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lennybacon",
                                           "body":  "Any updates on this? \r\n\r\n@DamianSuess would you share your `Bash.RunAs` method - It sounded like you were successful...",
                                           "updatedAt":  "2024-05-16T20:15:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-TmhU",
                                           "createdAt":  "2024-05-19T02:23:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianSuess",
                                           "body":  "Sure thing @lennybacon, i\u0027ll dig it up on Monday. It\u0027s very similar to TMDS\u0027 post. I\u0027ve implemented it for use with our hardware service apps where you can\u0027t keep prompting a user at every turn (_i.e. managing Docker_)",
                                           "updatedAt":  "2024-05-19T02:27:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-aEr1",
                                           "createdAt":  "2024-05-20T16:11:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODuBwDA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "markusschaber",
                                                                               "createdAt":  "2024-08-14T11:59:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "DamianSuess",
                                           "body":  "@lennybacon I made public the following Gist, _C# Linux BASH_, for the example you requested.\r\n\r\nThis simplified class allows you to execute commands with either `RunAs(...)` providing the _user/pass_ or `Command(...)` which executes without elevated privileges. The admin user/pass is Base 64 encoded in the class, which is not suitable for production use - _it\u0027s just an example_.\r\n\r\n[C# Linux BASH](https://gist.github.com/DamianSuess/53436b050759759be044b450094d749f)",
                                           "updatedAt":  "2024-05-20T16:11:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6I-dyX",
                                           "createdAt":  "2024-08-20T06:35:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODu6rfw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2024-08-20T13:24:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "markusschaber",
                                           "body":  "Hmm. I think the difference between `sudo` and `su` is:\r\n1. `sudo` requires the _current_ user to be registered in `/etc/sudoers` so it\u0027s permitted to elevate, then asks for the password of the _current_ user, and then elevates to the given _target_ user. It basically allows the _current_ user to elevate to _any_ other user as long as the _current_ user knows his/her _own_ password.\r\n2. `su` instead asks for the password of the _target_ user, and then elevates to the _target_ user. This allows to elevate to the target user as long the _target_ users\u0027 password is given.\r\n\r\nIn our use case, 2. is what we require, as we\u0027re a \"service\" (but running in an unprivileged account for security reasons), and then allow users to log in with their account, and assume their user rights, and I also think that\u0027s what `ProcessStartInfo.Username` and `ProcessStartInfo.Password` perfrom under windows, if I read the doc correctly.",
                                           "updatedAt":  "2024-08-20T06:39:27Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "Running ProcessStartInfo as different UserName and Password doesn\u0027t work on Linux",
        "labels":  [
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91706",
        "createdAt":  "2023-09-07T00:15:04Z",
        "number":  91706,
        "author":  "kjpgit",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-12T05:57:41Z",
        "body":  "I have a .net 8 preview 7, console app.  Running via ssh/terminal on Linux, also happens on WSL2.  Test code:\r\n```\r\n\r\n public static void testpi() { \r\n        string program = \"vim\";\r\n        string[] args = { \"hello.txt\"};\r\n        var pi = new ProcessStartInfo(program, args);\r\n        var p = Process.Start(pi);\r\n    }\r\n```\r\n\r\nIt opens up vim but I hear the console beep and see this on the screen: ^M84;0;0c\r\n\r\nI also sometimes see: $ Vim: Error reading input, exiting...Vim: Finished.\r\n\r\nWhat I want to do is launch vim and let it have exclusive use of the tty while it is active.  When vim exits, then c# can go back to reading from the tty.  C# is being used as an interactive and persistent \"launcher\" app.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOc4USzQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5l4Z_x",
                                           "createdAt":  "2023-09-07T00:15:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI have a .net 8 preview 7, console app.  Running via ssh/terminal on Linux.  Test code:\r\n\r\n public static void testpi() { \r\n        string program = \"vim\";\r\n        string[] args = { \"hello.txt\"};\r\n        var pi = new ProcessStartInfo(program, args);\r\n        var p = Process.Start(pi);\r\n    }\r\n\r\nIt opens up vim but I hear the console beep and see this on the screen: ^M84;0;0c\r\n\r\nWhat I really, really want is execve, so I immediately relinquish the tty and hand it over to vim, even if the c# process has other threads running.  It was working with Tmds.libc (they have execve), but that\u0027s not portable to mac.   And the Mono.Posix execve is [buggy](https://github.com/mono/mono.posix/issues/36).  \r\n\r\nWould really, really like execve or something that works here.  What am I doing wrong with Process.Start?  \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekjpgit\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-07T00:15:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mFcMR",
                                           "createdAt":  "2023-09-10T03:52:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kjpgit",
                                           "body":  "When I add a `p.WaitForExit()`, instead of immediately exiting from C#, I don\u0027t get the gibberish and vim works fine.",
                                           "updatedAt":  "2023-09-10T03:52:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zhRLN",
                                           "createdAt":  "2024-02-12T05:57:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "moh-hassan",
                                           "body":  "@kjpgit \r\nI tried your code in NET8 v8.0.101 without  p.WaitForExit()  and it is working fine.",
                                           "updatedAt":  "2024-02-12T05:57:40Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  ".net 8 fails to launch a child console app without terminal gibberish",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91891",
        "createdAt":  "2023-09-11T16:59:39Z",
        "number":  91891,
        "author":  "ezverev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-22T14:09:25Z",
        "body":  "              Closing this issue because I cannot reproduce it reliably.\r\n\r\n_Originally posted by @jscarle in https://github.com/dotnet/runtime/issues/74677#issuecomment-1228951480_\r\n\r\nThe original issue suggested to repro the problem using the Process.StandardOutput which is suboptimal because most of the processes we usually run produce some output. The issue shows itself only when output is empty. Just try the same but with the Process.StandardError. In most of the cases there will be no data in that stream and the issue will reproduce.\r\n\r\n```\r\n    var process = Process.Start(new ProcessStartInfo(\"path\\to\\executable.exe\", arguments)\r\n    {\r\n        CreateNoWindow = true,\r\n        UseShellExecute = false,\r\n        RedirectStandardInput = true,\r\n        RedirectStandardOutput = true,\r\n        RedirectStandardError = true,\r\n        StandardOutputEncoding = Encoding.UTF8,\r\n        StandardErrorEncoding = Encoding.UTF8\r\n    });\r\n\r\n    var outputBuilder = new StringBuilder();\r\n    while (process.StandardError.Peek() \u003e -1)\r\n        outputBuilder.Append((char)process.StandardError.Read());\r\n    var result = outputBuilder.ToString();\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOefUEew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5mLYv-",
                                           "createdAt":  "2023-09-11T16:59:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n              Closing this issue because I cannot reproduce it reliably.\r\n\r\n_Originally posted by @jscarle in https://github.com/dotnet/runtime/issues/74677#issuecomment-1228951480_\r\n\r\nThe original issue suggested to repro the problem with the StandardOutput StreamReader which is suboptimal because most of the processes we usually run produce some output. The issue demands that the output is empty.\r\n\r\nJust try the same but with the StandardError StreamReader. With most of the cases you might take there will be no data in that stream and the issue will reproduce.\r\n\r\n```\r\n    var process = Process.Start(new ProcessStartInfo(\"path\\to\\executable.exe\", arguments)\r\n    {\r\n        CreateNoWindow = true,\r\n        UseShellExecute = false,\r\n        RedirectStandardInput = true,\r\n        RedirectStandardOutput = true,\r\n        RedirectStandardError = true,\r\n        StandardOutputEncoding = Encoding.UTF8,\r\n        StandardErrorEncoding = Encoding.UTF8\r\n    });\r\n\r\n    var outputBuilder = new StringBuilder();\r\n    while (process.StandardError.Peek() \u003e -1)\r\n        outputBuilder.Append((char)process.StandardError.Read());\r\n    var result = outputBuilder.ToString();\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eezverev\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-11T16:59:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55ETA2",
                                           "createdAt":  "2024-04-02T06:25:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AugustoDeveloper",
                                           "body":  "I had same issue on linux",
                                           "updatedAt":  "2024-04-02T06:25:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc559QR7",
                                           "createdAt":  "2024-04-09T21:45:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cartercanedy",
                                           "body":  "any updates with this?",
                                           "updatedAt":  "2024-04-09T21:45:44Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Process.StandardOutput.Peek() and Process.StandardError.Peek() hang until StreamReader receives data.",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93321",
        "createdAt":  "2023-10-11T01:13:48Z",
        "number":  93321,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:01:12Z",
        "body":  "**Failed in:** [runtime-coreclr jitstress 20231009.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=432736\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=9585790\u0026resultId=118037\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\ncoreclr osx x64 Checked jitstress2 @ OSX.1200.Amd64.Open\r\n    - baseservices/exceptions/simple/ParallelCrashMainThread/ParallelCrashMainThread.sh\r\n    - baseservices/exceptions/simple/ParallelCrash/ParallelCrash.sh\r\n    - baseservices/exceptions/unhandled/unhandled/unhandled.sh\r\n```\r\n\r\n**Error message:**\r\n```\r\nTest Infrastructure Failure: System.AggregateException: Not all processes in process tree could be terminated. (Operation not permitted)\r\n ---\u003e System.ComponentModel.Win32Exception (1): Operation not permitted\r\n   --- End of inner exception stack trace ---\r\n   at System.Diagnostics.Process.Kill(Boolean entireProcessTree)\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.CollectCrashDumpWithCreateDump(Process process, String crashDumpPath, StreamWriter outputWriter)\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.CollectCrashDump(Process process, String crashDumpPath, StreamWriter outputWriter)\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.RunTest(String executable, String outputFile, String errorFile, String category, String testBinaryBase, String outputDir)\r\n   at baseservices_exceptions._simple_ParallelCraMainThread_ParallelCraMainThread_._simple_ParallelCrashMainThread_ParallelCrashMainThread_sh()\r\nExpected: True\r\nActual:   False\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at baseservices_exceptions._simple_ParallelCraMainThread_ParallelCraMainThread_._simple_ParallelCrashMainThread_ParallelCrashMainThread_sh()\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```\r\n\u003chtml\u003e\r\n\u003cbody\u003e\r\n\u003c!--StartFragment--\u003e\u003cdiv\u003e\u003cbr/\u003e\u003cbr/\u003e\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2023-10-10T05:50:17.995Z | runtime-coreclr jitstress | Checked-jitstress2 | osx.1200.amd64.open | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"BuildNumber\":\"20231009.2\",\"DefinitionId\":\"109\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1__osx_x64_checked\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr jitstress\",\"System.StageName\":\"Build\",\"BuildId\":\"432736\",\"architecture\":\"x64\",\"configuration\":\"Checked-jitstress2\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"9585790\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"bf644a0b-2dbe-5a03-d8c6-a86fdd97c823\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-10T05:50:17.995Z | runtime-coreclr jitstress | Checked-jitstress2 | osx.1200.amd64.open | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"BuildNumber\":\"20231009.2\",\"DefinitionId\":\"109\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1__osx_x64_checked\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr jitstress\",\"System.StageName\":\"Build\",\"BuildId\":\"432736\",\"architecture\":\"x64\",\"configuration\":\"Checked-jitstress2\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"9585790\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"bf644a0b-2dbe-5a03-d8c6-a86fdd97c823\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-10T05:50:17.995Z | runtime-coreclr jitstress | Checked-jitstress2 | osx.1200.amd64.open | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"BuildNumber\":\"20231009.2\",\"DefinitionId\":\"109\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1__osx_x64_checked\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr jitstress\",\"System.StageName\":\"Build\",\"BuildId\":\"432736\",\"architecture\":\"x64\",\"configuration\":\"Checked-jitstress2\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"9585790\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"bf644a0b-2dbe-5a03-d8c6-a86fdd97c823\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-10T05:50:17.995Z | runtime-coreclr jitstress | Checked-jitstress2 | osx.1200.amd64.open | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"BuildNumber\":\"20231009.2\",\"DefinitionId\":\"109\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1__osx_x64_checked\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr jitstress\",\"System.StageName\":\"Build\",\"BuildId\":\"432736\",\"architecture\":\"x64\",\"configuration\":\"Checked-jitstress2\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"9585790\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"bf644a0b-2dbe-5a03-d8c6-a86fdd97c823\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n\u003cdetails\u003e\r\n\u003csummary\u003eMore failures\u003c/summary\u003e\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n\u003c/details\u003e\r\n\u003c!-- Error message template  --\u003e\r\n### Known Issue Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssues.md#how-to-fill-out-a-known-issue-error-section).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": [ \"Not all processes in process tree could be terminated.\", \"Operation not permitted\" ],\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** \r\n**Result validation:** :warning: Provided build not found. Provide a valid build in the \"**Build:** :mag_right:\" line.\r\n**Validation performed at:** 4/2/2024 6:55:27 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOf8kGfQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5o5x-P",
                                           "createdAt":  "2023-10-12T16:39:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n**Failed in:** [runtime-coreclr jitstress 20231009.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=432736\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=9585790\u0026resultId=118037\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\ncoreclr osx x64 Checked jitstress2 @ OSX.1200.Amd64.Open\r\n    - baseservices/exceptions/simple/ParallelCrashMainThread/ParallelCrashMainThread.sh\r\n    - baseservices/exceptions/simple/ParallelCrash/ParallelCrash.sh\r\n    - baseservices/exceptions/unhandled/unhandled/unhandled.sh\r\n```\r\n\r\n**Error message:**\r\n```\r\nTest Infrastructure Failure: System.AggregateException: Not all processes in process tree could be terminated. (Operation not permitted)\r\n ---\u003e System.ComponentModel.Win32Exception (1): Operation not permitted\r\n   --- End of inner exception stack trace ---\r\n   at System.Diagnostics.Process.Kill(Boolean entireProcessTree)\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.CollectCrashDumpWithCreateDump(Process process, String crashDumpPath, StreamWriter outputWriter)\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.CollectCrashDump(Process process, String crashDumpPath, StreamWriter outputWriter)\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.RunTest(String executable, String outputFile, String errorFile, String category, String testBinaryBase, String outputDir)\r\n   at baseservices_exceptions._simple_ParallelCraMainThread_ParallelCraMainThread_._simple_ParallelCrashMainThread_ParallelCrashMainThread_sh()\r\nExpected: True\r\nActual:   False\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at baseservices_exceptions._simple_ParallelCraMainThread_ParallelCraMainThread_._simple_ParallelCrashMainThread_ParallelCrashMainThread_sh()\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```\r\n\u003chtml\u003e\r\n\u003cbody\u003e\r\n\u003c!--StartFragment--\u003e\u003cdiv\u003e\u003cbr/\u003e\u003cbr/\u003e\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2023-10-10T05:50:17.995Z | runtime-coreclr jitstress | Checked-jitstress2 | osx.1200.amd64.open | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"BuildNumber\":\"20231009.2\",\"DefinitionId\":\"109\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1__osx_x64_checked\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr jitstress\",\"System.StageName\":\"Build\",\"BuildId\":\"432736\",\"architecture\":\"x64\",\"configuration\":\"Checked-jitstress2\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"9585790\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"bf644a0b-2dbe-5a03-d8c6-a86fdd97c823\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-10T05:50:17.995Z | runtime-coreclr jitstress | Checked-jitstress2 | osx.1200.amd64.open | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"BuildNumber\":\"20231009.2\",\"DefinitionId\":\"109\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1__osx_x64_checked\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr jitstress\",\"System.StageName\":\"Build\",\"BuildId\":\"432736\",\"architecture\":\"x64\",\"configuration\":\"Checked-jitstress2\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"9585790\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"bf644a0b-2dbe-5a03-d8c6-a86fdd97c823\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-10T05:50:17.995Z | runtime-coreclr jitstress | Checked-jitstress2 | osx.1200.amd64.open | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"BuildNumber\":\"20231009.2\",\"DefinitionId\":\"109\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1__osx_x64_checked\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr jitstress\",\"System.StageName\":\"Build\",\"BuildId\":\"432736\",\"architecture\":\"x64\",\"configuration\":\"Checked-jitstress2\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"9585790\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"bf644a0b-2dbe-5a03-d8c6-a86fdd97c823\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-10T05:50:17.995Z | runtime-coreclr jitstress | Checked-jitstress2 | osx.1200.amd64.open | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"BuildNumber\":\"20231009.2\",\"DefinitionId\":\"109\",\"Project\":\"public\",\"System.PhaseName\":\"run_test_p1__osx_x64_checked\",\"operatingSystem\":\"OSX.1200.Amd64.Open\",\"System.JobName\":\"__default\",\"DefinitionName\":\"runtime-coreclr jitstress\",\"System.StageName\":\"Build\",\"BuildId\":\"432736\",\"architecture\":\"x64\",\"configuration\":\"Checked-jitstress2\",\"System.PhaseAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"9585790\",\"System.JobAttempt\":\"1\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.JobId\":\"bf644a0b-2dbe-5a03-d8c6-a86fdd97c823\",\"System.StageAttempt\":\"1\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n\u003cdetails\u003e\r\n\u003csummary\u003eMore failures\u003c/summary\u003e\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:17.734Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.StageAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseAttempt\":\"1\",\"configuration\":\"Checked-no_tiered_compilation\",\"AzurePipelinesTestRunId\":\"9537288\",\"BuildNumber\":\"20231008.1\",\"System.JobAttempt\":\"1\",\"System.JobName\":\"__default\",\"architecture\":\"x64\",\"BuildId\":\"431261\",\"System.StageName\":\"Build\",\"DefinitionId\":\"121\",\"Project\":\"public\",\"Reason\":\"Schedule\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-08T14:21:16.532Z | runtime-coreclr runincontext | Checked | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"System.JobAttempt\":\"1\",\"Reason\":\"Schedule\",\"configuration\":\"Checked\",\"DefinitionName\":\"runtime-coreclr runincontext\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"System.StageName\":\"Build\",\"BuildId\":\"431261\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"AzurePipelinesTestRunId\":\"9537286\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"architecture\":\"x64\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231008.1\",\"DefinitionId\":\"121\",\"System.StageAttempt\":\"1\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n2023-10-07T14:20:57.576Z | runtime-coreclr runincontext | Checked-no_tiered_compilation | ubuntu.2204.amd64.open.rt | x64 | baseservices/exceptions/unhandled/unhandled/unhandled.sh | Failed | {\"AzurePipelinesTestRunId\":\"9526074\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"BuildId\":\"430819\",\"System.PhaseName\":\"run_test_p1_RunInContext_linux_x64_checked\",\"DefinitionId\":\"121\",\"System.StageName\":\"Build\",\"System.JobName\":\"__default\",\"BuildNumber\":\"20231007.1\",\"Project\":\"public\",\"architecture\":\"x64\",\"System.StageAttempt\":\"1\",\"System.JobAttempt\":\"1\",\"operatingSystem\":\"Ubuntu.2204.Amd64.Open\",\"configuration\":\"Checked-no_tiered_compilation\",\"System.JobId\":\"83aa44ae-94d8-5d3d-7684-a0cf5cb0d108\",\"System.PhaseAttempt\":\"1\",\"Reason\":\"Schedule\",\"DefinitionName\":\"runtime-coreclr runincontext\"} | Schedule\r\n\u003c/details\u003e\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ev-wenyuxu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `os-mac-os-x`, `JitStress`, `arch-x64`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-12T16:39:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51BWUL",
                                           "createdAt":  "2024-02-26T04:15:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr r2r-extra 20240224.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=578564\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=13883592\u0026resultId=116109\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nR2R-CG2 linux arm Checked jitstressregs4 @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\n```\r\n\r\n**Error message:**\r\n```\r\n Test Infrastructure Failure: System.AggregateException: Not all processes in process tree could be terminated. (Operation not permitted)\r\n ---\u003e System.ComponentModel.Win32Exception (1): Operation not permitted\r\n   --- End of inner exception stack trace ---\r\n   at System.Diagnostics.Process.Kill(Boolean entireProcessTree) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.NonUap.cs:line 31\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.CollectCrashDumpWithCreateDump(Process process, String crashDumpPath, StreamWriter outputWriter)\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.RunTest(String executable, String outputFile, String errorFile, String category, String testBinaryBase, String outputDir)\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Xunit.Assert.Fail(String message) in /_/src/Microsoft.DotNet.XUnitAssert/src/FailAsserts.cs:line 34\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor251|25_252(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass25_0\u0026)\r\n```\r\n",
                                           "updatedAt":  "2024-02-26T04:15:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53XukE",
                                           "createdAt":  "2024-03-18T01:15:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr r2r-extra 20240316.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=605944\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=14755850\u0026resultId=116109\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nR2R-CG2 linux arm Checked jitstress1 @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\nR2R-CG2 linux arm Checked gcstress0xc @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\n```\r\n\r\n**Error message:**\r\n```\r\n Test Infrastructure Failure: System.AggregateException: Not all processes in process tree could be terminated. (Operation not permitted)\r\n ---\u003e System.ComponentModel.Win32Exception (1): Operation not permitted\r\n   --- End of inner exception stack trace ---\r\n   at System.Diagnostics.Process.Kill(Boolean entireProcessTree) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.NonUap.cs:line 31\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.CollectCrashDumpWithCreateDump(Process process, String crashDumpPath, StreamWriter outputWriter)\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.RunTest(String executable, String outputFile, String errorFile, String category, String testBinaryBase, String outputDir)\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Xunit.Assert.Fail(String message) in /_/src/Microsoft.DotNet.XUnitAssert/src/FailAsserts.cs:line 34\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor251|25_252(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass25_0\u0026)\r\n```",
                                           "updatedAt":  "2024-03-18T01:15:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53ehR_",
                                           "createdAt":  "2024-03-18T17:12:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "@mangod9, what is the status of this failure? \r\n",
                                           "updatedAt":  "2024-03-18T17:12:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53ekFo",
                                           "createdAt":  "2024-03-18T17:16:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mangod9",
                                           "body":  "seems to be only affecting jitstress. Did you notice this failure on a PR run? ",
                                           "updatedAt":  "2024-03-18T17:16:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53glJR",
                                           "createdAt":  "2024-03-18T21:27:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "One of the vendors noticed it [here](https://dev.azure.com/dnceng-public/public/_build/results?buildId=605944\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=14755850\u0026resultId=116109\u0026paneView=debug), as seen in the above [comment](https://github.com/dotnet/runtime/issues/93321#issuecomment-2002708740).",
                                           "updatedAt":  "2024-03-18T21:27:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54Oghj",
                                           "createdAt":  "2024-03-25T01:49:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr r2r-extra 20240323.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=615768\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15045984\u0026resultId=116109\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nR2R-CG2 linux arm Checked jitstress2_tiered @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\nR2R-CG2 linux arm Checked gcstress0xc @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\n```\r\n\r\n**Error message:**\r\n```\r\n Test Infrastructure Failure: System.AggregateException: Not all processes in process tree could be terminated. (Operation not permitted)\r\n ---\u003e System.ComponentModel.Win32Exception (1): Operation not permitted\r\n   --- End of inner exception stack trace ---\r\n   at System.Diagnostics.Process.Kill(Boolean entireProcessTree) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.NonUap.cs:line 31\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.CollectCrashDumpWithCreateDump(Process process, String crashDumpPath, StreamWriter outputWriter)\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.RunTest(String executable, String outputFile, String errorFile, String category, String testBinaryBase, String outputDir)\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Xunit.Assert.Fail(String message) in /_/src/Microsoft.DotNet.XUnitAssert/src/FailAsserts.cs:line 34\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor251|25_252(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass25_0\u0026)\r\n```",
                                           "updatedAt":  "2024-03-25T01:49:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55Efca",
                                           "createdAt":  "2024-04-02T07:01:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This is hit intermittently on both macOS and Linux, different architectures, for different tests. I have just resolved #99885 as a duplicate.\r\n\r\nThe problem seems to be a race condition in the implementation of `System.Diagnostic.Process.Kill(entireProcessTree: true)`.\r\n\r\nThe processes in the tree can be starting and exiting while `Kill(entireProcessTree: true)` is trying to kill them all. There seems to be some specific pattern where the process is found, but it exits on its own as it is getting killed, that results into `Operation not permitted` error and exception. ",
                                           "updatedAt":  "2024-04-02T07:01:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55Msxa",
                                           "createdAt":  "2024-04-03T01:21:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr r2r 20240401.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=626600\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15370482\u0026resultId=116116\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nR2R-CG2 linux arm Checked no_tiered_compilation @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\n```\r\n\r\n**Error message:**\r\n```\r\n Test Infrastructure Failure: System.AggregateException: Not all processes in process tree could be terminated. (Operation not permitted)\r\n ---\u003e System.ComponentModel.Win32Exception (1): Operation not permitted\r\n   --- End of inner exception stack trace ---\r\n   at System.Diagnostics.Process.Kill(Boolean entireProcessTree) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.NonUap.cs:line 31\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.CollectCrashDumpWithCreateDump(Process process, String crashDumpPath, StreamWriter outputWriter)\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.RunTest(String executable, String outputFile, String errorFile, String category, String testBinaryBase, String outputDir)\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n    at Xunit.Assert.Fail(String message) in /_/src/Microsoft.DotNet.XUnitAssert/src/FailAsserts.cs:line 34\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor251|25_252(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass25_0\u0026)\r\n```\r\n",
                                           "updatedAt":  "2024-04-03T01:21:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc551JUg",
                                           "createdAt":  "2024-04-09T01:25:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr r2r-extra 20240407.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=634194\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15595922\u0026resultId=116119\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nR2R-CG2 linux arm Checked jitstressregs0x80 @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\nR2R-CG2 linux arm Checked jitstressregs8 @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\nR2R-CG2 linux arm Checked jitstressregs0x2000 @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\nR2R-CG2 linux arm Checked jitstress2 @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\nR2R-CG2 linux arm Checked forcerelocs @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\nR2R-CG2 linux arm Checked jitstressregs3 @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\nR2R-CG2 linux arm Checked jitminopts @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\nR2R-CG2 linux arm Checked jitstress2_tiered @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\nR2R-CG2 linux arm Checked gcstress0xc @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\n```\r\n\r\n**Error message:**\r\n```\r\n Test Infrastructure Failure: System.AggregateException: Not all processes in process tree could be terminated. (Operation not permitted)\r\n ---\u003e System.ComponentModel.Win32Exception (1): Operation not permitted\r\n   --- End of inner exception stack trace ---\r\n   at System.Diagnostics.Process.Kill(Boolean entireProcessTree) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.NonUap.cs:line 31\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.CollectCrashDumpWithCreateDump(Process process, String crashDumpPath, StreamWriter outputWriter)\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.RunTest(String executable, String outputFile, String errorFile, String category, String testBinaryBase, String outputDir)\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Xunit.Assert.Fail(String message) in /_/src/Microsoft.DotNet.XUnitAssert/src/FailAsserts.cs:line 34\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor253|25_254(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass25_0\u0026)\r\n```\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2024-03-31T07:33:02.486Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | ubuntu.2004.armarch.open | arm | Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd | Failed | {\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"15321360\",\"System.JobId\":\"c8f31202-1062-5d6a-be4d-45312a30ae25\",\"System.StageName\":\"Build\",\"configuration\":\"Release-no_tiered_compilation\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\",\"architecture\":\"arm\",\"BuildNumber\":\"20240330.1\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1_R2R_linux_musl_arm_release\",\"DefinitionId\":\"135\",\"BuildId\":\"625141\"} | Schedule\r\n2024-03-29T07:32:29.466Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | ubuntu.2004.armarch.open | arm | Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd | Failed | {\"Project\":\"public\",\"Reason\":\"Schedule\",\"BuildId\":\"623537\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"run_test_p1_R2R_linux_musl_arm_release\",\"architecture\":\"arm\",\"AzurePipelinesTestRunId\":\"15273954\",\"System.JobName\":\"__default\",\"DefinitionId\":\"135\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240328.1\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"c8f31202-1062-5d6a-be4d-45312a30ae25\",\"operatingSystem\":\"(Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\",\"configuration\":\"Release-no_tiered_compilation\",\"System.StageName\":\"Build\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\"} | Schedule",
                                           "updatedAt":  "2024-04-09T01:25:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56cvH2",
                                           "createdAt":  "2024-04-15T02:11:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr r2r-extra 20240413.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=642561\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15848236\u0026resultId=116122\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nR2R-CG2 linux arm Checked jitstressregs0x1000 @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\nR2R-CG2 linux arm Checked jitstressregs3 @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\nR2R-CG2 linux arm Checked jitstress1_tiered @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\nR2R-CG2 linux arm Checked jitstressregs0x10 @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\nR2R-CG2 linux arm Checked jitstressregs8 @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\nR2R-CG2 linux arm Checked gcstress0xc @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\nR2R-CG2 linux arm Checked jitstress2 @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\n```\r\n\r\n**Error message:**\r\n```\r\n Test Infrastructure Failure: System.AggregateException: Not all processes in process tree could be terminated. (Operation not permitted)\r\n ---\u003e System.ComponentModel.Win32Exception (1): Operation not permitted\r\n   --- End of inner exception stack trace ---\r\n   at System.Diagnostics.Process.Kill(Boolean entireProcessTree) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.NonUap.cs:line 31\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.CollectCrashDumpWithCreateDump(Process process, String crashDumpPath, StreamWriter outputWriter)\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.RunTest(String executable, String outputFile, String errorFile, String category, String testBinaryBase, String outputDir)\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Xunit.Assert.Fail(String message) in /_/src/Microsoft.DotNet.XUnitAssert/src/FailAsserts.cs:line 34\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor253|25_254(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass25_0\u0026)\r\n```\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2024-03-31T07:33:02.486Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | ubuntu.2004.armarch.open | arm | Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd | Failed | {\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"15321360\",\"System.JobId\":\"c8f31202-1062-5d6a-be4d-45312a30ae25\",\"System.StageName\":\"Build\",\"configuration\":\"Release-no_tiered_compilation\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\",\"architecture\":\"arm\",\"BuildNumber\":\"20240330.1\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1_R2R_linux_musl_arm_release\",\"DefinitionId\":\"135\",\"BuildId\":\"625141\"} | Schedule\r\n2024-03-29T07:32:29.466Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | ubuntu.2004.armarch.open | arm | Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd | Failed | {\"Project\":\"public\",\"Reason\":\"Schedule\",\"BuildId\":\"623537\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"run_test_p1_R2R_linux_musl_arm_release\",\"architecture\":\"arm\",\"AzurePipelinesTestRunId\":\"15273954\",\"System.JobName\":\"__default\",\"DefinitionId\":\"135\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240328.1\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"c8f31202-1062-5d6a-be4d-45312a30ae25\",\"operatingSystem\":\"(Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\",\"configuration\":\"Release-no_tiered_compilation\",\"System.StageName\":\"Build\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\"} | Schedule",
                                           "updatedAt":  "2024-04-15T02:11:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56n5pW",
                                           "createdAt":  "2024-04-15T16:30:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "cc @dotnet/area-system-diagnostics-process",
                                           "updatedAt":  "2024-04-15T16:30:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56y6bo",
                                           "createdAt":  "2024-04-17T01:18:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr r2r 20240415.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=644911\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15912652\u0026resultId=116122\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nR2R-CG2 linux arm Checked no_tiered_compilation @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\n```\r\n\r\n**Error message:**\r\n```\r\n Test Infrastructure Failure: System.AggregateException: Not all processes in process tree could be terminated. (Operation not permitted)\r\n ---\u003e System.ComponentModel.Win32Exception (1): Operation not permitted\r\n   --- End of inner exception stack trace ---\r\n   at System.Diagnostics.Process.Kill(Boolean entireProcessTree) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.NonUap.cs:line 31\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.CollectCrashDumpWithCreateDump(Process process, String crashDumpPath, StreamWriter outputWriter)\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.RunTest(String executable, String outputFile, String errorFile, String category, String testBinaryBase, String outputDir)\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Xunit.Assert.Fail(String message) in /_/src/Microsoft.DotNet.XUnitAssert/src/FailAsserts.cs:line 34\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor253|25_254(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass25_0\u0026)\r\n```\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2024-03-31T07:33:02.486Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | ubuntu.2004.armarch.open | arm | Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd | Failed | {\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"15321360\",\"System.JobId\":\"c8f31202-1062-5d6a-be4d-45312a30ae25\",\"System.StageName\":\"Build\",\"configuration\":\"Release-no_tiered_compilation\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\",\"architecture\":\"arm\",\"BuildNumber\":\"20240330.1\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1_R2R_linux_musl_arm_release\",\"DefinitionId\":\"135\",\"BuildId\":\"625141\"} | Schedule\r\n2024-03-29T07:32:29.466Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | ubuntu.2004.armarch.open | arm | Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd | Failed | {\"Project\":\"public\",\"Reason\":\"Schedule\",\"BuildId\":\"623537\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"run_test_p1_R2R_linux_musl_arm_release\",\"architecture\":\"arm\",\"AzurePipelinesTestRunId\":\"15273954\",\"System.JobName\":\"__default\",\"DefinitionId\":\"135\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240328.1\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"c8f31202-1062-5d6a-be4d-45312a30ae25\",\"operatingSystem\":\"(Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\",\"configuration\":\"Release-no_tiered_compilation\",\"System.StageName\":\"Build\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\"} | Schedule\r\n",
                                           "updatedAt":  "2024-04-17T01:18:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc569DUk",
                                           "createdAt":  "2024-04-18T01:21:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr r2r 20240416.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=646300\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15956032\u0026resultId=116123\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nR2R-CG2 linux arm Checked no_tiered_compilation @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\n```\r\n\r\n**Error message:**\r\n```\r\n Test Infrastructure Failure: System.AggregateException: Not all processes in process tree could be terminated. (Operation not permitted)\r\n ---\u003e System.ComponentModel.Win32Exception (1): Operation not permitted\r\n   --- End of inner exception stack trace ---\r\n   at System.Diagnostics.Process.Kill(Boolean entireProcessTree) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.NonUap.cs:line 31\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.CollectCrashDumpWithCreateDump(Process process, String crashDumpPath, StreamWriter outputWriter)\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.RunTest(String executable, String outputFile, String errorFile, String category, String testBinaryBase, String outputDir)\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Xunit.Assert.Fail(String message) in /_/src/Microsoft.DotNet.XUnitAssert/src/FailAsserts.cs:line 34\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor253|25_254(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass25_0\u0026)\r\n```\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2024-03-31T07:33:02.486Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | ubuntu.2004.armarch.open | arm | Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd | Failed | {\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"15321360\",\"System.JobId\":\"c8f31202-1062-5d6a-be4d-45312a30ae25\",\"System.StageName\":\"Build\",\"configuration\":\"Release-no_tiered_compilation\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\",\"architecture\":\"arm\",\"BuildNumber\":\"20240330.1\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1_R2R_linux_musl_arm_release\",\"DefinitionId\":\"135\",\"BuildId\":\"625141\"} | Schedule\r\n2024-03-29T07:32:29.466Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | ubuntu.2004.armarch.open | arm | Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd | Failed | {\"Project\":\"public\",\"Reason\":\"Schedule\",\"BuildId\":\"623537\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"run_test_p1_R2R_linux_musl_arm_release\",\"architecture\":\"arm\",\"AzurePipelinesTestRunId\":\"15273954\",\"System.JobName\":\"__default\",\"DefinitionId\":\"135\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240328.1\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"c8f31202-1062-5d6a-be4d-45312a30ae25\",\"operatingSystem\":\"(Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\",\"configuration\":\"Release-no_tiered_compilation\",\"System.StageName\":\"Build\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\"} | Schedule\r\n\r\n\r\n",
                                           "updatedAt":  "2024-04-18T01:21:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57HmTn",
                                           "createdAt":  "2024-04-19T01:35:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr r2r 20240417.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=647647\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=16000256\u0026resultId=116124\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nR2R-CG2 linux arm Checked no_tiered_compilation @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\n```\r\n\r\n**Error message:**\r\n```\r\n Test Infrastructure Failure: System.AggregateException: Not all processes in process tree could be terminated. (Operation not permitted)\r\n ---\u003e System.ComponentModel.Win32Exception (1): Operation not permitted\r\n   --- End of inner exception stack trace ---\r\n   at System.Diagnostics.Process.Kill(Boolean entireProcessTree) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.NonUap.cs:line 31\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.CollectCrashDumpWithCreateDump(Process process, String crashDumpPath, StreamWriter outputWriter)\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.RunTest(String executable, String outputFile, String errorFile, String category, String testBinaryBase, String outputDir)\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Xunit.Assert.Fail(String message) in /_/src/Microsoft.DotNet.XUnitAssert/src/FailAsserts.cs:line 34\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor253|25_254(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass25_0\u0026)\r\n```\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2024-03-31T07:33:02.486Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | ubuntu.2004.armarch.open | arm | Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd | Failed | {\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"15321360\",\"System.JobId\":\"c8f31202-1062-5d6a-be4d-45312a30ae25\",\"System.StageName\":\"Build\",\"configuration\":\"Release-no_tiered_compilation\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\",\"architecture\":\"arm\",\"BuildNumber\":\"20240330.1\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1_R2R_linux_musl_arm_release\",\"DefinitionId\":\"135\",\"BuildId\":\"625141\"} | Schedule\r\n2024-03-29T07:32:29.466Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | ubuntu.2004.armarch.open | arm | Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd | Failed | {\"Project\":\"public\",\"Reason\":\"Schedule\",\"BuildId\":\"623537\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"run_test_p1_R2R_linux_musl_arm_release\",\"architecture\":\"arm\",\"AzurePipelinesTestRunId\":\"15273954\",\"System.JobName\":\"__default\",\"DefinitionId\":\"135\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240328.1\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"c8f31202-1062-5d6a-be4d-45312a30ae25\",\"operatingSystem\":\"(Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\",\"configuration\":\"Release-no_tiered_compilation\",\"System.StageName\":\"Build\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\"} | Schedule\r\n",
                                           "updatedAt":  "2024-04-19T01:35:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57SK8o",
                                           "createdAt":  "2024-04-22T02:10:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr r2r 20240419.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=650400\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=16078356\u0026resultId=116126\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nR2R-CG2 linux arm Checked @ (Ubuntu.1804.Arm32.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-helix-arm32v7\r\n    - Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd\r\n```\r\n\r\n**Error message:**\r\n```\r\n Test Infrastructure Failure: System.AggregateException: Not all processes in process tree could be terminated. (Operation not permitted)\r\n ---\u003e System.ComponentModel.Win32Exception (1): Operation not permitted\r\n   --- End of inner exception stack trace ---\r\n   at System.Diagnostics.Process.Kill(Boolean entireProcessTree) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.NonUap.cs:line 31\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.CollectCrashDumpWithCreateDump(Process process, String crashDumpPath, StreamWriter outputWriter)\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.CollectCrashDump(Process process, String crashDumpPath, StreamWriter outputWriter)\r\n   at CoreclrTestLib.CoreclrTestWrapperLib.RunTest(String executable, String outputFile, String errorFile, String category, String testBinaryBase, String outputDir)\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Xunit.Assert.Fail(String message) in /_/src/Microsoft.DotNet.XUnitAssert/src/FailAsserts.cs:line 34\r\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath)\r\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor253|25_254(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass25_0\u0026)\r\n```\r\n\r\nQueued | Pipeline | Pipeline_Configuration | OS | Arch | Test | Outcome | Properties | BuildReason\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\n2024-03-31T07:33:02.486Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | ubuntu.2004.armarch.open | arm | Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd | Failed | {\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.StageAttempt\":\"1\",\"AzurePipelinesTestRunId\":\"15321360\",\"System.JobId\":\"c8f31202-1062-5d6a-be4d-45312a30ae25\",\"System.StageName\":\"Build\",\"configuration\":\"Release-no_tiered_compilation\",\"System.PhaseAttempt\":\"1\",\"operatingSystem\":\"(Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\",\"architecture\":\"arm\",\"BuildNumber\":\"20240330.1\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\",\"Project\":\"public\",\"System.JobName\":\"__default\",\"Reason\":\"Schedule\",\"System.JobAttempt\":\"1\",\"System.PhaseName\":\"run_test_p1_R2R_linux_musl_arm_release\",\"DefinitionId\":\"135\",\"BuildId\":\"625141\"} | Schedule\r\n2024-03-29T07:32:29.466Z | coreclr-release-outerloop-nightly | Release-no_tiered_compilation | ubuntu.2004.armarch.open | arm | Interop/NativeLibrary/Callback/CallbackStressTest_TargetUnix/CallbackStressTest_TargetUnix.cmd | Failed | {\"Project\":\"public\",\"Reason\":\"Schedule\",\"BuildId\":\"623537\",\"CollectionUri\":\"https://dev.azure.com/dnceng-public/\",\"System.PhaseName\":\"run_test_p1_R2R_linux_musl_arm_release\",\"architecture\":\"arm\",\"AzurePipelinesTestRunId\":\"15273954\",\"System.JobName\":\"__default\",\"DefinitionId\":\"135\",\"System.PhaseAttempt\":\"1\",\"System.StageAttempt\":\"1\",\"BuildNumber\":\"20240328.1\",\"System.JobAttempt\":\"1\",\"System.JobId\":\"c8f31202-1062-5d6a-be4d-45312a30ae25\",\"operatingSystem\":\"(Alpine.316.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.17-helix-arm32v7\",\"configuration\":\"Release-no_tiered_compilation\",\"System.StageName\":\"Build\",\"DefinitionName\":\"coreclr-release-outerloop-nightly\"} | Schedule\r\n",
                                           "updatedAt":  "2024-04-22T02:10:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57Z2nd",
                                           "createdAt":  "2024-04-22T17:37:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikelle-rogers",
                                           "body":  "@jeffhandley, what is the status of this test failure? ",
                                           "updatedAt":  "2024-04-22T17:37:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58K0Jc",
                                           "createdAt":  "2024-04-29T16:50:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "@jkotas would it be OK to ignore \"operation not permitted\" errors on `Kill(entireProcessTree: true)`?",
                                           "updatedAt":  "2024-04-29T16:50:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58K2aY",
                                           "createdAt":  "2024-04-29T16:56:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "@mikelle-rogers we currently don\u0027t have a fix nor a consistent repro, we could spend more time looking into it but not sure if we could get a repro at all.",
                                           "updatedAt":  "2024-04-29T16:56:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc588kDU",
                                           "createdAt":  "2024-05-06T15:03:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e would it be OK to ignore \"operation not permitted\" errors on Kill(entireProcessTree: true)?\r\n\r\nI do not know. We need to understand what leads to the \"operation not permitted\" errors.",
                                           "updatedAt":  "2024-05-06T15:03:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_yQZ9",
                                           "createdAt":  "2024-06-02T14:35:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Delete workaround added in https://github.com/dotnet/runtime/pull/102958 once this gets fixed.",
                                           "updatedAt":  "2024-06-02T14:35:35Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "Test failure: AggregateException: Not all processes in process tree could be terminated.",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94127",
        "createdAt":  "2023-10-28T00:28:34Z",
        "number":  94127,
        "author":  "sebastienros",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODKBXRQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NN---",
                                            "createdAt":  "2023-10-29T05:04:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2023-10-30T01:09:45Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "kevingosse",
                                            "createdAt":  "2023-10-30T16:19:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EgorBo",
                                            "createdAt":  "2023-11-06T19:08:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexrp",
                                            "createdAt":  "2024-01-09T21:28:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AustinWise",
                                            "createdAt":  "2024-01-27T18:30:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nick-beer",
                                            "createdAt":  "2024-03-22T20:17:51Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "satyapramodh",
                                            "createdAt":  "2024-03-31T05:37:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rofenix",
                                            "createdAt":  "2024-05-28T03:20:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Lightczx",
                                            "createdAt":  "2025-08-06T01:11:57Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2024-07-18T14:58:20Z",
        "body":  "### Background and motivation\n\nCurrently I use `ProcessStartInfo/Process.Start` to launch processes with overridden environment variables, redirect standard input and output, and so forth.\r\n\r\nI now need to use the `CREATE_SUSPENDED` flag so that I can modify the process after it\u0027s created and before it starts actual execution, but there\u0027s no way to pass this flag into `ProcessStartInfo/Process.Start`. Given that I still need to use all the other features of `ProcessStartInfo`, the only reasonable path I can see forward is to either copy or reimplement the entirety of the `System.Diagnostics.Process` code.\r\n\r\nMy proposal would also be cross-platform.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Diagnostics;\r\n\r\npublic sealed partial class ProcessStartInfo\r\n{\r\n    public bool CreateSuspended { get; set; }\r\n}\r\n\r\npublic partial class Process\r\n{\r\n    public bool Resume();\r\n}\r\n```\n\n### API Usage\n\n```csharp\r\nvar process = new Process()\r\n{\r\n    StartInfo = {\r\n        FileName = executable,\r\n        CreateSuspended = true,\r\n        CreateNoWindow = true, // for reference only, as it has the same characteristics\r\n    }\r\n};\r\n\r\nprocess.Start();\r\n\r\n// Do whatever is needed with the process...\r\n\r\nprocess.Resume();\r\n```\r\n\n\n### Alternative Designs\n\nI don\u0027t think these issues are duplicates since they adopt a different design that doesn\u0027t seem to get traction.\r\n\r\nhttps://github.com/dotnet/runtime/issues/71515\r\nhttps://github.com/dotnet/runtime/issues/90581\r\n\r\nNB: @hach-que I copied your proposal and tried to make the API easier to get through the review process.\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeOgybg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5qUB_Z",
                                           "createdAt":  "2023-10-28T00:28:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nCurrently I use `ProcessStartInfo/Process.Start` to launch processes with overridden environment variables, redirect standard input and output, and so forth.\r\n\r\nI now need to use the `CREATE_SUSPENDED` flag so that I can modify the process after it\u0027s created and before it starts actual execution, but there\u0027s no way to pass this flag into `ProcessStartInfo/Process.Start`. Given that I still need to use all the other features of `ProcessStartInfo`, the only reasonable path I can see forward is to either copy or reimplement the entirety of the `System.Diagnostics.Process` code.\r\n\r\nMy proposal would also be cross-platform.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Diagnostics;\r\n\r\npublic sealed partial class ProcessStartInfo\r\n{\r\n    public bool CreateSuspended { get; set; }\r\n}\r\n\r\npublic partial class Process\r\n{\r\n    public bool Resume();\r\n}\r\n```\n\n### API Usage\n\n```csharp\r\nvar process = new Process()\r\n{\r\n    StartInfo = {\r\n        FileName = executable,\r\n        CreateSuspended = true,\r\n        CreateNoWindow = true, // for reference only, as it has the same characteristics\r\n    }\r\n};\r\n\r\nprocess.Start();\r\n\r\n// Do whatever is needed with the process...\r\n\r\nprocess.Resume();\r\n```\r\n\n\n### Alternative Designs\n\nI don\u0027t think these issues are duplicates since they adopt a different design that doesn\u0027t seem to get traction.\r\n\r\nhttps://github.com/dotnet/runtime/issues/71515\r\nhttps://github.com/dotnet/runtime/issues/90581\r\n\r\nNB: @hach-que I copied your proposal and tried to make the API easier to get through the review process.\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esebastienros\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-28T00:28:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qUIPl",
                                           "createdAt":  "2023-10-28T01:55:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLW5vQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sebastienros",
                                                                               "createdAt":  "2023-10-30T15:59:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alexrp",
                                           "body":  "To be clear, it\u0027s not that #71515 didn\u0027t have traction. The discussion landed on exposing \"proper\" properties for the various flags and options related to process creation (as you\u0027ve done for `bool CreateSuspended` here), *but* the proposal should include all/most of the Windows process creation options so that API review can have a more complete picture of how the API might look later down the line, even if only parts of it are implemented initially. I just haven\u0027t had time to do that yet...",
                                           "updatedAt":  "2023-10-28T01:55:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qUnfe",
                                           "createdAt":  "2023-10-28T11:56:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLO5NQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2023-10-28T19:01:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-10-28T22:08:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "As an end user, I would be happy to have it and use it in BenchmarkDotNet for some of the profiler plugins (cc @lihaMSFT)\r\n\r\nAs a maintainer I need to know whether it would be possible to implement it on Unix? (cc @tmds)",
                                           "updatedAt":  "2023-10-28T11:56:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc546DJu",
                                           "createdAt":  "2024-03-30T22:23:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODceMWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2024-03-30T23:15:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "satyapramodh",
                                                                               "createdAt":  "2024-03-31T05:36:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jborean93",
                                           "body":  "Just to add my 2 cents, this should be the last remaining feature that is needed by PowerShell to move away from custom PInvoke code to using `System.Diagnostics.Process` for all scenarios. Currently they rely on being able to create a suspended process so that they can configure a Job object of that new process before they resume it. Being able to use S.D.Process directly would be great as it solves other problems like not being able to create the `Process` object with an all access token from the one PowerShell spawned through `CreateProcess*`.",
                                           "updatedAt":  "2024-03-30T22:23:39Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: ProcessStartInfo.CreateSuspended, Process.Resume",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94903",
        "createdAt":  "2023-11-17T09:53:56Z",
        "number":  94903,
        "author":  "rolfbjarne",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODA1r1Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "luiskavaup",
                                            "createdAt":  "2025-04-04T01:19:04Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-10-07T13:28:25Z",
        "body":  "_From @last-Programmer on Thu, 16 Nov 2023 23:40:15 GMT_\n\n\u003c!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 --\u003e\r\n\r\n\u003c!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significantly more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-\u0026-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n--\u003e\r\n### Steps to Reproduce\r\n\r\n1.  Create a native .net8.0 ios project and install Oracle.ManagedDataAccess.Core  version 2.19.60 and try to create an instance of OracleConnectionStringBuilder or OracleConnection and run the project\r\n2. Creeate Xamarin.IOS project and repeat the previous steps\r\n\r\n### Expected Behavior\r\nOracleConnectionSrtingBuilder and OrcaleConnection should be instantiated without error in xamarin ios project and .net8 ios project.\r\n\r\n### Actual Behavior\r\nIn .net8 ios project i get the error Platform not supported\r\nIn Xmarin Ios project there is no error\r\n\r\n### Environment\r\n\r\n\u003c!--\r\n1. How to get version information: https://github.com/xamarin/xamarin-macios/wiki/Diagnosis#version-information\r\n2. Paste into the code block below (between ```)\r\n--\u003e\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eVersion information\u003c/summary\u003e\r\n\r\n```\r\nVisual Studio Enterprise 2022 for Mac\r\nVersion 17.6.7 (build 417)\r\nInstallation UUID: b7c0b5ca-2bfe-4415-a452-68f6af6b9f1a\r\n\r\nRuntime\r\n.NET 7.0.3 (64-bit)\r\nArchitecture: X64\r\nMicrosoft.macOS.Sdk 13.1.1007; git-rev-head:8afca776a0a96613dfb7200e0917bb57f9ed5583; git-branch:release/7.0.1xx-xcode14.2\r\n\r\nRoslyn (Language Service)\r\n4.6.0-3.23180.6+99e956e42697a6dd886d1e12478ea2b27cceacfa\r\n\r\nNuGet\r\nVersion: 6.4.0.117\r\n\r\n.NET SDK (x64)\r\nSDK: /usr/local/share/dotnet/sdk/8.0.100/Sdks\r\nSDK Versions:\r\n\t8.0.100\r\n\t7.0.311\r\n\t7.0.310\r\n\t7.0.308\r\n\t7.0.304\r\n\t6.0.417\r\n\t6.0.416\r\n\t6.0.414\r\n\t6.0.410\r\nMSBuild SDKs: /Applications/Visual Studio.app/Contents/MonoBundle/MSBuild/Current/bin/Sdks\r\n\r\n.NET Runtime (x64)\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t8.0.0\r\n\t7.0.14\r\n\t7.0.13\r\n\t7.0.11\r\n\t7.0.7\r\n\t6.0.25\r\n\t6.0.24\r\n\t6.0.22\r\n\t6.0.18\r\n\r\nXamarin.Profiler\r\nVersion: 1.8.0.49\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\nUpdater\r\nVersion: 11\r\n\r\nApple Developer Tools\r\nXcode: 15.0.1 22266\r\nBuild: 15A507\r\n\r\nXamarin.Mac\r\nVersion: 9.3.0.23 Visual Studio Enterprise\r\nHash: 9defd91b3\r\nBranch: xcode14.3\r\nBuild date: 2023-10-23 16:14:59-0400\r\n\r\nXamarin.iOS\r\nVersion: 16.4.0.23 Visual Studio Enterprise\r\nHash: 9defd91b3\r\nBranch: xcode14.3\r\nBuild date: 2023-10-23 16:15:00-0400\r\n\r\nXamarin Designer\r\nVersion: 17.6.3.9\r\nHash: 2648399ae8\r\nBranch: remotes/origin/d17-6\r\nBuild date: 2023-11-10 12:19:21 UTC\r\n\r\nXamarin.Android\r\nVersion: 13.2.2.0 (Visual Studio Enterprise)\r\nCommit: xamarin-android/d17-5/45b0e14\r\nAndroid SDK: /Users/balu/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t13.0 (API level 33)\r\n\r\nSDK Command-line Tools Version: 7.0\r\nSDK Platform Tools Version: 34.0.3\r\nSDK Build Tools Version: 32.0.0\r\n\r\nBuild Information: \r\nMono: d9a6e87\r\nJava.Interop: xamarin/java.interop/d17-5@149d70fe\r\nSQLite: xamarin/sqlite/3.40.1@68c69d8\r\nXamarin.Android Tools: xamarin/xamarin-android-tools/d17-5@ca1552d\r\n\r\nMicrosoft Build of OpenJDK\r\nJava SDK: /Library/Java/JavaVirtualMachines/microsoft-11.jdk\r\n11.0.16.1\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\nEclipse Temurin JDK\r\nJava SDK: /Library/Java/JavaVirtualMachines/temurin-8.jdk\r\n1.8.0.302\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\nAndroid SDK Manager\r\nVersion: 17.6.0.50\r\nHash: a715dca\r\nBranch: HEAD\r\nBuild date: 2023-11-10 12:19:27 UTC\r\n\r\nAndroid Device Manager\r\nVersion: 0.0.0.1309\r\nHash: 06e3e77\r\nBranch: HEAD\r\nBuild date: 2023-11-10 12:19:27 UTC\r\n\r\nBuild Information\r\nRelease ID: 1706070417\r\nGit revision: 179aa48a5702754e41a8218d0403ddc3be46706f\r\nBuild date: 2023-11-10 12:17:47+00\r\nBuild branch: release-17.6\r\nBuild lane: release-17.6\r\n\r\nOperating System\r\nMac OS X 14.1.1\r\nDarwin 23.1.0 Darwin Kernel Version 23.1.0\r\n    Mon Oct  9 21:27:27 PDT 2023\r\n    root:xnu-10002.41.9~6/RELEASE_X86_64 x86_64\r\n\r\n```\r\n\r\n\u003c/details\u003e\r\n\r\n### Build Logs\r\n\r\n\u003c!--\r\n1. How to get a build log: https://github.com/xamarin/xamarin-macios/wiki/Diagnosis#build-logs\r\n2. Place the cursor below this comment block.\r\n4. Drag and drop the build log.\r\n--\u003e\r\n\r\n### Example Project (If Possible)\r\n\r\n\u003c!--\r\n1. Place cursor below this comment block.\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n--\u003e\r\n[XamarinOracle.zip](https://github.com/xamarin/xamarin-macios/files/13385217/XamarinOracle.zip)\r\n\r\n\u003c!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n--\u003e\r\n\n\n_Copied from original issue xamarin/xamarin-macios#19471_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjt5erA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5sPuWN",
                                           "createdAt":  "2023-11-17T09:53:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "_From @rolfbjarne on Fri, 17 Nov 2023 09:53:44 GMT_\n\nI can reproduce with:\r\n\r\n\u003e Console.WriteLine (System.Diagnostics.Process.GetCurrentProcess ().ProcessName);\r\n\r\nresulting in:\r\n\r\n```\r\nSystem.PlatformNotSupportedException Operation is not supported on this platform. (System.PlatformNotSupportedException)\r\n   at System.Diagnostics.ProcessManager.GetProcessInfo(Int32 processId, String machineName)\r\n   at System.Diagnostics.Process.EnsureState(State state)\r\n   at System.Diagnostics.Process.get_ProcessName()\r\n   at ios_plain.AppDelegate.FinishedLaunching(UIApplication application, NSDictionary launchOptions) in /Users/rolf/test/dotnet/ios-plain/AppDelegate.cs:line 28\r\n```\r\n\r\nNote that `Process.ProcessName` isn\u0027t marked as unsupported on any platform: https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.processname?view=net-7.0",
                                           "updatedAt":  "2023-11-17T09:53:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sRxu5",
                                           "createdAt":  "2023-11-17T15:09:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_From @last-Programmer on Thu, 16 Nov 2023 23:40:15 GMT_\n\n\u003c!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 --\u003e\r\n\r\n\u003c!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significantly more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-\u0026-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n--\u003e\r\n### Steps to Reproduce\r\n\r\n1.  Create a native .net8.0 ios project and install Oracle.ManagedDataAccess.Core  version 2.19.60 and try to create an instance of OracleConnectionStringBuilder or OracleConnection and run the project\r\n2. Creeate Xamarin.IOS project and repeat the previous steps\r\n\r\n### Expected Behavior\r\nOracleConnectionSrtingBuilder and OrcaleConnection should be instantiated without error in xamarin ios project and .net8 ios project.\r\n\r\n### Actual Behavior\r\nIn .net8 ios project i get the error Platform not supported\r\nIn Xmarin Ios project there is no error\r\n\r\n### Environment\r\n\r\n\u003c!--\r\n1. How to get version information: https://github.com/xamarin/xamarin-macios/wiki/Diagnosis#version-information\r\n2. Paste into the code block below (between ```)\r\n--\u003e\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eVersion information\u003c/summary\u003e\r\n\r\n```\r\nVisual Studio Enterprise 2022 for Mac\r\nVersion 17.6.7 (build 417)\r\nInstallation UUID: b7c0b5ca-2bfe-4415-a452-68f6af6b9f1a\r\n\r\nRuntime\r\n.NET 7.0.3 (64-bit)\r\nArchitecture: X64\r\nMicrosoft.macOS.Sdk 13.1.1007; git-rev-head:8afca776a0a96613dfb7200e0917bb57f9ed5583; git-branch:release/7.0.1xx-xcode14.2\r\n\r\nRoslyn (Language Service)\r\n4.6.0-3.23180.6+99e956e42697a6dd886d1e12478ea2b27cceacfa\r\n\r\nNuGet\r\nVersion: 6.4.0.117\r\n\r\n.NET SDK (x64)\r\nSDK: /usr/local/share/dotnet/sdk/8.0.100/Sdks\r\nSDK Versions:\r\n\t8.0.100\r\n\t7.0.311\r\n\t7.0.310\r\n\t7.0.308\r\n\t7.0.304\r\n\t6.0.417\r\n\t6.0.416\r\n\t6.0.414\r\n\t6.0.410\r\nMSBuild SDKs: /Applications/Visual Studio.app/Contents/MonoBundle/MSBuild/Current/bin/Sdks\r\n\r\n.NET Runtime (x64)\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t8.0.0\r\n\t7.0.14\r\n\t7.0.13\r\n\t7.0.11\r\n\t7.0.7\r\n\t6.0.25\r\n\t6.0.24\r\n\t6.0.22\r\n\t6.0.18\r\n\r\nXamarin.Profiler\r\nVersion: 1.8.0.49\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\nUpdater\r\nVersion: 11\r\n\r\nApple Developer Tools\r\nXcode: 15.0.1 22266\r\nBuild: 15A507\r\n\r\nXamarin.Mac\r\nVersion: 9.3.0.23 Visual Studio Enterprise\r\nHash: 9defd91b3\r\nBranch: xcode14.3\r\nBuild date: 2023-10-23 16:14:59-0400\r\n\r\nXamarin.iOS\r\nVersion: 16.4.0.23 Visual Studio Enterprise\r\nHash: 9defd91b3\r\nBranch: xcode14.3\r\nBuild date: 2023-10-23 16:15:00-0400\r\n\r\nXamarin Designer\r\nVersion: 17.6.3.9\r\nHash: 2648399ae8\r\nBranch: remotes/origin/d17-6\r\nBuild date: 2023-11-10 12:19:21 UTC\r\n\r\nXamarin.Android\r\nVersion: 13.2.2.0 (Visual Studio Enterprise)\r\nCommit: xamarin-android/d17-5/45b0e14\r\nAndroid SDK: /Users/balu/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t13.0 (API level 33)\r\n\r\nSDK Command-line Tools Version: 7.0\r\nSDK Platform Tools Version: 34.0.3\r\nSDK Build Tools Version: 32.0.0\r\n\r\nBuild Information: \r\nMono: d9a6e87\r\nJava.Interop: xamarin/java.interop/d17-5@149d70fe\r\nSQLite: xamarin/sqlite/3.40.1@68c69d8\r\nXamarin.Android Tools: xamarin/xamarin-android-tools/d17-5@ca1552d\r\n\r\nMicrosoft Build of OpenJDK\r\nJava SDK: /Library/Java/JavaVirtualMachines/microsoft-11.jdk\r\n11.0.16.1\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\nEclipse Temurin JDK\r\nJava SDK: /Library/Java/JavaVirtualMachines/temurin-8.jdk\r\n1.8.0.302\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\nAndroid SDK Manager\r\nVersion: 17.6.0.50\r\nHash: a715dca\r\nBranch: HEAD\r\nBuild date: 2023-11-10 12:19:27 UTC\r\n\r\nAndroid Device Manager\r\nVersion: 0.0.0.1309\r\nHash: 06e3e77\r\nBranch: HEAD\r\nBuild date: 2023-11-10 12:19:27 UTC\r\n\r\nBuild Information\r\nRelease ID: 1706070417\r\nGit revision: 179aa48a5702754e41a8218d0403ddc3be46706f\r\nBuild date: 2023-11-10 12:17:47+00\r\nBuild branch: release-17.6\r\nBuild lane: release-17.6\r\n\r\nOperating System\r\nMac OS X 14.1.1\r\nDarwin 23.1.0 Darwin Kernel Version 23.1.0\r\n    Mon Oct  9 21:27:27 PDT 2023\r\n    root:xnu-10002.41.9~6/RELEASE_X86_64 x86_64\r\n\r\n```\r\n\r\n\u003c/details\u003e\r\n\r\n### Build Logs\r\n\r\n\u003c!--\r\n1. How to get a build log: https://github.com/xamarin/xamarin-macios/wiki/Diagnosis#build-logs\r\n2. Place the cursor below this comment block.\r\n4. Drag and drop the build log.\r\n--\u003e\r\n\r\n### Example Project (If Possible)\r\n\r\n\u003c!--\r\n1. Place cursor below this comment block.\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n--\u003e\r\n[XamarinOracle.zip](https://github.com/xamarin/xamarin-macios/files/13385217/XamarinOracle.zip)\r\n\r\n\u003c!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n--\u003e\r\n\n\n_Copied from original issue xamarin/xamarin-macios#19471_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erolfbjarne\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `untriaged`, `os-ios`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-17T15:09:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6M-QjI",
                                           "createdAt":  "2024-09-21T10:07:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "last-Programmer",
                                           "body":  "Any update on this?",
                                           "updatedAt":  "2024-09-21T10:07:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6O3l6s",
                                           "createdAt":  "2024-10-07T13:28:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MartinRobins",
                                           "body":  "Is `System.Diagnostics.Process.GetCurrentProcess().ProcessName` required when you can achieve the same result using `Assembly.GetEntryAssembly().FullName`?",
                                           "updatedAt":  "2024-10-07T13:28:23Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "System.Diagnostics.Process.CreateProcessInfo Platform not supported error in net8.0-ios",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95831",
        "createdAt":  "2023-12-09T21:17:10Z",
        "number":  95831,
        "author":  "lostmsu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-12-12T09:55:32Z",
        "body":  "### Description\n\nUnable to read `ExitCode` after calling `WaitForExit`.\n\n### Reproduction Steps\n\n```csharp\r\nvar process = Process.GetProcessById(any_PID);\r\nprocess.WaitForExit();\r\nConsole.WriteLine(process.ExitCode);\r\n```\n\n### Expected behavior\n\nExit code should be printed\n\n### Actual behavior\n\nAccessing `ExitCode` throws\r\n\r\n\u003e System.InvalidOperationException: Process was not started by this object, so requested information cannot be determined.\r\n\u003e    at System.Diagnostics.Process.EnsureState(State state)\r\n\u003e    at System.Diagnostics.Process.get_ExitCode()\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nObtain two different instances or get and hold on to `SafeHandle` from before wait call until after `ExitCode` access.\r\n\r\nSee also on [StackOverflow](https://stackoverflow.com/questions/47649119/what-means-an-invalidoperationexception-on-process-exittime-process-was-not-sta)\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObl61Yw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5uMLW6",
                                           "createdAt":  "2023-12-09T21:17:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nUnable to read `ExitCode` after calling `WaitForExit`.\n\n### Reproduction Steps\n\n```csharp\r\nvar process = Process.GetProcessById(any_PID);\r\nprocess.WaitForExit();\r\nConsole.WriteLine(process.ExitCode);\r\n```\n\n### Expected behavior\n\nExit code should be printed\n\n### Actual behavior\n\nAccessing `ExitCode` throws\r\n\r\n\u003e System.InvalidOperationException: Process was not started by this object, so requested information cannot be determined.\r\n\u003e    at System.Diagnostics.Process.EnsureState(State state)\r\n\u003e    at System.Diagnostics.Process.get_ExitCode()\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nObtain two different instances or get and hold on to `SafeHandle` from before wait call until after `ExitCode` access.\r\n\r\nSee also on [StackOverflow](https://stackoverflow.com/questions/47649119/what-means-an-invalidoperationexception-on-process-exittime-process-was-not-sta)\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elostmsu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-09T21:17:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uMVan",
                                           "createdAt":  "2023-12-09T22:05:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODPMNuQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-12-11T17:12:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alexrp",
                                           "body":  "This is basically by design and is very unlikely to change at this point, since it would completely change the implications of obtaining a `Process` object for an existing process (it would now open a handle immediately, with all that doing so implies for resource management).\r\n\r\nEven if this was changed, what you\u0027re trying to do is fundamentally racy anyway. `GetProcessById()` could fail because the process is already gone, in which case you wouldn\u0027t get the exit code either. Anything you do here can only be \u0027best effort\u0027.",
                                           "updatedAt":  "2023-12-09T22:07:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uMgo7",
                                           "createdAt":  "2023-12-09T22:57:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lostmsu",
                                           "body":  "I mean basically it is broken from the expectations standpoint of view (not the `GetProcessById` - that one is expected to be racy). If change of the existing APIs is impossible for compatibility reasons, they should be deprecated with a warning and a more reliable API should be designed.",
                                           "updatedAt":  "2023-12-09T22:58:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uM1v9",
                                           "createdAt":  "2023-12-10T05:03:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODPMNwQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2023-12-10T16:41:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-12-11T17:12:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "fbrosseau",
                                           "body":  "\u003e GetProcessById() could fail because the process is already gone\r\n\r\nThis is true, of course, however this is dwarfed by the fact that any cautious Windows project, ever, needs to do a dummy access on `SafeHandle` for the other properties to be reliable. I do not think \"changing the implications of obtaining a Process handle\" are a worry, because there is extremely little you can do on a Process object without needing to go acquire a proper handle to it anyway. My understanding of this issue is that asking people to do a dummy read on `SafeHandle` shouldn\u0027t be required, and I agree, because I have had to do it in pretty much every dotnet codebase I have worked in.",
                                           "updatedAt":  "2023-12-10T05:10:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uNenZ",
                                           "createdAt":  "2023-12-10T17:24:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODPOIgQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jozkee",
                                                                               "createdAt":  "2023-12-11T22:09:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alexrp",
                                           "body":  "I agree that the `Process` API is...less than ideal (and for many more reasons than just this one), but there is a lot of existing code out there that uses `GetProcesses()`, `GetProcessById()`, and `GetProcessByName()` without expecting any resource acquisition to happen. IMO, whatever change is proposed here would need to ensure that such existing code doesn\u0027t suddenly open a bunch of process handles that stay open until the GC gets around to finalizing the `Process` object(s), as that would have an observable, negative effect on the reliability of that code.",
                                           "updatedAt":  "2023-12-10T17:24:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uXrVj",
                                           "createdAt":  "2023-12-12T09:55:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "On Linux/Unix, only the direct parent can obtain the exit code.\r\nSo even with SafeHandles it is not possible to obtain the exit code from a process that is not your direct child.",
                                           "updatedAt":  "2023-12-12T09:55:31Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "`Process.ExitCode` throws `InvalidOperationException`",
        "labels":  [
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96565",
        "createdAt":  "2024-01-05T20:34:48Z",
        "number":  96565,
        "author":  "mklement0",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-29T17:26:53Z",
        "body":  "### Description\r\n\r\nOn Linux distros, opening a document or folder path via `UseShellExecute = true` relies on external helper utilities; specifically, the [following ones are looked for, via the `Path` environment variable](https://github.com/dotnet/runtime/blob/9e31c21bcbb661fc4fa235839a66442a65ef447c/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Linux.cs#L110), in order, with the first one getting used: `xdg-open`, `gnome-open`, `kfmclient`\r\n\r\nIn the absence of these helper utilities, an exception is thrown, which makes sense, \r\nbut the exception is _misleading_, as it reports the `.FileName` property value as nonexistent.\r\n\r\nThat is, the nonexistence of a _helper utility_ is mistakenly reported as the the `.FileName` property value\u0027s nonexistence (even if the latter actually exists).\r\n\r\n\r\n\r\n### Reproduction Steps\r\n\r\nOn a Linux distro with none of the helper utilities present (if a helper utility is present, the call should open the current directory GUI shell\u0027s file manager):\r\n\r\n```csharp\r\nSystem.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo { FileName = \".\", UseShellExecute = true })\r\n```\r\n\r\n### Expected behavior\r\n\r\nAn exception that indicates the absence of a required helper utility.\r\n\r\n### Actual behavior\r\n\r\nE.g. when run from `/tmp`:\r\n\r\n```none\r\nAn error occurred trying to start process \u0027.\u0027 with working directory \u0027/tmp\u0027. No such file or directory\r\n```\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n* .NET 8.0.0\r\n* CBL-Mariner/Linux 2.0\r\n\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcAK8rg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5wAryu",
                                           "createdAt":  "2024-01-05T20:34:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nOn Linux distros, opening a document or folder path via `UseShellExecute = true` relies on external helper utilities; specifically, the [following ones are looked for, via the `Path` environment variable](https://github.com/dotnet/runtime/blob/9e31c21bcbb661fc4fa235839a66442a65ef447c/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Linux.cs#L110), in order, with the first one getting used.\r\n`xdg-open`, `gnome-open`, `kfmclient`\r\nIn the absence of these helper utilities, an exception is thrown, which makes sense, \r\nbut the exception is _misleading_, as it reports the `.FileName` property value as nonexistent.\r\n\r\nThat is, the nonexistence of a _helper utility_ is mistakenly reported as the the `.FileName` property value\u0027s nonexistence (even if the latter actually exists).\r\n\r\n\n\n### Reproduction Steps\n\nOn a Linux distro with none of the helper utilities present (if a helper utility is present, the call should open the current directory GUI shell\u0027s file manager):\r\n\r\n```csharp\r\nSystem.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo { FileName = \".\", UseShellExecute = true })\r\n```\n\n### Expected behavior\n\nAn exception that indicates the absence of a required helper utility.\n\n### Actual behavior\n\nE.g. when run from `/tmp`:\r\n\r\n```none\r\nAn error occurred trying to start process \u0027.\u0027 with working directory \u0027/tmp\u0027. No such file or directory\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n* .NET 8.0.0\r\n* CBL-Mariner/Linux 2.0\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emklement0\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-05T20:34:56Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Linux: `System.Diagnostics.ProcessStartInfo`: With `UseShellExecute = true`, a misleading exception is thrown when no helper utility (such as `xdg-open`) is present.",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97132",
        "createdAt":  "2024-01-18T03:13:16Z",
        "number":  97132,
        "author":  "yahoo0742",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-07T01:47:05Z",
        "body":  "### Description\n\nSome properties of the `System.Diagnostics.Process` (e.g., PrivateMemorySize64) don\u0027t work on MacOS or other OSs as described in the API document https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.privatememorysize64?view=net-6.0#system-diagnostics-process-privatememorysize64. \r\n\r\nI realized the problem when checking the test file on GitHub at `src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs`, rather than relying solely on the documentation or the IDE,\r\n\r\nI recommend `updating the documentation` to reflect accurate behavior or `making it platform-specific` until resolved. This ensures developers receive accurate information for effective use.\r\n\r\nThanks\n\n### Reproduction Steps\n\nJust compare the docs here https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process\r\nand tests at `System.Diagnostics.Process/tests/ProcessTests.cs`. \n\n### Expected behavior\n\n1. At least, the API doc is updated to reflect the accurate behavior. \r\n2. Add OSPlatformAttribute to APIs that don\u0027t function properly on some OSs.\r\n3. It would be fantastic if these APIs could behave consistently across different platforms.\r\n\r\n\n\n### Actual behavior\n\nThe API documentation does not specify that APIs may not return actual values on some OSs, and no warning from IDE or compiler when using these APIs, whereas, in reality, the APIs do not return actual values on some OSs.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcxpKgQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5xHLI-",
                                           "createdAt":  "2024-01-18T03:13:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nSome properties of the `System.Diagnostics.Process` (e.g., PrivateMemorySize64) don\u0027t work on MacOS or other OSs as described in the API document https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.privatememorysize64?view=net-6.0#system-diagnostics-process-privatememorysize64. \r\n\r\nI realized the problem when checking the test file on GitHub at `src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs`, rather than relying solely on the documentation or the IDE,\r\n\r\nI recommend `updating the documentation` to reflect accurate behavior or `making it platform-specific` until resolved. This ensures developers receive accurate information for effective use.\r\n\r\nThanks\n\n### Reproduction Steps\n\nJust compare the docs here https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process\r\nand tests at `System.Diagnostics.Process/tests/ProcessTests.cs`. \n\n### Expected behavior\n\n1. At least, the API doc is updated to reflect the accurate behavior. \r\n2. Add OSPlatformAttribute to APIs that don\u0027t function properly on some OSs.\r\n3. It would be fantastic if these APIs could behave consistently across different platforms.\r\n\r\n\n\n### Actual behavior\n\nThe API documentation does not specify that APIs may not return actual values on some OSs, and no warning from IDE or compiler when using these APIs, whereas, in reality, the APIs do not return actual values on some OSs.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eyahoo0742\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics.Process`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-18T03:13:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xqY4d",
                                           "createdAt":  "2024-01-23T21:21:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yahoo0742",
                                           "body":  "@jeffhandley any thoughts?",
                                           "updatedAt":  "2024-01-23T21:21:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zFSDj",
                                           "createdAt":  "2024-02-06T21:16:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODVxUbA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yahoo0742",
                                                                               "createdAt":  "2024-02-07T01:42:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Thanks for reporting this and for the follow-up, @yahoo0742. We don\u0027t currently have plans for investing in the cross-platform consistency beyond what we\u0027ve already been able to achieve. Therefore, updates to the API docs in https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Diagnostics/Process.xml would be appropriate. For APIs that unconditionally aren\u0027t supported on specific platforms, we\u0027d also be open to `OSPlatform` attribute updates on those APIs. For some of the APIs though, functionality conditionally works based on parameters, which can\u0027t be modeled in the attributes--those could only be improved through doc updates.\r\n\r\nWould you like to submit a pull request to https://github.com/dotnet/dotnet-api-docs with updates you think would be valuable there and/or a pull request here to add OSPlatform attributes, @yahoo0742?",
                                           "updatedAt":  "2024-02-06T21:16:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zGkqB",
                                           "createdAt":  "2024-02-07T01:47:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yahoo0742",
                                           "body":  "Thanks for your response, Jeff. I\u0027d send a PR for the doc update in a week or two.",
                                           "updatedAt":  "2024-02-07T01:47:04Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Discrepancies in System.Diagnostics.Process and API docs",
        "labels":  [
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99906",
        "createdAt":  "2024-03-18T14:55:55Z",
        "number":  99906,
        "author":  "kevingosse",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7LRow==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ShreyasJejurkar",
                                            "createdAt":  "2024-03-18T15:31:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xor-el",
                                            "createdAt":  "2024-03-18T22:28:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-03-18T23:21:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "amongonz",
                                            "createdAt":  "2024-03-23T01:10:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dsmalik",
                                            "createdAt":  "2024-03-23T18:33:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "karakasa",
                                            "createdAt":  "2024-09-20T09:05:03Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-02-11T19:29:24Z",
        "body":  "We\u0027ve been using `Process.GetCurrentProcess()` to retrieve information about the current process, such as the total number of threads. We\u0027ve seen evidence that, on Windows, calling `process.Threads` could take tens of milliseconds for some customers, and even on my machine it consistently takes more than 3 milliseconds.\r\nUnder the hood, it relies on `NtQuerySystemInformation` which actually captures information for all the processes on the machine, and then cherry-picks the information for the current process. Windows 8.1 has introduced process snapshotting APIs which can be used to retrieve this kind of information in a much cheaper way.\r\n\r\nI\u0027ve done a quick prototype where I compare the speed of `NtQuerySystemInformation` vs `PssCaptureSnapshot`/`PssWalkSnapshot` and the results are very encouraging:\r\n\r\n| Method                   | Mean        | Error     | StdDev     |\r\n|------------------------- |------------:|----------:|-----------:|\r\n| PssWalkSnapshot          |   102.19 us |  3.360 us |   9.747 us |\r\n| NtQuerySystemInformation | 3,100.48 us | 60.486 us | 105.937 us |\r\n\r\nMy prototype only retrieves the id of each thread of the process, but it looks like all the information required to populate the .NET `ProcessThread` class is in there.\r\n\r\nWould it be worth pursuing further?\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjZuOYg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc53dcPX",
                                           "createdAt":  "2024-03-18T15:22:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbfhgg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ShreyasJejurkar",
                                                                               "createdAt":  "2024-03-18T15:31:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2024-03-22T03:56:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Would it be worth pursuing further?\r\n\r\nSure. We might not be able to drop the existing implementation in order to keep older versions of Windows working, but if can produce the same results on newer versions more efficiently, and if there aren\u0027t other caveats (e.g. you must be an administrator), sounds like a good thing to experiment with.",
                                           "updatedAt":  "2024-03-18T15:22:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53jEJy",
                                           "createdAt":  "2024-03-19T03:20:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Symbai",
                                           "body":  "\u003e keep older versions of Windows working\r\n\r\nAren\u0027t older versions of Windows (below Windows 8.1) out of support? ",
                                           "updatedAt":  "2024-03-19T03:20:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53n0L7",
                                           "createdAt":  "2024-03-19T11:24:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Even when OSes are out of support, we try to avoid breaking existing features. ",
                                           "updatedAt":  "2024-03-19T11:24:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53o9vr",
                                           "createdAt":  "2024-03-19T13:47:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbHQvA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephentoub",
                                                                               "createdAt":  "2024-03-19T13:48:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e Even when OSes are out of support, we try to avoid breaking existing features.\r\n\r\nWorth noting that [.NET 8 still supports Windows Server 2012](https://github.com/dotnet/core/blob/main/release-notes/8.0/supported-os.md) which corresponds to Windows 8 (not 8.1) API wise and so lacks APIs like `PssCaptureSnapshot`.",
                                           "updatedAt":  "2024-03-19T13:47:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54D-9V",
                                           "createdAt":  "2024-03-22T03:58:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "@kevingosse I\u0027m moving this into the Future milestone, but if you\u0027re planning to submit a pull request for this, we will commit to reviewing it. I\u0027ll mark the issue as https://github.com/dotnet/runtime/labels/help%20wanted.",
                                           "updatedAt":  "2024-03-22T03:58:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54NWgt",
                                           "createdAt":  "2024-03-24T10:38:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODe8U3Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dsmalik",
                                                                               "createdAt":  "2024-04-21T00:27:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kevingosse",
                                           "body":  "I started implementing it, but `PssCaptureSnapshot` throws an access violation when I try to collect handles. I initially thought that maybe I got my p/invoke wrong, but I still have the issue with this simple C++ code:\r\n\r\nhttps://gist.github.com/kevingosse/5dc76124ca986a41f1e8719c77b7987a\r\n\r\n@stephentoub This looks like a bug in the PssCaptureSnapshot API. Do you have a contact at Microsoft that I could report this to? Now that Microsoft Connect is gone, I don\u0027t know what channel we\u0027re supposed to use.\r\n\r\n\r\n",
                                           "updatedAt":  "2024-03-24T10:38:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54OEw9",
                                           "createdAt":  "2024-03-24T21:45:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Symbai",
                                           "body":  "I dont get an access violation, works fine on my system (Windows 11 64bit)\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eCode\u003c/summary\u003e\r\n  \r\n \r\n  ```C#\r\n[Flags]\r\nprivate enum PSS_CAPTURE_FLAGS : uint\r\n{\r\n\tPSS_CAPTURE_HANDLES = 0x00000004,\r\n}\r\n\r\nprivate enum PSS_QUERY_INFORMATION_CLASS\r\n{\r\n\tPSS_QUERY_HANDLE_INFORMATION = 4,\r\n}\r\n\r\n[DllImport(\"kernel32.dll\")]\r\nprivate static extern int PssCaptureSnapshot(IntPtr processHandle, PSS_CAPTURE_FLAGS captureFlags, int threadContextFlags, out IntPtr snapshotHandle);\r\n\r\n[DllImport(\"kernel32.dll\")]\r\nprivate static extern unsafe int PssQuerySnapshot(IntPtr snapshotHandle, PSS_QUERY_INFORMATION_CLASS informationClass, void* buffer, int bufferLength);\r\n\r\n[StructLayout(LayoutKind.Sequential)]\r\npublic struct PSS_HANDLE_INFORMATION\r\n{\r\n\tpublic uint HandlesCaptured;\r\n}\r\n\r\nstatic unsafe async Task Main(string[] args)\r\n{\r\n\tvar result = PssCaptureSnapshot(Process.GetCurrentProcess().Handle, PSS_CAPTURE_FLAGS.PSS_CAPTURE_HANDLES, 0, out var snapshotHandle);\r\n\t\r\n\tif (result != 0)\r\n\t{\r\n\t\tthrow new Win32Exception(result);\r\n\t}\r\n   \r\n\tPSS_HANDLE_INFORMATION handleInformation = default;\r\n\r\n\tresult = PssQuerySnapshot(snapshotHandle, PSS_QUERY_INFORMATION_CLASS.PSS_QUERY_HANDLE_INFORMATION, \u0026handleInformation, Marshal.SizeOf\u003cPSS_HANDLE_INFORMATION\u003e());\r\n\t\r\n\tif (result != 0)\r\n\t{\r\n\t\tthrow new Win32Exception(result);\r\n\t}\r\n\tvar handleCount = handleInformation.HandlesCaptured;\r\n\r\n\tConsole.WriteLine(handleCount);\r\n}\r\n  ```\r\n  \r\n\u003c/details\u003e",
                                           "updatedAt":  "2024-03-24T21:45:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6M7Mt1",
                                           "createdAt":  "2024-09-20T18:46:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karakasa",
                                           "body":  "The problem is `PssCaptureSnapshot` doesn\u0027t include information for `ProcessThread.ThreadState` \u0026 `ProcessThread.WaitReason`. Although rarely used, these two properties requires either:\r\n* Introduce a new Windows-only API that fills `Process.Threads` without the two properties; \r\n* When the two properties are accessed, re-enumerate threads using the original way.\r\n    * The workaround is very slow and error-prone, as `NtQuerySystemInformation` is the only documented way to retrieve the values.\r\n* \u003cdel\u003eUse undocumented `NtQueryInformationThread`+`ThreadSystemThreadInformation` (THREADINFOCLASS = 0x28)\u003c/del\u003e\r\n\r\nBesides, this may be a behavior breaking change since the two values are lazy-evaluated, rather than when `Process.Threads` is initialized as of now.",
                                           "updatedAt":  "2024-09-26T03:28:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NWy0A",
                                           "createdAt":  "2024-09-24T15:00:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Use undocumented NtQueryInformationThread+ThreadSystemThreadInformation\r\n\r\nWe may also explore what it would take to have this API documented. It would need to be handled by System.Diagnostic.Process area maintainers.",
                                           "updatedAt":  "2024-09-24T15:00:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NdruM",
                                           "createdAt":  "2024-09-25T08:08:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karakasa",
                                           "body":  "\u003e We may also explore what it would take to have this API documented.\r\n\r\nI suppose that needs to be evaluated by the Windows team?",
                                           "updatedAt":  "2024-09-25T08:08:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NgGph",
                                           "createdAt":  "2024-09-25T12:52:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I suppose that needs to be evaluated by the Windows team?\r\n\r\nRight.",
                                           "updatedAt":  "2024-09-25T12:52:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Nk23H",
                                           "createdAt":  "2024-09-25T21:00:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Symbai",
                                           "body":  "\u003e * Use undocumented `NtQueryInformationThread`\r\n\r\nAt least this one is documented and the documentation strongly advises to not use this API as it might change or become unavailable in future versions of Windows. ",
                                           "updatedAt":  "2024-09-25T21:00:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Nm45i",
                                           "createdAt":  "2024-09-26T03:29:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODzp2jA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Symbai",
                                                                               "createdAt":  "2024-09-26T06:41:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karakasa",
                                           "body":  "\u003e At least this one is documented and the documentation strongly advises to not use this API as it might change or become unavailable in future versions of Windows.\r\n\r\nI\u0027m not quite worried about that. The current approach utilizes `NtQuerySystemInformation` which is also advised not to use.",
                                           "updatedAt":  "2024-09-26T03:30:16Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Consider using process snapshotting APIs for System.Diagnostics.Process",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "os-windows",
                       "tenet-performance",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100216",
        "createdAt":  "2024-03-25T02:22:47Z",
        "number":  100216,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-23T02:03:39Z",
        "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20240323.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=615632\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15040424\u0026resultId=130387\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-linux-Release-x64-jitstress_random_2-Ubuntu.2204.Amd64.Open\r\n    - System.Diagnostics.Tests.ProcessTests.CanBeFinalized\r\n```\r\n\r\n**Error message:**\r\n```\r\n Assert.True() Failure\r\nExpected: True\r\nActual:   False\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at System.Diagnostics.Tests.ProcessTests.CanBeFinalized() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs:line 1514\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmIORUQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc54OnJn",
                                           "createdAt":  "2024-03-25T02:23:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-25T02:23:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55rBPf",
                                           "createdAt":  "2024-04-07T05:36:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20240406.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=633167\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15566440\u0026resultId=177694\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-arm64-jitstress_random_2-Windows.11.Arm64.Open\r\n    - System.Diagnostics.Tests.ProcessTests.CanBeFinalized\r\n```\r\n\r\n**Error message:**\r\n```\r\nAssert.True() Failure\r\nExpected: True\r\nActual:   False\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at System.Diagnostics.Tests.ProcessTests.CanBeFinalized() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs:line 1514\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```",
                                           "updatedAt":  "2024-04-07T05:36:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AuUd3",
                                           "createdAt":  "2024-06-11T02:00:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20240608.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=701531\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=17459958\u0026resultId=130051\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-linux-Release-x64-jitstress_random_1-Ubuntu.2204.Amd64.Open\r\n    - System.Diagnostics.Tests.ProcessTests.CanBeFinalized\r\n```\r\n\r\n**Error message:**\r\n```\r\n Assert.True() Failure\r\nExpected: True\r\nActual:   False\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at System.Diagnostics.Tests.ProcessTests.CanBeFinalized() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs:line 1514\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```",
                                           "updatedAt":  "2024-06-11T02:00:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IE6jx",
                                           "createdAt":  "2024-08-12T01:45:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20240810.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=771989\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19725362\u0026resultId=134605\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-linux-Release-arm-jitstress_random_2-(Debian.12.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-12-helix-arm32v7\r\n    - System.Diagnostics.Tests.ProcessTests.CanBeFinalized\r\n```\r\n\r\n**Error message:**\r\n```\r\n Assert.True() Failure\r\nExpected: True\r\nActual:   False\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at System.Diagnostics.Tests.ProcessTests.CanBeFinalized() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs:line 1516\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```",
                                           "updatedAt":  "2024-08-12T01:45:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IVJWW",
                                           "createdAt":  "2024-08-13T22:23:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "@jeffhandley, could you assign this issue and look into it in .NET 9?  ",
                                           "updatedAt":  "2024-08-13T22:23:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NYFWE",
                                           "createdAt":  "2024-09-24T17:31:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "CC @jozkee, @jeffhandley, this test is still failing. \r\n\r\n[Pipelines - Runs for runtime-coreclr libraries-jitstress-random (azure.com)](https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fdev.azure.com%2Fdnceng-public%2Fpublic%2F_build%3FdefinitionId%3D160\u0026data=05%7C02%7CJulie.Lee%40microsoft.com%7C078674240d3a43e056cb08dcdcb92867%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C638627935005064345%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C0%7C%7C%7C\u0026sdata=2dQo9FnWhxMOS%2Fferov0%2BpxX%2BdCLbsaHnqgFnqqNMaE%3D\u0026reserved=0): [20240923.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=816481) \r\n\r\n- Linux-arm64 Release\r\n-- net9.0-linux-Release-arm64-jitstress_random_1-(Ubuntu.2004.Arm64.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-20.04-helix-arm64v8\r\n\r\n",
                                           "updatedAt":  "2024-09-24T17:31:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Yg5FR",
                                           "createdAt":  "2024-12-23T02:03:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20241221.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=901378\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23662256\u0026resultId=140532\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-arm64-jitstress_random_1-(Ubuntu.2004.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-20.04-helix-arm64v8\n    - System.Diagnostics.Tests.ProcessTests.CanBeFinalized\n```\n\n**Error message:**\n```\n Assert.True() Failure\nExpected: True\nActual:   False\n```\n\n**Stack trace:**\n```\n   at System.Diagnostics.Tests.ProcessTests.CanBeFinalized() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs:line 1516\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2024-12-23T02:03:38Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Test failure: System.Diagnostics.Tests.ProcessTests.CanBeFinalized",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "os-linux",
                       "JitStress",
                       "arch-x64",
                       "blocking-clean-ci-optional"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101582",
        "createdAt":  "2024-04-26T00:25:49Z",
        "number":  101582,
        "author":  "mqudsi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODF-iKw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rampaa",
                                            "createdAt":  "2024-05-08T21:55:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "samsosa",
                                            "createdAt":  "2025-07-07T14:19:15Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-07-03T17:15:43Z",
        "body":  "### Background and motivation\n\nThe existing api for retrieving a process by its process id (`Process.GetProcessById()`) does not provide any exception-safe method of querying a process, as it throws an `ArgumentException` if the specified pid cannot be found and there is no means of atomically guaranteeing that a once-valid process id will remain valid by the time the `Process.GetProcessById()` call is being serviced.\r\n\r\nThis is true regardless of where the pid was obtained from, even if the pid were obtained from a previous call to `Process.GetProcessById()` due to the inherently concurrent execution model associated with multiprocessing.\r\n\r\nIf it\u0027s any sort of additional incentive, the exception thrown by `Process.GetProcessById()` when a valid-but-no-longer-extant pid is provided is `ArgumentException`, which is normally not an exception that a calling library/application should be catching. Moreover, the reuse of `ArgumentException` to indicate both \"process not found\" and \"invalid machine name\" (for the two-parameter override) adds to the confusion of using this api, as one case is intended to be caught and the other, generally speaking, is not.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Diagnostics;\r\n\r\npublic class Process\r\n{\r\n    public static System.Diagnostics.Process? TryGetProcessById(int pid);\r\n    public static System.Diagnostics.Process? TryGetProcessById(int pid, string machineName);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n// Use shared memory IPC to get PID of other instance\r\nvar pid = 42;\r\n\r\nusing var process = Process.TryGetProcessById(pid);\r\nif (process is not null)\r\n{\r\n    process.WaitForExit();\r\n}\r\n```\r\n\n\n### Alternative Designs\n\nI know the preferred approach for `TryFoo()` methods is to return a boolean indicating success or failure and use an `out` param to provide the output on success, but in this case I eschewed that approach in favor of returning a nullable `Process?` directly to make sure it remains easy to remember to always use `using` with the disposable `Process` object.\r\n\r\nOtherwise, the API might look as follows:\r\n\r\n```csharp\r\nclass Process\r\n{\r\n    public static bool TryGetProcessById(int pid, out System.Diagonstics.Process process);\r\n    public static bool TryGetProcessById(int pid, string machineName, out System.Diagnostics.Process process);\r\n}\r\n```\r\n\r\nbut that would be prone to misuse. \n\n### Risks\n\nSome might be concerned about the proliferation of `TryFoo()` methods, though working around the unfortunate legacy use of `ArgumentException` here and the inherently fallible nature of obtaining a process (that may have already exited) by its id really lend themselves to recommending the addition of an exception-free alternative to the current `Process.GetProcessById()` method.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfCx4Dw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc574awr",
                                           "createdAt":  "2024-04-26T00:26:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-26T00:26:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc574bhp",
                                           "createdAt":  "2024-04-26T00:30:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfx0vQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eladmarg",
                                                                               "createdAt":  "2024-04-26T07:38:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "silkfire",
                                                                               "createdAt":  "2024-04-27T20:20:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "daniel-white",
                                           "body":  "The `Try...` pattern usually has an out parameter and return a Boolean. I would expect this api to work the same way",
                                           "updatedAt":  "2024-04-26T00:32:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc574hlj",
                                           "createdAt":  "2024-04-26T01:01:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Can you elaborate on the scenario where this is needed? You\u0027re on some path where the overhead of the exception is prohibitive?",
                                           "updatedAt":  "2024-04-26T01:01:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc579LCd",
                                           "createdAt":  "2024-04-26T15:38:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfwyCA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-04-26T18:37:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MineCake147E",
                                                                               "createdAt":  "2024-04-27T03:10:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TymurGubayev",
                                                                               "createdAt":  "2024-04-27T14:32:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I don\u0027t think that `Try*` APIs should be restricted to just cases where exception overhead is prohibitive or performance sensitive areas.\r\n\r\nExceptions are massively expensive, they can be error prone to handle, may not actually cover what the user wanted to cover over time, and it is generally considered best practice to not do control flow based on exceptions. Forcing users to handle them in scenarios that are known to be prone to arbitrary failure (looking up process IDs, opening or creating files, etc) just because the operation itself already has a larger bit of overhead doesn\u0027t make sense to me and seems to be encouraging practices that are widely touted as being bad or problematic.\r\n\r\nThe general `try { } catch (...) { }` pattern is also tricky for many different reasons and can be difficult to integrate into general control flow paths. A user can always define their own helper `TryGetProcessId` path that itself does the `try/catch` and converts the exception to `bool`, but that\u0027s a lot more complex and really inverts the more normal expectation (which is simply exposing it ourselves such that `GetProcessId` calls `TryGetProcessId` and throw if it returns `false`; and therefore achieves the same thing but in a stable/documented way that also gives it to the user as cheaply as possible and without any significant overhead required on our part).\r\n",
                                           "updatedAt":  "2024-04-26T15:38:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc579Rg0",
                                           "createdAt":  "2024-04-26T15:53:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I don\u0027t think that Try* APIs should be restricted to just cases where exception overhead is prohibitive or performance sensitive areas.\r\n\r\nThat\u0027s an extremely slippery slope. .NET uses exceptions for these cases. From my perspective, that argument effectively leads to saying that any method which could throw (which is _many_) could have a Try method just to represent failure differently, and that\u0027s not a path we\u0027re going to go down.",
                                           "updatedAt":  "2024-04-26T15:53:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc579SG8",
                                           "createdAt":  "2024-04-26T15:54:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I\u0027ve seen this discussion a few times on API proposals in the past and generally they returned to the consensus that .NET for good or ill chose the exception model for error handling and the Try pattern is only for the highest performance cases where errors are inevitable e.g. parsing.\n\nIf we use the Try pattern more broadly, what criteria do you believe we should use to decide whether it is worthwhile to add the duplicate API?",
                                           "updatedAt":  "2024-04-26T15:55:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc579Ss0",
                                           "createdAt":  "2024-04-26T15:56:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "daniel-white",
                                           "body":  "For this theres a cost even in determining whether the process exists or not. Looking at the implementation its using `kill` on *ix, so would the cost for an exception be still higher? perhaps a helper method to see if the process is still alive then attempt to use `GetProcessById` after might be better? then again theres a race. this could be easily implemented by the caller.\r\n",
                                           "updatedAt":  "2024-04-26T15:58:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc579Y6J",
                                           "createdAt":  "2024-04-26T16:12:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvmXgA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexrp",
                                                                               "createdAt":  "2024-04-26T16:19:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-04-26T18:38:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MineCake147E",
                                                                               "createdAt":  "2024-04-27T03:12:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hamarb123",
                                                                               "createdAt":  "2024-04-27T10:06:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TymurGubayev",
                                                                               "createdAt":  "2024-04-27T14:35:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rampaa",
                                                                               "createdAt":  "2024-04-27T15:21:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "noelex",
                                                                               "createdAt":  "2024-04-28T01:20:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jozkee",
                                                                               "createdAt":  "2024-07-03T17:02:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexovi",
                                                                               "createdAt":  "2024-08-25T14:24:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e That\u0027s an extremely slippery slope. .NET uses exceptions for these cases. From my perspective, that argument effectively leads to saying that any method which could throw (which is many) could have a Try method just to represent failure differently, and that\u0027s not a path we\u0027re going to go down.\r\n\r\nI disagree. This isn\u0027t a statement that try can/should be provided for \"any method\" which could throw, it\u0027s specifically keeping the spirit of `Try*` APIs as detailed in the FDG\r\n\r\n\u003e *CONSIDER* the Try Pattern for members that might throw exceptions in common scenarios to avoid performance problems related to exceptions.\r\n\r\nThe only difference is that it\u0027s saying that \"to avoid performance problems related to exceptions\" should be extended to basically include something along the lines of \"or where the user performing their own pre-validation is impossible\".\r\n\r\nSo something like `TimeSpan.FromHours` should not have some `TimeSpan.TryFromHours`, this doesn\u0027t make sense. A user can trivially validate it themselves before hand and has many avenues for avoiding the exception.\r\n\r\nHowever, something like `Process.GetProcessId` or `File.Delete` are cases where there is literally nothing a user can do except for catch the exception that is currently being thrown. This is because they are explicitly interacting with systems outside the control of the process which may be getting changed concurrently. It\u0027s the same reason why `if (File.Exists(...) { File.Delete(...); }` is problematic and why issues like https://github.com/dotnet/runtime/issues/27217 have been opened.\r\n\r\nThere is a very clear and distinguished line we can draw that keeps this from being a slippery slope. Which provides clear and concise benefit to users that are using these APIs while maintaining the spirit of the guideline and how users generally expect Try APIs to work.",
                                           "updatedAt":  "2024-04-26T16:15:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc579Zin",
                                           "createdAt":  "2024-04-26T16:13:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfwy1w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "TymurGubayev",
                                                                               "createdAt":  "2024-04-27T14:35:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "We are ourselves functionally using system level \"try apis\" for most of the functions in this category already and simply converting them to exceptions 100% of the time.\r\n\r\nSo it\u0027s really just an ask to expose the functionality the system already provides because the system already understands that it needs to exist that way.",
                                           "updatedAt":  "2024-04-26T16:13:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc579bN4",
                                           "createdAt":  "2024-04-26T16:18:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfvSQQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2024-04-27T05:39:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e The only difference is that it\u0027s saying that \"to avoid performance problems related to exceptions\" should be extended to basically include something along the lines of \"or where the user performing their own pre-validation is impossible\".\r\n\r\nAnd I believe that extension includes the vast majority of exceptions we end up throwing.\r\n\r\n\u003e it\u0027s specifically keeping the spirit of Try* APIs as detailed in the FDG\r\n\r\nI disagree. That \"or\" is a very large leap from the original spirit.",
                                           "updatedAt":  "2024-04-26T16:21:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc579hZX",
                                           "createdAt":  "2024-04-26T16:36:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e And I believe that extension includes the vast majority of exceptions we end up throwing.\r\n\r\nDo you have an example of what you think it would include?\r\n\r\nThe things people have historically asked for these APIs around are explicitly APIs like file handling or things involving processes and that other languages and the system APIs themselves provide \"try\" like APIs for.\r\n\r\nIt feels like a disservice to .NET users to keep pushing off exposing such functionality ourselves due to the potential for it to be a slipper slope or belief that the performance characteristics don\u0027t matter.",
                                           "updatedAt":  "2024-04-26T16:36:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc579i2E",
                                           "createdAt":  "2024-04-26T16:40:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Do you have an example of what you think it would include?\r\n\r\nAs one example of many, Stream.Read; that can throw exceptions for any number of reasons where \"the user performing their own pre-validation is impossible\".",
                                           "updatedAt":  "2024-04-26T16:40:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc579qCV",
                                           "createdAt":  "2024-04-26T17:01:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Stream is an example of IO and would qualify as something a try API should really exist for IMO. It\u0027s functionally the same concept as doing other types of IO, a case where such try APIs have been explicitly requested in the past, and where other languages or the system level APIs themselves expose the ability to do the functionality in a non-faulting form.\r\n\r\n`IOException` in general is a great example of where it is commonly seen as part of a `catch (IOException) { }` block that only exists to ignore the exception and allow the user or code to refresh and try again, ideally with a different input and so really fits in with the type of scenario that `Try*` APIs are explicitly good for.",
                                           "updatedAt":  "2024-04-26T17:01:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc579se8",
                                           "createdAt":  "2024-04-26T17:08:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODifWJg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MineCake147E",
                                                                               "createdAt":  "2024-04-27T03:16:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hamarb123",
                                                                               "createdAt":  "2024-04-27T10:08:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TymurGubayev",
                                                                               "createdAt":  "2024-04-27T14:41:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rampaa",
                                                                               "createdAt":  "2024-04-27T15:24:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rabuckley",
                                                                               "createdAt":  "2024-04-27T21:00:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "noelex",
                                                                               "createdAt":  "2024-04-28T01:26:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Blokyk",
                                                                               "createdAt":  "2024-05-20T20:41:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "To me, and I think to a pretty decent part of the .NET community, `Try*` APIs should in general exist for any kind of exception that cannot be trivially handled by the developer and for which handling the point of failure is an expected thing in real world apps.\r\n\r\nThings like `StackOverflowException` or `OutOfMemoryException` are exceptions the developer can\u0027t handle, but are incredibly rare and essentially \"unexpected\". They additionally represent \"catastrophic failure\", so there is nothing they can reasonably do even if they could catch it.\r\n\r\nThings like `ArgumentException` are exceptions that the developer can handle and which are also supposed to be rare and essentially \"unexpected\" in production code. When they exist, they typically represent bugs in the user code, so the fix is to adjust your code to not pass in the bad state.\r\n\r\nThings like `FormatException` or `IOException` are then cases where they are common and expected, largely because they are used with inputs or data that exists externally to the process and which cannot be trivially handled. It is generally expected for an application to need to handle such things, recover, and continue, and so they are very good examples of places where `Try*` APIs should exist to give developers not only contextual awareness that there is some common error state they may want to handle, but to allow them to easily integrate that handling into their control flow.",
                                           "updatedAt":  "2024-04-26T17:08:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc579te8",
                                           "createdAt":  "2024-04-26T17:11:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JimMore",
                                           "body":  "If a method can fail in normal use, it qualifies for a `Try*` API.\r\nYes, `Stream.Read` can fail, but that\u0027s an implementation detail that doesn\u0027t apply to all streams.\r\nIn the case of `Process.GetProcessById()`, the only implementation is prone to error in normal use.",
                                           "updatedAt":  "2024-04-26T17:11:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc579vEd",
                                           "createdAt":  "2024-04-26T17:16:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Try* APIs should in general exist for any kind of exception that cannot be trivially handled by the developer and for which handling the point of failure is an expected thing in real world apps.\r\n\r\nAnd this is broadly arguing against .NET\u0027s general exception model and philosophy. It\u0027s been litigated in the past. I\u0027m not going to relitigate it here.",
                                           "updatedAt":  "2024-04-26T17:16:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57_29d",
                                           "createdAt":  "2024-04-27T03:07:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mqudsi",
                                           "body":  "\u003e Things like ArgumentException are exceptions that the developer can handle and which are also supposed to be rare and essentially \"unexpected\" in production code. When they exist, they typically represent bugs in the user code, so the fix is to adjust your code to not pass in the bad state.\r\n\r\nAnd this is precisely not the case for `Process.GetProcessById()`, where it\u0027s perfectly normal for a process to have exited in between the time you obtained its pid and when you queried for it, isn\u0027t a bug in most cases, and can\u0027t be validated or checked for atomically when using this api, but it throws `ArgumentException` anyway.",
                                           "updatedAt":  "2024-04-27T03:10:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57_3Cq",
                                           "createdAt":  "2024-04-27T03:08:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mqudsi",
                                           "body":  "@daniel-white \r\n\r\n\u003e The Try... pattern usually has an out parameter and return a Boolean. I would expect this api to work the same way\r\n\r\nYes, I pointed out the reason for diverging from that in the first post under \"Alternative Designs\". But maybe I missed a way that would work.",
                                           "updatedAt":  "2024-04-27T03:09:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57_5TL",
                                           "createdAt":  "2024-04-27T03:51:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Requiring to the original proposal. It\u0027s certainly true that it is not possible for the developer to avoid potential exceptions. But I\u0027m not clear what the motivation is in this particular case to avoid an exception. Are you seeing a performance problem from so many exceptions? Or it\u0027s about writing more compact code?",
                                           "updatedAt":  "2024-04-27T03:52:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57_5ad",
                                           "createdAt":  "2024-04-27T03:54:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "And for the general point, I don\u0027t have the FDG in front of me, but my recollection is this falls out of the scope they define for the Try pattern. Assuming that\u0027s the case (@bartonjs) then the first thing to do if you want this API is to get the FDG changed, so we don\u0027t debate this case by case.",
                                           "updatedAt":  "2024-04-27T03:54:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57_8ll",
                                           "createdAt":  "2024-04-27T04:51:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I\u0027m not clear what the motivation is in this particular case to avoid an exception. \r\n\r\nThis API proposal was motivated by a discussion about merits of catching ArgumentExceptions in [unrelated issue](https://github.com/dotnet/runtime/issues/101437#issuecomment-2077825588).",
                                           "updatedAt":  "2024-04-27T04:51:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58DAUG",
                                           "createdAt":  "2024-04-27T19:42:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mqudsi",
                                           "body":  "@danmoseley I apologize, I neglected to answer @stephentoub\u0027s original question. \r\n\r\nThis particular requests was not motivated by performance considerations; it came about when I was searching through my code for places where I catch `ArgumentException`.\r\n\r\nI\u0027m not arguing for making exception-free versions of all core apis, but was bothered by the fact that attempting to find a process by id when it has already exited is not exceptional (and is rather routine, actually) but still throws. I was also bothered by the specific exception that was thrown, as @jkotas also mentions.",
                                           "updatedAt":  "2024-04-27T19:42:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58DdON",
                                           "createdAt":  "2024-04-28T01:33:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODf9Ddg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mqudsi",
                                                                               "createdAt":  "2024-04-29T16:40:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Gotcha. With respect to the exception type, it wouldn\u0027t be the only case where it arguably wasn\u0027t the best choice they made way back. The only option would be to throw a derived type, presumably a new one, and it isn\u0027t clear what that could reasonably be.",
                                           "updatedAt":  "2024-04-28T01:33:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58DdTF",
                                           "createdAt":  "2024-04-28T01:34:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODf9GDg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mqudsi",
                                                                               "createdAt":  "2024-04-29T16:45:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "As for not being exceptional - looking for input from @bartonjs on whether that conflicts with FDG. If it does, the discussion (if you want to pursue) should be advocating FDG not changing this specific case.",
                                           "updatedAt":  "2024-04-28T01:34:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58LHgP",
                                           "createdAt":  "2024-04-29T17:37:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZnF4g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2024-04-29T17:40:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2024-05-02T15:50:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-05-03T00:16:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "mahdikshk",
                                                                               "createdAt":  "2024-06-06T17:03:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jozkee",
                                                                               "createdAt":  "2024-07-03T17:14:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "samsosa",
                                                                               "createdAt":  "2025-07-07T14:26:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "GetProcessById throwing an ArgumentException when there\u0027s no process with that ID is not consistent with the guidelines. Or at least with best practice and a Krzysztof personal advice bubble:\r\n\r\n\u003e KRZYSZTOF CWALINA\r\n\u003e\r\n\u003e The difference between InvalidOperationException and ArgumentException is that ArgumentException does not rely on the state of any other object besides the argument itself to determine whether it needs to be thrown. For example, if client code tries to access a nonexistent resource, InvalidOperationException should be thrown. On the other hand, if client code tries to access a resource using a malformed identifier, ArgumentException should be thrown.\r\n\r\nSo this should have been something like InvalidOperationException, while a negative PID is presumably actually an ArgumentException.\r\n\r\n\u003e I know the preferred approach for TryFoo() methods is to return a boolean indicating success or failure and use an out param to provide the output on success, but in this case...\r\n\r\nFDG is very clear on this one:\r\n\r\n\u003e DO “return” the value from a Try method via an out parameter.\r\n\r\nand also\r\n\r\n\u003e DO use the prefix “Try” and Boolean return type for methods implementing the Try pattern.\r\n\r\nThere is, of course, always room for \"maybe we never considered...\", but given that this is on the wrong side of two \"DOs\" (and my gut says we\u0027re already had Try methods emitting IDisposable things), it feels unlikely to be the way we choose.\r\n\r\n\u003e And for the general point...\r\n\r\n@stephentoub was already addressing this point.  FDG doesn\u0027t directly define when _not_ to make them, but what it has to say about when is\r\n\r\n\u003e CONSIDER the Try Pattern for members that might throw exceptions in common scenarios to avoid performance problems related to exceptions.\r\n\r\nThe prose also supports doing it for anything with an \"inherent race condition\" (citing ConcurrentDictionary.TryAdd).\r\n\r\nOne thing that is potentially difficult for this specific proposal, and for the linked File.TryOpen proposal is\r\n\r\n\u003e DO pick one kind of reason for why your Try method can return false, and throw an exception for any other failure reason.\r\n\r\nFor TryGetProcessById, that one reason could be \"that PID doesn\u0027t exist\".  If there are permissions associated with the routine then there\u0027s a question of should an access denied throw or return false (changing the reason to \"I can\u0027t open it\").  The sniff test is \"does the same if-false block handle the failures the same way\".  Something like `top` would conceivably render \"I can\u0027t open this process\" as different from \"there is no process 187\".  And then there\u0027s the fun of \"you wanted me to open a remote process\" failing because \"I can\u0027t talk to the machine\", \"It timed out\", \"Access Denied\", etc.  (though that\u0027s easy, just leave off the machine-name-accepting overload)\r\n\r\nAnd, at the end of the day:\r\n\r\n\u003e DO NOT return error codes.\r\n\u003e\r\n\u003e Exceptions are the primary means of reporting errors in frameworks.\r\n\r\nWhich basically means that a Try method should only be added for performance reasons when there\u0027s a broad (enough) demonstrated need, not just a \"but exceptions are expensive!\" knee-jerk reaction.\r\n\r\n---\r\n\r\nAll that said, in my personal opinion `public static bool TryGetProcessById(int pid, out Process process);` seems like a reasonable addition, provided that `false` means only \"there was no process with this ID\" (access denied, et al, would still throw), as it addresses the race condition along the lines of \"I was told this work is being handled by PID 12345, so I want to open it and call WaitForExit... but it has exited already\" (or, if calling WaitForExit makes Steve cry, \"to build a Task tracking the out-of-process work\")\r\n\r\nIf the existing API didn\u0027t misuse ArgumentException for \"your argument doesn\u0027t match the runtime state\" I\u0027d probably fall back to asking what sort of workload would benefit from this (e.g. for a WaitForExit type thing, the slowness of the exception route is probably still faster than the expected wait time, so there\u0027s not (to me) valid a \"but... perf!\" argument).\r\n\r\nI\u0027d also favor adding `public class ProcessNotFoundException : ArgumentException { public ProcessNotFoundException(int pid); }` as a \"here\u0027s how to better detect this state\".  It\u0027s kinda icky, though, so I might be more in favor of the Try method.",
                                           "updatedAt":  "2024-04-29T17:37:20Z"
                                       }
                                   ],
                         "totalCount":  25
                     },
        "title":  "[API Proposal]: Process.TryGetProcessById()",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101700",
        "createdAt":  "2024-04-29T22:21:37Z",
        "number":  101700,
        "author":  "carlossanlop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:01:20Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=659152\r\nBuild error leg or test failing: System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows\r\nPull request: https://github.com/dotnet/runtime/pull/101098\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"ProcessTests.cs(1782,0): at System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows\",\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n- Log example: https://helixre107v0xd1eu3ibi6ka.blob.core.windows.net/dotnet-runtime-refs-heads-release-80-0dbcfa2bfb3845f99c/System.Diagnostics.Process.Tests/1/console.8ed0f1ec.log?helixlogtype=result\r\n- Output:\r\n```\r\n    System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows [FAIL]\r\n      Assert.NotEqual() Failure\r\n      Expected: Not 0\r\n      Actual:   0\r\n      Stack Trace:\r\n        /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs(1782,0): at System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows()\r\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n        /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs(36,0): at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs(57,0): at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n    System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows [FAIL]\r\n      Assert.NotEqual() Failure\r\n      Expected: Not \"\"\r\n      Actual:   \"\"\r\n      Stack Trace:\r\n        /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs(1817,0): at System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows()\r\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n        /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs(36,0): at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs(57,0): at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=659152\r\n**Error message validated:** `[ProcessTests.cs(1782,0): at System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 4/29/2024 10:22:00 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1153875](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153875)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153875\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31875184\u0026resultId=100067)||\r\n|[1153874](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153874)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153874\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31875138\u0026resultId=102163)||\r\n|[1152904](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152904)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152904\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31848544\u0026resultId=100961)||\r\n|[1152905](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152905)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1152905\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31848534\u0026resultId=101091)||\r\n|[1151702](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151702)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151702\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31816658\u0026resultId=101101)||\r\n|[1151694](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151694)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151694\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31816612\u0026resultId=102148)||\r\n|[1150529](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150529)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150529\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31783662\u0026resultId=100200)||\r\n|[1150527](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150527)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150527\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31783572\u0026resultId=100146)||\r\n|[1149435](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149435)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149435\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31751994\u0026resultId=101091)||\r\n|[1148285](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148285)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148285\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31707902\u0026resultId=100253)||\r\n|[1148295](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148295)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1148295\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31707814\u0026resultId=103294)||\r\n|[1147690](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147690)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147690\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31682954\u0026resultId=100173)||\r\n|[1147689](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147689)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147689\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31682930\u0026resultId=100204)||\r\n|[1147343](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147343)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147343\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31670222\u0026resultId=102094)||\r\n|[1147344](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147344)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1147344\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31670206\u0026resultId=102096)||\r\n|[1146373](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146373)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146373\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31633876\u0026resultId=100164)||\r\n|[1146369](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146369)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146369\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31633862\u0026resultId=102149)||\r\n|[1146185](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146185)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146185\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31628496\u0026resultId=100065)|dotnet/runtime#119523|\r\n|[1145223](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145223)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145223\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31595104\u0026resultId=102882)||\r\n|[1145220](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145220)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145220\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31595096\u0026resultId=102058)||\r\n|[1144143](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144143)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144143\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31555854\u0026resultId=102144)||\r\n|[1144133](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144133)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144133\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31555744\u0026resultId=102197)||\r\n|[1143994](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143994)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143994\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31552808\u0026resultId=102121)|dotnet/runtime#119523|\r\n|[1143121](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143121)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143121\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31518682\u0026resultId=102060)||\r\n|[1143117](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143117)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1143117\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31518674\u0026resultId=101929)||\r\n|[1141974](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141974)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141974\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31476986\u0026resultId=101101)||\r\n|[1141970](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141970)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141970\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31476960\u0026resultId=100171)||\r\n|[1141445](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141445)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141445\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31456366\u0026resultId=100158)||\r\n|[1141436](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141436)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141436\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31456258\u0026resultId=102096)||\r\n|[1141152](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141152)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141152\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31446078\u0026resultId=101077)||\r\n|[1141151](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141151)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141151\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31446036\u0026resultId=102259)||\r\n|[1140295](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140295)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140295\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31418920\u0026resultId=100234)||\r\n|[1140288](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140288)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1140288\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31418748\u0026resultId=100099)||\r\n|[1139222](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139222)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139222\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31386664\u0026resultId=102151)||\r\n|[1139221](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139221)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139221\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31386572\u0026resultId=102092)||\r\n|[1138167](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138167)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138167\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31348564\u0026resultId=100234)||\r\n|[1138166](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138166)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1138166\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31348546\u0026resultId=102134)||\r\n|[1136940](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136940)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136940\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31306858\u0026resultId=102098)||\r\n|[1136951](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136951)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136951\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31306822\u0026resultId=100134)||\r\n|[1136308](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136308)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136308\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31285126\u0026resultId=101982)||\r\n|[1136306](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136306)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136306\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31285108\u0026resultId=102172)||\r\n|[1135837](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135837)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135837\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31268798\u0026resultId=100190)||\r\n|[1135836](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135836)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135836\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31268776\u0026resultId=100240)||\r\n|[1135590](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135590)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135590\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31259364\u0026resultId=102155)||\r\n|[1135578](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135578)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135578\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31259342\u0026resultId=100210)||\r\n|[1134928](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134928)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134928\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31239796\u0026resultId=102015)||\r\n|[1134930](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134930)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134930\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31239748\u0026resultId=102113)||\r\n|[1133938](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133938)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133938\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31208984\u0026resultId=102084)||\r\n|[1133939](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133939)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133939\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31208970\u0026resultId=102083)||\r\n|[1132987](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132987)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132987\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31177266\u0026resultId=102703)||\r\n|[1132976](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132976)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1132976\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31177244\u0026resultId=100106)||\r\n|[1131991](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131991)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131991\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31146360\u0026resultId=100024)||\r\n|[1131989](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131989)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131989\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31146292\u0026resultId=103912)||\r\n|[1131085](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131085)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131085\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31118868\u0026resultId=100909)||\r\n|[1131087](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131087)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131087\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31118840\u0026resultId=100125)||\r\n|[1130642](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130642)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130642\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31102418\u0026resultId=102147)||\r\n|[1130643](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130643)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130643\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31102394\u0026resultId=102125)||\r\n|[1130392](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130392)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130392\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31093384\u0026resultId=102079)||\r\n|[1130398](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130398)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130398\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31093370\u0026resultId=100170)||\r\n|[1129603](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1129603)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowTitle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1129603\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31073460\u0026resultId=100197)||\r\n|[1129605](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1129605)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1129605\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31073392\u0026resultId=102450)||\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|2|13|61|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhAl8cA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc58NBOC",
                                           "createdAt":  "2024-04-29T22:21:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-29T22:21:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58NCrA",
                                           "createdAt":  "2024-04-29T22:27:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-29T22:27:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BItSA",
                                           "createdAt":  "2024-06-13T18:46:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "removing blocking-clean-ci as this has not failed in 30 days\r\n\r\n24-Hour Hit Count | 7-Day Hit Count | 1-Month Count\r\n-- | -- | --\r\n0 | 0 | 0\r\n",
                                           "updatedAt":  "2024-06-13T18:46:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ECXxw",
                                           "createdAt":  "2024-07-08T20:25:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpwmQw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2024-07-15T11:28:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jozkee",
                                           "body":  "Maybe this error was caused by the new notepad.exe? When its launched, the PID doesn\u0027t match with the PID of the main notepad instance and is also not listed by [`EnumWindows`](https://github.com/dotnet/runtime/blob/8b9ea5e18044e8516060d9883bf3c056da7d687c/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/ProcessManager.Win32.cs#L38).\r\n\r\ncc @dotnet/area-system-diagnostics-process ",
                                           "updatedAt":  "2024-07-08T20:25:30Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[8.0] Test failure in System.Diagnostics.Tests.ProcessTests.MainWindowHandle_GetWithGui_ShouldRefresh_Windows ",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101928",
        "createdAt":  "2024-05-06T17:18:41Z",
        "number":  101928,
        "author":  "LBensman",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-08T18:33:53Z",
        "body":  "### Summary\r\n\r\nPer https://github.com/dotnet/runtime/blob/d099f075e45d2aa6007a22b71b45a08758559f80/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.cs#L893-L919, the closure and disposal of `StandardInput`, `StandardOutput`, and `StandardError` stream is not straight forward, and ownership of said streams depends on the usage of the said streams.\r\n\r\nDocumentation, however, does not reflect this nuanced complexity, leaving the consumer in the dark: the examples of usage appear to be incorrect, leading to potential leak and exhaustion of resources.\r\n\r\n### Specifics\r\n\r\nPer referenced code, including the code comment, it appears that ownership of standard streams depends on if and how such streams were used.  If I read the code comment and referenced code snippet correctly, `Process` instance owns the standard streams, until and unless those streams were used in non-async operation.\u003csup\u003e1\u003c/sup\u003e  So if `.StandardOutput` property is referenced, the caller takes ownership away from Process and assumes the ownership going forward.  If stream is consumed via `BeginOutputReadLines()`, then `Process` retains ownership of stream and responsible for its disposal.\r\n\r\nThe documentation, however, does not reflect this information.  [`Process.StandardOutput` documentation](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.beginoutputreadline?view=net-7.0) does not mention ownership, and perhaps I\u0027m blind to some .NET\u0027s convention, but do look at the example on that very page:\r\n\r\n```C#\r\nusing System;\r\nusing System.IO;\r\nusing System.Diagnostics;\r\n\r\nclass StandardOutputExample\r\n{\r\n    public static void Main()\r\n    {\r\n        using (Process process = new Process())\r\n        {\r\n            process.StartInfo.FileName = \"ipconfig.exe\";\r\n            process.StartInfo.UseShellExecute = false;\r\n            process.StartInfo.RedirectStandardOutput = true;\r\n            process.Start();\r\n\r\n            // Synchronously read the standard output of the spawned process.\r\n            StreamReader reader = process.StandardOutput;\r\n            string output = reader.ReadToEnd();\r\n\r\n            // Write the redirected output to this application\u0027s window.\r\n            Console.WriteLine(output);\r\n\r\n            process.WaitForExit();\r\n        }\r\n\r\n        Console.WriteLine(\"\\n\\nPress any key to exit.\");\r\n        Console.ReadLine();\r\n    }\r\n}\r\n```\r\n\r\nThe line `StreamReader reader = process.StandardOutput;` references the stream, thus taking ownership.  Yet `reader` is not used in `using` auto-disposing construct, nor does example have a call to `reader.Close()` to release the reader.\r\n\r\nThus, it appears that the example in the documentation falls victim to this ambiguity and the example actually has a resource leak due to failure to dispose reader and stream.\r\n\r\nSame for `Error` and `Input` equivalents.\r\n\r\n\u003csup\u003e1\u003c/sup\u003e It\u0027s confusing a bit with modern TPL-based `async` usage -- async here appears to imply `BeginOutputReadLines()` and similar, and not `Stream.ReadAsync()` that most would otherwise understand as asynchronous.\r\n\r\n### Summary of issue and Recommendations\r\n\r\nI can think of few considerations here:\r\n\r\n1. Amend documentation to explicitly clarify ownership rules to reflect code behavior in all relevant documentation pages.\r\n  a. Clarify meaning of asynchronous to be less confusing w.r.t. modern async with TPL -- that TPL async in this context is a _synchronous_ mode access.\r\n3. Review examples and ensure that proper usage is demonstrated in the examples, and examples be free of resource leaks.\r\n4. Reconsider this ownership ambiguity and make `Process` own all of its related resources.  It seems that the streams (and their readers) are intrinsically linked to `Process`, and once `Process` is closed and disposed of, the streams are no longer meaningfull.  It would make sense that `Process` disposal implies standard streams disposal as single coherent operation.  I\u0027m aware that this proposed change may violate existing contracts and may not be feasible (though, as mentioned, if streams are no longer meaningful, it doesn\u0027t seem like it can violate and otherwise valid use case, but I can\u0027t be certain here, so leave it up to you to evaluate this).\r\n\r\n### Scope\r\n\r\nI\u0027ve reviewed code and documentation for releases 7, 8, and 9.  I didn\u0027t review others, but suspect those are affected as well.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhATGfg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc589pn4",
                                           "createdAt":  "2024-05-06T17:19:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-06T17:19:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EBMZ-",
                                           "createdAt":  "2024-07-08T18:33:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "Its very likely number 3 will break something, although, I can\u0027t think of a case where you want to keep holding StandardOutput or StandardError after you are done with the Process.\r\n\r\n@LBensman do you want to go further and edit the documentation? Adding a paragraph in [Remarks](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.standardoutput?view=net-8.0#remarks) should be good to clarify this nuance.",
                                           "updatedAt":  "2024-07-08T18:33:39Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Documentation example for `Process` is incorrect/misleading.",
        "labels":  [
                       "documentation",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101985",
        "createdAt":  "2024-05-07T14:03:15Z",
        "number":  101985,
        "author":  "elijahr2411",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9xyug==",
                          "nodes":  [
                                        {
                                            "content":  "HOORAY",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-05-07T18:31:02Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "msedi",
                                            "createdAt":  "2024-05-08T07:19:58Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "omariom",
                                            "createdAt":  "2024-12-24T04:21:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DirtyBat",
                                            "createdAt":  "2024-12-30T03:52:19Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-05-20T10:10:47Z",
        "body":  "### Background and motivation\n\nCurrently in .NET there is no way to ensure that a child process created through System.Diagnostics.Process is killed when the parent process dies, particularly unexpectedly by a SIGKILL. This proposal creates a simple property in the ProcessStartInfo class that would cause a child process to be killed by the OS in these cases.\n\nOn Linux, this could be done very easily by setting the `PR_SET_PDEATHSIG` flag on the fork using a `prctl()` syscall.\n\nI\u0027m not too well versed with the Windows platform but I believe something with Job Objects is possible.\n\nI\u0027ve named the property `KillOnParentDeath`, this can of course be changed if a better name is thought of\n\n### API Proposal\n\n```csharp\nnamespace System.Diagnostics;\n\npublic partial sealed class ProcessStartInfo\n{\n    public bool KillOnParentDeath { get; set; }\n}\n```\n\n\n### API Usage\n\n```csharp\n// Create a process\nvar proc = new System.Diagnostics.Process();\n\n// Set KillOnParentDeath\nproc.StartInfo.KillOnParentDeath = true;\n\n// If this C# program is then killed for some reason, the child will die with it instead of lingering.\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nNone as far as I\u0027m aware. The default value should of course be `false` to emulate current behavior.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrHuuDw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc59FGPf",
                                           "createdAt":  "2024-05-07T14:03:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-07T14:03:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59FGP0",
                                           "createdAt":  "2024-05-07T14:03:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elijahr2411",
                                           "body":  "Implements #96470",
                                           "updatedAt":  "2024-05-07T14:03:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59Gq9v",
                                           "createdAt":  "2024-05-07T16:55:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODhocvg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-05-08T01:03:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "msedi",
                                                                               "createdAt":  "2024-05-08T07:38:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elijahr2411",
                                                                               "createdAt":  "2024-05-13T16:13:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "SteveSyfuhs",
                                           "body":  "On Windows, the parent process would need to spawn the child process through a Job: https://learn.microsoft.com/en-us/windows/win32/procthread/job-objects. I\u0027ve never understood why this functionality hasn\u0027t been exposed in .NET. It\u0027s certainly very useful, albeit somewhat niche -- though I think that\u0027s actually a chicken and egg problem.",
                                           "updatedAt":  "2024-05-07T16:55:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59rx7C",
                                           "createdAt":  "2024-05-13T19:18:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODi-VDQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elijahr2411",
                                                                               "createdAt":  "2024-05-23T18:45:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Could be a property of System.Diagnostics.ProcessStartInfo instead.  That way, the getter of the property would just read a field and never need any interop calls.",
                                           "updatedAt":  "2024-05-13T19:18:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59r1AU",
                                           "createdAt":  "2024-05-13T19:26:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "On Windows, JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE looks like a way to implement this. Have the parent process create a job object with that limit (and JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK?), never close the job handle, and don\u0027t make the handle inheritable.  Place child processes in that job whenever KillOnParentDeath is true.",
                                           "updatedAt":  "2024-05-13T19:26:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FI4mC",
                                           "createdAt":  "2024-07-17T16:16:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Currently, on Windows .NET is using following sys-calls to start a process:\r\n\r\nhttps://github.com/dotnet/runtime/blob/66ae90f3b7ec4f13fffcd71913eca0b45777e58c/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Win32.cs#L156\r\n\r\nhttps://github.com/dotnet/runtime/blob/66ae90f3b7ec4f13fffcd71913eca0b45777e58c/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs#L556\r\n\r\nUsing JOB APIs makes sense, but we would need to ensure that all properties exposed by `ProcessStartInfo` are respected and supported when this API is used. Before we make any progress with this proposal, somebody needs to verify whether this is possible. I currently don\u0027t have any free cycles and the best I can do right now is to mark it as \"help wanted\" hoping that somebody will provide a working prototype. If this happens, I am going to change the API proposal to extend `ProcessStartInfo` with a new property and present it to the API review board. ",
                                           "updatedAt":  "2024-07-17T16:16:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FJMCS",
                                           "createdAt":  "2024-07-17T17:02:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  ".NET also uses CreateProcess, when ProcessStartInfo.UserName is empty: \u003chttps://github.com/dotnet/runtime/blob/66ae90f3b7ec4f13fffcd71913eca0b45777e58c/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs#L584\u003e\r\n\r\nFor CreateProcessWithLogonW or CreateProcess on Windows 10, I believe the new process can be atomically made a member of a job, via STARTUPINFOEXW::lpAttributeList and UpdateProcThreadAttribute PROC_THREAD_ATTRIBUTE_JOB_LIST.\r\n\r\nShellExecuteExW doesn\u0027t take a STARTUPINFOEXW structure, and SHELLEXECUTEINFOW doesn\u0027t have a similar feature.  One can set the SEE_MASK_FLAG_HINST_IS_SITE flag and provide an ICreatingProcess implementation, but ICreateProcessInputs doesn\u0027t support setting a job handle.\r\n\r\nIt would be possible to read SHELLEXECUTEINFOW::hProcess after ShellExecuteExW finishes, and call AssignProcessToJobObject then.  However:\r\n\r\n- If the child process already started grandchild processes, then those would not be assigned to the job.  That could perhaps be prevented with ICreateProcessInputs::AddCreateFlags(CREATE_SUSPENDED) but that seems likely to cause worse problems, e.g. if ShellExecuteEx waits for the process to do something.\r\n- If Windows already assigned the child process to a job for application compatibility purposes, then AssignProcessToJobObject would fail.  What would .NET do then -- terminate the child process right away?\r\n- If ShellExecuteExW notified an existing process instead of starting a new one, then no process handle is available.  That can\u0027t be helped.\r\n\r\nA more robust solution might be to start a shim child process with CreateProcess, assign it to a job, and have it call ShellExecuteExW to start the program specified in ProcessStartInfo.  That would however require an executable for the shim process, likely also an MSBuild property for configuring whether to publish that shim with the application.\r\n\r\nI feel it would be better to make Process.Start throw if ProcessStartInfo requests both UseShellExecute and KillOnParentDeath.",
                                           "updatedAt":  "2024-07-17T17:02:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YntHn",
                                           "createdAt":  "2024-12-24T02:17:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elijahr2411",
                                           "body":  "I\u0027ve modified the proposal to reflect that `ProcessStartInfo` should be the class extended.",
                                           "updatedAt":  "2024-12-24T02:17:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6se64P",
                                           "createdAt":  "2025-05-20T10:10:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "taspeotis",
                                           "body":  "I had a similar problem - but only for Windows - and I\u0027ve made a library that does the necessary PInvoke bits to achieve it.\n\nhttps://github.com/taspeotis/ProcThreadAttributeJobListDotNet\n\nThe intended usage is `JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE ` combined with `PROC_THREAD_ATTRIBUTE_JOB_LIST` to atomically create the process in the job.",
                                           "updatedAt":  "2025-05-20T10:10:46Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "[API Proposal]: Kill System.Diagnostics.Process on parent death",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Process",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102766",
        "createdAt":  "2024-05-28T15:16:22Z",
        "number":  102766,
        "author":  "am11",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-22T11:02:15Z",
        "body":  "Currently, this API throws if the process is not self or a child of current process.\r\n\r\n`System.InvalidOperationException: Process was not started by this object, so requested information cannot be determined.`\r\n\r\nOther tools, such as `ps(1)`, provide information about the process in a \"best effort\" manner, e.g.\r\n\r\n```sh\r\n#!/bin/sh\r\n\r\nps ax -o pid,comm,args | while read pid comm args; do\r\n  if [ \"$pid\" = 1 ]; then\r\n    printf \u0027%s\\t%s\\t%s\\n\u0027 \"$pid\" \"$comm\" \"$args\"\r\n  fi\r\ndone\r\n```\r\n\r\ngives info about the init process on Linux, macOS and FreeBSD alike, regardless of the current user privileges. In contrast, while this program will output the process name of the non-self, non-children processes:\r\n\r\n```c#\r\nProcess process = Process.GetProcessById(1);\r\nConsole.WriteLine(process.ProcessName);\r\n```\r\n\r\nwe cannot get the process path or arguments which `ps(1)` offers.\r\n\r\nps: there is a macOS-sepcific quirk that we can use `process.MainModule.FullName` to find the path, but MainModule is null for \"not owned by us\" process on Linux and FreeBSD\r\n\r\n---\r\n\r\nFWIW, I was trying to make this implementation of UnixInitSystem detection robust for case where multiple init systems are installed (and one of them is active); using `Process`:\r\n\r\n```c#\r\nusing System;\r\nusing System.IO;\r\n\r\nUnixInitSystem initSystem = InitSystemDetector.Detect();\r\nConsole.WriteLine($\"Init system detected: {initSystem}\");\r\n\r\n/// \u003csummary\u003e\r\n/// Represents the different types of Unix initialization (init) systems.\r\n/// \u003c/summary\u003e\r\npublic enum UnixInitSystem\r\n{\r\n    /// \u003csummary\u003e\r\n    /// Init system could not be determined, possibly in a container environment.\r\n    /// \u003c/summary\u003e\r\n    Unknown,\r\n    \r\n    /// \u003csummary\u003e\r\n    /// BSD-style init system.\r\n    /// \u003c/summary\u003e\r\n    BSD,\r\n    \r\n    /// \u003csummary\u003e\r\n    /// BusyBox init system.\r\n    /// \u003c/summary\u003e\r\n    BusyBox,\r\n    \r\n    /// \u003csummary\u003e\r\n    /// EInit init system.\r\n    /// \u003c/summary\u003e\r\n    EInit,\r\n    \r\n    /// \u003csummary\u003e\r\n    /// Launchd init system (macOS).\r\n    /// \u003c/summary\u003e\r\n    Launchd,\r\n    \r\n    /// \u003csummary\u003e\r\n    /// Monit process supervision.\r\n    /// \u003c/summary\u003e\r\n    Monit,\r\n    \r\n    /// \u003csummary\u003e\r\n    /// Mudar init system.\r\n    /// \u003c/summary\u003e\r\n    Mudar,\r\n    \r\n    /// \u003csummary\u003e\r\n    /// OpenRC init system.\r\n    /// \u003c/summary\u003e\r\n    OpenRC,\r\n    \r\n    /// \u003csummary\u003e\r\n    /// Runit init system.\r\n    /// \u003c/summary\u003e\r\n    Runit,\r\n    \r\n    /// \u003csummary\u003e\r\n    /// Service Management Facility, Solaris.\r\n    /// \u003c/summary\u003e\r\n    SMF,\r\n    \r\n    /// \u003csummary\u003e\r\n    /// Systemd init system.\r\n    /// \u003c/summary\u003e\r\n    Systemd,\r\n    \r\n    /// \u003csummary\u003e\r\n    /// System V init system.\r\n    /// \u003c/summary\u003e\r\n    SystemV,\r\n    \r\n    /// \u003csummary\u003e\r\n    /// Upstart init system.\r\n    /// \u003c/summary\u003e\r\n    Upstart\r\n}\r\n\r\n/// \u003csummary\u003e\r\n/// Provides functionality to detect the Unix initialization (init) system.\r\n/// \u003c/summary\u003e\r\npublic static class InitSystemDetector\r\n{\r\n    /// \u003csummary\u003e\r\n    /// Detects the Unix init system currently in use.\r\n    /// \u003c/summary\u003e\r\n    /// \u003creturns\u003e\r\n    /// A \u003csee cref=\"UnixInitSystem\"/\u003e value representing the detected init system.\r\n    /// \u003c/returns\u003e\r\n    public static UnixInitSystem Detect()\r\n    {\r\n        if (File.Exists(\"/sbin/einit\") || File.Exists(\"/etc/einit/einit.conf\"))\r\n        {\r\n            return UnixInitSystem.EInit;\r\n        }\r\n\r\n        if (File.Exists(\"/etc/rc\") \u0026\u0026 File.Exists(\"/etc/rc.subr\"))\r\n        {\r\n            return UnixInitSystem.BSD;\r\n        }\r\n\r\n        if (File.Exists(\"/sbin/init\") \u0026\u0026 new FileInfo(\"/sbin/init\").LinkTarget == \"/bin/busybox\")\r\n        {\r\n            return UnixInitSystem.BusyBox;\r\n        }\r\n\r\n        if (File.Exists(\"/sbin/launchd\") \u0026\u0026 Directory.Exists(\"/Library/LaunchDaemons\"))\r\n        {\r\n            return UnixInitSystem.Launchd;\r\n        }\r\n\r\n        if (File.Exists(\"/etc/monitrc\") || Directory.Exists(\"/etc/monit.d\"))\r\n        {\r\n            return UnixInitSystem.Monit;\r\n        }\r\n\r\n        if (File.Exists(\"/sbin/mudar\"))\r\n        {\r\n            return UnixInitSystem.Mudar;\r\n        }\r\n\r\n        if (Directory.Exists(\"/etc/init.d\") \u0026\u0026 File.Exists(\"/sbin/openrc-init\"))\r\n        {\r\n            return UnixInitSystem.OpenRC;\r\n        }\r\n\r\n        if (Directory.Exists(\"/etc/sv\") \u0026\u0026 Directory.Exists(\"/etc/service\") \u0026\u0026 File.Exists(\"/sbin/runsvdir\"))\r\n        {\r\n            return UnixInitSystem.Runit;\r\n        }\r\n\r\n        if (Directory.Exists(\"/lib/svc\") \u0026\u0026 File.Exists(\"/usr/sbin/svcadm\"))\r\n        {\r\n            return UnixInitSystem.SMF;\r\n        }\r\n\r\n        if (Directory.Exists(\"/run/systemd/system\") \u0026\u0026 File.Exists(\"/sbin/init\") \u0026\u0026 File.ReadAllText(\"/proc/1/comm\").Trim() == \"systemd\")\r\n        {\r\n            return UnixInitSystem.Systemd;\r\n        }\r\n\r\n        if (File.Exists(\"/sbin/init\") \u0026\u0026 File.Exists(\"/etc/inittab\"))\r\n        {\r\n            return UnixInitSystem.SystemV;\r\n        }\r\n\r\n        if (File.Exists(\"/sbin/initctl\") \u0026\u0026 Directory.Exists(\"/etc/init\"))\r\n        {\r\n            return UnixInitSystem.Upstart;\r\n        }\r\n\r\n        return UnixInitSystem.Unknown;\r\n    }\r\n}\r\n```\r\n\r\nguess I can shell out to `ps(1)` directly for this.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhaylDQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5_SQhU",
                                           "createdAt":  "2024-05-28T15:16:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-serviceprocess\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-28T15:16:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FBswm",
                                           "createdAt":  "2024-07-16T20:57:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-16T20:57:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FH9T2",
                                           "createdAt":  "2024-07-17T14:23:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Triage: If it\u0027s possible to provide more information rather than just throw, we should improve our implementation and just do that.  Since I have no free cycles right now the best I can do is to mark it as \"help wanted\".",
                                           "updatedAt":  "2024-07-17T14:23:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FpYHj",
                                           "createdAt":  "2024-07-22T06:51:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "The current design is that `ProcessStartInfo` gathers the information needed to start a process, and information about a running process is retrieved through properties of the `Process` class. I think we should stick to those responsibilities.\r\n\r\n@am11 what information do you need that is currently not accessible through `Process` properties. I assume it is mostly about arguments? What could the API look like on the `Process` class?\r\n\r\n\u003e ps: there is a macOS-sepcific quirk that we can use process.MainModule.FullName to find the path, but MainModule is null for \"not owned by us\" process on Linux and FreeBSD\r\n\r\nShould/can we address this?",
                                           "updatedAt":  "2024-07-22T06:51:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Fp3P0",
                                           "createdAt":  "2024-07-22T08:07:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e The current design is that `ProcessStartInfo` gathers the information needed to start a process, and information about a running process is retrieved through properties of the `Process` class. I think we should stick to those responsibilities.\r\n\r\n`ProcessStartInfo StartInfo` is also a property on `Process` class. Eagerly throwing exception where OS and other tools have no problem, is not a sound design worth defending. I think if we can improve it, we should.",
                                           "updatedAt":  "2024-07-22T08:07:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FqWeT",
                                           "createdAt":  "2024-07-22T09:12:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "Currently `ProcessStartInfo` works as an argument list for `Start` and it can only be retrieved if the process was started by the `Process` instance. The semantics are clear.\r\n\r\nI think it would be good to understand what information users are looking for and how well we can support it on different OSes. Then we can know if `ProcessStartInfo` is a good fit.",
                                           "updatedAt":  "2024-07-22T09:12:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FqlRO",
                                           "createdAt":  "2024-07-22T09:42:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e I think it would be good to understand what information users are looking for and how well we can support it on different OSes. Then we can know if `ProcessStartInfo` is a good fit.\r\n\r\nI was seeking the name and arguments of external process (pid:1 `init` in my case). If certain information is inaccessible on a platform, the corresponding API should throw an exception, as it currently does. This issue might also occur if the user is running the app in a resource-restricted environment on a platform that typically supports accessing the information. Therefore, handling this at runtime on a best-effort basis is the appropriate approach.",
                                           "updatedAt":  "2024-07-22T09:42:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Fqm55",
                                           "createdAt":  "2024-07-22T09:45:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e ps: there is a macOS-sepcific quirk that we can use process.MainModule.FullName to find the path, but MainModule is null for \"not owned by us\" process on Linux and FreeBSD\r\n\r\nIf Linux would behave similar to macOS, you\u0027d be able to do what you need?",
                                           "updatedAt":  "2024-07-22T09:45:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FrKUN",
                                           "createdAt":  "2024-07-22T11:02:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Yup, it seems `ps ax -o pid,comm,args` is returning the expected values so if we can make it return the process path and arguments (when possible) that would be enough.  macOS also return process path and arguments, but we currently throw from `StartInfo.Arguments`:\r\n\r\n```sh\r\n$ uname -a\r\nDarwin 87-92-225-103.rev.dnainternet.fi 23.5.0 Darwin Kernel Version 23.5.0: Wed May  1 20:12:58 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6000 arm64\r\n\r\n$  ps ax -o pid,comm,args | while read pid comm args; do\r\n  if [ \"$pid\" = 1 ]; then\r\n    printf \u0027%s\\t%s\\t%s\\n\u0027 \"$pid\" \"$comm\" \"$args\"\r\n  fi\r\ndone\r\n\r\n1\t/sbin/launchd\t/sbin/launchd\r\n```\r\nvs.\r\n```sh\r\n$ cat Program.cs\r\nusing System.Diagnostics;\r\n\r\nProcess initProcess = Process.GetProcessById(1);\r\nConsole.WriteLine($\"ProcessPath: {initProcess.MainModule?.FileName}\");\r\nConsole.WriteLine($\"ArgumentsLength: {initProcess.StartInfo.Arguments.Length}\");\r\n\r\n$ dotnet run\r\nProcessPath: /sbin/launchd\r\nUnhandled exception. System.InvalidOperationException: Process was not started by this object, so requested information cannot be determined.\r\n   at System.Diagnostics.Process.get_StartInfo()\r\n   at Program.\u003cMain\u003e$(String[] args) in /Users/am11/projects/startinfo-shenanigans/Program.cs:line 5\r\n```",
                                           "updatedAt":  "2024-07-22T11:02:13Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Suggestion: make Process.StartInfo a best-effort API",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103384",
        "createdAt":  "2024-06-13T00:02:54Z",
        "number":  103384,
        "author":  "styris-ame",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-28T20:33:41Z",
        "body":  "### Description\r\n\r\nWhen using output redirection, along with the start command, `WaitForExit()` does not properly detect the exit.\r\n\r\nSee the following code:\r\n```C#\r\nprocess.StartInfo = new ProcessStartInfo()\r\n{\r\n    FileName = \"cmd.exe\",\r\n    Arguments = \"/C \" + $\"\\\"start cmd /c \\\"echo test \u0026\u0026 timeout /t 3\\\"\\\"\",\r\n    UseShellExecute = false,\r\n    RedirectStandardError = true,\r\n    RedirectStandardOutput = true,\r\n    CreateNoWindow = true\r\n};\r\n\r\nprocess.OutputDataReceived += ProcessOnOutputDataReceived;\r\nprocess.ErrorDataReceived += ProcessOnErrorDataReceived;\r\n\r\n_stopwatch.Start();\r\n\r\nConsole.WriteLine(\"Starting process...\");\r\n\r\nprocess.Start();\r\nprocess.BeginOutputReadLine();\r\nprocess.BeginErrorReadLine();\r\n\r\nprocess.WaitForExit();\r\n\r\nConsole.WriteLine($\"Process exited: {_stopwatch.ElapsedMilliseconds}\");\r\nConsole.ReadLine();\r\n```\r\n\r\nThe output is as follows:\r\n```\r\nStarting process...\r\nOUT (3062): NULL\r\nERR (3062): NULL\r\nProcess exited: 3062\r\n```\r\n\r\nYou can see that it waits for the second 3 second cmd process finishes, even though it should return immediately after the original cmd.exe exits.\r\n\r\nHowever, if either a timeout is provided to `WaitForExit`, or redirection is not enabled, it will return as expected:\r\n```C#\r\nprocess.WaitForExit(60000);\r\n```\r\nOutput:\r\n```\r\nStarting process...\r\nProcess exited: 26\r\nERR (3171): NULL\r\nOUT (3171): NULL\r\n```\r\n\r\nNote that the output still does not return null until the second cmd process exits.\r\n\r\n### Reproduction Steps\r\n\r\n```C#\r\npublic static void Run()\r\n{\r\n    var process = new Process();\r\n    process.StartInfo = new ProcessStartInfo()\r\n    {\r\n        FileName = \"cmd.exe\",\r\n        Arguments = \"/C \" + $\"\\\"start cmd /c \\\"echo test \u0026\u0026 timeout /t 3\\\"\\\"\",\r\n        UseShellExecute = false,\r\n        RedirectStandardError = true,\r\n        RedirectStandardOutput = true,\r\n        CreateNoWindow = true\r\n    };\r\n    process.OutputDataReceived += ProcessOnOutputDataReceived;\r\n    process.ErrorDataReceived += ProcessOnErrorDataReceived;\r\n    \r\n    var stopwatch = new Stopwatch();\r\n    stopwatch.Start();\r\n\r\n    Console.WriteLine(\"Starting process...\");\r\n\r\n    process.Start();\r\n    process.BeginOutputReadLine();\r\n    process.BeginErrorReadLine();\r\n    \r\n    process.WaitForExit();\r\n    \r\n    Console.WriteLine($\"Process exited: {stopwatch.ElapsedMilliseconds}\");\r\n    Console.ReadLine();\r\n}\r\nprivate static void ProcessOnErrorDataReceived(object sender, DataReceivedEventArgs e)\r\n{\r\n    Console.WriteLine(\"ERR: \" + (e.Data ?? \"NULL\"));\r\n}\r\n\r\nprivate static void ProcessOnOutputDataReceived(object sender, DataReceivedEventArgs e)\r\n{\r\n    Console.WriteLine(\"OUT: \" + (e.Data ?? \"NULL\"));\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\n`WaitForExit()` should return once the first cmd process exits, and likewise OutputDataReceived/ErrorDataReceived should send null.\r\n\r\n### Configuration\r\n\r\nWindows 11 x64\r\n.NET 8.0",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgP23tA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6A_be0",
                                           "createdAt":  "2024-06-13T00:03:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-13T00:03:21Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Unexpected WaitForExit behavior when using cmd.exe with the start command",
        "labels":  [
                       "bug",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104210",
        "createdAt":  "2024-06-30T11:51:32Z",
        "number":  104210,
        "author":  "dpeter99",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODQuMIg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ciao1092",
                                            "createdAt":  "2025-03-29T17:03:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ChristophHornung",
                                            "createdAt":  "2025-05-20T08:40:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KDsMoped",
                                            "createdAt":  "2025-09-15T20:07:09Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-07-19T10:57:25Z",
        "body":  "### Description\r\n\r\nI\u0027m trying to start a new Process in a multiplatform way (Win and Linux) and make the new process not a child process of the running C# App.\r\n\r\nI found this code snippet online for running a process as non-child:\r\n```csharp\r\nProcessStartInfo psi = new ProcessStartInfo(\"YourExecutable.exe\");\r\npsi.UseShellExecute = true;\r\nProcess.Start(psi);\r\n```\r\n\r\nThis still spawns the new process as a child process.\r\n\r\nAfter a lot of searching, I ended up with this setup:\r\n```csharp\r\nvar linux = new ProcessStartInfo(\"/usr/bin/sh\", new []\r\n{\r\n    \"-c\",\r\n    \"nohup /usr/bin/java\"+\r\n    \" -Xmx1024M\" +\r\n    \" -Xms1024M\" +\r\n    \" -jar \" +\r\n     _serverJar.FullName +\r\n    \"\" +\r\n    \" \u0026\"\r\n})\r\n{\r\n     WorkingDirectory = _serverFolder.FullName,\r\n     UseShellExecute = true,\r\n};\r\n```\r\n\r\nHowever, this is not easily portable and requires the actual arguments to be already concatenated, which makes some mistakes possible.\r\n\r\nWith this workaround, we also lose the PID of the new process which is a must in my use case.\r\n\r\n### Reproduction Steps\r\n\r\nTry to use the first example to spawn a new process as non-child, on a Linux system.\r\n\r\n### Expected behavior\r\n\r\nThere should be an easy way to run a process as non-child that works on all platforms.\r\n\r\n### Actual behavior\r\n\r\nThe spawned process is a child of the app and is terminated when the c# app exits.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nIt is possible to call ``/bin/sh`` with the ``nohup`` and ``\u0026`` to instruct it to make a new detached process, but this is not a portable setup.\r\n\r\n### Configuration\r\n\r\n.NET 8\r\nLinux (Fedora 40)\r\nx64\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhXLOBg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6DKZ9Q",
                                           "createdAt":  "2024-07-01T16:05:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e The spawned process is a child of the app and is terminated when the c# app exits.\r\n\r\nWhat terminates it?",
                                           "updatedAt":  "2024-07-01T16:05:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DRAm0",
                                           "createdAt":  "2024-07-02T08:14:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dpeter99",
                                           "body":  "\u003e What terminates it?\r\n\r\nThe operating system. ",
                                           "updatedAt":  "2024-07-02T08:14:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DTgOO",
                                           "createdAt":  "2024-07-02T11:41:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I\u0027d expect the child process to be reparented to PID 1 (init) and continue running.\n\nHow do you start your C# app?  If you start it from a terminal emulator and close the window, then that could cause a SIGHUP to be sent to the processes using that tty, including the child process of your app.  Or do you start the app from cron?",
                                           "updatedAt":  "2024-07-02T11:41:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DWiLb",
                                           "createdAt":  "2024-07-02T16:13:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dpeter99",
                                           "body":  "I tested when starting from Rider IDE, and stopped the app in 3 ways:\r\n- Rider stop button\r\n- Let the app exit without doing any await on the Process\r\n- Sending SIGKILL from htop\r\nAnd all of these resulted in the new Process closing\r\nIn my use case, the started \"child\" process must survive any way the c# app might close/crash",
                                           "updatedAt":  "2024-07-02T16:13:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FACyb",
                                           "createdAt":  "2024-07-16T16:45:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@dpeter99 thank you for your proposal. For now I\u0027ll wait until more customers express the need for such API.",
                                           "updatedAt":  "2024-07-16T16:45:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FcS0j",
                                           "createdAt":  "2024-07-19T09:43:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dpeter99",
                                           "body":  "@adamsitnik \r\nWhat about fixing the UseShellExecute, or do you have any suggestions on how to do it?",
                                           "updatedAt":  "2024-07-19T09:43:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Fcs4G",
                                           "createdAt":  "2024-07-19T10:52:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I don\u0027t believe UseShellExecute is intended to prevent the new process from being a child of the calling process.  Rather, it is a way to start things that are not executable files, such as document files and URLs.",
                                           "updatedAt":  "2024-07-19T10:52:26Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Starting new Process as not child of the application",
        "labels":  [
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105090",
        "createdAt":  "2024-07-18T14:36:39Z",
        "number":  105090,
        "author":  "MichalPetryka",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-18T14:40:01Z",
        "body":  "### Description\n\nAccessing `MainModule` after process exit throws an exception that [doesn\u0027t match the documentation](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.mainmodule?view=net-8.0#exceptions). The code should either be changed to detect that case or the docs should be changed.\n\n### Reproduction Steps\n\n```cs\r\nusing Process process = Process.GetProcessById(someId);\r\n_ = process.Handle;\r\nprocess.WaitForExit();\r\nConsole.WriteLine(process.ExitCode);\r\nConsole.WriteLine(process.MainModule?.FileName ?? \"null\");\r\n```\n\n### Expected behavior\n\nThrows `InvalidOperationException` as per [docs](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.mainmodule?view=net-8.0#exceptions).\n\n### Actual behavior\n\nThrows:\r\n```\r\nUnhandled exception. System.ComponentModel.Win32Exception (299): Only part of a ReadProcessMemory or WriteProcessMemory request was completed.\r\n   at System.Diagnostics.NtProcessManager.EnumProcessModulesUntilSuccess(SafeProcessHandle, IntPtr[], Int32, Int32\u0026, Int32) + 0x91\r\n   at System.Diagnostics.NtProcessManager.GetModules(Int32, Boolean) + 0x110\r\n   at System.Diagnostics.NtProcessManager.GetFirstModule(Int32) + 0xf\r\n```\n\n### Regression?\n\nNot sure.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nWindows 10.0.19045 X64\r\n.NET 9\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhVIiFw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6FUgmX",
                                           "createdAt":  "2024-07-18T14:37:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-18T14:37:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FUhwn",
                                           "createdAt":  "2024-07-18T14:39:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The docs here should likely be changed to just say something like `Win32Exception: An error occurred during the native system call to query process information`\r\n\r\nThere is no way to document all potential cases that native errors for and those can expand over time based on changes that are outside the control of .NET",
                                           "updatedAt":  "2024-07-18T14:39:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FUiIX",
                                           "createdAt":  "2024-07-18T14:39:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "I agree with @tannergooding , we should update the docs.",
                                           "updatedAt":  "2024-07-18T14:39:59Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "`process.MainModule` throws `Win32Exception` instead of `InvalidOperationException` when process has exited in some cases",
        "labels":  [
                       "documentation",
                       "area-System.Diagnostics.Process",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105526",
        "createdAt":  "2024-07-26T00:06:37Z",
        "number":  105526,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:01:59Z",
        "body":  "```\r\n    System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty [FAIL]\r\n      Assert.Single() Failure: The collection did not contain any matching items\r\n      Expected:   (predicate expression)\r\n      Collection: [System.Diagnostics.ProcessThread, System.Diagnostics.ProcessThread, System.Diagnostics.ProcessThread, System.Diagnostics.ProcessThread, System.Diagnostics.ProcessThread, ···]\r\n      Stack Trace:\r\n        /_/src/libraries/System.Diagnostics.Process/tests/ProcessThreadTests.cs(156,0): at System.Diagnostics.Tests.ProcessThreadTests.\u003c\u003ec__DisplayClass4_2.\u003cTestStartTimeProperty\u003eb__0()\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs(2396,0): at System.Threading.Tasks.Task.InnerInvoke()\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs(2384,0): at System.Threading.Tasks.Task.\u003c\u003ec.\u003c.cctor\u003eb__292_0(Object obj)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs(179,0): at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n        --- End of stack trace from previous location ---\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/ExecutionContext.cs(203,0): at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs(2342,0): at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task\u0026 currentTaskSlot, Thread threadPoolThread)\r\n        --- End of stack trace from previous location ---\r\n        /_/src/libraries/System.Diagnostics.Process/tests/ProcessThreadTests.cs(149,0): at System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty()\r\n        --- End of stack trace from previous location ---\r\n```\r\n\r\n## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=755830\r\nBuild error leg or test failing: System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty\r\nPull request: https://github.com/dotnet/runtime/pull/105519\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": [\"System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty [FAIL]\",\"The collection did not contain any matching items\"],\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=755830\r\n**Error message validated:** `[System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty [FAIL] The collection did not contain any matching items`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 7/26/2024 12:06:54 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1153281](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153281)|dotnet/runtime|[System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153281\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31856738\u0026resultId=128481)|dotnet/runtime#118941|\r\n|[1145589](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145589)|dotnet/runtime|[System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145589\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31606222\u0026resultId=103908)|dotnet/runtime#119077|\r\n|[1144366](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144366)|dotnet/runtime|[System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144366\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31561378\u0026resultId=119145)|dotnet/runtime#119385|\r\n|[1142999](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1142999)|dotnet/runtime|[System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1142999\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31513508\u0026resultId=125481)|dotnet/runtime#119459|\r\n|[1139751](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139751)|dotnet/runtime|[System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139751\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31399516\u0026resultId=124139)|dotnet/runtime#119288|\r\n|[1139543](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139543)|dotnet/runtime|[System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1139543\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31393824\u0026resultId=115967)|dotnet/runtime#119357|\r\n|[1136635](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136635)|dotnet/runtime|[System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136635\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31294720\u0026resultId=128158)|dotnet/runtime#119253|\r\n|[1136465](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136465)|dotnet/runtime|[System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1136465\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31289064\u0026resultId=122332)||\r\n|[1135925](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135925)|dotnet/runtime|[System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1135925\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31270618\u0026resultId=120751)||\r\n|[1134661](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134661)|dotnet/runtime|[System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134661\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31227828\u0026resultId=127053)|dotnet/runtime#118224|\r\n|[1133602](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133602)|dotnet/runtime|[System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133602\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31195036\u0026resultId=105636)|dotnet/runtime#119124|\r\n|[1133423](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133423)|dotnet/runtime|[System.Diagnostics.Tests.ProcessThreadTests.TestStartTimeProperty](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1133423\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31190008\u0026resultId=117770)|dotnet/runtime#117502|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|1|12|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhoGPbw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6GNMQ3",
                                           "createdAt":  "2024-07-26T00:07:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-26T00:07:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ge7eG",
                                           "createdAt":  "2024-07-29T15:34:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "https://github.com/dotnet/runtime/pull/104972 was an attempt to fix it but looks like ProcessInfo.Threads is not being Refresh()\u0027d properly.",
                                           "updatedAt":  "2024-07-29T15:34:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GgY9v",
                                           "createdAt":  "2024-07-29T18:33:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "I wonder why it fails only on Mono?",
                                           "updatedAt":  "2024-07-29T18:33:56Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "ProcessThreadTests.TestStartTimeProperty failure in CI",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "blocking-clean-ci",
                       "runtime-mono",
                       "needs-further-triage",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105665",
        "createdAt":  "2024-07-29T23:49:31Z",
        "number":  105665,
        "author":  "nwoolls",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-10-06T14:02:51Z",
        "body":  "### Description\n\nAccessing `Process.PrivateMemorySize64` on macOS returns `0`. This was initially reported, and fixed, for Linux [here](https://github.com/dotnet/runtime/issues/23284). Follow-up comments mention macOS but the issue was closed.\r\n\r\nThe implementation of `AssertNonZeroAllZeroDarwin` seems to indicate this is acknowledged, if not by-design. But the XML comments for `Process.PrivateMemorySize64` doesn\u0027t mention any such limitation.\r\n\r\nNot sure if this is a bug or feature request, but I\u0027d love to see this implemented for macOS. We\u0027re trying to troubleshoot some memory usage but coming up short in our dev environments because of this.\n\n### Reproduction Steps\n\n```bash\r\nmkdir app-macos-PrivateMemorySize64\r\ncd app-macos-PrivateMemorySize64\r\ndotnet new console\r\n```\r\n\r\n```csharp\r\nusing System.Diagnostics;\r\n\r\nvar process = Process.GetCurrentProcess();\r\nConsole.WriteLine(process.PrivateMemorySize64);\r\n```\r\n\r\n```bash\r\ndotnet run\r\n```\n\n### Expected behavior\n\nOutputs \"the amount of private memory, in bytes, allocated for the associated process\".\n\n### Actual behavior\n\nOutputs `0`.\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\nNone\n\n### Configuration\n\n```bash\r\ndotnet --version\r\n8.0.303\r\n```\r\n\r\n```bash\r\nsw_vers\r\nProductName:\t\tmacOS\r\nProductVersion:\t\t14.5\r\nBuildVersion:\t\t23F79\r\n```\r\n\r\n```bash\r\nuname -a\r\nDarwin nathanialsmbpm2.lan 23.5.0 Darwin Kernel Version 23.5.0: Wed May  1 20:14:38 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6020 arm64\r\n```\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjsdimQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Gijot",
                                           "createdAt":  "2024-07-29T23:49:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-29T23:49:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ox2KZ",
                                           "createdAt":  "2024-10-06T12:59:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ShawnWu33",
                                           "body":  "Hi, did a bit investigation on this. Apology first if the terminologies are not accurate enough as I am new to this community.\r\n## TL;DR\r\nThe private memory size of a process is not exposed in macOS (OSX) SDK, hence the value remains default int value as 0;\r\n\r\n## Investigation details\r\n1. The `Process.PrivateMemorySize64` having a getter function which will first ensure process information being retrieved. https://github.com/dotnet/runtime/blob/112ef3d680c50ae3c64d7c129b658d9cd00a5a3d/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.cs#L494-L501\r\n\r\n2. When process information did not existed, it trigger ProcessManager to retrieve the process information.\r\nhttps://github.com/dotnet/runtime/blob/112ef3d680c50ae3c64d7c129b658d9cd00a5a3d/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.cs#L978-L984\r\n\r\n3. The process manager invoke `Interop.libproc.GetProcessInfoById(pid)` to get process information.https://github.com/dotnet/runtime/blob/112ef3d680c50ae3c64d7c129b658d9cd00a5a3d/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/ProcessManager.OSX.cs#L44 Which eventually hitting macOS libproc API `proc_pidinfo`\r\n https://github.com/dotnet/runtime/blob/112ef3d680c50ae3c64d7c129b658d9cd00a5a3d/src/libraries/Common/src/Interop/OSX/Interop.libproc.GetProcessInfoById.cs#L116\r\n\r\n4. Per macOS libproc header file [proc_info.h](https://opensource.apple.com/source/xnu/xnu-1504.9.17/bsd/sys/proc_info.h.auto.html) (screenshot attached), the response from that API incldues only virtual memory size and resident memory size. Hence the field `PrivateBytes` in ProcessInfo is not assigned, remains default value.\r\n\u003cimg width=\"500\" alt=\"image\" src=\"https://github.com/user-attachments/assets/cf049e18-a22c-498f-869b-9b4667451975\"\u003e\r\n\r\n\r\n## Postscript\r\nThis issue is known from very first commit of ProcessManager.OSX, It is a comment there mentioning fields didn\u0027t being assigned as not available in macOS.\r\n\r\nhttps://github.com/dotnet/runtime/blob/112ef3d680c50ae3c64d7c129b658d9cd00a5a3d/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/ProcessManager.OSX.cs#L69-L75\r\n\r\nSo I don\u0027t see a proper fix available at curren time point.\r\n\r\n",
                                           "updatedAt":  "2024-10-06T14:02:51Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "On macOS `Process.PrivateMemorySize64` returns `0`",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "os-mac-os-x",
                       "help wanted",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105686",
        "createdAt":  "2024-07-30T11:11:43Z",
        "number":  105686,
        "author":  "rzsc",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-30T13:43:26Z",
        "body":  "This issue was created to describe the reason of failure of two corefx tests built for `riscv64` architecture and executed in `QEMU` environment on `x64` architecture:\r\n\r\n- System.Diagnostics.Tests.ProcessTests.TestMaxWorkingSet()\r\n- System.Diagnostics.Tests.ProcessTests.TestMinWorkingSet()\r\n\r\nOn QEMU the method:\r\n\r\n`private static bool Interop.TryReadFile(string path, [NotNullWhen(true)] out string? contents)`\r\n\r\ndefined in:\r\n\r\n`/runtime/src/libraries/Common/src/Interop/Linux/procfs/Interop.ProcFsStat.TryReadStatusFile.cs`\r\n\r\nfor the path parameter equal to \"/proc/pid/stat\", where pid is the process id executed under QEMU emulation, returns string like that:\r\n\r\n`360312 (dotnet) 0 109490 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 274903147680 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0`\r\n\r\nThe 25th value in the string is \"Current soft limit in bytes on the rss of the process\" and equals to zero.\r\n\r\nThe tests expect value to be greater than zero:\r\n```\r\n      Assert.InRange() Failure: Value not in range\r\n      Range:  (1 - 9223372036854775807)\r\n      Actual: 0\r\n```\r\nThe string read by `Interop.TryReadFile()` method on riscv64 VisionFive2 board is:\r\n\r\n```\r\n3179342 (dotnet) R 3179327 3179327 2796412 34817 3179327 4210688 683 0 0 0 2 0 0 0 20 0 6 0 314166288 141225422848 2836 18446744073709551615 183816348496 183816382592 274449615744 0 0 0 0 4096 17662 0 0 0 17 0 0 0 0 0 0 183816392368 183816392480 183816392704 274449616559 274449617226 274449617226 274449620912 0\r\n```\r\nand on x64 architecture is:\r\n\r\n```\r\n360089 (dotnet) R 360072 360072 109490 34820 360072 4194560 849 0 0 0 0 0 0 0 20 0 8 0 20442322 279661006848 3760 18446744073709551615 96971671317360 96971671358672 140724721806640 0 0 0 0 4096 17662 0 0 0 17 12 0 0 0 0 0 96971671368400 96971671368536 96971698143232 140724721812943 140724721813590 140724721813590 140724721815480 0\r\n```\r\nand 25th value is `18446744073709551615` for VF2 board and `18446744073709551615` for x64 architecture.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[RISCV,QEMU] On QEMU reading from /proc/pid/stat file returns strange values",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "arch-riscv"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106595",
        "createdAt":  "2024-08-18T19:29:56Z",
        "number":  106595,
        "author":  "lewing",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:02:09Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=779102\r\nBuild error leg or test failing: System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgram\r\nPull request: https://github.com/dotnet/runtime.git/pull/106571\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgram [FAIL]\",\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=779102\r\n**Error message validated:** `[System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgram [FAIL]`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 8/18/2024 7:30:26 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiOBAdw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6I0IAt",
                                           "createdAt":  "2024-08-18T19:30:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-18T19:30:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6I4EB3",
                                           "createdAt":  "2024-08-19T11:56:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "```log\r\n    System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgram [FAIL]\r\n      Assert.Equal() Failure: Strings differ\r\n                 ↓ (pos 0)\r\n      Expected: \"sleep\"\r\n      Actual:   \".NET Long Runni\"\r\n                 ↑ (pos 0)\r\n      Stack Trace:\r\n        /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs(354,0): at System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgram()\r\n        /_/src/mono/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.Mono.cs(22,0): at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs(57,0): at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```\r\n\r\nMoving to future",
                                           "updatedAt":  "2024-08-19T11:56:51Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgram [FAIL]",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107933",
        "createdAt":  "2024-09-17T17:28:31Z",
        "number":  107933,
        "author":  "carlossanlop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:02:20Z",
        "body":  "## Build Information\r\n\r\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=810754\r\nBuild error leg or test failing: `System.Diagnostics.Tests.ProcessTests.Start_RedirectStandardOutput_StartAgain_DoesntThrow`\r\n\r\n## Error Message\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\" : [\r\n    \"System.Diagnostics.Tests.ProcessTests.Start_RedirectStandardOutput_StartAgain_DoesntThrow [FAIL]\",\r\n    \"Access to the path is denied\",\r\n    \"Bad file descriptor\"\r\n  ],\r\n  \"BuildRetry\" : false,\r\n  \"ExcludeConsoleLog\" : false\r\n}\r\n```\r\n\r\n- PR: Unrelated deps flow PR: https://github.com/dotnet/runtime/pull/107915\r\n- Queue: `Libraries Test Run checked coreclr osx x64 Debug`\r\n- Job result: https://dev.azure.com/dnceng-public/public/_build/results?buildId=810754\u0026view=logs\u0026j=69b60b53-a417-56e9-d4e0-3a40344d5e67\u0026t=5193bee0-1c28-53bc-a56d-6d396c4c4a0d\u0026s=6884a131-87da-5381-61f3-d7acc3b91d76\r\n- Log file: https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-107915-merge-13e7f2ccfab34c04b5/System.Diagnostics.Process.Tests/1/console.9a36f95f.log?helixlogtype=result\r\n- Output:\r\n```\r\n   System.Diagnostics.Tests.ProcessTests.Start_RedirectStandardOutput_StartAgain_DoesntThrow [FAIL]\r\n      System.UnauthorizedAccessException : Access to the path is denied.\r\n      ---- System.IO.IOException : Bad file descriptor\r\n      Stack Trace:\r\n        /_/src/libraries/System.IO.Pipes/src/System/IO/Pipes/PipeStream.Unix.cs(468,0): at System.IO.Pipes.PipeStream.CheckPipeCall(Int32 result)\r\n        /_/src/libraries/System.IO.Pipes/src/System/IO/Pipes/PipeStream.Unix.cs(235,0): at System.IO.Pipes.PipeStream.ValidateHandleIsPipe(SafePipeHandle safePipeHandle)\r\n        /_/src/libraries/System.IO.Pipes/src/System/IO/Pipes/AnonymousPipeClientStream.cs(67,0): at System.IO.Pipes.AnonymousPipeClientStream.Init(PipeDirection direction, SafePipeHandle safePipeHandle)\r\n        /_/src/libraries/System.IO.Pipes/src/System/IO/Pipes/AnonymousPipeClientStream.cs(60,0): at System.IO.Pipes.AnonymousPipeClientStream..ctor(PipeDirection direction, SafePipeHandle safePipeHandle)\r\n        /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs(849,0): at System.Diagnostics.Process.OpenStream(Int32 fd, PipeDirection direction)\r\n        /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs(476,0): at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)\r\n        /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.cs(1284,0): at System.Diagnostics.Process.Start()\r\n        /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs(1601,0): at System.Diagnostics.Tests.ProcessTests.Start_RedirectStandardOutput_StartAgain_DoesntThrow()\r\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs(48,0): at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n        ----- Inner Stack Trace -----\r\n```\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=810754\r\n**Error message validated:** `[System.Diagnostics.Tests.ProcessTests.Start_RedirectStandardOutput_StartAgain_DoesntThrow [FAIL] Access to the path is denied Bad file descriptor`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 9/17/2024 5:28:49 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnReFwQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6MdXgv",
                                           "createdAt":  "2024-09-17T17:28:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-17T17:28:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dF4XB",
                                           "createdAt":  "2025-02-05T02:29:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20250202.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=937922\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24879392\u0026resultId=154122\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-arm-jitstress1_tiered-(Debian.12.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-12-helix-arm32v7\n    - System.Diagnostics.Tests.ProcessTests.Start_RedirectStandardOutput_StartAgain_DoesntThrow\n```\n\n**Error message:**\n```\n System.UnauthorizedAccessException : Access to the path is denied.\n---- System.IO.IOException : Bad file descriptor\n```\n\n**Stack trace:**\n```\n   at System.IO.Pipes.PipeStream.ValidateHandleIsPipe(SafePipeHandle safePipeHandle) in /_/src/libraries/System.IO.Pipes/src/System/IO/Pipes/PipeStream.Unix.cs:line 235\n   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 476\n   at System.Diagnostics.Process.Start() in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.cs:line 1284\n   at System.Diagnostics.Tests.ProcessTests.Start_RedirectStandardOutput_StartAgain_DoesntThrow() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.cs:line 1601\n   at System.RuntimeMethodHandle.InvokeMethod(ObjectHandleOnStack target, Void** arguments, ObjectHandleOnStack sig, BOOL isConstructor, ObjectHandleOnStack result)\n   at System.RuntimeMethodHandle.InvokeMethod(ObjectHandleOnStack target, Void** arguments, ObjectHandleOnStack sig, BOOL isConstructor, ObjectHandleOnStack result)\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor) in /_/src/coreclr/System.Private.CoreLib/src/System/RuntimeHandles.cs:line 1159\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 48\n----- Inner Stack Trace -----\n\n```",
                                           "updatedAt":  "2025-02-05T02:29:59Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[9.0][osx] Access to path denied, bad file descriptor IOException in System.Diagnostics.Tests.ProcessTests.Start_RedirectStandardOutput_StartAgain_DoesntThrow",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "os-mac-os-x",
                       "arch-x64",
                       "runtime-coreclr",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107992",
        "createdAt":  "2024-09-18T17:00:26Z",
        "number":  107992,
        "author":  "13thirteen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-21T19:09:26Z",
        "body":  "### Description\r\n\r\nAssume you have this process tree:\r\n- Process 1\r\n  - Process 2 (in job object)\r\n    - Process 3\r\n\r\nProcess 1 creates process 2 and adds it to a new [Windows job object](https://learn.microsoft.com/en-us/windows/win32/procthread/job-objects) with [JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE](https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-jobobject_basic_limit_information#JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE) such that process 2 is automatically killed when process 1 gets terminated.\r\nProcess 2 then creates process 3 which is not part of that job object.\r\n\r\nIn this scenario, calling `Kill(entireProcessTree: true)` on process 1 terminates process 1 and process 2 but NOT process 3.\r\n\r\nThis scenario occurs for example with the Windows Python Launcher `py.exe`.\r\n`py.exe` starts `python.exe` in a job object, but subprocesses started by the Python script are not in that job object, [by design](https://peps.python.org/pep-0397/#discussion):\r\n\u003e the launcher will execute its command in a child process, remaining alive while the child process is executing\r\n\r\n\u003e the Win32 Job API will be used to arrange so that the child process is automatically killed when the parent is terminated (although children of that child process will continue as is the case now.)\r\n\r\n### Reproduction Steps\r\n\r\n1. Create `DotnetKillTree.exe`:\r\n```\r\ndotnet new console -n DotnetKillTree -o .\r\necho System.Diagnostics.Process.GetProcessById(int.Parse(args[0])).Kill(entireProcessTree: true); \u003e Program.cs\r\ndotnet publish -r win-x64 --sc -p:PublishSingleFile=true -p:PublishTrimmed=true -p:DebugType=None -p:DebugSymbols=false -o .\r\n```\r\n2. Download and install Python for Windows from https://www.python.org/downloads/\r\n3. Download PsList from https://learn.microsoft.com/en-us/sysinternals/downloads/pslist\r\n4. Start the process tree in a new console:\r\n```\r\npy.exe -c \"import subprocess;subprocess.run([\u0027ping.exe\u0027, \u0027-t\u0027, \u0027localhost\u0027])\"\r\n```\r\n5. In another console show the process tree:\r\n```\r\nC:\\Users\\WDAGUtilityAccount\\Desktop\\Test\u003epslist -t\r\n\r\nPsList v1.41 - Process information lister\r\nCopyright (C) 2000-2023 Mark Russinovich\r\nSysinternals - www.sysinternals.com\r\n\r\nProcess information for A1ACB1A2-C520-4:\r\n\r\nName                             Pid Pri Thd  Hnd      VM      WS    Priv\r\nIdle                               0   0  16    0       8       8      60\r\n...\r\nexplorer                        4244   8  59 2497 4194303  164184   64388\r\n  cmd                           1356   8   4   81 4194303    4800    5468\r\n    pslist                      4596  13   4  223   63620    7752    2436\r\n    conhost                     5788   8   7  201 4194303   18800    7236\r\n  cmd                           4796   8   1   84 4194303    4860    2272\r\n    conhost                      720   8   4  202 4194303   18880    7148\r\n    py                          5416   8   4  144   67540    7012    1596\r\n      python                    4724   8   4   90 4194303   10936    7216\r\n        PING                    4268   8   6   94 4194303    4528     996\r\n```\r\n6. Kill the `py` process subtree:\r\n```\r\nC:\\Users\\WDAGUtilityAccount\\Desktop\\Test\u003eDotnetKillTree.exe 5416\r\n```\r\n7. Check the process tree:\r\n```\r\nC:\\Users\\WDAGUtilityAccount\\Desktop\\Test\u003epslist -t\r\n\r\nName                             Pid Pri Thd  Hnd      VM      WS    Priv\r\nIdle                               0   0  16    0       8       8      60\r\n...\r\nexplorer                        4244   8  55 2483 4194303  164800   64732\r\n  cmd                           1356   8   2   84 4194303    4896    3892\r\n    pslist                      3608  13   4  223   63620    7748    2428\r\n    conhost                     5788   8   8  204 4194303   18880    7276\r\n  cmd                           4796   8   1   83 4194303    4860    2532\r\n    conhost                      720   8   4  200 4194303   18880    7148\r\nPING                            4268   8   6   94 4194303    4536    1004\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe `PING` process `4268` is also killed.\r\n\r\n### Actual behavior\r\n\r\nThe `PING` process `4268` remains running.\r\n\r\n### Regression?\r\n\r\nI don\u0027t know. Probably not.\r\n\r\n### Known Workarounds\r\n\r\nAvoid creating processes in job objects.\r\nFor example directly start `python.exe` instead of `py.exe`:\r\n```\r\npython.exe -c \"import subprocess;subprocess.run([\u0027ping.exe\u0027, \u0027-t\u0027, \u0027localhost\u0027])\"\r\n```\r\n\r\n### Configuration\r\n\r\n.NET 8.0.202\r\nWindows 10 Pro 22H2\r\nx64\r\nIt\u0027s only an issue on Windows (because of job objects).\r\nBut it\u0027s probably not specific to this configuration.\r\n\r\n### Other information\r\n\r\nNot sure, but the problem might be that the [KillTree(SafeProcessHandle handle)](https://github.com/dotnet/runtime/blob/v8.0.8/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Win32.cs#L386) method first [kills a process](https://github.com/dotnet/runtime/blob/v8.0.8/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Win32.cs#L397) (so that no further children can be created) and then [lists its children](https://github.com/dotnet/runtime/blob/v8.0.8/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Win32.cs#L404) and [recursively kills them](https://github.com/dotnet/runtime/blob/v8.0.8/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Win32.cs#L409).\r\n\r\nI suspect that in the above scenario killing process 1 closes the job object which already kills process 2 (but not process 3). And then process 2 is no longer a child of process 1 (and neither is process 3) and therefore the recursion ends and process 3 remains running.\r\n\r\nTo inspect the job object of each process (in a different test, hence the PIDs don\u0027t match) I used [ProcessExplorer](https://learn.microsoft.com/en-us/sysinternals/downloads/process-explorer):\r\n\r\n![repro_2_py](https://github.com/user-attachments/assets/e9acc127-729e-418a-9745-a23b5270ee63)\r\n![repro_3_python](https://github.com/user-attachments/assets/9a5bda44-8458-48a7-add5-b34e252e2131)\r\n![repro_5_ping](https://github.com/user-attachments/assets/74e7e3da-7958-4daf-a0ec-c5770c9d17e3)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjJtEHw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Mm0Qf",
                                           "createdAt":  "2024-09-18T17:00:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-18T17:00:49Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "System.Diagnostics.Process.Kill(entireProcessTree: true) doesn\u0027t kill entire tree if an intermediate child process is in job object with JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108959",
        "createdAt":  "2024-10-17T07:45:59Z",
        "number":  108959,
        "author":  "cklutz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-10-24T06:35:57Z",
        "body":  "### Description\n\nIt looks like, that the way that `System.Diagnostics.Process.StartTime` is calculated is not stable. That is, if you get the start time multiple times, you get different values - even if just in the millisecond range.\n\nThis is a problem, not only for precision in general, but also for applications that use a process\u0027 start time together with its process ID to uniquely identify it. Also, Windows doesn\u0027t have this problem, making porting and compatibility tricky. Finally, the current behavior does not allow other code to reproduce the exact same start time that the CLR calculates (something which, again, is possible on Windows). There might also be issues comparing this start time with the one reported by other (native) tools. Again, which might cause \"identity problems\".\n\n\n\n\n### Reproduction Steps\n\nConsider the following Program:\n\n```csharp\nusing System.Diagnostics;\nusing System;\n\npublic static class Program\n{\n        public static void Main(string[] args)\n        {\n                using var process = Process.GetProcessById(Int32.Parse(args[0]));\n                Console.WriteLine(process.StartTime.ToString(\"O\"));\n        }\n}\n```\n\nOn a Linux system invoke it multiple times (e.g. for the init process, PID 1)\n\n```\n$ dotnet bin/Debug/net8.0/starttime 1\n```\n\n\n\n\n### Expected behavior\n\nMultiple invocations produce the exact same start time for the target process.\n\n### Actual behavior\n\nMultiple invocations produce different start times for the target process (actual output):\n\n```\n$ dotnet ./bin/Debug/net8.0/starttime.dll 1\n2024-10-17T03:12:50.9611154+02:00\n$ dotnet ./bin/Debug/net8.0/starttime.dll 1\n2024-10-17T03:12:50.9520283+02:00\n$ dotnet ./bin/Debug/net8.0/starttime.dll 1\n2024-10-17T03:12:50.9505063+02:00\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nNot a workaround, but it kind of \"works\" if you only ever use such timestamps from within the same process, because inside Process.Linux.cs, the boot time is cached (in s_bootTimeTicks).\n\n### Configuration\n\n* .NET 8.0\n* Ubuntu 23.04, x64\n* WSL 2\n\n### Other information\n\nIt looks like it is actually an issue in the implementation of the native `SystemNative_GetBootTimeTicks` function in `pal_time.c`. It uses `CLOCK_REALTIME_COARSE` to calculate part of the time stamp and that returns unstable (or \"less precise\") values.\n\nIf I understand the rest of the code to get `Process.StartTime` correctly, all other values (like `starttime` from the process\u0027 procfs-stat file) are basically constants. So the observed behavior should be related to the native code.\n\nConsider the following \"low-level\" repro (code copied from `pal_time.c`):\n\n```c\n/* build: clang foo.cpp */\n#include\u003ctime.h\u003e\n#include\u003cstdint.h\u003e\n#include\u003cassert.h\u003e\n#include\u003cunistd.h\u003e\n#include\u003cstring.h\u003e\n\nenum\n{\n    MicroSecondsToNanoSeconds = 1000,   // 10^3\n    SecondsToNanoSeconds = 1000000000,  // 10^9\n    SecondsToTicks = 10000000,          // 10^7\n    TicksToNanoSeconds = 100,           // 10^2\n};\n\nconst int64_t UnixEpochTicks = 621355968000000000;\n\nint main(int argc, char** argv) {\n        int64_t previous = 0;\n        for (int i = 0; i \u003c 10; i++) {\n                struct timespec ts;\n                int result = clock_gettime(CLOCK_BOOTTIME, \u0026ts);\n                assert(result == 0);\n\n                int64_t sinceBootTicks = ((int64_t)ts.tv_sec * SecondsToTicks) + (ts.tv_nsec / TicksToNanoSeconds);\n\n                if (strcmp(argv[1], \"--mono\") == 0) {\n                        result = clock_gettime(CLOCK_MONOTONIC, \u0026ts);\n                } else {\n                        result = clock_gettime(CLOCK_REALTIME_COARSE, \u0026ts);\n                }\n                assert(result == 0);\n\n                int64_t sinceEpochTicks = ((int64_t)ts.tv_sec * SecondsToTicks) + (ts.tv_nsec / TicksToNanoSeconds);\n\n                int64_t bootTime = UnixEpochTicks + sinceEpochTicks - sinceBootTicks;\n\n                if (i \u003e 0) {\n                        printf(\"sinceBootTicks: %ld, sinceEpochTicks: %ld, bootTime: %ld, delta: %ld\\n\",\n                                sinceBootTicks, sinceEpochTicks, bootTime, bootTime - previous);\n                } else {\n                        printf(\"sinceBootTicks: %ld, sinceEpochTicks: %ld, bootTime: %ld\\n\",\n                                sinceBootTicks, sinceEpochTicks, bootTime);\n                }\n                previous = bootTime;\n                sleep(1);\n        }\n        return 0;\n}\n```\n\nIf you compile and invoke the resulting binary with `--mono` it will use `CLOCK_REALTIME_COARSE` rather than `CLOCK_REALTIME_COARSE` and will produce stable results:\n\n```\n./a.out --coarse\nsinceBootTicks: 230188979998, sinceEpochTicks: 17291505892061801, bootTime: 638647243703081803\nsinceBootTicks: 230199052191, sinceEpochTicks: 17291505902161801, bootTime: 638647243703109610, delta: 27807\nsinceBootTicks: 230209124116, sinceEpochTicks: 17291505912261800, bootTime: 638647243703137684, delta: 28074\nsinceBootTicks: 230219196751, sinceEpochTicks: 17291505922161794, bootTime: 638647243702965043, delta: -172641\nsinceBootTicks: 230229269369, sinceEpochTicks: 17291505932361787, bootTime: 638647243703092418, delta: 127375\nsinceBootTicks: 230239345412, sinceEpochTicks: 17291505942461781, bootTime: 638647243703116369, delta: 23951\nsinceBootTicks: 230249416194, sinceEpochTicks: 17291505952461774, bootTime: 638647243703045580, delta: -70789\n```\n\nCompare with\n\n```\n./a.out --mono\nsinceBootTicks: 229996721520, sinceEpochTicks: 229996721534, bootTime: 621355968000000014\nsinceBootTicks: 230006794304, sinceEpochTicks: 230006794308, bootTime: 621355968000000004, delta: -10\nsinceBootTicks: 230016866885, sinceEpochTicks: 230016866889, bootTime: 621355968000000004, delta: 0\nsinceBootTicks: 230026938539, sinceEpochTicks: 230026938543, bootTime: 621355968000000004, delta: 0\nsinceBootTicks: 230037009285, sinceEpochTicks: 230037009294, bootTime: 621355968000000009, delta: 5\nsinceBootTicks: 230047080913, sinceEpochTicks: 230047080917, bootTime: 621355968000000004, delta: -5\nsinceBootTicks: 230057096215, sinceEpochTicks: 230057096219, bootTime: 621355968000000004, delta: 0\n```\n\nAs you can see, the difference (in ticks) between the individual calculations is much smaller.\nAlbeit still not 100% identical. So I\u0027m not sure if that *would* really be a fix - given nothing\nelse really *requires* `CLOCK_REALTIME_COARSE` here.\n\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkRpDoQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6QLpj_",
                                           "createdAt":  "2024-10-17T09:03:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-17T09:03:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RGkOh",
                                           "createdAt":  "2024-10-24T06:35:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cklutz",
                                           "body":  "I\u0027d like to add some thoughts (unfortunately, I don\u0027t think I have enough experience to propose/code a proper \"fix\" for the issue myself).\n\nWhen using the CLOCK_MONOTONIC or CLOCK_REALTIME (not CLOCK_REALTIME_COARSE) the values seem to be a lot less varying. But as can be seen above, even then they do differ (when they probably shouldn\u0027t). This might be an artefact due to running in WSL, but nevertheless the problem shouldn\u0027t be one even there.\n\nMaybe it would be sufficient to ensure that values are precise enough up to the millisecond (or maybe even only 10th of milliseconds). Thus effectively hiding the differences that may not be preventable.\n\nBut that would require that all smaller fractions are zeroed out by `Process.StartTime`. For example, instead of returning the \"measured\" value `2024-10-17T03:12:50.9515063+02:00` return `2024-10-17T03:12:50.9510000+02:00` or even `2024-10-17T03:12:50.9500000+02:00`.\n\nGiven typical PID recycling that shouldn\u0027t lead to ambiguity regarding process identification with (ProcessId, StartTime).\n\nApplications could do this themselves, but than cannot be sure that other code (libraries, packages, etc.) would do it the same. Also multi-platform apps would have to do this only for, say, Linux but not for Windows.\n\nAlso, should there be a way to determine the start time with higher precision in the future (or on different platforms, runtime environments), the accuracy could be increased without breaking existing code.\n\nI\u0027m sure there are quite some issues with the idea above, but I wanted to toss it out anyway ;-)\n\n",
                                           "updatedAt":  "2024-10-24T06:35:55Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "On Linux, `System.Diagnostics.Process.StartTime` is not stable",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "help wanted",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109434",
        "createdAt":  "2024-10-31T23:11:53Z",
        "number":  109434,
        "author":  "tmat",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-03T01:22:44Z",
        "body":  "### Description\n\nMethod `GetWaitState()` may be entered my multiple threads (it\u0027s not guarded by a lock) and each thread can return different instance of the ProcessWaitState, which is mutable. \n\nhttps://github.com/dotnet/runtime/blob/97f50455530cfbe21d28544d2b3fb14611f4ae7a/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L955-L962\n\nWhen using Process.Kill in dotnet-watch we observed that the method sometimes failed to terminate process on Linux. It is plausible that this is due to the above race condition.\n\n### Reproduction Steps\n\nn/a\n\n### Expected behavior\n\nAll methods of Process type should be thread safe.\n\n### Actual behavior\n\nRace conditions\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkhdP0A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6SF0_Q",
                                           "createdAt":  "2024-10-31T23:12:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-31T23:12:19Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "The Unix implementation of Process type is not thread safe",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109630",
        "createdAt":  "2024-11-08T01:14:41Z",
        "number":  109630,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-20T22:36:54Z",
        "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20241106.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=863290\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=22462276\u0026resultId=131519\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-x64-jitstress2_tiered-Ubuntu.2204.Amd64.Open\n    - System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgramUsingArgumentList\n```\n\n**Error message:**\n```\n Assert.Equal() Failure: Strings differ\n           ↓ (pos 0)\nExpected: \"sleep\"\nActual:   \".NET Long Runni\"\n           ↑ (pos 0)\n```\n\n**Stack trace:**\n```\n   at System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgramUsingArgumentList() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs:line 377\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 48\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp-9Iew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6S1vFF",
                                           "createdAt":  "2024-11-08T01:15:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-08T01:15:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6U1wl0",
                                           "createdAt":  "2024-11-25T07:45:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20241122.2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=877421\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=22895180\u0026paneView=debug\u0026resultId=133389)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-x64-jitstress2_tiered-Ubuntu.2204.Amd64.Open\n    - System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgramUsingArgumentList\n```\n\n**Error message:**\n```\nAssert.Equal() Failure: Strings differ\n↓ (pos 0)\nExpected: \"sleep\"\nActual:   \".NET Long Runni\"\n↑ (pos 0)\n```\n\n**Stack trace:**\n```\n   at System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgramUsingArgumentList() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs:line 377\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 48\n```",
                                           "updatedAt":  "2024-11-25T07:45:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VJ4fZ",
                                           "createdAt":  "2024-11-27T01:13:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20241125.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=879319\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=22966130\u0026resultId=134749\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-x64-tailcallstress-Ubuntu.2204.Amd64.Open\n    - System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgramUsingArgumentList\n```\n\n**Error message:**\n```\n Assert.Equal() Failure: Strings differ\n           ↓ (pos 0)\nExpected: \"sleep\"\nActual:   \".NET Long Runni\"\n           ↑ (pos 0)\n```\n\n**Stack trace:**\n```\n   at System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgramUsingArgumentList() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs:line 377\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2024-11-27T01:13:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Y4eQY",
                                           "createdAt":  "2024-12-30T01:40:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20241228.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=903660\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23756192\u0026resultId=135288\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-x64-jitstress_random_1-Ubuntu.2204.Amd64.Open\n    - System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgramUsingArgumentList\n```\n\n**Error message:**\n```\n Assert.Equal() Failure: Strings differ\n           ↓ (pos 0)\nExpected: \"sleep\"\nActual:   \".NET Long Runni\"\n           ↑ (pos 0)\n```\n\n**Stack trace:**\n```\n   at System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgramUsingArgumentList() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs:line 377\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2024-12-30T01:40:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6apBEB",
                                           "createdAt":  "2025-01-16T04:16:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Assigned to @adamsitnik for triage",
                                           "updatedAt":  "2025-01-16T04:16:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bldq1",
                                           "createdAt":  "2025-01-23T16:20:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Triage: it seems that reading a process name on Linux makes some of our tests flaky (#109630, #110643, #111460). \n\n@jkotas has suggested in https://github.com/dotnet/runtime/issues/111460#issuecomment-2608999432 that we maybe reading it too soon. I am going to try to add a simple retry mechanism to see if it helps.",
                                           "updatedAt":  "2025-01-23T16:20:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gsQaq",
                                           "createdAt":  "2025-03-04T01:31:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20250302.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=967110\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25771504\u0026resultId=151743\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-x64-jitminopts-Ubuntu.2204.Amd64.Open\n    - System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgramUsingArgumentList\n```\n\n**Error message:**\n```\n Assert.Equal() Failure: Strings differ\n           ↓ (pos 0)\nExpected: \"sleep\"\nActual:   \".NET Long Runni\"\n           ↑ (pos 0)\n```\n\n**Stack trace:**\n```\n   at System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgramUsingArgumentList() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs:line 377\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2025-03-04T01:31:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6g81wB",
                                           "createdAt":  "2025-03-05T09:09:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20250303.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=968343\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25805580\u0026resultId=142796\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-x64-jitstress2_tiered-Ubuntu.2204.Amd64.Open\n    - System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgramUsingArgumentList\n```\n\n**Error message:**\n```\n Assert.Equal() Failure: Strings differ\n           ↓ (pos 0)\nExpected: \"sleep\"\nActual:   \".NET Long Runni\"\n           ↑ (pos 0)\n```\n\n**Stack trace:**\n```\n   at System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgramUsingArgumentList() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs:line 377\n   at System.RuntimeMethodHandle.InvokeMethod(ObjectHandleOnStack target, Void** arguments, ObjectHandleOnStack sig, BOOL isConstructor, ObjectHandleOnStack result)\n   at System.RuntimeMethodHandle.InvokeMethod(ObjectHandleOnStack target, Void** arguments, ObjectHandleOnStack sig, BOOL isConstructor, ObjectHandleOnStack result)\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 48\n```",
                                           "updatedAt":  "2025-03-05T09:09:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6n70h7",
                                           "createdAt":  "2025-04-21T01:55:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-pgo 20250420.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1021374\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27358584\u0026resultId=172459\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-x64-fullpgo_random_gdv_edge-Ubuntu.2204.Amd64.Open\n    - System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgramUsingArgumentList\n```\n\n**Error message:**\n```\n Assert.Equal() Failure: Strings differ\n           ↓ (pos 0)\nExpected: \"sleep\"\nActual:   \".NET Long Runni\"\n           ↑ (pos 0)\n```\n\n**Stack trace:**\n```\n   at System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgramUsingArgumentList() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs:line 377\n   at System.RuntimeMethodHandle.InvokeMethod(ObjectHandleOnStack target, Void** arguments, ObjectHandleOnStack sig, BOOL isConstructor, ObjectHandleOnStack result)\n   at System.RuntimeMethodHandle.InvokeMethod(ObjectHandleOnStack target, Void** arguments, ObjectHandleOnStack sig, BOOL isConstructor, ObjectHandleOnStack result)\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.cs:line 126\n```",
                                           "updatedAt":  "2025-04-21T01:55:56Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Test failure: System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgramUsingArgumentList",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "os-linux",
                       "JitStress",
                       "arch-x64",
                       "blocking-clean-ci-optional"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110643",
        "createdAt":  "2024-12-12T11:27:33Z",
        "number":  110643,
        "author":  "am11",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:02:36Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=893020\nBuild error leg or test failing: System.Diagnostics.Tests.ProcessTests.TestGetProcessById\nPull request: https://github.com/dotnet/runtime/pull/110198\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": [\"Expected: \\\".NET Long Runni\\\"\",\"System.Diagnostics.Tests.ProcessTests.TestGetProcessById\"],\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\n\u003c!-- Known issue validation start --\u003e\n ### Known issue validation\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=893020\n**Error message validated:** `[Expected: \".NET Long Runni\" System.Diagnostics.Tests.ProcessTests.TestGetProcessById`]\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\n**Validation performed at:** 12/12/2024 6:55:46 PM UTC\n\u003c!-- Known issue validation end --\u003e\n\u003c!--Known issue error report start --\u003e\n\n### Report\n#### Summary\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\n|---|---|---|\n|0|0|0|\n\u003c!--Known issue error report end --\u003e\n\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1153696](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153696)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.TestGetProcessById](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153696\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31867962\u0026resultId=174590)|dotnet/runtime#119863|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|1|1|1|\r\n\u003c!--Known issue error report end --\u003e\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuHebgA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6XYexS",
                                           "createdAt":  "2024-12-12T18:52:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "`Expected: \".NET Long Runni\"` is very generic pattern that can match number of unrelated issues. I have updated it to be make it more specific. ",
                                           "updatedAt":  "2024-12-12T18:52:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Xyo7e",
                                           "createdAt":  "2024-12-16T20:14:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mdh1418",
                                           "body":  "This looks like a dupe of https://github.com/dotnet/runtime/issues/107821. It seems odd that the expected name is `\".NET Long Runni\"`, do we really expect the process started by [CreateDefaultProcess](https://github.com/dotnet/runtime/blob/1d69684de8801d500e12de8efd86e7ecfa5ed168/src/libraries/System.Diagnostics.Process/tests/ProcessTestBase.cs#L20) to have that name (which looks like that name stems from a long running task being trimmed https://github.com/dotnet/runtime/blob/1d69684de8801d500e12de8efd86e7ecfa5ed168/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/ThreadPoolTaskScheduler.cs#L51) instead of `dotnet`?\n\nAll other instances of `.NET Long Runni` in other issues seem to be some problem with hangs/futex-internal.c when looking at callstacks in https://github.com/dotnet/runtime/issues/92070, https://github.com/dotnet/runtime/issues/90019, https://github.com/dotnet/runtime/issues/105808, and maybe even https://github.com/dotnet/runtime/issues/109630 and https://github.com/dotnet/runtime/issues/106595 might have the same underlying issue.",
                                           "updatedAt":  "2024-12-16T20:14:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6X8vfC",
                                           "createdAt":  "2024-12-17T18:29:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-17T18:29:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6apBLr",
                                           "createdAt":  "2025-01-16T04:17:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Assigned to @adamsitnik for triage",
                                           "updatedAt":  "2025-01-16T04:17:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bleLF",
                                           "createdAt":  "2025-01-23T16:20:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Triage: it seems that reading a process name on Linux makes some of our tests flaky (#109630, #110643, #111460). \n\n@jkotas has suggested in https://github.com/dotnet/runtime/issues/111460#issuecomment-2608999432 that we maybe reading it too soon. I am going to try to add a simple retry mechanism to see if it helps.",
                                           "updatedAt":  "2025-01-23T16:20:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6p9mBL",
                                           "createdAt":  "2025-05-05T16:07:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "removing blocking-clean-ci has it has not failed in 30 days\n\n24-Hour Hit Count | 7-Day Hit Count | 1-Month Count\n-- | -- | --\n0 | 0 | 0\n",
                                           "updatedAt":  "2025-05-05T16:07:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64d2_y",
                                           "createdAt":  "2025-07-20T22:35:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Closing as it has continued not to have recent hits",
                                           "updatedAt":  "2025-07-20T22:35:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64d5uA",
                                           "createdAt":  "2025-07-20T23:01:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Closing as it has continued not to have recent hits\n\nIt was hit a few days ago in #117743\n\n|Build|Definition|Test|Pull Request|\n|---|---|---|---|\n|[1097369](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1097369)|dotnet/runtime|[System.Diagnostics.Tests.ProcessTests.TestCheckChildProcessUserAndGroupIds](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1097369\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=30000374\u0026resultId=162230)|dotnet/runtime#117743|\n#### Summary\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\n|---|---|---|\n|0|1|1|\n",
                                           "updatedAt":  "2025-07-20T23:01:38Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "System.Diagnostics.Process.Tests failure on net10.0-linux-Debug-arm64-Mono_Minijit_Debug",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111431",
        "createdAt":  "2025-01-14T18:54:49Z",
        "number":  111431,
        "author":  "carlossanlop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:02:44Z",
        "body":  "## Build Information\n\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=916912\nBuild error leg or test failing: net9.0-linux-Release-x64-coreclr_checked-Ubuntu.2204.Amd64.Open\n\n## Error Message\n\n```json\n{\n  \"ErrorMessage\" : [\"Expected:\", \"sleep\", \".NET Long Runni\"],\n  \"BuildRetry\" : true,\n  \"ExcludeConsoleLog\" : false\n}\n```\n\n- PR: https://github.com/dotnet/runtime/pull/111422\n- Queue: `Libraries Test Run checked coreclr linux x64 Release`\n- Job result: https://dev.azure.com/dnceng-public/public/_build/results?buildId=916912\u0026view=logs\u0026j=fe27627b-bd13-56b8-97c3-9bb28451d0b9\u0026t=09d463f5-5a24-5ac9-897c-9929934ad820\n- Log file: https://helixr1107v0xd1eu3ibi6ka.blob.core.windows.net/dotnet-runtime-refs-heads-release-90-staging-76ca6898836a48668c/System.Diagnostics.Process.Tests/1/console.1ee5f3c8.log?helixlogtype=result\n- Output:\n```\n    System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgram [FAIL]\n      Assert.Equal() Failure: Strings differ\n                 ↓ (pos 0)\n      Expected: \"sleep\"\n      Actual:   \".NET Long Runni\"\n                 ↑ (pos 0)\n      Stack Trace:\n        /_/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs(354,0): at System.Diagnostics.Tests.ProcessTests.ProcessStart_OnLinux_UsesSpecifiedProgram()\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\n        /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs(57,0): at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\n```\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=916912\r\n**Error message validated:** `[Expected: sleep .NET Long Runni`]\r\n**Result validation:** :x: Known issue did not match with the provided build.\r\n**Validation performed at:** 1/14/2025 6:55:20 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmoe9eQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6abeQp",
                                           "createdAt":  "2025-01-14T19:03:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-14T19:03:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ah715",
                                           "createdAt":  "2025-01-15T12:04:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "I\u0027ve taken a look at the test implementation and I can\u0027t see any reason why it would fail like this (sleep is a native Linux utility, not a .NET command line tool).\n\nhttps://github.com/dotnet/runtime/blob/5a395ed2fd64cf1c65ad43d667327958f6f3d1b0/src/libraries/System.Diagnostics.Process/tests/ProcessTests.Unix.cs#L344-L363\n\nFor now I am going to move it to Future. If it starts failing more often we can invest more time into that.",
                                           "updatedAt":  "2025-01-15T12:04:46Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[9.0] Process test expecting sleep but shows .NET long running process",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "os-linux",
                       "arch-x64",
                       "runtime-coreclr",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112409",
        "createdAt":  "2025-02-11T13:15:33Z",
        "number":  112409,
        "author":  "miloush",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC--rqQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rampaa",
                                            "createdAt":  "2025-02-11T14:21:22Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-26T09:38:11Z",
        "body":  "### Description\n\nThe `Process.MainWindowHandle` currently grabs the first window that 1) does not have owner 2) is visible:\n\nhttps://github.com/dotnet/runtime/blob/771539182c280c9933ad57422583f1380541eda1/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/ProcessManager.Win32.cs#L43-L46\n\nArguably if the process has multiple windows meeting this criteria with one of them having WS_POPUP, the popup is probably not the main window.\n\n### Reproduction Steps\n\nCreate a process with normal and a popup window. The repro relies on EnumWindow returning the popup first, but the order is not guaranteed.\n\n### Expected behavior\n\nPopup windows are returned as main window even when non-popup windows exist.\n\n### Actual behavior\n\nPrefer non-popup windows.\n\n### Regression?\n\nNo, same in .NET Framework.\n\n### Known Workarounds\n\nDo not use Process.MainWindowHandle but do your own interop.\n\n### Configuration\n\n.NET: not specific\nOS: not specific (27793 x64)\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOngA_kg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6eAD-S",
                                           "createdAt":  "2025-02-11T13:21:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-11T13:21:49Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "`Process.MainWindowHandle` should prefer non-popup windows",
        "labels":  [
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118752",
        "createdAt":  "2025-08-14T21:05:58Z",
        "number":  118752,
        "author":  "Latency",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-26T18:40:06Z",
        "body":  "### Description\n\nAttempting to create a relay service proxy via gRPC executing a remote process that is acting as an interactive shell on target host.\n\nThe target process appears to be written in VC++.\n\nThe SDK to embedded hardware uses a plethora of .bat files to setup environment variables and then spawns an interactive shell process called \u0027rdi_xsct.exe\u0027\n\nI have obtained similar results when either opening a Process via the batch file or setting env variables in code via a cmd.exe +  then writing input to launch the \u0027rdi_xsct.exe\u0027.\n\nThe process loads, but the splash screen ascii output is not shown.\n\nIn addition, when I send commands to it via writeline(), I do not receive any stdoutput either.\n\nIf I set the ResirectStandardInput = false, the output is displayed as expected. \n\nIssue:\n  Able to receive std output within a terminal console window via \u0027echo \u003cfoo\u003e\u0027 prior to the `call \"%RDI_BINROOT%/loader.bat\" -exec rdi_xsct %CMDARGS%`\n--\u003e  E.g.  \"--exec \u003canother batch file\u003e\" within the primary batch file which is complicating things.\n\nSimilarly,  if I write my own mock emulator application,  I can obtain the output properly as well.\n\nThe target process \n\n\nUsing VSRemote Debugging tools and x-compiling onto target server, I can launch gRPC and communicate via IPC just fine.\n\n\n1. ClientGrpc  (No problems)\n2. ServerGrpc (No Problems)\n   --\u003e System.Diagnostics.Process  (undetermined behavior)   --\u003e xsct.bat or rdi_xsct.exe. (no output)\n\n`\n...\n...\n...\ncall \"%RDI_BINROOT%/loader.bat\" -exec rdi_xsct %CMDARGS%\nendlocal\n`\n\n- [BatchFiles.zip](https://github.com/user-attachments/files/21780137/BatchFiles.zip)\n\n### Reproduction Steps\n\n1. Download and install Xilinx SDK (tools) from AMD on target host PC\n    https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/embedded-design-tools/archive.html  (v2018.3)\n2. Install .NET runtimes on target host PC \n3. Setup VS Remote Debugging tools and start service on target host PC.\n4.  Map remote drive on local PC and setup Client / Server gRPC projects accordingly.\n5. Run project (multi-launch)\n6. Send client Command (defined via .proto file) to start and open the remote target process on the gRPC server.\n7. Observe splash screen output \u0026 error within callback delgates on System.Diagostics.Process (async) handling.\n\n### Expected behavior\n\nExpect to have output be sent to both event invocator callbacks when `RedirectStandardInput  = true`\n\n```\n        Environment.SetEnvironmentVariable(\"XILINX_SDK\" , sdkPath,                      EnvironmentVariableTarget.Process);\n        Environment.SetEnvironmentVariable(\"TCL_LIBRARY\", $@\"{sdkPath}\\tps\\tcl\\tcl8.5\", EnvironmentVariableTarget.Process);\n        Environment.SetEnvironmentVariable(\"RDI_DATADIR\", $@\"{sdkPath}\\data\",           EnvironmentVariableTarget.Process);\n        Environment.SetEnvironmentVariable(\"HDI_APPROOT\", sdkPath,                      EnvironmentVariableTarget.Process);\n        Environment.SetEnvironmentVariable(\"RDI_APPROOT\", sdkPath,                      EnvironmentVariableTarget.Process);\n        Environment.SetEnvironmentVariable(\"PATH\"       , @\"...\",         EnvironmentVariableTarget.Process);;\n\n        _psi = new ProcessStartInfo\n        {\n            FileName               = \"cmd.exe\",\n            RedirectStandardInput  = true,  // \u003c--- ISSUES  (Receives output when false)\n            RedirectStandardError  = true,\n            RedirectStandardOutput = true,\n            UseShellExecute        = false,  // Enable redirection\n            CreateNoWindow         = true,\n            WorkingDirectory       = Path.GetDirectoryName(xilinxFileName)\n        };\n\n...\n\n        p = new Process\n        {\n            StartInfo           = _psi,\n            EnableRaisingEvents = true\n        };\n\n        p.OutputDataReceived += OnOutputDataReceived;\n        p.ErrorDataReceived  += OnErrorDataReceived;\n\n        p.Start();\n\n        p.BeginOutputReadLine();\n        p.BeginErrorReadLine();\n\n        P.StandardInput.Writeline(xilinxFileName);\n\n```\n\nExpecting to receive the exact stdout/stderr on the conhost.exe terminal window when running the .bat file on the localhost or attempts to bypass .bat file and launch it directly.\n\n### Actual behavior\n\nNo StdOutput / StdError is being sent to the async callbacks registered when RedirectStandardInput = true.\n\nRedirectStandardInput must be \u0027true\u0027 in order to write which is a requirement. \nHowever, it be \u0027false\u0027 in order to receive StdOutput + Error reliably.\n\n\u0027cmd.exe\u0027 process is created which is expected to run the target process.\n\nI have observed a \u0027conhost.exe\u0027 process being created for the terminal window app running the server as gRPC and opening the Process to the target assembly \u0027rdi_xsct.exe\u0027.\n\n### Regression?\n\n- Tried both Async + Synchronous implementations.  - Can get output OR input but not both within an active session.\n\n- Created an emulator in pure C# .exe to mock the interactive target process shell using Console R/W built in streams and that actually works just fine as intended.\n\n- Created a folder with all the .dll + .exe files for a slim down distro to test keeping the \"rdi_xsct.exe\" alive using PS or cmdTerminal.\n- \n  Verified that the environment variables required are what was added into the code.  (6x)\n\n- Opened a cmd terminal window in the aforementioned folder and copy + pasted the environment variables.\n  This terminal window works as expected on its own.. however, does not work when opened via System.Diagnostics.Process.\n\n### Known Workarounds\n\nSetting `RedirectStandardInput = false` will obtain output \u0026 error but inability to write to the StdInput stream.  (throws an exception as intended)\nSetting `RedirectStandardInput = true` will not display output/error as it appears hung/blocked + ability to write to the process. (restored)\n\n### Configuration\n\n**Which version of .NET is the code running on?**  Running \u0027net10.0-windows\u0027  (Latest)  [10.0.0-preview.7.25380.108]\nAlso tried \u0027net9.0-windows\u0027\n\n**What OS and version, and what distro if applicable?**  Windows 11  (client / server)\n\n**What is the architecture (x64, x86, ARM, ARM64)?**  x64\n\nUsing gRPC (latest) w/ Kestral hostbuilder loading.\n\n\n### Other information\n\nAlso, tried creating standalone desktop emulator minus gRPC code to running test DataReveived callbacks on the remote host similarly.. and is still failing within System.Diagnostics.Process.\n\n Why can I not get the output just as it would if I were running a standard PS or cmd terminal on the target\u0027s localhost?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwAz0dg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6_IJY1",
                                           "createdAt":  "2025-08-20T14:09:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Hello @Latency \n\nThank you for providing a very detailed description.\n\nIs it possible that the spawned process does not write to standard output because it\u0027s waiting for more input?\n\nTwo ideas worth trying:\n\n- flush the `StandardInput` after writing to it\n- use `Write` instead of `Writeline`\n",
                                           "updatedAt":  "2025-08-20T14:09:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_InHr",
                                           "createdAt":  "2025-08-20T14:40:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Latency",
                                           "body":  "It is an interactive shell process?  Yes!\n\nThe problem is the reliability of the output streams.  The buffer is causing havoc and I request investigation on why I no longer get any output when all 3x redirects are enabled.  Culprit on RedirectInput causes output Pipes to longer work?\n\nExample:  output text to be splashed on loading of shell process prior to waiting for user input.\n\nAsynch handlers on output/error streams no longer fire.",
                                           "updatedAt":  "2025-08-25T23:49:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7ADPR2",
                                           "createdAt":  "2025-08-25T23:51:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Latency",
                                           "body":  "StdInput = true\n![gRPC.gif](https://github.com/user-attachments/assets/dd5b4fc2-ff10-4516-b820-2291899fbbf3)\n\nStdInput = false\n![gRPC1.gif](https://github.com/user-attachments/assets/d5266037-c98d-499f-94f8-5a659bd3d1e1)\n\n\nWaits for out/err streams to be read... why is it not sending?\n\u003cimg width=\"769\" height=\"527\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/a0bab0ca-7919-4b89-a67c-c92cf7fa78de\" /\u003e\n\nBypassing the RedirectStandardInput:\nAppears to isolate the issue....  Input is not getting sent or is being redirected back onto the output streams.\n\u003cimg width=\"643\" height=\"681\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/285dcb72-d5e0-4b98-8728-301dc204fa68\" /\u003e",
                                           "updatedAt":  "2025-08-26T18:40:06Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Process - Unable to obtain output from redirected process when RedirectStandardInput is enabled",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118977",
        "createdAt":  "2025-08-22T01:47:42Z",
        "number":  118977,
        "author":  "SakeTao",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-25T06:50:16Z",
        "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20250821.1](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1128302)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-x64-jitstress1_tiered-Windows.10.Amd64.Open\n    - System.Diagnostics.Tests.ProcessWaitingTests.WaitAsyncChain\n```\n\n**Error message:**\n```\nSystem.Threading.Tasks.TaskCanceledException : A task was canceled.\n```\n\n**Stack trace:**\n```\n   at System.Diagnostics.Process.WaitForExitAsync(CancellationToken cancellationToken) in /_/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.cs:line 1553\n   at System.Diagnostics.Tests.ProcessWaitingTests.WaitAsyncChain() in /_/src/libraries/System.Diagnostics.Process/tests/ProcessWaitingTests.cs:line 611\n--- End of stack trace from previous location ---\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv97HAQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6_fmXR",
                                           "createdAt":  "2025-08-22T01:48:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-22T01:48:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_3scB",
                                           "createdAt":  "2025-08-25T06:50:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "The synchronous version of the same test also failed for the first time in years: https://github.com/dotnet/runtime/issues/86416#issuecomment-3212691300\n\nLet\u0027s wait and see if it was a one time thing.",
                                           "updatedAt":  "2025-08-25T06:50:16Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Test failure: System.Diagnostics.Tests.ProcessWaitingTests.WaitAsyncChain",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "os-windows",
                       "JitStress",
                       "arch-x64"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119200",
        "createdAt":  "2025-08-29T09:12:24Z",
        "number":  119200,
        "author":  "Youssef1313",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODNQYxA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "KalleOlaviNiemitalo",
                                            "createdAt":  "2025-08-29T10:14:11Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-29T18:20:50Z",
        "body":  "### Background and motivation\n\nThe core logic is in an internal `PasteArguments.AppendArgument`. But it\u0027s not exposed directly for users usage.\n\nWhile ProcessStartInfo today already supports passing a list of unescaped arguments (`ArgumentList` property), it cannot be used together with `Arguments` property.\n\n### API Proposal\n\n```csharp\nnamespace System.Diagnostics;\n\npublic class ProcessStartInfo\n{\n    public static string EscapeArgument(string argument);\n}\n```\n\n### API Usage\n\n```csharp\n// Fancy the value\nvar info = new ProcessStartInfo()\n{\n    FileName = ...;\n}\n\nvar builder = new StringBuilder();\nbuilder.Append(myAlreadyEscapedArgumentsComingFromElsewhere);\nforeach (var arg in listOfUnescapedArguments)\n{\n    builder.Append(ProcessStartInfo.EscapeArgument(arg));\n}\ninfo.Arguments = builder.ToString(); \n```\n\nReal-world example is SDK:\n\nhttps://github.com/dotnet/sdk/blob/15c4fb1e5086e8a61876fd60b612a51cac1774c2/src/Cli/dotnet/Commands/Test/TestApplication.cs#L97\n\nThere, `Module.RunProperties.Arguments` is already a single string which can contain multiple arguments like `--report-trx --results-directory \"Path Containing Spaces\"` which is already escaped properly.\nThen, there are multiple more arguments that need to be constructed and are not escaped.\n\nNOTE: `ArgumentEscaper.EscapeSingleArg` implementation seems like it\u0027s already diverging from the implementation in dotnet/runtime. And somewhere in dotnet/msbuild there is even another implementation somewhere.\n\n### Alternative Designs\n\nAllow both ProcessStartInfo.Arguments and ArgumentList to be used together.\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwP2kLg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7A5npL",
                                           "createdAt":  "2025-08-29T09:13:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-29T09:13:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A5qce",
                                           "createdAt":  "2025-08-29T09:17:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "I\u0027m a bot. Here is a possible related and/or duplicate issue (I may be wrong):\n- https://github.com/dotnet/runtime/issues/23347",
                                           "updatedAt":  "2025-08-29T09:17:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A7t5O",
                                           "createdAt":  "2025-08-29T12:28:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "`ArgumentList` predates me as an owner of System.Diagnostics.Process, but my understanding is that it was designed as the new, recommended way of passing arguments to a new process. `Arguments` property was not removed for backward compat reasons.\n\nSo instead of:\n\n```cs\nvar builder = new StringBuilder();\nbuilder.Append(myAlreadyEscapedArgumentsComingFromElsewhere);\nforeach (var arg in listOfUnescapedArguments)\n{\n    builder.Append(ProcessStartInfo.EscapeArgument(arg));\n}\ninfo.Arguments = builder.ToString(); \n```\n\nThe users can forget about escaping and just provide the args:\n\n```cs\nforeach (var arg in listOfUnescapedArguments)\n{\n    info.ArgumentList.Add(arg);\n}\n```\n\nAnd in your case you have some pre-concatenated string with some escaped args and you would like to add some more to it?",
                                           "updatedAt":  "2025-08-29T12:28:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A7y_T",
                                           "createdAt":  "2025-08-29T12:36:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Youssef1313",
                                           "body":  "\u003e And in your case you have some pre-concatenated string with some escaped args and you would like to add some more to it?\n\nYes. In my case I have already a single string that is properly escaped already. So I think an alternative is to provide an API to \"unescape\" it, then use `ArgumentList`?",
                                           "updatedAt":  "2025-08-29T12:36:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A764N",
                                           "createdAt":  "2025-08-29T12:48:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e So I think an alternative is to provide an API to \"unescape\" it, then use ArgumentList?\n\nSystem.CommandLine (already used by the SDK) provides an API for that:\n\nhttps://github.com/dotnet/command-line-api/blob/fab13a397461f4ff16b988ba96cb08891ac75257/src/System.CommandLine/Parsing/CommandLineParser.cs#L40\n\nThis test shows how it works: https://github.com/dotnet/command-line-api/blob/fab13a397461f4ff16b988ba96cb08891ac75257/src/System.CommandLine.Tests/SplitCommandLineTests.cs#L36-L41\n\n\nBut back to your original request for now I am hesitant of adding such API. You are the first user asking for it since `ArgumentList` was added in .NET Core 2.1 (8 years ago?) I would prefer to wait and get more up votes/feedback for a while\n\n",
                                           "updatedAt":  "2025-08-29T12:48:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A9fLC",
                                           "createdAt":  "2025-08-29T15:00:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "CommandLineParser.SplitCommandLine(string commandLine) matches neither [CommandLineToArgvW](https://learn.microsoft.com/windows/win32/api/shellapi/nf-shellapi-commandlinetoargvw) nor POSIX `sh` word splitting.\n\nFrom where do you get the \"single string that is properly escaped already\": is it built by some API, or read from a file edited by a user?",
                                           "updatedAt":  "2025-08-29T15:00:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A9kW5",
                                           "createdAt":  "2025-08-29T15:07:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Youssef1313",
                                           "body":  "@KalleOlaviNiemitalo For the case of SDK, that\u0027s `RunArguments` MSBuild property (coming from user)",
                                           "updatedAt":  "2025-08-29T15:07:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A_aQu",
                                           "createdAt":  "2025-08-29T18:20:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Related: https://github.com/dotnet/runtime/issues/668",
                                           "updatedAt":  "2025-08-29T18:20:50Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[API Proposal]: Expose API for escaping command-line arguments",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Process"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119533",
        "createdAt":  "2025-09-10T12:16:13Z",
        "number":  119533,
        "author":  "jakobbotsch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:04:37Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1144025\nBuild error leg or test failing: System.Diagnostics.Tests.ProcessStartInfoTests.TestWindowStyle\nPull request: https://github.com/dotnet/runtime/pull/119528\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": [\"System.Diagnostics.Tests.ProcessStartInfoTests.TestWindowStyle\", \"Assert.True() Failure\", \"Expected: True\"],\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144025\r\n**Error message validated:** `[System.Diagnostics.Tests.ProcessStartInfoTests.TestWindowStyle Assert.True() Failure Expected: True`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 9/10/2025 12:16:36 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1153053](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153053)|dotnet/runtime|[System.Diagnostics.Tests.ProcessStartInfoTests.TestWindowStyle](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153053\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31854158\u0026resultId=175300)||\r\n|[1144025](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144025)|dotnet/runtime|[System.Diagnostics.Tests.ProcessStartInfoTests.TestWindowStyle](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1144025\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31554352\u0026resultId=209806)|dotnet/runtime#119528|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|1|2|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwzmXdA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7DMAT-",
                                           "createdAt":  "2025-09-10T12:20:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-10T12:20:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DMArN",
                                           "createdAt":  "2025-09-10T12:20:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "I\u0027m a bot. Here are possible related and/or duplicate issues (I may be wrong):\n- https://github.com/dotnet/runtime/issues/100647\n- https://github.com/dotnet/runtime/issues/89842",
                                           "updatedAt":  "2025-09-10T12:20:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DOZd0",
                                           "createdAt":  "2025-09-10T14:50:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "It\u0027s a flaky test that fails once per year (see https://github.com/dotnet/runtime/issues/100647 and https://github.com/dotnet/runtime/issues/89842), so for now I am moving it to Future and removing \"blocking-clean-ci\"",
                                           "updatedAt":  "2025-09-10T14:50:02Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "System.Diagnostics.Tests.ProcessStartInfoTests.TestWindowStyle failing in CI",
        "labels":  [
                       "area-System.Diagnostics.Process",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119650",
        "createdAt":  "2025-09-12T16:14:37Z",
        "number":  119650,
        "author":  "Youssef1313",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODQ0GpA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Evangelink",
                                            "createdAt":  "2025-09-14T07:55:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2025-09-14T16:40:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ImoutoChan",
                                            "createdAt":  "2025-09-16T04:30:44Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-09-12T16:15:24Z",
        "body":  "### Background and motivation\n\nI was investigating System.Diagnostics.Process issues today, and found out along the way some common patterns that can easily lead to deadlocks.\n\n1. Calling `process.[StandardOutput|StandardError].ReadToEnd()` (or awaiting the async variant) after waiting for process exit. This can lead to deadlock if the child process attempts to write to stdout/stderr more than 4kb (the current buffer size). The child process will only be able to write the first 4kb of data, then it cannot write more data unless the written data is consumed by the parent process. But the parent process is waiting for process exit first before consuming the stream. So this will cause a deadlock.\n2. Even with the order swapped, deadlocks can happen when both StdOut and StdErr are waited on sequentially.\n\n### API Proposal\n\nAnalyzer the warns when such patterns are detected.\n\n### API Usage\n\nExample violations from real-world repos today:\n\nhttps://github.com/microsoft/azure-pipelines-agent/blob/349341c78bf275c22cb6e0df888c84589f4b29c9/src/Agent.Worker/VsoTaskLibManager.cs#L121\n\nhttps://github.com/dotnet/aspire/blob/05226437076bb5755e8a382a65bf027bc80e616c/src/Aspire.Cli/DotNet/DotNetSdkInstaller.cs#L47-L62 (I assume because stderr is redirected and is never read, this can deadlock if more than 4kb are attempted to be written to stderr.\n\nhttps://github.com/dotnet/sdk/blob/f099c198ca7d9faa092a41df85c1861754fba000/src/Cli/Microsoft.TemplateEngine.Cli/PostActionProcessors/ProcessStartPostActionProcessor.cs#L71\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw9r5jg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7D2vmO",
                                           "createdAt":  "2025-09-12T16:15:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-diagnostics-process\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-12T16:15:24Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[Analyzer Proposal]: Avoid deadlocking patterns for System.Diagnostics.Process",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics.Process",
                       "untriaged",
                       "code-analyzer"
                   ]
    }
]
