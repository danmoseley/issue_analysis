[
    {
        "url":  "https://github.com/dotnet/runtime/issues/13677",
        "createdAt":  "2019-10-29T12:24:05Z",
        "number":  13677,
        "author":  "Logerfo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqEprA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielchalmers",
                                            "createdAt":  "2020-08-18T08:44:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aetos382",
                                            "createdAt":  "2022-08-11T10:29:30Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-09-02T05:53:26Z",
        "body":  "Currently, single executable applications (with or without trimming) packages both framework and third party libraries. Because of the former, the result is very large sized if compared to non-packaged builds.\r\nThere should be an option to only package third party libraries, still relying on the installed framework.\r\nAn alternative is [Costura](https://github.com/Fody/Costura), but:\r\n1) It\u0027s not free;\r\n2) It\u0027s being deprecated in favor of single executables, as for Fody/Costura#442.\r\n\r\nI don\u0027t think it would be hard to implement this, since the current feature is more complex than the requested alternative approach.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwVmSlQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NzUyODYyNw==",
                                           "createdAt":  "2019-10-29T17:04:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "cc @swaroop-sridhar ",
                                           "updatedAt":  "2019-10-29T17:04:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NzY1MDk3NQ==",
                                           "createdAt":  "2019-10-29T22:07:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swaroop-sridhar",
                                           "body":  "@Logerfo I think what you need to do is to publish the app  as a framework-dependent single-file.\r\nThat is, `dotnet publish -r \u003cruntime\u003e --self-contained=false /p:PublishSingleFile=true` \r\n\r\nThis will embed all dependencies of the app except the framework binaries.\r\n",
                                           "updatedAt":  "2019-10-29T22:07:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NzkwMzUxOA==",
                                           "createdAt":  "2019-10-30T13:30:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Logerfo",
                                           "body":  "@swaroop-sridhar I didn\u0027t know about that possibility, but it still doesn\u0027t make sense to me. Why does it require a runtime identifier to be specified if it\u0027s not self contained? The default runtime environment is supposed to be framework dependent...",
                                           "updatedAt":  "2019-10-30T13:31:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0ODIyODIzMA==",
                                           "createdAt":  "2019-10-31T06:00:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swaroop-sridhar",
                                           "body":  "@Logerfo the single-exe app includes the managed components and the native host. The result is a native binary that must be built per target OS/architecture. Therefore, `PublishSingleFile` option requires that a `RID` be specified.\r\n\r\nThe framework-dependent aspect just means that we don\u0027t package the framework binaries into the app -- thus making it smaller. That is, the resultant app is still a platform specific native binary containing all dependencies except for framework binaries (which need to be installed elsewhere).\r\n\r\nThe current support for framework dependent single-file apps seems to fulfill your original objective -- embedding third-party dependencies and not including the framework.\r\n\r\nWhat you\u0027re probably also asking is to embed all dependencies into the (portable) managed app, which can then be launched via the `dotnet` host. We don\u0027t support embedding dependencies into managed assemblies yet. This is similar to supporting single-file plugins -- which may be considered in further stages.",
                                           "updatedAt":  "2019-10-31T06:00:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0ODk3NDY1Mg==",
                                           "createdAt":  "2019-11-01T22:42:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swaroop-sridhar",
                                           "body":  "Adjusted the title to refer to the issues discussed in the previous comment",
                                           "updatedAt":  "2019-11-01T22:42:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MTA5NTMzOQ==",
                                           "createdAt":  "2019-11-07T14:11:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA1X9ug==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "strangeman375",
                                                                               "createdAt":  "2019-11-19T13:19:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Logerfo",
                                           "body":  "Another problem: I have a console application which has references to `System.Windows.Forms` in order to create a notification icon in the task bar. This worked fine with .NET Framework and Mono, since it would only crash on Linux when the method was called (and of course my application only allows it if it\u0027s being run on Windows). While migrating to .NET Core, I noticed a new file called `\u003cMyApplication\u003e.runtimeconfig.json`. This file has a reference to `Microsoft.WindowsDesktop.App`, which makes the application unlaunchable on Linux. Manually changing it to `Microsoft.NETCore.App` after building solved the problem, making the application behave just like Mono would (crash only when encounters unavailable API). Publishing as a single file embeds this json file inside the published file, so I cannot edit it anymore. I don\u0027t know if it\u0027s safe (and if it would work) to open the file in a text editor and change it nevertheless.",
                                           "updatedAt":  "2019-11-07T14:11:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDM1MTI0MQ==",
                                           "createdAt":  "2019-11-15T13:04:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "devedse",
                                           "body":  "@swaroop-sridhar ,\r\n\r\nWhen I tried running your command I saw the following error:\r\n```\r\nC:\\XGitPrivate\\DeveImageOptimizerWPF\\DeveImageOptimizerWPF\u003edotnet publish -r win-x64 -c Release --self-contained=false /p:PublishSingleFile=true /p:PublishTrimmed=true\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\XGitPrivate\\DeveImageOptimizerWPF\\DeveImageOptimizerWPF\\DeveImageOptimizerWPF.csproj : warning NU1701: Package \u0027MvvmLightLibs 5.4.1.1\u0027 was restored using \u0027.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8\u0027 instead of the project target framework \u0027.NETCoreApp,Version=v3.0\u0027. This package may not be fully compatible with your project.\r\n  Restore completed in 951.03 ms for C:\\XGitPrivate\\DeveImageOptimizerWPF\\DeveImageOptimizerWPF\\DeveImageOptimizerWPF.csproj.\r\nC:\\XGitPrivate\\DeveImageOptimizerWPF\\DeveImageOptimizerWPF\\DeveImageOptimizerWPF.csproj : warning NU1701: Package \u0027MvvmLightLibs 5.4.1.1\u0027 was restored using \u0027.NETFramework,Version=v4.6.1, .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8\u0027 instead of the project target framework \u0027.NETCoreApp,Version=v3.0\u0027. This package may not be fully compatible with your project.\r\n  DeveImageOptimizerWPF -\u003e C:\\XGitPrivate\\DeveImageOptimizerWPF\\DeveImageOptimizerWPF\\bin\\Release\\netcoreapp3.0\\win-x64\\DeveImageOptimizerWPF.dll\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ILLink.targets(113,5): error NETSDK1102: Optimizing assemblies for size is not supported for the selected publish configuration. Please ensure that you are publishing a self-contained app. [C:\\XGitPrivate\\DeveImageOptimizerWPF\\DeveImageOptimizerWPF\\DeveImageOptimizerWPF.csproj]\r\n```",
                                           "updatedAt":  "2019-11-15T13:05:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDUyOTYzOQ==",
                                           "createdAt":  "2019-11-15T21:10:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swaroop-sridhar",
                                           "body":  "@Logerfo editing the single-file app once built is not a good idea. The single-file app contains a directory of contents, with hard-coded offsets and sizes. So, there\u0027s a good chance your edit will break the knowledge encoded in this directory.\r\n\r\nThe edit to change the framework seems like a hack to me. My advise would be:\r\n* To have two different projects which target the correct frameworks on Windows and Linux.\r\n* I don\u0027t recommend this -- but if you must edit the configuration file, do it during the build by inserting targets into the publish step (something that runs before `BundlePublishDirectory` target in the SDK). ",
                                           "updatedAt":  "2019-11-15T21:10:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDUzMDM1OQ==",
                                           "createdAt":  "2019-11-15T21:12:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swaroop-sridhar",
                                           "body":  "@devedse You\u0027ve added the `/p:PublishTrimmed=true` setting.\r\nTrimming assemblies for framework-dependent apps is not yet supported (because there\u0027s no framework assemblies to trim).\r\n\r\nBut you can still publish a framework-dependent app as a single-file.\r\n",
                                           "updatedAt":  "2019-11-15T21:12:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDk2MDMwMQ==",
                                           "createdAt":  "2019-11-18T10:45:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "devedse",
                                           "body":  "@swaroop-sridhar ,\r\n\r\nThe startup times of DotNet Core Single File WPF apps is a lot slower then the original ILMerge-ed WPF application build on .net 4.7. Is this to be expected or will this improve in the future?\r\n\r\nBuilds come from my ImageOptimizer: https://github.com/devedse/DeveImageOptimizerWPF/releases\r\n\r\n| Type | Estimated First Startup time | Estimated second startup time | Size | Download link |\r\n| -- | -- | -- | -- | -- |\r\n| .NET 4.7.0 + ILMerge | ~3 sec | ~1 sec | 39.3mb | [LINK](https://github.com/devedse/DeveImageOptimizerWPF/releases/download/1.0.129/DeveImageOptimizerWPF.exe) |\r\n| dotnet publish -r win-x64 -c Release --self-contained=false /p:PublishSingleFile=true | ~10 sec | ~3 sec | 49mb | |\r\n| dotnet publish -r win-x64 -c Release /p:PublishSingleFile=true | ~19 sec | ~2 sec | 201 mb | |\r\n| dotnet publish -r win-x64 -c Release /p:PublishSingleFile=true /p:PublishTrimmed=true | ~15 sec | ~3 sec | 136mb | [LINK](https://github.com/devedse/DeveImageOptimizerWPF/releases/download/1.0.136/DeveImageOptimizerWPF.exe) |\r\n| dotnet publish -r win-x64 -c Release | ~2.5 sec | ~1.5 sec | 223kb for exe (+400mb in dlls) | |",
                                           "updatedAt":  "2019-11-18T10:46:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTIzMTE3MA==",
                                           "createdAt":  "2019-11-18T22:06:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swaroop-sridhar",
                                           "body":  "@devedse, to make sure, is the \"second startup\" the average of several runs (other than the first)? \r\nI\u0027m curious, but lacking any explanation for why the `/p:PublishSingleFile=true /p:PublishTrimmed=true` run should be slower than ``/p:PublishSingleFile=true` run. \r\n\r\nSo, before investigating, I want to make sure the numbers in the \"second startup\" are stable numbers  and that the difference in startup is reproducible,\r\n\r\nAlso, this issue is about single-file plugins, can you please move the perf discussion to a new issue, or to https://github.com/dotnet/coreclr/issues/20287? Thanks.\r\n",
                                           "updatedAt":  "2019-11-18T22:06:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzEwMDgyNw==",
                                           "createdAt":  "2020-04-13T21:13:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @swaroop-sridhar\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-04-13T21:13:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzYyMTA1MA==",
                                           "createdAt":  "2020-04-14T18:55:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Serentty",
                                           "body":  "Would these DLLs be openable by double clicking them, similar to the old CIL EXEs or Java JARs, or would they still require the user to pass them to the ``dotnet`` command manually?",
                                           "updatedAt":  "2020-04-14T18:55:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MzA0NzY3NA==",
                                           "createdAt":  "2020-06-12T03:40:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Serentty",
                                           "body":  "Single-file platform-independent DLLs would be great, but from a UX perspective for a GUI user, they would still need some sort of shell script or LNK shortcut to launch them with the ``dotnet`` loader, no? This is easy on the command line where you can just run ``dotnet Application.dll``, but it\u0027s harder when you\u0027ve just unzipped an application and are opening it from the GUI file browser. That\u0027s certainly far from an insurmountable issue, since it\u0027s easy to cover nearly every platform with just those two tiny files (``.lnk`` and ``.sh``), but it means that things are back up to three files total. What could be done for a portable GUI launching solution?",
                                           "updatedAt":  "2020-06-12T03:40:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MzE3MzM4Nw==",
                                           "createdAt":  "2020-06-12T09:26:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e Would these DLLs be openable by double clicking them, similar to the old CIL EXEs or Java JARs, or would they still require the user to pass them to the dotnet command manually?\r\n\r\nShort answer: no.\r\n\r\nIn order to support double-click like action on anything but executables there would have to be one of two things:\r\n* change to the OS itself - this is how .NET Framework does it - the managed .exe is recognized by the OS loader itself and it redirect execution to the .NET Framework runtime to start the application. One of the main design goals of .NET Core is to not have any component in the OS itself - so we have no plans to support this (not counting what it would mean to do something like this on other platforms)\r\n* use a different extension (at least on Windows, since .dll already means lot of other things) and register some app (dotnet.exe possibly) to open that extension. Not sure if we would be able to do this correctly on all supported platforms (not counting that it makes little sense on platforms without GUI) - that said, this could be done by external software - there\u0027s nothing in the systems to prevent anybody from registering a file extension handler.\r\n\r\nAdditionally for GUI applications (at least on Windows) - running `app.exe` and running `dotnet app.dll` is not completely identical. On Windows the `.exe` contains native resources like the icon, manifest, version and so on. These are things handled by the OS itself, some of them even before the app gets to run any code (icon and to some degree manifest for example). `dotnet.exe` can\u0027t do these (for example the icon), so by running the app via `dotnet.exe` looses some of this functionality. Also `dotnet.exe` is currently a CUI (Console UI) application, which means that when started OS will automatically open a console window for it (unlike GUI apps which don\u0027t get console window) - this is pretty distracting. It\u0027s technically possible for `dotnet.exe` to somehow detect that it\u0027s running a GUI app and close the console, but it console window would still popup/close for a short time, there\u0027s no way to avoid that. (In theory dotnet.exe could be marked as GUI and open console when it needs to, but that is actually a very tricky thing to do correctly in all situations, it\u0027s highly unlikely we would go this route).\r\n\r\nI don\u0027t know enough about GUI systems on Linux/Mac to be able to tell if there\u0027s a more elegant solution on those platforms.",
                                           "updatedAt":  "2020-06-12T09:26:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0MzQ2ODkzMQ==",
                                           "createdAt":  "2020-06-12T20:25:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Serentty",
                                           "body":  "\u003e I don\u0027t know enough about GUI systems on Linux/Mac to be able to tell if there\u0027s a more elegant solution on those platforms.\r\n\r\nOn Linux (and I think it\u0027s the same on Mac), _every_ executable is fundamentally a command-line one, and just has the option of opening a GUI window. If you double click on an executable which doesn\u0027t open a GUI, it will just run and close without anything visible happening. So I don\u0027t think associating a file with ``dotnet`` would be an issue there. The issue of the fact that Windows distinguishes between CUI and GUI executables didn\u0027t occur to me, and it\u0027s certainly a bit of a conundrum.\r\n\r\nI think a good cross-platform solution could be to have a loader which is itself a .NET program, and which includes the native loader as usual (and is therefore platform-specific). Then, it could be associated with a file extension for single-file .NET applications, and when you open one of those applications, hopefully it would be able to call the entry point without having to create an entire new process. Such a tool could be made and distributed separately from .NET itself, but depending on it would probably be too risky at that point, since users would be very unlikely to have it, so the file would just be unrecognized. So I think for such a format to be useful it would have to be part of .NET itself.\r\n\r\nUltimately though, I can see why this is not as large of a priority as it used to be. Opening loose executables off a disk is becoming a lot less common in a world of package management, so having a platform-specific wrapper script to run ``dotnet Application.dll`` isn\u0027t hard for a package maintainer to add even for a closed-source application that they don\u0027t have the source to.",
                                           "updatedAt":  "2020-06-12T20:26:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iD61J",
                                           "createdAt":  "2025-03-12T19:49:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "augustoproiete",
                                           "body":  "Keep this open please. Still a much needed feature",
                                           "updatedAt":  "2025-03-12T19:49:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BQUB8",
                                           "createdAt":  "2025-09-01T12:59:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JensNordenbro",
                                           "body":  "+1",
                                           "updatedAt":  "2025-09-01T12:59:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BSWl6",
                                           "createdAt":  "2025-09-01T15:57:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@augustoproiete @JensNordenbro could you please describe the scenarios you have in mind where this feature is needed? There might be solutions possible for specific cases, the general case as described above is very tricky.",
                                           "updatedAt":  "2025-09-01T15:57:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BStMz",
                                           "createdAt":  "2025-09-01T16:44:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JensNordenbro",
                                           "body":  "Today we are publishing a fwd version of a command line tool. This tool runs on x64, arm64 and on arm32 in practical scenarios.\nOur publisher directory is full of assemblies and then there are folders with stuff from dotnet dependencies within. This makes the user unsure of what to execute. Also it is awquard with a command line spread into many files. \nFrom a usability standpoint we would like to merge all into one item that we can invoke using installed dotnet. \nHaving one variant per rid would just add to the problem. \n\n",
                                           "updatedAt":  "2025-09-01T16:44:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BVMQO",
                                           "createdAt":  "2025-09-02T02:03:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e Today we are publishing a fwd version of a command line tool. This tool runs on x64, arm64 and on arm32 in practical scenarios. Our publisher directory is full of assemblies and then there are folders with stuff from dotnet dependencies within. This makes the user unsure of what to execute. Also it is awquard with a command line spread into many files. From a usability standpoint we would like to merge all into one item that we can invoke using installed dotnet. Having one variant per rid would just add to the problem.\n\nEven if `single file framework dependent apps` (cause this is what this issue essentially wants) were added, you\u0027d still need multiple host executables per arch and OS, or you\u0027d need your users to manually do `dotnet app.dll` from console which is even more likely to confuse them.",
                                           "updatedAt":  "2025-09-02T02:03:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BWZKV",
                                           "createdAt":  "2025-09-02T05:53:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgkgiw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AndrewSav",
                                                                               "createdAt":  "2025-09-02T21:27:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JensNordenbro",
                                           "body":  "I will try like this then:\n+I dont want to distribute a console app of selfcontained size.\n+I dont want to distribute multiple variants of my app\n+I want the customer to service dotnet runtime with cve fixes\n+having the customer write dotnet app.dll is not harder than chmod +x app \u0026. /app",
                                           "updatedAt":  "2025-09-02T05:53:26Z"
                                       }
                                   ],
                         "totalCount":  22
                     },
        "title":  "Support Platform-independent single-file app DLLs",
        "labels":  [
                       "enhancement",
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/847",
        "createdAt":  "2019-12-13T20:10:17Z",
        "number":  847,
        "author":  "ThadHouse",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-10-06T21:03:00Z",
        "body":  "I have some native libraries for my project, which depend on each other. When using a single file exe, these get extracted properly, however because LD_LIBRARY_PATH isn\u0027t set, they don\u0027t load correctly. Setting the extract base dir doesn\u0027t work, since there are subfolders that are not fixed names. Is there any way to get the bundle id at runtime to be able to set up the library path correctly?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOIcDGlQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NjA4ODE2MQ==",
                                           "createdAt":  "2019-12-16T14:37:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@swaroop-sridhar ",
                                           "updatedAt":  "2019-12-16T14:37:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NjIyMDk5OA==",
                                           "createdAt":  "2019-12-16T20:05:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swaroop-sridhar",
                                           "body":  "@ThadHouse  you can use the `Assembly.Location` on the app\u0027s main assembly -- which will point to the extraction location. Can you construct paths to the native DLLs based on this path? ",
                                           "updatedAt":  "2019-12-16T20:05:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NjIyNTkwNw==",
                                           "createdAt":  "2019-12-16T20:19:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ThadHouse",
                                           "body":  "That wouldn\u0027t work correctly. Its not having trouble finding the native library I load via P/Invoke, but instead that library has trouble finding its dependents, since the extracted location is not in the Library Search Path. I guess I could P/Invoke manually into the linux loader and set the library search path before my library loads. Seems a bit convoluted and something that should be supported by default, but it would work.\r\n\r\nDependent libraries are fairly common, so it would be nice to have the extraction location in the search path.",
                                           "updatedAt":  "2019-12-16T20:19:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NjI4MTg3Nw==",
                                           "createdAt":  "2019-12-16T22:46:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swaroop-sridhar",
                                           "body":  "@ThadHouse, I understand the point you\u0027re making -- that the dependent libraries would be found in the current directory, but not from the extraction location.\r\n\r\nI was trying to answer the specific requirement, about locating the extraction location/bundle-ID:\r\n\u003e\u003e  Is there any way to get the bundle id at runtime to be able to set up the library path correctly?\r\n\r\nAt runtime, assembly-location will be the extraction location, and the last component of that path is the bundle-id.",
                                           "updatedAt":  "2019-12-16T22:46:23Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Setting LD_LIBRARY_PATH to single file exe extraction folder",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/35249",
        "createdAt":  "2020-04-21T17:05:18Z",
        "number":  35249,
        "author":  "IIFE",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-11-01T22:29:02Z",
        "body":  "Hi,\r\n\r\nIs it possible to specify a custom extract location for a single file exe without using `DOTNET_BUNDLE_EXTRACT_BASE_DIR`, or somehow apply `DOTNET_BUNDLE_EXTRACT_BASE_DIR` only to a specific exe (not through cmd however)?\r\n\r\nEssentially I am building a self-contained single file app that runs as a Windows Service. The app can be installed by multiple consumers. If two consumers install the same single file exe, then the same temp location is used for the two Windows Service instances that get installed. I don\u0027t want that to happen as that causes uninstallation issues when one service is uninstalled but not another.\r\n\r\nIt would be useful if I can give each installation of the single file exe a unique location to extract to.\r\n\r\nI can\u0027t set `DOTNET_BUNDLE_EXTRACT_BASE_DIR` as an environment variable because that will affect the whole system.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOQcCtA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNzI4OTc0MA==",
                                           "createdAt":  "2020-04-21T17:05:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-04-21T17:05:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNzI5Mzg5MQ==",
                                           "createdAt":  "2020-04-21T17:12:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IIFE",
                                           "body":  "@swaroop-sridhar ",
                                           "updatedAt":  "2020-04-21T17:12:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNzI5NjcwMQ==",
                                           "createdAt":  "2020-04-21T17:16:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @swaroop-sridhar\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-04-21T17:16:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNzMwMDAyMQ==",
                                           "createdAt":  "2020-04-21T17:22:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IIFE",
                                           "body":  "Or potentially another option that ensures the single file exe is extracted to a new location if the existing temp location is being used by another single file exe?",
                                           "updatedAt":  "2020-04-21T17:22:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNzQwNjU4Nw==",
                                           "createdAt":  "2020-04-21T20:49:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IIFE",
                                           "body":  "@swaroop-sridhar I think I may have found a workaround for the issue I\u0027m facing, but would like to double check with you if there are any unwanted side effects.\r\n\r\nThe workaround is when each consumer installs the single file exe, it installs it with a unique name. So for example, if I produce a single file exe called `MySingleFile.exe`, consumer A will install it as `MySingleFile_v1.exe` and consumer B will install it as `MySingleFile_v2.exe`. Given that the extraction logic uses the bundle name to create the extraction directory, this workaround will ensure that each invocation of the exe will extract to a unique location under temp.\r\n\r\nDoes this workaround pose any issues? Or is it OK to rename a bundle file without it causing any side effects, apart from the extraction directory?",
                                           "updatedAt":  "2020-04-21T20:49:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMjAwNTQzMw==",
                                           "createdAt":  "2020-04-30T17:49:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IIFE",
                                           "body":  "@swaroop-sridhar Was wondering if it\u0027s possible to get any advice on the workaround I mentioned above? Seems to work, but I want to be sure there are not side effects.",
                                           "updatedAt":  "2020-04-30T17:49:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMjAxMDIxNQ==",
                                           "createdAt":  "2020-04-30T17:59:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swaroop-sridhar",
                                           "body":  "Yes work-around will be OK, but I think it is better to set `DOTNET_BUNDLE_EXTRACT_BASE_DIR`  to a user-specific directory, ex: somewhere within %HOMEPATH%\r\n ",
                                           "updatedAt":  "2020-04-30T17:59:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMjAxMTg5MQ==",
                                           "createdAt":  "2020-04-30T18:02:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IIFE",
                                           "body":  "@swaroop-sridhar Unfortunately cannot rely on `DOTNET_BUNDLE_EXTRACT_BASE_DIR` because that affects the whole system. It\u0027s a desktop environment where the Windows service runs and not under my control. Is there no possible way to override the extract dir per app?\r\n\r\nI think I read that in .NET 5 there will be no extraction for single file and it will all be mapped in memory any, so the issue should disappear with .NET 5?",
                                           "updatedAt":  "2020-04-30T18:02:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyOTQ3NDgzMA==",
                                           "createdAt":  "2020-05-15T20:43:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swaroop-sridhar",
                                           "body":  "\u003e I think I read that in .NET 5 there will be no extraction for single file and it will all be mapped in memory any, so the issue should disappear with .NET 5?\r\n\r\nYes, I think most apps should be able to run without extraction in .net5. \r\nFor native DLL dependencies, apps will have the option to leave the DLLs unbundled beside the app (default) or include them in the bundled (and extract at runtime). If some apps need to use the extraction option, and still need per-app extraction location, I think the best possible alternative is to implement https://github.com/dotnet/runtime/issues/3844.",
                                           "updatedAt":  "2020-05-15T20:43:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45BwK0",
                                           "createdAt":  "2021-11-01T22:29:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tapika",
                                           "body":  "There is a warp-tool mentioned in #60936 which can perform packing of folder with executable, where target folder is hardcoded within tool itself - in case if you want to use it immediately.",
                                           "updatedAt":  "2021-11-01T22:29:02Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Override single file extract location per app",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/39177",
        "createdAt":  "2020-07-13T09:02:08Z",
        "number":  39177,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-09T19:47:29Z",
        "body":  "I have an application which contains some native library dependencies - either the app itself, or for example WPF app (WPF has several native libraries it relies on).\r\n\r\nIf I publish the app as self-contained but non-single-file, I end up with folder with all of the code in it. If I deploy this folder into an \"admin\" location (that is location which is writable only to admins, and not normal users - for example C:\\Program Files on Windows) and run the app from there, by default the app will not load code outside of its location - that is outside of the \"admin\" location.\r\n\r\nIf I publish the app as self-contained single-file and use `/p:IncludeNativeLibrariesInSingleFile=true` I will get one executable. If I then deploy that to \"admin\" location and run the app, it will extract the native libraries into a temp folder which is a non-admin location (writable by normal user) and load the native libraries from there. This effectively breaks the behavior which I get without single-file publish.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJy-FhQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NzQyNDQ5NQ==",
                                           "createdAt":  "2020-07-13T09:02:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @swaroop-sridhar, @agocke\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-07-13T09:02:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NzQyNTc5Nw==",
                                           "createdAt":  "2020-07-13T09:04:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBKJK2g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2020-07-13T11:51:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I don\u0027t think we should try to solve this in the code - it\u0027s really hard. For example, just trying to detect if the app is running from \"admin\" location is definitely non-trivial (let alone OS specific). That said we should probably document this, and possibly think about SDK experiences around this (warning?, but then most people who don\u0027t deploy to \"admin\" locations would not care).",
                                           "updatedAt":  "2020-07-13T09:04:28Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Single-file running from \"admin\" location may load code from \"non-admin\" location",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/40802",
        "createdAt":  "2020-08-13T21:52:36Z",
        "number":  40802,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-11T18:16:15Z",
        "body":  "Client:\r\n.NET 5 console app which uses a COM object\r\nPublished as new single-file self-contained\r\n\r\nServer:\r\n.NET 5 COM Server implementing the COM object\r\n\r\nUsing reg-free COM, but this should not really matter.\r\n\r\nThe code actually works, but it loads two coreclr.dll modules into the process. The first coreclr comes from the client app (it\u0027s the coreclr.dll which is next to the bundle). The second coreclr is loaded from the global install.\r\n\r\nThe underlying issue is that comhost looks for `hostfxr` in the process, but in case of single-file it doesn\u0027t find it, so it assumes there\u0027s no .NET Core runtime in the process yet, loads `hostfxr` from global install and continues on by loading the runtime from there as well.\r\n\r\nIt works correctly when the client is no a single-file app, or if it\u0027s an FDD single-file app. So the only broken case is single-file SCD app.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKChSbQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzcyODYxNg==",
                                           "createdAt":  "2020-08-13T21:52:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @swaroop-sridhar, @agocke\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-13T21:52:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzczMDQ1MQ==",
                                           "createdAt":  "2020-08-13T21:57:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "This is not new - we\u0027ve realized this problem pretty early on (unfortunately sort-of forgot since). Writeup of the problem I did some time ago:\r\n\r\n### Native component hosting with single-file bundles\r\nNative component hosting is a set of functionality which allows native code to dynamically load managed code into a process. If the process is .NET Core application, this allows external callers to load managed code into the existing runtime in the process. This is currently done by finding the `hostfxr` module in the process and calling its exports. With single-exe self-contained bundle, there is no `hostfxr` module anymore. So the existing solution doesn\u0027t work anymore.\r\n\r\nWe will need to find a new solution and also consider providing some way to solve backward compatibility.\r\n\r\n*TODO - determine the size implications* - this may need to include code in the bundle which will not be used by normal app startup (APIs to be called from the native hosting scenarios).\r\n\r\n#### New solution\r\nFor now I suggest we wait for the diagnostics team to decide on a solution which the debuggers will use to find and contact the runtime in a process. That is essentially the same problem. If the debugger solution is acceptable for native hosting as well, we should use it. It\u0027s easier to maintain and support one way of doing it.\r\n\r\nIn any case the single-exe bundle will need to include code to support native hosting, so basically the equivalent functionality to existing `hostfxr` and `hostpolicy` which handles these cases. That should not be a big amount of code hopefully as it can be specialized for the case where runtime already exists (unlike existing hosting which has to handle also the case where there\u0027s no runtime and starting it).\r\n\r\nThe new solution will also mean that all hosts (`comhost`, `ijwhost`, `winrthost` and `nethost`) will need to support the new way of finding the runtime in the process. This means new versions of these components.\r\n\r\nUnfortunately, the `nethost` as is will very likely not be possible to patch like that. Currently it exposes a single API which returns a full path to the `hostfxr.dll`, which the calling code loads through `LoadLibrary` and gets exports from to call to perform the actual hosting operations. Since single-exe self-contained bundles won\u0027t have `hostfxr.dll` anywhere, there\u0027s no path this can return now. It will probably mean designing a new API in `nethost` which is more general. Could be something which returns an \"interface\" (struct of function pointers) which exposes the same functionality as the `hostfxr` exports. For cases where there is a `hostfxr` this would basically return the `hostfxr` exports (so instead of returning a path, it would load `hostfxr` as well), or in the case of single-exe it would somehow find the runtime and return functions from it.\r\n\r\n#### Backward compatibility consideration\r\nNo matter what the new solution looks like, it\u0027s not going to be compatible with .NET Core 3.0 native hosting support. This means that for example COM object implemented in .NET Core 3.0 will not be able to load into a .NET 5 single-exe self-contained app (even though it would allow it through roll forward policies).\r\n\r\nWe could either say that such scenario is now not supported for single-exe self-contained apps.\r\n\r\nWith the new hosts as described above, we could support rebuilding the existing 3.0 components with a new SDK which would include the new hosts with the new functionality. There would be no need to change the components themselves, basically just a forced rebuild.\r\n\r\nThere\u0027s also a possibility of solving this for at least some cases automatically. On machines which would have globally installed `hostfxr` from .NET 5 (or higher), trying to load for example a COM component into a process will:\r\n* Look for `hostfxr` module in the process - which it won\u0027t find for single-exe bundle\r\n* as a fallback look for `hostfxr` in global install locations - which it would find.  \r\n\r\nThe new .NET 5 `hostfxr` could include the logic to find the existing runtime in the process (for single-exe bundles) and correctly implement its functionality (just like it does today for normal apps)  \r\nThis way even existing unchanged 3.0 components would be able to load into single-exe bundles if the machine has .NET 5 installed globally.  \r\nNote that there\u0027s a relatively high chance that the machine will have at least .NET Core 3.0 installed, since COM object registration is not possible without it (COM object can\u0027t be self-contained), so we might be able to solve this by shipping an update to 3.0/3.1 `hostfxr`.\r\n\r\nThis solution would also us to provide an easy workaround for users - if they run into the problem of .NET 5 single-exe not able to load some 3.0 component, just install .NET 5 runtime on the machine and it should work (since that will put .NET 5 `hostfxr` on the machine).\r\n\r\nSuch solution is obviously not perfect, but it\u0027s the best one I can think of without changing already shipped 3.0 code.\r\n\r\nAt the very least we should try to block this actively in 3.1, so that 3.1 COM objects get a consistent failure behavior. See [dotnet/core-setup#8299](https://github.com/dotnet/core-setup/issues/8299) for more details.\r\n",
                                           "updatedAt":  "2020-08-13T21:57:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzczMTA0NA==",
                                           "createdAt":  "2020-08-13T21:59:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "See also discussion in https://github.com/dotnet/runtime/issues/3773: The outcome seems to be that it\u0027s OK to not actively block this scenario if we document it as unsupported (we don\u0027t support two runtimes in one process).",
                                           "updatedAt":  "2020-08-13T21:59:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzczMTE4MQ==",
                                           "createdAt":  "2020-08-13T21:59:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "/cc @elinor-fung @AaronRobinsonMSFT @agocke @VSadov ",
                                           "updatedAt":  "2020-08-13T21:59:33Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Using .NET Core COM server from new .NET Core Single-File app results in two runtimes in process",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/41482",
        "createdAt":  "2020-08-27T22:25:39Z",
        "number":  41482,
        "author":  "jkotalik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAt5xg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "richardtallent",
                                            "createdAt":  "2021-05-21T17:37:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thinkif",
                                            "createdAt":  "2021-08-03T04:03:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ZeBobo5",
                                            "createdAt":  "2022-05-04T07:07:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Hoaas",
                                            "createdAt":  "2022-05-05T08:42:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "diontools",
                                            "createdAt":  "2022-09-02T15:35:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "m33p",
                                            "createdAt":  "2023-03-04T20:16:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mhguelleh",
                                            "createdAt":  "2023-09-12T21:23:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YZahringer",
                                            "createdAt":  "2025-04-01T11:45:49Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2025-04-28T17:35:22Z",
        "body":  "For ASP.NET Core, we would like to support SingleFile outputs when hosting with IIS. Today, IIS itself loads hostfxr.dll natively and calls hostfxr_main, passing in the app.dll. Today, this won\u0027t quite work out of the box with single file support in .NET 5.\r\n\r\n- [ ] Today, we assume that the single file is the one unpacking the main module. Hostfxr, hostpolicy, and the runtime need to be aware they can be loaded by a random file.\r\n- [ ] Making sure we can find the native dlls aspnetcorev2_inprocess.dll in the shared framework\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqQnWOg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MjIyMTY4MA==",
                                           "createdAt":  "2020-08-27T22:25:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-08-27T22:25:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MjIyMTc1NA==",
                                           "createdAt":  "2020-08-27T22:25:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @swaroop-sridhar, @agocke\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-27T22:25:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_kPpR",
                                           "createdAt":  "2022-03-14T07:34:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbMt6Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "kdlslyv",
                                                                               "createdAt":  "2022-09-13T16:08:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "AscarGb",
                                                                               "createdAt":  "2022-10-15T18:04:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "celluj34",
                                                                               "createdAt":  "2022-11-15T16:32:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "xantari",
                                                                               "createdAt":  "2022-11-19T15:26:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mzuvin",
                                                                               "createdAt":  "2022-12-14T07:48:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "ErcinDedeoglu",
                                                                               "createdAt":  "2023-01-21T05:41:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "spajce",
                                                                               "createdAt":  "2023-04-23T20:25:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "pankaj-nikam",
                                                                               "createdAt":  "2023-06-24T05:29:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "FunksMaName",
                                                                               "createdAt":  "2023-06-26T07:11:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "mhguelleh",
                                                                               "createdAt":  "2023-09-12T21:13:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pantonis",
                                                                               "createdAt":  "2023-09-13T02:55:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "pantonis",
                                                                               "createdAt":  "2023-09-13T02:55:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "ceee",
                                                                               "createdAt":  "2024-08-18T21:59:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "aliajboy",
                                                                               "createdAt":  "2024-11-02T12:17:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "rudzkipl",
                                                                               "createdAt":  "2025-01-29T20:52:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "replaysMike",
                                                                               "createdAt":  "2025-07-20T03:46:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "replaysMike",
                                                                               "createdAt":  "2025-07-20T03:46:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  17
                                                         },
                                           "author":  "pantonis",
                                           "body":  "Is this planned for .NET 10?",
                                           "updatedAt":  "2022-03-14T07:34:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_lZcB",
                                           "createdAt":  "2022-03-14T13:12:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEgu5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rudzkipl",
                                                                               "createdAt":  "2025-01-29T20:52:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "BernhardNinaus",
                                           "body":  "The problem is, that it also works without this feature...\r\n\r\nBut it would be really nice to see, I just like a clean output.",
                                           "updatedAt":  "2022-03-14T13:12:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TZeLM",
                                           "createdAt":  "2023-01-21T05:47:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxa8lQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mhguelleh",
                                                                               "createdAt":  "2023-09-12T21:21:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bernd5",
                                                                               "createdAt":  "2024-09-08T12:18:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ErcinDedeoglu",
                                           "body":  "Could you provide information for this case, please? Is there any roadmap for this? Or are you planning to remove IIS support? Windows Server 2022 still depends on IIS. There are better solutions than a bunch of files. The year is 2023. @MichalStrehovsky \r\n\r\nLet me talk clearly; this forces us to switch to Linux OS.",
                                           "updatedAt":  "2023-01-21T05:47:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TZf2H",
                                           "createdAt":  "2023-01-21T06:40:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC0m_Sg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Squirrelies",
                                                                               "createdAt":  "2023-01-23T02:05:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "There\u0027s no plan to remove IIS support, but there\u0027s no plan to support single file deployments for IIS in process (or NativeAOT for that matter).\r\n\r\n\u003e Let me talk clearly; this forces us to switch to Linux OS.\r\n\r\nIs this because you *have* to use single file deployments for some purpose? ",
                                           "updatedAt":  "2023-01-21T06:42:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mTz8r",
                                           "createdAt":  "2023-09-12T21:22:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbMuAw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "replaysMike",
                                                                               "createdAt":  "2025-07-20T03:47:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mhguelleh",
                                           "body":  "I second @ErcinDedeoglu, we need a clean way to publish a solution as a single file for IIS deployment (in-process).",
                                           "updatedAt":  "2023-09-12T21:22:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pCdY6",
                                           "createdAt":  "2025-04-28T17:35:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aliajboy",
                                           "body":  "so what\u0027s the news on this issue? anything done yet?",
                                           "updatedAt":  "2025-04-28T17:35:21Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Support SingleFile FDD published outputs with a native host.",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/41832",
        "createdAt":  "2020-09-03T21:52:43Z",
        "number":  41832,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-19T21:40:36Z",
        "body":  "On Linux, we load bundled assemblies via mmap. R2R code sections are individually mapped at an address adjusted for the offset within the bundle and assembly, and fixed up at load time.\r\n\r\nOn ARM64, we use adrp; add instructions to encode pointers in the instruction stream. Adrp computes a page-relative offset, but these are not fixed up at load time, so we must ensure that the page alignment of R2R code does not change.\r\n\r\nThis imposes a requirement on the Linux ARM64 bundler to keep R2R assemblies aligned at 4K in the bundle. This issue tracks removing this alignment requirement by adding fixups or other means.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOi31XA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4Njc4Mjg4NA==",
                                           "createdAt":  "2020-09-03T21:52:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-09-03T21:52:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NzIyMzE0OA==",
                                           "createdAt":  "2020-09-04T15:33:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @swaroop-sridhar, @agocke\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-04T15:33:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4OTAzMTM0MA==",
                                           "createdAt":  "2020-09-08T17:37:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Fixed in https://github.com/dotnet/runtime/pull/41907",
                                           "updatedAt":  "2020-09-08T17:37:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4OTA0NzgwNw==",
                                           "createdAt":  "2020-09-08T18:09:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBPwvfQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "agocke",
                                                                               "createdAt":  "2020-09-08T18:28:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sbomer",
                                           "body":  "Keeping this open to track the long-term fix.",
                                           "updatedAt":  "2020-09-08T18:09:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46LfVc",
                                           "createdAt":  "2021-11-23T01:31:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "No-copy loading from bundle on Windows may impose similar alignment requirements on Windows. \r\nI\u0027d like to look at this issue as well. \r\n\r\nMy current thinking is that the alignment in the bundle is only needed when\r\n- the PE has native code in it  (i.e. R2R).\r\n- when the file is substantially larger than the alignment requirement. - For example  \u003e 16K  on Arm64/linux",
                                           "updatedAt":  "2021-11-23T01:37:47Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Remove alignment requirement for ARM64 R2R code",
        "labels":  [
                       "tenet-performance",
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/42501",
        "createdAt":  "2020-09-20T10:19:08Z",
        "number":  42501,
        "author":  "ahopper",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-01-02T20:41:50Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\nIf you double click on the executable produced with PublishSingleFile on linux you get \u0027unknown file type\u0027 and depending on the distro an option to make executable and run or an app selector to run it with. The executable will run perfectly from the command prompt.  The file is marked as executable but the type is application/x-sharedlib\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\n### Configuration\r\nnet5.0 rc1\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\n\r\n### Regression?\r\nThe output without publishsinglefile will run when clicked\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Other information\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOO9RY8w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5NTc2OTkwMA==",
                                           "createdAt":  "2020-09-20T10:19:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @safern, @viktorhofer\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-20T10:19:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5NTc5ODA2Ng==",
                                           "createdAt":  "2020-09-20T15:11:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-20T15:11:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5NjMyMzE1Nw==",
                                           "createdAt":  "2020-09-21T19:27:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "This looks like a limitation that\u0027s specific to the Nautilus file manager. Reading the documentation, Nautilus uses heuristics, including mimetype, to figure out whether an application is \"executable.\" This is at best partially under our control. I don\u0027t think it\u0027s a good idea to make any changes which may or may not fix the problem. If we can get a definitive fix that doesn\u0027t have other bad effects we\u0027d be happy to take it, but I think we need guidance from a Nautilus expert on what the right change is.",
                                           "updatedAt":  "2020-09-21T19:27:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5NjM0ODQ4MQ==",
                                           "createdAt":  "2020-09-21T20:15:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ahopper",
                                           "body":  "Thanks for looking at this. My app built with netcore3.1 runs from clicking on the file, this is neat and allows simple xcopy deployment.  Something has obviously changed in 5.0 I guess it is the e_type field in the elf header but I\u0027m no linux or Nautilus expert.",
                                           "updatedAt":  "2020-09-21T20:15:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc471Fjz",
                                           "createdAt":  "2022-01-02T20:41:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sonik-br",
                                           "body":  "I think I have hit the same problem.\r\nEven if I target netcore3.1 it does not work anymore.\r\nPosted on #63267",
                                           "updatedAt":  "2022-01-02T20:41:50Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Executable won\u0027t run from double click with PublishSingleFile on 5.0 rc1 on linux",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43010",
        "createdAt":  "2020-10-04T09:24:28Z",
        "number":  43010,
        "author":  "tomrus88",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCU1RgA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Zero3",
                                            "createdAt":  "2022-03-27T13:39:23Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-10-26T19:45:00Z",
        "body":  "In .NET Core 3.1 it used to be AppContext.BaseDirectory, but that seems to be changed in .NET 5.0 to return a path where bundle executable is instead of extraction path.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOajQH-Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzI5MjkwNw==",
                                           "createdAt":  "2020-10-04T18:04:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-04T18:04:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzQxODE1MA==",
                                           "createdAt":  "2020-10-05T06:08:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "By default, in 5.0 the binaries are not extracted at all, so there is no extraction directory.",
                                           "updatedAt":  "2020-10-05T06:08:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzQzMDUwNg==",
                                           "createdAt":  "2020-10-05T06:38:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tomrus88",
                                           "body":  "But most of single file apps have native dependencies that will be extracted if you use IncludeNativeLibrariesForSelfExtract option (and 99% of users are gonna use this option, because they want single file). So in nearly 100% of cases something will be extracted and will never cleaned up because there\u0027s no way to get path to extraction folder...\r\n\r\nBlank WPF app is extracting 9 native dll\u0027s with total size of 16MB. That means with each update an additional 16 MB of disk space will be wasted. And this is just blank app... Some real world app can have much more native dependencies and waste much more disk space with each update...\r\n",
                                           "updatedAt":  "2020-10-05T06:51:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzQzMjI1OA==",
                                           "createdAt":  "2020-10-05T06:42:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Fabi",
                                           "body":  "\u003e By default, in 5.0 the binaries are not extracted at all, so there is no extraction directory.\r\n\r\nNative binaries are ALWAYS extracted.",
                                           "updatedAt":  "2020-10-05T06:42:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzQ0MzM3OA==",
                                           "createdAt":  "2020-10-05T07:06:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tomrus88",
                                           "body":  "Another example where extraction folder path is required: let\u0027s assume I want to include some data file (I need to have read/write access to this file, so resources is not an option) with my app and bundle in into single file, this file will be extracted along with all native dependencies to **unknown folder**. How do I specify path to this file in the code so I can work with data in that file?",
                                           "updatedAt":  "2020-10-05T07:10:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzU3OTgyNg==",
                                           "createdAt":  "2020-10-05T11:47:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "Related comment https://github.com/dotnet/runtime/issues/43014#issuecomment-703252696\r\n\u003e https://github.com/dotnet/designs/blob/main/accepted/2020/single-file/design.md in .NET 5 anything except managed code will not be bundled in the application and should be left next to the main .exe.",
                                           "updatedAt":  "2020-10-05T11:47:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzczNTI5OA==",
                                           "createdAt":  "2020-10-05T16:15:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCmIV4g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Federerer",
                                                                               "createdAt":  "2021-01-12T23:27:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mgamerz",
                                                                               "createdAt":  "2022-06-14T15:09:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TXAE",
                                                                               "createdAt":  "2022-07-11T21:31:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "tomrus88",
                                           "body":  "Leaving everything but managed code next to exe will defeat whole point of using single file.",
                                           "updatedAt":  "2020-10-05T16:15:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzczNzMwMQ==",
                                           "createdAt":  "2020-10-05T16:18:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB6GFQQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "wegylexy",
                                                                               "createdAt":  "2021-09-13T16:15:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Fabi",
                                           "body":  "\u003e Related comment [#43014 (comment)](https://github.com/dotnet/runtime/issues/43014#issuecomment-703252696)\r\n\u003e \r\n\u003e \u003e https://github.com/dotnet/designs/blob/main/accepted/2020/single-file/design.md in .NET 5 anything except managed code will not be bundled in the application and should be left next to the main .exe.\r\n\r\nIt\u0027s only half related to that imo. Having native binaries not bundled into a bundle is really stupid design and there is  NO reason to not implement loading native binaries from memory. It\u0027s possible, not hard to do and works fine. It\u0027s probably not even much effort to implement it in the current bundle process.",
                                           "updatedAt":  "2020-10-05T16:18:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDA3MDI3NQ==",
                                           "createdAt":  "2020-10-06T06:52:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e there is NO reason to not implement loading native binaries from memory\r\n\r\nDo you have pointers on how to do that? Windows doesn\u0027t have APIs for this. .NET 5 no longer extracts on Linux because there it\u0027s possible.\r\n\r\nHandwritten PE loaders, while appearing to sort-of-work don\u0027t play well with the rest of Windows so things end up being broken in subtle and hard to troubleshoot ways (from unimportant things like the module not being visible in tools like Process Explorer, through not being able to debug the module with native debuggers, etc.).",
                                           "updatedAt":  "2020-10-06T06:52:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDA3NjAzNA==",
                                           "createdAt":  "2020-10-06T07:05:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "\u003e I want to include some data file (I need to have read/write access to this file, so resources is not an option) with my app and bundle in into single file\r\n\r\nOur recommendation here is that you should write that file yourself to a temporary folder. This is much more robust and portable.",
                                           "updatedAt":  "2020-10-06T07:05:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDEyNTgzNg==",
                                           "createdAt":  "2020-10-06T08:48:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Fabi",
                                           "body":  "\u003e \u003e there is NO reason to not implement loading native binaries from memory\r\n\u003e \r\n\u003e Do you have pointers on how to do that? Windows doesn\u0027t have APIs for this. .NET 5 no longer extracts on Linux because there it\u0027s possible.\r\n\u003e \r\n\u003e Handwritten PE loaders, while appearing to sort-of-work don\u0027t play well with the rest of Windows so things end up being broken in subtle and hard to troubleshoot ways (from unimportant things like the module not being visible in tools like Process Explorer, through not being able to debug the module with native debuggers, etc.).\r\n\r\nI\u0027m sure that mirroring LoadLibrary from in C# is no issue nowadays and works fine if implemented correctly. And that part would only be required for the actual native library that is shipped. All other native libraries that are required (like kernel32 etc.) for doing this can still be loaded with calls like LoadLibrary. I think there are already a bunch of libraries that even support doing that. Another way is to do it as runtime support with a c(++) implementation of course.",
                                           "updatedAt":  "2020-10-06T08:48:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDEyNjM0NA==",
                                           "createdAt":  "2020-10-06T08:49:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Fabi",
                                           "body":  "\u003e \u003e I want to include some data file (I need to have read/write access to this file, so resources is not an option) with my app and bundle in into single file\r\n\u003e \r\n\u003e Our recommendation here is that you should write that file yourself to a temporary folder. This is much more robust and portable.\r\n\r\nThis doesn\u0027t solve the issue of being able to cleanup data on app updates tho.",
                                           "updatedAt":  "2020-10-06T08:49:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDM5MzYxMw==",
                                           "createdAt":  "2020-10-06T16:21:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "\u003e This doesn\u0027t solve the issue of being able to cleanup data on app updates tho.\r\n\r\nWhy not? It\u0027s not automatically cleaned up for you, but it\u0027s a file like any other. You can delete it if you want.",
                                           "updatedAt":  "2020-10-06T16:21:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDQxMzY4Mw==",
                                           "createdAt":  "2020-10-06T16:57:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tomrus88",
                                           "body":  "\u003e Why not? It\u0027s not automatically cleaned up for you, but it\u0027s a file like any other. You can delete it if you want.\r\n\r\nAnd there we come to original problem of API that returns extraction path being unavailable...",
                                           "updatedAt":  "2020-10-06T16:57:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDQxNTI1Mw==",
                                           "createdAt":  "2020-10-06T17:00:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Fabi",
                                           "body":  "\u003e \u003e This doesn\u0027t solve the issue of being able to cleanup data on app updates tho.\r\n\u003e \r\n\u003e Why not? It\u0027s not automatically cleaned up for you, but it\u0027s a file like any other. You can delete it if you want.\r\n\r\nWhat tom said!!!111!",
                                           "updatedAt":  "2020-10-06T17:00:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDQxODM3OA==",
                                           "createdAt":  "2020-10-06T17:05:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB6GG3A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "wegylexy",
                                                                               "createdAt":  "2021-09-13T16:18:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "agocke",
                                           "body":  "Sorry, I\u0027m slow this morning, I think I finally understand the scenario.\r\n\r\nYou want to update by downloading the new app, then pass the extraction directory to the new app when you invoke it, so it can clean up the old directories.\r\n\r\nUnfortunately, if you\u0027re using only `IncludeNativeLibrariesForSelfExtract`, there\u0027s no supported way to access the native libraries aside from P/Invoking into them.\r\n\r\nIf you\u0027re using the compat switch `IncludeAllContentForSelfExtract`, then you will replicate the 3.1 behavior, in which case AppContext.BaseDirectory should still be the extraction directory.",
                                           "updatedAt":  "2020-10-06T17:34:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDQzNjYwMw==",
                                           "createdAt":  "2020-10-06T17:38:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "There actually may be a workaround if you\u0027re only extracting native libraries: `AppContext.GetData(\"NATIVE_DLL_SEARCH_DIRECTORIES\")` should contain both the exe path and the native DLL extraction path, separated by a `:`.\r\n\r\n@vitek-karas @elinor-fung is `NATIVE_DLL_SEARCH_DIRECTORIES a decent workaround for finding the native library extraction path if an app wants to delete its files after execution?",
                                           "updatedAt":  "2020-10-06T17:38:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDQ1MjM0NQ==",
                                           "createdAt":  "2020-10-06T18:06:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODPE9Hg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichalStrehovsky",
                                                                               "createdAt":  "2020-10-06T18:23:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kodfodrasz",
                                                                               "createdAt":  "2023-12-10T14:33:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e AppContext.GetData(\"NATIVE_DLL_SEARCH_DIRECTORIES\")\r\n\r\nIt\u0027s only sort of a workaround - that property can contain more than one path, in which case the app would have to reason about which one is the extraction path.\r\n\r\n\u003e I\u0027m sure that mirroring LoadLibrary from in C# is no issue nowadays and works fine if implemented correctly. \r\n\r\nDuplicating all of `LoadLibrary` on Windows is.... really hard (regardless of which language I chose to do it in). Doing something which works for simple native .dlls might be possible in the basic sense (as @MichalStrehovsky pointed out, it would still break things like debuggers), but more complex native dlls... I would not even try to attempt that. For us it would be basically endless source of weird bugs - and lot of things simply would not work (not only debuggers, but for example native Win32 resources would not be loadable from such a library - because the Win32 APIs to access native resources would not know about the module). \r\n\r\nWe had to implement something \"like\" this to be able to load Ready2Run images directly from the bundle - Ready2Run images are basically normal native .dll files with added \"IL\" and normally they are loaded via `LoadLibrary` by the runtime. And even this was definitely not easy to do - and that\u0027s for native libraries which we know exactly how they look like and what they can and cannot contain.\r\n\r\n\u003e Leaving everything but managed code next to exe will defeat whole point of using single file.\r\n\r\nI understand that for some customers exactly one file is the only desired behavior. That said when we asked people why they want to use single-file, quite a few replied that they don\u0027t want ~200 files because it\u0027s hard to navigate, but having a few files would work for them. I do agree that calling the feature \"single-file\" while it\u0027s not always \"single\" is a bit weird.\r\n\r\nAs far as I know the only robust true single-file solution would be to use platform linker and require all native dependencies to be provided as object files or libs.",
                                           "updatedAt":  "2020-10-06T18:06:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDUwMDAzMg==",
                                           "createdAt":  "2020-10-06T19:19:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tomrus88",
                                           "body":  "Sure, that `NATIVE_DLL_SEARCH_DIRECTORIES` can be used as dirty workaround, but things would have been much easier and clean if something like this https://github.com/dotnet/runtime/issues/29456 (now closed) was added...",
                                           "updatedAt":  "2020-10-06T19:22:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDUwMjg5Mw==",
                                           "createdAt":  "2020-10-06T19:25:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "There were a number of different APIs there, and I think some don\u0027t make sense in light of the long-term plan to always embed managed assemblies and only extract native libraries, but an API for accessing the native DLL extraction path doesn\u0027t seem unreasaonable.\r\n\r\nIt\u0027s way too late to take this kind of change for 5.0, but I\u0027d be happy to keep this or another issue around for tracking an API addition to find the native DLL extraction directory in 6.0.",
                                           "updatedAt":  "2020-10-06T19:25:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDY2NjIzOA==",
                                           "createdAt":  "2020-10-07T03:14:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "\u003e there is NO reason to not implement loading native binaries from memory\r\nDo you have pointers on how to do that? Windows doesn\u0027t have APIs for this. .NET 5 no longer extracts on Linux because there it\u0027s possible.\r\n\r\nIf it is not for 6.0 but for future why not ask Windows team to add this API?\r\n",
                                           "updatedAt":  "2020-10-07T03:14:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDc1NDQ3OA==",
                                           "createdAt":  "2020-10-07T07:36:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBSsGHA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "agocke",
                                                                               "createdAt":  "2020-10-07T07:49:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e If it is not for 6.0 but for future why not ask Windows team to add this API?\r\n\r\nIt will not work on Windows 7, the best operating system in the world (sharing the spot with Windows XP).",
                                           "updatedAt":  "2020-10-07T07:36:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDc2NDY2Mw==",
                                           "createdAt":  "2020-10-07T07:57:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBSsLyg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iSazonov",
                                                                               "createdAt":  "2020-10-07T08:00:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "agocke",
                                           "body":  "\u003e If it is not for 6.0 but for future why not ask Windows team to add this API?\r\n\r\nWe are in discussions, but loading shared libraries from memory is actually not possible even in POSIX. We would likely have to create a custom implementation for every operating system variant, including every Unix variant.\r\n\r\nSurveying the options, it looks like almost everyone chooses to simply create temporary files for shared libraries. It just doesn\u0027t seem worth the trouble/complexity to do otherwise.\r\n\r\nThat said, if simple, reliable implementations were to be proposed, I think we\u0027d be happy to take them.",
                                           "updatedAt":  "2020-10-07T07:57:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42vRG2",
                                           "createdAt":  "2021-09-13T16:23:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "For WPF, I\u0027ve got a workaround. https://github.com/dotnet/runtime/discussions/59017\r\n\r\nBut if I want to build a library which may be used by non-WPF, I\u0027ll need a generic way to get the extraction directory.",
                                           "updatedAt":  "2021-09-13T16:23:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42x-MP",
                                           "createdAt":  "2021-09-14T11:40:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB6T_CA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wegylexy",
                                                                               "createdAt":  "2021-09-14T18:51:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e For WPF, I\u0027ve got a workaround. #59017\r\n\u003e But if I want to build a library which may be used by non-WPF, I\u0027ll need a generic way to get the extraction directory.\r\n\r\nIf you know that the process loaded a native library and which one it was (or you can make it do that), then you can use the same trick as in #59017 on any app, not just WPF.\r\n\r\nPersonally I don\u0027t think we should add a full public managed API for this (the API is very specific to one deployment option, and defining its behavior in all other cases would be weird). I can see us adding a new runtime property, so that apps could access this via something like `AppContext.GetData(\"SINGLE_FILE_EXTRACTION_PATH\")` (or similar).",
                                           "updatedAt":  "2021-09-14T11:40:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qLFeN",
                                           "createdAt":  "2023-10-26T14:52:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "reijerh",
                                           "body":  "Ran into this issue because our project distributes a native `.exe` file that we want to start in code via `Process`.\r\n\r\n`IncludeNativeLibrariesForSelfExtract` _does_ include this .exe, but it extracts it to a location I can\u0027t access from code.\r\n\r\nI guess I have to use `IncludeAllContentForSelfExtract`, which is a pity because now everything from the build will be included _and_ the managed libs will now be loaded from disk rather than from memory. Ah well.",
                                           "updatedAt":  "2023-10-26T14:52:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qNAf5",
                                           "createdAt":  "2023-10-26T19:45:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLHiJw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Fabi",
                                                                               "createdAt":  "2023-10-27T07:43:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stesee",
                                                                               "createdAt":  "2023-10-27T08:50:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@reijerh did you consider storing the executable as a managed resource stream and writing it to disk yourself when necessary? It would also give you full control over where the executable lives on disk (The default extraction location for .NET is sometimes not ideal). It would also speed up startup of your app, since you would not need to extract it to disk unless really necessary, unlike the default extraction which happens on startup always.",
                                           "updatedAt":  "2023-10-26T19:45:00Z"
                                       }
                                   ],
                         "totalCount":  27
                     },
        "title":  "How to get single file extraction path in .NET 5.0?",
        "labels":  [
                       "area-Single-File",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43014",
        "createdAt":  "2020-10-04T12:24:52Z",
        "number":  43014,
        "author":  "mageshsankar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-10-05T18:20:26Z",
        "body":  "WPF Application crash when publish an Self Contained Exe\r\n\r\n### Description\r\n\r\nApplication Running on NetCore 5.0\r\n\r\nI have published WPF application as Self Contained Exe, and it fails to load an document file(**Build Action :** Copy Always) so application crash on load document. \r\n\r\n![image](https://user-images.githubusercontent.com/55440472/95015419-6bcf9b80-066a-11eb-8a3b-84f6f5f9909a.png)\r\n\r\n**Issue:** \r\n\r\n1. Self Contained application failed lods the output directory files\r\n\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONHZ_9g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzI0ODA1Nw==",
                                           "createdAt":  "2020-10-04T12:25:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-04T12:25:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzI1MTk1Mg==",
                                           "createdAt":  "2020-10-04T12:58:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-04T12:58:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzI1MjY5Ng==",
                                           "createdAt":  "2020-10-04T13:04:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Thanks for trying out single-file. Per the design document https://github.com/dotnet/designs/blob/main/accepted/2020/single-file/design.md in .NET 5 anything except managed code will not be bundled in the application and should be left next to the main `.exe`.\r\n\r\nCan you please check that after publishing your application as single-file the `.docx` file is in the published folder next to the application executable?\r\n\r\nIf so, the right way to get to it from the code is to use `AppContext.BaseDirectory` which will point to the directory with the application executable.\r\n\r\nIdeally if you want to always ship this file with your application it would be better to embed it as a resource to one of your managed assemblies and load it using the `ResourceManager` APIs. This approach will work the same regardless of how you publish your application.",
                                           "updatedAt":  "2020-10-04T13:04:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzI1Mjg3MQ==",
                                           "createdAt":  "2020-10-04T13:06:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Actually I thought this was a single-file publish - but you only mention self-contained. Can you please specify how you published your application? (ideally the command line or VS settings)",
                                           "updatedAt":  "2020-10-04T13:06:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzI1MzQ5NA==",
                                           "createdAt":  "2020-10-04T13:10:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mageshsankar",
                                           "body":  "Hi @vitek-karas \r\n![image](https://user-images.githubusercontent.com/55440472/95016495-f5826780-0670-11eb-9f5a-05180af4a483.png)\r\n\r\n![image](https://user-images.githubusercontent.com/55440472/95016484-e56a8800-0670-11eb-97f6-e578e85b644b.png)\r\n\r\n![image](https://user-images.githubusercontent.com/55440472/95016506-0cc15500-0671-11eb-83e3-18905a3366c2.png)\r\n\r\n\r\nI have used publish options using above method.",
                                           "updatedAt":  "2020-10-04T13:10:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzI1NDAyMw==",
                                           "createdAt":  "2020-10-04T13:14:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Thanks - in that case my comment about single-file should apply.",
                                           "updatedAt":  "2020-10-04T13:14:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzI1NTAzMg==",
                                           "createdAt":  "2020-10-04T13:21:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mageshsankar",
                                           "body":  "Hi @vitek-karas \r\n\r\nwhich means self contained exe does not support to read/write output directory files? I should use single-file method right?",
                                           "updatedAt":  "2020-10-04T13:21:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzMwNjQ0NQ==",
                                           "createdAt":  "2020-10-04T19:48:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I don\u0027t know what you mean...\r\n\r\nSelf-contained in .NET Core SDK refers to applications which carry the .NET Core framework with them - they don\u0027t require .NET Core preinstalled on the machine to run. This typically makes them large (~70MB or more). Making application self-contained should not in any way affect where/how additional files are packaged with the application.\r\n\r\nSingle-file applications are packaged into much fewer files (ideally just one). Single-file can be combined with self-contained. On Windows due to some limitations typical HelloWorld self-contained single-file application will have one large `application.exe` and several smaller native `.dll` files next to it (for example `coreclr.dll`).\r\n\r\nIn .NET 5 single-file application run directly from the `.exe` without writing anything to disk on startup. So if your application wants to carry additional data files with it, it can do it in multiple ways:\r\n* Put them next to the `,exe` (this is the default behavior of the SDK) - in this case such files should behave almost exactly like in non-single-file applications. The only difference is that when the application is looking for them it should use `AppContext.BaseDirectory` to determine their location (specifically `Assembly.Location` will NOT work).\r\n* Put them as embedded resources into a managed assembly. In this case there\u0027s no file on disk (and so less files to make up an application). The downside is that there\u0027s no file, so if the application needs to use that asset as a real file it would have to copy it somewhere at runtime.\r\n\r\nIt\u0027s hard for me to guess what exactly your application is doing, specifically:\r\n- How is it including the data file in the project file?\r\n- How is it trying to access that file at runtime (how does it determine its location)?",
                                           "updatedAt":  "2020-10-04T19:48:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4MDE4MTIzOA==",
                                           "createdAt":  "2021-07-14T20:19:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Closing for now as there\u0027s no enough information. Please feel free to reopen is this is still a problem or you have additional questions.",
                                           "updatedAt":  "2021-07-14T20:19:02Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Self Contained application failed loads the output directory files",
        "labels":  [
                       "question",
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43113",
        "createdAt":  "2020-10-06T21:19:11Z",
        "number":  43113,
        "author":  "timmydo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCvzAEA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TravisEz13",
                                            "createdAt":  "2020-10-13T17:06:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mjsabby",
                                            "createdAt":  "2020-10-15T05:42:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DillonN",
                                            "createdAt":  "2020-12-03T05:37:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Nothing4You",
                                            "createdAt":  "2021-02-19T04:07:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexeyshockov",
                                            "createdAt":  "2021-11-10T08:51:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "616b2f",
                                            "createdAt":  "2021-11-24T11:15:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rducom",
                                            "createdAt":  "2022-02-10T23:38:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "giggio",
                                            "createdAt":  "2022-02-20T04:12:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "N0D4N",
                                            "createdAt":  "2022-03-01T09:24:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "theoparis",
                                            "createdAt":  "2022-05-23T01:10:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ZhymabekRoman",
                                            "createdAt":  "2023-04-30T00:31:14Z"
                                        }
                                    ],
                          "totalCount":  11
                      },
        "updatedAt":  "2021-11-09T19:00:34Z",
        "body":  "A distroless Linux container image is essentially one that provides the minimal necessary files to start an application. These mean the typical libraries provided by a Linux distribution are not there. \r\n\r\nFrom https://github.com/GoogleContainerTools/distroless/blob/446923c3756ceeaa75888f52fcbdd48bb314fbf8/base/README.md :\r\n\r\nStatically compiled applications (Go) that do not require libc can use the `gcr.io/distroless/static` image, which contains:\r\n\r\n* ca-certificates\r\n* A /etc/passwd entry for a root user\r\n* A /tmp directory\r\n* tzdata\r\n\r\nCould .NET applications be made to publish such that they could run in a minimal container image like this?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOXxCbg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNjQyODUwNA==",
                                           "createdAt":  "2020-10-09T22:35:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "For reference, previous effort to try to statically link libc: https://github.com/dotnet/runtime/issues/6169#issuecomment-297864286",
                                           "updatedAt":  "2020-10-09T22:35:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwODkxMjU3Mg==",
                                           "createdAt":  "2020-10-15T05:46:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mjsabby",
                                           "body":  "`getaddrinfo` is the only function I\u0027m aware of that misbehaves when you statically link glibc. @jkotas would be opposed to supporting a config that did statically link everything? Including things like openssl and icu if desired?\r\n\r\nBasically a recipe to create libcoreclr.a and that recipe can be used to achieve this.",
                                           "updatedAt":  "2020-10-15T05:46:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwODkxMzU4Mw==",
                                           "createdAt":  "2020-10-15T05:49:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "It would be fine with me as long as it is optional and does not make the build scripts too hard to maintain.",
                                           "updatedAt":  "2020-10-15T05:49:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMDI0MDcxNw==",
                                           "createdAt":  "2020-11-19T09:20:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MouriNaruto",
                                           "body":  "I have done some work about that recently. (Though it is a bootable Linux image with a ASP.NET Core 5.0 based web server demo under VMware.) \r\n![image](https://user-images.githubusercontent.com/10867563/99645455-36e89e00-2a8a-11eb-87de-d82ceedf50e0.png)\r\n\r\nHere is the package list which .NET needed I downloaded from the Alpine Linux mirror. (The size is about 40 MiB.)\r\n```\r\nbusybox-1.31.1-r19.apk (For implement the ultra lightweight init script for prepare the environment for .NET runtime, such as mount /dev /proc /sys, make /tmp writable and execute dhcpcd for networking support.)\r\ndhcpcd-8.1.6-r0.apk (For network initialization.)\r\nicu-libs-67.1-r0.apk\r\nkeyutils-libs-1.6.1-r1.apk\r\nkrb5-conf-1.0-r2.apk\r\nkrb5-libs-1.18.2-r0.apk\r\nlibcom_err-1.45.6-r0.apk\r\nlibcrypto1.1-1.1.1g-r0.apk\r\nlibgcc-9.3.0-r2.apk\r\nlibintl-0.20.2-r0.apk\r\nlibssl1.1-1.1.1g-r0.apk\r\nlibstdc++-9.3.0-r2.apk\r\nlibverto-0.3.1-r1.apk\r\nmusl-1.1.24-r9.apk\r\nzlib-1.2.11-r3.apk\r\n```\r\n\r\nI think icu, zlib, krb5 and openssl should be linked statically for reduce the most size and dependencies.\r\n\r\nIn today\u0027s .NET runtime, we can\u0027t make static link for libc because some implementations need to interop directly with libc instead of PAL.\r\nhttps://github.com/dotnet/runtime/blob/1821d9c14b970d58e0768256de138b6c0287e07d/src/installer/managed/Microsoft.NET.HostModel/AppHost/HostWriter.cs#L220",
                                           "updatedAt":  "2020-11-19T09:24:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Upwx",
                                           "createdAt":  "2021-09-27T18:27:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "olljanat",
                                           "body":  "Any progress on here?",
                                           "updatedAt":  "2021-09-27T18:27:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45fEJu",
                                           "createdAt":  "2021-11-09T19:00:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nA distroless Linux container image is essentially one that provides the minimal necessary files to start an application. These mean the typical libraries provided by a Linux distribution are not there. \r\n\r\nFrom https://github.com/GoogleContainerTools/distroless/blob/446923c3756ceeaa75888f52fcbdd48bb314fbf8/base/README.md :\r\n\r\nStatically compiled applications (Go) that do not require libc can use the `gcr.io/distroless/static` image, which contains:\r\n\r\n* ca-certificates\r\n* A /etc/passwd entry for a root user\r\n* A /tmp directory\r\n* tzdata\r\n\r\nCould .NET applications be made to publish such that they could run in a minimal container image like this?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etimmydo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-09T19:00:34Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Linux: Add support for building \u0027distroless\u0027 apps with static libc",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43251",
        "createdAt":  "2020-10-10T06:59:59Z",
        "number":  43251,
        "author":  "jiangzeng01",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-22T20:30:11Z",
        "body":  "**Application Name:** TuringTrader\r\n**OS:** WIN10 RS5\r\n**CPU:** amd64\r\n**.NET SDK version:** 5.0.100-rtm.20508.12\r\n**Application Location:**\r\n\\\\\\appcompatsrv\\Appcompat\\DotNetCore\\AppSource\\SingleFileP0AppsTarget5\\Apps\\TuringTrader\\TuringTrader.exe\r\n**Application Source Location:**\r\n\\\\\\appcompatsrv\\Appcompat\\DotNetCore\\AppSource\\SingleFileP0AppsTarget5\\AppSources\\TuringTrader\r\n**DevDiv bug:** [https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1228888](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1228888)\r\n\r\n **Repro steps:**\r\nThe app was re-tartgeted to .NET 5.0 and published with command \"dotnet publish -r win-x64 -p:PublishSingleFile=true --self-contained true -p:IncludeAllContentForSelfExtract=true\"\r\nCopy TuringTrader to local machine %APP_CLIENT_ROOT%.\r\n1.Launch TuringTrader.exe  from %APP_CLIENT_ROOT%\\TuringTrader folder.\r\n2.Max up the application.\r\n3.Click “File” menu.\r\n4. Select \"Algorithm\" option.\r\n5. Select \"Demo Algorithms\".\r\n6. Select \"Demo07_Subclassing.cs\".\r\n\r\n**Expected Result:** The Text box shows \"AlgorithmLoader:success!\".\r\n**Actual Result:** The Text box shows \"Line 1: CS0041 - Unexpected error writing debug information -- \u0027The version of Windows PDB writer is older than required: \u0027diasymreader.dll\u0027\u0027\".\r\n\r\n**Findings:**\r\nAfter comparing with Self-Contained app, there is a DLL named “Microsoft.DiaSymReader.Native.amd64.dll”, copy that file to Single file publish folder, launch the app again, it can load Algorithm successful.\r\n\r\nAlso, we find this assembly is displayed in TuringTrader\\TuringTrader.Setup\\PublishedFiles.wxs, so we think this assembly should be needed for the app.\r\nBut it is not included when we publish SingleFile. (The dll is included in SCD but not in SingleFile)\r\n\r\nCC @dotnet-actwx-bot ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONMM-iw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNjUwMDY2Nw==",
                                           "createdAt":  "2020-10-10T07:00:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-10T07:00:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzM2MzE3Nw==",
                                           "createdAt":  "2020-10-12T21:49:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "After a long trip into the inner workings of our shared library build system (across the SDK, Arcade, runtime repos) I finally figured this out.\r\n\r\nUnlike in 3.1 where we simply packaged everything into the single-file, in 5.0 there\u0027s a list of native libraries from the framework which are supposed to be included in the single-file apps - everything else is removed. This list is defined here: https://github.com/dotnet/runtime/blob/ef6c035c399ba856566a9e3f4531084c8e87496a/src/installer/pkg/projects/netcoreapp/pkg/Directory.Build.props#L15-L32\r\n\r\nAs you can see the `Microsoft.DiaSymReader` library is not in the list - so it gets dropped from the single-file. \r\n\r\nIn NETCoreApp the diasym reader is only used in debugger related functionality (as far as I can tell), so that\u0027s probably why it was removed from single-file (to reduce size). The problem is that Roslyn seems to rely on it being there. You can see that on .NET Framework Roslyn explicitly includes it in its packages\r\nhttps://github.com/dotnet/roslyn/blob/e704ca635bd6de70a0250e34c4567c7a28fa9f6d/src/NuGet/Microsoft.Net.Compilers.Toolset/DesktopCompilerArtifacts.targets#L32-L33\r\n\r\nbut for .NET Core it doesn\u0027t.\r\n\r\nThe app in this issue uses `Microsoft.CodeAnalysis.dll` (from Roslyn) which uses the diasym reader - and I guess it assumes it\u0027s present in the framework.",
                                           "updatedAt":  "2020-10-12T21:49:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzM4Njc5MQ==",
                                           "createdAt":  "2020-10-12T23:00:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "In short - Roslyn (as an example) depends on runtime shipping a certain native binary. If we think that runtime shipping DiaSym reader is a public feature (as in runtime expects others to take dependency on it), then there should be a way to declare this dependency. Unfortunately NuGet can\u0027t really do that today (nor the app if it was a direct dependency from the app).\r\n\r\nNote: If we say this is not a public feature and we would expect Roslyn to ship DiaSym reader included, then there might be runtime issues if Roslyn loads its version and runtime tries to load its version - native library in-proc-SxS is relatively tricky and PInvokes/runtime currently doesn\u0027t support it really.\r\n\r\nOne solution would be to introduce a simple way to declare such dependency - nothing fancy, just MSBuild property - something like `\u003cIncludeDiaSymReader\u003etrue\u003c/IncludeDiaSymReader\u003e`. Roslyn could define this in its `.props` file. SDK would either drop or include the necessary files from single-files (and potentially also from self-contained non-single-file apps).\r\n\r\nEventually Roslyn could even implement this as a [feature switch](https://github.com/dotnet/designs/blob/main/accepted/2020/feature-switch.md) and provide some workaround if the library is not present.",
                                           "updatedAt":  "2020-10-12T23:00:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzY2MDg0OQ==",
                                           "createdAt":  "2020-10-13T10:54:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "/cc @tommcdon",
                                           "updatedAt":  "2020-10-13T10:54:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzg3OTA4NA==",
                                           "createdAt":  "2020-10-13T16:58:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "FYI @noahfalk @mikem8361 ",
                                           "updatedAt":  "2020-10-13T16:58:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0Mjk3NDMxOA==",
                                           "createdAt":  "2021-05-18T08:36:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Junjun-zhao",
                                           "body":  "@agocke @LakshanF @vitek-karas  Verified with dotnet-sdk-6.0.100-preview.5.21266.3. still the same issue. Is there any update for this?",
                                           "updatedAt":  "2021-05-18T08:36:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzM3OTg0Ng==",
                                           "createdAt":  "2021-05-18T17:25:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "@Junjun-zhao No, I think we\u0027re willing to say this scenario is unsupported for now. This library is only used for writing Native PDBs, which aren\u0027t supported on any platform aside from Windows. I don\u0027t think we should be shipping this inside the shared framework at all.\r\n\r\nThe right fix for Roslyn would be to include this library in the `runtimes` directory for Windows.",
                                           "updatedAt":  "2021-05-18T17:25:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzM4MTUwOQ==",
                                           "createdAt":  "2021-05-18T17:27:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Re-opening until I can find the right replacement bug to open for DiaSymReader native",
                                           "updatedAt":  "2021-05-18T17:27:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzY3MTkwMA==",
                                           "createdAt":  "2021-05-19T01:14:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Junjun-zhao",
                                           "body":  "@agocke  Thanks for your update!",
                                           "updatedAt":  "2021-05-19T01:14:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40wz6L",
                                           "createdAt":  "2021-07-22T20:27:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "@agocke - I assume this either need to be moved out of 6.0 or closed, if there is a right replacement bug.",
                                           "updatedAt":  "2021-07-22T20:27:36Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "[5.0.100-rtm.20508.12] TuringTrader Single File app Load Algorithms failed",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45084",
        "createdAt":  "2020-11-22T23:15:03Z",
        "number":  45084,
        "author":  "CyberSinh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-19T21:41:26Z",
        "body":  "My WPF application refers to a C++/CLI project. If the C++/CLI DLL is copied to the output directory, the `Ijwhost.dll` dependency is not, but I cheat by adding the following code to the .csproj file:\r\n```xml\r\n\u003cNone Include=\"..\\..\\..\\NTagLib\\Sources\\NTagLib\\bin\\x64\\Release\\Ijwhost.dll\" Link=\"Ijwhost.dll\"\u003e\r\n      \u003cCopyToOutputDirectory\u003ePreserveNewest\u003c/CopyToOutputDirectory\u003e\r\n      \u003cVisible\u003efalse\u003c/Visible\u003e\r\n \u003c/None\u003e\r\n```  \r\n\r\nThe application starts correctly.\r\n\r\nBut problems occur when I try to publish my application with the `PublishSingleFile` option. \r\nThe publication goes smoothly, but the application crashes at startup with the error:\r\n`CoreCLR Version: 5.0.20.51904 .NET Version: 5.0.0 Description: The process was  terminated due to an internal error in the .NET Runtime at IP 00007FFA39690E79  (00007FFA394C0000) with exit code c0000005.` The `BadImageFormatException` seems to be thrown.\r\n\r\nI tried to copy `Ijwhost.dll` to the startup folder or to include it in the package (defining the DLL as `Content` instead `None` in the project file), but without success.\r\n\r\nMy only option was to exclude the C++/CLI reference from the single-file package:\r\n```xml\r\n \u003cItemGroup\u003e\r\n    \u003cReference Include=\"NTagLib\"\u003e\r\n      \u003cHintPath\u003e..\\..\\..\\NTagLib\\Sources\\NTagLib\\bin\\x64\\Release\\NTagLib.dll\u003c/HintPath\u003e\r\n      \u003cExcludeFromSingleFile\u003etrue\u003c/ExcludeFromSingleFile\u003e\r\n    \u003c/Reference\u003e\r\n \u003c/ItemGroup\u003e\r\n```\r\n\r\nI would like to know if there is a way to use the `PublishSingleFile` option with a C++/CLI dependency with .NET 5.0. \r\nIf so, how do I do it? If not, is this support provided in a later version of .NET?\r\n\r\nThank you.\r\n\r\nRegards,\r\n\r\nSylvain",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOX9tKsw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTg2MzY4OQ==",
                                           "createdAt":  "2020-11-22T23:15:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nMy WPF application refers to a C++/CLI project. If the C++/CLI DLL is copied to the output directory, the `Ijwhost.dll` dependency is not, but I cheat by adding the following code to the .csproj file:\r\n```xml\r\n\u003cNone Include=\"..\\..\\..\\NTagLib\\Sources\\NTagLib\\bin\\x64\\Release\\Ijwhost.dll\" Link=\"Ijwhost.dll\"\u003e\r\n      \u003cCopyToOutputDirectory\u003ePreserveNewest\u003c/CopyToOutputDirectory\u003e\r\n      \u003cVisible\u003efalse\u003c/Visible\u003e\r\n \u003c/None\u003e\r\n```  \r\n\r\nThe application starts correctly.\r\n\r\nBut problems occur when I try to publish my application with the `PublishSingleFile` option. \r\nThe publication goes smoothly, but the application crashes at startup with the error:\r\n`CoreCLR Version: 5.0.20.51904 .NET Version: 5.0.0 Description: The process was  terminated due to an internal error in the .NET Runtime at IP 00007FFA39690E79  (00007FFA394C0000) with exit code c0000005.`\r\n\r\nI tried to copy `Ijwhost.dll` to the startup folder or to include it in the package (defining the DLL as `Content` instead `None` in the project file), but without success.\r\n\r\nMy only option was to exclude the C++/CLI reference from the single-file package:\r\n```xml\r\n \u003cItemGroup\u003e\r\n    \u003cReference Include=\"NTagLib\"\u003e\r\n      \u003cHintPath\u003e..\\..\\..\\NTagLib\\Sources\\NTagLib\\bin\\x64\\Release\\NTagLib.dll\u003c/HintPath\u003e\r\n      \u003cExcludeFromSingleFile\u003etrue\u003c/ExcludeFromSingleFile\u003e\r\n    \u003c/Reference\u003e\r\n \u003c/ItemGroup\u003e\r\n```\r\n\r\nI would like to know if there is a way to use the `PublishSingleFile` option with a C++/CLI dependency with .NET 5.0. \r\nIf so, how do I do it? If not, is this support provided in a later version of .NET?\r\n\r\nThank you.\r\n\r\nRegards,\r\n\r\nSylvain\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCyberSinh\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-11-22T23:15:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjA3MjEwMA==",
                                           "createdAt":  "2020-11-23T10:32:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "As a workaround you could use `/p:IncludeAllContentForSelfExtract=true` - it should at least fix the problem with the crash when the C++/CLI assembly is included in the bundle. See [design doc](https://github.com/dotnet/designs/blob/main/accepted/2020/single-file/design.md#optional-settings) for details.\r\n\r\nThere are two issues here as far as I can tell:\r\n* Incorrect propagation of `ijwhost.dll` between projects - @jkoritzinsky you probably know more about what is the intended behavior and how to fix this.\r\n* Incorrect bundling C++/CLI assemblies. This is basically a bug in the [`IsAssembly`](https://github.com/dotnet/runtime/blob/bf302de7f184c6e9dc23382980860af2849219e3/src/installer/managed/Microsoft.NET.HostModel/Bundle/Bundler.cs#L115) which only checks for the CLR header to detect managed assemblies. But in case of C++/CLI we can\u0027t bundle the file as a managed assembly since it has native code in it, we need to treat it as a native library instead.\r\n\r\nIf we decide to fully support C++/CLI in single-file we need to:\r\n* [ ] Fix the bundler to detect C++/CLI assemblies and treat that as native libraries (for the purposes of bundling)\r\n* [ ] Resolve the MSBuild problem of populating the `ijwhost.dll` correctly\r\n* [ ] Validate that `hostpolicy` will correctly probe for it either next to the exe or in the extraction directory and that it will add it to TPA\r\n* [ ] Validate E2E that this works in all configurations, that is single-file with files net to it (default), single-file with native libraries extracted, single-file with everything extracted.",
                                           "updatedAt":  "2020-11-23T10:32:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjExNTQyMw==",
                                           "createdAt":  "2020-11-23T11:54:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyberSinh",
                                           "body":  "Thanks @vitek-karas. Can we expect a better support for C++/CLI single-file in .NET 5.0.x ? .NET 6.0 ?",
                                           "updatedAt":  "2020-11-23T11:54:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjExNzM0Nw==",
                                           "createdAt":  "2020-11-23T11:58:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I very much doubt we would fix this in .NET 5, it already shipped and this is not something we typically fix in servicing releases.\r\n\r\nWe will consider it for .NET 6, but nothing has been committed yet.",
                                           "updatedAt":  "2020-11-23T11:58:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNDUxMzg2NA==",
                                           "createdAt":  "2020-11-27T00:16:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyberSinh",
                                           "body":  "@jkoritzinsky, any opinion to share about the MSBuild issue ? thanks.",
                                           "updatedAt":  "2020-11-27T00:16:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45wkGz",
                                           "createdAt":  "2021-11-15T15:36:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Waleed-KH",
                                           "body":  "I have the same issues when I try to build/publish ASP.NET 6.0 application with a C++/CLI dependency:\r\n\r\n- The `Ijwhost.dll` doesn\u0027t get copied to the output directory, but if I target .NET Framework 4.7.2 on the C++/CLI project, I can reference it on the .NET 6.0 project, and works without the need for the `Ijwhost.dll` file !!\r\n- The application crashes at startup when I publish it with the `PublishSingleFile` option:\r\n```\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\nRepeat 2 times:\r\n--------------------------------\r\n   at \u003cModule\u003e._getFiberPtrId()\r\n--------------------------------\r\n   at \u003cModule\u003e.\u003cCrtImplementationDetails\u003e.LanguageSupport._Initialize(\u003cCrtImplementationDetails\u003e.LanguageSupport*)\r\n   at \u003cModule\u003e.\u003cCrtImplementationDetails\u003e.LanguageSupport.Initialize(\u003cCrtImplementationDetails\u003e.LanguageSupport*)\r\n   at \u003cModule\u003e..cctor()\r\n   at XCompany.XProject.XClass..ctor(Microsoft.Extensions.Options.IOptions`1\u003cXCompany.XProject.XConfig\u003e, Microsoft.Extensions.Logging.ILogger`1\u003cXCompany.XProject.IXService\u003e)\r\n   at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Span`1\u003cSystem.Object\u003e ByRef, System.Signature, Boolean, Boolean)\r\n   at System.Reflection.RuntimeConstructorInfo.Invoke(System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[[Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext, Microsoft.Extensions.DependencyInjection, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60],[System.__Canon, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].VisitCallSiteMain(Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache(Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2[[Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext, Microsoft.Extensions.DependencyInjection, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60],[System.__Canon, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].VisitCallSite(Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.Resolve(Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.CreateServiceAccessor(System.Type)\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2[[System.__Canon, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.__Canon, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetOrAdd(System.__Canon, System.Func`2\u003cSystem.__Canon,System.__Canon\u003e)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(System.Type, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(System.Type)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService[[System.__Canon, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.IServiceProvider)\r\n   at Program.\u003cMain\u003e$(System.String[])\r\n```\r\n",
                                           "updatedAt":  "2021-11-15T15:36:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45wmpE",
                                           "createdAt":  "2021-11-15T15:46:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e The Ijwhost.dll doesn\u0027t get copied to the output directory, but if I target .NET Framework 4.7.2 on the C++/CLI project, I can reference it on the .NET 6.0 project, and works without the need for the Ijwhost.dll file !!\r\n\r\nThe fact that it works if you compile for .NET Framework is not surprising. In this case the assembly will load the .NET Framework runtime into the process and run the C++/CLI managed code on that, not on the .NET Core. You can probably check this by looking at loaded dlls into the process, I would expect to see two .NET runtimes.\r\n\r\nAs described above, C++/CLI in single file requires additional feature work to make the build and runtime work.",
                                           "updatedAt":  "2021-11-15T15:46:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc451KAE",
                                           "createdAt":  "2021-11-16T12:43:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFwIIA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kurtekat",
                                                                               "createdAt":  "2025-02-09T18:25:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Waleed-KH",
                                           "body":  "\u003e The fact that it works if you compile for .NET Framework is not surprising. In this case the assembly will load the .NET Framework runtime into the process and run the C++/CLI managed code on that, not on the .NET Core. You can probably check this by looking at loaded dlls into the process, I would expect to see two .NET runtimes.\r\n\r\nI checked it and found `C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\mscoreei.dll` loaded when the C++/CLI target .NET 4.7.2\r\n\r\n\u003e As described above, C++/CLI in single file requires additional feature work to make the build and runtime work.\r\n\r\nright now I\u0027m using the `ExcludeFromSingleFile` option to make it work, but I hope you will support it soon.",
                                           "updatedAt":  "2023-09-05T13:53:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc452Z0F",
                                           "createdAt":  "2021-11-16T18:43:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCYQ4Kw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Waleed-KH",
                                                                               "createdAt":  "2022-04-15T12:30:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "agocke",
                                           "body":  "Tentatively putting this in the 7.0 milestone, pending investigation of the complexity of the fix",
                                           "updatedAt":  "2021-11-16T18:43:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H7y-p",
                                           "createdAt":  "2022-08-05T20:56:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Unfortunately too late for 7 - we don\u0027t know enough about the msbuild side of this yet, so it\u0027s relatively risky.",
                                           "updatedAt":  "2022-08-05T20:56:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K6tZp",
                                           "createdAt":  "2022-09-24T08:11:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stevehorsfield",
                                           "body":  "Just ran into this. The workaround isn\u0027t so bad but the tooling experience in VS2022 shouldn\u0027t require years to fix.\n\nA minimum should be the automatic marking of exclusion from single file when referencing a C++ project. Or at least giving a clear warning.\n\nThat wouldn\u0027t require changing build behaviour and would already stop people hitting this with no explanation. I built an entire console tool with detailed debugging just to find out why my app wasn\u0027t working on a target machine. Didn\u0027t occur to me that the publish method would succeed with something so obviously broken!\n\nCan we change the mentality to: how can we improve the situation quickly, instead of when will we have capacity for a perfect solution? That would be a boon for many people, I\u0027m sure. This isn\u0027t a new feature request, it really is a bug in the core product requirements: build and deploy software that works.",
                                           "updatedAt":  "2022-09-24T08:11:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K6tzv",
                                           "createdAt":  "2022-09-24T08:18:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFwIUA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "CodyPaul",
                                                                               "createdAt":  "2022-10-07T18:04:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CodyPaul",
                                                                               "createdAt":  "2022-10-07T18:04:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "willdean",
                                                                               "createdAt":  "2023-04-06T09:39:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "FIFER-Mods",
                                                                               "createdAt":  "2023-08-08T03:37:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kurtekat",
                                                                               "createdAt":  "2025-02-09T18:25:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "stevehorsfield",
                                           "body":  "\u003e Unfortunately too late for 7 - we don\u0027t know enough about the msbuild side of this yet, so it\u0027s relatively risky.\n\nThat isn\u0027t really a fair comment. As a team, you had a very long time to plan for the necessary investigation. You chose to prioritise other work, which is reasonable. But perhaps bugs that are several years old shouldn\u0027t be just pushed down the line for the preference for new feature work.",
                                           "updatedAt":  "2022-09-24T08:19:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5f20qz",
                                           "createdAt":  "2023-06-26T20:35:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODC94gA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "Waleed-KH",
                                                                               "createdAt":  "2023-06-27T15:31:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "dwco-z",
                                                                               "createdAt":  "2023-07-14T11:52:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "FIFER-Mods",
                                                                               "createdAt":  "2023-08-08T03:37:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "agocke",
                                           "body":  "I\u0027m moving this out to unplanned. C++/CLI is not a high priority scenario.",
                                           "updatedAt":  "2023-06-26T20:35:59Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Using the PublishSingleFile option with a WPF application that has a dependency on a C++/CLI library",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45682",
        "createdAt":  "2020-12-07T13:16:10Z",
        "number":  45682,
        "author":  "JeroenVandezande",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-14T20:13:46Z",
        "body":  "When I compile this code as a DotNet5 Linux Arm64 exe:\r\n```\r\nusing System;\r\n\r\nnamespace VarisciteTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World5!\");\r\n        }\r\n    }\r\n}\r\n```\r\nI cannot run it because of a missing .so file.\r\n\r\nThese are the Publish Settings:\r\n\r\n- Debug\r\n- net5.0\r\n- Self-contained\r\n- linux-arm64\r\n- Produce single file\r\n- Trim unused assemblies\r\n\r\nThis is the error:\r\n\u0027./VarisciteTest: error while loading shared libraries: libgssapi_krb5.so.2: cannot open shared object file: No such file or directory\u0027\r\n\r\nIf I look at the executable file with LDD I get this:\r\n```\r\nroot@imx8mm-var-dart:~/test# ldd VarisciteTest\r\n        linux-vdso.so.1 (0x0000ffff8b787000)\r\n        libpthread.so.0 =\u003e /lib/libpthread.so.0 (0x0000ffff8add8000)\r\n        libdl.so.2 =\u003e /lib/libdl.so.2 (0x0000ffff8adc4000)\r\n        libz.so.1 =\u003e /lib/libz.so.1 (0x0000ffff8ad9d000)\r\n        libgssapi_krb5.so.2 =\u003e not found\r\n        librt.so.1 =\u003e /lib/librt.so.1 (0x0000ffff8ad85000)\r\n        libstdc++.so.6 =\u003e /usr/lib/libstdc++.so.6 (0x0000ffff8aba5000)\r\n        libm.so.6 =\u003e /lib/libm.so.6 (0x0000ffff8aafb000)\r\n        libgcc_s.so.1 =\u003e /lib/libgcc_s.so.1 (0x0000ffff8aad6000)\r\n        libc.so.6 =\u003e /lib/libc.so.6 (0x0000ffff8a96a000)\r\n        /lib/ld-linux-aarch64.so.1 (0x0000ffff8b758000)\r\n```\r\n\r\nIf I do the same but change target framework to .NET Core 3.1 it works fine...\r\nThis is the LDD output from the .NET Core 3.1 Executable:\r\n```\r\nroot@imx8mm-var-dart:~/test# ./VarisciteTest \r\nHello World5!\r\nroot@imx8mm-var-dart:~/test# ldd VarisciteTest\r\n        linux-vdso.so.1 (0x0000ffff863a7000)\r\n        libpthread.so.0 =\u003e /lib/libpthread.so.0 (0x0000ffff86348000)\r\n        libdl.so.2 =\u003e /lib/libdl.so.2 (0x0000ffff86334000)\r\n        libstdc++.so.6 =\u003e /usr/lib/libstdc++.so.6 (0x0000ffff86154000)\r\n        libm.so.6 =\u003e /lib/libm.so.6 (0x0000ffff860aa000)\r\n        libgcc_s.so.1 =\u003e /lib/libgcc_s.so.1 (0x0000ffff86085000)\r\n        libc.so.6 =\u003e /lib/libc.so.6 (0x0000ffff85f19000)\r\n        /lib/ld-linux-aarch64.so.1 (0x0000ffff86378000) \r\n```\r\n\r\nedit: possibly related to this older case: https://github.com/dotnet/corert/issues/6191",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLBxW6A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczOTkxMTc0OA==",
                                           "createdAt":  "2020-12-07T13:16:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-12-07T13:16:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDAwOTA2Nw==",
                                           "createdAt":  "2020-12-07T15:59:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen I compile this code as a DotNet5 Linux Arm64 exe:\r\n```\r\nusing System;\r\n\r\nnamespace VarisciteTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World5!\");\r\n        }\r\n    }\r\n}\r\n```\r\nI cannot run it because of a missing .so file.\r\n\r\nThese are the Publish Settings:\r\n\r\n- Debug\r\n- net5.0\r\n- Self-contained\r\n- linux-arm64\r\n- Produce single file\r\n- Trim unused assemblies\r\n\r\nThis is the error:\r\n\u0027./VarisciteTest: error while loading shared libraries: libgssapi_krb5.so.2: cannot open shared object file: No such file or directory\u0027\r\n\r\nIf I look at the executable file with LDD I get this:\r\n```\r\nroot@imx8mm-var-dart:~/test# ldd VarisciteTest\r\n        linux-vdso.so.1 (0x0000ffff8b787000)\r\n        libpthread.so.0 =\u003e /lib/libpthread.so.0 (0x0000ffff8add8000)\r\n        libdl.so.2 =\u003e /lib/libdl.so.2 (0x0000ffff8adc4000)\r\n        libz.so.1 =\u003e /lib/libz.so.1 (0x0000ffff8ad9d000)\r\n        libgssapi_krb5.so.2 =\u003e not found\r\n        librt.so.1 =\u003e /lib/librt.so.1 (0x0000ffff8ad85000)\r\n        libstdc++.so.6 =\u003e /usr/lib/libstdc++.so.6 (0x0000ffff8aba5000)\r\n        libm.so.6 =\u003e /lib/libm.so.6 (0x0000ffff8aafb000)\r\n        libgcc_s.so.1 =\u003e /lib/libgcc_s.so.1 (0x0000ffff8aad6000)\r\n        libc.so.6 =\u003e /lib/libc.so.6 (0x0000ffff8a96a000)\r\n        /lib/ld-linux-aarch64.so.1 (0x0000ffff8b758000)\r\n```\r\n\r\nIf I do the same but change target framework to .NET Core 3.1 it works fine...\r\nThis is the LDD output from the .NET Core 3.1 Executable:\r\n```\r\nroot@imx8mm-var-dart:~/test# ./VarisciteTest \r\nHello World5!\r\nroot@imx8mm-var-dart:~/test# ldd VarisciteTest\r\n        linux-vdso.so.1 (0x0000ffff863a7000)\r\n        libpthread.so.0 =\u003e /lib/libpthread.so.0 (0x0000ffff86348000)\r\n        libdl.so.2 =\u003e /lib/libdl.so.2 (0x0000ffff86334000)\r\n        libstdc++.so.6 =\u003e /usr/lib/libstdc++.so.6 (0x0000ffff86154000)\r\n        libm.so.6 =\u003e /lib/libm.so.6 (0x0000ffff860aa000)\r\n        libgcc_s.so.1 =\u003e /lib/libgcc_s.so.1 (0x0000ffff86085000)\r\n        libc.so.6 =\u003e /lib/libc.so.6 (0x0000ffff85f19000)\r\n        /lib/ld-linux-aarch64.so.1 (0x0000ffff86378000) \r\n```\r\n\r\nedit: possibly related to this older case: https://github.com/dotnet/corert/issues/6191\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJeroenVandezande\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-12-07T15:59:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDAyMTUzMg==",
                                           "createdAt":  "2020-12-07T16:19:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeroenVandezande",
                                           "body":  "I have figured out how to add the libgssapi_krb5.so.2 depency to my Yocto linux (Dunfell) so the app runs now in both cases (DotNetCore 3.1 and DotNet5)\r\n\r\nBut one can argue that a Hello World app has no need for that DLL ",
                                           "updatedAt":  "2020-12-07T16:19:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDAyNTI5MQ==",
                                           "createdAt":  "2020-12-07T16:25:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@VSadov  - just to confirm - I assume the new dependencies are due to libraries native libs statically linked in, right? Would it be somehow possible to delay-load these?",
                                           "updatedAt":  "2020-12-07T16:25:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDA1NDc2MA==",
                                           "createdAt":  "2020-12-07T17:12:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "This may be related to the discussion about `__attribute__((constructor))` and eager initialization in general the context of singlefile here: (https://github.com/dotnet/runtime/pull/44505#issuecomment-731307787)\r\n\r\nYes, we should look into delay loading/initializing for such cases. \r\n\r\nIt might need some work though. One suggested approach is to call initialization function from the managed code (like in System.Globalization).",
                                           "updatedAt":  "2020-12-07T17:12:16Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Is it possible to remove unused native dll references from the published executable?",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45719",
        "createdAt":  "2020-12-07T22:41:01Z",
        "number":  45719,
        "author":  "kalaskarsanket",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODA4kMQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2022-05-22T13:40:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "olee-oteemo",
                                            "createdAt":  "2023-04-12T14:00:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OSA413",
                                            "createdAt":  "2025-04-05T12:05:16Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2021-07-14T19:52:47Z",
        "body":  "---\r\n**Issue moved from microsoft/dotnet#1274**\r\n- Please respond to @freakmaxi.\r\n\r\n---\r\n\r\n_From @freakmaxi on Wednesday, December 2, 2020 7:52:25 PM_\r\n\r\nHello,\r\n\r\nI have a little problem with .net 5.0. I have a web framework, that parses the c# code and compile it. When it is compiling it is adding the references to the `CSharpCompilation` using `MetadataReference.CreateFromFile(assembly.Location)`\r\n\r\nIt is working normally, however, if the web framework executable compiled to a single file and tries to compile the c# code coming from web framework code using `MetadataReference.CreateFromFile(assembly.Location)` assembly.Location is returning an empty string and it leads to failure. If I skip the empty values of assembly.Location for references, this time it is creating a huge error mention in the title of this issue. the whole output is like,\r\n\r\n```\r\nSystem.Exception: warning CS8021: No value for RuntimeMetadataVersion found. No assembly containing System.Object was found nor was a value for RuntimeMetadataVersion specified through options.\r\n(1,7): error CS0246: The type or namespace name \u0027System\u0027 could not be found (are you missing a using directive or an assembly reference?)                       \r\n(2,7): error CS0246: The type or namespace name \u0027System\u0027 could not be found (are you missing a using directive or an assembly reference?)                       \r\n(3,7): error CS0246: The type or namespace name \u0027System\u0027 could not be found (are you missing a using directive or an assembly reference?)                       \r\n(4,7): error CS0246: The type or namespace name \u0027System\u0027 could not be found (are you missing a using directive or an assembly reference?)                       \r\n(5,13): error CS0234: The type or namespace name \u0027Web\u0027 does not exist in the namespace \u0027Xeora\u0027 (are you missing an assembly reference?)                         \r\n(6,13): error CS0234: The type or namespace name \u0027Web\u0027 does not exist in the namespace \u0027Xeora\u0027 (are you missing an assembly reference?)                         \r\n(15,14): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(8,50): error CS0246: The type or namespace name \u0027DomainExecutable\u0027 could not be found (are you missing a using directive or an assembly reference?)            \r\n(15,53): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(8,179): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                               \r\n(8,199): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(8,199): error CS0246: The type or namespace name \u0027MethodInfo\u0027 could not be found (are you missing a using directive or an assembly reference?)                 \r\n(8,163): error CS0518: Predefined type \u0027System.Void\u0027 is not defined or imported                                                                                 \r\n(9,34): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                                \r\n(9,58): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                                \r\n(9,17): error CS0518: Predefined type \u0027System.Void\u0027 is not defined or imported                                                                                  \r\n(10,17): error CS0518: Predefined type \u0027System.Void\u0027 is not defined or imported                                                                                 \r\n(11,45): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                               \r\n(11,17): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(11,17): error CS0246: The type or namespace name \u0027ResolutionResult\u0027 could not be found (are you missing a using directive or an assembly reference?)           \r\n(12,51): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                               \r\n(12,17): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(12,17): error CS0246: The type or namespace name \u0027PermissionResult\u0027 could not be found (are you missing a using directive or an assembly reference?)           \r\n(13,45): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                               \r\n(13,66): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                               \r\n(13,17): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(13,17): error CS0246: The type or namespace name \u0027TranslationResult\u0027 could not be found (are you missing a using directive or an assembly reference?)          \r\n(10,22): error CS0115: \u0027X56819d642671446b9a122640e3fcde24.Terminate()\u0027: no suitable method found to override                                                    \r\n(8,109): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(8,109): error CS0246: The type or namespace name \u0027DomainPacket\u0027 could not be found (are you missing a using directive or an assembly reference?)               \r\n(8,68): error CS0518: Predefined type \u0027System.Void\u0027 is not defined or imported                                                                                  \r\n(8,132): error CS1729: \u0027DomainExecutable\u0027 does not contain a constructor that takes 1 arguments                                                                 \r\n(15,71): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(15,71): error CS0234: The type or namespace name \u0027Web\u0027 does not exist in the namespace \u0027Xeora\u0027 (are you missing an assembly reference?)                        \r\n(15,113): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                              \r\n(15,125): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                              \r\n(15,125): error CS0103: The name \u0027DateTime\u0027 does not exist in the current context                                                                               \r\n(16,40): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                               \r\n(15,14): error CS1729: \u0027object\u0027 does not contain a constructor that takes 0 arguments                                                                           \r\n                                                                                                                                                                   at Xeora.Web.Manager.Statement.Factory.Compile(String executableName, String codeBlock)                                                                      \r\n   at Xeora.Web.Manager.Statement.Factory.Create(String blockKey, String statement, Boolean parametric)                                                         \r\n   at Xeora.Web.Manager.Statement.Factory.Get(String blockKey, String statement, Boolean parametric, Boolean cache)                                             \r\n   at Xeora.Web.Manager.Statement.Factory.CreateExecutable(IEnumerable`1 domainIdAccessTree, String statementBlockId, String statement, Boolean parametric, Boolean cache)\r\n   --- End of inner exception stack trace ---                                                                                                                   \r\n   at Xeora.Web.Directives.Elements.InLineStatement.ExecuteStatement()                                                                                          \r\n   at Xeora.Web.Directives.Elements.InLineStatement.PostRender()                                                                                                \r\n   at Xeora.Web.Directives.Directive.Render()                                                                                                                   \r\n   at Xeora.Web.Directives.DirectiveCollection.Render(IDirective directive)  \r\n```\r\n\r\nYou can also check source code in this URL: \r\nhttps://github.com/xeora/v7-framework/blob/master/src/Xeora.Web.Manager/Statement/Factory.cs\r\n\r\nunder Compile function.\r\n\r\nIt was working with dotnet core 3.1 without any problem on both single executable or not. This problem has appeared with .net 5.0\r\n\r\nThanks",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLEdQKw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDIyNDkxNQ==",
                                           "createdAt":  "2020-12-07T22:41:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-12-07T22:41:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDI2MTY0NA==",
                                           "createdAt":  "2020-12-08T00:17:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n---\r\n**Issue moved from microsoft/dotnet#1274**\r\n- Please respond to @freakmaxi.\r\n\r\n---\r\n\r\n_From @freakmaxi on Wednesday, December 2, 2020 7:52:25 PM_\r\n\r\nHello,\r\n\r\nI have a little problem with .net 5.0. I have a web framework, that parses the c# code and compile it. When it is compiling it is adding the references to the `CSharpCompilation` using `MetadataReference.CreateFromFile(assembly.Location)`\r\n\r\nIt is working normally, however, if the web framework executable compiled to a single file and tries to compile the c# code coming from web framework code using `MetadataReference.CreateFromFile(assembly.Location)` assembly.Location is returning an empty string and it leads to failure. If I skip the empty values of assembly.Location for references, this time it is creating a huge error mention in the title of this issue. the whole output is like,\r\n\r\n```\r\nSystem.Exception: warning CS8021: No value for RuntimeMetadataVersion found. No assembly containing System.Object was found nor was a value for RuntimeMetadataVersion specified through options.\r\n(1,7): error CS0246: The type or namespace name \u0027System\u0027 could not be found (are you missing a using directive or an assembly reference?)                       \r\n(2,7): error CS0246: The type or namespace name \u0027System\u0027 could not be found (are you missing a using directive or an assembly reference?)                       \r\n(3,7): error CS0246: The type or namespace name \u0027System\u0027 could not be found (are you missing a using directive or an assembly reference?)                       \r\n(4,7): error CS0246: The type or namespace name \u0027System\u0027 could not be found (are you missing a using directive or an assembly reference?)                       \r\n(5,13): error CS0234: The type or namespace name \u0027Web\u0027 does not exist in the namespace \u0027Xeora\u0027 (are you missing an assembly reference?)                         \r\n(6,13): error CS0234: The type or namespace name \u0027Web\u0027 does not exist in the namespace \u0027Xeora\u0027 (are you missing an assembly reference?)                         \r\n(15,14): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(8,50): error CS0246: The type or namespace name \u0027DomainExecutable\u0027 could not be found (are you missing a using directive or an assembly reference?)            \r\n(15,53): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(8,179): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                               \r\n(8,199): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(8,199): error CS0246: The type or namespace name \u0027MethodInfo\u0027 could not be found (are you missing a using directive or an assembly reference?)                 \r\n(8,163): error CS0518: Predefined type \u0027System.Void\u0027 is not defined or imported                                                                                 \r\n(9,34): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                                \r\n(9,58): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                                \r\n(9,17): error CS0518: Predefined type \u0027System.Void\u0027 is not defined or imported                                                                                  \r\n(10,17): error CS0518: Predefined type \u0027System.Void\u0027 is not defined or imported                                                                                 \r\n(11,45): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                               \r\n(11,17): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(11,17): error CS0246: The type or namespace name \u0027ResolutionResult\u0027 could not be found (are you missing a using directive or an assembly reference?)           \r\n(12,51): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                               \r\n(12,17): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(12,17): error CS0246: The type or namespace name \u0027PermissionResult\u0027 could not be found (are you missing a using directive or an assembly reference?)           \r\n(13,45): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                               \r\n(13,66): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                               \r\n(13,17): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(13,17): error CS0246: The type or namespace name \u0027TranslationResult\u0027 could not be found (are you missing a using directive or an assembly reference?)          \r\n(10,22): error CS0115: \u0027X56819d642671446b9a122640e3fcde24.Terminate()\u0027: no suitable method found to override                                                    \r\n(8,109): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(8,109): error CS0246: The type or namespace name \u0027DomainPacket\u0027 could not be found (are you missing a using directive or an assembly reference?)               \r\n(8,68): error CS0518: Predefined type \u0027System.Void\u0027 is not defined or imported                                                                                  \r\n(8,132): error CS1729: \u0027DomainExecutable\u0027 does not contain a constructor that takes 1 arguments                                                                 \r\n(15,71): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(15,71): error CS0234: The type or namespace name \u0027Web\u0027 does not exist in the namespace \u0027Xeora\u0027 (are you missing an assembly reference?)                        \r\n(15,113): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                              \r\n(15,125): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                              \r\n(15,125): error CS0103: The name \u0027DateTime\u0027 does not exist in the current context                                                                               \r\n(16,40): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                               \r\n(15,14): error CS1729: \u0027object\u0027 does not contain a constructor that takes 0 arguments                                                                           \r\n                                                                                                                                                                   at Xeora.Web.Manager.Statement.Factory.Compile(String executableName, String codeBlock)                                                                      \r\n   at Xeora.Web.Manager.Statement.Factory.Create(String blockKey, String statement, Boolean parametric)                                                         \r\n   at Xeora.Web.Manager.Statement.Factory.Get(String blockKey, String statement, Boolean parametric, Boolean cache)                                             \r\n   at Xeora.Web.Manager.Statement.Factory.CreateExecutable(IEnumerable`1 domainIdAccessTree, String statementBlockId, String statement, Boolean parametric, Boolean cache)\r\n   --- End of inner exception stack trace ---                                                                                                                   \r\n   at Xeora.Web.Directives.Elements.InLineStatement.ExecuteStatement()                                                                                          \r\n   at Xeora.Web.Directives.Elements.InLineStatement.PostRender()                                                                                                \r\n   at Xeora.Web.Directives.Directive.Render()                                                                                                                   \r\n   at Xeora.Web.Directives.DirectiveCollection.Render(IDirective directive)  \r\n```\r\n\r\nYou can also check source code in this URL: \r\nhttps://github.com/xeora/v7-framework/blob/master/src/Xeora.Web.Manager/Statement/Factory.cs\r\n\r\nunder Compile function.\r\n\r\nIt was working with dotnet core 3.1 without any problem on both single executable or not. This problem has appeared with .net 5.0\r\n\r\nThanks\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekalaskarsanket\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-12-08T00:17:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDc1NzA5OA==",
                                           "createdAt":  "2020-12-08T16:51:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "In .NET 5 single-file doesn\u0027t write managed assemblies to disk, they\u0027re read directly from the executable. So there\u0027s no path to them - they don\u0027t exist as files on disk.\r\nIf you still want the \"Expand everything to disk\" behavior of 3.1, it\u0027s available by setting `IncludeAllContentForSelfExtract=true`. See [design doc](https://github.com/dotnet/designs/blob/main/accepted/2020/single-file/design.md#optional-settings) for more details.",
                                           "updatedAt":  "2020-12-08T16:51:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDc3MTc3Ng==",
                                           "createdAt":  "2020-12-08T17:12:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "freakmaxi",
                                           "body":  "@vitek-karas I tried to include IncludeAllContentForSelfExtract to my command while creating executable and it worked. However, it is a way to cover the backward compatibility between 3.1 and 5.0 according to the documentation. What should be the correct way to compile the source in .NET 5.0 not to get a similar error when it is a single file executable? How can I make System namespace available for the compile operation inside the single-file executable that is not compiled using IncludeAllContentForSelfExtract?",
                                           "updatedAt":  "2020-12-08T17:15:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDc3NTA5NQ==",
                                           "createdAt":  "2020-12-08T17:17:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Currently there\u0027s no API to get the assembly as a whole from the single-file (for example as a stream). It is possible to get the metadata for the assembly (which should be enough for a compiler) using [`TryGetRawMetadata`](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.metadata.assemblyextensions.trygetrawmetadata?view=net-5.0). But I don\u0027t know if Roslyn will be able to consume this somehow. @agocke might have some ideas on that front.",
                                           "updatedAt":  "2020-12-08T17:17:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MTYxOTA4NQ==",
                                           "createdAt":  "2020-12-09T08:32:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "freakmaxi",
                                           "body":  "Hello @vitek-karas \r\n\r\nI take a look at TryGetRawMetadata. It looks like it is making a native call according to source `https://github.com/dotnet/runtime/blob/69e114c1abf91241a0eeecf1ecceab4711b8aa62/src/coreclr/System.Private.CoreLib/src/System/Reflection/Metadata/AssemblyExtensions.cs` that I believe is a bit expensive. I have doubts that it is an efficient way to use it. I think .NET 5 needs to have a simplified and .NET native solution for this kind of operation. For now, using `IncludeAllContentForSelfExtract` is saving the day. \r\n\r\nThank you for your help. If anything that I can do related to the implementation of this feature, I\u0027ll be happy to help.",
                                           "updatedAt":  "2020-12-09T08:32:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MTc1NDI4NQ==",
                                           "createdAt":  "2020-12-09T12:59:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I don\u0027t understand the performance concern. The native side of this method is very simple: https://github.com/dotnet/runtime/blob/69e114c1abf91241a0eeecf1ecceab4711b8aa62/src/coreclr/vm/assemblynative.cpp#L1329\r\n\r\nIt doesn\u0027t compute anything, it really just returns a pointer into an already existing internal buffer. If anything this will be much faster than loading the metadata from a file since that requires multiple OS calls to open the file and read data from it.",
                                           "updatedAt":  "2020-12-09T12:59:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MTg0NjU3NQ==",
                                           "createdAt":  "2020-12-09T15:30:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "freakmaxi",
                                           "body":  "Actually, my concern is not related to the cpp native code. Making the native call from .NET is expensive. What I see in the `TryGetRawMetadata` source is doing this native call. Because of this I said, it is expensive. Otherwise, cpp code is pretty straight forward.",
                                           "updatedAt":  "2020-12-09T15:30:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MTg1NDM1MQ==",
                                           "createdAt":  "2020-12-09T15:39:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The managed/native transition is pretty cheap unless it\u0027s called from a loop and very frequently. LOT of managed functionality is implemented by calling to native (either to the OS or to the runtime). If I understand it correctly the code you\u0027re currently using has `Assembly.Location` and then uses that as a path to open the file for Roslyn to consume as metadata. This means that Roslyn must open the file and read it - managed code has no way to do that, it needs the OS, so it has to call to native to do that - it will be probably something like a PInvoke to `CreateFileW`. That\u0027s actually no different from the QCall above (QCall is just a PInvoke to the runtime, so different rules to library/name resolution, but the actual transition is basically the same). And on top of that Roslyn will have to read that file - so at least one more managed-\u003enative transition.\r\n\r\nAll this said - it\u0027s best to measure. I would be very surprised if this showed up as a perf issue once you measure the code, but if it does, then I agree we should come up with a better solution.",
                                           "updatedAt":  "2020-12-09T15:39:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MTg1ODk0Nw==",
                                           "createdAt":  "2020-12-09T15:45:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "freakmaxi",
                                           "body":  "In this case, I\u0027ll try to implement `TryGetRawMetadata` for the test environment and try to extract the CPU, memory, and execution time values to compare with the `Assembly.Location` approach and let you know about the result and the efficiency outputs.\r\n\r\nThank you for your response.",
                                           "updatedAt":  "2020-12-09T15:45:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MTk3MjcwOQ==",
                                           "createdAt":  "2020-12-09T18:45:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "`TryGetRawMetadata` seems like it would work -- I would run\r\n\r\n```C#\r\nif (Assembly.TryGetRawMetadata(asm, out var blob, out var length))\r\n{\r\n    var md = ModuleMetadata.CreateFromMetadata((IntPtr)blob, length);\r\n    var ref = AssemblyMetadata.Create(md).GetReference();\r\n    ....\r\n}\r\n```",
                                           "updatedAt":  "2020-12-09T18:45:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MjY3MjUzMQ==",
                                           "createdAt":  "2020-12-10T17:31:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "freakmaxi",
                                           "body":  "Sadly it is not working, I\u0027m getting the following error when I used the way to load Metadata for assembly\r\n\r\n`error CS1542: \u0027\u003cin-memory module\u003e\u0027 cannot be added to this assembly because it already is an assembly`\r\n\r\nand the big error following it\r\n\r\n```\r\n(1,7): error CS0246: The type or namespace name \u0027System\u0027 could not be found (are you missing a using directive or an assembly reference?)                       \r\n(2,7): error CS0246: The type or namespace name \u0027System\u0027 could not be found (are you missing a using directive or an assembly reference?)                       \r\n(3,7): error CS0246: The type or namespace name \u0027System\u0027 could not be found (are you missing a using directive or an assembly reference?)                       \r\n(4,7): error CS0246: The type or namespace name \u0027System\u0027 could not be found (are you missing a using directive or an assembly reference?)                       \r\n(5,13): error CS0234: The type or namespace name \u0027Web\u0027 does not exist in the namespace \u0027Xeora\u0027 (are you missing an assembly reference?)                         \r\n(6,13): error CS0234: The type or namespace name \u0027Web\u0027 does not exist in the namespace \u0027Xeora\u0027 (are you missing an assembly reference?)                         \r\n(15,14): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(8,50): error CS0246: The type or namespace name \u0027DomainExecutable\u0027 could not be found (are you missing a using directive or an assembly reference?)            \r\n(15,51): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(8,179): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                               \r\n(8,199): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(8,199): error CS0246: The type or namespace name \u0027MethodInfo\u0027 could not be found (are you missing a using directive or an assembly reference?)                 \r\n(8,163): error CS0518: Predefined type \u0027System.Void\u0027 is not defined or imported                                                                                 \r\n(9,34): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                                \r\n(9,58): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                                \r\n(9,17): error CS0518: Predefined type \u0027System.Void\u0027 is not defined or imported                                                                                  \r\n(10,17): error CS0518: Predefined type \u0027System.Void\u0027 is not defined or imported                                                                                 \r\n(11,45): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                               \r\n(11,17): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(11,17): error CS0246: The type or namespace name \u0027ResolutionResult\u0027 could not be found (are you missing a using directive or an assembly reference?)           \r\n(12,51): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                               \r\n(12,17): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(12,17): error CS0246: The type or namespace name \u0027PermissionResult\u0027 could not be found (are you missing a using directive or an assembly reference?)           \r\n(13,45): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                               \r\n(13,66): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                               \r\n(13,17): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(13,17): error CS0246: The type or namespace name \u0027TranslationResult\u0027 could not be found (are you missing a using directive or an assembly reference?)          \r\n(10,22): error CS0115: \u0027X088a4d2ed3074c4db285bbda78fdfd8f.Terminate()\u0027: no suitable method found to override                                                    \r\n(8,109): error CS0518: Predefined type \u0027System.Object\u0027 is not defined or imported                                                                               \r\n(8,109): error CS0246: The type or namespace name \u0027DomainPacket\u0027 could not be found (are you missing a using directive or an assembly reference?)               \r\n(8,68): error CS0518: Predefined type \u0027System.Void\u0027 is not defined or imported                                                                                  \r\n(15,76): error CS0518: Predefined type \u0027System.String\u0027 is not defined or imported                                                                               \r\n(15,14): error CS1729: \u0027object\u0027 does not contain a constructor that takes 0 arguments                                                                           \r\n(8,132): error CS1729: \u0027DomainExecutable\u0027 does not contain a constructor that takes 1 arguments                                                                 \r\n                                                                                                                                                                   at Xeora.Web.Manager.Statement.Factory.Compile(String executableName, String codeBlock)                                                                      \r\n   at Xeora.Web.Manager.Statement.Factory.Create(String blockKey, String statement, Boolean parametric)                                                         \r\n   at Xeora.Web.Manager.Statement.Factory.Get(String blockKey, String statement, Boolean parametric, Boolean cache)                                             \r\n   at Xeora.Web.Manager.Statement.Factory.CreateExecutable(IEnumerable`1 domainIdAccessTree, String statementBlockId, String statement, Boolean parametric, Boolean cache)\r\n   --- End of inner exception stack trace ---                                                                                                                   \r\n   at Xeora.Web.Directives.Elements.InLineStatement.ExecuteStatement()                                                                                          \r\n   at Xeora.Web.Directives.Elements.InLineStatement.PostRender()                                                                                                \r\n   at Xeora.Web.Directives.Directive.Render()                                                                                                                   \r\n   at Xeora.Web.Directives.DirectiveCollection.Render(IDirective directive)\r\n```",
                                           "updatedAt":  "2020-12-10T17:31:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0Mjg3MTA4Mw==",
                                           "createdAt":  "2020-12-10T23:43:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Hmm, this worked for me locally in a simple test. You may need to ask Roslyn for help with a detailed example",
                                           "updatedAt":  "2020-12-10T23:43:01Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "warning CS8021: No value for RuntimeMetadataVersion found.",
        "labels":  [
                       "question",
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/46312",
        "createdAt":  "2020-12-22T03:32:30Z",
        "number":  46312,
        "author":  "maxpiva",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-30T20:31:36Z",
        "body":  "### Description\r\n\r\nThe console executable is created using SingleFile, SelfContained \u0026 IncludeNativeLibrariesForSelfExtract.\r\n\r\nIt uses the OpenCVSharp NuGet and native OpenCV DLL.\r\nWhen OpenCVSharp is trying to load the native OpenCV DLL from the **temporary directory** it fails, and also original caller program is removed by Windows Defender.\r\n\r\n#### WIndows Defender Response:\r\n\r\nThreat quarantined -\u003e SEVERE\r\n\r\n**Detected:** Behavior:Win32/DefenseEvasion.UM!ml\r\n**Status:** Quarantined\r\n\r\n\r\n### Configuration\r\n\r\nNET 5.0.200-preview.20601.7\r\nWindows 10\r\nx64\r\n\r\n### Other information\r\n\r\nException when it happens:\r\n```\r\nSystem.IO.FileLoadException:\r\nFile name: \u0027OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099\u0027\r\n   at Sushi.Net.Library.LibIO.CVMatrix.MatchTemplate(CVMatrix pattern, Boolean type)\r\n   at Sushi.Net.Library.Audio.AudioStream.FindSubStream(SubStream pattern, Single window_center, Single window_size, Boolean type)\r\n   at Sushi.Net.Library.Events.Shifter.CalculateShifts(AudioStream src_stream, AudioStream dst_stream, List`1 groups_list, Single normal_window, Single max_window, Single rewind_trash, Single allowed_error)\r\n```\r\nThis not always happens. It happens at random. \r\n\r\nThe native library lookup mechanism in .net core seems to trigger Windows Defender, maybe the solution is to downgrade the Windows Defender detected behaviour make in it less aggressive or whitelist this lookup process. \r\nOf course, this is only a supposition.:upside_down_face:\r\n\r\n**Area:**\r\n\r\narea-Single-File\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONik9Cw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0OTMxODY2Mg==",
                                           "createdAt":  "2020-12-22T03:32:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nThe console executable is created using SingleFile, SelfContained \u0026 IncludeNativeLibrariesForSelfExtract.\r\n\r\nIt uses the OpenCVSharp NuGet and native OpenCV DLL.\r\nWhen OpenCVSharp is trying to load the native OpenCV DLL from the **temporary directory** it fails, and also original caller program is removed by Windows Defender.\r\n\r\n#### WIndows Defender Response:\r\n\r\nThreat quarantined -\u003e SEVERE\r\n\r\n**Detected:** Behavior:Win32/DefenseEvasion.UM!ml\r\n**Status:** Quarantined\r\n\r\n\r\n### Configuration\r\n\r\nNET 5.0.200-preview.20601.7\r\nWindows 10\r\nx64\r\n\r\n### Other information\r\n\r\nException when it happens:\r\n```\r\nSystem.IO.FileLoadException:\r\nFile name: \u0027OpenCvSharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=6adad1e807fea099\u0027\r\n   at Sushi.Net.Library.LibIO.CVMatrix.MatchTemplate(CVMatrix pattern, Boolean type)\r\n   at Sushi.Net.Library.Audio.AudioStream.FindSubStream(SubStream pattern, Single window_center, Single window_size, Boolean type)\r\n   at Sushi.Net.Library.Events.Shifter.CalculateShifts(AudioStream src_stream, AudioStream dst_stream, List`1 groups_list, Single normal_window, Single max_window, Single rewind_trash, Single allowed_error)\r\n```\r\nThis not always happens. It happens and random. \r\n\r\nThe native library lookup mechanism in .net core seems to trigger Windows Defender, maybe the solution is to downgrade the Windows Defender detected behaviour make in it less aggressive or whitelist this lookup process. \r\nOf course, this is only a supposition.:upside_down_face:\r\n\r\n**Area:**\r\n\r\narea-Single-File\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emaxpiva\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-12-22T03:32:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1MzUyMTUzNg==",
                                           "createdAt":  "2021-01-02T19:49:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Can you please clarify:\r\n* If the main executable is tagged by Windows Defender then I assume it won\u0027t run at all, right?\r\n* So the failure above happens only if the executable itself is not tagged. In that case, does Windows Defender report something - like tagging the native library it\u0027s trying to load?\r\n* The failure above is about failing to load a managed dll - not the native dll (unless it\u0027s a C++/CLI dll, in which case it\u0027s getting weird).\r\n\r\nThe runtime should use AMSI APIs to report the dll being loaded to Windows Defender (or any other AV installed): https://github.com/dotnet/runtime/blob/113810178607cee16c5073aa7cf4d5f7414f2c4c/src/coreclr/vm/amsi.cpp#L73",
                                           "updatedAt":  "2021-01-02T19:49:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1MzUyMzQ1Nw==",
                                           "createdAt":  "2021-01-02T20:09:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maxpiva",
                                           "body":  "\u003e Can you please clarify:\r\n\u003e \r\n\u003e * If the main executable is tagged by Windows Defender then I assume it won\u0027t run at all, right?\r\n\r\nIt starts running, and run several times without a problem, but at random, when the native library needs to be loaded is when the wreck happens. In this case OpenCV. I notice that IncludeNativeLibrariesForSelfExtract publish decompress the related DLLs into the Temp/.net/(name of the exe)/temp directory. And, actually, I\u0027m inclined to think that the File.Not.Found is from the main exe itself disappearing and not the external library disappearing. But the lookup/load process seems to be the trigger.\r\n\r\n\r\n\u003e * So the failure above happens only if the executable itself is not tagged. In that case, does Windows Defender report something - like tagging the native library it\u0027s trying to load?\r\n\r\nNo, it tags the main executable, and move it to quarantine. I\u0027m almost certain it does not tag the native library\r\n\r\n\u003e * The failure above is about failing to load a managed dll - not the native dll (unless it\u0027s a C++/CLI dll, in which case it\u0027s getting weird).\r\n\r\nNo, it\u0027s the looking for the native one, that triggers windows defender, all the managed dll are already linked and trimmed with single file into the main exe.\r\n\r\n Directory of C:\\Users\\mpiva\\AppData\\Local\\Temp\\.net\\sushi.net\\4k1sh13g.evj\r\n\r\n12/25/2020  11:37 PM    \u003cDIR\u003e          .\r\n12/25/2020  11:37 PM    \u003cDIR\u003e          ..\r\n12/25/2020  11:37 PM           747,912 clrcompression.dll\r\n12/25/2020  11:37 PM         1,324,424 clrjit.dll\r\n12/25/2020  11:37 PM         5,157,256 coreclr.dll\r\n12/25/2020  11:37 PM         1,047,928 mscordaccore.dll\r\n**12/25/2020  11:37 PM        19,436,544 OpenCvSharpExtern.dll**\r\n               5 File(s)     27,714,064 bytes\r\n               2 Dir(s)  79,605,387,264 bytes free\r\n\r\n\u003e \r\n\u003e The runtime should use AMSI APIs to report the dll being loaded to Windows Defender (or any other AV installed):\r\n\u003e \r\n\u003e https://github.com/dotnet/runtime/blob/113810178607cee16c5073aa7cf4d5f7414f2c4c/src/coreclr/vm/amsi.cpp#L73\r\n\r\n\r\nCode and binaries in:\r\n[https://github.com/maxpiva/Sushi.Net](https://github.com/maxpiva/Sushi.Net)\r\n",
                                           "updatedAt":  "2021-01-02T20:09:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42KT0L",
                                           "createdAt":  "2021-08-30T20:31:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Unfortunately we don\u0027t have a lot of control over how the Windows antivirus processes files. We\u0027ll keep this issue in case we find some pattern that can mitigate the problem, but otherwise this is likely up to Windows to change.",
                                           "updatedAt":  "2021-08-30T20:31:36Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Executable produced with SingleFile \u0026 IncludeNativeLibrariesForSelfExtract may trigger Windows Defender",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50081",
        "createdAt":  "2021-03-23T07:28:36Z",
        "number":  50081,
        "author":  "Symbai",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-16T20:07:50Z",
        "body":  "Apps published as self contained and single file currently takes 160mb (WPF). I\u0027ve noticed that on many computers it takes several seconds before the WPF GUI windows appears (blank project), depending on the hardware. I\u0027ve set a [WPF splash screen](https://docs.microsoft.com/en-us/dotnet/desktop/wpf/app-development/how-to-add-a-splash-screen-to-a-wpf-application?view=netframeworkdesktop-4.8) but it appears still too late, so I guess it looks like that most of the time is probably taken from unpacking the app in memory and loading the runtime.\r\n\r\nSo it would be ideal if we can get an option to show a splashscreen by the native host executable that shows up before it starts to unpack all files in memory and prepares the runtime.\r\n\r\nFYI: Loading time on one computer is 7 seconds. ~~Published with trimming enabled reduces the loading time to 3 seconds. So its definitely the number of (.NET runtime) assemblies which affects the loading time a lot in a single file application. Unfortunately the trimming feature is not an option as it causes all my real applications to crash at start. Only on a blank WPF project its working. However im only saying this to underline the need of a splash screen.~~ //edit: Only when published as single file, see comments below.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMBRS6g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNDY4MjYyMA==",
                                           "createdAt":  "2021-03-23T07:28:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nApps published as self contained and single file currently takes 160mb (WPF). I\u0027ve noticed that on many computers it takes several seconds before the WPF GUI windows appears (blank project), depending on the hardware. I\u0027ve set a [WPF splash screen](https://docs.microsoft.com/en-us/dotnet/desktop/wpf/app-development/how-to-add-a-splash-screen-to-a-wpf-application?view=netframeworkdesktop-4.8) but it appears still too late, so I guess it looks like that most of the time is probably taken from unpacking the app in memory and loading the runtime.\r\n\r\nSo it would be ideal if we can get an option to show a splashscreen by the native host executable that shows up before it starts to unpack all files in memory and prepares the runtime.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eSymbai\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-23T07:28:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNTE0NDIxOA==",
                                           "createdAt":  "2021-03-23T18:44:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Any chance you could provide the app or a trace? .NET usually loads DLLs on demand, so even if there are a lot of them, it would be surprising for the delay to show up in startup. Trimming could have reduced the load time, but it also may have trimmed out a piece of code that was contributing to the delay.",
                                           "updatedAt":  "2021-03-23T18:44:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNTE1NzQ0Mw==",
                                           "createdAt":  "2021-03-23T19:04:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Just curious, is the single-file perf slower than running the same app as non-single-file?",
                                           "updatedAt":  "2021-03-23T19:04:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNTYwNDYyMA==",
                                           "createdAt":  "2021-03-24T08:26:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Symbai",
                                           "body":  "\u003e Any chance you could provide the app or a trace?\r\n\r\nIts a commercial application I cannot share public. How do I make a trace? I\u0027ve noticed the trimming feature (the issue was moved but the WPF team has nothing to do with the trimming feature so its probably gets never reviewed https://github.com/dotnet/wpf/issues/4321) has trimmed many mandatory files including System.IO and System.NET and System.Runtime which all are required for the application. \r\n\r\nI\u0027ve added a messagebox to the App ctor which is the first one in our code that ever gets executed and I\u0027ve noticed without trimming it takes 6 seconds for the messagebox to appear. From the 7 seconds for the window to show up its only 1 second of our code/GUI then. Our code, no matter what is trimmed out there, is not the reason for the delay.\r\n\r\nI dont know how exactly the single file works but we have one computer with a Samsung 980 pro SSD drive and 128 GB ram, only Windows Defender as AV and it takes 7 seconds for the window to appear (or 6 seconds until the App ctor is executed). With the variety of computers out there we cannot ship it like that to our customers.",
                                           "updatedAt":  "2021-03-24T08:26:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNTcxNDgzNQ==",
                                           "createdAt":  "2021-03-24T10:51:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I assume this is on .NET 5+, right?\r\n\r\nAre you using `IncludeAllContentForSelfExtract` or maybe even just `IncludeNativeLibrariesForSelfExtract`? Can you try running it without single-file, publish the app the same way just disable single-file and try that.\r\n\r\nI just tried locally on an empty WPF app, and it takes about 2 seconds to start (on my relatively fast machine), so 6 seconds sounds possible on a slow machine.\r\n\r\nYou could write your own host with splashscreen if you wanted. It\u0027s actually not that hard using the native hosting APIs. The code would be similar to this https://github.com/dotnet/samples/blob/main/core/hosting/HostWithHostFxr/src/NativeHost/nativehost.cpp (the sample doesn\u0027t start an app, but the APIs for starting the app work the same way).\r\n\r\n(\"WPF has nothing to do with trimming\" - in this case the trimming toolset needs hints from the WPF codebase to be able to correctly trim it, just like all of the work we\u0027ve done in the [core framework](https://github.com/dotnet/runtime/pulls?q=is%3Apr+label%3Alinkable-framework+). Lot of the time this requires somebody familiar with the codebase.)",
                                           "updatedAt":  "2021-03-24T10:51:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNTc2MTA0NA==",
                                           "createdAt":  "2021-03-24T11:54:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Symbai",
                                           "body":  "\u003e Just curious, is the single-file perf slower than running the same app as non-single-file?\r\n\r\nAfter being back to office: YES. \r\n\r\nPublished as single file: 7 seconds\r\nPublished normally with all dlls in the folder, NOT trimmed: 1.5 seconds\r\n\r\n\u003e I assume this is on .NET 5+, right?\r\n\r\nYes\r\n\r\n\u003e You could write your own host with splashscreen if you wanted\r\n\r\nI dont want to write my own host since the inbuilt host gets improved by you and writing my own just means another thing to keep track of that only causes more issues. From my results there is a performance problem with singlefile publishing and if you dont want to figure out whats causing it or if it turns out that its not fixable (I assume its probably unpacking the DLLs in memory, or maybe some weird AV scanning behavior that triggers it) then adding support for a splashscreen sounds like a good idea and probably easier to achieve.",
                                           "updatedAt":  "2021-03-24T11:56:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNTc2ODA4NQ==",
                                           "createdAt":  "2021-03-24T12:06:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Are you using `IncludeAllContentForSelfExtract` or maybe even just `IncludeNativeLibrariesForSelfExtract`?\r\n\r\nWhat AV are you running on the machine? I\u0027ve seen a report that with certain AV software single-file is much slower (the runtime has to report all code loaded from memory to the AV - in this case that\u0027s pretty much all of the assemblies - but certain AV doesn\u0027t cache the results of such scans and probably spends lot of time analyzing it).",
                                           "updatedAt":  "2021-03-24T12:06:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNTc4MDUzNA==",
                                           "createdAt":  "2021-03-24T12:28:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Symbai",
                                           "body":  "\u003e Are you using `IncludeAllContentForSelfExtract` or maybe even just `IncludeNativeLibrariesForSelfExtract`?\r\n\r\nSorry I haven\u0027t answered your question. No I dont use any of theses. Unless the VS build page silently enables them but I haven\u0027t added these lines to the csproj file myself.\r\n\r\n\u003e What AV are you running on the machine?\r\n\r\nOn both machines its Windows Defender with default settings.\r\n\r\nIt needs two factors to cause a drastically slow start: 1. The code/behavior of singlefile and 2. A specific but powerful machine (whatever it is that it depends on there). Here are more information about the system where its slow on single file. \r\n\r\n\r\n```\r\n------------------\r\nSystem Information\r\n------------------ \r\n Operating System: Windows 10 Pro 64-bit (10.0, Build 19042) (19041.vb_release.191206-1406)\r\n                 Language: English (Regional Setting: English)\r\n             System Model: NEURON\r\n                     BIOS: 2004 (type: UEFI)\r\n                Processor: Intel(R) Core(TM) i9-10900K CPU @ 3.70GHz (20 CPUs), ~3.7GHz\r\n                   Memory: 65536MB RAM\r\n      Available OS Memory: 65434MB RAM\r\n                Page File: 50359MB used, 29074MB available\r\n              Windows Dir: C:\\WINDOWS\r\n          DirectX Version: DirectX 12\r\n      DX Setup Parameters: Not found\r\n         User DPI Setting: 96 DPI (100 percent)\r\n       System DPI Setting: 96 DPI (100 percent)\r\n\r\n---------------\r\nDisplay Devices\r\n---------------\r\n           Card name: NVIDIA GeForce RTX 3090\r\n        Manufacturer: NVIDIA\r\n           Chip type: GeForce RTX 3090\r\n------------------------\r\nDisk \u0026 DVD/CD-ROM Drives\r\n------------------------\r\n      Drive: C:\r\n Free Space: 398.9 GB\r\nTotal Space: 768.0 GB\r\nFile System: NTFS\r\n      Model: Samsung SSD 980 PRO 1TB\r\n\r\n      Drive: D:\r\n Free Space: 273.2 GB\r\nTotal Space: 828.5 GB\r\nFile System: NTFS\r\n      Model: NVMe Samsung SSD 960 SCSI Disk Device\r\n\r\n      Drive: I:\r\n Free Space: 3994.9 GB\r\nTotal Space: 7630.9 GB\r\nFile System: NTFS\r\n      Model: WD My Book 25EE USB Device\r\n\r\n      Drive: J:\r\n Free Space: 1054.6 GB\r\nTotal Space: 2861.6 GB\r\nFile System: NTFS\r\n      Model: WD My Book 1235 USB Device\r\n\r\n```\r\n\r\n\r\n\r\nI\u0027m unable to determine the reason for it but consider the app sizes and number of binaries in singlefile and non-singlefile and that we have a native app host, my request for a splash screen in the native host is more widely. For example even developers that have customers with HDD instead of SSDs and many more assemblies to load can benefit when they can add a single line to show a splash screen until their application is visible. Or Winforms developers which have a large GUI applications and don\u0027t have the possibility to show a splash screen like WPF users. There are many different situations where its helpful to being able to show a splash screen.",
                                           "updatedAt":  "2021-03-24T12:28:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNjIwMDYxNw==",
                                           "createdAt":  "2021-03-24T21:33:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Please don\u0027t take this discussion as us trying to say that having a splashscreen is not a good idea. We\u0027re also using this issue as a way to try to get more info on why it starts so slow.\r\n\r\nSpecifically the machine you mention above - that\u0027s a VERY fast machine. It should not take 6 seconds. Just to make sure I understand: The slow start only reproes on that very fast machine with single-file. On a different machine the same single-file starts reasonably fast?",
                                           "updatedAt":  "2021-03-24T21:33:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNjYzODMxNA==",
                                           "createdAt":  "2021-03-25T12:21:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Symbai",
                                           "body":  "\u003e On a different machine the same single-file starts reasonably fast?\r\n\r\nAround 2 seconds yes",
                                           "updatedAt":  "2021-03-25T12:21:18Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Splashscreen for selfcontained published applications",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51202",
        "createdAt":  "2021-04-13T23:30:46Z",
        "number":  51202,
        "author":  "tlakollo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-15T07:23:35Z",
        "body":  "### Description\r\nFile [EvaluateExpression.cs](https://github.com/dotnet/runtime/blob/main/src/mono/wasm/debugger/BrowserDebugProxy/EvaluateExpression.cs) makes use of a single file dangerous patterns inside function CompileAndRunTheExpression. The result of this code if ever executed as a single file would be having empty metadata references for the compilation. This bug tracks the progress to understand:\r\nIf the warning can be suppressed because the code will never be used in a single file published application\r\nor\r\nUse something different from Assembly.Location to build the MetadataReference for the compilation\r\nIn the meantime, the warning will be suppressed in code with a reference to this issue until this gets fixed",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMOgjWg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTExNjIwNQ==",
                                           "createdAt":  "2021-04-13T23:30:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\nFile [EvaluateExpression.cs](https://github.com/dotnet/runtime/blob/main/src/mono/wasm/debugger/BrowserDebugProxy/EvaluateExpression.cs) makes use of a single file dangerous patterns inside function CompileAndRunTheExpression. The result of this code if ever executed as a single file would be having empty metadata references for the compilation. This bug tracks the progress to understand:\r\nIf the warning can be suppressed because the code will never be used in a published application\r\nor\r\nUse something different from Assembly.Location to build the MetadataReference for the compilation\r\nIn the meantime, the warning will be suppressed in code with a reference to this issue until this gets fixed\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etlakollo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq.Expressions`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-13T23:30:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTExNzMxNA==",
                                           "createdAt":  "2021-04-13T23:34:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\nFile [EvaluateExpression.cs](https://github.com/dotnet/runtime/blob/main/src/mono/wasm/debugger/BrowserDebugProxy/EvaluateExpression.cs) makes use of a single file dangerous patterns inside function CompileAndRunTheExpression. The result of this code if ever executed as a single file would be having empty metadata references for the compilation. This bug tracks the progress to understand:\r\nIf the warning can be suppressed because the code will never be used in a published application\r\nor\r\nUse something different from Assembly.Location to build the MetadataReference for the compilation\r\nIn the meantime, the warning will be suppressed in code with a reference to this issue until this gets fixed\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etlakollo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-13T23:34:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMDUxOTc3MA==",
                                           "createdAt":  "2021-04-15T15:28:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@lewing @CoffeeFlux @vargaz  - do we ever expect the Wasm BrowserDebugProxy to run in a single file mode? I assume \"no\", and we should just suppress the warning we are getting from this assembly. Or maybe even turn off the single-file analyzer all together if we don\u0027t expect this code to ever run in a single file app.",
                                           "updatedAt":  "2021-04-15T15:28:05Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Wasm browser debug proxy: EvaluateExpression uses single file dangerous patterns.",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54234",
        "createdAt":  "2021-06-15T18:38:12Z",
        "number":  54234,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-29T22:18:07Z",
        "body":  "Right now an attempt to build a self-contained app as a part of Host/Bundle test fails. For the time being, if it is possible, we could use some workaround, but it is not yet clear if that is possible.\r\n\r\nOur current test infrastructure emulates SDK environment and for composite r2r we would need to fake even more. It may be more feasible to create a test tool (like Bundler, but for building), that could allow just the scenarios in tests and with simpler setup.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONXfYFQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MTc0MTU5NA==",
                                           "createdAt":  "2021-06-15T18:38:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\r\nRight now an attempt to build a self-contained app as a part of Host/Bundle test fails. The \"right\" fix for that may need to happen on SDK side.\r\nFor the time being, if it is possible, we could use some workaround, but it is not yet clear if that is possible.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eVSadov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `area-crossgen2-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-15T18:38:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MTc0MjkwOA==",
                                           "createdAt":  "2021-06-15T18:40:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "CC: @trylek - This is a bug to track enabling of singlefile composite r2r tests in runtime repo introduced in https://github.com/dotnet/runtime/pull/53739\r\n",
                                           "updatedAt":  "2021-06-15T20:27:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41d9gV",
                                           "createdAt":  "2021-08-11T18:17:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "@VSadov was this completed?",
                                           "updatedAt":  "2021-08-11T18:17:48Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Need to find a way to build a self-contained composite r2r app in the context of Host/Bundle tests.",
        "labels":  [
                       "test-enhancement",
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54947",
        "createdAt":  "2021-06-30T05:17:19Z",
        "number":  54947,
        "author":  "argium",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-26T23:33:55Z",
        "body":  "### Description\r\n\r\nWe use .NET5 to create self-contained linux binaries. Our linux service engineers have asked us to stamp ELF metadata on all files that run in production.  .NET5 produces binaries that are non-standard and cannot be modified using tools like objcopy.\r\n\r\n1. Create a console application using the .NET Console Application template in VS2019\r\n2. Add `\u003cPublishSingleFile\u003etrue\u003c/PublishSingleFile\u003e` to the csproj\r\n3. run `dotnet publish -r linux-x64`\r\n4. run `objcopy ConsoleApp1 ConsoleApp2`\r\n\r\nExpected:\r\nConsoleApp2 should run\r\n\r\nActual:\r\n\r\n```\r\n$ objcopy ConsoleApp1 ConsoleApp2\r\n$ ll\r\ntotal 71384\r\n-rwxrwxrwx 1 rifuller rifuller 62584280 Jun 25 22:32 ConsoleApp1*\r\n-rwxrwxrwx 1 rifuller rifuller     9628 Jun 25 22:32 ConsoleApp1.pdb*\r\n-rwxrwxrwx 1 rifuller rifuller 10497152 Jun 25  2021 ConsoleApp2*\r\n \r\n$ ./ConsoleApp2\r\nFailure processing application bundle; possible file corruption.\r\nArithmetic overflow while reading bundle.\r\nA fatal error occured while processing application bundle\r\n```\r\n\r\n\r\n### Configuration\r\n\r\n.net version = 5.0.301\r\n\r\n### Regression?\r\n\r\nUnsure.\r\n\r\n### Other information\r\n\r\nN/A\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONEGwHQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MTEwMzE4NA==",
                                           "createdAt":  "2021-06-30T05:17:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-console\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWe use .NET5 to create self-contained linux binaries. Our linux service engineers have asked us to stamp ELF metadata on all files that run in production.  .NET5 produces binaries that are non-standard and cannot be modified using tools like objcopy.\r\n\r\n1. Create a console application using the .NET Console Application template in VS2019\r\n2. Add `\u003cPublishSingleFile\u003etrue\u003c/PublishSingleFile\u003e` to the csproj\r\n3. run `dotnet publish -r linux-x64`\r\n4. run `objcopy ConsoleApp1 ConsoleApp2`\r\n\r\nExpected:\r\nConsoleApp2 should run\r\n\r\nActual:\r\n\r\n```\r\n$ objcopy ConsoleApp1 ConsoleApp2\r\n$ ll\r\ntotal 71384\r\n-rwxrwxrwx 1 rifuller rifuller 62584280 Jun 25 22:32 ConsoleApp1*\r\n-rwxrwxrwx 1 rifuller rifuller     9628 Jun 25 22:32 ConsoleApp1.pdb*\r\n-rwxrwxrwx 1 rifuller rifuller 10497152 Jun 25  2021 ConsoleApp2*\r\n \r\n$ ./ConsoleApp2\r\nFailure processing application bundle; possible file corruption.\r\nArithmetic overflow while reading bundle.\r\nA fatal error occured while processing application bundle\r\n```\r\n\r\n\r\n### Configuration\r\n\r\n.net version = 5.0.301\r\n\r\n### Regression?\r\n\r\nUnsure.\r\n\r\n### Other information\r\n\r\nN/A\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erequilium\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-30T05:17:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MTEwMzQ2OA==",
                                           "createdAt":  "2021-06-30T05:18:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBwq_wQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2021-06-30T05:36:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "argium",
                                           "body":  "@jkotas followup from email.",
                                           "updatedAt":  "2021-06-30T05:18:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MTExMDEzNQ==",
                                           "createdAt":  "2021-06-30T05:36:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWe use .NET5 to create self-contained linux binaries. Our linux service engineers have asked us to stamp ELF metadata on all files that run in production.  .NET5 produces binaries that are non-standard and cannot be modified using tools like objcopy.\r\n\r\n1. Create a console application using the .NET Console Application template in VS2019\r\n2. Add `\u003cPublishSingleFile\u003etrue\u003c/PublishSingleFile\u003e` to the csproj\r\n3. run `dotnet publish -r linux-x64`\r\n4. run `objcopy ConsoleApp1 ConsoleApp2`\r\n\r\nExpected:\r\nConsoleApp2 should run\r\n\r\nActual:\r\n\r\n```\r\n$ objcopy ConsoleApp1 ConsoleApp2\r\n$ ll\r\ntotal 71384\r\n-rwxrwxrwx 1 rifuller rifuller 62584280 Jun 25 22:32 ConsoleApp1*\r\n-rwxrwxrwx 1 rifuller rifuller     9628 Jun 25 22:32 ConsoleApp1.pdb*\r\n-rwxrwxrwx 1 rifuller rifuller 10497152 Jun 25  2021 ConsoleApp2*\r\n \r\n$ ./ConsoleApp2\r\nFailure processing application bundle; possible file corruption.\r\nArithmetic overflow while reading bundle.\r\nA fatal error occured while processing application bundle\r\n```\r\n\r\n\r\n### Configuration\r\n\r\n.net version = 5.0.301\r\n\r\n### Regression?\r\n\r\nUnsure.\r\n\r\n### Other information\r\n\r\nN/A\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erequilium\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `area-System.Console`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-30T05:36:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NjY4MzQ2MA==",
                                           "createdAt":  "2021-07-08T19:18:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "This is unfortunately expected right now. On Linux (and on Windows) the single-file is created by simply appending to existing executable. We don\u0027t modify the headers in any way in this case. That means that the file is technically not valid per the file format specification, but OS loaders don\u0027t care. Some other tools do care though.\r\n\r\n@VSadov to comment on possible ideas on how complex it would be to fixup the ELF and PE headers (similar to what we do on macOS), but I don\u0027t think this will be possible in .NET 6.",
                                           "updatedAt":  "2021-07-08T19:18:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NjcxNTg2Nw==",
                                           "createdAt":  "2021-07-08T20:15:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "It should be possible to put single-file payload into a file section in both ELF and PE case and could be more straightforward than in the case of Mach-O. The difficulties will be in carefully patching the existing file structure for the presence of another section.  \r\n\r\nRight now HostModel has very little support for parsing/writing these formats, especially for ELF, [this is basically all of it](https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/installer/managed/Microsoft.NET.HostModel/AppHost/ElfUtils.cs). Some additional support will need to be built up. This does not look like something we would try to fit in 6.0",
                                           "updatedAt":  "2021-07-08T20:16:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NjcyMDE1Nw==",
                                           "createdAt":  "2021-07-08T20:19:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Ideally, you would want it arrange it such that the OS maps the payload in exactly as we need it, with the right executable permissions and relocs.",
                                           "updatedAt":  "2021-07-08T20:19:52Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Self-contained linux-x64 binary cannot be edited with obj copy",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58464",
        "createdAt":  "2021-08-31T20:30:44Z",
        "number":  58464,
        "author":  "omajid",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCu1Phg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vitek-karas",
                                            "createdAt":  "2021-08-31T20:33:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VSadov",
                                            "createdAt":  "2021-08-31T20:46:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EgorBo",
                                            "createdAt":  "2021-09-01T11:41:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mterhorst",
                                            "createdAt":  "2021-09-01T20:01:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielchalmers",
                                            "createdAt":  "2023-03-06T05:55:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2023-03-13T01:47:01Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2023-06-26T20:32:51Z",
        "body":  "See: https://github.com/dotnet/runtime/issues/35221#issuecomment-909595319\r\n\r\nSingle file apps extract to `$HOME/.net`, instead of using on one of the already-common directories like `$HOME/.dotnet` or even `$XDG_CACHE_HOME` (with fallback to `$HOME/.cache`).\r\n\r\nFor .NET 7, we should try and fix this and use `$HOME/.dotnet` instead of adding one more dot-directory to the user\u0027s home.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONj24NA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42N5HK",
                                           "createdAt":  "2021-08-31T20:30:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-08-31T20:30:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42N5Uw",
                                           "createdAt":  "2021-08-31T20:32:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "omajid",
                                           "body":  "cc @vitek-karas ",
                                           "updatedAt":  "2021-08-31T20:32:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42N5kr",
                                           "createdAt":  "2021-08-31T20:33:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSee: https://github.com/dotnet/runtime/issues/35221#issuecomment-909595319\r\n\r\nSingle file apps extract to `$HOME/.net`, instead of using on one of the already-common directories like `$HOME/.dotnet` or even `$XDG_CACHE_HOME` (with fallback to `$HOME/.cache`).\r\n\r\nFor .NET 7, we should try and fix this and use `$HOME/.dotnet` instead of adding one more dot-directory to the user\u0027s home.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eomajid\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-31T20:33:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42Pbg0",
                                           "createdAt":  "2021-09-01T07:28:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e $XDG_CACHE_HOME (with fallback to $HOME/.cache).\r\n\r\n+1, this is the most appropriate location for this type of files.\r\n\r\ne.g. `$XDG_CACHE_HOME/dotnet/app-extract`",
                                           "updatedAt":  "2021-09-01T07:28:06Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Use `.dotnet` instead of `.net` for single file applications in .NET 7",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59715",
        "createdAt":  "2021-09-28T20:00:31Z",
        "number":  59715,
        "author":  "agocke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODL91NA==",
                          "nodes":  [
                                        {
                                            "content":  "ROCKET",
                                            "user":  "jkoritzinsky",
                                            "createdAt":  "2021-09-28T22:52:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2021-10-07T06:06:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "richardlalancetteyoui",
                                            "createdAt":  "2021-10-25T15:51:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EduardoLarios",
                                            "createdAt":  "2021-11-06T23:10:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sps014",
                                            "createdAt":  "2021-11-15T21:24:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rampaa",
                                            "createdAt":  "2025-08-20T15:25:11Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-08-19T21:38:49Z",
        "body":  "The single-file exes are already valid Mach-O binaries since that is necessary for Mac Code Signing to work properly.\r\n\r\nWe need to do the same for Windows and Linux:\r\n\r\n- [ ] Single-file exes should be valid PE files on Windows\r\n- [ ] Single-file exes should be valid ELF files on Linux",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHON2hE3Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43aETd",
                                           "createdAt":  "2021-09-28T20:00:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe single-file exes are already valid Mach-O binaries since that is necessary for Mac Code Signing to work properly.\r\n\r\nWe need to do the same for Windows and Linux:\r\n\r\n- [ ] Single-file exes should be valid PE files on Windows\r\n- [ ] Single-file exes should be valid ELF files on Linux\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eagocke\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-28T20:00:35Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Single-file executables should be valid executables according to the platform file spec",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61073",
        "createdAt":  "2021-11-01T22:41:58Z",
        "number":  61073,
        "author":  "tapika",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-08T17:16:17Z",
        "body":  "As discussed in #60936 - at the moment for .NET 6 there exists mechanism to use compression - however extraction of executable / dll\u0027s happens into RAM only, which in a turn means that decompression is performed everytime when readytorun executable is launched.\r\n\r\nIt would be useful if decompression would happen in a folder:\r\n- With possibility to control where extraction happens (#35249, #3844)\r\n   - Uncompress once, use for eternity.\r\n- Being able to select compression level\r\n- Being able to choose compression algorithm\r\n   Last two can compress better - for 168 Mb executable with .net 6.0 compression give 90 Mb, which can reduced even further to for example 39-41 Mb using Brotli compression.\r\n\r\nOne implementation approach could be to use squash benchmarks and also C-style codecs:\r\n\r\nhttps://quixdb.github.io/squash-benchmark/#results\r\n\r\nAnd github itself:\r\n\r\nhttps://github.com/quixdb/squash\r\n\r\nUsing API similar to or even exactly squash plugins can hide you compression behind one clean cut api.\r\nOnly change which can be done - is maybe to change from dynamic linking to static linking, so can be integrated into\r\nhost application.\r\n\r\nNice to have: \r\n- Be Windows 7 compatible if possible\r\n- Developers can change compression codec / compression level on their own - for example by providing their own dll / static library to ReadyToRun build process. (API could be similar to squash)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORI5qow==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc45B6KC",
                                           "createdAt":  "2021-11-01T22:50:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-compression\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAs discussed in #60936 - at the moment for .NET 6 there exists mechanism to use compression - however extraction of executable / dll\u0027s happens into RAM only, which in a turn means that decompression is performed everytime when readytorun executable is launched.\r\n\r\nIt would be useful if decompression would happen in a folder:\r\n- With possibility to control where extraction happens (#35249, #3844)\r\n   - Uncompress once, use for eternity.\r\n- Being able to select compression level\r\n- Being able to choose compression algorithm\r\n   Last two can compress better - for 168 Mb executable with .net 6.0 compression give 90 Mb, which can reduced even further to for example 39-41 Mb using Brotli compression.\r\n\r\nOne implementation approach could be to use squash benchmarks and also C-style codecs:\r\n\r\nhttps://quixdb.github.io/squash-benchmark/#results\r\n\r\nAnd github itself:\r\n\r\nhttps://github.com/quixdb/squash\r\n\r\nUsing API similar to or even exactly squash plugins can hide you compression behind one clean cut api.\r\nOnly change which can be done - is maybe to change from dynamic linking to static linking, so can be integrated into\r\nhost application.\r\n\r\nNice to have: \r\n- Be Windows 7 compatible if possible\r\n- Developers can change compression codec / compression level on their own - for example by providing their own dll / static library to ReadyToRun build process. (API could be similar to squash)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etapika\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO.Compression`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-01T22:50:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45CqSZ",
                                           "createdAt":  "2021-11-02T00:33:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAs discussed in #60936 - at the moment for .NET 6 there exists mechanism to use compression - however extraction of executable / dll\u0027s happens into RAM only, which in a turn means that decompression is performed everytime when readytorun executable is launched.\r\n\r\nIt would be useful if decompression would happen in a folder:\r\n- With possibility to control where extraction happens (#35249, #3844)\r\n   - Uncompress once, use for eternity.\r\n- Being able to select compression level\r\n- Being able to choose compression algorithm\r\n   Last two can compress better - for 168 Mb executable with .net 6.0 compression give 90 Mb, which can reduced even further to for example 39-41 Mb using Brotli compression.\r\n\r\nOne implementation approach could be to use squash benchmarks and also C-style codecs:\r\n\r\nhttps://quixdb.github.io/squash-benchmark/#results\r\n\r\nAnd github itself:\r\n\r\nhttps://github.com/quixdb/squash\r\n\r\nUsing API similar to or even exactly squash plugins can hide you compression behind one clean cut api.\r\nOnly change which can be done - is maybe to change from dynamic linking to static linking, so can be integrated into\r\nhost application.\r\n\r\nNice to have: \r\n- Be Windows 7 compatible if possible\r\n- Developers can change compression codec / compression level on their own - for example by providing their own dll / static library to ReadyToRun build process. (API could be similar to squash)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etapika\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO.Compression`, `area-Single-File`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-02T00:33:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45DEyk",
                                           "createdAt":  "2021-11-02T05:12:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tapika",
                                           "body":  "Btw - one approach to solve this and potential future requirements - is to costruct dll which can control what will happen during bootstrap (in apphost) and provide as its own sdk to developers. \r\n\r\nThis way decompression algoritm can be left to developers, but also determining in which folder extraction will happen, permissions, etc...",
                                           "updatedAt":  "2021-11-02T05:12:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CxPEK",
                                           "createdAt":  "2022-05-07T12:40:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tapika",
                                           "body":  "Is there any progress on this ticket ?\r\n\r\nHas anyone from Microsoft checked out `squash` git ?\r\n\r\nWhat I have tried by myself - `squash` code is bit ugly C style code - but I could apply some patches to it to make it more C++ friendly - just if Microsoft guys are interested in `squash` as compression code API abstraction layer.\r\n\r\nBut maybe you have some API on your own and I\u0027m selling something that you already have?!",
                                           "updatedAt":  "2022-05-07T12:40:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C492N",
                                           "createdAt":  "2022-05-10T10:49:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "We\u0027ve recently made fixes to make single-file Windows 7 compatible... so that should already work.\r\n\r\nTo answer some questions:\r\n* Extract to a directory and run from there - that\u0027s what .NET 3.1 did and there\u0027s still an option to choose this mode [`IncludeAllContentForSelfExtract`](https://github.com/dotnet/designs/blob/main/accepted/2020/single-file/design.md#build-system-interface). We intentionally try to NOT do this as much as possible as it\u0027s endless source of problems. For example the extraction process has some really weird interactions with AV software, there\u0027s no cleanup policy (and I really don\u0027t want to get into the business of implementing one), the location where to extract is tricky (as you noted above) and so on. More and more this is getting into the territory of installers/package managers, I don\u0027t think the host (and honestly .NET itself) should be trying to solve these problems.\r\n* Compression level - honestly this is not a priority for us right now. We know that there are potential gains to be had from different compression algorithms, but as noted above, we\u0027re focusing mostly on \"extract into memory\" scenarios, so decompression speed is very important. It\u0027s definitely true that there are better algorithms than the one we chose, but it\u0027s a size consideration as well (the one currently is use is already part of the .NET runtime, if we were to add another one, it would increase the size, so counter productive a little bit). We\u0027re looking into making it easier to implement a fully custom apphost (and integrate it into the SDK), but that will be a much harder thing to do for single-file, so we will likely no try to tackle that right now.",
                                           "updatedAt":  "2022-05-10T10:49:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C6QAF",
                                           "createdAt":  "2022-05-10T15:46:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tapika",
                                           "body":  "\u003e We know that there are potential gains to be had from different compression algorithms, but as noted above, we\u0027re focusing \r\n\u003e mostly on \"extract into memory\" scenarios, so decompression speed is very important. It\u0027s definitely true that there are better\r\n\u003e algorithms than the one we chose, but it\u0027s a size consideration as well (the one currently is use is already part of the .NET\r\n\u003e runtime, if we were to add another one, it would increase the size, so counter productive a little bit). \r\n\r\nSure. Changing compression algorithm is indeed a compromise between compression rate and compression \u0026 decompression time. And this link is indeed tries to compare them:\r\nhttps://quixdb.github.io/squash-benchmark/#results\r\n\r\nBut I think one approach is that you could give just SDK so developers could easily integrate their own compression algorithm.\r\n\r\nThis is how squash think about different compression algorithms:\r\nhttps://github.com/quixdb/squash/blob/master/examples/simple.c\r\n\r\ntheir API\u0027s. \r\n\r\nThe rest of wiring resides currently for squash in compression algorithm module itself. Here is an example for brotli:\r\n\r\nhttps://github.com/quixdb/squash/blob/master/plugins/brotli/squash-brotli.c\r\n\r\nAnd similar plugins exists also for other compression algorithms:\r\n\r\nhttps://github.com/quixdb/squash/tree/master/plugins\r\n\r\nThe downside is that compression plugin is at the moment dll, which in a turn might drag a dependency on another visual studio runtime. \r\n\r\nSo in theory I could help so add some support for squash to be usable from C++ (if necessary), also maybe some API\u0027s for compression / decompression to/from ram. (https://github.com/quixdb/squash/blob/master/squash/squash-splice.h is operating on FILE* only).\r\n\r\nBesides this plugin project could be reconfigured not to manifest any additional runtime dependency - which might be necessary for ReadyToRun and potentially compiled to static library (.lib) instead of .dll.\r\n\r\nSo this is as far as I can go - but if you could give me some helping hands - maybe we could just match pieces of puzzle together.",
                                           "updatedAt":  "2022-05-10T15:46:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DCLGr",
                                           "createdAt":  "2022-05-12T07:44:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Thanks for the offer, but as I mentioned above, this is currently not a priority. We ourselves don\u0027t have many cases where compression is used, and we didn\u0027t receive any feedback (other than this issue), that I\u0027m aware of, on the topic either.",
                                           "updatedAt":  "2022-05-12T07:44:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DEheS",
                                           "createdAt":  "2022-05-12T17:40:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "As Vitek mentioned, supporting anything more than we currently have comes with at least one downside:\r\n\r\n1) If the new compression components are in the runtime, it would increase the runtime size even if it isn\u0027t used. This isn\u0027t a good tradeoff.\r\n\r\n2) If the compression options are done by linking at SDK publish time, we would have to distribute the singlefilehost as static libraries, instead of just as a DLL, which is a level of additional complexity that we\u0027re not prepared to take on only for the compression feature.\r\n\r\nIf things change, like if we were to distribute the host as static libraries for some other reason, we might revisit this.",
                                           "updatedAt":  "2022-05-12T17:40:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DGGJe",
                                           "createdAt":  "2022-05-13T05:30:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tapika",
                                           "body":  "\u003e 1. If the new compression components are in the runtime, it would increase the runtime size even if it isn\u0027t used. This isn\u0027t a good tradeoff.\r\n\r\nIs it possible to provide compression as dynamic dll - then it can be included only at publish time, but not included in runtime (at least not in host) ?\r\n\r\nSo configuration would be something like : \r\n\u003cCompression_codec\u003edll path\u003c/compression_codec\u003e\r\n",
                                           "updatedAt":  "2022-05-13T05:30:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DGZNh",
                                           "createdAt":  "2022-05-13T07:38:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Wouldn\u0027t that somewhat defeat the purpose of single-file?",
                                           "updatedAt":  "2022-05-13T07:38:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DIJum",
                                           "createdAt":  "2022-05-13T16:01:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tapika",
                                           "body":  "\u003e Wouldn\u0027t that somewhat defeat the purpose of single-file?\r\n\r\nMy idea would be that you could include it as file into single package?!",
                                           "updatedAt":  "2022-05-13T16:01:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DI84u",
                                           "createdAt":  "2022-05-13T20:11:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "We currently don\u0027t have a way to load native libraries from memory (from the bundle) and honestly have no plans to look into it (it\u0027s known to be very problematic on Windows, we haven\u0027t looked into this on Linux/mac). So that would mean it would have to be extracted onto disk... which is also basically against our current goals (ideally we don\u0027t want to extract as it\u0027s not super reliable and causes lot of trouble in some cases).\r\n\r\nSo the prefered way to do this would be to link it in as a static library... which comes with its own challenges since that would have to happen when publishing the app inside SDK (we would have to ship the runtime/host as a static library for example).\r\n\r\nI\u0027m not trying to look for excuses, but anything outside of building it into all hosts is relatively complex to implement.",
                                           "updatedAt":  "2022-05-13T20:11:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DJU-q",
                                           "createdAt":  "2022-05-13T21:21:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tapika",
                                           "body":  "Just by quickly googling - I\u0027ve managed to find couple of tutorials to load dll from RAM:\r\n\r\nhttps://www.joachim-bauch.de/tutorials/loading-a-dll-from-memory/\r\n=\u003e\r\nhttps://github.com/fancycode/MemoryModule\r\n\r\nhttps://forum.nim-lang.org/t/7943\r\n\r\n\r\nTo my best knowledge - both libraries probably needs to know PE file format structure in depth.\r\n\r\n-----------------------------------------------------------------------------------------------------\r\n\r\nI by myself would do it another way - I would just intercept windows api calls\r\nOpenFileW, ReadFile, CloseHandle using MinHook.h and would preform \"virtual\" file reading from memory.\r\n\r\nSee for example: https://github.com/tapika/stacktrace/blob/develop/src/exception_handler.cpp#L204 -\r\n\r\nI think for C++ exception handler - it\u0027s much more complex than more standard file read/write operations.\r\n\r\nThis would not require any PE structure file knowledge and would work out of box.\r\n\r\n-----------------------------------------------------------------------------------------------------\r\n\r\nIf you want, I can code you demo code using minhooks.\r\n",
                                           "updatedAt":  "2022-05-13T21:22:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DJWlB",
                                           "createdAt":  "2022-05-13T21:32:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e To my best knowledge - both libraries probably needs to know PE file format structure in depth.\r\n\r\nWe are aware of these libraries. They have number of issues, for example they interact very poorly with debuggers and other diagnostic tools. We would not be able to support a solution that is based on them.\r\n\r\nYou are free to build your own solution based on them. .NET runtime is open source.",
                                           "updatedAt":  "2022-05-13T21:32:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DKrzi",
                                           "createdAt":  "2022-05-15T07:02:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tapika",
                                           "body":  "I\u0027ve briefly checked how dll loading works - apparently after LoadLibraryA/W - function call is directed to ntdll.dll / LdrLoadDll. \r\n\r\nBest picture of how things works can be found from here: https://github.com/hlldz/RefleXXion\r\n\r\nAnd even thus I don\u0027t have windows source code - I\u0027ve checked same functionality from Wine:\r\n\r\nLdrLoadDll: https://source.winehq.org/source/dlls/ntdll/loader.c#3169\r\nload_dll: https://source.winehq.org/source/dlls/ntdll/loader.c#3083\r\nload_native_dll: https://source.winehq.org/source/dlls/ntdll/loader.c#2564\r\nNtMapViewOfSection: https://source.winehq.org/source/dlls/ntdll/unix/virtual.c#4469\r\nfind_dll_file: https://source.winehq.org/source/dlls/ntdll/loader.c#3021\r\nopen_dll_file: https://source.winehq.org/source/dlls/ntdll/loader.c#2467\r\n\r\nSuspect loading dll happens via following function calls:\r\nNtOpenFile, NtQueryAttributesFile, NtCreateSection/NtOpenSection, NtMapViewOfSection (*)\r\n\r\n(More information could be found in \r\nhttps://github.com/Hagrid29/PELoader\r\nhttps://gist.github.com/bats3c/59932dfa1f5bb23dd36071119b91af0f\r\nhttps://www.octawian.ro/fisiere/situri/asor/build/html/_downloads/122f95f9a032396603a837c53b125bb8/Russinovich_M_WinInternals_part1_7th_ed.pdf\r\n)\r\n\r\nEven thus I could intercept LdrLoadDll - I assume I would need to intercept and override\r\nfunction set above (*).\r\n\r\nWhich does not sounds trivial - at it\u0027s quite low kernel level code.\r\n\r\nI was also thinking if I could just override NtOpenFile and just redirect file open\r\nhttps://github.com/SegaraRai/PathRedirector\r\nto different path - but main question what is the alternative location where to store file?\r\n\r\nI was thinking if NtOpenFile can open even device, then maybe just replace file\r\nwith some sort of named pipe (https://docs.microsoft.com/en-us/windows/win32/ipc/named-pipe-client) - but then in maps on how well this will work with NtMapViewOfSection.\r\n\r\nSince I was not able to find any working example of such hook or operation (E.g. LoadLibary(\"\\\\\\\\.\\\\pipe\\\\mynamedpipe\")) - there is always a risk that such combination is not simply supported. \r\n\r\nI\u0027m also thinking about creating such mixed mode dll so it could be loaded into ram\r\n\r\nMore reading at:\r\nhttps://social.msdn.microsoft.com/Forums/en-US/f4194a8a-aaf9-48bd-86ba-fc0efe60e865/exception-occured-while-loading-dynamically-exe-assembly-in-ccli-could-not-load-file-or-assembly?forum=vclanguage\r\nhttps://tech-zealots.com/malware-analysis/journey-towards-import-address-table-of-an-executable-file/\r\nhttps://stackoverflow.com/questions/2945080/how-do-i-dynamically-load-raw-assemblies-that-contains-unmanaged-codebypassing\r\n\r\nBtw, loading dll into ram is something that can be considered main feature for c++ hot reload support.\r\n\r\nhttps://devblogs.microsoft.com/cppblog/edit-your-c-code-while-debugging-with-hot-reload-in-visual-studio-2022/\r\nhttps://github.com/tapika/bestlibs/tree/main/cpp#make-c-scriptable =\u003e https://github.com/RuntimeCompiledCPlusPlus/RuntimeCompiledCPlusPlus\r\n\r\nNot sure if it makes sense to ask how c++ hotreload is implemented in Visual Studio itself, as it might be closest thing which you\u0027re looking for.\r\n\r\n",
                                           "updatedAt":  "2022-05-15T07:03:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DSwIm",
                                           "createdAt":  "2022-05-17T15:07:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tapika",
                                           "body":  "Raised +500 points bounty in here: https://stackoverflow.com/questions/72248319/load-native-c-dll-from-ram-in-debugger-friendly-manner\r\n\r\nlet\u0027s see that people will reply. But I suspect best expects are still on Microsoft side. :)",
                                           "updatedAt":  "2022-05-17T15:07:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Dt2CT",
                                           "createdAt":  "2022-05-24T15:41:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tapika",
                                           "body":  "Bounty has finished, and there aren\u0027t any good answers available. I\u0027ve decided to document everything that I have learned so far, and put a separate git + discussion forum on top of that one:\r\n\r\nhttps://github.com/tapika/test_native_dll_loading/discussions/2\r\nhttps://github.com/tapika/test_native_dll_loading\r\n\r\nMy idea that eventually there comes some better knowledgeable guy than me, or just curious one, who could solve the issue.\r\n\r\nBut as suggested on stack overflow: https://stackoverflow.com/a/72310744/2338477\r\n \r\nI could provide compression algorithm as static library to your host, and you would link it in.\r\n\r\nAlternatively - it\u0027s also possible to use for debugging purposes .dll\u0027s as separate .dll, but when not debugging - then .dll would be loaded into .ram - I see this as one alternative to proceed as well.",
                                           "updatedAt":  "2022-05-24T15:41:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D-fIR",
                                           "createdAt":  "2022-05-29T13:50:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tapika",
                                           "body":  "After reading bit more documentation and trialing bit more - I\u0027ve used same approach as PELoader has used, but only without any PE format knowledge - using minhooks only.\r\n\r\nI have added new git repo with demo code in here:\r\n\r\nhttps://github.com/tapika/dllloader\r\n\r\nMost probably this way has it\u0027s own disadvantages, but what I\u0027ve initially tested - it seems to work in windows 7 \u0026 10.",
                                           "updatedAt":  "2022-05-29T13:50:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ejmqj",
                                           "createdAt":  "2022-06-08T17:16:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tapika",
                                           "body":  "Has anyone had a time to check my proposal on loading .dll\u0027s ? \r\n\r\nFor linux there exists also some approaches, but haven\u0027t analyzed / tested.",
                                           "updatedAt":  "2022-06-08T17:16:17Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "ReadyToRun + PublishSingleFile=true: Possibility to specify compression codec and compression level",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61458",
        "createdAt":  "2021-11-11T10:15:19Z",
        "number":  61458,
        "author":  "bobvandevijver",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-01T21:32:25Z",
        "body":  "### Description\n\nWhen you have a single file dotnet core application, it will extract itself to a directory. The location can be influenced with the `DOTNET_BUNDLE_EXTRACT_BASE_DIR`, but by default it seems to use `/home/\u003cuser\u003e/.net/\u003capp\u003e`.\r\n\r\nHowever, when the `setuid` bit has been set to execute the application as another user, the extraction path user is not adjusted accordingly. This causes the execution of the application to fail, as it cannot create the directory due to insufficient rights.\n\n### Reproduction Steps\n\nBuild a self-contained \"Hello World\" app, with the following properties:\r\n\r\n```\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n    \u003cImport Project=\"..\\default.props\" /\u003e\r\n    \u003cPropertyGroup\u003e\r\n        \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n        \u003cTargetFramework\u003enetcoreapp3.1\u003c/TargetFramework\u003e\r\n        \u003cPublishSingleFile\u003etrue\u003c/PublishSingleFile\u003e\r\n        \u003cSelfContained\u003etrue\u003c/SelfContained\u003e\r\n        \u003cRuntimeIdentifier\u003elinux-musl-x64\u003c/RuntimeIdentifier\u003e\r\n        \u003cInvariantGlobalization\u003etrue\u003c/InvariantGlobalization\u003e\r\n    \u003c/PropertyGroup\u003e\r\n    \u003cPropertyGroup Condition=\" \u0027$(Configuration)\u0027 == \u0027Release\u0027 \"\u003e\r\n        \u003cDebugType\u003enone\u003c/DebugType\u003e\r\n        \u003cTreatWarningsAsErrors\u003etrue\u003c/TreatWarningsAsErrors\u003e\r\n    \u003c/PropertyGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\nCompile with `dotnet publish -c Release \u003cyour-app\u003e -r \u003cyour-rid\u003e`\n\n### Expected behavior\n\nI expect that the directory used for extracting is based on the user after the `setuid` bit has been \"applied\", and not the user that has initially started the execution.\r\n\r\nIn the example under \"Actual behaviour\" the extraction should happen in `/home/appuser/.net/App/` as the user running the application is `appuser` due to the `setuid` bit, and not the user (`bobv`) that is initially invoking the account.\n\n### Actual behavior\n\n```\r\nXPS15-BOB:/opt/nis$ ls -la\r\ntotal 78220\r\ndrwxr-xr-x    2 bobv     root          4096 Nov 11 09:47 .\r\ndrwxr-xr-x    3 root     root          4096 Nov 11 09:45 ..\r\n-rwsr-xr-x    1 appuser      bobv      80085655 Nov 11 09:45 App\r\nXPS15-BOB:/opt/nis$ ./App\r\nFailure processing application bundle.\r\nFailed to create directory [/home/bobv/.net/App/] for extracting bundled files\r\nA fatal error was encountered. Could not extract contents of the bundle\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nSet the `DOTNET_BUNDLE_EXTRACT_BASE_DIR` environment variable to a path that can be written by the user actually running the app.\n\n### Configuration\n\nI\u0027m using dotnet 6.0.100 to publish the file, which targets `netcoreapp3.1`. I cannot upgrade because I need to support RHEL6, as the lab equipment this needs to run on cannot be upgraded.\r\n\r\nI have confirmed this using the following rids:\r\n - rhel.6-x64 (yes, I know, nothing I can do about this unfortunately)\r\n - rhel.7-x64\r\n - linux-musl-x64\r\n - linux-x64 (possibly, couldn\u0027t test this completely as it triggers a BSOD on my WSL1 Debian)\n\n### Other information\n\nThis method retrieves the directory: \r\n\r\nhttps://github.com/dotnet/runtime/blob/6f5de0b2b979a70e6fe36904d0d4f087c32f9c7e/src/native/corehost/bundle/extractor.cpp#L38\r\n\r\nHere is uses the `HOME` env var, which is indeed the wrong home directory when the `setuid` bit has been set:\r\n\r\nhttps://github.com/dotnet/runtime/blob/c88c88a5f07325a70322cfc056949e8d52e4a04f/src/native/corehost/hostmisc/pal.unix.cpp#L342\r\n\r\nAlthough I\u0027m not sure why the read/write check passes (or at least, I think it is).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOZdU_g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc45lrUU",
                                           "createdAt":  "2021-11-11T10:15:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen you have a single file dotnet core application, it will extract itself to a directory. The location can be influenced with the `DOTNET_BUNDLE_EXTRACT_BASE_DIR`, but by default it seems to use `/home/\u003cuser\u003e/.net/\u003capp\u003e`.\r\n\r\nHowever, when the `setuid` bit has been set to execute the application as another user, the extraction path user is not adjusted accordingly. This causes the execution of the application to fail, as it cannot create the directory due to insufficient rights.\n\n### Reproduction Steps\n\nBuild a self-contained \"Hello World\" app, with the following properties:\r\n\r\n```\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n    \u003cImport Project=\"..\\default.props\" /\u003e\r\n    \u003cPropertyGroup\u003e\r\n        \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n        \u003cTargetFramework\u003enetcoreapp3.1\u003c/TargetFramework\u003e\r\n        \u003cPublishSingleFile\u003etrue\u003c/PublishSingleFile\u003e\r\n        \u003cSelfContained\u003etrue\u003c/SelfContained\u003e\r\n        \u003cRuntimeIdentifier\u003elinux-musl-x64\u003c/RuntimeIdentifier\u003e\r\n        \u003cInvariantGlobalization\u003etrue\u003c/InvariantGlobalization\u003e\r\n    \u003c/PropertyGroup\u003e\r\n    \u003cPropertyGroup Condition=\" \u0027$(Configuration)\u0027 == \u0027Release\u0027 \"\u003e\r\n        \u003cDebugType\u003enone\u003c/DebugType\u003e\r\n        \u003cTreatWarningsAsErrors\u003etrue\u003c/TreatWarningsAsErrors\u003e\r\n    \u003c/PropertyGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\nCompile with `dotnet publish -c Release \u003cyour-app\u003e -r \u003cyour-rid\u003e`\n\n### Expected behavior\n\nI expect that the directory used for extracting is based on the user after the `setuid` bit has been \"applied\", and not the user that has initially started the execution.\r\n\r\nIn the example under \"Actual behaviour\" the extraction should happen in `/home/appuser/.net/App/` as the user running the application is `appuser` due to the `setuid` bit, and not the user (`bobv`) that is initially invoking the account.\n\n### Actual behavior\n\n```\r\nXPS15-BOB:/opt/nis$ ls -la\r\ntotal 78220\r\ndrwxr-xr-x    2 bobv     root          4096 Nov 11 09:47 .\r\ndrwxr-xr-x    3 root     root          4096 Nov 11 09:45 ..\r\n-rwsr-xr-x    1 appuser      bobv      80085655 Nov 11 09:45 App\r\nXPS15-BOB:/opt/nis$ ./App\r\nFailure processing application bundle.\r\nFailed to create directory [/home/bobv/.net/App/] for extracting bundled files\r\nA fatal error was encountered. Could not extract contents of the bundle\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nSet the `DOTNET_BUNDLE_EXTRACT_BASE_DIR` environment variable to a path that can be written by the user actually running the app.\n\n### Configuration\n\nI\u0027m using dotnet 6.0.100 to publish the file, which targets `netcoreapp3.1`. I cannot upgrade because I need to support RHEL6, as the lab equipment this needs to run on cannot be upgraded.\r\n\r\nI have confirmed this using the following rids:\r\n - rhel.6-x64 (yes, I know, nothing I can do about this unfortunately)\r\n - rhel.7-x64\r\n - linux-musl-x64\r\n - linux-x64 (possibly, couldn\u0027t test this completely as it triggers a BSOD on my WSL1 Debian)\n\n### Other information\n\nThis method retrieves the directory: \r\n\r\nhttps://github.com/dotnet/runtime/blob/6f5de0b2b979a70e6fe36904d0d4f087c32f9c7e/src/native/corehost/bundle/extractor.cpp#L38\r\n\r\nHere is uses the `HOME` env var, which is indeed the wrong home directory when the `setuid` bit has been set:\r\n\r\nhttps://github.com/dotnet/runtime/blob/c88c88a5f07325a70322cfc056949e8d52e4a04f/src/native/corehost/hostmisc/pal.unix.cpp#L342\r\n\r\nAlthough I\u0027m not sure why the read/write check passes (or at least, I think it is).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebobvandevijver\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-11T10:15:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45ly0h",
                                           "createdAt":  "2021-11-11T11:02:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "You can enable tracing:\r\n```\r\nexport COREHOST_TRACE=1\r\nexport COREHOST_TRACEFILE=host.txt\r\n```\r\n\r\nRepro the failure and see `host.txt` in current directory. It should have more details on why it picked a certain folder.\r\nSince the app is targeting 3.1 it should be using the .NET Core 3.1 host. So the code for that is actually here: https://github.com/dotnet/core-setup/blob/29be638bf4b745d1356a8dc45846ca46deda955a/src/corehost/common/pal.unix.cpp#L275-L310\r\n\r\nRecently there\u0027s an added capability to read the \"home\" from the `getpwuid` function if `HOME` is not defined. But that doesn\u0027t seem to be the case here. Maybe we could improve on this and if the `HOME` exists and it\u0027s not writable, use the one from `getpwuid`...",
                                           "updatedAt":  "2021-11-11T11:02:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45l0Tg",
                                           "createdAt":  "2021-11-11T11:11:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bobvandevijver",
                                           "body":  "Here\u0027s the output!\r\n\r\n```\r\nTracing enabled @ Thu Nov 11 11:10:23 2021 UTC\r\n--- Invoked apphost [version: 3.1.21, commit hash: df8abc0f7ea6a8add9cdb23adc8b18673a329df8] main = {\r\n./App\r\n}\r\nThe managed DLL bound to this executable is: \u0027App.dll\u0027\r\nFiles embedded within the bundled will be extracted to [/home/bobv/.net/App/OSmwyoj0Foxb46lYJfUDpkSHLcKSsrE=] directory\r\nFailure processing application bundle.\r\nFailed to create directory [/home/bobv/.net/App/] for extracting bundled files\r\nA fatal error was encountered. Could not extract contents of the bundle\r\n```",
                                           "updatedAt":  "2021-11-11T11:11:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45l1T-",
                                           "createdAt":  "2021-11-11T11:16:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I think that matches what you described in your analysis of the problem. I don\u0027t know either why the read/write check on `HOME` seems to succeed though.\r\n",
                                           "updatedAt":  "2021-11-11T11:16:29Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Single file executable extraction path not writable when setuid bit is used",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64276",
        "createdAt":  "2022-01-25T16:51:38Z",
        "number":  64276,
        "author":  "rolfbjarne",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDgkkg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KSemenenko",
                                            "createdAt":  "2022-04-01T18:56:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maxkatz6",
                                            "createdAt":  "2025-06-10T00:00:33Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-07-06T17:49:23Z",
        "body":  "_From @chucker on Wed, 19 Jan 2022 22:00:35 GMT_\n\n(I\u0027m not quite sure if this repo or `dotnet/sdk` is right.)\r\n\r\nI\u0027m trying to make a single-file tool (no macOS bundle), but with an `Info.plist`. Therefore, it needs to be embedded. If I were to link the file manually, I could add `ld` args such as:\r\n\r\n    -sectcreate __TEXT __info_plist MyInfo.plist -sectcreate\r\n\r\nThis would produce a Mach-O binary with the Info.plist already embedded at the right place. Adding this section after the fact doesn\u0027t appear to be supported.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Make a new .NET 6 console project (`dotnet new console`).\r\n2. Make it a single-file tool, including native libraries:\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet6.0\u003c/TargetFramework\u003e\r\n    \u003cRuntimeIdentifier\u003eosx.11.0-x64\u003c/RuntimeIdentifier\u003e\r\n    \u003cSelfContained\u003etrue\u003c/SelfContained\u003e\r\n    \u003cIncludeNativeLibrariesForSelfExtract\u003etrue\u003c/IncludeNativeLibrariesForSelfExtract\u003e\r\n    \u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\r\n    \u003cPublishReadyToRun\u003etrue\u003c/PublishReadyToRun\u003e\r\n    \u003cPublishSingleFile\u003etrue\u003c/PublishSingleFile\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\n3. Make a simple Info.plist:\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\r\n\u003c!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u003e\r\n\u003cplist version=\"1.0\"\u003e\r\n\u003cdict\u003e\r\n    \u003ckey\u003eCFBundleIdentifier\u003c/key\u003e\r\n    \u003cstring\u003eme.chucker.SomeTool\u003c/string\u003e\r\n    \u003ckey\u003eCFBundleInfoDictionaryVersion\u003c/key\u003e\r\n    \u003cstring\u003e6.0\u003c/string\u003e\r\n    \u003ckey\u003eCFBundleName\u003c/key\u003e\r\n    \u003cstring\u003eme.chucker.SomeTool\u003c/string\u003e\r\n\u003c/dict\u003e\r\n\u003c/plist\u003e\r\n```\r\n\r\n4. build using `dotnet publish -c Release`\r\n5. Use `otool -s __TEXT __info_plist` to verify that the binary does not include a plist\r\n\r\n### Expected Behavior\r\n\r\nI was hoping for some MSBuild property to either add manual `ld` flags, or to specify the name of a plist to be included. For the former, there appears to be `MtouchExtraArgs`, but it doesn\u0027t appear to be picked up for macOS .NET 6 builds. For the latter, [Xcode has a \"Create Info.plist Section in Binary\" build task.](\r\n![](https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Art/xcode_tool_infoplist.jpg)\r\n) Ideally, the .NET toolchain would have something similar.\r\n\r\n### Environment\r\n\r\n```\r\n~\u003e dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.101\r\n Commit:    ef49f6213a\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  12.1\r\n OS Platform: Darwin\r\n RID:         osx.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/6.0.101/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.1\r\n  Commit:  3a25a7f1cc\r\n\r\n.NET SDKs installed:\r\n  6.0.101 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\n\n_Copied from original issue xamarin/xamarin-macios#13795_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPOiSaw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc484UbK",
                                           "createdAt":  "2022-01-25T16:51:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "_From @chucker on Wed, 19 Jan 2022 22:49:48 GMT_\n\nSmall amendment: it probably makes more sense to target the platform:\r\n\r\n```\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet6.0-**macos**\u003c/TargetFramework\u003e\r\n    \u003cRuntimeIdentifier\u003eosx-x64\u003c/RuntimeIdentifier\u003e\r\n    \u003cSelfContained\u003etrue\u003c/SelfContained\u003e\r\n    \u003cIncludeNativeLibrariesForSelfExtract\u003etrue\u003c/IncludeNativeLibrariesForSelfExtract\u003e\r\n    \u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\r\n    \u003cPublishReadyToRun\u003etrue\u003c/PublishReadyToRun\u003e\r\n    \u003cPublishSingleFile\u003etrue\u003c/PublishSingleFile\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\nThis _does_ seem to detect the Info.plist in `_DetectAppManifest`. However, something like `\u003cEmbedManifest\u003etrue\u003c/EmbedManifest\u003e` seems to have no effect.",
                                           "updatedAt":  "2022-01-25T16:51:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc484Ubj",
                                           "createdAt":  "2022-01-25T16:51:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "_From @mandel-macaque on Mon, 24 Jan 2022 02:00:54 GMT_\n\n@rolfbjarne  can you please take a look? ",
                                           "updatedAt":  "2022-01-25T16:51:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc484Ubt",
                                           "createdAt":  "2022-01-25T16:51:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "_From @rolfbjarne on Tue, 25 Jan 2022 16:18:44 GMT_\n\n\u003e I\u0027m trying to make a single-file tool (no macOS bundle)\r\n\r\nUsing the `net6.0-macos` target framewore will create a macOS bundle (and this is handled in this repository).\r\n\r\nIn that case, you can try adding this property to your project file:\r\n\r\n```xml\r\n\u003cMonoBundlingExtraArgs\u003e--link_flags=\"-sectcreate __TEXT __info_plist MyInfo.plist -sectcreate\"\u003c/MonoBundlingExtraArgs\u003e\r\n```\r\n\r\nIf you want a single-file/standalone executable, the correct place to report/ask about it is in the https://github.com/dotnet/runtime repository (I can move this issue there if that\u0027s what you want).",
                                           "updatedAt":  "2022-01-25T16:51:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc484UcG",
                                           "createdAt":  "2022-01-25T16:51:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "_From @chucker on Tue, 25 Jan 2022 16:30:01 GMT_\n\n\u003e If you want a single-file/standalone executable\r\n\r\nYup! No bundle, just one file with embedded metadata.\r\n\r\nPlease move if possible. (Though I’m surprised runtime, not sdk, is the right repo.)",
                                           "updatedAt":  "2022-01-25T16:51:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc484UcK",
                                           "createdAt":  "2022-01-25T16:51:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-01-25T16:51:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc484Ucr",
                                           "createdAt":  "2022-01-25T16:51:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "_From @rolfbjarne on Tue, 25 Jan 2022 16:51:02 GMT_\n\n\u003e Though I’m surprised runtime, not sdk, is the right repo.\r\n\r\nI admit I might be wrong, but it\u0027s at least the correct org :)",
                                           "updatedAt":  "2022-01-25T16:51:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc485w3_",
                                           "createdAt":  "2022-01-26T01:43:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_From @chucker on Wed, 19 Jan 2022 22:00:35 GMT_\n\n(I\u0027m not quite sure if this repo or `dotnet/sdk` is right.)\r\n\r\nI\u0027m trying to make a single-file tool (no macOS bundle), but with an `Info.plist`. Therefore, it needs to be embedded. If I were to link the file manually, I could add `ld` args such as:\r\n\r\n    -sectcreate __TEXT __info_plist MyInfo.plist -sectcreate\r\n\r\nThis would produce a Mach-O binary with the Info.plist already embedded at the right place. Adding this section after the fact doesn\u0027t appear to be supported.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Make a new .NET 6 console project (`dotnet new console`).\r\n2. Make it a single-file tool, including native libraries:\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet6.0\u003c/TargetFramework\u003e\r\n    \u003cRuntimeIdentifier\u003eosx.11.0-x64\u003c/RuntimeIdentifier\u003e\r\n    \u003cSelfContained\u003etrue\u003c/SelfContained\u003e\r\n    \u003cIncludeNativeLibrariesForSelfExtract\u003etrue\u003c/IncludeNativeLibrariesForSelfExtract\u003e\r\n    \u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\r\n    \u003cPublishReadyToRun\u003etrue\u003c/PublishReadyToRun\u003e\r\n    \u003cPublishSingleFile\u003etrue\u003c/PublishSingleFile\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\n3. Make a simple Info.plist:\r\n\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\r\n\u003c!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u003e\r\n\u003cplist version=\"1.0\"\u003e\r\n\u003cdict\u003e\r\n    \u003ckey\u003eCFBundleIdentifier\u003c/key\u003e\r\n    \u003cstring\u003eme.chucker.SomeTool\u003c/string\u003e\r\n    \u003ckey\u003eCFBundleInfoDictionaryVersion\u003c/key\u003e\r\n    \u003cstring\u003e6.0\u003c/string\u003e\r\n    \u003ckey\u003eCFBundleName\u003c/key\u003e\r\n    \u003cstring\u003eme.chucker.SomeTool\u003c/string\u003e\r\n\u003c/dict\u003e\r\n\u003c/plist\u003e\r\n```\r\n\r\n4. build using `dotnet publish -c Release`\r\n5. Use `otool -s __TEXT __info_plist` to verify that the binary does not include a plist\r\n\r\n### Expected Behavior\r\n\r\nI was hoping for some MSBuild property to either add manual `ld` flags, or to specify the name of a plist to be included. For the former, there appears to be `MtouchExtraArgs`, but it doesn\u0027t appear to be picked up for macOS .NET 6 builds. For the latter, [Xcode has a \"Create Info.plist Section in Binary\" build task.](\r\n![](https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Art/xcode_tool_infoplist.jpg)\r\n) Ideally, the .NET toolchain would have something similar.\r\n\r\n### Environment\r\n\r\n```\r\n~\u003e dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.101\r\n Commit:    ef49f6213a\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  12.1\r\n OS Platform: Darwin\r\n RID:         osx.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/6.0.101/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.1\r\n  Commit:  3a25a7f1cc\r\n\r\n.NET SDKs installed:\r\n  6.0.101 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\n\n_Copied from original issue xamarin/xamarin-macios#13795_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erolfbjarne\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-26T01:43:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc486JJr",
                                           "createdAt":  "2022-01-26T05:13:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCMKpPA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kasperk81",
                                                                               "createdAt":  "2022-01-29T08:41:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "Currently there is no OOTB way. It would require updating HostWriter and add functionality in MachOUtils next to https://github.com/dotnet/runtime/blob/8770287f77c6b218c0d30536544531ba8597faf4/src/installer/managed/Microsoft.NET.HostModel/AppHost/MachOUtils.cs#L202\r\nwhere binary sections are modified. Meanwhile, you can use some external utility which does similar manipulation. Something like:\r\n\r\n```diff\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet6.0\u003c/TargetFramework\u003e\r\n    \u003cRuntimeIdentifier\u003eosx.11.0-x64\u003c/RuntimeIdentifier\u003e\r\n    \u003cSelfContained\u003etrue\u003c/SelfContained\u003e\r\n    \u003cIncludeNativeLibrariesForSelfExtract\u003etrue\u003c/IncludeNativeLibrariesForSelfExtract\u003e\r\n    \u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\r\n    \u003cPublishReadyToRun\u003etrue\u003c/PublishReadyToRun\u003e\r\n    \u003cPublishSingleFile\u003etrue\u003c/PublishSingleFile\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n+  \u003c!-- in /tmp clone: https://github.com/gdbinit/gimmedebugah --\u003e\r\n+  \u003c!-- run: xcodebuild -configuration Debug build --\u003e\r\n+  \u003cTarget Name=\"Simulate_sectcreate\" AfterTargets=\"Publish\"\u003e\r\n+    \u003cMessage Importance=\"high\" Text=\"Injecting pinfo section in \u0027$(MSBuildThisFileDirectory)$(PublishedSingleFilePath)\u0027\" /\u003e\r\n+    \u003cExec Command=\"/tmp/gimmedebugah/build/Debug/gimmedebugah -p \u0027$(MSBuildThisFileDirectory)MyInfo.plist\u0027 \u0027$(MSBuildThisFileDirectory)$(PublishedSingleFilePath)\u0027\" /\u003e\r\n+    \u003cExec Command=\"chmod +x \u0027$(MSBuildThisFileDirectory)$(PublishedSingleFilePath).patched\u0027\" /\u003e\r\n+  \u003c/Target\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\nIt will keep the original file intact (no plist) and make a copy of executable with `.patched` ext.\r\n```sh\r\n$ otool -s __TEXT __info_plist bin/Debug/net6.0/osx.11.0-x64/publish/mac2.patched | head -5\r\nbin/Debug/net6.0/osx.11.0-x64/publish/mac2.patched:\r\nContents of (__TEXT,__info_plist) section\r\n0000000100000000\t3c 3f 78 6d 6c 20 76 65 72 73 69 6f 6e 3d 22 31 \r\n0000000100000010\t2e 30 22 20 65 6e 63 6f 64 69 6e 67 3d 22 55 54 \r\n0000000100000020\t46 2d 38 22 3f 3e 0a 3c 21 44 4f 43 54 59 50 45 \r\n\r\n$ otool -s __TEXT __info_plist bin/Debug/net6.0/osx.11.0-x64/publish/mac2\r\nbin/Debug/net6.0/osx.11.0-x64/publish/mac2:\r\n# still nothing\r\n```",
                                           "updatedAt":  "2022-01-26T05:31:44Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "How do I embed an Info.plist / add arbitrary linker args?",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83607",
        "createdAt":  "2022-01-25T18:18:09Z",
        "number":  83607,
        "author":  "agocke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCu7-0A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eerhardt",
                                            "createdAt":  "2023-03-17T18:54:01Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-03-17T18:39:20Z",
        "body":  "RIght now there\u0027s no way to handle an Assembly.Location call without suppressing the single-file warning, even if you\u0027re handling the empty string case. We should consider improving the analyzer, or adding a new API that can be used to guard the use of Assembly.Location.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOV99gmA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5X32Ar",
                                           "createdAt":  "2022-01-26T00:18:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "This might be a nit, but there are two reasons why Location could be empty:\r\n\r\n1. We\u0027re running in single file mode\r\n2. The assembly was reflection emitted\r\n\r\nNot sure how common is 2 and whether running those codepaths in single file wouldn\u0027t be considered a bug that we should have warned about.\r\n\r\nIdeally people shouldn\u0027t use Assembly.Location, guarded or not. If there\u0027s an empty string fallback, the fallback should be the code that runs always.",
                                           "updatedAt":  "2022-01-26T00:18:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5X32CY",
                                           "createdAt":  "2023-03-17T18:39:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRIght now there\u0027s no way to handle an Assembly.Location call without suppressing the single-file warning, even if you\u0027re handling the empty string case. We should consider improving the analyzer, or adding a new API that can be used to guard the use of Assembly.Location.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eagocke\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-17T18:39:04Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Single-file analyzer shouldn\u0027t warn about Assembly.Location if it\u0027s guarded",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65424",
        "createdAt":  "2022-02-16T04:50:43Z",
        "number":  65424,
        "author":  "JinShil",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-19T21:44:01Z",
        "body":  "### Description\r\n\r\nUsing the default Blazor Server project and publishing with the command `dotnet publish -c Release -r linux-arm -p:PublishReadyToRun=true -p:PublishReadyToRunComposite=true -p:PublishReadyToRunUseCrossgen2=true --self-contained=true -p:PublishSingleFile=true` results in the following error after pressing the \"Click Me\" button on the \"Counter\" page.\r\n\r\n```\r\nblazor.server.js:1 Uncaught Error: No interop methods are registered for renderer 0\r\n    at k (blazor.server.js:1:11605)\r\n    at blazor.server.js:1:11511\r\n    at T (blazor.server.js:1:11694)\r\n    at I (blazor.server.js:1:11485)\r\n    at P.dispatchGlobalEventToAllElements (blazor.server.js:1:13974)\r\n    at P.onGlobalEvent (blazor.server.js:1:13233)\r\n```\r\nProblem doesn\u0027t seem to happen using `-r win-x64`.\r\n\r\n### Reproduction Steps\r\n\r\n- Create a project using the default \"Blazor Server\" project template\r\n- Publish with `dotnet publish -c Release -r linux-arm -p:PublishReadyToRun=true -p:PublishReadyToRunComposite=true -p:PublishReadyToRunUseCrossgen2=true --self-contained=true -p:PublishSingleFile=true`\r\n- Execute the project on a linux-arm device\r\n- Open the page in a browser\r\n- Navigate to the Counter page\r\n- Press the \"Click Me\" button\r\n- Inspect the browser\u0027s console\r\n\r\n### Expected behavior\r\n\r\nProgram execution without error.\r\n\r\n### Actual behavior\r\n\r\nProgram crash resulting in an error.\r\n\r\n### Regression?\r\n\r\nI believe this was working in 6.0.101, and was introduced in 6.0.102, but I\u0027m not able to verify that at this time.\r\n\r\n### Known Workarounds\r\n\r\nRemoving the `-p:PublishSingleFile=true` or all of the `-p:PublishReadyToRun...` parameters will create a working executable, but that negates the point of using those parameters.\r\n\r\n### Configuration\r\n\r\nProject is built on a 64-bit Windows 10 computer using Visual Studio 2022\r\n\r\n`dotnet --info` on the devlopment computer reports:\r\n\r\n```\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.102\r\n Commit:    02d5242ed7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19044\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.102\\\r\n\r\nHost (useful for support):\r\n  Version: 6.0.2\r\n  Commit:  839cdfb0ec\r\n\r\n.NET SDKs installed:\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.416 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.403 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.405 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.100-preview.6.21355.2 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.102 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview9.19424.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-rc.1.20451.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-preview.6.21355.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview9-19423-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-rc.1.20451.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.6.21352.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview9-19423-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0-rc.1.20452.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.0-preview.6.21353.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n\r\n`dotnet --info` on the target computer reports:\r\n\r\n```\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.102\r\n Commit:    02d5242ed7\r\n\r\nRuntime Environment:\r\n OS Name:     raspbian\r\n OS Version:  11\r\n OS Platform: Linux\r\n RID:         linux-arm\r\n Base Path:   /opt/Microsoft/dotnet/sdk/6.0.102/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.2\r\n  Commit:  839cdfb0ec\r\n\r\n.NET SDKs installed:\r\n  6.0.102 [/opt/Microsoft/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.2 [/opt/Microsoft/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.2 [/opt/Microsoft/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPl7AhQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-Df5d",
                                           "createdAt":  "2022-02-16T04:50:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-02-16T04:50:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-D2Xo",
                                           "createdAt":  "2022-02-16T07:33:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JinShil",
                                           "body":  "I verified this bug also exists when both development PC and target PC are using 6.0.200.",
                                           "updatedAt":  "2022-02-16T07:33:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-D3d7",
                                           "createdAt":  "2022-02-16T07:41:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nUsing the default Blazor Server project and publishing with the command `dotnet publish -c Release -r linux-arm -p:PublishReadyToRun=true -p:PublishReadyToRunComposite=true -p:PublishReadyToRunUseCrossgen2=true --self-contained=true -p:PublishSingleFile=true` results in the following error after pressing the \"Click Me\" button on the \"Counter\" page.\r\n\r\n```\r\nblazor.server.js:1 Uncaught Error: No interop methods are registered for renderer 0\r\n    at k (blazor.server.js:1:11605)\r\n    at blazor.server.js:1:11511\r\n    at T (blazor.server.js:1:11694)\r\n    at I (blazor.server.js:1:11485)\r\n    at P.dispatchGlobalEventToAllElements (blazor.server.js:1:13974)\r\n    at P.onGlobalEvent (blazor.server.js:1:13233)\r\n```\r\nProblem doesn\u0027t seem to happen using `-r win-x64`.\r\n\r\n### Reproduction Steps\r\n\r\n- Create a project using the default \"Blazor Server\" project template\r\n- Publish with `dotnet publish -c Release -r linux-arm -p:PublishReadyToRun=true -p:PublishReadyToRunComposite=true -p:PublishReadyToRunUseCrossgen2=true --self-contained=true -p:PublishSingleFile=true`\r\n- Execute the project on a linux-arm device\r\n- Open the page in a browser\r\n- Navigate to the Counter page\r\n- Press the \"Click Me\" button\r\n- Inspect the browser\u0027s console\r\n\r\n### Expected behavior\r\n\r\nProgram execution without error.\r\n\r\n### Actual behavior\r\n\r\nProgram crash resulting in an error.\r\n\r\n### Regression?\r\n\r\nI believe this was working in 6.0.101, and was introduced in 6.0.102, but I\u0027m not able to verify that at this time.\r\n\r\n### Known Workarounds\r\n\r\nRemoving the `-p:PublishSingleFile=true` or all of the `-p:PublishReadyToRun...` parameters will create a working executable, but that negates the point of using those parameters.\r\n\r\n### Configuration\r\n\r\nProject is built on a 64-bit Windows 10 computer using Visual Studio 2022\r\n\r\n`dotnet --info` on the devlopment computer reports:\r\n\r\n```\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.102\r\n Commit:    02d5242ed7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19044\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.102\\\r\n\r\nHost (useful for support):\r\n  Version: 6.0.2\r\n  Commit:  839cdfb0ec\r\n\r\n.NET SDKs installed:\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.416 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.403 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.405 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.100-preview.6.21355.2 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.102 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview9.19424.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-rc.1.20451.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-preview.6.21355.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview9-19423-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-rc.1.20451.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.6.21352.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview9-19423-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0-rc.1.20452.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.0-preview.6.21353.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n\r\n`dotnet --info` on the target computer reports:\r\n\r\n```\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.102\r\n Commit:    02d5242ed7\r\n\r\nRuntime Environment:\r\n OS Name:     raspbian\r\n OS Version:  11\r\n OS Platform: Linux\r\n RID:         linux-arm\r\n Base Path:   /opt/Microsoft/dotnet/sdk/6.0.102/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.2\r\n  Commit:  839cdfb0ec\r\n\r\n.NET SDKs installed:\r\n  6.0.102 [/opt/Microsoft/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.2 [/opt/Microsoft/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.2 [/opt/Microsoft/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJinShil\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-16T07:41:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-TMS6",
                                           "createdAt":  "2022-02-18T21:39:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "I have tried the repro scenario with  6.0.101 and it worked (no errors reported)\r\n\r\nNow I will try with  6.0.2XX",
                                           "updatedAt":  "2022-02-18T21:39:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-TUNY",
                                           "createdAt":  "2022-02-18T22:04:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "I have tried the repro scenario with 6.0.201 and it worked too. \r\nThis was on Raspberry Pi 4 with Raspbian arm7 (Bullseye)",
                                           "updatedAt":  "2022-02-18T22:04:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-Tb2H",
                                           "createdAt":  "2022-02-18T22:31:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Actually I tried only the server side of the repro. Let me try the client side",
                                           "updatedAt":  "2022-02-18T22:31:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-To17",
                                           "createdAt":  "2022-02-18T23:20:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "I am getting nullref exception on the server side when navigating to the Counter.\r\n(This is regardless if I use an app built with 6.0.102 built or 6.0.202 SDK)\r\n\r\n```\r\n/publish $ ./BlazorApp1\r\ninfo: Microsoft.Hosting.Lifetime[14]\r\n      Now listening on: http://localhost:5000\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Application started. Press Ctrl+C to shut down.\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Hosting environment: Production\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Content root path: /home/pi/bz2/publish\r\nwarn: Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware[3]\r\n      Failed to determine the https port for redirect.\r\nfail: Microsoft.AspNetCore.SignalR.HubConnectionHandler[1]\r\n      Error when dispatching \u0027OnDisconnectedAsync\u0027 on hub.\r\n      System.NullReferenceException: Object reference not set to an instance of an object.\r\n         at Microsoft.AspNetCore.Components.Server.Circuits.CircuitRegistry.DisconnectAsync(CircuitHost circuitHost, String connectionId)\r\n         at Microsoft.AspNetCore.Components.Server.ComponentHub.OnDisconnectedAsync(Exception exception)\r\n         at Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher`1.OnDisconnectedAsync(HubConnectionContext connection, Exception exception)\r\n         at Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher`1.OnDisconnectedAsync(HubConnectionContext connection, Exception exception)\r\n         at Microsoft.AspNetCore.SignalR.HubConnectionHandler`1.HubOnDisconnectedAsync(HubConnectionContext connection, Exception exception)\r\nfail: Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware[1]\r\n      An unhandled exception has occurred while executing the request.\r\n      System.NullReferenceException: Object reference not set to an instance of an object.\r\n         at Microsoft.AspNetCore.Components.Server.Circuits.CircuitHost.DisposeAsync()\r\n         at Microsoft.AspNetCore.Components.Server.CircuitDisconnectMiddleware.TerminateCircuitGracefully(CircuitId circuitId)\r\n         at Microsoft.AspNetCore.Components.Server.CircuitDisconnectMiddleware.Invoke(HttpContext context)\r\n         at Microsoft.AspNetCore.Routing.EndpointMiddleware.\u003cInvoke\u003eg__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n         at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.\u003cInvoke\u003eg__Awaited|6_0(ExceptionHandlerMiddleware middleware, HttpContext context, Task task)\r\nfail: Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager[3]\r\n      Failed disposing connection CbA5mH4yB3rTexOjW7T4RQ.\r\n      System.NullReferenceException: Object reference not set to an instance of an object.\r\n         at Microsoft.AspNetCore.Components.Server.Circuits.CircuitRegistry.DisconnectAsync(CircuitHost circuitHost, String connectionId)\r\n         at Microsoft.AspNetCore.Components.Server.ComponentHub.OnDisconnectedAsync(Exception exception)\r\n         at Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher`1.OnDisconnectedAsync(HubConnectionContext connection, Exception exception)\r\n         at Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher`1.OnDisconnectedAsync(HubConnectionContext connection, Exception exception)\r\n         at Microsoft.AspNetCore.SignalR.HubConnectionHandler`1.HubOnDisconnectedAsync(HubConnectionContext connection, Exception exception)\r\n         at Microsoft.AspNetCore.SignalR.HubConnectionHandler`1.RunHubAsync(HubConnectionContext connection)\r\n         at Microsoft.AspNetCore.SignalR.HubConnectionHandler`1.OnConnectedAsync(ConnectionContext connection)\r\n         at Microsoft.AspNetCore.SignalR.HubConnectionHandler`1.OnConnectedAsync(ConnectionContext connection)\r\n         at Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionContext.ExecuteApplication(ConnectionDelegate connectionDelegate)\r\n         at Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionContext.WaitOnTasks(Task applicationTask, Task transportTask, Boolean closeGracefully)\r\n         at Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionContext.DisposeAsync(Boolean closeGracefully)\r\n         at Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager.DisposeAndRemoveAsync(HttpConnectionContext connection, Boolean closeGracefully)\r\n```",
                                           "updatedAt":  "2022-02-18T23:20:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-XsCF",
                                           "createdAt":  "2022-02-21T01:58:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JinShil",
                                           "body":  "Yes, after clicking the \"Click Me\" button, the browser\u0027s console will immediately show the `Uncaught Error: No interop methods are registered for renderer 0`, but then a short time later, the server will display the object reference error.",
                                           "updatedAt":  "2022-02-21T01:58:48Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "`PublishReadyToRun` with `PublishSingleFile` in linux-arm Blazor Server causes program to crash with \"Uncaught Error: No interop methods are registered for renderer 0\"",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68593",
        "createdAt":  "2022-04-27T11:49:42Z",
        "number":  68593,
        "author":  "Genbox",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-23T16:13:55Z",
        "body":  "My company have a size restriction on our software, which is written entirely in .NET 6. We use singlefile as the primary means of publishing, but noticed that the size of the final package is rather large compared to our application code.\r\n\r\nIt turns out the singlefile host is optimized for speed rather than size. As an experiment, we changed the host\u0027s CMake files to optimize for size.\r\n\r\nFile1: https://github.com/dotnet/runtime/blob/main/src/native/corehost/CMakeLists.txt\r\nHere we added `add_compile_options(-Os)`\r\n\r\nFile2: https://github.com/dotnet/runtime/blob/main/eng/native/configureoptimization.cmake\r\nHere we changed `Ox` to `Os`\r\n\r\nDocs on Ox: https://docs.microsoft.com/en-us/cpp/build/reference/ox-full-optimization?view=msvc-170\r\n\r\nThe result is an apphost that is several megabytes smaller. I believe we went from 6 MB overhead to around 3 MB overhead. A reduction of about 3 MB in the final singlefile executable.\r\n\r\nAlso note that enabling singlefile compression has no impact on the apphost overhead since the compressed blob is embedded next to the apphost.\r\n\r\nI don\u0027t see any reason why the apphosts should be optimized for speed. After all, they have little to no operations that require optimized code, and in any case, a 50% overhead in assembly size will probably negate the optimizations. It should probably default to -Os instead of -Ox.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQ6TDyA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5CNxgM",
                                           "createdAt":  "2022-04-27T11:49:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nMy company have a size restriction on our software, which is written entirely in .NET 6. We use singlefile as the primary means of publishing, but noticed that the size of the final package is rather large compared to our application code.\r\n\r\nIt turns out the singlefile host is optimized for speed rather than size. As an experiment, we changed the host\u0027s CMake files to optimize for size.\r\n\r\nFile1: https://github.com/dotnet/runtime/tree/main/src/native/corehost/CmakeLists.txt\r\nHere we added ``add_compile_options(-Os)`\r\n\r\nFile2: https://github.com/dotnet/runtime/blob/main/eng/native/configureoptimization.cmake\r\nHere we changed `Ox` to `Os`\r\n\r\nDocs on Ox: https://docs.microsoft.com/en-us/cpp/build/reference/ox-full-optimization?view=msvc-170\r\n\r\nThe result is an apphost that is several megabytes smaller. I believe we went from 6 MB overhead to around 3 MB overhead. A reduction of about 3 MB in the final singlefile executable.\r\n\r\nAlso note that enabling singlefile compression has no impact on the apphost overhead since the compressed blob is embedded next to the apphost.\r\n\r\nI don\u0027t see any reason why the apphosts should be optimized for speed. After all, they have little to no operations that require optimized code, and in any case, a 50% overhead in assembly size will probably negate the optimizations. It should probably default to -Os instead of -Ox.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eGenbox\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-27T11:49:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CN3Bm",
                                           "createdAt":  "2022-04-27T12:16:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The host in case of single-file (assuming it\u0027s self-contained publish) contains the entire runtime+jit+gc, so I would argue it needs to be as fast as possible. That said, maybe there\u0027s some middle ground, but it would have to be well tested/measured.",
                                           "updatedAt":  "2022-04-27T12:16:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CS1T5",
                                           "createdAt":  "2022-04-28T13:52:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@Genbox It sounds like you already have the assets needed to run a few benchmarks and collect some of that data. Would it be possible for you to use Visual Studio\u0027s CPU profiler or PerfView or some other tool and collect details on your scenario. Hearing about some initial findings might help to move this forward.",
                                           "updatedAt":  "2022-04-28T13:52:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CTppg",
                                           "createdAt":  "2022-04-28T17:02:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Genbox",
                                           "body":  "I\u0027ll do a few things/tests and see what the differences are.",
                                           "updatedAt":  "2022-04-28T17:02:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DlwdN",
                                           "createdAt":  "2022-05-22T20:27:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "Couldn\u0027t we introduce the possibility to use a property in `.csproj` to determine the optimization level of the host?",
                                           "updatedAt":  "2022-05-22T20:27:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DlxUz",
                                           "createdAt":  "2022-05-22T20:46:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Couldn\u0027t we introduce the possibility to use a property in .csproj to determine the optimization level of the host?\r\n\r\nIt would mean building, testing and shipping yet another build of coreclr, for all platforms and OSes. It is expensive.\r\n\r\nThere are number of other ways one may want to customize the single file host, e.g. using a custom compression - https://github.com/dotnet/runtime/issues/61073.\r\n\r\nI think the best way to satisfy all these requests is to publish recipe for how to build a host from cloned dotnet/runtime repo sources, with any arbitrary customizations.",
                                           "updatedAt":  "2022-05-22T20:46:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Dlx1O",
                                           "createdAt":  "2022-05-22T20:54:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "\u003e It would mean building, testing and shipping yet another build of coreclr, for all platforms and OSes. It is expensive.\r\n\r\nThat\u0027s right. The build is quite expensive. I mean, we still have a lot of optimization potential in the build, but I should move that to another issue after I\u0027ve analyzed it in more detail.\r\n\r\nHowever, there are many users who would probably prefer this size-reduced build. The question is: The build is expensive, but does the benefit relativize this price?\r\n\r\nI personally have a few tools at work where file size is critical (due to low data transfer rates), for which this version of the host would be very good.\r\n\r\nI like to hear other viewpoints :D\r\n\r\n\u003e I think the best way to satisfy all these requests is to publish recipe for how to build a host from cloned dotnet/runtime repo sources, with any arbitrary customizations.\r\n\r\n👍🏼 ",
                                           "updatedAt":  "2022-05-22T20:54:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DmZ5C",
                                           "createdAt":  "2022-05-23T03:44:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "One question: are you using the self-contained single file host? Or the framework-dependent one?\r\n\r\nAnd if you\u0027re using self-contained, are you also using IL trimming? I generally want to understand the full scenario. \r\n\r\nIn most cases where people are using self-contained the size of the runtime is usually dwarfed by the size of the IL.",
                                           "updatedAt":  "2022-05-23T03:44:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DoNxL",
                                           "createdAt":  "2022-05-23T12:31:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "deeprobin",
                                           "body":  "Actually in my case not (Framework Dependant \u0026 also some self-contained). IL trimming will make a lot of difference, you\u0027re right.\r\n",
                                           "updatedAt":  "2022-05-23T12:31:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DpMPI",
                                           "createdAt":  "2022-05-23T16:12:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Genbox",
                                           "body":  "I\u0027ve run a few tests on the binary size alone. Just to get a feeling of what can be gained.\r\nIt is an x64/release configuration. The executable tested is the full single-file host.\r\n\r\nFormat: \u003ccompiler options\u003e:\u003csize in bytes\u003e\r\n\r\n1. /Ox (baseline): 8.097.792\r\n2. /O1: 6.819.328\r\n3. /Oxs: 6.819.328\r\n4. /Os /GF /Ob1: 6.693.888\r\n5. /O2: 8.097.792\r\n\r\nI\u0027m not sure why it seems some compiler flags have no impact on size. I\u0027m not familiar with the cmake compiler or the C++ build chain, so maybe I\u0027m doing something wrong.\r\n\r\nJIT/GC compiler flags are a separate discussion, so I guess the question is if it would be possible to distribute a speed-optimized version (/Ox or /O2) and a size-optimized version (/Oxs).\r\n\r\nWhat we did is to compile it with /Oxs and use distribute the nuget package on a private feed. Then we hacked it into to the msbuild chain with this:\r\n\r\n```\r\n  \u003cTarget Name=\"SmallHost\" BeforeTargets=\"ProcessFrameworkReferences\" Condition=\"\u0027$(CI)\u0027==\u0027true\u0027 AND $(RuntimeIdentifier.StartsWith(\u0027win-\u0027))\" \u003e\r\n    \u003cMessage Importance=\"High\" Text=\"######## Using small singlefilehost ########\"/\u003e\r\n    \u003cItemGroup\u003e\r\n      \u003cKnownAppHostPack Update=\"@(KnownAppHostPack)\" AppHostPackNamePattern=\"Custom.Microsoft.NETCore.App.Host.**RID**\"/\u003e\r\n    \u003c/ItemGroup\u003e\r\n  \u003c/Target\u003e\r\n```\r\n\r\nNote that $CI is a variable we set to true on our build system and `Custom.Microsoft.NETCore.App.Host.*` is the name of our custom build nuget package. \r\n\r\nSo if there are plans to support a size-minimized build (such as for AWS Lambda functions, size-sensitive apps or embedded programming) then it could just be a small change to produce the size optimized host as a nuget package. Something like `Microsoft.NETCore.App.Host.Embedded.win-x64`.",
                                           "updatedAt":  "2022-05-23T16:13:55Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Reduce size overhead of corehost",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68873",
        "createdAt":  "2022-05-04T21:57:37Z",
        "number":  68873,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-19T21:38:21Z",
        "body":  "We have a fallback mechanism, but using it implies that PE does not meet expectations of our loader. \r\nThat is suspicious and typically means there is a bug either in the tool that produced the PE or in the loader.\r\n\r\nhttps://github.com/dotnet/runtime/pull/68845  has suppressed the assert on OSX temporarely. \r\nThe change fixes a bug that could trigger this assert, but it will take some time for the fix to propagate to SDK and to published builds, so for now the assert is disabled on OSX. \r\n\r\nShould be reenabled at some time in the future.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZDchHQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Couqb",
                                           "createdAt":  "2022-05-04T21:57:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe have a fallback mechanism, but using it implies that PE does not meet expectations of our loader. \r\nThat is suspicious and typically means there is a bug either in the tool that produced the PE or in the loader.\r\n\r\nhttps://github.com/dotnet/runtime/pull/68845  has suppressed the assert on OSX temporarely. \r\nThe change fixes a bug that could trigger this assert, but it will take some time for the fix to propagate to SDK and to published builds, so for now the assert is disabled on OSX. \r\n\r\nShould be reenabled at some time in the future.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eVSadov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eVSadov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-04T21:57:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kNyEd",
                                           "createdAt":  "2023-08-16T22:11:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Since we are not running installer tests on OSX in debug/checked, the value in enabling this for 8.0 is not very high. \r\nI will move this to 9.0",
                                           "updatedAt":  "2023-08-16T22:11:06Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Reenable assert for a case when mapping an R2R PE failed on OSX",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70438",
        "createdAt":  "2022-06-08T15:19:24Z",
        "number":  70438,
        "author":  "0xced",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0-4kA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "exyi",
                                            "createdAt":  "2024-01-05T13:16:04Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-05-09T03:38:14Z",
        "body":  "As of [Microsoft.Extensions.DependencyModel 6.0.0][1], getting the DependencyContext of an application deployed as a [single-file][2] is not supported. The code is [properly annotated][3] with the `RequiresAssemblyFiles` attribute. The goal of this request is to remove the `RequiresAssemblyFiles` attribute and make `DependencyContext.Default` work for apps published in the single file deployment model instead of returning `null`.\r\n\r\nI have dedicated a project to experiment with creating a `DependencyContext` in single-file applications: https://github.com/0xced/SingleFileAppDependencyContext\r\n\r\nI came to the conclusion that the CoreCLR should probably expose some information about the single-file bundle structure. This would enable Microsoft.Extensions.DependencyModel to access the bundled `.deps.json` _file_ in order to construct a valid `DependencyContext` instance.\r\n\r\nI\u0027d be happy to attempt a pulI request but I have never played with the CoreCLR codebase. So I\u0027ll happily accept guidance on how to best expose the single-file bundle structure through QCall, assuming that it\u0027s the best way to do it.\r\n\r\n[1]: https://www.nuget.org/packages/Microsoft.Extensions.DependencyModel/6.0.0\r\n[2]: https://docs.microsoft.com/en-us/dotnet/core/deploying/single-file/overview\r\n[3]: https://github.com/dotnet/runtime/blob/v6.0.5/src/libraries/Microsoft.Extensions.DependencyModel/src/DependencyContext.cs#L53-L54",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORqYN9A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5EjIT2",
                                           "createdAt":  "2022-06-08T15:19:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAs of [Microsoft.Extensions.DependencyModel 6.0.0][1], getting the DependencyContext of an application deployed as a [single-file][2] is not supported. The code is [properly annotated][3] with the `RequiresAssemblyFiles` attribute. The goal of this request is to remove the `RequiresAssemblyFiles` attribute and make `DependencyContext.Default` work for apps published in the single file deployment model instead of returning `null`.\r\n\r\nI have dedicated a project to experiment with creating a `DependencyContext` in single-file applications: https://github.com/0xced/SingleFileAppDependencyContext\r\n\r\nI came to the conclusion that the CoreCLR should probably expose some information about the single-file bundle structure. This would enable Microsoft.Extensions.DependencyModel to access the bundled `.deps.json` _file_ in order to construct a valid `DependencyContext` instance.\r\n\r\nI\u0027d be happy to attempt a pulI request but I have never played with the CoreCLR codebase. So I\u0027ll happily accept guidance on how to best expose the single-file bundle structure through QCall, assuming that it\u0027s the best way to do it.\r\n\r\n[1]: https://www.nuget.org/packages/Microsoft.Extensions.DependencyModel/6.0.0\r\n[2]: https://docs.microsoft.com/en-us/dotnet/core/deploying/single-file/overview\r\n[3]: https://github.com/dotnet/runtime/blob/v6.0.5/src/libraries/Microsoft.Extensions.DependencyModel/src/DependencyContext.cs#L53-L54\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003e0xced\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-08T15:19:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EjLpc",
                                           "createdAt":  "2022-06-08T15:31:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Can you please describe what is the scenario you want to solve with the `DependencyContext`?\r\n\r\nWe\u0027ve discussed this internally a bit and the one scenario we know of is basically \"Enumerate all assemblies in the app\" (typically for something like dynamic service discovery in DI or similar scenarios). For that `DependencyContext` is not the right solution, since it\u0027s tightly coupled with the `.deps.json` file format. There are .NET form factors which don\u0027t have `.deps.json`, for example Native AOT, and pretty much all of the mobile platforms.\r\n\r\nWe would also like to treat `.deps.json` as an implementation detail more and more. For example, in self-contained single-file there\u0027s basically no use for that file - it just makes the output a bit larger and costs perf at startup, but it doesn\u0027t really bring any value to most apps. So ideally we should be able to completely remove it in that case.",
                                           "updatedAt":  "2022-06-08T15:31:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EjSV9",
                                           "createdAt":  "2022-06-08T15:55:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "0xced",
                                           "body":  "\u003e We\u0027ve discussed this internally a bit and the one scenario we know of is basically \"Enumerate all assemblies in the app\" (typically for something like dynamic service discovery in DI or similar scenarios).\r\n\r\nYes, that\u0027s exactly the use case: enumerate all available assemblies (even if not already loaded) and then call some methods through reflection. The Serilog.Settings.Configuration package does exactly this. It uses the `DependencyContext` to search for assemblies containing `Serilog` in the name but it doesn\u0027t work when deployed as single-file. We have discussed this in serilog/serilog-settings-configuration#304\r\n\r\nIf `DependencyContext` is not the right way to go then this issue becomes a duplicate of #57714 which asks for the same requirement: get a list of _all_ known assemblies.\r\n\r\nWhat would be the path to the right solution if not through DependencyContext/.deps.json ?",
                                           "updatedAt":  "2022-06-08T15:55:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ejc25",
                                           "createdAt":  "2022-06-08T16:36:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "This is just my thinking right now, it needs a design discussion (and API discussion):\r\n* Introduce new public API which does this - enumerate assemblies in the app - but what does it exactly mean?:\r\n  * What if I `Assembly.LoadFrom` a new file which is not part of the app, should the API now return that as well?\r\n  * Is it guaranteed to be a stable list (as in it never changes during the lifetime of the app)\r\n  * How does it apply at high-level to the different form factors - one such definition could be, it\u0027s the list of assemblies which make up an app at the point of `dotnet publish` command (or similar), which is very close to what happens today with `.deps.json`, but extend that to other form factors. But there could be other definitions as well.\r\n* Based on the above API definition, go and define what it means in detail for each of the form factors we support (CoreCLR, Native AOT, single-file, mono, Android, iOS, Blazor, ...)\r\n  * For example, should custom hosts (CoreCLR/Mono) have the ability to influence the list somehow\r\n  * Or another - what happens for framework dependent apps - are the framework assemblies part of the list or not? (today with `.deps.json` they are not, but maybe they should be)\r\n* Implement it at least in some of the form factors - probably CoreCLR, single-file, NativeAOT should be a must and then also look into the other mono based ones eventually.\r\n\r\nThe technical implementation for single-file would probably require some changes to the host/runtime interface, since the information is in the host, not in the runtime itself. It\u0027s not that hard to do, just touches several components.\r\n\r\nNote on Native AOT: The notion of Assembly in Native AOT is a bit weird since it only makes sense for apps which use reflection. So the API may not work in some cases - which is OK, it\u0027s just an interesting twist.",
                                           "updatedAt":  "2022-06-08T16:36:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EkWpl",
                                           "createdAt":  "2022-06-08T20:30:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "0xced",
                                           "body":  "Those are all good points. Please keep us updated in this issue (or in #57714) when the team settles on an API so that we can try it in real-world apps.",
                                           "updatedAt":  "2022-06-08T20:30:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EkXQS",
                                           "createdAt":  "2022-06-08T20:33:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Unfortunately I can\u0027t make any promises as to when this will happen. So far there hasn\u0027t been that many requests on this. But maybe we\u0027ll gather more over time.",
                                           "updatedAt":  "2022-06-08T20:33:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ekk4l",
                                           "createdAt":  "2022-06-08T21:36:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "I thought about this a little bit before and didn\u0027t really come up with a workable model for NativeAOT. Since NativeAOT needs to trim away code, keeping all the assemblies around isn\u0027t really possible or practical. Effectively, the form factor demands some sort of static specification of what\u0027s used.\r\n\r\n@0xced Is there some sort of manual configuration alternative to Serilog that avoids scanning all the assemblies?",
                                           "updatedAt":  "2022-06-08T21:36:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E9mtA",
                                           "createdAt":  "2022-06-15T22:07:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "0xced",
                                           "body":  "Yes, a new method that takes an explicit array of assemblies has been added to support the single-file deployment model in serilog/serilog-settings-configuration#310.\r\n\r\nIt\u0027s not yet released as a stable version but should be [available in Serilog.Settings.Configuration  3.3.1](https://github.com/serilog/serilog-settings-configuration/pull/299).",
                                           "updatedAt":  "2022-06-15T22:07:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FBpZx",
                                           "createdAt":  "2022-06-16T19:33:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "0xced",
                                           "body":  "Apparently there\u0027s more than _enumerate all assemblies in the app_ use cases out there. In [Carter](https://github.com/CarterCommunity/Carter/blob/6.0.0/src/Carter/DependencyContextAssemblyCatalog.cs#L77-L85), for example, the `Library` and `Dependency` types from `Microsoft.Extensions.DependencyModel` are used:\r\n\r\n```csharp\r\nprivate static bool IsReferencingCarter(Library library)\r\n{\r\n    return library.Dependencies.Any(dependency =\u003e dependency.Name.Equals(carterAssemblyName));\r\n}\r\n\r\nprivate static bool IsReferencingFluentValidation(Library library)\r\n{\r\n    return library.Dependencies.Any(dependency =\u003e dependency.Name.Equals(fluentValidationAssemblyName));\r\n}\r\n```\r\n\r\nThis can\u0027t work with single-file deployment since the `DependencyContext` is null in the first place. Note that I\u0027m not familiar with Carter at all, I just saw CarterCommunity/Carter#291 appear as a linked issue two days ago.\r\n\r\nWe might want to page in @jchannon who wrote this piece of code.",
                                           "updatedAt":  "2022-06-16T19:33:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FBxbJ",
                                           "createdAt":  "2022-06-16T20:18:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "There is a scenario with `.deps.json` which is probably never going to work in single-file. If asked for `.deps.json` can store compile environment, so things like defines, compiler options and... reference assemblies used to compile the assembly. This is used in scenarios where the assembly in question should be recompiled at runtime (ASP.NET can do this in some cases, where you just edit the source file and it recompiles on the fly). This will not work with single-file, for several reasons, for example there\u0027s no API to get to those reference assemblies (they can\u0027t be loaded by runtime) - and we don\u0027t have any plans to add this right now.\r\n\r\nI don\u0027t know if this is the use case for Carter, but reference assemblies are currently not included in the single-file bundle and there\u0027s no planned effort to enable that.",
                                           "updatedAt":  "2022-06-16T20:18:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FHD5_",
                                           "createdAt":  "2022-06-18T14:58:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kant2002",
                                           "body":  "Partially related https://github.com/dotnet/runtime/pull/70934. I discover this issue when playing with Silk.NET + NativeAOT. Based on what I\u0027m reading, call to CodeBase is redundant in .NET context, so hopefully that\u0027s not something overboard. Maybe that\u0027s not affects OP, but hopefully step in proper direction at least partially.",
                                           "updatedAt":  "2022-06-18T14:58:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GnBg9",
                                           "createdAt":  "2022-07-14T16:15:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jchannon",
                                           "body":  "That is something I considered for Carter (https://github.com/CarterCommunity/Carter/issues/291) and it could be an answer, my guess is that would slow the startup time of Carter if I\u0027m calling Assembly.Load. I could narrow down the assemblies it loads by not loading assemblies starting with Microsoft/System. @agocke @vitek-karas does the DependencyContext.RuntimeLibraries list call Assembly.Load under the hood already so the perf differences would be minimal? cc @0xced ",
                                           "updatedAt":  "2022-07-14T16:15:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GnBj1",
                                           "createdAt":  "2022-07-14T16:15:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jchannon",
                                           "body":  "cc @davidfowl ",
                                           "updatedAt":  "2022-07-14T16:15:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gnoc7",
                                           "createdAt":  "2022-07-14T19:01:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jchannon",
                                           "body":  "Just to clarify I think Carter is doing the same as the above Serilog example and that it’s trying to find assemblies that reference Carter and therefore it can use those assemblies to find Carter types/interfaces inside them and register them in DI. I could get rid of the DependencyModel altogether and just get the user to pass in a string array of assemblies to use but it’s not as elegant for the user ",
                                           "updatedAt":  "2022-07-14T19:01:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gn1AF",
                                           "createdAt":  "2022-07-14T20:02:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Just FYI none of these very common application patterns are linker friendly, scanning all assemblies or relevant assemblies is problematic for trimming, this is one of the reasons the app frameworks like ASP.NET Core avoid it now. MVC isn\u0027t trim safe yet but is inching towards this. Today we scan assemblies at build time, find the relevant ones and add them to the main assembly via an attribute.\r\n\r\nThen we use those assemblies to scan get the closure https://github.com/dotnet/aspnetcore/blob/e6dd3946f1f14e4182c70ac532dda10dd0f25f4b/src/Mvc/Mvc.Core/src/ApplicationParts/ApplicationPartManager.cs#L75-L103. This isn\u0027t trim friendly but it\u0027s more efficient.\r\n\r\nPS: Truly dynamic plugin systems don\u0027t count, they will never be trimmable.",
                                           "updatedAt":  "2022-07-14T20:02:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gn4oL",
                                           "createdAt":  "2022-07-14T20:20:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I personally would also prefer build-time solution as the default for these cases. I know that some users will want truly dynamic behavior (I drop in a file and it gets picked up), but that should be opt-in in my opinion. Lot of things in .NET SDK make a soft assumption that it can see the entire app during build - especially the newer features (single-file, trimming, NativeAOT, ...), so adding that as a default assumption to libraries doesn\u0027t seem too bad.",
                                           "updatedAt":  "2022-07-14T20:20:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GovTi",
                                           "createdAt":  "2022-07-15T01:42:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I would too but people have been building libraries like this for years on .NET and source generators are new and not as approachable as this. It\u0027ll get easier but there\u0027s a big learning curve shifting to this model and restrictions as well.",
                                           "updatedAt":  "2022-07-15T01:42:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gpg30",
                                           "createdAt":  "2022-07-15T08:04:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "You\u0027re absolutely right. I meant my comment as \"going forward it would be really good to use built-time solutions\", which I didn\u0027t make very clear.",
                                           "updatedAt":  "2022-07-15T08:04:31Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "Feature request: Support DependencyContext.Default for single file applications",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73531",
        "createdAt":  "2022-08-07T12:08:21Z",
        "number":  73531,
        "author":  "TonyValenti",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-08T11:50:33Z",
        "body":  "### Description\n\nIt is not possible to publish a single file EXE that references other EXE files in the project.\n\n### Reproduction Steps\n\nTry to publish this attached file:\r\n[MyApp.zip](https://github.com/dotnet/runtime/files/9276705/MyApp.zip)\r\n\n\n### Expected behavior\n\nIt should work without issue.\n\n### Actual behavior\n\nIt is not able to publish.  This seems to be caused by the build process looking for \"singlefilehost.exe\" for the \"child\" EXEs and not finding it.\n\n### Regression?\n\nNot sure.\n\n### Known Workarounds\n\nNone.\n\n### Configuration\n\nWindows 11 x64.  .NET 6.x in VS 17.2.6\n\n### Other information\n\nThe goal that I am trying to accomplish is to have a console and WPF version of my application in the same EXE.  If there is a better way, I\u0027d love to know.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSAEEQg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5H916L",
                                           "createdAt":  "2022-08-07T12:08:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nIt is not possible to publish a single file EXE that references other EXE files in the project.\n\n### Reproduction Steps\n\nTry to publish this attached file:\r\n[MyApp.zip](https://github.com/dotnet/runtime/files/9276705/MyApp.zip)\r\n\n\n### Expected behavior\n\nIt should work without issue.\n\n### Actual behavior\n\nIt is not able to publish.  This seems to be caused by the build process looking for \"singlefilehost.exe\" for the \"child\" EXEs and not finding it.\n\n### Regression?\n\nNot sure.\n\n### Known Workarounds\n\nNone.\n\n### Configuration\n\nWindows 11 x64.  .NET 6.x in VS 17.2.6\n\n### Other information\n\nThe goal that I am trying to accomplish is to have a console and WPF version of my application in the same EXE.  If there is a better way, I\u0027d love to know.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTonyValenti\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-07T12:08:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H-Ih8",
                                           "createdAt":  "2022-08-07T19:24:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Having a GUI and Console version of the app in the same exe seems to be pretty tricky on Windows. Search for example for \"windows GUI app with console\" there are some good links. The short version is:\r\n* Make it Console app which can use WinForms just fine, in the Main decide which version you want and run the appropriate code. The downside is that if it\u0027s launched as a GUI app with double-click it will have a console window opened by Windows (you can close that from Main, but it will always start with it)\r\n* Make it a GUI app, but in this case it\u0027s pretty tricky to hook it up to stdin/stdout of the parent console if it should behave as a Console app - `AttachConsole` API seems to be he way to go, but there seem to be quite a few problems either way.\r\n\r\n.NET doesn\u0027t have any feature which would help with this. In case of single-file, I don\u0027t know what should be the meaning of trying to publish two executables into one single-file in a general case. The error should be more explicit, but I don\u0027t think .NET should support it.",
                                           "updatedAt":  "2022-08-07T19:24:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H-RZ9",
                                           "createdAt":  "2022-08-07T23:23:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TonyValenti",
                                           "body":  "@vitek-karas I was hoping to leverage the fact that .Net would decompress to a temporary folder to essentially be able to do the following:\n1.  \"Main\" EXE is run. \n2.  If command line Args exist, run the decompressed console EXE. \n3.  Otherwise, run the WPF EXE. \n\n",
                                           "updatedAt":  "2022-08-07T23:23:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IAQRC",
                                           "createdAt":  "2022-08-08T11:50:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "This would mean that you\u0027re running the CLI (command line) version as a child process. Which may be fine in your scenario (it\u0027s frequently not desirable though).\r\n\r\nYou could probably do this in two ways:\r\nBuild/publish the CLI exe project explicitly as a target from your \"main\" exe project file - this is effectively a \"Fix\" for the failure you\u0027re seeing. And then one of the these:\r\n* Include it as an embedded managed resource in the \"main\" exe. Then when the main exe starts and you decide to use CLI, write the content of the managed resource to disk and run it - basically implement your own self-extract. I would recommend this solution as it gives you full control over the behavior - and you could even cleanup the file after it exits (which built-in self-extract doesn\u0027t do)\r\n* Include it as a content file into the single-file bundle. It will get self-extracted for you, and you can do the rest, but you don\u0027t have full control over where it goes - and it won\u0027t be cleaned up. Plus you\u0027re going to pay the price of extraction regardless if it\u0027s needed or not.",
                                           "updatedAt":  "2022-08-08T11:50:33Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Cannot Publish when Referencing other EXE Projects",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80092",
        "createdAt":  "2023-01-02T08:24:54Z",
        "number":  80092,
        "author":  "batzen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3iiLw==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "mgaffigan",
                                            "createdAt":  "2024-04-28T13:38:51Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-08-02T21:00:02Z",
        "body":  "Would it be possible to add an export for `GetCLRRuntimeHost` to singlefilehost?\r\n\r\nCurrently it seems to be impossible to get a handle to the runtime host as singlefilehost statically links the coreclr, so it\u0027s not possible to get a module handle for coreclr.dll and call `GetCLRRuntimeHost`.\r\n\r\nThe motivation for this would be to allow tools like Snoop to also work with self contained single file executables.\r\nFor reference https://github.com/snoopwpf/snoopwpf/issues/378\r\nThe i am talking about is at https://github.com/snoopwpf/snoopwpf/blob/develop/Snoop.GenericInjector/NetCoreApp3_0Executor.cpp\r\n\r\nIf there are alternative ways to call a .NET method from C++ i would be very happy to hear about them.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUbfzAA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5RlT8r",
                                           "createdAt":  "2023-01-02T08:25:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWould it be possible to add an export for `GetCLRRuntimeHost` to singlefilehost?\r\n\r\nCurrently it seems to be impossible to get a handle to the runtime host as singlefilehost statically links the coreclr, so it\u0027s not possible to get a module handle for coreclr.dll and call `GetCLRRuntimeHost`.\r\n\r\nThe motivation for this would be to allow tools like Snoop to also work with self contained single file executables.\r\nFor reference https://github.com/snoopwpf/snoopwpf/issues/378\r\nThe i am talking about is at https://github.com/snoopwpf/snoopwpf/blob/develop/Snoop.GenericInjector/NetCoreApp3_0Executor.cpp\r\n\r\nIf there are alternative ways to call a .NET method from C++ i would be very happy to hear about them.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebatzen\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-02T08:25:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rmv9C",
                                           "createdAt":  "2023-01-02T17:35:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "I think SOS is the closest reference which uses [`DotNetRuntimeInfo`](https://github.com/dotnet/diagnostics/blob/e109d3e/src/shared/inc/runtimeinfo.h) exported symbol to resolve the module address from singlefilehost https://github.com/dotnet/diagnostics/blob/e109d3e/src/SOS/Strike/platform/runtimeimpl.cpp#L72. See `CreateInstance` on line 137; IIUC, snoopwpf needs `moduleAddress`.",
                                           "updatedAt":  "2023-01-02T17:35:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rmxig",
                                           "createdAt":  "2023-01-02T17:52:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@elinorfung\r\n\r\nThe recommended way to call managed functionality from native code is `hostfxr` based APIs. https://learn.microsoft.com/en-us/dotnet/core/tutorials/netcore-hosting\r\nSpecifically the `nethost` library which can find existing runtime in the process. Unfortunately I think this doesn\u0027t work for singlefile host (as it\u0027s looking for `hostfxr` module by name).\r\n@elinor-fung  - do we know/track if custom native hosting works from single-file apps (with superhost)?\r\n\r\nJust to confirm I understand the scenario correctly:\r\n* You have a tool which hijacks already running process and injects native code into it.\r\n* From that code you want to find the possibly running .NET runtime in it and call managed code\r\n\r\nNote that this approach will not work in general for .NET apps - apps which are trimmed are likely going to break because of missing managed functionality which your tool might need to call into. NativeAOT apps will not work both due to trimming but also because there\u0027s no \"runtime\" in the process (no CoreCLR module, either explicit or embeded), so those would need a different mechanism to call into the managed world (and there would still hit the trimming problem).",
                                           "updatedAt":  "2023-01-02T17:52:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RoApp",
                                           "createdAt":  "2023-01-03T06:56:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "batzen",
                                           "body":  "@am11 I don\u0027t understand what i should do with the information provided in DotNetRuntimeInfo. The target in my case is a single file process. So finding the module handle that contains the exports is easy as it\u0027s the main process module.\r\n\r\n@vitek-karas Using nethost wouldn\u0027t be a problem then, just very inconvenient as using that API is very verbose, compared to `GetCLRRuntimeHost`. Unfortunately nethost just starts a new runtime if used with a single file host. And even using non custom native hosting like managed CPP starts a new runtime.\r\n\r\nYou understood my scenario correctly.\r\nI am fine with the restrictions that this doesn\u0027t work for every .NET app.\r\nSnoop is only meant to be used for WPF.\r\nThings like trimming and/or NativeAOT might never be supported by Snoop, or will require a potential user to reference Snoop directly in their app (which is not yet supported).",
                                           "updatedAt":  "2023-01-03T06:56:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rt_MA",
                                           "createdAt":  "2023-01-04T14:37:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "\u003e do we know/track if custom native hosting works from single-file apps (with superhost)?\r\n\r\nCustom native hosting does not currently work with self-contained single-file. We have https://github.com/dotnet/runtime/issues/3773 from when we first did single-file (before it had the runtime/hostfxr embedded). At the time, we chose not to do anything - either to block or support - in the host components, but single-file has definitely matured and grown in usage since then.",
                                           "updatedAt":  "2023-01-04T14:37:51Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Add export for `GetCLRRuntimeHost` to singlefilehost?",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80369",
        "createdAt":  "2023-01-09T13:52:14Z",
        "number":  80369,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-19T15:46:54Z",
        "body":  "Historically single-file feature has been a source of expensive bugs. Unfortunately not just small bugs but large experience breaking bugs, which are discovered relatively late and thus more expensive to fix. The core of the problem is that single-file is a feature which depends on lot of very specific behaviors across large number of components and thus it\u0027s more prone to breaks from seemingly unrelated changes.\r\n\r\nTo solve this we need a robust testing story for single-file. It should include:\r\n* Unit-test-like coverage in the runtime repo close to the specific components (host, runtime, sdk-task)\r\n* Validation for SDK components to single-file (RID, runtime pack restore, picking the right host, errors for unsupported scenarios)\r\n* Integration tests which validate the feature end-to-end\r\n  * With sufficiently large platform/architecture matrix (for example frequent source of bugs are macos or arm64 targets)\r\n  * Coverage for most options (self-contained true/false, with native library embedded/not, compressed on/off)\r\n  * Reasonable coverage of cross feature integration tests\r\n    * Trimmed + single-file\r\n    * R2R + single-file\r\n    * Behavior of common SDK commands with single-file project (build, run, test, watch)\r\n* Subset of existing library tests to run in single-file mode\r\n\r\nThe exact location and type of these tests is TBD (expectation is spread between runtime and sdk repos)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUf7U9Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5R_tT1",
                                           "createdAt":  "2023-01-09T13:52:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHistorically single-file feature has been a source of expensive bugs. Unfortunately not just small bugs but large experience breaking bugs, which are discovered relatively late and thus more expensive to fix. The core of the problem is that single-file is a feature which depends on lot of very specific behaviors across large number of components and thus it\u0027s more prone to breaks from seemingly unrelated changes.\r\n\r\nTo solve this we need a robust testing story for single-file. It should include:\r\n* Unit-test-like coverage in the runtime repo close to the specific components (host, runtime, sdk-task)\r\n* Validation for SDK components to single-file (RID, runtime pack restore, picking the right host, errors for unsupported scenarios)\r\n* Integration tests which validate the feature end-to-end\r\n  * With sufficiently large platform/architecture matrix (for example frequent source of bugs are macos or arm64 targets)\r\n  * Coverage for most options (self-contained true/false, with native library embedded/not, compressed on/off)\r\n  * Reasonable coverage of cross feature integration tests\r\n    * Trimmed + single-file\r\n    * R2R + single-file\r\n    * Behavior of common SDK commands with single-file project (build, run, test, watch)\r\n* Subset of existing library tests to run in single-file mode\r\n\r\nThe exact location and type of these tests is TBD (expectation is spread between runtime and sdk repos)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eelinor-fung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`test-enhancement`, `area-Single-File`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-09T13:52:21Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Design and implement robust testing story for single-file",
        "labels":  [
                       "test-enhancement",
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80943",
        "createdAt":  "2023-01-20T19:05:27Z",
        "number":  80943,
        "author":  "nickwhaley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-09-25T20:23:34Z",
        "body":  "### Description\r\n\r\nWhen a single file, extracted, self contained application is run in the same folder as another self-contained application that uses a different TFM, it will crash during startup.\r\n\r\n### Reproduction Steps\r\n\r\n1. Create console application ConsoleApp1.\r\n2. Set TFM net6.0, RuntimeIdentifier win-x64, SelfContained true\r\n3. Create console application ConsoleApp2.\r\n4. Set TFM net7.0, RuntimeIdentifier win-x64, SelfContained true, PublishSingleFile true, IncludeAllContentForSelfExtract true\r\n5. Publish both projects to the same Folder.\r\n6. Run ConsoleApp2.\r\n\r\n### Expected behavior\r\n\r\nProgram to run successfully and output \u0027Hello, World!\u0027.\r\n\r\n### Actual behavior\r\n\r\nCrash with \u0027Fatal error. Internal CLR error. (0x80131506)\u0027.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nDeleting the `System.Private.CoreLib.dll` file in the current directory corrects the issue but breaks the other application. Disabling IncludeAllContentForSelfExtract also corrects the issue since the file is never extracted.\r\n\r\n### Configuration\r\n\r\nDotnet 7.0.102\r\nWindows 10.0.22000 x64\r\n\r\n### Other information\r\n\r\n\r\n\r\nI think it may be because it is attempting to load `System.Private.CoreLib.dll` from current directory rather than the extracted contents, even though the file version is wrong. The version of `CoreLib` in current directory is 6.0.1222.56807 and the extracted version in DOTNET_BUNDLE_EXTRACT_BASE_DIR is 7.0.122.56804. TRUSTED_PLATFORM_ASSEMBLIES does contain the full and correct path to the extracted `CoreLib`, which you would think would load first, but it does not.\r\n\r\nStack trace on the crash:\r\n\r\n\u003e 00 singlefilehost!MethodDesc::GetMethodDescIndex(void) (Inline Function @ 00007ff6\\`96ec4273)\r\n\u003e 01 singlefilehost!MethodDesc::GetMethodDescChunk(void) (Inline Function @ 00007ff6\\`96ec4273)\r\n\u003e 02 singlefilehost!MethodDesc::GetMethodTable_NoLogging(void) (Inline Function @ 00007ff6\\`96ec4273)\r\n\u003e 03 singlefilehost!MethodDesc::GetMethodTable(void) (Inline Function @ 00007ff6\\`96ec4273)\r\n\u003e 04 singlefilehost!MethodDesc::DoPrestub(class MethodTable * pDispatchingMT = 0x00000000\\`00000000, CallerGCMode callerGCMode = Unknown (0n0))+0x43\r\n\u003e 05 singlefilehost!ECall::PopulateManagedCastHelpers(void)+0x1a5\r\n\u003e 06 singlefilehost!SystemDomain::LoadBaseSystemClasses(void)+0x3f7\r\n\u003e 07 singlefilehost!SystemDomain::Init(void)+0x1cf\r\n\u003e 08 singlefilehost!EEStartupHelper(void)+0x1130\r\n\u003e 09 singlefilehost!EEStartup(void)+0x51\r\n\u003e 0a singlefilehost!EnsureEEStarted(void)+0xa4 (Inline Function @ 00007ff6\\`96e4bfb8)\r\n\u003e 0b singlefilehost!CorHost2::Start(void)+0x138\r\n\u003e 0c singlefilehost!coreclr_initialize(char * exePath = 0x00000205\\`6f895800 \"..snip..\\bin\\publish\\Debug\\net7.0\\win-x64\\LPRCore_Installer_Native.exe\", char * appDomainFriendlyName = 0x00007ff6\\`974e3d80 \"clrhost\", int propertyCount = 0n21, char ** propertyKeys = 0xffffffff\\`fffce4d0, char ** propertyValues = 0x00000205\\`6f8c0910, void ** hostHandle = 0x000000c1\\`8abff1d0, unsigned int * domainId = 0x000000c1\\`8abff164)+0x29b\r\n\u003e 0d singlefilehost!coreclr_t::create(char * exe_path = 0x00000205\\`6f895800 \"..snip..\\bin\\publish\\Debug\\net7.0\\win-x64\\LPRCore_Installer_Native.exe\", char * app_domain_friendly_name = 0x00007ff6\\`974e3d80 \"clrhost\", class coreclr_property_bag_t * properties = 0x00000205\\`6f895700, class std::unique_ptr\u003ccoreclr_t,std::default_delete\u003ccoreclr_t\u003e \u003e * inst = 0x00000205\\`6f895740 empty, class std::basic_string\u003cwchar_t,std::char_traits\u003cwchar_t\u003e,std::allocator\u003cwchar_t\u003e \u003e * libcoreclr_path = \u003cValue unavailable error\u003e)+0x2d8\r\n\u003e 0e singlefilehost!\\`anonymous namespace\u0027::create_coreclr(void)+0x154\r\n\u003e 0f singlefilehost!corehost_main(int argc = 0n1, wchar_t ** argv = 0x00000205\\`6f876210)+0xf2\r\n\r\nWindbg output:\r\n\r\n\u003e ModLoad: 00007ffe\\`a5350000 00007ffe\\`a5382000   C:\\Windows\\System32\\IMM32.DLL\r\n\u003e ModLoad: 00007ffe\\`a4a50000 00007ffe\\`a4ad2000   C:\\Windows\\System32\\bcryptPrimitives.dll\r\n\u003e (3aa0.22a4): Unknown exception - code 04242420 (first chance)\r\n\u003e ModLoad: 00007ffd\\`ebee0000 00007ffd\\`ec903000   ..snip..\\bin\\publish\\Debug\\net7.0\\win-x64\\System.Private.CoreLib.dll\r\n\u003e (3aa0.22a4): Access violation - code c0000005 (first chance)\r\n\u003e First chance exceptions are reported before any exception handling.\r\n\u003e This exception may be expected and handled.\r\n\u003e *** WARNING: Unable to verify checksum for singlefilehost.exe\r\n\u003e singlefilehost!MethodDesc::GetMethodDescIndex [inlined in singlefilehost!MethodDesc::DoPrestub+0x43]:\r\n\u003e 00007ff6\\`96ec4273 0fb64102        movzx   eax,byte ptr [rcx+2] ds:00000000\\`00000002=??\r\n\r\nstrace also confirms the `System.Private.CoreLib.dll` is being read from current directory immediately before crash (same issue on linux).\r\n\r\nDONET_TRACE does not report anything erroneous, but I can provide the output if needed.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZ2EAKg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5TYDjl",
                                           "createdAt":  "2023-01-20T19:05:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen a single file, extracted, self contained application is run in the same folder as another self-contained application that uses a different TFM, it will crash during startup.\n\n### Reproduction Steps\n\n1. Create console application ConsoleApp1.\r\n2. Set TFM net6.0, RuntimeIdentifier win-x64, SelfContained true\r\n3. Create console application ConsoleApp2.\r\n4. Set TFM net7.0, RuntimeIdentifier win-x64, SelfContained true, PublishSingleFile true, IncludeAllContentForSelfExtract true\r\n5. Publish both projects to the same Folder.\r\n6. Run ConsoleApp2.\n\n### Expected behavior\n\nProgram to run successfully and output \u0027Hello, World!\u0027.\n\n### Actual behavior\n\nCrash with \u0027Fatal error. Internal CLR error. (0x80131506)\u0027.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nDotnet 7.0.102\r\nWindows 10.0.22000 x64\n\n### Other information\n\n\r\n\r\nI think it may be because it is attempting to load `System.Private.CoreLib.dll` from current directory rather than the extracted contents, even though the file version is wrong. The version of `CoreLib` in current directory is 6.0.1222.56807 and the extracted version in DOTNET_BUNDLE_EXTRACT_BASE_DIR is 7.0.122.56804. TRUSTED_PLATFORM_ASSEMBLIES does contain the full and correct path to the extracted `CoreLib`.\r\n\r\nDeleting the `System.Private.CoreLib.dll` file in the current directory corrects the issue but breaks the other application. Disabling IncludeAllContentForSelfExtract also corrects the issue since the file is never extracted.\r\n\r\nStack trace on the crash:\r\n\r\n\u003e 00 singlefilehost!MethodDesc::GetMethodDescIndex(void) (Inline Function @ 00007ff6`96ec4273)\r\n\u003e 01 singlefilehost!MethodDesc::GetMethodDescChunk(void) (Inline Function @ 00007ff6`96ec4273)\r\n\u003e 02 singlefilehost!MethodDesc::GetMethodTable_NoLogging(void) (Inline Function @ 00007ff6`96ec4273)\r\n\u003e 03 singlefilehost!MethodDesc::GetMethodTable(void) (Inline Function @ 00007ff6`96ec4273)\r\n\u003e 04 singlefilehost!MethodDesc::DoPrestub(class MethodTable * pDispatchingMT = 0x00000000`00000000, CallerGCMode callerGCMode = Unknown (0n0))+0x43\r\n\u003e 05 singlefilehost!ECall::PopulateManagedCastHelpers(void)+0x1a5\r\n\u003e 06 singlefilehost!SystemDomain::LoadBaseSystemClasses(void)+0x3f7\r\n\u003e 07 singlefilehost!SystemDomain::Init(void)+0x1cf\r\n\u003e 08 singlefilehost!EEStartupHelper(void)+0x1130\r\n\u003e 09 singlefilehost!EEStartup(void)+0x51\r\n\u003e 0a singlefilehost!EnsureEEStarted(void)+0xa4 (Inline Function @ 00007ff6`96e4bfb8)\r\n\u003e 0b singlefilehost!CorHost2::Start(void)+0x138\r\n\u003e 0c singlefilehost!coreclr_initialize(char * exePath = 0x00000205`6f895800 \"C:\\ElsagGIT\\EOC4\\CarSystem UI\\LPRCore Installer Native\\bin\\publish\\Debug\\net7.0\\win-x64\\LPRCore_Installer_Native.exe\", char * appDomainFriendlyName = 0x00007ff6`974e3d80 \"clrhost\", int propertyCount = 0n21, char ** propertyKeys = 0xffffffff`fffce4d0, char ** propertyValues = 0x00000205`6f8c0910, void ** hostHandle = 0x000000c1`8abff1d0, unsigned int * domainId = 0x000000c1`8abff164)+0x29b\r\n\u003e 0d singlefilehost!coreclr_t::create(char * exe_path = 0x00000205`6f895800 \"C:\\ElsagGIT\\EOC4\\CarSystem UI\\LPRCore Installer Native\\bin\\publish\\Debug\\net7.0\\win-x64\\LPRCore_Installer_Native.exe\", char * app_domain_friendly_name = 0x00007ff6`974e3d80 \"clrhost\", class coreclr_property_bag_t * properties = 0x00000205`6f895700, class std::unique_ptr\u003ccoreclr_t,std::default_delete\u003ccoreclr_t\u003e \u003e * inst = 0x00000205`6f895740 empty, class std::basic_string\u003cwchar_t,std::char_traits\u003cwchar_t\u003e,std::allocator\u003cwchar_t\u003e \u003e * libcoreclr_path = \u003cValue unavailable error\u003e)+0x2d8\r\n\u003e 0e singlefilehost!`anonymous namespace\u0027::create_coreclr(void)+0x154\r\n\u003e 0f singlefilehost!corehost_main(int argc = 0n1, wchar_t ** argv = 0x00000205`6f876210)+0xf2\r\n\r\nWindbg output:\r\n\r\n\u003e ModLoad: 00007ffe`a5350000 00007ffe`a5382000   C:\\Windows\\System32\\IMM32.DLL\r\n\u003e ModLoad: 00007ffe`a4a50000 00007ffe`a4ad2000   C:\\Windows\\System32\\bcryptPrimitives.dll\r\n\u003e (3aa0.22a4): Unknown exception - code 04242420 (first chance)\r\n\u003e ModLoad: 00007ffd`ebee0000 00007ffd`ec903000   ..snip..\\bin\\publish\\Debug\\net7.0\\win-x64\\System.Private.CoreLib.dll\r\n\u003e (3aa0.22a4): Access violation - code c0000005 (first chance)\r\n\u003e First chance exceptions are reported before any exception handling.\r\n\u003e This exception may be expected and handled.\r\n\u003e *** WARNING: Unable to verify checksum for singlefilehost.exe\r\n\u003e singlefilehost!MethodDesc::GetMethodDescIndex [inlined in singlefilehost!MethodDesc::DoPrestub+0x43]:\r\n\u003e 00007ff6`96ec4273 0fb64102        movzx   eax,byte ptr [rcx+2] ds:00000000`00000002=??\r\n\r\nstrace also confirms the `System.Private.CoreLib.dll` is being read from current directory immediately before crash (same issue on linux).\r\n\r\nDONET_TRACE does not report anything erroneous, but I can provide the output if needed.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enickwhaley\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-20T19:05:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nYQAq",
                                           "createdAt":  "2023-09-25T20:23:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "We\u0027re no longer recommending IncludeAllContentForSelfExtract, so that is the suggested workaround for now.",
                                           "updatedAt":  "2023-09-25T20:23:22Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "AccessViolation in SystemDomain::LoadBaseSystemClasses in Single File Application",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84372",
        "createdAt":  "2023-04-05T19:07:51Z",
        "number":  84372,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-29T22:17:38Z",
        "body":  "I\u0027m seeing the following exception from the [ASP.NET benchmarks for PublishTrimmed/ReadyToRun/SingleFile](https://dev.azure.com/dnceng/internal/_build/results?buildId=2148731\u0026view=logs\u0026j=07114bf0-0ae8-5455-e929-178eaceaec48\u0026t=cb7655a2-41de-59ab-d547-acde3855b7de\u0026l=27):\r\n\r\n```\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at System.RuntimeTypeHandle.RegisterCollectibleTypeDependency(System.RuntimeType, System.Reflection.RuntimeAssembly)\r\n   at System.Reflection.TypeNameParser.GetTypeReferencedByCustomAttribute(System.String, System.Reflection.RuntimeModule)\r\n   at System.Reflection.CustomAttributeTypedArgument..ctor(System.Reflection.RuntimeModule, System.Reflection.CustomAttributeEncodedArgument)\r\n   at System.Reflection.RuntimeCustomAttributeData.get_ConstructorArguments()\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.GetDynamicallyAccessedMemberTypes(System.Type)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.ValidateTrimmingAnnotations(System.Type, System.Type[], System.Type, System.Type[])\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.Populate()\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider..ctor(System.Collections.Generic.ICollection`1\u003cMicrosoft.Extensions.DependencyInjection.ServiceDescriptor\u003e, Microsoft.Extensions.DependencyInjection.ServiceProviderOptions)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceProviderOptions)\r\n   at Microsoft.Extensions.Hosting.HostApplicationBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.Build()\r\n   at Program.\u003cMain\u003e$(System.String[])\r\n```\r\n\r\n### Minimal Repro instructions\r\n\r\n0. Using a recent .NET 8 SDK\r\n1. `dotnet publish` the following app:\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cPublishSingleFile\u003etrue\u003c/PublishSingleFile\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cFrameworkReference Update=\"Microsoft.NETCore.App\"\r\n                        RuntimeFrameworkVersion=\"8.0.0-preview.4.23181.16\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n```C#\r\nusing System.Diagnostics.CodeAnalysis;\r\nusing System.Reflection;\r\n\r\nConsole.WriteLine(GetDynamicallyAccessedMemberTypes(typeof(MyGenericType\u003c\u003e).GetGenericArguments()[0]));\r\n\r\nstatic DynamicallyAccessedMemberTypes GetDynamicallyAccessedMemberTypes(Type serviceGenericType)\r\n{\r\n    foreach (CustomAttributeData attributeData in serviceGenericType.GetCustomAttributesData())\r\n    {\r\n        if (attributeData.AttributeType.FullName == \"System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute\" \u0026\u0026\r\n            attributeData.ConstructorArguments.Count == 1 \u0026\u0026\r\n            attributeData.ConstructorArguments[0].ArgumentType.FullName == \"System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes\")\r\n        {\r\n            return (DynamicallyAccessedMemberTypes)(int)attributeData.ConstructorArguments[0].Value!;\r\n        }\r\n    }\r\n\r\n    return DynamicallyAccessedMemberTypes.None;\r\n}\r\n\r\ninternal class MyGenericType\u003c[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.All)] T1\u003e\r\n{\r\n}\r\n```\r\n2. `.\\bin\\Release\\net8.0\\win-x64\\publish\\Net8Console.exe`\r\n\r\n### Original Repro instructions\r\n\r\n0. Using a recent .NET 8 SDK\r\n1. `git clone https://github.com/aspnet/Benchmarks`\r\n3. `cd benchmarks\\src\\BenchmarksApps\\BasicMinimalApi`\r\n4. Edit the `BasicMinimalApi.csproj` to ensure you are using a recent runtime version (I know that recent SDKs don\u0027t have the latest runtime currently):\r\n\r\n```xml\r\n  \u003cItemGroup\u003e\r\n    \u003cFrameworkReference Update=\"Microsoft.NETCore.App\"\r\n                        RuntimeFrameworkVersion=\"8.0.0-preview.4.23181.16\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n```\r\n5. `dotnet publish /p:PublishTrimmed=true /p:PublishReadyToRun=true /p:PublishSingleFile=true /p:TrimMode=full /p:EnableRequestDelegateGenerator=true`\r\n6. `bin\\Release\\net8.0\\win-x64\\publish\\BasicMinimalApi.exe`\r\n\r\n### Expected result\r\n\r\nThe app should run successfully\r\n\r\n### Actual result\r\n\r\nThe above exception crashes the app\r\n\r\n### Notes\r\n\r\nFrom looking at the last passing run to the first failing run, this appears to start occurring between https://github.com/dotnet/runtime/compare/60b4804...390c2d5df324139c716c12bedf5a8dee737fe994.\r\n\r\nLooking through the commit list above I believe this is caused by https://github.com/dotnet/runtime/pull/84159, since that change deleted the unmanged TypeNameParser and the exception stacktrace contains `System.Reflection.TypeNameParser.GetTypeReferencedByCustomAttribute`. But I haven\u0027t verified that is the reason for this failure.\r\n\r\ncc @jkotas @AaronRobinsonMSFT ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhFaLuw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ZSXGK",
                                           "createdAt":  "2023-04-05T19:07:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI\u0027m seeing the following exception from the [ASP.NET benchmarks for PublishTrimmed/ReadyToRun/SingleFile](https://dev.azure.com/dnceng/internal/_build/results?buildId=2148731\u0026view=logs\u0026j=07114bf0-0ae8-5455-e929-178eaceaec48\u0026t=cb7655a2-41de-59ab-d547-acde3855b7de\u0026l=27):\r\n\r\n```\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at System.RuntimeTypeHandle.RegisterCollectibleTypeDependency(System.RuntimeType, System.Reflection.RuntimeAssembly)\r\n   at System.Reflection.TypeNameParser.GetTypeReferencedByCustomAttribute(System.String, System.Reflection.RuntimeModule)\r\n   at System.Reflection.CustomAttributeTypedArgument..ctor(System.Reflection.RuntimeModule, System.Reflection.CustomAttributeEncodedArgument)\r\n   at System.Reflection.RuntimeCustomAttributeData.get_ConstructorArguments()\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.GetDynamicallyAccessedMemberTypes(System.Type)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.ValidateTrimmingAnnotations(System.Type, System.Type[], System.Type, System.Type[])\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.Populate()\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider..ctor(System.Collections.Generic.ICollection`1\u003cMicrosoft.Extensions.DependencyInjection.ServiceDescriptor\u003e, Microsoft.Extensions.DependencyInjection.ServiceProviderOptions)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceProviderOptions)\r\n   at Microsoft.Extensions.Hosting.HostApplicationBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.Build()\r\n   at Program.\u003cMain\u003e$(System.String[])\r\n```\r\n\r\n### Repro instructions\r\n\r\n0. Using a recent .NET 8 SDK\r\n1. `git clone https://github.com/aspnet/Benchmarks`\r\n2. `cd benchmarks\\src\\BenchmarksApps\\BasicMinimalApi`\r\n3. Edit the `BasicMinimalApi.csproj` to ensure you are using a recent runtime version (I know that recent SDKs don\u0027t have the latest runtime currently):\r\n\r\n```xml\r\n  \u003cItemGroup\u003e\r\n    \u003cFrameworkReference Update=\"Microsoft.NETCore.App\"\r\n                        RuntimeFrameworkVersion=\"8.0.0-preview.4.23181.16\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n```\r\n4. `dotnet publish /p:PublishTrimmed=true /p:PublishReadyToRun=true /p:PublishSingleFile=true /p:TrimMode=full /p:EnableRequestDelegateGenerator=true`\r\n5. `bin\\Release\\net8.0\\win-x64\\publish\\BasicMinimalApi.exe`\r\n\r\n### Expected result\r\n\r\nThe app should run successfully\r\n\r\n### Actual result\r\n\r\nThe above exception crashes the app\r\n\r\n### Notes\r\n\r\nFrom looking at the last passing run to the first failing run, this appears to start occurring between https://github.com/dotnet/runtime/compare/60b4804...390c2d5df324139c716c12bedf5a8dee737fe994.\r\n\r\nLooking through the commit list above I believe this is caused by https://github.com/dotnet/runtime/pull/84159, since that change deleted the unmanged TypeNameParser and the exception stacktrace contains `System.Reflection.TypeNameParser.GetTypeReferencedByCustomAttribute`. But I haven\u0027t verified that is the reason for this failure.\r\n\r\ncc @jkotas @AaronRobinsonMSFT \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-05T19:07:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZSYtf",
                                           "createdAt":  "2023-04-05T19:14:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "After doing some tweaks to the repro steps, this issue still exists if I do:\r\n\r\n`dotnet publish /p:PublishTrimmed=true /p:PublishSingleFile=true /p:TrimMode=full /p:EnableRequestDelegateGenerator=true`\r\n\r\nbut it no longer happens when I do:\r\n\r\n`dotnet publish /p:PublishTrimmed=true /p:TrimMode=full /p:EnableRequestDelegateGenerator=true --sc`\r\n\r\nSo it doesn\u0027t appear to be a ReadyToRun issue. But appears to be a combination of `PublishTrimmed` and `PublishSingleFile`. Looking at the stacktrace, `PublishTrimmed` is necessary because `Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.ValidateTrimmingAnnotations` only happens in publish trimmed apps. So the minimal repro might be calling `CustomAttributeData.ConstructorArguments` in a PublishSingleFile app. I\u0027ve updated the top comment for the minimal app I can make that repros this issue.",
                                           "updatedAt":  "2023-04-05T19:48:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZTDQX",
                                           "createdAt":  "2023-04-05T21:11:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "```\r\n \u003cFrameworkReference Update=\"Microsoft.NETCore.App\"\r\n                        RuntimeFrameworkVersion=\"8.0.0-preview.4.23181.16\" /\u003e\r\n```\r\n\r\nThis creates version mismatch. It upgrades the reference to the runtime pack, but not to the apphost pack. Single file apphost in apphost pack contains the build of the whole runtime. It means that we end up using new CoreLib with old runtime that results into this crash.\r\n\r\nIt does not repro with `PublishSingleFile=false` since the runtime and Corelib both come from the runtime pack and there is no mismatch.",
                                           "updatedAt":  "2023-04-05T21:13:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZTD5V",
                                           "createdAt":  "2023-04-05T21:13:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI\u0027m seeing the following exception from the [ASP.NET benchmarks for PublishTrimmed/ReadyToRun/SingleFile](https://dev.azure.com/dnceng/internal/_build/results?buildId=2148731\u0026view=logs\u0026j=07114bf0-0ae8-5455-e929-178eaceaec48\u0026t=cb7655a2-41de-59ab-d547-acde3855b7de\u0026l=27):\r\n\r\n```\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at System.RuntimeTypeHandle.RegisterCollectibleTypeDependency(System.RuntimeType, System.Reflection.RuntimeAssembly)\r\n   at System.Reflection.TypeNameParser.GetTypeReferencedByCustomAttribute(System.String, System.Reflection.RuntimeModule)\r\n   at System.Reflection.CustomAttributeTypedArgument..ctor(System.Reflection.RuntimeModule, System.Reflection.CustomAttributeEncodedArgument)\r\n   at System.Reflection.RuntimeCustomAttributeData.get_ConstructorArguments()\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.GetDynamicallyAccessedMemberTypes(System.Type)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.ValidateTrimmingAnnotations(System.Type, System.Type[], System.Type, System.Type[])\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.Populate()\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider..ctor(System.Collections.Generic.ICollection`1\u003cMicrosoft.Extensions.DependencyInjection.ServiceDescriptor\u003e, Microsoft.Extensions.DependencyInjection.ServiceProviderOptions)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceProviderOptions)\r\n   at Microsoft.Extensions.Hosting.HostApplicationBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.Build()\r\n   at Program.\u003cMain\u003e$(System.String[])\r\n```\r\n\r\n### Minimal Repro instructions\r\n\r\n0. Using a recent .NET 8 SDK\r\n1. `dotnet publish` the following app:\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cPublishSingleFile\u003etrue\u003c/PublishSingleFile\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cFrameworkReference Update=\"Microsoft.NETCore.App\"\r\n                        RuntimeFrameworkVersion=\"8.0.0-preview.4.23181.16\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n```C#\r\nusing System.Diagnostics.CodeAnalysis;\r\nusing System.Reflection;\r\n\r\nConsole.WriteLine(GetDynamicallyAccessedMemberTypes(typeof(MyGenericType\u003c\u003e).GetGenericArguments()[0]));\r\n\r\nstatic DynamicallyAccessedMemberTypes GetDynamicallyAccessedMemberTypes(Type serviceGenericType)\r\n{\r\n    foreach (CustomAttributeData attributeData in serviceGenericType.GetCustomAttributesData())\r\n    {\r\n        if (attributeData.AttributeType.FullName == \"System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute\" \u0026\u0026\r\n            attributeData.ConstructorArguments.Count == 1 \u0026\u0026\r\n            attributeData.ConstructorArguments[0].ArgumentType.FullName == \"System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes\")\r\n        {\r\n            return (DynamicallyAccessedMemberTypes)(int)attributeData.ConstructorArguments[0].Value!;\r\n        }\r\n    }\r\n\r\n    return DynamicallyAccessedMemberTypes.None;\r\n}\r\n\r\ninternal class MyGenericType\u003c[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.All)] T1\u003e\r\n{\r\n}\r\n```\r\n2. `.\\bin\\Release\\net8.0\\win-x64\\publish\\Net8Console.exe`\r\n\r\n### Original Repro instructions\r\n\r\n0. Using a recent .NET 8 SDK\r\n1. `git clone https://github.com/aspnet/Benchmarks`\r\n3. `cd benchmarks\\src\\BenchmarksApps\\BasicMinimalApi`\r\n4. Edit the `BasicMinimalApi.csproj` to ensure you are using a recent runtime version (I know that recent SDKs don\u0027t have the latest runtime currently):\r\n\r\n```xml\r\n  \u003cItemGroup\u003e\r\n    \u003cFrameworkReference Update=\"Microsoft.NETCore.App\"\r\n                        RuntimeFrameworkVersion=\"8.0.0-preview.4.23181.16\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n```\r\n5. `dotnet publish /p:PublishTrimmed=true /p:PublishReadyToRun=true /p:PublishSingleFile=true /p:TrimMode=full /p:EnableRequestDelegateGenerator=true`\r\n6. `bin\\Release\\net8.0\\win-x64\\publish\\BasicMinimalApi.exe`\r\n\r\n### Expected result\r\n\r\nThe app should run successfully\r\n\r\n### Actual result\r\n\r\nThe above exception crashes the app\r\n\r\n### Notes\r\n\r\nFrom looking at the last passing run to the first failing run, this appears to start occurring between https://github.com/dotnet/runtime/compare/60b4804...390c2d5df324139c716c12bedf5a8dee737fe994.\r\n\r\nLooking through the commit list above I believe this is caused by https://github.com/dotnet/runtime/pull/84159, since that change deleted the unmanged TypeNameParser and the exception stacktrace contains `System.Reflection.TypeNameParser.GetTypeReferencedByCustomAttribute`. But I haven\u0027t verified that is the reason for this failure.\r\n\r\ncc @jkotas @AaronRobinsonMSFT \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-VM-coreclr`, `area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-05T21:13:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZTHuO",
                                           "createdAt":  "2023-04-05T21:27:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "FYI @sebastienros - this sounds be an issue with how we run jobs with dotnet/crank.\r\n\r\nWe also have https://github.com/dotnet/runtime/issues/81382 for similar request with NativeAOT.\r\n\r\n@agocke @vitek-karas @sbomer - What is the recommended/supported approach for specifying the Runtime Version explicitly? The crank benchmark infrastructure runs benchmarks on the latest runtime version without waiting for dotnet/runtime to flow all the way to dotnet/installer.\r\n\r\nhttps://github.com/dotnet/crank/blob/ccca37ada2ed270b2b9d4fcda92e21efbccd7c3f/src/Microsoft.Crank.Agent/Startup.cs#L3581-L3614",
                                           "updatedAt":  "2023-04-05T21:27:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZTH-S",
                                           "createdAt":  "2023-04-05T21:29:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5Ur8A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eerhardt",
                                                                               "createdAt":  "2023-04-05T21:29:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We do have documentation for how to use daily runtime packages at https://github.com/dotnet/runtime/blob/main/docs/project/dogfooding.md#option-2-self-contained . Unfortunately, these instructions do not work. Setting `RuntimeFrameworkVersion` updates all packs versions including ASP.NET, but there is no guarantee that the ASP.NET packs of given version exist (they typically do not). These instructions should be updated.",
                                           "updatedAt":  "2023-04-05T21:29:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bhe1K",
                                           "createdAt":  "2023-05-04T22:53:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "I\u0027m not sure what the right answer is here. I think `RuntimeFrameworkVersion` is ideally the right name -- and I would not expect it to alter the ASP.NET version. But it seems like that would be a breaking change now.\r\n\r\nIs introducing a new `NetRuntimeFrameworkVersion` property the right answer?",
                                           "updatedAt":  "2023-05-04T22:53:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bhf_L",
                                           "createdAt":  "2023-05-04T23:00:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "\u003e But it seems like that would be a breaking change now.\r\n\r\nYeah, and it sounds like the current behavior was intentional, based on https://github.com/dotnet/sdk/issues/2792.\r\n\r\n@dsplaisted might have opinions on the naming or the approach.",
                                           "updatedAt":  "2023-05-04T23:00:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bhp8B",
                                           "createdAt":  "2023-05-05T00:13:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Bike-shedding on the name. Maybe \r\n\r\n* `$(MicrosoftNETCoreAppVersion)`\r\n* `$(MicrosoftNETCoreAppRuntimeVersion)`\r\n* `$(MicrosoftNETCoreAppFrameworkVersion)`\r\n* `$(MicrosoftNETCoreAppRuntimeFrameworkVersion)`\r\n\r\nThe first 2 seem like good names, but they are already used inside dotnet repos. So maybe we don\u0027t want to pick ones that are already used?\r\n",
                                           "updatedAt":  "2023-05-05T00:13:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bhq-1",
                                           "createdAt":  "2023-05-05T00:21:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "It\u0027s explicitly not just netcore app though -- it\u0027s also the host, and the Microsoft.DotNet.ILCompiler package.",
                                           "updatedAt":  "2023-05-05T00:21:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bhvaI",
                                           "createdAt":  "2023-05-05T01:01:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "the problem is much broader than this if you consider workloads which have similar version grouping problems (a compiler, other tasks, sdk packs)",
                                           "updatedAt":  "2023-05-05T01:01:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5biB6C",
                                           "createdAt":  "2023-05-05T03:14:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Instead of or in addition to creating new properties, we may want to document how to use the existing mechanisms to override default packs versions:\r\n\r\nFor example, I use this snippet when I want to compile a test app against my local netcoreapp ref pack and native aot publish it with my local native AOT pack:\r\n```\r\n  \u003cItemGroup\u003e\r\n    \u003cKnownFrameworkReference Update=\"Microsoft.NETCore.App\"\u003e\r\n      \u003cTargetingPackVersion\u003e8.0.0-dev\u003c/TargetingPackVersion\u003e\r\n    \u003c/KnownFrameworkReference\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cKnownILCompilerPack Update=\"Microsoft.DotNet.ILCompiler\"\u003e\r\n      \u003cILCompilerPackVersion\u003e8.0.0-dev\u003c/ILCompilerPackVersion\u003e\r\n    \u003c/KnownILCompilerPack\u003e\r\n  \u003c/ItemGroup\u003e\r\n```",
                                           "updatedAt":  "2023-05-05T03:14:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bk4y6",
                                           "createdAt":  "2023-05-05T15:04:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e It\u0027s explicitly not just netcore app though -- it\u0027s also the host, and the Microsoft.DotNet.ILCompiler package.\r\n\r\nTo a \"normal\" dev (someone outside of dotnet/runtime), all of those things are part of `Microsoft.NETCore.App`, i.e. the runtime\u0027s shared framework. They are all built in the dotnet/runtime\u0027s official build.\r\n\r\nMaybe this doesn\u0027t need to be an \"officially\" supported property, it really is for daily builds, which I don\u0027t think normal customers need to worry about.\r\n\r\nSo maybe calling it something that is tied to the repo\u0027s name would work.\r\n\r\n\u003e Instead of or in addition to creating new properties, we may want to document how to use the existing mechanisms to override default packs versions:\r\n\r\nI think documenting is a good idea. But I don\u0027t think it solves the problem because it is error prone. I need to know what kind of project is being built to know which snippet I need. For example, if I `PublishSingleFile=true`, I need a different snippet than above. And if I `PublishTrimmed=true`, I need yet another snippet. It makes it hard for a tool (like dotnet/crank) to figure out what to inject into the project. Where if we just had a single property, it makes it really hard to get it wrong.",
                                           "updatedAt":  "2023-05-05T15:04:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5blCiV",
                                           "createdAt":  "2023-05-05T15:36:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e it really is for daily builds\r\n\r\nThe daily build problem is going to be solved by switching to unified build in .NET 9. There is going to be official daily build from dotnet/dotnet that has everything (runtime, ASP.NET, SDK) with all same versions.",
                                           "updatedAt":  "2023-05-05T15:36:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5blbWR",
                                           "createdAt":  "2023-05-05T17:02:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "How are tests going to work in that world? We will still have the same problem - there will be an SDK (with a runtime version) used for building ASP.NET. And there will be a separate runtime that ASP.NET is building against. When we run our tests, we will need our tests to run with the runtime that ASP.NET is built against, and not the runtime that came with the SDK.\r\n",
                                           "updatedAt":  "2023-05-05T17:02:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5blidS",
                                           "createdAt":  "2023-05-05T17:31:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "I would expect that you will set `RuntimeFrameworkVersion` to the latest daily build version (the daily build is going to have all packs with given version available so they will restore fine) and then you add the local ASP.NET projects or packages that you want to test.",
                                           "updatedAt":  "2023-05-05T17:32:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5blkEA",
                                           "createdAt":  "2023-05-05T17:38:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "So we couldn\u0027t run these ASP.NET tests until after the full daily build (including Windows.Desktop, SDK, etc) is done?",
                                           "updatedAt":  "2023-05-05T17:38:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5blpu8",
                                           "createdAt":  "2023-05-05T18:02:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7Mhbw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "agocke",
                                                                               "createdAt":  "2023-05-05T18:42:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "In the unified build plan, there is just one official build that lives in dotnet/dotnet.\r\n- If you want to run the tests against official build, you need to wait for dotnet/dotnet build. There is no other official build.\r\n- If you want to run the tests against official build + locally built ASP.NET bits replaced, you will add your own locally built ASP.NET projects or packages. For example, this will be the flow for ASP.NET CI.\r\n- If you want to run the tests against locally built runtime + locally build ASP.NET + ..., I expect that the preferred workflow for that will be to apply everything onto dotnet/dotnet, create a local build of dotnet/dotnet, and run the tests against that.",
                                           "updatedAt":  "2023-05-05T18:02:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bly62",
                                           "createdAt":  "2023-05-05T18:41:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "I agree with Jan, that seems like a simpler model. In particular,\r\n\r\n\u003e To a \"normal\" dev (someone outside of dotnet/runtime), all of those things are part of Microsoft.NETCore.App,\r\n\r\nI think that\u0027s incorrect -- to a \"normal\" dev, I think all these things are part of the .NET SDK that they download. They have no idea about our internal package divisions. Using a \"nightly\" build of the SDK, or a property that we tell them is equivalent to using a \"nightly\" build of the SDK, is a simple concept that most developers will probably understand and be able to use easily.\r\n",
                                           "updatedAt":  "2023-05-05T18:41:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hrjWH",
                                           "createdAt":  "2023-07-17T20:15:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI\u0027m seeing the following exception from the [ASP.NET benchmarks for PublishTrimmed/ReadyToRun/SingleFile](https://dev.azure.com/dnceng/internal/_build/results?buildId=2148731\u0026view=logs\u0026j=07114bf0-0ae8-5455-e929-178eaceaec48\u0026t=cb7655a2-41de-59ab-d547-acde3855b7de\u0026l=27):\r\n\r\n```\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at System.RuntimeTypeHandle.RegisterCollectibleTypeDependency(System.RuntimeType, System.Reflection.RuntimeAssembly)\r\n   at System.Reflection.TypeNameParser.GetTypeReferencedByCustomAttribute(System.String, System.Reflection.RuntimeModule)\r\n   at System.Reflection.CustomAttributeTypedArgument..ctor(System.Reflection.RuntimeModule, System.Reflection.CustomAttributeEncodedArgument)\r\n   at System.Reflection.RuntimeCustomAttributeData.get_ConstructorArguments()\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.GetDynamicallyAccessedMemberTypes(System.Type)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.ValidateTrimmingAnnotations(System.Type, System.Type[], System.Type, System.Type[])\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.Populate()\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider..ctor(System.Collections.Generic.ICollection`1\u003cMicrosoft.Extensions.DependencyInjection.ServiceDescriptor\u003e, Microsoft.Extensions.DependencyInjection.ServiceProviderOptions)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceProviderOptions)\r\n   at Microsoft.Extensions.Hosting.HostApplicationBuilder.Build()\r\n   at Microsoft.AspNetCore.Builder.WebApplicationBuilder.Build()\r\n   at Program.\u003cMain\u003e$(System.String[])\r\n```\r\n\r\n### Minimal Repro instructions\r\n\r\n0. Using a recent .NET 8 SDK\r\n1. `dotnet publish` the following app:\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cPublishSingleFile\u003etrue\u003c/PublishSingleFile\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cFrameworkReference Update=\"Microsoft.NETCore.App\"\r\n                        RuntimeFrameworkVersion=\"8.0.0-preview.4.23181.16\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n```C#\r\nusing System.Diagnostics.CodeAnalysis;\r\nusing System.Reflection;\r\n\r\nConsole.WriteLine(GetDynamicallyAccessedMemberTypes(typeof(MyGenericType\u003c\u003e).GetGenericArguments()[0]));\r\n\r\nstatic DynamicallyAccessedMemberTypes GetDynamicallyAccessedMemberTypes(Type serviceGenericType)\r\n{\r\n    foreach (CustomAttributeData attributeData in serviceGenericType.GetCustomAttributesData())\r\n    {\r\n        if (attributeData.AttributeType.FullName == \"System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute\" \u0026\u0026\r\n            attributeData.ConstructorArguments.Count == 1 \u0026\u0026\r\n            attributeData.ConstructorArguments[0].ArgumentType.FullName == \"System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes\")\r\n        {\r\n            return (DynamicallyAccessedMemberTypes)(int)attributeData.ConstructorArguments[0].Value!;\r\n        }\r\n    }\r\n\r\n    return DynamicallyAccessedMemberTypes.None;\r\n}\r\n\r\ninternal class MyGenericType\u003c[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.All)] T1\u003e\r\n{\r\n}\r\n```\r\n2. `.\\bin\\Release\\net8.0\\win-x64\\publish\\Net8Console.exe`\r\n\r\n### Original Repro instructions\r\n\r\n0. Using a recent .NET 8 SDK\r\n1. `git clone https://github.com/aspnet/Benchmarks`\r\n3. `cd benchmarks\\src\\BenchmarksApps\\BasicMinimalApi`\r\n4. Edit the `BasicMinimalApi.csproj` to ensure you are using a recent runtime version (I know that recent SDKs don\u0027t have the latest runtime currently):\r\n\r\n```xml\r\n  \u003cItemGroup\u003e\r\n    \u003cFrameworkReference Update=\"Microsoft.NETCore.App\"\r\n                        RuntimeFrameworkVersion=\"8.0.0-preview.4.23181.16\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n```\r\n5. `dotnet publish /p:PublishTrimmed=true /p:PublishReadyToRun=true /p:PublishSingleFile=true /p:TrimMode=full /p:EnableRequestDelegateGenerator=true`\r\n6. `bin\\Release\\net8.0\\win-x64\\publish\\BasicMinimalApi.exe`\r\n\r\n### Expected result\r\n\r\nThe app should run successfully\r\n\r\n### Actual result\r\n\r\nThe above exception crashes the app\r\n\r\n### Notes\r\n\r\nFrom looking at the last passing run to the first failing run, this appears to start occurring between https://github.com/dotnet/runtime/compare/60b4804...390c2d5df324139c716c12bedf5a8dee737fe994.\r\n\r\nLooking through the commit list above I believe this is caused by https://github.com/dotnet/runtime/pull/84159, since that change deleted the unmanged TypeNameParser and the exception stacktrace contains `System.Reflection.TypeNameParser.GetTypeReferencedByCustomAttribute`. But I haven\u0027t verified that is the reason for this failure.\r\n\r\ncc @jkotas @AaronRobinsonMSFT \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-17T20:15:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EVou7",
                                           "createdAt":  "2024-07-10T11:25:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-10T11:25:21Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "How to publish an app using daily runtime packages?",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91202",
        "createdAt":  "2023-08-28T11:35:21Z",
        "number":  91202,
        "author":  "nietras",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCzda-Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xoofx",
                                            "createdAt":  "2023-08-28T13:30:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "D0ctorWh0",
                                            "createdAt":  "2023-10-20T21:32:11Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-01-30T05:27:36Z",
        "body":  "In https://github.com/dotnet/runtime/discussions/90915 I asked and answered how one can use the existing single file bundling to embed other digital assets without self-extraction. This necessitated quite a bit of hacking not least modifying the bundle manifest after the single file is created. It would be great if this experience could be improved as also discussed and repeated below here.\r\n\r\n---\r\n\r\nEmbedding assets into managed assemblies simply isn\u0027t usable. Consider ML and other cases where one has very large digital assets. This will only become more common. We need support for it. And all the pieces are there with the single file publishing and only a few things would be needed to allow using it for that e.g.\r\n\r\n  * Add optional `SelfExtract` metadata to `FilesToBundle` items to allow overriding whether a given specific file should self-extracted (overrides any defaults)\r\n  * Add optional `Compress` metadata to `FilesToBundle` items to allow overriding whether a given specific file should be compressed or not (overrides any defaults)\r\n  * Allow embedding any kind of file disregarding hard-coded rules for which files and `IncludeAllContentForSelfExtract` perhaps via some other option `IncludeAllContent`. \r\n\r\nIn general it would be nice if there was a bit more flexibility around this. I\u0027m fine with the bundle probe delegate, as this is for advanced usage, but at least it would be nice if this does not actively try to not make this feasible and allow embedding/bundling whatever we want.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZX38ZA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5lD9w4",
                                           "createdAt":  "2023-08-28T11:35:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIn https://github.com/dotnet/runtime/discussions/90915 I asked and answered how one can use the existing single file bundling to embed other digital assets without self-extraction. This necessitated quite a bit of hacking not least modifying the bundle manifest after the single file is created. It would be great if this experience could be improved as also discussed and repeated below here.\r\n\r\n---\r\n\r\nEmbedding assets into managed assemblies simply isn\u0027t usable. Consider ML and other cases where one has very large digital assets. This will only become more common. We need support for it. And all the pieces are there with the single file publishing and only a few things would be needed to allow using it for that e.g.\r\n\r\n  * Add optional `SelfExtract` metadata to `FilesToBundle` items to allow overriding whether a given specific file should self-extracted (overrides any defaults)\r\n  * Add optional `Compress` metadata to `FilesToBundle` items to allow overriding whether a given specific file should be compressed or not (overrides any defaults)\r\n  * Allow embedding any kind of file disregarding hard-coded rules for which files and `IncludeAllContentForSelfExtract` perhaps via some other option `IncludeAllContent`. \r\n\r\nIn general it would be nice if there was a bit more flexibility around this. I\u0027m fine with the bundle probe delegate, as this is for advanced usage, but at least it would be nice if this does not actively try to not make this feasible and allow embedding/bundling whatever we want.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003enietras\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-28T11:35:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lffxk",
                                           "createdAt":  "2023-09-01T13:31:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Could you please describe what the scenario for this is? We can make the MSBuild/bundler more flexible, but if there\u0027s no runtime side changes it doesn\u0027t help much. Relying on the host/runtime contract the way your solution does is not something we should promote to developers, it\u0027s just too fragile.\r\n\r\nSome general comments:\r\n\r\nSingle-file is not meant as a replacement for installers - and we\u0027re unlikely to invest into features which are only useful for that type of scenario. The place where we see value in it are things like command line tools and other \"Run tool by starting the exe by hand\" scenarios.\r\n\r\nBut honestly the main consideration is that adding new capabilities like this should ideally work across most form factors. Embedded resources work regardless if the app is built as single-file, trimmed, AOT, MAUI, or anything else. Adding new capability to embed data into single-file is not going to solve the same problem for NativeAOT apps and so on.\r\n\r\nFor me, the NativeAOT compatibility specifically is something I see as important. The typical use case for single-file also fits very well the use cases for NativeAOT - and I think people will be migrating those scenarios to NativeAOT more and more. The mechanisms used in single-file will not work in NativeAOT, or would require significant changes to make them work.\r\n\r\n/cc @elinor-fung ",
                                           "updatedAt":  "2023-09-01T13:31:11Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Improve single file publish to allow embedding of other digital assets without self-extraction",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112584",
        "createdAt":  "2024-01-29T20:46:27Z",
        "number":  112584,
        "author":  "lmtthws",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODGhBDQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "n00j",
                                            "createdAt":  "2025-02-19T19:06:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2025-07-10T15:11:28Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-04-28T18:17:43Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\n\r\nThe general problem: I am trying to use `dotnet-dump` and a debugger (e.g. `vsdbg` but this holds for `netcoredbg` too) targeting a self-contained, single file application. However, `dotnet-dump` and `vsdbg` both require specific runtime files in the directory of the target process\u0027s single file in order to function, but those files are not included in a single-file publish.\r\n\r\nMore specifically, I was looking to use the diagnostic tools (all of them, including dotnet-dump) and the debugger in an ephemeral container in Kubernetes to target a .NET application which was running in a container built off the new chiseled images. I have the ephemeral container with these tools working now, but I need to copy in three runtime files (`libmscordbi.so` and `libmscordaccore.so` for `vsdbg` and `createdump` for `dotnet-dump`) to the target image at build-time after the publish completes in order for the tools to be able to function (I also have to symlink the diagnostic socket and CLR pipes, run as the target process user for any of the diagnostic tools, and have the SYS_PTRACE capability for dotnet-dump and vsdbg to work - noting for completeness, though I don\u0027t think it affects this request). \r\n\r\nIf `createdump` is not present, I get an error `Write dump failed - HRESULT: 0x00000000.` for `dotnet-dump`.\r\n\r\nIf the libmscordbi.so and libmscordaccore.so files are not present, `vsdbg` will output `Unknown error: 0x80131c4f`.\r\n\r\nFrom what I can glean, when publishing a self-contained, single file application for `linux-x64` on .NET 6.0.26, the runtime files libmscordbo.so, libmscordaccore.so, and createdump are all configured with the `DropFromSingleFile` property set to true in the `microsoft.netcore.app.runtime.linux-x64` package\u0027s `RuntimeList.xml file`. This results in them getting excluded during the [ComputeResolvedFilesToPublishList target][tgt-compute-resolved] populating the `ResolvedFileToPublish` property (with the `ResolveRuntimePackAssets` target and its eponymous task responsible for reading the RuntimeList.xml file coming in as a dependency of the `ComputeResolvedFilesToPublishList` target).\r\n\r\nIn any case, there doesn\u0027t seem to be any way to adjust this behavior via MS Build properties at the command line. I could probably add a custom target and modify the `ResolvedFileToPublish` property to work around this, but it\u0027d be nice if there was a property I could set to opt into including those files when doing a self-contained single file publish rather than have every repository incorporate a new custom target..\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nThe approach I was thinking was adding a separate property to the RuntimeList.xml file, something like `IsDiagnosticSupport`. That could be used to flag files which we know are needed for the diagnostic tools. The `ResolveRuntimePackAssets` task would be updated to understand that, and then `ComputeResolvedFilesToPublishList` could consider whether another property, `IncludeDiagnosticSupportNativeFiles`, is set and then add any files from the runtime list (`ResolvePackAsset` property) which have `IsDiagnosticSupport` set to true back to the `ResolvedFileToPublish` property with their `ExcludeFromSingleFile` property set to true (so they are included in the publish but not in the single file itself). \r\n\r\nI\u0027d be fine with most any solution that lets me control this at the command line using one or more properties.\r\n\r\n### Additional context\r\n\r\nI spot checked the .NET 8.0.1  linux-x64 runtime package, and this looks to still be the case.\r\n\r\nI wasn\u0027t sure whether to file this to the Runtime, who presumably own the NuGet package and the RuntimeList.xml file, or here since this repo owns the target which owns the task and targets and consumes the property value. \r\n\r\n[tgt-compute-resolved]: \r\n    https://github.com/dotnet/sdk/blob/1a71d521b90af7045c93baa331f5c45fe3d91c69/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L575",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnpBxnw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ekGaV",
                                           "createdAt":  "2025-02-14T00:16:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MiYanni",
                                           "body":  "@marcpopMSFT I can\u0027t seem to transfer this to https://github.com/dotnet/diagnostics as they own the `dotnet-dump` package. Any help?",
                                           "updatedAt":  "2025-02-14T00:16:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ekGaY",
                                           "createdAt":  "2025-02-14T20:41:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marcpopMSFT",
                                           "body":  "I can\u0027t either. @hoyosjs do you have permissions?",
                                           "updatedAt":  "2025-02-14T20:41:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ekGac",
                                           "createdAt":  "2025-02-14T21:02:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "This is more a known limitation of singlefile (debugging it part) and not of the tool. I thought this should be unblocked by now though with https://github.com/dotnet/runtime/commit/bc1175382857c4af11c27b3134fd22dc8377dfb5 which is in 8.0. I\u0027ll move to runtime for triage. @dotnet/dotnet-diag @mikem8361 ",
                                           "updatedAt":  "2025-02-14T21:02:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ekGiT",
                                           "createdAt":  "2025-02-14T21:02:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-14T21:02:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ekHGf",
                                           "createdAt":  "2025-02-14T21:04:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@marcpopMSFT That being said - there is a request here that\u0027s for the SDK repo but I don\u0027t know who owns the scenario - one that asks to deploy diagnostic binaries alongside the app. This shouldn\u0027t be necessary for non-sourcebuild builds though. ",
                                           "updatedAt":  "2025-02-14T21:04:26Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Add property to include libmscordbi.so, libmscordaccore.so, and createdump when publishing self-contained, single file applications",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99082",
        "createdAt":  "2024-02-28T21:04:52Z",
        "number":  99082,
        "author":  "brianrob",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-22T21:15:21Z",
        "body":  "### Description\n\nR2R symbols for code contained in a single file exe cannot be resolved by native profilers (e.g. Visual Studio, WPA, PerfView).  This is because the single file exe only points to singlefilehost.pdb.  This allows for the native runtime symbols to be resolved, but no managed code R2R symbols.\n\n### Reproduction Steps\n\n1. Build a single file exe with R2R enabled.  (Disabling TieredCompilation will make the repro easier.)\r\n2. Take a PerfView profile of the single file exe running.\r\n3. Load the profile in PerfView and open the single file exe process\u0027s CPU stacks.\r\n4. Attempt to resolve symbols for any R2R code.  If TieredCompilation=false, then this is all managed code.\n\n### Expected behavior\n\nR2R symbols are resolvable.\n\n### Actual behavior\n\nR2R symbols cannot be resolved.\n\n### Regression?\n\nNo.\n\n### Known Workarounds\n\n1. Do not compile the single file exe with R2R enabled.\r\n2. If the binary is built with R2R, you can disable it at runtime for profiling by setting `DOTNET_ReadyToRun=0`.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdWqELw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc51aoQv",
                                           "createdAt":  "2024-02-28T21:05:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nR2R symbols for code contained in a single file exe cannot be resolved by native profilers (e.g. Visual Studio, WPA, PerfView).  This is because the single file exe only points to singlefilehost.pdb.  This allows for the native runtime symbols to be resolved, but no managed code R2R symbols.\n\n### Reproduction Steps\n\n1. Build a single file exe with R2R enabled.  (Disabling TieredCompilation will make the repro easier.)\r\n2. Take a PerfView profile of the single file exe running.\r\n3. Load the profile in PerfView and open the single file exe process\u0027s CPU stacks.\r\n4. Attempt to resolve symbols for any R2R code.  If TieredCompilation=false, then this is all managed code.\n\n### Expected behavior\n\nR2R symbols are resolvable.\n\n### Actual behavior\n\nR2R symbols cannot be resolved.\n\n### Regression?\n\nNo.\n\n### Known Workarounds\n\n1. Do not compile the single file exe with R2R enabled.\r\n2. If the binary is built with R2R, you can disable it at runtime for profiling by setting `DOTNET_ReadyToRun=0`.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebrianrob\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-28T21:05:00Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Profiles of Single File Exes Cannot Resolve R2R Symbols",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108270",
        "createdAt":  "2024-09-26T07:48:27Z",
        "number":  108270,
        "author":  "FixBo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODGy-fA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rampaa",
                                            "createdAt":  "2025-07-13T18:25:20Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-11-18T21:23:03Z",
        "body":  "Create app with profile enable\r\n\r\nProfileOptimization.SetProfileRoot(AppDomain.CurrentDomain.BaseDirectory);\r\nProfileOptimization.StartProfile(\"profile\");\r\n\r\nPublish as selfcontained single file\r\n\r\ndotnet publish --sc -p:PublishSingleFile=true\r\n\r\nRun application\r\n\r\nThe \"profile\" is created with a size of only 64 bytes\r\n\r\nAccording to my research, it\u0027s because of this check\r\nhttps://github.com/dotnet/runtime/blob/19da949dbc1e462e8404799b9218754cf571c8d0/src/coreclr/vm/multicorejitplayer.cpp#L452",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlBFBWw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6NvJ_G",
                                           "createdAt":  "2024-09-26T21:13:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-26T21:13:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UEUFb",
                                           "createdAt":  "2024-11-18T21:23:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "\u003e The \"profile\" is created with a size of only 64 bytes\n\u003e According to my research, it\u0027s because of this check\n\nYup, looks likely. At the moment I would say that it\u0027s not supported w/ single-file. I can\u0027t promise we\u0027ll get to this any time soon.",
                                           "updatedAt":  "2024-11-18T21:23:01Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[MulticoreJIT] Single file deployment does not support ProfileOptimization",
        "labels":  [
                       "tenet-performance",
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115365",
        "createdAt":  "2025-05-07T13:30:34Z",
        "number":  115365,
        "author":  "eduherminio",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCPp-A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HighPerfDotNet",
                                            "createdAt":  "2025-05-07T15:33:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichalPetryka",
                                            "createdAt":  "2025-05-07T15:56:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2025-05-11T00:34:02Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-06-02T20:16:41Z",
        "body":  "As described in [Single-file deployment](https://learn.microsoft.com/en-us/dotnet/core/deploying/single-file/overview?tabs=cli):\n\u003e Runtime configuration files, such as *.runtimeconfig.json and *.deps.json, are included in the single file.\n\nAnd as clarified in https://github.com/dotnet/runtime/issues/108814\n\u003e Making single-file respect both its embedded runtime configuration files and a .runtimeconfig.json to it is not something we\u0027ve ever supported\n\nThis is a request to change that, and allow overriding `runtimeconfig.json` properties in single-file apps.\n\nUse case: I want to change GC mode of a single-file app, and I\u0027m restricted to using `DOTNET_gcServer` env var to do so because `runtimeconfig.json` is currently ignored. Same for other GC tweaks.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrHzzOg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6qYzz0",
                                           "createdAt":  "2025-05-07T13:31:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-07T13:31:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sZA5R",
                                           "createdAt":  "2025-05-19T20:53:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "@elinor-fung Would `RuntimeHostConfigurationOption` settings flow into the single-file publish?",
                                           "updatedAt":  "2025-05-19T20:53:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sasds",
                                           "createdAt":  "2025-05-20T01:57:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Yes, `RuntimeHostConfigurationOption` (or the MSBuild properties for the settings that have a specific one) flows into the generated runtime config that gets included in the single-file bundle.\n\n\u003e Use case: I want to change GC mode of a single-file app,\n\n@eduherminio is the desire here that the configuration is set at run time, not build/publish-time?",
                                           "updatedAt":  "2025-05-20T01:57:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sfPM6",
                                           "createdAt":  "2025-05-20T10:40:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eduherminio",
                                           "body":  "\u003e \u003e Use case: I want to change GC mode of a single-file app,\n\u003e \n\u003e @eduherminio is the desire here that the configuration is set at run time, not build/publish-time?\n\nSetting it at runtime so that it overrides whatever it was chosen at publish time.\n\nRight now when server GC is set at publish time (i.e. via `.csproj` property), that cannot be overridden at runtime using `runtimeconfig.json` without re-publishing the single file app.\n",
                                           "updatedAt":  "2025-05-20T10:41:21Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Allow `runtimeconfig.json` override for single file apps",
        "labels":  [
                       "area-Single-File"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116318",
        "createdAt":  "2025-06-04T18:49:19Z",
        "number":  116318,
        "author":  "sebastienros",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-17T18:24:40Z",
        "body":  "With SDK builds taken between 4/8 and 4/10 we noticed a regression in **startup time** for applications published as single files.\n\nEnvironment:\n- This was reproduced only on Windows (Linux is not affected) and can still be consistently. Same machine, Windows Defender disabled on the folder starting the app. Same parent folder between runs, though any AV should happen the same way on both builds.\n- Not specific to a single app\n- Here showing ASP.NET application without DI or middleware (Platform benchmark)\n\nSDK versions:\n10.0.100-preview.4.25207.27\n10.0.100-preview.4.25209.44\n\n![Image](https://github.com/user-attachments/assets/d5c4b35d-55a0-4f00-8532-5a7be01e74e6)\n\nblack: single file\nblue: trimmed\nyellow: aot\npink: self-contained\n\nI have the executables built for the two SDKs. Contact me on Teams if you want them.\n\nCrank command lines for reference:\n\n```bash\ncrank --config https://raw.githubusercontent.com/aspnet/Benchmarks/main/scenarios/platform.benchmarks.yml --scenario json --profile aspnet-citrine-win --application.buildArguments \"/p:PublishReadyToRun=true /p:PublishSingleFile=true\" --application.framework net10.0 --application.options.collectCounters true --load.options.reuseBuild true --application.aspNetCoreVersion 10.0.0-preview.4.25181.4 --application.runtimeVersion 10.0.0-preview.4.25174.9 --application.sdkVersion 10.0.100-preview.4.25207.27 --profile short --application.options.fetch true\n\ncrank --config https://raw.githubusercontent.com/aspnet/Benchmarks/main/scenarios/platform.benchmarks.yml --scenario json --profile aspnet-citrine-win --application.buildArguments \"/p:PublishReadyToRun=true /p:PublishSingleFile=true\" --application.framework net10.0 --application.options.collectCounters true --load.options.reuseBuild true --application.aspNetCoreVersion 10.0.0-preview.4.25208.1 --application.runtimeVersion 10.0.0-preview.4.25209.9 --application.sdkVersion 10.0.100-preview.4.25209.44 --profile short --application.options.fetch true\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOt-G6SA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6vTxDp",
                                           "createdAt":  "2025-06-04T19:29:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Presumably that\u0027s x64, right? (ie. not x86, not arm64)",
                                           "updatedAt":  "2025-06-04T19:29:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vT2ad",
                                           "createdAt":  "2025-06-04T19:31:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVW_ug==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-06-04T19:32:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "@filipnavara In this case INTEL X64 Windows. ",
                                           "updatedAt":  "2025-06-04T19:31:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vT8JT",
                                           "createdAt":  "2025-06-04T19:37:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-04T19:37:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6yXZZO",
                                           "createdAt":  "2025-06-20T18:29:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Slightly narrowed SDK versions:\n- `10.0.100-preview.4.25208.4`: 186ms\n- `10.0.100-preview.4.25208.7`: 512ms\n\n`singlefilehost` is grabbed from the SDK known apphost packs, so that seems to be the version that matters here. Unfortunately, that is still a big range for runtime: `10.0.0-preview.4.25174.9` to `10.0.0-preview.4.25207.7` - https://github.com/dotnet/runtime/compare/659321ff5db13026f52aec70cf2a6692bd4be454...9559b2a8c2961fd72d2e687a2b3f8f148aa33eb5\n\nI haven\u0027t figured out how to get a repro that isn\u0027t the full build and application run through crank though - which presumably I\u0027d need to try any sort of fix.\n\nWhen I unzipped the downloaded applications (from `application.options.fetch`) and then kickoff jobs to just run the executables, I see the same start time for both versions: ~500ms\n\nThis is my config:\n```yml\n\n# crank --config crank-config.yml --scenario json-good --profile aspnet-citrine-win --profile short\n# crank --config crank-config.yml --scenario json-bad --profile aspnet-citrine-win --profile short\n\n# readyStateText, arguments and environmentVariables copied from platformbenchmarks\nplatformbenchmarks-good:\n    source:\n      localFolder: C:\\issues\\perf\\good-25208.4\n    executable: PlatformBenchmarks.exe\n\nplatformbenchmarks-bad:\n    source:\n      localFolder: C:\\issues\\perf\\bad-25208.7\n    executable: PlatformBenchmarks.exe\n\nscenarios:\n  json-good:\n    application:\n      job: platformbenchmarks-good\n\n  json-bad:\n    application:\n      job: platformbenchmarks-bad\n```",
                                           "updatedAt":  "2025-06-20T18:29:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6yXaXb",
                                           "createdAt":  "2025-06-20T18:31:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "I also tried to do a local version of `crank`\u0027s time to `readyStateText` measurement. I also saw the same elapsed times for both the \u0027good\u0027 and \u0027bad\u0027 versions.\n```c#\nusing var process = new Process { StartInfo = startInfo };\nvar stopwatch = new Stopwatch();\nbool found = false;\n\nstring readyText = \"Application started.\";\nprocess.OutputDataReceived += (sender, e) =\u003e\n{\n    if (e.Data != null \u0026\u0026 e.Data.StartsWith(readyText))\n    {\n        stopwatch.Stop();\n        found = true;\n    }\n};\n\nConsole.WriteLine($\"{startInfo.FileName}\");\nstopwatch.Start();\nprocess.Start();\nprocess.BeginOutputReadLine();\nwhile(!found)\n{\n    Thread.Sleep(100);\n}\nprocess.Kill();\nConsole.WriteLine($\"  Start time (ms): {stopwatch.ElapsedMilliseconds}\");\n```",
                                           "updatedAt":  "2025-06-20T18:31:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ytd9l",
                                           "createdAt":  "2025-06-23T23:23:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "I passed `--application.collect true --application.collectStartup true` to get traces (for the full build / run jobs, where this repros). Unfortunately, \u003e70% of the stacks are reported as broken for both traces.\n\n\u003e When I unzipped the downloaded applications (from application.options.fetch) and then kickoff jobs to just run the executables, I see the same start time for both versions: ~500ms\n\nAnother thing to note is that the 500ms from just running the output from the jobs from the base and regressed versions is on par with the reported regressed time when the job is to build/publish and run. It almost seems like a first run thing (single-file does pass assemblies to AMSI), but I\u0027m not sure how that would happen.\n\nLocally, if I try a similar build+run of the `PlatformBenchmarks` project and measure two executions of the output as in https://github.com/dotnet/runtime/issues/116318#issuecomment-2992481755, the first run is ~550ms and the second ~200ms. But I see the same thing for both 25208.4 and 25208.7",
                                           "updatedAt":  "2025-06-23T23:24:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6y7-K_",
                                           "createdAt":  "2025-06-24T22:33:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "@sebastienros Is there any way to make `crank` use/upload a local SDK or patch a file in the one it downloads?\n\nI haven\u0027t been able to figure out a local repro or get traces that aren\u0027t largely broken stacks (they show a difference in blocked time, but the stacks are too broken to see from what), but I think I may have narrowed it down a bit via trying different jobs with `crank`.\n- `PlatformBenchmarks` project with a commit that allows updating the `KnownAppHostPack` 10.0 version (corresponds to the `singlefilehost` that is used)\n- Ran jobs for the `10.0.0-preview.4.25207.7` runtime libraries and `singlefilehost` with the `10.0.100-preview.4.25208.4` and `10.0.100-preview.4.25208.7` SDKs - verified that both were using the `10.0.0-preview.4.25207.7` runtime libraries and `singlefilehost`\n- Saw the start time regression with just the SDK version difference.\n\nThat leaves the SDK itself as the only difference - https://github.com/dotnet/sdk/compare/e378cb054515b35caa979a8d5324b5d2d1bccb8a...d4bbb191a42a38d0ecdb6a1f776cf638db834a35 - the dotnet/runtime update looks like the only interesting change. The only thing I could see that was changed there was `Microsoft.NET.HostModel` in https://github.com/dotnet/runtime/commit/edb0a06dcbfd4344805f1be969b67639c113b02b. That changed to writing out a temporary file for the bundle and then copying over the existing file (instead of updating it in place). I have no idea why that would change the start time on Windows, but it is the one thing I see that is shipped via the SDK and only affect single-file. That behaviour is also going to be changing with https://github.com/dotnet/runtime/pull/116659 (cc @jtschuster)\n\nIf there\u0027s some way to kick off a `crank` job with a local/patched SDK, we could see if `Microsoft.NET.HostModel` is actually the difference in those runs.",
                                           "updatedAt":  "2025-06-24T22:33:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc634bpI",
                                           "createdAt":  "2025-07-17T18:24:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Based on the above, it sounds like this regression may be specific to the startup of a _just created_ app. That is, the first run after the app has just been built. This isn\u0027t as high a priority as the startup time of a shipping application and they don\u0027t necessarily correspond due to differences in signing/virus scanning.",
                                           "updatedAt":  "2025-07-17T18:24:29Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Single file start time regression",
        "labels":  [
                       "os-windows",
                       "tenet-performance",
                       "arch-x64",
                       "area-Single-File"
                   ]
    }
]
