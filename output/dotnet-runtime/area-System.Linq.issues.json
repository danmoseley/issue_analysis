[
    {
        "url":  "https://github.com/dotnet/runtime/issues/14729",
        "createdAt":  "2015-06-17T07:29:57Z",
        "number":  14729,
        "author":  "eatdrinksleepcode",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCC3K7A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2021-11-17T05:48:08Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2021-11-17T05:48:10Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2021-11-01T19:06:50Z",
        "body":  "## Summary\n\nThere are two scenarios where the existing Enumerable OrderBy methods are not ideal:\n- When sorting a sequence of comparable values (e.g. ints). In this case an identify function must be provided as the key selector: `ints.Sort(x =\u003e x)`\n- When sorting on something other than a single key, an identity function must be provided to select the element as the key, AND an instance of IComparer must be provided, which is at odds with the majority of LINQ methods which take functions (and are therefore easier to use with lambda expressions):\n\n```\nusing NodaTime;\nusing NodaTime.TimeZones;\n...\nIEnumerable\u003cDateTimeZone\u003e tzs = ...;\nvar tzEqComparer = new ZoneEqualityComparer();\ntzs = tzs.OrderBy(x =\u003e x, Comparer\u003cDateTimeZone\u003e.Create((tz1, tz2) =\u003e tzEqComparer.Equals(tz1, tz2) ? 0 : tz1.Id.CompareTo(tz2.Id));\n```\n\nI propose adding various overloads of Sort to address these situations. The name Sort is chosen specifically to distinguish these methods, which do not take a key selector, from the OrderBy methods, which do. If this is not considered an important distinction, the names could be changed to OrderBy without colliding with the existing methods.\n## API\n\n```\npublic static class Enumerable\n{\n    public static IOrderedEnumerable\u003cT\u003e Sort\u003cT\u003e(this IEnumerable\u003cT\u003e source) where T : IComparable\u003cT\u003e\n    public static IOrderedEnumerable\u003cT\u003e Sort\u003cT\u003e(this IEnumerable\u003cT\u003e source, IComparer\u003cT\u003e comparer)\n    public static IOrderedEnumerable\u003cT\u003e Sort\u003cT\u003e(this IEnumerable\u003cT\u003e source, Comparison\u003cT\u003e comparison)\n    public static IOrderedEnumerable\u003cT\u003e SortDescending\u003cT\u003e(this IEnumerable\u003cT\u003e source) where T : IComparable\u003cT\u003e\n    public static IOrderedEnumerable\u003cT\u003e SortDescending\u003cT\u003e(this IEnumerable\u003cT\u003e source, IComparer\u003cT\u003e comparer)\n    public static IOrderedEnumerable\u003cT\u003e SortDescending\u003cT\u003e(this IEnumerable\u003cT\u003e source, Comparison\u003cT\u003e comparison)\n    public static IOrderedEnumerable\u003cT\u003e ThenSort\u003cT\u003e(this IOrderedEnumerable\u003cT\u003e source) where T : IComparable\u003cT\u003e\n    public static IOrderedEnumerable\u003cT\u003e ThenSort\u003cT\u003e(this IOrderedEnumerable\u003cT\u003e source, IComparer\u003cT\u003e comparer)\n    public static IOrderedEnumerable\u003cT\u003e ThenSort\u003cT\u003e(this IOrderedEnumerable\u003cT\u003e source, Comparison\u003cT\u003e comparison)\n    public static IOrderedEnumerable\u003cT\u003e ThenSortDescending\u003cT\u003e(this IOrderedEnumerable\u003cT\u003e source) where T : IComparable\u003cT\u003e\n    public static IOrderedEnumerable\u003cT\u003e ThenSortDescending\u003cT\u003e(this IOrderedEnumerable\u003cT\u003e source, IComparer\u003cT\u003e comparer)\n    public static IOrderedEnumerable\u003cT\u003e ThenSortDescending\u003cT\u003e(this IOrderedEnumerable\u003cT\u003e source, Comparison\u003cT\u003e comparison)\n}\n```\n## Usage\n\n```\nints.Sort()\n```\n\n```\nusing NodaTime;\nusing NodaTime.TimeZones;\n...\nIEnumerable\u003cDateTimeZone\u003e tzs = ...;\nvar tzEqComparer = new ZoneEqualityComparer();\ntzs = tzs.Sort((tz1, tz2) =\u003e tzEqComparer.Equals(tz1, tz2) ? 0 : tz1.Id.CompareTo(tz2.Id));\n```\n## Questions\n1. The generic restriction to IComparable\u003cT\u003e is not necessary if the implementation will delegate to OrderBy with an identity function (although there are other potential implementations). However, even if not strictly necessary, it clearly expresses the intent of the method. Is there a downside to keeping it?\n2. Overloads that take an IComparer are included for parity with OrderBy. Between the two, I prefer the overload that takes the Comparison, since converting an IComparer into a Comparison\u003cT\u003e is more straightforward than going the other way. However, I am not aware of the rationale behind using IComparer instead of Comparison in the OrderBy methods. We should consider whether the same rationale applies to Sort, or whether it might make sense to remove the IComparer overloads to reduce the API surface.\n3. Should the OrderBy methods have overloads added that take Comparison for parity? Or is there something about the usage pattern of selecting a key that makes it less likely that a comparison function will be provided inline? (This is the inverse of question 2).\n4. What about Queryable?\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKmVeBQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExMjgzOTI5NA==",
                                           "createdAt":  "2015-06-17T15:14:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "- I think `Sort()` is not a good name, because there already is `List\u003cT\u003e.Sort()` (and also static `Array.Sort()`) which does in-place sort. This means the proposed `Sort()` would be confusing and also some of its overloads couldn\u0027t be called as extension methods: e.g. `list.Sort()` would call the instance method `List\u003cT\u003e.Sort()`, not the extension method `Enumerable.Sort()`.\n- I\u0027m not sure using a custom `Comparison\u003cT\u003e` happens often enough to be worth making the API more complicated.\n",
                                           "updatedAt":  "2015-06-17T15:14:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExMjg0NjIyNg==",
                                           "createdAt":  "2015-06-17T15:27:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I\u0027m not sure using a custom Comparison\u003cT\u003e happens often enough to be worth making the API more complicated.\n\nNot arguing one way or the other, just pointing out that for such situations where you have a `Comparison\u003cT\u003e` (or lambda that converts to it) and need an `IComparer\u003cT\u003e`, you can use `Comparer\u003cT\u003e.Create`, e.g.\n\n``` C#\nvar result = strings.OrderBy(s =\u003e s, Comparer\u003cstring\u003e.Create((s1, s2) =\u003e ...));\n```\n",
                                           "updatedAt":  "2015-06-17T15:28:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExMjg2MjcwNw==",
                                           "createdAt":  "2015-06-17T16:10:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eatdrinksleepcode",
                                           "body":  "@stephentoub Indeed, the proposal shows an example of using Comparer\u003cT\u003e.Create to convert from a Comparison to an IComparer. Although useful when necessary, I find this method unnecessarily verbose in otherwise terse collection manipulation pipelines, especially because the generic argument has to be specified.\n\n@svick That\u0027s a good point about collisions with the other Sort methods. I chose Sort because OrderBy implies that the thing you are ordering by is part of calling the method, which is not the case for these overloads. i wonder if we can find another appropriate name?\n\nRegarding Comparison\u003cT\u003e, I don\u0027t have any particular reason to believe that it would be used less often than IComparer\u003cT\u003e. And as I noted in the questions, it is shorter and simpler to convert from an IComparer to a Comparison (just use the method group, e.g. `myComparer.Equals`) than to convert from a Comparison to an IComparer (`Comparer\u003cstring\u003e.Create(myComparison)`).\n",
                                           "updatedAt":  "2015-06-17T16:10:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MTYzMDg3OA==",
                                           "createdAt":  "2016-11-18T20:15:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "It looks like the major purpose of this proposal is to \n1. not require an identity key projection  when item is its own key\n2. provide comparer lambda  instead (or in addition to) of IComparer\n\nThe main question is - why do we need so many new API entries? Can we still have most of the benefits without bloating the API surface too much? What would be the minimum necessary API addition?\n\nIt seems the following API additions would be sufficient:\n\n``` cs\npublic static IOrderedEnumerable\u003cT\u003e Sort\u003cT\u003e(this IEnumerable\u003cT\u003e source) where T : IComparable\u003cT\u003e\npublic static IOrderedEnumerable\u003cT\u003e Sort\u003cT\u003e(this IEnumerable\u003cT\u003e source, Func\u003cT, T, int\u003e comparison)\n```\n\nI do not find   \"Descending\"   or \"ThenBy\"  methods very useful when the same key is used and comparer lambda can be trivially reversed.\n\nFor the   Comparer/IComparer   use in Linq in general.\n\nLinq generally avoids pre-Func specialized delegate types and tries to standardize on Func/Action. \nAlso note that lambdas are used mostly to extract/project/wrap the elements of the sequence, while the algorithms are parameterized via interfaces (IComparer, IEqualityComparer, . . ). \n\n``` cs\npublic static IOrderedEnumerable\u003cT\u003e Sort\u003cT\u003e(this IEnumerable\u003cT\u003e source) where T : IComparable\u003cT\u003e\npublic static IOrderedEnumerable\u003cT\u003e Sort\u003cT\u003e(this IEnumerable\u003cT\u003e source, IComparer\u003cT\u003e comparer)\n```\n\nBased on the above points the new API should really use IComparer, but I see how `Func\u003cT,T,int\u003e` instead could be more useful.\nHowever, i think we should have only one or another. Having both variants would seem to be unnecessary duplication.\n",
                                           "updatedAt":  "2016-11-18T21:38:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MTYzMTEyNg==",
                                           "createdAt":  "2016-11-18T20:16:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "The idea seems reasonable, but need to settle on appropriate shape of the additional API \n",
                                           "updatedAt":  "2016-11-18T20:16:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MTY0NDE5MQ==",
                                           "createdAt":  "2016-11-18T21:17:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@VSadov Did you mean `Func\u003cT, T, int\u003e` (delegate version of `IComparer\u003cT\u003e`), instead of `Func\u003cT, T, bool\u003e` (delegate version of `IEqualityComparer\u003cT\u003e`)?\n",
                                           "updatedAt":  "2016-11-18T21:17:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MTY0ODU4Mw==",
                                           "createdAt":  "2016-11-18T21:38:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VSadov",
                                           "body":  "@svick  - right, `Func\u003cT, T, int\u003e` of course\n",
                                           "updatedAt":  "2016-11-18T21:39:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MTY2MTEyMw==",
                                           "createdAt":  "2016-11-18T22:40:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JonHanna",
                                           "body":  "\u003e `public static IOrderedEnumerable\u003cT\u003e Sort\u003cT\u003e(this IEnumerable\u003cT\u003e source) where T : IComparable\u003cT\u003e`\n\nCall that on a variable typed as `List\u003cT\u003e` for some T and it will call `List`\u0027s instance method instead of this.\n\nEven if there were no signature matches, \"Sort is in-place, OrderBy produces a new object\" is the explanation often given, so the names would match. So I don\u0027t think `Sort` is a good name.\n\nIt seems to me that these are really overloads of `OrderBy` and so should be named as such.\n\n\u003e I do not find \"Descending\" or \"ThenBy\" methods very useful when the same key is used and comparer lambda can be trivially reversed.\n\nUnless the lambda can produce `int.MinValue`…\n\nI\u0027m inclined though to think they should be included in this because:\n1. I think they should be called `OrderBy` and adding comparable overloads to `ThenBy` etc. is more consistent and in fact less to learn that they all have overloads of this form than that only some do.\n2. Returning `IOrderedEnumerable` is a promise to play nicely with `ThenBy`, and if we\u0027re going to play nicely with `ThenBy` then we\u0027ve have the work done for the rest of this.\n\nThe form with no lambda (the first in either of your two alternatives) can be implemented very efficiently by having a form of `ComputeKeys` that does `_keys = (TKey[])(object)elements` and then the rest of `OrderBy` will just work.\n\nThe no-lambda form can also be done for `IQueryable\u003cT\u003e` easily by returning `source.OrderBy(x =\u003e x)`, and I think should (perhaps detecting `EnumerableQuery\u003cT\u003e` and deferring to its optimised version) and then other providers will get it for free.\n\nThe form with a `Comparison\u003cT\u003e`-like `Func` can be done easily with an `IComparer\u003cT\u003e` implementation that takes such a `Func`. And/or such a type could just be made part of the API.\n",
                                           "updatedAt":  "2016-11-18T22:40:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MTY2MjgxOA==",
                                           "createdAt":  "2016-11-18T22:50:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCC3QTQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2016-11-23T14:04:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aluanhaddad",
                                                                               "createdAt":  "2017-08-08T07:36:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mrxx99",
                                                                               "createdAt":  "2021-11-17T06:03:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Mrxx99",
                                                                               "createdAt":  "2021-11-17T06:03:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "svick",
                                           "body":  "@JonHanna \n\n\u003e It seems to me that these are really overloads of `OrderBy` and so should be named as such.\n\nThey are, except the `By` part does not fit for the identity sort. As [said previously](https://github.com/dotnet/corefx/issues/2076#issuecomment-112862707) by @eatdrinksleepcode:\n\n\u003e I chose `Sort` because `OrderBy` implies that the thing you are ordering by is part of calling the method, which is not the case for these overloads.\n\nI agree with that. For example, `employees.OrderBy(e =\u003e e.Name)` reads \"order employees by name\", `numbers.OrderBy()` is just \"order numbers\", there is no \"by\" part. Because of that, I think `Order` would be a good name for that \"overload\".\n",
                                           "updatedAt":  "2016-11-18T22:50:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MTY2MzM2NQ==",
                                           "createdAt":  "2016-11-18T22:53:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAE8sxA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2016-11-23T14:04:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JonHanna",
                                           "body":  "I could happily live with `Order`, though in the SQL world the analogous `SELECT id FROM table ORDER BY id` means it wouldn\u0027t be that weird to SQL-familiar people while those used to the other overloads would think of it as yet another overload.\n",
                                           "updatedAt":  "2016-11-18T22:55:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNDU0NjA3Mw==",
                                           "createdAt":  "2017-05-28T23:05:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "madelson",
                                           "body":  "Two thoughts:\r\n\r\n* Some of the proposed APIs have a constraint `where T : IComparable\u003cT\u003e`. This seems inconsistent with LINQ\u0027s general OrderBy approach, where any TKey is allowed. In general, these constraints are unnecessary because `Comparer\u003cT\u003e.Default` is available for any `T` (although some calls to `Compare()` may fail at runtime. Despite the possibility for runtime failures, I think LINQ\u0027s more permissive approach is the right one. For example, it allows for non-generic `IComparable`s.\r\n\r\n* With regards to the name, `OrderBy()` with no arguments doesn\u0027t make much sense. However, `OrderBy(Comparer)` makes a lot of sense.",
                                           "updatedAt":  "2017-05-28T23:05:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODg2MjI1Mw==",
                                           "createdAt":  "2018-01-19T04:15:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCC3RHg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mrxx99",
                                                                               "createdAt":  "2021-11-17T06:05:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eatdrinksleepcode",
                                           "body":  "So it\u0027s been a little while, but I think this idea is still worth pursuing. If I can sum up the feedback:\r\n\r\n1. \"Sort\" conflicts with `List\u003cT\u003e.Sort` (and to a lesser extent, the static `Array.Sort`). \"OrderBy\" doesn\u0027t read correctly without a key selector. Is \"Order\" the best alternative?\r\n2. Accepting both `IComparer\u003cT\u003e` and `Comparison\u003cT\u003e` creates a lot of overloads. Accepting only `IComparer\u003cT\u003e` makes the usage more verbose. Accepting only `Comparison\u003cT\u003e` is inconsistent with the rest of LINQ. I am personally still inclined to provide both sets of overloads, since I don\u0027t find the overloads confusing, and they keep consuming code clean for both kinds of usage.\r\n3. Including a generic constraint of `IComparable\u003cT\u003e` on some overloads disallows non-generic comparables, and is inconsistent with existing `OrderBy` methods. While I would prefer that the case of attempting to sort non-comparable items be handled by the type system instead of by a runtime exception, as a practical matter the constraint may have to be removed.\r\n4. Equivalent overloads for IQueryable can easily be supplied by delegating to existing `OrderBy` overloads, and so should be done to maintain IEnumerable/IQueryable parity.\r\n\r\nDoes anyone care to weigh in any further on any of these issues? I am happy to make the necessary changes to the proposal. Are there any other issues that need to be addressed?\r\n\r\n/cc @joshfree @VSadov ",
                                           "updatedAt":  "2018-01-19T04:15:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODk0NjA4OQ==",
                                           "createdAt":  "2018-01-19T11:57:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "madelson",
                                           "body":  "One implication of adding `Queryable.Order\u003cT\u003e(this IQueryable\u003cT\u003e)` is that existing query providers (e. g. EF) will not support this new query operator. `Queryable.Order\u003cT\u003e(this IQueryable\u003cT\u003e, IComparer\u003cT\u003e)` would also not be supported, but since most query providers don\u0027t support custom comparers anyway that would be less surprising to consumers.\r\n\r\nOne argument for using `Sort` over `Order` would be consistency with the existing `Reverse`, which also is hidden by `List\u003cT\u003e.Reverse`.",
                                           "updatedAt":  "2018-01-19T11:57:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxODQ3MTkyNA==",
                                           "createdAt":  "2020-04-23T15:39:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "A couple of thoughts:\r\n* Naming something `x.Sort()` might imply that it\u0027s an in-place sort, even though that is not the case. Perhaps we could call it something like `x.Order()`?\r\n* I\u0027m trying to understand the type of scenaria that the second method could unlock. Typically, if I want a quick way to order by more than one features (besides from calling `ThenBy`), I just project to a tuple which already supports comparison.",
                                           "updatedAt":  "2020-04-23T15:39:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMDM2MjU2MQ==",
                                           "createdAt":  "2020-10-16T18:17:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCC3R5w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mrxx99",
                                                                               "createdAt":  "2021-11-17T06:07:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "While exposing an OrderBy overload that doesn\u0027t require any arguments is valuable for simple scenaria, I think we could certainly trim down the size of the proposed API additions:\r\n\r\n* We can omit the `IComparable\u003cT\u003e` constraint since it doesn\u0027t apply to `TKey` types.\r\n* We can omit the `Comparison\u003cT\u003e` overloads since that type isn\u0027t used at all inside existing System.Linq APIs.\r\n* The `ThenBy` overloads can be omitted since they express more complex scenaria that should be covered by the existing APIs.\r\n\r\nSo I was thinking something like the following:\r\n\r\n```csharp\r\npublic static class Enumerable\r\n{\r\n    public static IOrderedEnumerable\u003cTSource\u003e OrderBy\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source, IComparer\u003cTSource\u003e comparer);\r\n    public static IOrderedEnumerable\u003cTSource\u003e OrderByDefaultComparer\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source);\r\n\r\n    public static IOrderedEnumerable\u003cTSource\u003e OrderByDescending\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source, IComparer\u003cTSource\u003e comparer);\r\n    public static IOrderedEnumerable\u003cTSource\u003e OrderByDescendingDefaultComparer\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source);\r\n}\r\n```",
                                           "updatedAt":  "2020-10-16T18:17:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMTI4NjI3Nw==",
                                           "createdAt":  "2020-10-18T16:49:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "madelson",
                                           "body":  "Another possibility for the no-arguments version could be `InOrder`/`InDescendingOrder`. This does a good job of communicating that this returns a sequence which is sorted rather than sorting the sequence (FWIW I think `Enumerable.Reverse` might have been better off as `InReverse`.\r\n\r\n```\r\nvar sorted = items.InOrder();\r\n```\r\n\r\nI think this reads very naturally except when followed by `ThenBy`. Some of the other proposals like `Sort` have the same issue. That said, it should be rare to follow a default sort with `ThenBy` since I would guess that most default comparers break all ties.",
                                           "updatedAt":  "2020-10-18T16:49:29Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "Sorting sequences",
        "labels":  [
                       "enhancement",
                       "api-needs-work",
                       "area-System.Linq",
                       "wishlist"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/24227",
        "createdAt":  "2017-11-23T02:52:43Z",
        "number":  24227,
        "author":  "LYP951018",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJTZHg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jnm2",
                                            "createdAt":  "2017-11-23T03:17:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gdoron",
                                            "createdAt":  "2018-01-17T09:13:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AdamWillden",
                                            "createdAt":  "2019-04-29T13:39:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hillin",
                                            "createdAt":  "2019-07-10T11:06:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "leotsarev",
                                            "createdAt":  "2019-10-09T08:03:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xzxzxc",
                                            "createdAt":  "2020-02-04T13:26:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2020-03-18T12:27:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DavidHollman",
                                            "createdAt":  "2020-10-15T19:48:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "simonetino",
                                            "createdAt":  "2020-10-30T18:48:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "koryphaee",
                                            "createdAt":  "2020-11-16T08:52:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aienabled",
                                            "createdAt":  "2021-03-19T01:46:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielchalmers",
                                            "createdAt":  "2021-07-31T10:06:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NN---",
                                            "createdAt":  "2022-10-21T13:56:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Royar13",
                                            "createdAt":  "2022-10-23T06:26:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kerryjiang",
                                            "createdAt":  "2023-05-04T06:06:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stamminator",
                                            "createdAt":  "2023-06-02T16:33:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ondrejtucny",
                                            "createdAt":  "2023-10-29T16:51:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "skaa",
                                            "createdAt":  "2024-02-28T04:08:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "irakhimov-as",
                                            "createdAt":  "2025-07-31T08:58:56Z"
                                        }
                                    ],
                          "totalCount":  19
                      },
        "updatedAt":  "2024-05-16T08:12:37Z",
        "body":  "## Rationale and Usage\r\n\r\nI think the usage for this API is almost same with `List\u003cT\u003e.FindIndex`. But this **is** a readonly API and should exist in `IReadOnlyList\u003cT\u003e`. Otherwise we have to fallback to mutable type, `List\u003cT\u003e` as interface, which is ... bad, or write a `FindIndex` extension method ourselves.\r\n\r\n## Questions\r\n\r\n1. If we just use type switch to optimize for `List\u003cT\u003e` internally, what about custom classes (such as my `SortedList`) which implement `IReadOnlyList` and use an array internally, and I want to have a high-perf `FindIndex`? \r\n\r\n2. Should we generalize to `IEnumerable`? What\u0027s the usage for `IEnumerable.FindIndex`?\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfgbyMQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NjUyMjUxMA==",
                                           "createdAt":  "2017-11-23T02:57:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LYP951018",
                                           "body":  "It seems that making them extension methods is better and trivial to implement.",
                                           "updatedAt":  "2017-11-23T02:57:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NjUyNDI1OQ==",
                                           "createdAt":  "2017-11-23T03:17:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOARgx3g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gdoron",
                                                                               "createdAt":  "2018-01-17T09:13:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jnm2",
                                           "body":  "I have `FindFirstIndex` and `FindLastIndex` as extension methods.",
                                           "updatedAt":  "2017-11-23T16:28:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NjU3NzI0OA==",
                                           "createdAt":  "2017-11-23T10:12:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAPwWOA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LYP951018",
                                                                               "createdAt":  "2017-11-23T11:03:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JonHanna",
                                           "body":  "`FindAll` already exists as `Where` bar for the fact that `FindAll` returns `List\u003cT\u003e`, which doesn\u0027t make as much sense once you\u0027ve moved away from defining it on `List\u003cT\u003e` (and one can always `ToList()` it), and it takes a `Func\u003cT, bool\u003e` rather than a `Predicate\u003cT\u003e` which is a more modern approach. `Find` exists as `FirstOrDefault()`. and `FindLast` exists as `LastOrDefault()`. These last two are already optimised for some types of sources, including `IList\u003cT\u003e`.\r\n\r\nThis leaves only `FindIndex` which could be implemented on `IEnumerable\u003cT\u003e` rather than necessarily on `IList\u003cT\u003e` or `IReadOnlyList\u003cT\u003e`, with optimised paths for those.",
                                           "updatedAt":  "2017-11-23T10:15:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NjY2MDM0NA==",
                                           "createdAt":  "2017-11-23T16:29:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jnm2",
                                           "body":  "`FindLastIndex` is useful too.",
                                           "updatedAt":  "2017-11-23T16:29:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NjY2MTc1Mg==",
                                           "createdAt":  "2017-11-23T16:36:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC9CNvg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2017-11-23T16:39:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LYP951018",
                                                                               "createdAt":  "2017-11-24T03:26:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2017-11-27T16:50:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichaelGehling",
                                                                               "createdAt":  "2020-10-02T10:30:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stamminator",
                                                                               "createdAt":  "2023-06-02T16:34:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "JonHanna",
                                           "body":  "And likewise easily done for any `IEnumerable\u003cT\u003e`, and easily optimised for `IList\u003cT\u003e`. We shouldn\u0027t restrict it to lists if we don\u0027t need to.",
                                           "updatedAt":  "2017-11-23T16:36:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NzI0NTcxMA==",
                                           "createdAt":  "2017-11-27T16:52:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@LYP951018 can you update your proposal based on the discussion? Also make sure to include [formal API proposal](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md) in top post (see the example).",
                                           "updatedAt":  "2017-11-27T16:52:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NzI0ODE4OA==",
                                           "createdAt":  "2017-11-27T16:59:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC9CN0Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2017-11-27T17:36:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GerardSmit",
                                                                               "createdAt":  "2017-11-28T22:07:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LYP951018",
                                                                               "createdAt":  "2017-11-29T09:44:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "unageek",
                                                                               "createdAt":  "2019-03-07T04:30:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AdamWillden",
                                                                               "createdAt":  "2019-04-29T13:39:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Tyrrrz",
                                                                               "createdAt":  "2019-11-05T19:19:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dakuenjery",
                                                                               "createdAt":  "2019-11-15T13:00:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NN---",
                                                                               "createdAt":  "2022-10-21T13:56:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stamminator",
                                                                               "createdAt":  "2023-06-02T16:34:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "JonHanna",
                                           "body":  "Should these live in linq?\r\n\r\n```C#\r\nnamespace System.Linq\r\n{\r\n    public static class Enumerable\r\n    {\r\n        public static int FindIndex\u003cTValue\u003e(this IEnumerable\u003cTValue\u003e source, Func\u003cTValue, bool\u003e predicate);\r\n        public static int FindLastIndex\u003cTValue\u003e(this IEnumerable\u003cTValue\u003e source, Func\u003cTValue, bool\u003e predicate);\r\n    }\r\n\r\n    public static class Queryable\r\n    {\r\n        public static int FindIndex\u003cTValue\u003e(this IQueryable\u003cTValue\u003e source, Expression\u003cFunc\u003cTValue, bool\u003e\u003e predicate);\r\n        public static int FindLastIndex\u003cTValue\u003e(this IQueryable\u003cTValue\u003e source, Expression\u003cFunc\u003cTValue, bool\u003e\u003e predicate);\r\n    }\r\n}",
                                           "updatedAt":  "2017-11-27T16:59:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MjgyOTUwMw==",
                                           "createdAt":  "2018-02-03T16:27:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LYP951018",
                                           "body":  "@JonHanna  But I couldn\u0027t find a usage for `FindIndex` of generalized `IEnumerable`. With `IList\u003cT\u003e` or `IReadOnlyList\u003cT\u003e`, I know that indexing is possible, and fast, so I could use the result of `FindIndex` and then do some indexing. But with `IEnumerable`, what could I do with index?",
                                           "updatedAt":  "2018-02-03T16:49:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MjgzMTg1MQ==",
                                           "createdAt":  "2018-02-03T16:44:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LYP951018",
                                           "body":  "Also, why is `Func\u003cT, bool\u003e` more modern than `Predicate\u003cT\u003e`?",
                                           "updatedAt":  "2018-02-03T17:16:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MjgzNTk2OQ==",
                                           "createdAt":  "2018-02-03T17:15:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JonHanna",
                                           "body":  "There\u0027s an analogy with `ElementAt` here, which is available for all enumerables and queryables but optimised for `IList\u003cT\u003e`.\r\n\r\nAs for `Fuct\u003cT, bool\u003e` being more modern, there\u0027s little justification in using any other delegate than `Func` and `Action` unless something like being `ref` means one cannot. Keeping to them prevents one having to wrap one delegate in another just to match a signature. ",
                                           "updatedAt":  "2018-02-03T17:15:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MjgzNjcwNQ==",
                                           "createdAt":  "2018-02-03T17:20:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LYP951018",
                                           "body":  "Many `IEnumerable`s is one-pass, just like input iterators in C++. That means we could not pass the result of `FindIndex` to `ElementAt`. I could image an usage for `ElementAt`, just like `Skip(n)`, but I could not figure out what could I do with index of `IEnumerable` ...",
                                           "updatedAt":  "2018-02-03T17:21:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzQ5NTU2Nw==",
                                           "createdAt":  "2020-04-14T15:02:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RezaJooyandeh",
                                           "body":  "#31156 will cover this with an extension method",
                                           "updatedAt":  "2020-04-14T15:02:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwOTU1NDQ3Ng==",
                                           "createdAt":  "2020-10-15T19:50:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DavidHollman",
                                           "body":  "Would/should [adding IndexOf to IReadOnlyList](https://stackoverflow.com/a/60316143/3195477) be covered by this also?",
                                           "updatedAt":  "2020-10-15T19:50:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNjI3MjUzNw==",
                                           "createdAt":  "2020-11-12T18:55:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "I\u0027m not entirely convinced that indices are very meaningful in the context of LINQ. It would almost certainly not be useful to find the index of a chained enumerable such as `source.Where().GroupBy().OrderBy()`. In practice, I have found this [`Select` overload](https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.select?view=net-5.0#System_Linq_Enumerable_Select__2_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Int32___1__) to be a good general-purpose solution in the rare cases where indices are significant.\r\n\r\n\u003e Would/should adding IndexOf to IReadOnlyList be covered by this also?\r\n\r\nIt would probably be a breaking change. It has been argued that DIMs might provide a solution to this, however this is known to cause other problems.",
                                           "updatedAt":  "2020-11-12T18:55:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzU4NTE0OQ==",
                                           "createdAt":  "2020-11-15T15:12:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jnm2",
                                           "body":  "\u003e I\u0027m not entirely convinced that indices are very meaningful in the context of LINQ.\r\n\r\nIt would mirror ElementAt.\r\n\r\n\u003e Would/should adding IndexOf to IReadOnlyList be covered by this also?\r\n\r\nI think this was meant as \"adding an IndexOf extension method to IReadOnlyList\u003cT\u003e\" because the interface loses its generic variance if it declares a method where T is passed in.",
                                           "updatedAt":  "2020-11-15T15:12:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNzMwNTc1Ng==",
                                           "createdAt":  "2020-12-02T15:32:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e \u003e I\u0027m not entirely convinced that indices are very meaningful in the context of LINQ.\r\n\u003e\r\n\u003e It would mirror ElementAt.\r\n\r\nSure, but `ElementAt` accepts an index whereas `FindIndex` returns one, so I would expect this might encourage double enumerations.\r\n\r\n\u003e \u003e Would/should adding IndexOf to IReadOnlyList be covered by this also?\r\n\u003e\r\n\u003e I think this was meant as \"adding an IndexOf extension method to IReadOnlyList\" because the interface loses its generic variance if it declares a method where T is passed in.\r\n\r\nSomething like this?\r\n```csharp\r\nnamespace System.Collections.Generic\r\n{\r\n    public static class CollectionExtensions\r\n    {\r\n        public static int IndexOf\u003cT\u003e(this IReadOnlyList\u003cT\u003e readOnlyList, T element)\r\n        {\r\n            if (readOnlyList is IList\u003cT\u003e list)\r\n            {\r\n                return list.IndexOf(element);\r\n            }\r\n\r\n            for (int i = 0; i \u003c readOnlyList.Count; i++)\r\n            {\r\n                if (element.Equals(readOnlyList[i]))\r\n                {\r\n                    return i;\r\n                }\r\n            }\r\n\r\n            return -1;\r\n        }\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2020-12-02T15:32:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNzMxMjExMA==",
                                           "createdAt":  "2020-12-02T15:41:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBYsOOw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2020-12-02T19:54:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jnm2",
                                           "body":  "Double enumeration is a separate topic, but doesn\u0027t the premise of ElementAt already imply double enumeration? The index is usually gotten by some means rather than just being fixed at, say, `2`.\r\n\r\nYes, that\u0027s pretty much the extension method I have, except mine uses `EqualityComparer\u003cT\u003e.Default.Equals` to avoid NRE. ",
                                           "updatedAt":  "2020-12-02T15:42:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vpYIt",
                                           "createdAt":  "2024-01-01T02:46:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ritchiecarroll",
                                           "body":  "This works for now:\r\n\r\n```c#\r\ntry\r\n{\r\n    return myReadOnlyList.Select((element, index) =\u003e (element, index)).First(item =\u003e myPredicate(item.element)).index;\r\n}\r\ncatch (InvalidOperationException)\r\n{\r\n    return -1;\r\n}\r\n```",
                                           "updatedAt":  "2024-01-01T02:46:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-BvIx",
                                           "createdAt":  "2024-05-16T08:10:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "epa",
                                           "body":  "\u003e `FindAll` already exists as `Where` bar for the fact that `FindAll` returns `List\u003cT\u003e`, which doesn\u0027t make as much sense once you\u0027ve moved away from defining it on `List\u003cT\u003e` (and one can always `ToList()` it), and it takes a `Func\u003cT, bool\u003e` rather than a `Predicate\u003cT\u003e` which is a more modern approach.\r\n\r\nSemantically yes you can use `Where`.  But if you know you have a `List` rather than an arbitrary sequence, `FindAll` can perform better (compared to `Where(...).ToList()`).  For that reason it would be useful to provide it as part of `IReadOnlyList`.  Some classes implementing that interface (for example, `List` itself) can have a specialized `FindAll` implementation.  For others, I suppose an implementation based on `Where` could be provided as a default implementation.",
                                           "updatedAt":  "2024-05-16T08:12:37Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "FindIndex for IReadOnlyList\u003cT\u003e?",
        "labels":  [
                       "api-needs-work",
                       "area-System.Linq"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/24463",
        "createdAt":  "2017-12-15T05:49:54Z",
        "number":  24463,
        "author":  "rvhuang",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCBC_g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "michaelo-numerik",
                                            "createdAt":  "2022-07-07T21:41:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "theodorzoulias",
                                            "createdAt":  "2022-07-21T21:52:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "oskarb",
                                            "createdAt":  "2022-10-06T20:24:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sveinungf",
                                            "createdAt":  "2023-11-27T14:32:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WhatzGames",
                                            "createdAt":  "2024-04-29T13:36:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "trottierm",
                                            "createdAt":  "2024-10-04T19:17:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrensairr",
                                            "createdAt":  "2024-12-02T06:06:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "austinw-fineart",
                                            "createdAt":  "2025-02-05T03:15:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "petternett",
                                            "createdAt":  "2025-05-05T07:42:33Z"
                                        }
                                    ],
                          "totalCount":  9
                      },
        "updatedAt":  "2025-05-08T08:28:02Z",
        "body":  "# Issue\r\n\r\nRecently we are dealing with a scenario which is to provide an API that returns an `ILookup\u003cTKey, TElement\u003e` instance. The design is, before actually performing queries, the API checks whether the parameters will cause empty result. If so, an empty `ILookup\u003cTKey, TElement\u003e` is returned. Currently we manually create a static field as below:\r\n\r\n```csharp\r\n\r\nstatic readonly ILookup\u003cint, Something\u003e Empty = Array.Empty\u003cSomething\u003e().ToLookup(s =\u003e s.ID);\r\n\r\n```\r\nHowever, if there is a built-in API similar to `Enumerable.Empty\u003cT\u003e()` and `Array.Empty\u003cT\u003e()`, it could be helpful. Manual declaration above is no longer needed. \r\n\r\n# Rational\r\n\r\nSince we already have  `Enumerable.Empty\u003cT\u003e()` and `Array.Empty\u003cT\u003e()`, and `ILookup\u003cTKey, TElement\u003e` instance cannot be modified, it is reasonable that we can have similar static method that serves same purpose.\r\n\r\n# Proposal\r\n\r\nSimilar to `Enumerable.Empty\u003cT\u003e()` and `Array.Empty\u003cT\u003e()`, the proposed API shall look like following code snippet:\r\n\r\n```csharp\r\n\r\npublic ILookup\u003cint, Something\u003e FindSomethings(DateTime from, DateTime to)\r\n{\r\n    if (from \u003c= WhenTheBusinessLaunched \u0026\u0026 to \u003c= WhenTheBusinessLaunched) \r\n        return Lookup\u003cint, Something\u003e.Empty(); // Here\r\n\r\n    var result = default(ILookup\u003cint, Something\u003e);\r\n    // Do something\r\n    return result;\r\n}\r\n\r\n```\r\n\r\nwhere the `Empty()` method has syntax below:\r\n\r\n```csharp\r\n\r\npublic static ILookup\u003cTKey, TElement\u003e Lookup\u003cTKey, TElement\u003e.Empty(); \r\n\r\n``` \r\n\r\nor can be something like this with new `Lookup` class:\r\n\r\n```csharp\r\n\r\npublic static ILookup\u003cTKey, TElement\u003e Lookup.Empty\u003cTKey, TElement\u003e(); \r\n\r\n``` \r\n\r\nPlease take a look at the proposal above. Thanks. \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqpnQDQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MTk0MjE5Ng==",
                                           "createdAt":  "2017-12-15T08:18:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Joe4evr",
                                           "body":  "Additional suggestion: Put it in the static `Enumerable` class as\r\n```cs\r\npublic static ILookup\u003cTKey, TValue\u003e EmptyLookup\u003cTKey, TValue\u003e();\r\n```",
                                           "updatedAt":  "2017-12-15T08:21:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MjAwNzc3OQ==",
                                           "createdAt":  "2017-12-15T13:38:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jnm2",
                                           "body":  "The upcoming Default Interface Methods feature [will allow](https://github.com/dotnet/csharplang/blob/master/proposals/default-interface-methods.md#detailed-design) static methods on instances, so `ILookup\u003cTKey, TValue\u003e.Empty()` would be possible (if that was even desirable).",
                                           "updatedAt":  "2017-12-15T13:38:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MjE1NTEzMQ==",
                                           "createdAt":  "2017-12-16T02:41:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rvhuang",
                                           "body":  "In addition to this, since `ILookup\u003cTKey, TElement\u003e` implements `IEnumerable\u003cIGrouping\u003cTKey, TElement\u003e\u003e`, the purposed API can also be used as empty result of `Enumerable.GroupBy\u003cTSource, TKey\u003e()`.",
                                           "updatedAt":  "2017-12-16T02:42:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MjIwMDU4Ng==",
                                           "createdAt":  "2017-12-16T18:11:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Thanks for nice writeup @rvhuang!\r\n\r\nIt would be good to figure out where the API should go in the proposal. Maybe [`Lookup` class](https://msdn.microsoft.com/en-us/library/bb460184(v=vs.110).aspx)?\r\n\r\nHow often is it needed in real-world scenarios? -- It would be helpful to either find some occurrences in open-source projects (e.g. search GitHub), or wait for a few upvotes on the top post from people who used it in the past.\r\nIn general it sounds reasonable and in line with `Array` and `Enumerable` as you point out, but if only 3 people in the world ever used it, maybe it is ok to leave it as is and ask the few people who need it to have their own \"extension\" method as a workaround.\r\nI personally never used `ILookup` before, so I can\u0027t comment on how common the scenario is.",
                                           "updatedAt":  "2017-12-16T18:11:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNjMwNDYyMA==",
                                           "createdAt":  "2020-11-12T19:52:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e In general it sounds reasonable and in line with Array and Enumerable as you point out, but if only 3 people in the world ever used it, maybe it is ok to leave it as is and ask the few people who need it to have their own \"extension\" method as a workaround.\r\n\r\nGiven that this issue hasn\u0027t been updated in a while, would it make sense to assume that this request isn\u0027t too popular? The workaround described in the OP seems pretty trivial.",
                                           "updatedAt":  "2020-11-12T19:52:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc441vWh",
                                           "createdAt":  "2021-10-28T08:20:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "monco83",
                                           "body":  "I was just googling for Lookup.Empty, so I support this API proposal.",
                                           "updatedAt":  "2021-10-28T08:20:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LveYG",
                                           "createdAt":  "2022-10-06T21:52:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "oskarb",
                                           "body":  "I just slapped this ugly thing in a guard clause:\r\n\r\n    return Array.Empty\u003cQualifiedKeyword\u003e().ToLookup(g =\u003e default(Guid));\r\n\r\nSomething like the below is of course more elegant and better expresses the intent without useless ceremony:\r\n\r\n    Lookup\u003cGuid, QualifiedKeyword\u003e.Empty()",
                                           "updatedAt":  "2022-10-06T21:52:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57onqX",
                                           "createdAt":  "2024-04-24T07:18:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Miggleness",
                                           "body":  "Here\u0027s a quick workaround. You can easily remove the need to allocate every time by caching the result.\r\n\r\n```csharp\r\npublic static class EmptyLookup\r\n{\r\n    public static ILookup\u003cTKey, TValue\u003e Create\u003cTKey, TValue\u003e()\r\n    {\r\n        return Enumerable.Empty\u003c(TKey KeyType, TValue ValueType)\u003e()\r\n            .ToLookup(kv =\u003e kv.KeyType, kv =\u003e kv.ValueType);\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2024-04-24T07:18:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qmdAN",
                                           "createdAt":  "2025-05-08T08:28:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "With dictionary expressions coming, it should be easier now to expose collection builder for `ILookup`. Then the expressions `[]` and `[key1: [], key2: [a, b, c]]` can be used for building.",
                                           "updatedAt":  "2025-05-08T08:28:02Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Add LookUp(TKey, TElement).Empty() API",
        "labels":  [
                       "api-suggestion",
                       "area-System.Linq",
                       "wishlist"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/28650",
        "createdAt":  "2019-02-08T04:32:55Z",
        "number":  28650,
        "author":  "Thaina",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBWiFg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bugproof",
                                            "createdAt":  "2019-03-21T12:15:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AntiPasha",
                                            "createdAt":  "2020-05-13T18:34:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jnm2",
                                            "createdAt":  "2020-05-13T20:12:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ViIvanov",
                                            "createdAt":  "2021-04-20T07:48:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2021-08-25T16:49:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Atulin",
                                            "createdAt":  "2021-09-16T20:18:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tvde1",
                                            "createdAt":  "2021-12-15T15:56:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "georg-jung",
                                            "createdAt":  "2022-02-02T15:29:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2022-04-19T15:27:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nathanpovo",
                                            "createdAt":  "2022-11-25T07:09:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DevSelchow",
                                            "createdAt":  "2023-03-29T15:32:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mertvn",
                                            "createdAt":  "2024-03-14T14:08:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "elringus",
                                            "createdAt":  "2024-06-17T08:41:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andre-ss6",
                                            "createdAt":  "2024-08-12T18:14:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vladd",
                                            "createdAt":  "2024-08-12T19:56:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "antti-bimaire",
                                            "createdAt":  "2025-02-24T08:13:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "honestleaf",
                                            "createdAt":  "2025-04-10T09:31:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aetos382",
                                            "createdAt":  "2025-04-18T07:21:52Z"
                                        }
                                    ],
                          "totalCount":  18
                      },
        "updatedAt":  "2025-05-30T17:17:25Z",
        "body":  "Please add these to `System.Linq.Enumerable`\r\n\r\n```C#\r\npublic static T? FirstOrNull\u003cT\u003e(this IEnumerable\u003cT\u003e items) where T : struct {}\r\npublic static T? LastOrNull\u003cT\u003e(this IEnumerable\u003cT\u003e items) where T : struct {}\r\npublic static T? ElementAtOrNull\u003cT\u003e(this IEnumerable\u003cT\u003e items,int index) where T : struct {}\r\n\r\n// and so on\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrjhxgg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MTcyODgyOA==",
                                           "createdAt":  "2019-02-08T08:36:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAi_AfA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2019-02-08T13:47:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Grauenwolf",
                                           "body":  "I assume that this would be equivalent to `var x = list.Cast\u003cint?\u003e().FirstOrDefault();`\r\n\r\nI think that `FirstOrNull` is a better name. ",
                                           "updatedAt":  "2019-02-08T08:36:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MTc5NTA2MQ==",
                                           "createdAt":  "2019-02-08T12:59:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thaina",
                                           "body":  "@Grauenwolf Not sure but I think implementation is even easier than that\r\n\r\n```C#\r\npublic static T? FirstOrNullable\u003cT\u003e(this IEnumerable\u003cT\u003e items) where T : struct\r\n{\r\n    var iter = items.GetEnumerator();\r\n    if(!iter.MoveNext())\r\n         return (T?)null;\r\n\r\n    return iter.Current;\r\n}\r\n```\r\n\r\nI don\u0027t have naming preference just only want this functionality",
                                           "updatedAt":  "2019-02-08T12:59:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MTgwODk2MQ==",
                                           "createdAt":  "2019-02-08T13:50:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAjBoew==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Thaina",
                                                                               "createdAt":  "2019-02-08T15:06:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkoritzinsky",
                                                                               "createdAt":  "2019-02-09T08:52:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jnm2",
                                           "body":  "FirstOrNull makes much more sense. \u0027Nullable\u0027 includes both `null` and values.\r\n\r\nI have `*OrNull` extension methods that travel around with me for pretty much every `*OrDefault` BCL API, e.g. `GetValueOrNull(TKey key)` on IReadOnlyDictionary.",
                                           "updatedAt":  "2019-02-08T13:51:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NTIwNjczNA==",
                                           "createdAt":  "2019-03-21T12:16:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD3BZGg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aalmada",
                                                                               "createdAt":  "2019-04-01T08:19:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "georg-jung",
                                                                               "createdAt":  "2022-02-02T15:30:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dds72",
                                                                               "createdAt":  "2024-10-18T15:43:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "bugproof",
                                           "body":  "@Grauenwolf no it would be faster, `Cast\u003cT?\u003e` is slow. I vote for `FirstOrNull`, `LastOrNull` etc.",
                                           "updatedAt":  "2019-03-21T12:18:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3NTQ2MTQ1NQ==",
                                           "createdAt":  "2019-03-22T01:24:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "@dark2201 - I\u0027m pretty sure the intent was that the _behavior_ was the same.\r\n\r\nAlthough it\u0027s true that adding an extra operator adds processing time, I\u0027m not sure that a `First` case is going to really make a difference.  `Last`, though, will need to convert everything before it can return any result.",
                                           "updatedAt":  "2019-03-22T01:24:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzAyMjA5Ng==",
                                           "createdAt":  "2020-08-12T17:54:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eidylon",
                                           "body":  "While this would be awesome, I do think it should be broader than just structs. It is something that would be helpful for all value types. ints, bools, or even enums. 100% vote for this, but for all value types.",
                                           "updatedAt":  "2020-08-12T17:54:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzA5NzI1MQ==",
                                           "createdAt":  "2020-08-12T20:35:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB3wX_Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eidylon",
                                                                               "createdAt":  "2020-08-14T14:30:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mrxx99",
                                                                               "createdAt":  "2021-08-25T16:48:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Grauenwolf",
                                           "body":  "An int or boolean is a struct in .NET. You\u0027re probably thinking of C.",
                                           "updatedAt":  "2020-08-12T20:35:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDEwMzIxNQ==",
                                           "createdAt":  "2020-08-14T14:31:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eidylon",
                                           "body":  "Huh. Did not realize that. Yup... learn something new every day. Okay then, I guess my comment is extraneous. 👍🏼👍🏼",
                                           "updatedAt":  "2020-08-14T14:31:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjIwOTE4OA==",
                                           "createdAt":  "2020-11-23T14:49:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Would you be able to provide an example of how such a method would be used? Presumably the motivation is to work around the shortcomings of `GetValueOrDefault()` when used over value types? If that is the case, would the already approved overloads in #20064 not suffice to work around this problem?",
                                           "updatedAt":  "2020-11-23T14:49:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjIzNTI1Nw==",
                                           "createdAt":  "2020-11-23T15:32:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eidylon",
                                           "body":  "From giving it a quick look (didn\u0027t read fully in-depth), I think so. The problem I came here and added my vote for was the use case mentioned in that thread... of needing to return a default value from an Enumberable of enums, but not being able to use FirstOrDefault, because \"was it a valid value (0) or was it empty, and so it returned default (0).\"",
                                           "updatedAt":  "2020-11-23T15:32:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjI0MDk5NA==",
                                           "createdAt":  "2020-11-23T15:42:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jnm2",
                                           "body":  "@eiriktsarpalis The OrDefault methods approved in #20064 can\u0027t cover this use case because they do not allow lazy evaluation to obtain the default value.\r\n\r\nWith FirstOrNull:\r\n```cs\r\nvar foo =\r\n    list.FirstOrNull(f =\u003e f.IsPrimary)\r\n    ?? list.FirstOrNull()\r\n    ?? SomeExpensiveOperation();\r\n```\r\n\r\nHow would you implement the same thing with the proposal in #20064? Even if the OrDefault methods gained `Func\u003cT\u003e defaultFactory` methods, the syntax would involve unwieldly nesting (and avoidable allocations) rather than a linear pipeline.\r\n\r\nTaking a look at how the Roslyn compiler codebase uses these extension methods might be useful.",
                                           "updatedAt":  "2020-11-23T16:07:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjI1MjEzMQ==",
                                           "createdAt":  "2020-11-23T15:59:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thaina",
                                           "body":  "@eiriktsarpalis \r\n\r\n```C#\r\nvar intArray = new[] { ... };\r\nvar firstLessThanOne = intArray.FirstOrNull((i) =\u003e i \u003c 1);\r\n```\r\n\r\nWith `FirstOrDefault`, you can\u0027t distinguish between there is zero existing in the list, or there is no number less than one\r\nWith 20064, you don\u0027t have ability to specify `null` as default for struct, or you need to cast number to be nullable",
                                           "updatedAt":  "2020-11-23T15:59:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjI3OTgyMw==",
                                           "createdAt":  "2020-11-23T16:40:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODtvK4Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2020-11-23T16:44:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-08-12T20:53:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "@jnm2 Noted. With the upcoming inclusion of discriminated unions in future versions of C#, I wouldn\u0027t be too surprised if we ended up adding a true option type. This would provide a solution that works for all types and not just structs.",
                                           "updatedAt":  "2020-11-23T16:40:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjI4MzQxMg==",
                                           "createdAt":  "2020-11-23T16:46:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBXsuCg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2020-11-23T16:47:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jnm2",
                                           "body":  "As long as the syntax example above wouldn\u0027t become belabored, I like that concept a lot. The solution for *non-nullable* reference types in that example is of course to swap `FirstOrNull` with `FirstOrDefault`, but there is no nice solution for nullable reference types without an option type.",
                                           "updatedAt":  "2020-11-23T16:46:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ILUNx",
                                           "createdAt":  "2024-08-12T18:34:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andre-ss6",
                                           "body":  "I just stumbled upon a use case for this:\r\n\r\nCurrent alternatives:\r\n```cs\r\n// besides having to cast everything to Nullable, I have to use ! and .Value inside the predicate, unnecessarily... :(\r\nvar uf = addressComponents.EnumerateArray().Cast\u003cJsonElement?\u003e()\r\n    .FirstOrDefault(a =\u003e a!.Value.GetProperty(\"types\").EnumerateArray().Select(t =\u003e t.GetString())\r\n                                    .Contains(address_type_1))?\r\n    .GetProperty(\"short_name\").GetString();\r\n\r\n// OR\r\n\r\n// without the cast to JsonElement?, I\u0027m unable to use the safe navigation operator\r\nvar addressType1Value = addressComponents.EnumerateArray()\r\n    .FirstOrDefault(a =\u003e a!.Value.GetProperty(\"types\").EnumerateArray().Select(t =\u003e t.GetString())\r\n                                    .Contains(address_type_1));\r\n\r\nstring uf = null;\r\nif (addressType1Value.ValueKind != JsonValueKind.Undefined)\r\n{\r\n    uf = addressType1Value.GetProperty(\"short_name\").GetString();\r\n}\r\n```\r\n\r\nWith the proposed API:\r\n\r\n```cs\r\n// no unnecessary casting, no ! and .Value clutter\r\nvar uf = addressComponents.EnumerateArray()\r\n    .FirstOrNull(a =\u003e a.GetProperty(\"types\").EnumerateArray().Select(t =\u003e t.GetString())\r\n                                    .Contains(address_type_1))?\r\n    .GetProperty(\"short_name\").GetString();\r\n```    ",
                                           "updatedAt":  "2024-08-12T18:34:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IPR-m",
                                           "createdAt":  "2024-08-13T08:48:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODtzJXQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "andre-ss6",
                                                                               "createdAt":  "2024-08-13T08:50:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Thaina",
                                           "body":  "@eiriktsarpalis Completed? Which version?",
                                           "updatedAt":  "2024-08-13T08:48:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IPcoz",
                                           "createdAt":  "2024-08-13T09:08:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEUePdA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "Thaina",
                                                                               "createdAt":  "2024-08-13T09:13:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "DanielRouxSA",
                                                                               "createdAt":  "2024-08-13T09:27:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-08-13T14:17:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "andre-ss6",
                                                                               "createdAt":  "2024-08-13T22:20:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "s97712",
                                                                               "createdAt":  "2025-05-30T17:12:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "I have no idea how this happened. This hasn\u0027t been addressed obviously.",
                                           "updatedAt":  "2024-08-13T09:08:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uOCU_",
                                           "createdAt":  "2025-05-30T17:07:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "s97712",
                                           "body":  "Having trouble?",
                                           "updatedAt":  "2025-05-30T17:07:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uOFln",
                                           "createdAt":  "2025-05-30T17:14:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "s97712",
                                           "body":  "\u003e I have no idea how this happened. This hasn\u0027t been addressed obviously.\n\nHas anyone followed up on this?",
                                           "updatedAt":  "2025-05-30T17:14:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uOHGC",
                                           "createdAt":  "2025-05-30T17:17:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "s97712",
                                           "body":  "I\u0027m fed up with the utterly baffling design of OrDefault.",
                                           "updatedAt":  "2025-05-30T17:17:24Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "FirstOrNullable and similar method for struct collection",
        "labels":  [
                       "api-needs-work",
                       "area-System.Linq",
                       "wishlist"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/30582",
        "createdAt":  "2019-08-13T12:30:14Z",
        "number":  30582,
        "author":  "dmcnaughton",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6BjBA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrewralon",
                                            "createdAt":  "2019-08-13T12:37:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2019-09-11T07:51:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bearpro",
                                            "createdAt":  "2019-11-11T10:35:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2020-03-18T13:28:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ltlombardi",
                                            "createdAt":  "2021-02-08T23:05:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2021-08-25T13:41:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielchalmers",
                                            "createdAt":  "2022-07-09T10:07:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ImoutoChan",
                                            "createdAt":  "2022-11-03T22:42:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlexRadch",
                                            "createdAt":  "2024-08-08T03:08:37Z"
                                        }
                                    ],
                          "totalCount":  9
                      },
        "updatedAt":  "2022-11-03T22:42:28Z",
        "body":  "A common scenario that I have come across in projects, as well as having seen others work around, has been dealing with identifying whether a set has duplicates as well as getting the duplicate values/counts. \r\n\r\nI\u0027ve written extensions for projects that utilize the optimized Set\u003cTElement\u003e internal class that does a fast-return when the first duplicate object is hit for HasDuplicates(), as well as adding an int object to the to the Slot\u003cTElement\u003e internal class that handles the number of times the object has been added/attempted to be added to the Set. \r\n\r\nThis would improve performance over the most common way I have seen developers do this:\r\n\r\n**HasDuplicates**\r\nCurrent workaround: \r\n``` cs\r\npublic static bool HasDuplicates\u003cTSource\u003e(IEnumerable\u003cTSource\u003e source, IEqualityComparer\u003cTSource\u003e comparer){\r\n    return source.Count() == source.Distinct(comparer).Count();\r\n}\r\n```\r\n\r\nOptimized method (using Set\u003cTSource\u003e):\r\n``` cs \r\npublic static bool HasDuplicates\u003cTSource\u003e(IEnumerable\u003cTSource\u003e source, IEqualityComparer\u003cTSource\u003e comparer){\r\n    var set = new Set\u003cTSource\u003e(comparer);\r\n    foreach (var element in source)\r\n    {\r\n        if (!set.Add(element))\r\n        {\r\n            return true;\r\n        }\r\n     }\r\n     return false;\r\n}\r\n```\r\n\r\n\r\n**Duplicates**\r\nCurrent workaround:\r\n``` cs \r\npublic static IEnumerable\u003cKeyValuePair\u003cTSource, int\u003e\u003e Duplicates\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source, IEqualityComparer\u003cTSource\u003e comparer){\r\n    return source.GroupBy(element =\u003e element).Select(x =\u003e\r\n                new KeyValuePair\u003cTSource, int\u003e(x.Key, x.Count())).Where(x =\u003e x.Value \u003e 1);\r\n}\r\n```\r\n\r\nOptimized method (using modified Set\u003cTSource\u003e and Slot\u003cTSource\u003e):\r\n``` cs\r\npublic static IEnumerable\u003cKeyValuePair\u003cTSource, int\u003e\u003e Duplicates\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source, IEqualityComparer\u003cTSource\u003e comparer){\r\n    var set = new Set\u003cTSource\u003e(comparer);\r\n    foreach(var element in source)\r\n    {\r\n        set.Add(element);\r\n    }\r\n    return set.ToEnumerableWithCount();\r\n}\r\n```\r\n**New method to add to Set\u003cTSource\u003e**\r\n``` cs\r\npublic IEnumerable\u003cKeyValuePair\u003cTElement,int\u003e\u003e ToEnumerableWithCount(){\r\n    return _slots.Where(x =\u003e x._count \u003e 1).Select(x =\u003c new KeyValuePair\u003cTElement, int\u003e(x._value, x._count));\r\n}\r\n```\r\n\r\nThere would be a couple other changes that would be made to the Add \u0026 Remove methods on `Set\u003cTSource\u003e`, as well as adding the `internal int _count` property to `Slot\u003cTSource\u003e`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTaaLCw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyMDg2MTUxNg==",
                                           "createdAt":  "2019-08-13T14:35:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBRpQcw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NetMage",
                                                                               "createdAt":  "2020-09-25T21:06:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "airbreather",
                                                                               "createdAt":  "2020-09-27T13:33:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "svick",
                                           "body":  "How much would these additions improve performance? Specifically, I would like to see some benchmarks comparing:\r\n\r\n1. Your oneliner \"workarounds\".\r\n2. Still fairly simple ~10 line methods using `HashSet\u003cT\u003e` and `Dictionary\u003cT, int\u003e`.\r\n3. The proposed additions.\r\n\r\nAlso, can you explain the logic behind the behavior of `Duplicates`? In what situations would you want counts of all items, except those that are only once in the collection? That doesn\u0027t sound like something that would be commonly useful.",
                                           "updatedAt":  "2019-08-13T14:35:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyMDg4MjkxMw==",
                                           "createdAt":  "2019-08-13T15:25:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCu33Uw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theodorzoulias",
                                                                               "createdAt":  "2022-11-02T05:17:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "And why would this be better in corefx than in a library on Nuget?",
                                           "updatedAt":  "2019-08-13T15:25:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyMTEwNjgzMA==",
                                           "createdAt":  "2019-08-14T05:29:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thaina",
                                           "body":  "might be related dotnet/runtime#23080 Linq Permutation Cross and Multiple variable for Zip and Join\r\n\r\n```C#\r\nvar hasDup = list1.Cross(list2).Any((l,r) =\u003e l == r);\r\nvar dups = list1.Cross(list2).Where((l,r) =\u003e l == r);\r\n```",
                                           "updatedAt":  "2019-08-14T05:32:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMDI2Nzc5NQ==",
                                           "createdAt":  "2019-09-11T07:58:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCu33fg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theodorzoulias",
                                                                               "createdAt":  "2022-11-02T05:18:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "GSPP",
                                           "body":  "I found the need for this fairly frequently. It happens a lot when ingesting data from external sources. It\u0027s sometimes necessary to validate that the data has some unique key. For example:\r\n\r\n    if (!incomingData.Select(x =\u003e x.SomeKey).IsDistinct())\r\n        throw ...;\r\n\r\nThis is also useful in assertions in test and in production code.\r\n\r\nI\u0027d call this method `IsDistinct`.\r\n\r\nTo me, performance is a secondary concern here. But performance can certainly be better by using a low-overhead internal set collection type. The public hash table based types have certain overheads to them in the name of good API design.\r\n\r\nThere are also the usual optimizations such as testing for `sequence as ICollection\u003cT\u003e c \u0026\u0026 c.Count == 0` and such. User code can do that but it\u0027s nice to have a high-quality implementation built-in.\r\n\r\nObtaining duplicates is also a common thing in my experience but I don\u0027t think this belongs in the framework. It is not common enough and the API shape would vary a lot based on use case.\r\n",
                                           "updatedAt":  "2019-09-11T07:58:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5OTE3NTAwNQ==",
                                           "createdAt":  "2020-09-25T21:56:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBRsvLg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2020-09-28T10:15:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "NetMage",
                                           "body":  "@GSPP Note: Based on testing in .Net Core 5.0 RC1, the internal `Set` class used by e.g. `Distinct` is slower than using `HashSet` I think due to optimizations ported from `Dictionary`.  I opened an issue https://github.com/dotnet/runtime/issues/42760 for this.\r\n",
                                           "updatedAt":  "2020-09-25T21:57:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5OTU5NzAxNw==",
                                           "createdAt":  "2020-09-27T07:18:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "En3Tho",
                                           "body":  "@GSPP From the look of your example you don\u0027t really need to call Select / Distinct combo, but just Single/SingleOrDefault.This way you can throw on second already element if it\u0027s present",
                                           "updatedAt":  "2020-09-27T07:18:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNDQ0MzUwOQ==",
                                           "createdAt":  "2020-11-26T18:56:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "I\u0027ve had to write similar code very frequently, although in most cases some kind of error reporting was required (e.g. needing to return the indices of the dupes as well). So I suspect a general-purpose duplicate detection method is probably not achievable, and many people would still have to roll their own implementation.\r\n\r\nAnother potential implementation could be the following:\r\n```csharp\r\npublic static IEnumerable\u003cT\u003e Duplicates\u003cT\u003e(this IEnumerable\u003cT\u003e source, IEqualityComparer\u003cT\u003e? comparer = null)\r\n{\r\n    var set = new HashSet\u003cT\u003e(source, comparer);\r\n    foreach (var element in source)\r\n    {\r\n        if (!set.Add(element))\r\n        {\r\n            yield return element;\r\n        }\r\n    }    \r\n}\r\n```\r\nIt has the added benefit of being able to detect duplicates using `source.Duplicates().Any()` without needing to enumerate the entire source, however you now lose any frequency count information.\r\n\r\nApropos, duplicates in F# are typically detected using its [`CountBy` implementation](https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#countBy), which to my knowledge doesn\u0027t have an equivalent in LINQ. A naive implementation could have looked as follows:\r\n\r\n```csharp\r\npublic static IEnumerable\u003cKeyValuePair\u003cTKey, int\u003e\u003e CountBy\u003cTSource, TKey\u003e(this IEnumerable\u003cTSource\u003e source, Func\u003cTSource, TKey\u003e selector, IEqualityComparer\u003cTKey\u003e? keyComparer = null)\r\n{\r\n    var dict = new Dictionary\u003cTKey, int\u003e(keyComparer);\r\n    foreach (var element in source)\r\n    {\r\n        var key = selector(element);\r\n        bool found = dict.TryGetValue(key, out int count);\r\n        dict[key] = found ? count + 1 : 1;\r\n    }\r\n\r\n    return dict;\r\n}\r\n```\r\nDuplicates can be calculated using `source.CountBy(x =\u003e x);`",
                                           "updatedAt":  "2020-11-26T18:56:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Nccwe",
                                           "createdAt":  "2022-11-01T22:21:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NN---",
                                           "body":  "@eiriktsarpalis CountBy proposal: #77716",
                                           "updatedAt":  "2022-11-01T22:21:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NposL",
                                           "createdAt":  "2022-11-03T22:42:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ImoutoChan",
                                           "body":  "I suggest naming it AllUnique() and AllUniqueBy() for better consistency with the existing API",
                                           "updatedAt":  "2022-11-03T22:42:28Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Proposal: Linq extension HasDuplicates() and Duplicates()",
        "labels":  [
                       "api-needs-work",
                       "area-System.Linq",
                       "wishlist"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/704",
        "createdAt":  "2019-12-09T19:47:30Z",
        "number":  704,
        "author":  "TonyValenti",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-02T03:20:27Z",
        "body":  "Hi All!\r\nIt would be really great if the signature for Linq\u0027s ````Enumerable.OrderBy```` was updated such that TKey had to implement IComparable.  The same is true regarding ````ThenBy````.  This would make it possible to catch certain errors at compile time rather than run time.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwVZEdw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MzQzMzkwMw==",
                                           "createdAt":  "2019-12-09T20:54:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "Obligatory first note: Breaking change, and thus unlikely.\r\n\r\nThe reason this likely wasn\u0027t done is because of [OrderBy\u003cTSource,TKey\u003e (this System.Collections.Generic.IEnumerable\u003cTSource\u003e source, Func\u003cTSource,TKey\u003e keySelector, System.Collections.Generic.IComparer\u003cTKey\u003e comparer)](https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.orderby?view=netcore-3.0#System_Linq_Enumerable_OrderBy__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__System_Collections_Generic_IComparer___1__) - this allows the ordering to be called on things that don\u0027t implement `IComparable`, because there are any number of things that don\u0027t have any \"natural\" sort order (person, country, bank account, etc).  The other methods then just call this one with a supplied default.\r\n\r\nAnd while it would be nice to catch this at compile time, this is an area that absolutely should have test coverage in consumer code, meaning it should be caught at build time, not caught by users in deployed code.",
                                           "updatedAt":  "2019-12-09T20:54:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MzQzNjYzMg==",
                                           "createdAt":  "2019-12-09T21:00:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TonyValenti",
                                           "body":  "@Clockwork-Muse - \r\nThere are a lot of overloads of each.  I think the overload you mentioned would be safe to ignore the constraint.",
                                           "updatedAt":  "2019-12-09T21:00:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzODk1NDM4OA==",
                                           "createdAt":  "2020-06-04T16:08:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Triage: as already mentioned, this is a breaking change. However it might make sense to add a Roslyn analyzer for detecting this.",
                                           "updatedAt":  "2020-06-04T16:08:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BVFD5",
                                           "createdAt":  "2025-09-02T01:39:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markdchurchill",
                                           "body":  "\u003e nice to catch this at compile time, this is an area that absolutely should have test coverage\n\nI think that\u0027s a fairly dangerous attitude to have. A fix might have to be deferred (potentially indefinitely) due to bind compat, but this is absolutely a defect in the API spec. Type safety isn\u0027t a \"nice to have\" goal of C#.\n\nI just hit this issue, and it was so unexpected that I had to check it wasn\u0027t a net10 regression. Turns out my underlying issue was ordering by an external struct that supported comparison operators only. Amazed that this is the first time I\u0027ve hit this gotcha.\n\nPersonally I\u0027d say just break it for net11 (do constraints even break runtime binding?).",
                                           "updatedAt":  "2025-09-02T01:39:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BVZzO",
                                           "createdAt":  "2025-09-02T02:44:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgfbRg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "markdchurchill",
                                                                               "createdAt":  "2025-09-02T03:11:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2025-09-02T11:44:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "The `TKey` needn\u0027t implement `IComparable\u003cT\u003e`. `Comparer\u003cT\u003e.Default` supports `Nullable\u003cT\u003e` (which does not implement `IComparable\u003cNullable\u003cT\u003e\u003e` nor `IComparable\u003cT\u003e`), it supports enums, and it supports the non-generic `IComparable`, which `IComparable\u003cT\u003e` doesn\u0027t inherit. Adding a constraint for either or both `IComparable\u003cT\u003e` or `IComparable` would be massively breaking and does not adequately represent the set of allowed types.",
                                           "updatedAt":  "2025-09-02T02:44:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BVkR3",
                                           "createdAt":  "2025-09-02T03:20:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markdchurchill",
                                           "body":  "Ugh, yeah good exceptions (although I did think Nullable had special treatment in the type system). I\u0027m still honestly blown away by this being the first time I\u0027ve hit it. I guess in practice users have the intent to order by primitives that are almost always comparable.",
                                           "updatedAt":  "2025-09-02T03:20:27Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "IEnumerable.OrderBy should detect TKey parameters that are not IComparable.",
        "labels":  [
                       "api-suggestion",
                       "area-System.Linq",
                       "code-analyzer"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/42254",
        "createdAt":  "2020-09-15T15:04:56Z",
        "number":  42254,
        "author":  "cmeyertons",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODFdCxw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NN---",
                                            "createdAt":  "2020-10-04T13:43:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eriove",
                                            "createdAt":  "2020-10-05T09:23:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ChristophTF",
                                            "createdAt":  "2021-06-28T12:33:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IAmTheCShark",
                                            "createdAt":  "2021-07-11T06:11:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2021-08-25T15:02:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "momvart",
                                            "createdAt":  "2021-09-26T11:01:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "viktor-svub",
                                            "createdAt":  "2022-02-11T08:05:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jeremyliseismic",
                                            "createdAt":  "2022-05-21T16:29:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "theodorzoulias",
                                            "createdAt":  "2022-08-18T14:53:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Arithmomaniac",
                                            "createdAt":  "2022-10-23T16:03:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gaoshan0621",
                                            "createdAt":  "2022-11-02T09:46:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2022-11-22T18:33:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ErroneousFatality",
                                            "createdAt":  "2023-03-25T19:49:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "elgonzo",
                                            "createdAt":  "2023-08-25T13:25:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Duranom",
                                            "createdAt":  "2023-10-01T19:25:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "casperOne",
                                            "createdAt":  "2023-10-29T18:54:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Meir017",
                                            "createdAt":  "2023-12-18T19:16:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ultrafeel",
                                            "createdAt":  "2023-12-22T16:06:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "weitzhandler",
                                            "createdAt":  "2023-12-22T18:03:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adamjones2",
                                            "createdAt":  "2024-02-06T18:05:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KeterSCP",
                                            "createdAt":  "2024-03-15T14:30:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adrskw",
                                            "createdAt":  "2024-04-08T19:42:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Emik03",
                                            "createdAt":  "2024-05-15T10:06:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Timovzl",
                                            "createdAt":  "2024-08-06T12:25:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KennethHoff",
                                            "createdAt":  "2025-01-15T20:45:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "voroninp",
                                            "createdAt":  "2025-07-02T14:31:46Z"
                                        }
                                    ],
                          "totalCount":  26
                      },
        "updatedAt":  "2025-06-04T04:32:43Z",
        "body":  "There are many places in the Linq / Collection code that leverage detecting if an `IEnumerable\u003cT\u003e` is an `ICollection\u003cT\u003e` to perform optimizations (e.g. presizing a new array, etc.)\r\n\r\n[List.cs](https://github.com/dotnet/runtime/blob/master/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/List.cs)\r\n\r\nBecause `ICollection\u003cT\u003e` implements `IReadonlyCollection\u003cT\u003e`, `IReadonlyCollection\u003cT\u003e` should be exclusively used in these scenarios to support custom `IReadonlyCollection\u003cT\u003e` implementations that don\u0027t necessary want to expose `Add(T item)`\r\n\r\nCurrently, collection authors have to implement ICollection\u003cT\u003e to take advantage of the performance gains and leave Add throwing `NotImplementedException` to convey proper usage.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOryU8Ag==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5Mjc3Njg4OA==",
                                           "createdAt":  "2020-09-15T15:05:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis, @jeffhandley\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-15T15:05:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5Mjc4NTI1NQ==",
                                           "createdAt":  "2020-09-15T15:16:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODYhMWQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aalmada",
                                                                               "createdAt":  "2020-09-16T10:39:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeremyliseismic",
                                                                               "createdAt":  "2022-05-21T16:29:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "casperOne",
                                                                               "createdAt":  "2023-10-29T18:54:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ChrML",
                                                                               "createdAt":  "2024-02-28T01:36:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Because `ICollection\u003cT\u003e` implements `IReadonlyCollection\u003cT\u003e`\r\n\r\nIt doesn\u0027t.",
                                           "updatedAt":  "2020-09-15T15:16:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjgwMjM1MQ==",
                                           "createdAt":  "2020-09-15T15:43:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC4jP9Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aalmada",
                                                                               "createdAt":  "2020-09-16T10:39:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "viktor-svub",
                                                                               "createdAt":  "2022-02-11T08:05:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ErroneousFatality",
                                                                               "createdAt":  "2023-03-25T19:49:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "If I recall correctly such suggestions to add (not to replace `ICollection`) fast paths for `IReadOnlyCollection` here and there were rejected several times because such casts to covariant interfaces were super slow, however these performance issues were fixed as far as I know (cast caches, inlined checks) so maybe it worth checking if we can add them in some places? ",
                                           "updatedAt":  "2020-09-15T15:43:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjgwOTg5MQ==",
                                           "createdAt":  "2020-09-15T15:56:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@davidwrighton are these kinds of \"optimistic checks for interfaces\" indeed much cheaper now than in the past? ",
                                           "updatedAt":  "2020-09-15T15:56:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjgxNjkyOA==",
                                           "createdAt":  "2020-09-15T16:07:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "cc @VSadov ",
                                           "updatedAt":  "2020-09-15T16:07:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjgyMjU4Nw==",
                                           "createdAt":  "2020-09-15T16:17:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cmeyertons",
                                           "body":  "\u003e \u003e Because `ICollection\u003cT\u003e` implements `IReadonlyCollection\u003cT\u003e`\r\n\u003e \r\n\u003e It doesn\u0027t.\r\n\r\nAs I was!  Egg on my face for sure.  Apologies, i thought this would be a drop-in request.  Thanks for the quick replies",
                                           "updatedAt":  "2020-09-15T16:17:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjgyODg5Mw==",
                                           "createdAt":  "2020-09-15T16:28:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC4jP-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2020-09-15T23:44:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aalmada",
                                                                               "createdAt":  "2020-09-16T10:40:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "itsamelambda",
                                                                               "createdAt":  "2020-09-16T14:10:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2020-10-30T16:08:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NN---",
                                                                               "createdAt":  "2021-10-27T05:41:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theodorzoulias",
                                                                               "createdAt":  "2021-11-29T03:28:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "ErroneousFatality",
                                                                               "createdAt":  "2023-03-25T19:49:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "@danmosemsft a quick benchmark:\r\n```csharp\r\nstatic IEnumerable\u003cstring\u003e strings = new List\u003cstring\u003e();\r\n\r\n[Benchmark]\r\npublic bool IsCollection() =\u003e   strings is ICollection\u003cstring\u003e;\r\n\r\n[Benchmark]\r\npublic bool IsReadOnlyList() =\u003e strings is IReadOnlyCollection\u003cstring\u003e;\r\n```\r\n.NET Core 2.2:\r\n```\r\n|          Method |      Mean |     Error |    StdDev |\r\n|---------------- |----------:|----------:|----------:|\r\n|   IsCollection  |  2.637 ns | 0.0038 ns | 0.0035 ns |\r\n| IsReadOnlyList  | 41.492 ns | 0.0911 ns | 0.0808 ns |\r\n```\r\n.NET Core 3.0:\r\n```\r\n|          Method |      Mean |     Error |    StdDev |\r\n|---------------- |----------:|----------:|----------:|\r\n|   IsCollection  |  1.069 ns | 0.0008 ns | 0.0007 ns |\r\n| IsReadOnlyList  | 40.578 ns | 0.0316 ns | 0.0264 ns |\r\n```\r\n.NET 5.0:\r\n```\r\n|          Method |      Mean |     Error |    StdDev |\r\n|---------------- |----------:|----------:|----------:|\r\n|   IsCollection  |  1.121 ns | 0.0010 ns | 0.0009 ns |\r\n| IsReadOnlyList  |  2.976 ns | 0.0094 ns | 0.0088 ns |\r\n```\r\nRelated PR: https://github.com/dotnet/coreclr/pull/23548",
                                           "updatedAt":  "2020-09-15T18:56:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjgzNzUwMA==",
                                           "createdAt":  "2020-09-15T16:44:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC4jP_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2020-09-15T16:45:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aalmada",
                                                                               "createdAt":  "2020-09-16T10:41:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "viktor-svub",
                                                                               "createdAt":  "2022-02-11T08:06:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ErroneousFatality",
                                                                               "createdAt":  "2023-03-25T19:50:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "VSadov",
                                           "body":  "Covariant interfaces are not super slow now.\r\n\r\nCost can vary for both regular interface casts and for fancy ones. Regular interface cast is a linear search, but typically does not need to search far. Cached cast may need to deal with hash collisions, but typically just gets a cached value.\r\n\r\nAs a veeery rough estimate a fancy cast can be counted as a 2X of a regular interface cast. \r\n\r\nIn the past the cost of complicated casts was technically unbounded. As you nest variant generics, the cost would go up and considerably. Thus they were avoided by library owners. ",
                                           "updatedAt":  "2020-09-15T16:44:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjgzOTY3MA==",
                                           "createdAt":  "2020-09-15T16:48:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Thanks @EgorBo that is indeed much faster.",
                                           "updatedAt":  "2020-09-15T16:48:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5Mjk1NzMxNQ==",
                                           "createdAt":  "2020-09-15T20:20:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "It is definitely faster than before, but there is still a non-zero cost to performance when making the suggested change. \r\n\r\nI have a few possible concerns here.\r\n1. What about customers that only implement `ICollection\u003cT\u003e` and not `IReadOnlyCollection\u003cT\u003e`?\r\n2. If we mitigate concern #1 by having checks for both `ICollection\u003cT\u003e` and `IReadOnlyCollection\u003cT\u003e` how much of a penalty does making the LINQ functions larger have?\r\n3. Do we have any concerns around customers who may have implemented `IReadOnlyCollection\u003cT\u003e` in such a way that it does not match with the behavior of `IEnumerable\u003cT\u003e`? My guess is that we would not treat such scenarios specially, but it is a real possibility that customers with custom written collections may have incorrect implementations of code that hasn\u0027t been tested.\r\n4. As @VSadov notes, the performance impact is now much less severe, but its not nothing.",
                                           "updatedAt":  "2020-09-15T20:20:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5Mjk2MDAyOA==",
                                           "createdAt":  "2020-09-15T20:26:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODsdIyQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "Ultrafeel",
                                                                               "createdAt":  "2024-08-01T15:09:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e It is definitely faster than before, but there is still a non-zero cost to performance when making the suggested change.\r\n\u003e \r\n\u003e I have a few possible concerns here.\r\n\u003e \r\n\u003e 1. What about customers that only implement `ICollection\u003cT\u003e` and not `IReadOnlyCollection\u003cT\u003e`?\r\n\u003e 2. If we mitigate concern #1 by having checks for both `ICollection\u003cT\u003e` and `IReadOnlyCollection\u003cT\u003e` how much of a penalty does making the LINQ functions larger have?\r\n\u003e 3. Do we have any concerns around customers who may have implemented `IReadOnlyCollection\u003cT\u003e` in such a way that it does not match with the behavior of `IEnumerable\u003cT\u003e`? My guess is that we would not treat such scenarios specially, but it is a real possibility that customers with custom written collections may have incorrect implementations of code that hasn\u0027t been tested.\r\n\u003e 4. As @VSadov notes, the performance impact is now much less severe, but its not nothing.\r\n\r\nA good example is Linq\u0027s Count: https://github.com/dotnet/runtime/blob/master/src/libraries/System.Linq/src/System/Linq/Count.cs#L11-L46\r\n\r\n`IReadOnlyCollection\u003cT\u003e` check used to apply a penalty for the O(N) foreach-based fallback (note other fast paths), but now that penalty ~15 times smaller.\r\nBut of course it depends on how often users have IROC\u003cT\u003e there - I am not in charge to answer 🙂 \r\nCurrently Count for `IReadOnlyCollection\u003cT\u003e` input leads to O(N) loop which can be quite slow for large collections.",
                                           "updatedAt":  "2020-09-15T20:28:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5Mjk2NDA5OQ==",
                                           "createdAt":  "2020-09-15T20:34:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "There were also perf issues with limited numbers of \"fast\" dictionary slots (see #11971) that should now be (largely) mitigated by the dynamic dictionary expansion added in 5.0.",
                                           "updatedAt":  "2020-09-15T20:34:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5Mjk2NDUzMA==",
                                           "createdAt":  "2020-09-15T20:35:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODj5O6Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aalmada",
                                                                               "createdAt":  "2020-09-16T10:42:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "strangeman375",
                                                                               "createdAt":  "2020-09-16T15:23:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Daniel-Svensson",
                                                                               "createdAt":  "2020-09-16T18:23:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlgorithmsAreCool",
                                                                               "createdAt":  "2020-09-18T15:48:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "En3Tho",
                                                                               "createdAt":  "2020-10-03T13:45:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mikolaytis",
                                                                               "createdAt":  "2020-10-03T15:57:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NN---",
                                                                               "createdAt":  "2020-10-04T13:43:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "daiplusplus",
                                                                               "createdAt":  "2021-08-31T09:15:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "viktor-svub",
                                                                               "createdAt":  "2022-02-11T08:06:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theodorzoulias",
                                                                               "createdAt":  "2022-08-18T14:55:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nawfalhasan",
                                                                               "createdAt":  "2022-09-10T08:09:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "omariom",
                                                                               "createdAt":  "2022-10-06T09:43:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ErroneousFatality",
                                                                               "createdAt":  "2023-03-25T19:50:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "onyxmaster",
                                                                               "createdAt":  "2024-05-30T15:16:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  14
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "I found quite a few complains or rejected attempts to optimize LINQ for `IReadOnlyCollection\u003cT\u003e`:\r\n\r\nhttps://github.com/dotnet/runtime/issues/28651 - LINQ results implicit support for IReadOnlyCollection\u003cT\u003e\r\nhttps://github.com/dotnet/runtime/issues/27517 - Performance: Make constructor List\u003cT\u003e(IEnumerable\u003cT\u003e collection) know about IReadOnlyCollection\r\nhttps://github.com/dotnet/runtime/issues/26679 - Linq ToDictionary() should presize for IReadOnlyCollection \r\nhttps://github.com/dotnet/runtime/issues/14366 - System.Linq performance improvement suggestions (mentions IROC\u003c\u003e)\r\nhttps://github.com/dotnet/runtime/issues/24793 - Respect IReadOnlyList\u003cT\u003e in the BCL\r\nhttps://github.com/dotnet/runtime/issues/23910 - Add optimized path for IReadOnlyCollection/IReadOnlyList in System.Linq\r\nhttps://github.com/dotnet/runtime/issues/18714 - Consider checking for IReadOnlyCollection in Enumerable.ToArray\r\nhttps://github.com/dotnet/runtime/issues/27516 - Performance of LINQ .Any() - type check to leverage .Count property? (mentions IROC)\r\nhttps://github.com/dotnet/runtime/issues/27517 - Performance: Make constructor List\u003cT\u003e(IEnumerable\u003cT\u003e collection) know about IReadOnlyCollection\r\nhttps://github.com/dotnet/corefx/pull/28472 - Check for IReadOnlyCollection\r\nhttps://github.com/dotnet/runtime/issues/43001 - LINQ IEnumerable extension methods should add special case `IReadOnlyCollection\u003cT\u003e`",
                                           "updatedAt":  "2020-10-03T12:34:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MzI0MzA0MQ==",
                                           "createdAt":  "2020-09-16T08:00:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCeAtAw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeremyliseismic",
                                                                               "createdAt":  "2022-05-21T16:30:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e 1. What about customers that only implement `ICollection\u003cT\u003e` and not `IReadOnlyCollection\u003cT\u003e`?\r\n\r\nThis can be expanded to different scenarios:\r\n\r\n1. The collection is implemented by `ICollection\u003cT\u003e`, but exposed as `IReadOnlyCollection\u003cT\u003e` in public surface.\r\nThis should be very common. Linq will not be impact here.\r\n2. The collection is immutable. It only implements `IReadOnlyCollection\u003cT\u003e`.\r\nThis depends on the actual implementation type:\r\n- `ReadOnlyCollection\u003cT\u003e` (including `ReadOnlyObservableCollection\u003cT\u003e`): while it\u0027s designed to be read-only, it still implement the non-readonly interfaces. Not the case.\r\n- `ImmutableArray\u003cT\u003e`: it has it\u0027s own extension methods of linq to avoid boxing. Won\u0027t worry about the default linq implementation.\r\n- Custom readonly collection: Though this would be definitely impact, it should be a relative uncommon scenario.\r\n3. The collection is implemented by `ICollection\u003cTDerived\u003e`, but exposed as `IReadOnlyCollection\u003cTBase\u003e`, and gets linq called with `\u003cTBase\u003e`.\r\n**This should be the scenario that\u0027s most probably get performance impact.** Covariant interface check are slower, but it powers this scenario.",
                                           "updatedAt":  "2020-09-16T08:00:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxOTY1ODE5Nw==",
                                           "createdAt":  "2020-10-30T16:32:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "There are a [few other interfaces](https://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/libraries/System.Linq/src/System/Linq/Count.cs#L18-L31) used to determine IEnumerable counts, also not in a subtype relationship with either `ICollection\u003cT\u003e` or `IReadOnlyCollection\u003cT\u003e`. Would it make sense to include those as well?\r\n\r\nNext step should be to enumerate a list of methods that could benefit from specialization.",
                                           "updatedAt":  "2020-10-30T16:32:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxOTY1ODUyOQ==",
                                           "createdAt":  "2020-10-30T16:33:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis, @jeffhandley\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-30T16:33:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNjg5MzU2Ng==",
                                           "createdAt":  "2020-11-13T17:23:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "Related to https://github.com/dotnet/runtime/issues/31001",
                                           "updatedAt":  "2020-11-13T17:23:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyODcxNjM0Mw==",
                                           "createdAt":  "2020-11-17T06:27:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weitzhandler",
                                           "body":  "Related: #23337.",
                                           "updatedAt":  "2020-11-17T06:27:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47_0gL",
                                           "createdAt":  "2022-01-06T13:19:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODsdKWQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ErroneousFatality",
                                                                               "createdAt":  "2023-03-25T19:58:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Ultrafeel",
                                                                               "createdAt":  "2024-08-01T15:12:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "BlinD-HuNTeR",
                                           "body":  "Hello everyone! I\u0027m not sure if someone else thought about this before, but I just had an idea that could solve this problem. Why not introduce a new, non-generic interface to the BCL named \"ICountable\", with nothing more than a \"Count\" property? Then just make ICollection, ICollection\\\u003cT\\\u003e and IReadOnlyCollection\\\u003cT\\\u003e all implement this interface. That would easily solve the problem with covariant casts, since we don\u0027t even have type parameters anymore. And we could even simplify all the code paths with just a test for \"ICountable\".",
                                           "updatedAt":  "2022-01-06T13:21:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48A0Yr",
                                           "createdAt":  "2022-01-06T19:11:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e Why not introduce a new, non-generic interface\r\n\r\nAdding more interfaces can make things a mess and worse. Not all classes will implement the new interface, so an additional interface check may be required.",
                                           "updatedAt":  "2022-01-06T19:11:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48V2eC",
                                           "createdAt":  "2022-01-13T17:40:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC4jQVQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ErroneousFatality",
                                                                               "createdAt":  "2023-03-25T19:57:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "elgonzo",
                                           "body":  "Is there any progress on the issue?\r\n\r\nEven with .NET 6.0, Linq functions which should be able to take advantage of indexed random-access collections, such as `Skip(int)`, don\u0027t seem to be able to handle custom read-only collections that for example implement _IReadOnlyList\u0026lt;T\u0026gt;_ but not _IList\u0026lt;T\u0026gt;_ (...and why should they?) without [unnecessarily poor performance](https://dotnetfiddle.net/mLMl9b).",
                                           "updatedAt":  "2022-01-13T17:47:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48W81-",
                                           "createdAt":  "2022-01-14T00:47:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQY2FQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2022-01-14T10:02:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ErroneousFatality",
                                                                               "createdAt":  "2023-03-25T19:57:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Ultrafeel",
                                                                               "createdAt":  "2023-12-22T15:22:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "No, there hasn\u0027t been any progress. The general conclusion is that we can\u0027t add new interface checks here without changing the interface checking mechanism. We\u0027ve been kicking around the idea of an optimized type switch operation for a few years, but it would almost certainly make the most common case a little bit slower in exchange for allowing more scenarios to have roughly equivalent performance. However, we haven\u0027t built out that low level feature enough to see the practical impact on changing the common patterns in the Linq codebase.",
                                           "updatedAt":  "2022-01-14T00:47:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48YN92",
                                           "createdAt":  "2022-01-14T10:08:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQY1uw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Duranom",
                                                                               "createdAt":  "2023-10-01T19:25:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Ultrafeel",
                                                                               "createdAt":  "2023-12-22T15:21:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Which is why we intentionally skipped checks for `IReadOnlyCollection\u003cT\u003e` in the new `TryGetNonEnumeratedCount` method (see #54764).\r\n\r\nOne possible alternative avenue to explore is introducing a common base interface for exposing the count, which should be possible using DIMs. [Here\u0027s a sketch of that idea](https://github.com/dotnet/runtime/issues/23337#issuecomment-956383197). We\u0027ve generally resisted retrofitting old interfaces with DIMs so far though, since they can be susceptible to both source and runtime breaking changes.",
                                           "updatedAt":  "2022-01-14T10:08:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vVKu4",
                                           "createdAt":  "2023-12-22T15:33:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ultrafeel",
                                           "body":  "@elgonzo  consider this: [`ICollection\u003cTSource\u003e.IsReadOnly`](https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.icollection-1.isreadonly). Why not simply implement `ICollection\u003cTSource\u003e`?\r\n\u003e custom read-only collections that for example implement _IReadOnlyList\u003cT\u003e_ but not _IList\u003cT\u003e_ (...and why should they?) \r\n\r\nP.S. I must admit [this](https://github.com/dotnet/runtime/issues/23337#issue-558266624).\r\n",
                                           "updatedAt":  "2023-12-22T15:34:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G5KtF",
                                           "createdAt":  "2024-08-01T13:54:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CodeSetting",
                                           "body":  "I\u0027m joining the discussion regarding support for `IReadOnlyCollection` in `TryGetNonEnumeratedCount`.  I favor adding support.\r\n\r\nI came here after first writing my own version of this method. Then, IntelliSense alerted me to your version. The method names were similar.\r\n\r\nAt first, I was confused. Your code is similar to mine. Then, I was excited. I thought I could delete mine. Then, I was disappointed. I discovered that `IReadOnlyCollection` is not supported. It was an emotional rollercoaster 😄 \r\n\r\nWhile I remain in favor of adding support, I respect the opposing opinion. If the decision remains not to support it, I\u0027d like to offer some alternate suggestions:\r\n\r\n* Consider updating the comments/documentation to warn consumers that `IReadOnlyCollection` is not supported. I expected its support, based on the current comments/documentation.\r\n* Consider adding a method overload with an `includeReadOnly` parameter. This should not be a breaking change. It would allow consumers (other than LINQ) to choose the behavior they prefer.\r\n\r\nI understand, given its history, that its natural to consider this purely from the perspective of how the method fits into the larger LINQ ecosystem. However, not every use-case is LINQ-related. Mine was not. \r\n\r\nThat said, let me be clear, I am a **huge** fan of LINQ. It has probably saved me thousands of hours of coding over the years!\r\n\r\nThank you for your time and consideration.\r\n",
                                           "updatedAt":  "2024-08-01T13:54:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G5XUR",
                                           "createdAt":  "2024-08-01T14:11:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "This was done in https://github.com/dotnet/runtime/pull/101469 and then reverted in https://github.com/dotnet/runtime/pull/101644 as part of undoing the change to have the mutable collection interfaces inherit the readonly ones. When that revert is itself reverted, hopefully in .NET 10, this should naturally be addressed.",
                                           "updatedAt":  "2024-08-01T14:11:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G5hVO",
                                           "createdAt":  "2024-08-01T14:30:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVQxPg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vsvub-procore",
                                                                               "createdAt":  "2025-06-04T07:45:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "CodeSetting",
                                           "body":  "@stephentoub this is very exciting news. Thank you for sharing! I hope the reversion does indeed get reverted 😄 \r\n\r\nThe whole `IReadOnlyCollection\u003cT\u003e` versus `ICollection\u003cT\u003e` issue has been a real pain for quite some time!\r\n\r\nHowever, it might be worth updating the comments/documentation until this (hopefully?) becomes a reality.  I assume .NET 10 is at least a year away.\r\n\r\nIn the meantime, I wrote my own overload method/extension with a `supportReadOnly` parameter. It invokes your version, which was superior to mine. I forgot about `IIListProvider\u003cT\u003e`. Also, I (shamefully) missed the non-generic `ICollection`.\r\n\r\nFor reference, in case it helps anyone else, here\u0027s my new method:\r\n```\r\npublic static bool TryGetNonEnumeratedCount\u003cT\u003e(this IEnumerable\u003cT\u003e source,\r\n   out int count, bool supportReadOnly)\r\n{\r\n  if (source.TryGetNonEnumeratedCount(out count))\r\n    return true;\r\n\r\n  if (!supportReadOnly || source is not IReadOnlyCollection\u003cT\u003e readable)\r\n    return false;\r\n\r\n  count = readable.Count;\r\n  return true;\r\n}\r\n```",
                                           "updatedAt":  "2024-08-01T14:33:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vI4bG",
                                           "createdAt":  "2025-06-04T03:52:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "With #31001 and #115802 resolved, this issue should be resolved now. Let\u0027s keep it open until the change ships in .NET 10 release.\n\nWe may be interested in the performance difference for both interface types.",
                                           "updatedAt":  "2025-06-04T03:52:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vJTwC",
                                           "createdAt":  "2025-06-04T04:32:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "Worth noting that several LINQ methods also use `CopyTo` to optimize stuff, and that method is, for... Reasons... Only on `ICollection\u003cT\u003e`, not on `IReadOnlyCollection\u003cT\u003e`. So eg. those fast-paths can\u0027t be expanded. Just saying that it\u0027s not as simple as doing a find + replace with the read-only interface 🥲",
                                           "updatedAt":  "2025-06-04T04:32:43Z"
                                       }
                                   ],
                         "totalCount":  29
                     },
        "title":  "[System.Linq] Consider adding runtime checks for IReadOnlyCollection\u003cT\u003e in input sources",
        "labels":  [
                       "area-System.Linq",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49269",
        "createdAt":  "2021-03-06T20:35:16Z",
        "number":  49269,
        "author":  "ekolis",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCrlQWw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrei-faber",
                                            "createdAt":  "2022-02-23T20:42:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "epeshk",
                                            "createdAt":  "2022-11-23T14:11:47Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-04-28T14:02:11Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\nTry to run this code:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Linq;\r\n\r\nvar arr = new string[10, 10];\r\n\r\narr[0, 0] = \"Fred\";\r\narr[0, 1] = \"Francine\";\r\narr[1, 0] = \"George\";\r\n\r\nvar fs = arr.Where(q =\u003e q.StartsWith(\"F\"));\r\n\r\nforeach (var f in fs)\r\n\tConsole.WriteLine(f);\r\n```\r\n\r\nExpected behavior: Fred and Francine are printed.\r\n\r\nActual behavior: Compile error on the LINQ call: `Error\tCS1061\t\u0027string[*,*]\u0027 does not contain a definition for \u0027Where\u0027 and no accessible extension method \u0027Where\u0027 accepting a first argument of type \u0027string[*,*]\u0027 could be found (are you missing a using directive or an assembly reference?)`\r\n\r\n### Configuration\r\n\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\n\r\n.NET 5\r\nWindows 10 Home 64 bit\r\nx64\r\n\r\n### Regression?\r\n\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\nI\u0027m pretty sure this worked in .NET Framework.\r\n\r\n### Other information\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n\r\nWorkaround: call `Cast` on the array to convert it to an `IEnumerable\u003cT\u003e`:\r\n\r\n```csharp\r\nvar fs = arr.Cast\u003cstring\u003e().Where(q =\u003e q.StartsWith(\"F\"));\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQkuA4Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MjA0OTY1OA==",
                                           "createdAt":  "2021-03-06T20:35:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-03-06T20:35:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MjE0NDY2NA==",
                                           "createdAt":  "2021-03-07T01:22:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I\u0027m pretty sure this worked in .NET Framework.\r\n\r\nNope ;-) Multidimensional arrays have always implemented `IEnumerable`, not `IEnumerable\u003cT\u003e`.",
                                           "updatedAt":  "2021-03-07T01:22:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MjMxNDIzOA==",
                                           "createdAt":  "2021-03-07T17:21:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\nTry to run this code:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Linq;\r\n\r\nvar arr = new string[10, 10];\r\n\r\narr[0, 0] = \"Fred\";\r\narr[0, 1] = \"Francine\";\r\narr[1, 0] = \"George\";\r\n\r\nvar fs = arr.Where(q =\u003e q.StartsWith(\"F\"));\r\n\r\nforeach (var f in fs)\r\n\tConsole.WriteLine(f);\r\n```\r\n\r\nExpected behavior: Fred and Francine are printed.\r\n\r\nActual behavior: Compile error on the LINQ call: `Error\tCS1061\t\u0027string[*,*]\u0027 does not contain a definition for \u0027Where\u0027 and no accessible extension method \u0027Where\u0027 accepting a first argument of type \u0027string[*,*]\u0027 could be found (are you missing a using directive or an assembly reference?)`\r\n\r\n### Configuration\r\n\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\n\r\n.NET 5\r\nWindows 10 Home 64 bit\r\nx64\r\n\r\n### Regression?\r\n\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\nI\u0027m pretty sure this worked in .NET Framework.\r\n\r\n### Other information\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n\r\nWorkaround: call `Cast` on the array to convert it to an `IEnumerable\u003cT\u003e`:\r\n\r\n```csharp\r\nvar fs = arr.Cast\u003cstring\u003e().Where(q =\u003e q.StartsWith(\"F\"));\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eekolis\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-07T17:21:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MjQyODY5NA==",
                                           "createdAt":  "2021-03-08T03:09:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ekolis",
                                           "body":  "\u003e \u003e I\u0027m pretty sure this worked in .NET Framework.\r\n\u003e \r\n\u003e Nope ;-) Multidimensional arrays have always implemented `IEnumerable`, not `IEnumerable\u003cT\u003e`.\r\n\r\nOh, really? Could have sworn they implemented the latter before! Wonder why they don\u0027t, anyway?",
                                           "updatedAt":  "2021-03-08T03:09:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MjUzOTYxOQ==",
                                           "createdAt":  "2021-03-08T07:32:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBi2Znw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "LeaFrock",
                                                                               "createdAt":  "2021-03-08T09:02:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Jimmy-Hu",
                                                                               "createdAt":  "2021-03-10T01:01:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "`IEnumerable\u003cT\u003e` for arrays is implemented via \"runtime magic\". It is not pay-for-play in all scenarios and it is pretty complex, and it would be even more complex for multidimensional arrays. If we had a time machine and can do this again, there is a good chance we would pick a different design, e.g. `static IEnumerable\u003cT\u003e AsEnumerable\u003cT\u003e(this T[] array)` extension method.",
                                           "updatedAt":  "2021-03-08T07:32:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5Mjg2MzMyOQ==",
                                           "createdAt":  "2021-03-08T16:09:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e If we had a time machine and can do this again, there is a good chance we would pick a different design, e.g. static IEnumerable\u003cT\u003e AsEnumerable\u003cT\u003e(this T[] array) extension method.\r\n\r\nIs that something we could consider for multi-dimensional arrays? F# just introduced [multi-dimensional array slicing](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/slices#slicing-multidimensional-arrays) so perhaps it makes sense to add enumeration support for submatrices (either by row or by column) by passing in a pair of `Range` parameters (in the case of 2D arrays).",
                                           "updatedAt":  "2021-03-08T16:09:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-iYS5",
                                           "createdAt":  "2022-02-23T20:44:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andrei-faber",
                                           "body":  "@joktas `It is not pay-for-play in all scenarios and it is pretty complex` - isn\u0027t it the same for IEnumerable?",
                                           "updatedAt":  "2022-02-23T20:44:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-iae6",
                                           "createdAt":  "2022-02-23T20:56:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "`IEnumerable` is not generic interface. It is implemented on `System.Array` without any runtime magic.\r\n\r\n`IEnumerable\u003cT\u003e` is generic. It is what makes the implementation very complex for arrays.\r\n\r\nIf we were to do something here, I think it should be set of `AsEnumerable`-style extension methods that create enumerable view of the multidimensional array.",
                                           "updatedAt":  "2022-02-23T20:56:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-ihbu",
                                           "createdAt":  "2022-02-23T21:35:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andrei-faber",
                                           "body":  "@jkotas `It is implemented on System.Array without any runtime magic.` - I wonder where it\u0027s implemented for multidimensional arrays?",
                                           "updatedAt":  "2022-02-23T21:35:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-jmuU",
                                           "createdAt":  "2022-02-24T05:58:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCQQUWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andrei-faber",
                                                                               "createdAt":  "2022-02-24T17:44:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I wonder where it\u0027s implemented for multidimensional arrays?\r\n\r\nThe non-generic implementation is shared between single-dimensional and multi-dimensional arrays: https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Array.cs#L2406-L2409\r\nand https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Array.Enumerators.cs#L10-L65",
                                           "updatedAt":  "2022-02-24T05:58:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CS4Dh",
                                           "createdAt":  "2022-04-28T14:02:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwFMbA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andrei-faber",
                                                                               "createdAt":  "2022-04-29T15:49:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2022-08-25T12:59:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "epeshk",
                                                                               "createdAt":  "2022-11-23T14:14:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Rekkonnect",
                                           "body":  "I think this issue would be better named as \"Allow multidimensional arrays to implement `IEnumerable\u003cT\u003e`\".\r\n\r\nOnto the real things, I think a `MDGenericArrayEnumerator\u003cT\u003e` would be possible, just like [`SZGenericArrayEnumerator\u003cT\u003e`](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Array.Enumerators.cs#L67-L121). As for the implementation details, if I recall correctly, MD arrays are also stored sequentially, so a `Span\u003cT\u003e` would work, provided the `Length` property. It could also require a new `Span\u003cT\u003e(Array)` constructor. Overall, MD arrays need some work be done to come in par with SZ arrays.",
                                           "updatedAt":  "2022-04-28T14:02:10Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Support enumerating multidimensional arrays",
        "labels":  [
                       "area-System.Linq",
                       "wishlist"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54220",
        "createdAt":  "2021-06-15T14:09:46Z",
        "number":  54220,
        "author":  "TonyValenti",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODGLWxA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielchalmers",
                                            "createdAt":  "2021-08-12T20:29:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eiriktsarpalis",
                                            "createdAt":  "2021-08-13T08:21:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vladd",
                                            "createdAt":  "2021-08-15T10:19:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "theodorzoulias",
                                            "createdAt":  "2021-10-21T04:30:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Enderlook",
                                            "createdAt":  "2021-11-04T23:37:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2022-04-19T15:54:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Atulin",
                                            "createdAt":  "2022-05-16T11:18:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rekkonnect",
                                            "createdAt":  "2022-08-09T21:13:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "escalonn",
                                            "createdAt":  "2022-08-11T00:58:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2022-08-19T08:22:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vorotynsky",
                                            "createdAt":  "2022-08-24T05:33:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NetMage",
                                            "createdAt":  "2022-10-21T20:48:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LeaFrock",
                                            "createdAt":  "2023-03-23T03:07:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Simplifier",
                                            "createdAt":  "2025-02-08T18:51:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2025-07-08T12:55:07Z"
                                        }
                                    ],
                          "totalCount":  15
                      },
        "updatedAt":  "2025-09-18T04:17:47Z",
        "body":  "## Background and Motivation\r\nWhen working with different APIs, often times it increases code readability to aggregate results and then linearize them.  For example, I could write the code:\r\n```csharp\r\nCommand.NameInfo.OnlineAccounts = new List\u003cOnlineAccount\u003e();\r\nCommand.NameInfo.OnlineAccounts.AddRange(Input.WebAddresses.Select(x =\u003e CreateWebAddress(x)));\r\nCommand.NameInfo.OnlineAccounts.AddRange(Input.EmailAddresses.Select(x =\u003e CreateEmailAddress(x)));\r\n```\r\nor I could write:\r\n```csharp\r\nCommand.NameInfo.OnlineAccounts = new[] {\r\n    Input.WebAddresses.Select(x =\u003e CreateWebAddress(x)),\r\n    Input.EmailAddresses.Select(x =\u003e CreateEmailAddress(x))\r\n}.Concat().ToList();\r\n```\r\nThe second is much more clear and concise.\r\n\r\n## Proposed API\r\n```diff\r\nnamespace System.Linq \r\n{\r\n    public static class Enumerable \r\n    {\r\n        public static IEnumerable\u003cT\u003e Concat\u003cT\u003e(this IEnumerable\u003cTSource\u003e first, IEnumerable\u003cTSource\u003e second);\r\n+        public static IEnumerable\u003cT\u003e Concat\u003cT\u003e(params IEnumerable\u003cT\u003e[] sources);\r\n+        public static IEnumerable\u003cT\u003e Concat\u003cT\u003e(this IEnumerable\u003cIEnumerable\u003cT\u003e\u003e sources);\r\n    }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n```csharp\r\nvar source = Enumerable.Range(0, 2);\r\n\r\nEnumerable.Concat(source, source, source, source); // 0, 1, 0, 1, 0, 1, 0, 1\r\nEnumerable.Repeat(source, 3).Concat(); // 0, 1, 0, 1, 0, 1\r\n```\r\n\r\n## Alternative Designs\r\nJust use ```SelectMany(x =\u003e x)```\r\n\r\n## Risks\r\nNone other than System.Linq size concerns.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxQPaIw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MTUzMjMzMg==",
                                           "createdAt":  "2021-06-15T14:09:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\nWhen working with different APIs, often times it increases code readability to aggregate results and then linearize them.  For example, I could write the code:\r\n```\r\nCommand.NameInfo.OnlineAccounts = new List\u003cOnlineAccount\u003e();\r\nCommand.NameInfo.OnlineAccounts.AddRange(Input.WebAddresses.Select(x =\u003e CreateWebAddress(x)));\r\nCommand.NameInfo.OnlineAccounts.AddRange(Input.EmailAddresses.Select(x =\u003e CreateEmailAddress(x)));\r\n```\r\nor I could write:\r\n```\r\n            Command.NameInfo.OnlineAccounts = new[] {\r\n                Input.WebAddresses.Select(x =\u003e CreateWebAddress(x)),\r\n                Input.EmailAddresses.Select(x =\u003e CreateEmailAddress(x))\r\n            }.SelectMany().ToList();\r\n```\r\nThe second is much more clear and concise.\r\n\r\n## Proposed API\r\n```\r\npublic static IEnumerable\u003cT\u003e SelectMany\u003cT\u003e(this IEnumerable\u003cIEnumerable\u003cT\u003e\u003e This) {\r\n            return This.SelectMany(x =\u003e x);\r\n        }\r\n\r\n        public static IEnumerable\u003cT\u003e Concat\u003cT\u003e(this IEnumerable\u003cIEnumerable\u003cT\u003e\u003e This) {\r\n            var ret = Enumerable.Empty\u003cT\u003e();\r\n\r\n            foreach (var item in This) {\r\n                if(item == null) {\r\n                    throw new NullReferenceException();\r\n                }\r\n\r\n                if(ret == Enumerable.Empty\u003cT\u003e()) {\r\n                    ret = item;\r\n                } else {\r\n                    ret = Enumerable.Concat(ret, item);\r\n                }\r\n\r\n            }\r\n\r\n            return ret;\r\n        }\r\n```\r\n\r\n## Usage Examples\r\n```\r\n            Command.NameInfo.OnlineAccounts = new[] {\r\n                Input.WebAddresses.Select(x =\u003e CreateWebAddress(x)),\r\n                Input.EmailAddresses.Select(x =\u003e CreateEmailAddress(x))\r\n            }.SelectMany().ToList();\r\n```\r\n\r\n## Alternative Designs\r\nJust use ```SelectMany(x =\u003e x)```\r\n\r\n## Risks\r\nNone\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTonyValenti\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Linq`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-15T14:09:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MTU3NTQwNg==",
                                           "createdAt":  "2021-06-15T15:02:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBu5ekQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2021-06-16T08:37:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "I\u0027m assuming `SelectMany()` and `Concat()` are just alternative names for the same proposed method? Why not just stick with one? I personally would prefer exposing `Concat()` as an overload, since F# uses the same name for [its equivalent method](https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#concat).",
                                           "updatedAt":  "2021-06-15T15:02:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MjE3MzY0NA==",
                                           "createdAt":  "2021-06-16T08:43:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB5DKmg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2021-09-04T04:54:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "svick",
                                           "body":  "Note that another way to write this code is to use the existing overload of `Concat`:\r\n\r\n```c#\r\nCommand.NameInfo.OnlineAccounts = \r\n    Input.WebAddresses.Select(x =\u003e CreateWebAddress(x))\r\n        .Concat(Input.EmailAddresses.Select(x =\u003e CreateEmailAddress(x)))\r\n        .ToList();\r\n```\r\n\r\nOr:\r\n\r\n```c#\r\nCommand.NameInfo.OnlineAccounts = Enumerable.Concat(\r\n    Input.WebAddresses.Select(x =\u003e CreateWebAddress(x)),\r\n    Input.EmailAddresses.Select(x =\u003e CreateEmailAddress(x))\r\n).ToList();\r\n```\r\n\r\nBut you do have to choose between the fluent assymetric form and the non-fluent symmetric form. So I think the proposed overload of `Concat` would still be a good addition.",
                                           "updatedAt":  "2021-06-16T08:43:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MjMwOTg0OA==",
                                           "createdAt":  "2021-06-16T11:43:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Agreed, @TonyValenti if you could update the OP following the API proposal template we can consider this proposal for .NET 7.",
                                           "updatedAt":  "2021-06-16T11:43:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41hZ2b",
                                           "createdAt":  "2021-08-12T20:33:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODynSdg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2021-09-04T04:54:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vladd",
                                                                               "createdAt":  "2021-10-14T20:37:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rekkonnect",
                                                                               "createdAt":  "2022-08-09T21:13:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2022-08-19T08:19:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2022-08-19T08:22:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NetMage",
                                                                               "createdAt":  "2022-10-21T20:48:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-09-10T23:51:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sharpchen",
                                                                               "createdAt":  "2024-09-18T04:07:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "danielchalmers",
                                           "body":  "I often make a `Flatten\u003cT\u003e(this IEnumerable\u003cT\u003e l)=\u003el.SelectMany(x=\u003ex)` extension so I would love to see this in the BCL!",
                                           "updatedAt":  "2021-08-12T20:33:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41iqhS",
                                           "createdAt":  "2021-08-13T08:22:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "@danielchalmers please consider upvoting the original post, it provides a good signal on whether a particular proposal is popular!",
                                           "updatedAt":  "2021-08-13T08:22:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44PNif",
                                           "createdAt":  "2021-10-14T16:18:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Hi @TonyValenti, before I can mark this ready for API review would it be possible to update the original post so that it follows our [API review template](https://github.com/dotnet/runtime/blob/main/docs/project/api-review-process.md#steps)?",
                                           "updatedAt":  "2021-10-14T16:18:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44PPg4",
                                           "createdAt":  "2021-10-14T16:27:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TonyValenti",
                                           "body":  "@eiriktsarpalis - Maybe I\u0027m missing something, but I think it does.   This is the format, right?\r\nhttps://github.com/dotnet/runtime/issues/new?assignees=\u0026labels=api-suggestion\u0026template=02_api_proposal.yml\u0026title=%5BAPI+Proposal%5D%3A+",
                                           "updatedAt":  "2021-10-14T16:27:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44PTwd",
                                           "createdAt":  "2021-10-14T16:49:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "A few issues with the original text I would like to call out:\r\n\r\n* Proposal contains two different methods for the same functionality: `SelectMany` and `Concat`. One needs to be removed, I would recommend keeping `Concat`.\r\n* The proposed API is missing namespace and declaring class for the proposed methods.\r\n* The proposed API contains implementation, which is not needed from the API review perspective.\r\n\r\nThe API review document contains links to a few API proposal issues, if you\u0027re looking for real-world examples.",
                                           "updatedAt":  "2021-10-14T16:51:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44QKNP",
                                           "createdAt":  "2021-10-14T21:46:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TonyValenti",
                                           "body":  "@eiriktsarpalis Thanks!  I just updated it.  I left the implementation just because I felt that added more clarity.  I also added a params overload for Concat that will make joining multiple enumerables easier.",
                                           "updatedAt":  "2021-10-14T21:46:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44R3J9",
                                           "createdAt":  "2021-10-15T10:57:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "@TonyValenti I\u0027ve updated your proposal slightly to better match the template. The reason we want this is to allow the API review committee quickly read and understand what is being proposed.",
                                           "updatedAt":  "2021-10-15T10:57:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44R7v5",
                                           "createdAt":  "2021-10-15T11:31:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TonyValenti",
                                           "body":  "Great!  Thanks so much!",
                                           "updatedAt":  "2021-10-15T11:31:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44cf6e",
                                           "createdAt":  "2021-10-19T18:29:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZxFtg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "Gotcha7770",
                                                                               "createdAt":  "2021-11-08T09:33:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2022-12-02T16:48:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-07-08T12:55:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "[Video](https://www.youtube.com/watch?v=etwMhIKj0tI\u0026t=0h0m0s)\r\n\r\n* We changed the signature of the params overload to Concat to support extension invocation and look like an easier overload.\r\n* We renamed the `Concat(IEnumerable\u003cIEnumerable\u003cT\u003e\u003e)` to `Flatten` to better describe its use.\r\n\r\n```C#\r\nnamespace System.Linq \r\n{\r\n    public static partial class Enumerable \r\n    {\r\n        public static IEnumerable\u003cTSource\u003e Concat\u003cTSource\u003e(\r\n            this IEnumerable\u003cTSource\u003e first,\r\n             IEnumerable\u003cTSource\u003e second,\r\n             params IEnumerable\u003cTSource\u003e[] rest);\r\n\r\n\r\n        public static IEnumerable\u003cTSource\u003e Flatten\u003cTSource\u003e(this IEnumerable\u003cIEnumerable\u003cTSource\u003e\u003e sources);\r\n    }\r\n\r\n    public static partial class Queryable\r\n    {\r\n        public static IQueryable\u003cTSource\u003e Concat\u003cTSource\u003e(\r\n            this IQueryable\u003cTSource\u003e source1,\r\n             IEnumerable\u003cTSource\u003e source2,\r\n             params IEnumerable\u003cTSource\u003e[] rest);\r\n\r\n\r\n        public static IQueryable\u003cTSource\u003e Flatten\u003cTSource\u003e(this IQueryable\u003cIEnumerable\u003cTSource\u003e\u003e sources);\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2021-10-21T13:13:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ciZk",
                                           "createdAt":  "2021-10-19T18:40:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@bartonjs Why does the `params` overload have the `second` parameter? Couldn\u0027t it be just:\r\n\r\n```c#\r\npublic static IEnumerable\u003cTSource\u003e Concat\u003cTSource\u003e(\r\n    this IEnumerable\u003cTSource\u003e first,\r\n    params IEnumerable\u003cTSource\u003e[] rest);\r\n```",
                                           "updatedAt":  "2021-10-19T18:40:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44coLf",
                                           "createdAt":  "2021-10-19T19:11:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCEPmkw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2021-10-19T19:12:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2021-11-27T07:17:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "@svick we wanted to prevent concatenation with zero parameters, i.e. `first.Concat()`. Technically speaking it\u0027s a valid operation but it doesn\u0027t make a lot of sense.",
                                           "updatedAt":  "2021-10-19T19:11:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44conI",
                                           "createdAt":  "2021-10-19T19:14:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "I just realized that I completely forgot about IQueryable overloads:\r\n```csharp\r\nnamespace System.Linq \r\n{\r\n    public static partial class Queryable\r\n    {\r\n        public static IQueryable\u003cTSource\u003e Concat\u003cTSource\u003e(\r\n            this IQueryable\u003cTSource\u003e source1,\r\n             IEnumerable\u003cTSource\u003e source2,\r\n             params IEnumerable\u003cTSource\u003e[] rest);\r\n\r\n\r\n        public static IQueryable\u003cTSource\u003e Flatten\u003cTSource\u003e(this IQueryable\u003cIEnumerable\u003cTSource\u003e\u003e sources);\r\n    }\r\n}\r\n```\r\n@bartonjs should we be reviewing those seperately?",
                                           "updatedAt":  "2021-10-19T19:14:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44cuQ6",
                                           "createdAt":  "2021-10-19T19:49:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Did we discuss params Span at all? Assuming that shows up in C# 11, would we still use params arrays here, would we add both,  or would we say as a general rule we prefer spans moving forward?",
                                           "updatedAt":  "2021-10-19T19:49:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44c5d9",
                                           "createdAt":  "2021-10-19T20:58:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZxUPA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2021-10-19T21:53:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2021-10-21T11:31:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-07-08T13:17:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "\u003e @bartonjs should we be reviewing those seperately?\r\n\r\nMy recollection is we have a blanket policy of \"oh, right, make queryable look the same as enumerable\"",
                                           "updatedAt":  "2021-10-19T20:58:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44c51p",
                                           "createdAt":  "2021-10-19T21:00:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB--wjA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2021-10-19T21:54:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "\u003e Did we discuss params Span at all? Assuming that shows up in C# 11, would we still use params arrays here, would we add both, or would we say as a general rule we prefer spans moving forward?\r\n\r\nWe did.  Partly it\u0027ll end up depending on what it looks like for those methods to be called by VB/F#.  If it Just Works, then @terrajobst suggested we\u0027d go back and look at new-in-7 API that we could remove the redundancies from.  If it doesn\u0027t just work, then we\u0027ll probably add them in parallel anywhere other than low-level types. ",
                                           "updatedAt":  "2021-10-19T21:01:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45vz5d",
                                           "createdAt":  "2021-11-15T11:53:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked with the `api-needs-work` label. This may suggest that the proposal requires further refinement before it can be considered for API review. Please refer to our [API review guidelines](https://github.com/dotnet/runtime/blob/main/docs/project/api-review-process.md) for a detailed description of the process. \n\nWhen ready to submit an amended proposal, please ensure that the original post in this issue has been updated, following the API proposal template and examples as provided in the guidelines.",
                                           "updatedAt":  "2021-11-15T11:53:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45vz8h",
                                           "createdAt":  "2021-11-15T11:53:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Changed to `api-needs-work` due to feedback in #61230. cc @stephentoub",
                                           "updatedAt":  "2021-11-15T11:53:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46chui",
                                           "createdAt":  "2021-11-27T12:13:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TahirAhmadov",
                                           "body":  "@bartonjs did you consider the solution I proposed [here](https://github.com/dotnet/csharplang/discussions/5477#discussioncomment-1708489) ?",
                                           "updatedAt":  "2021-11-27T12:13:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YP25i",
                                           "createdAt":  "2023-03-23T03:30:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LeaFrock",
                                           "body":  "No progress for .NET 8? Does `IQueryable` block it?",
                                           "updatedAt":  "2023-03-23T03:30:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6McWpA",
                                           "createdAt":  "2024-09-17T15:27:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiw-Rg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Simplifier",
                                                                               "createdAt":  "2025-02-08T18:59:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-07-08T13:20:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Thaina",
                                                                               "createdAt":  "2025-09-18T04:15:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "JBrown526",
                                           "body":  "It would be nice to have a `Flatten()` or parameterless `SelectMany()` implementation at least, as the current usage of `nestedCollections`.SelectMany(x =\u003e x);` never seems particularly intuitive or meaningful for me",
                                           "updatedAt":  "2024-09-17T15:27:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MeZa3",
                                           "createdAt":  "2024-09-17T19:54:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODymHug==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "FaustVX",
                                                                               "createdAt":  "2024-09-17T23:05:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e or I could write:\r\n\u003e \r\n\u003e ```cs\r\n\u003e Command.NameInfo.OnlineAccounts = new[] {\r\n\u003e     Input.WebAddresses.Select(x =\u003e CreateWebAddress(x)),\r\n\u003e     Input.EmailAddresses.Select(x =\u003e CreateEmailAddress(x))\r\n\u003e }.Concat().ToList();\r\n\u003e ```\r\n\r\nWith collection literals and the spread operator, I assume this example would be completely nullified since you can just do:\r\n```csharp\r\nCommand.NameInfo.OnlineAccounts = [\r\n    ..Input.WebAddresses.Select(x =\u003e CreateWebAddress(x)),\r\n    ..Input.EmailAddresses.Select(x =\u003e CreateEmailAddress(x))\r\n];\r\n```\r\n\r\nOr am I missing something?",
                                           "updatedAt":  "2024-09-17T19:54:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FA9oj",
                                           "createdAt":  "2025-09-18T04:17:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thaina",
                                           "body":  "I would like to add my voice to `Flatten()` or parameterless `SelectMany()` too. I think the old BCL was not support this because it lack contravariant feature? If so we now have contravariant it should be allowed?",
                                           "updatedAt":  "2025-09-18T04:17:47Z"
                                       }
                                   ],
                         "totalCount":  26
                     },
        "title":  "[API Proposal]: Add Enumerable.Concat \u0026 Flatten overloads",
        "labels":  [
                       "api-needs-work",
                       "area-System.Linq"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/55138",
        "createdAt":  "2021-07-04T03:54:49Z",
        "number":  55138,
        "author":  "TonyValenti",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_JuQA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2021-07-04T09:32:11Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2021-07-04T09:32:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GerardSmit",
                                            "createdAt":  "2021-07-06T00:14:59Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2021-08-25T13:35:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2022-08-19T05:08:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-06-18T22:33:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Thaina",
                                            "createdAt":  "2024-08-13T08:52:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OronDF343",
                                            "createdAt":  "2025-02-17T08:20:03Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2021-11-16T17:52:27Z",
        "body":  "## Background and Motivation\r\nCurrently the linq ```Min``` and ```Max``` functions throw if the sequence contains no elements.  It would be nice to be able to provide a default value that is used instead.\r\n\r\n## Proposed API\r\n\r\nvar min = Sequence.MinOrDefault(0);\r\nvar max = Sequence.MaxOrDefault(100);\r\n\r\n## Usage Examples\r\nSee Above\r\n\r\n## Alternative Designs\r\nRight now I do nastiness like this:\r\n```\r\nvar MaxOrDefault = (\r\nfrom x in Sequence\r\norder by x descending\r\nselect x\r\n).FirstOrDefault(100); \r\n```\r\n\r\n## Risks\r\nNone that I can think of.\r\n\r\n\r\n@Foxtrek64 - Is this something you think you could get added to the framework?  I\u0027m tagging you because you added the FirstOrDefault(...) and other methods that are in line with this request.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONwE9QA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzUxNjI2OA==",
                                           "createdAt":  "2021-07-04T03:54:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-07-04T03:54:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzUzMDMyNQ==",
                                           "createdAt":  "2021-07-04T06:20:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "You are missing the **Proposed API** section. It\u0027s actually the usage. And your **alternative design** isn\u0027t alternative or workaround - it would still work like that with your proposed API.\r\n\r\nCurrently there are two potentialities:\r\n\r\nOverloading like Min or Max:\r\n```diff\r\nnamespace System.Linq\r\n{\r\n    class Enumerable\r\n    {\r\n+        int MinOrDefault(this IEnumerable\u003cint\u003e source, int defaultValue);\r\n+        long MinOrDefault(this IEnumerable\u003clong\u003e source, long defaultValue);\r\n+        float MinOrDefault(this IEnumerable\u003cfloat\u003e source, float defaultValue);\r\n        // and so on for every numeric type\r\n    }\r\n}\r\n```\r\nThis will keep API consistency, but bloats a lot.\r\n\r\nAn alternative design is to utilize recently merged generic math API. And we should also update Min and Max to utilize it. Then we will get:\r\n```diff\r\nnamespace System.Linq\r\n{\r\n    class Enumerable\r\n    {\r\n+        T Min(this IEnumerable\u003cT\u003e source) where T : IComparisonOperators\u003cT, T\u003e;\r\n+        T MinOrDefault(this IEnumerable\u003cT\u003e source, T defaultValue) where T : IComparisonOperators\u003cT, T\u003e;\r\n+        T Max(this IEnumerable\u003cT\u003e source) where T : IComparisonOperators\u003cT, T\u003e;\r\n+        T MaxOrDefault(this IEnumerable\u003cT\u003e source, T defaultValue) where T : IComparisonOperators\u003cT, T\u003e;\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2021-07-04T06:20:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzUzNTk1MA==",
                                           "createdAt":  "2021-07-04T07:12:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Well, the existing generic overload uses `Comparer\u003cT\u003e.Default`. I\u0027m not sure what\u0027s the design approach on this. I do prefer not to bloat the API with overloads.",
                                           "updatedAt":  "2021-07-04T07:12:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzU0ODQwMA==",
                                           "createdAt":  "2021-07-04T08:47:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I don\u0027t see why any T would implement `IComparisonOperators\u003cT, T\u003e` but not `IComparable\u003cT\u003e`, or why T would implement those as inconsistent with each other. So `Comparer\u003cT\u003e.Default` would be fine semantically and more compatible with existing types. Although I wonder if `IComparisonOperators\u003cT, T\u003e` perhaps enables more inlining.\n\nI don\u0027t remember ever wanting MinOrDefault or MaxOrDefault; where would one use these? Rather, I think I could have used a method that takes an additional element as a separate parameter, e.g. `TSource Max\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source, TSource additionalElement)`. I don\u0027t intend to propose adding that, though.",
                                           "updatedAt":  "2021-07-04T09:28:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzU1MDA0OQ==",
                                           "createdAt":  "2021-07-04T09:00:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBxKcAA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mrxx99",
                                                                               "createdAt":  "2021-07-04T09:31:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "TheBrambleShark",
                                           "body":  "If this is approved, I\u0027d be happy to implement it.\n\nThat said, I agree with Kalle. This is a situation I\u0027ve run into only once or twice and I think my first thought would be something like\n\n```cs\nvar max = myList.Any() ? myList.Max() : -1;\n```\n\nI could be misunderstanding your use case for this though. ",
                                           "updatedAt":  "2021-07-04T09:00:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzU1NDA5OQ==",
                                           "createdAt":  "2021-07-04T09:31:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbV6Lw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2021-07-04T10:14:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2021-07-04T11:15:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "acaly",
                                                                               "createdAt":  "2021-07-04T18:46:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andrewjsaid",
                                                                               "createdAt":  "2023-09-24T12:29:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2024-03-21T03:01:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e I don\u0027t remember ever wanting MinOrDefault or MaxOrDefault\r\n\r\nWell, there is a simple and straight workaround: `source.DefaultIfEmpty(defaultValue).Max()`",
                                           "updatedAt":  "2021-07-04T09:31:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzYwOTQwMQ==",
                                           "createdAt":  "2021-07-04T15:12:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\nCurrently the linq ```Min``` and ```Max``` functions throw if the sequence contains no elements.  It would be nice to be able to provide a default value that is used instead.\r\n\r\n## Proposed API\r\n\r\nvar min = Sequence.MinOrDefault(0);\r\nvar max = Sequence.MaxOrDefault(100);\r\n\r\n## Usage Examples\r\nSee Above\r\n\r\n## Alternative Designs\r\nRight now I do nastiness like this:\r\n```\r\nvar MaxOrDefault = (\r\nfrom x in Sequence\r\norder by x descending\r\nselect x\r\n).FirstOrDefault(100); \r\n```\r\n\r\n## Risks\r\nNone that I can think of.\r\n\r\n\r\n@Foxtrek64 - Is this something you think you could get added to the framework?  I\u0027m tagging you because you added the FirstOrDefault(...) and other methods that are in line with this request.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTonyValenti\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Linq`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-04T15:12:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MzcyMjE1NA==",
                                           "createdAt":  "2021-07-05T01:45:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheBrambleShark",
                                           "body":  "\u003e \r\n\u003e \r\n\u003e I don\u0027t see why any T would implement `IComparisonOperators\u003cT, T\u003e` but not `IComparable\u003cT\u003e`, or why T would implement those as inconsistent with each other. So `Comparer\u003cT\u003e.Default` would be fine semantically and more compatible with existing types. Although I wonder if `IComparisonOperators\u003cT, T\u003e` perhaps enables more inlining.\r\n\u003e \r\n\u003e I don\u0027t remember ever wanting MinOrDefault or MaxOrDefault; where would one use these? Rather, I think I could have used a method that takes an additional element as a separate parameter, e.g. `TSource Max\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source, TSource additionalElement)`. I don\u0027t intend to propose adding that, though.\r\n\r\nFirst/Last/Single use generics\r\n\r\n```cs\r\npublic static TSource FirstOrDefault\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source, TSource defaultValue);\r\n```\r\n\r\nI think we can leverage that plus `IComparable\u003cTSource\u003e` and call it good, which is probably how I would write it.\r\nIf `IComparisonOperator\u003cT, T\u003e` adds any special features that may be leveraged here, I may use that here instead.\r\n\r\n```cs\r\npublic static partial class Enumerable\r\n{\r\n    public static TSource Max\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source)\r\n        where TSource : IComparable\u003cTSource\u003e\r\n    {\r\n        TSource? max = source.TryGetMax(out bool found);\r\n        if (!found)\r\n        {\r\n            ThrowHelper.ThrowNoElementsException();\r\n        }\r\n\r\n        return max!;\r\n    }\r\n\r\n    public static TSource? MaxOrDefault\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source) \r\n        where TSource : IComparable\u003cTSource\u003e\r\n        =\u003e source.TryGetMax(out _);\r\n\r\n    public static TSource MaxOrDefault\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source, TSource defaultValue)\r\n        where TSource : IComparable\u003cTSource\u003e\r\n    {\r\n        TSource? max = source.TryGetMax(out bool found);\r\n        return found ? max! : defaultValue;\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2021-07-05T01:47:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43AT1A",
                                           "createdAt":  "2021-09-20T11:04:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB7AimA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2021-09-20T15:18:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "YohDeadfall",
                                           "body":  "I don\u0027t think than limiting `TSource` to any constraint makes sense anymore. `Comparer\u003cT\u003e.Default.Compare(T, T)` is devirtualized (see #39873), so codegen should be fine. It was an issue during first days of LINQ, during .NET Framework times, where there was a need in a quick implementation and the need was mostly in basic types, but not now days. Moreover, the last proposed API will require a proper null handling, not a big deal, but still this is already implemented by comparers itself.\r\n\r\nIn addition, I think that it should be possible to get `Max` and `Min` values by a different condition than the default comparer provides, or allow handling of types from external libraries which has no comparers and not comparable  without writing any wrapper.\r\n\r\nTherefore\u003c I propose the following API:\r\n\r\n```csharp\r\npublic static partial class Enumerable\r\n{\r\n    public static TSource Max\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source, IComparer\u003cTSource\u003e? comparer = null)\r\n    {\r\n        TSource? max = source.TryGetMax(comparer, out bool found);\r\n        if (!found)\r\n        {\r\n            ThrowHelper.ThrowNoElementsException();\r\n        }\r\n\r\n        return max!;\r\n    }\r\n\r\n    public static TSource? MaxOrDefault\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source, IComparer\u003cTSource\u003e? comparer = null)\r\n        =\u003e source.TryGetMax(comparer, out _);\r\n\r\n    public static TSource MaxOrDefault\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source, TSource defaultValue, IComparer\u003cTSource\u003e? comparer = null)\r\n    {\r\n        TSource? max = source.TryGetMax(comparer, out bool found);\r\n        return found ? max! : defaultValue;\r\n    }\r\n}\r\n```\r\n\r\nIt can be used instead of `OrderBy(...)` followed by `First()` or `FirstByDefault()`.",
                                           "updatedAt":  "2021-09-20T11:04:55Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "MinOrDefault / MaxOrDefault",
        "labels":  [
                       "api-needs-work",
                       "area-System.Linq",
                       "wishlist"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58591",
        "createdAt":  "2021-09-02T22:58:17Z",
        "number":  58591,
        "author":  "chucker",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCyBfmg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eiriktsarpalis",
                                            "createdAt":  "2021-09-03T08:24:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "reflectronic",
                                            "createdAt":  "2021-09-03T15:12:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MineCake147E",
                                            "createdAt":  "2023-08-18T03:09:23Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2022-11-10T01:56:09Z",
        "body":  "**Brief description:**\r\n\r\nLINQ has `OrderBy` and `OrderByDescending` methods. One might be tempted to chain calls of those to order by multiple fields. However, subsequent calls result in only the final call having an effect.\r\n\r\nAn analyzer should detect such incorrect uses, and a fixer should offer replacing them with `ThenBy` and `ThenByDescending`.\r\n\r\n**Languages applicable:**\r\n\r\nC# 10, VB 16.9\r\n\r\n**Code example that the analyzer should report:**\r\n\r\n```csharp\r\nvar q = Customers\r\n        .OrderByDescending(c =\u003e c.RankTotalRevenues)\r\n        .OrderBy(c =\u003e c.Name); // warn here\r\n```\r\n\r\nProposed warning text: \"Do not call \u0027OrderBy\u0027 or \u0027OrderByDescending\u0027 multiple times. Only the last call would have an effect. Instead, for subsequent calls, use \u0027ThenBy\u0027 and \u0027ThenByDecending\u0027.\"\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONs4mvA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42Xcis",
                                           "createdAt":  "2021-09-02T22:58:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-09-02T22:58:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42XfU8",
                                           "createdAt":  "2021-09-02T23:24:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n**Brief description:**\r\n\r\nLINQ has `OrderBy` and `OrderByDescending` methods. One might be tempted to chain calls of those to order by multiple fields. However, subsequent calls result in only the final call having an effect.\r\n\r\nAn analyzer should detect such incorrect uses, and a fixer should offer replacing them with `ThenBy` and `ThenByDescending`.\r\n\r\n**Languages applicable:**\r\n\r\nC# 10, VB 16.9\r\n\r\n**Code example that the analyzer should report:**\r\n\r\n```csharp\r\nvar q = Customers\r\n        .OrderByDescending(c =\u003e c.RankTotalRevenues)\r\n        .OrderBy(c =\u003e c.Name); // warn here\r\n```\r\n\r\nProposed warning text: \"Do not call \u0027OrderBy\u0027 or \u0027OrderByDescending\u0027 multiple times. Only the last call would have an effect. Instead, for subsequent calls, use \u0027ThenBy\u0027 and \u0027ThenByDecending\u0027.\"\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003echucker\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq`, `untriaged`, `code-analyzer`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-02T23:24:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42zgFX",
                                           "createdAt":  "2021-09-14T19:59:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Thanks for the proposal, @chucker. A couple of questions:\r\n\r\n- Should this analyzer _only_ warn if the `OrderBy`/`OrderByDescending` calls are chained next to each other? What about a case like the following?:\r\n\r\n```cs\r\nvar q = Customers\r\n        .OrderByDescending(c =\u003e c.RankTotalRevenues)\r\n        .Where(c =\u003e some condition)\r\n        .OrderBy(c =\u003e c.Name); // should we warn here?\r\n```\r\n\r\n- There are multiple overloads of [OrderBy](https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.orderby?view=net-5.0) and [OrderByDescending](https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.orderbydescending?view=net-5.0). How should the analyzer and the fixer behave when they encounter the different combination of possible parameters in those overloads?\r\n\r\ncc @eiriktsarpalis @layomia\r\n\r\n",
                                           "updatedAt":  "2021-09-14T19:59:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42zia8",
                                           "createdAt":  "2021-09-14T20:13:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chucker",
                                           "body":  "Great questions!\r\n\r\n\u003eShould this analyzer only warn if the OrderBy/OrderByDescending calls are chained next to each other? What about a case like the following?:\r\n\r\nI don\u0027t believe that `OrderBy` ever affects `Where`. Maybe I\u0027m mistaken?\r\n\r\nHowever, regarding the first question, there are two trickier cases:\r\n\r\n**1**\r\n\r\n```csharp\r\nvar customersByName = Customers.OrderBy(c =\u003e c.Name);\r\n\r\n// we\u0027re taking a query that\u0027s _already_ ordered and then ordering it differently\r\nvar customersByRevenue = customersByName.OrderByDescending(c =\u003e c.RankTotalRevenues) // should we warn here?\r\n```\r\n\r\nMy original hunch about this one was that we should warn. But in the above scenario, the behavior may be intended by the developer: they simply want two different sort orders. If the behavior _is_ intended, I can\u0027t think of a way for the developer to signal that.\r\n\r\n(Plus, what if `customersByName` gets produced in an entirely different method, which implicitly returns an `IOrderedEnumerable`?)\r\n\r\n**2**\r\n\r\nYour code led me to another tricky case:\r\n\r\n```csharp\r\nvar q = Customers\r\n        .OrderByDescending(c =\u003e c.RankTotalRevenues)\r\n        .ToList()\r\n        .OrderBy(c =\u003e c.Name); // should we warn here?\r\n```\r\n\r\nThis is subtly different. `ToList()` will force the enumerable to materialize; e.g., if it is LINQ to SQL, it will actually perform a `SELECT … ORDER BY` query. `OrderBy` will then order a second time, by name. This may be intentional behavior by the dev, such as to take advantage of certain indexes.\r\n\r\nAnd, surely if `Take()` is used, the original order is _definitely_ relevant (`SELECT TOP 5 … ORDER BY x`, then order again).\r\n\r\nTherefore, TL;DR:\r\n\r\n\u003e Should this analyzer only warn if the OrderBy/OrderByDescending calls are chained next to each other?\r\n\r\nFor the above reasons (and probably more), I think the answer is yes, we should _only_ warn if they are immediately chained next to each other, even though we\u0027d have some false negatives.\r\n\r\n-----\r\n\r\n\u003e There are multiple overloads of OrderBy and OrderByDescending. How should the analyzer and the fixer behave when they encounter the different combination of possible parameters in those overloads?\r\n\r\nI took a look, and the overloads seem to be equivalent to the ones for `ThenBy` and `ThenByDescending`. So IMHO, the answer to this one is quite simply: the symbol name of the method invocation gets replaced; the actual parameters remain as is.",
                                           "updatedAt":  "2021-09-14T20:13:54Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[Analyzer Proposal] Warn on subsequent OrderBy calls; fix those into ThenBy",
        "labels":  [
                       "api-suggestion",
                       "area-System.Linq",
                       "code-analyzer"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59599",
        "createdAt":  "2021-09-25T09:29:21Z",
        "number":  59599,
        "author":  "GSPP",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCOFZfA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "am11",
                                            "createdAt":  "2021-09-25T10:02:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MihaZupan",
                                            "createdAt":  "2021-09-25T16:02:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yyjdelete",
                                            "createdAt":  "2021-09-26T02:38:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "strangeman375",
                                            "createdAt":  "2021-09-26T13:47:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "theodorzoulias",
                                            "createdAt":  "2022-02-10T16:34:41Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2021-11-01T18:28:12Z",
        "body":  "Certain `Enumerable` methods naturally produce their results in the same order that the source sequence provided them in. All sensible implementations that I can think of guarantee the same order. For me, no future optimizations or features come to mind that would break this.\r\n\r\nCurrently, this behavior has the status of an implementation detail because it is not documented.\r\n\r\nThe methods `Enumerable.Select/Where` and possibly others should guarantee output order and that fact should be documented. This would allow developers to rely on this behavior. And this behavior is very useful in quite a few situations.\r\n\r\nThis behavior is effectively forced already because so much existing code relies on this. For compatibility reasons, this could never be changed anyway. Any change would cause massive breakage.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHON5uWKA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43QleY",
                                           "createdAt":  "2021-09-25T09:29:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCertain `Enumerable` methods naturally produce their results in the same order that the source sequence provided them in. All sensible implementations that come to mind guarantee the same order. No future optimizations or features come to mind that would break this.\r\n\r\nCurrently, this behavior has the status of an implementation detail because it is not documented.\r\n\r\nThe methods `Enumerable.Select/Where` and possibly others should guarantee output order and that fact should be documented. This would allow developers to rely on this behavior.\r\n\r\nThis behavior is effectively forced already because so much existing code relies on this. For compatibility reasons, this could never be changed anyway. Any change would cause massive breakage.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eGSPP\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-25T09:29:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43RDf-",
                                           "createdAt":  "2021-09-26T02:39:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yyjdelete",
                                           "body":  "+1, and today `Distinct` also keep the same order as input.",
                                           "updatedAt":  "2021-09-26T02:39:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43RPgg",
                                           "createdAt":  "2021-09-26T09:17:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCn2LEg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theodorzoulias",
                                                                               "createdAt":  "2022-07-21T12:47:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Another useful property to guarantee and document: These iterators emit their results eagerly as soon as input items are consumed. This is in contrast to a possible behavior to consume everything and only then start emitting.\r\n\r\nThis behavior also seems necessary for any sensible implementation and surely it is being relied upon by many. I suggest that this be guaranteed and documented also.\r\n",
                                           "updatedAt":  "2021-09-26T09:17:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Ty0z",
                                           "createdAt":  "2021-09-27T14:35:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Yes, it is certainly the case that canonical Select and Where-like implementations acting on iterators are \"naturally\" monotonic, so it makes sense to document and test for that fact in `IEnumerable\u003cT\u003e` implementations. @GSPP would you be interested in contributing that?\r\n\r\nFWIW it is not necessarily true for other data structures: for example the canonical Select and Where-like implementations acting on immutable stacks produce stacks with inverted order (unless additional space is used to reverse the final outcome). So this begs the question: what if anything would we be able to say about the guarantees offered by the `IQueryable\u003cT\u003e` Select and Where methods?",
                                           "updatedAt":  "2021-09-27T14:35:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43m5Yo",
                                           "createdAt":  "2021-10-03T12:42:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "I will not be able to take this on but I thought I\u0027d write up the idea and make a proposal.",
                                           "updatedAt":  "2021-10-03T12:42:58Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Enumerable.Select/Where should guarantee the order of results",
        "labels":  [
                       "documentation",
                       "area-System.Linq",
                       "wishlist"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64031",
        "createdAt":  "2022-01-20T08:01:06Z",
        "number":  64031,
        "author":  "alrz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODRoUWQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "theolivenbaum",
                                            "createdAt":  "2022-01-20T09:15:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hez2010",
                                            "createdAt":  "2022-01-20T12:26:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2022-01-20T12:27:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "huoyaoyuan",
                                            "createdAt":  "2022-01-20T13:04:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2022-01-20T13:07:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GalaxiaGuy",
                                            "createdAt":  "2022-01-20T18:47:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "grbell-ms",
                                            "createdAt":  "2022-01-20T22:38:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "giladfrid009",
                                            "createdAt":  "2022-01-21T09:55:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Enderlook",
                                            "createdAt":  "2022-02-02T14:56:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Unknown6656",
                                            "createdAt":  "2022-02-12T18:44:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xparadoxical",
                                            "createdAt":  "2022-04-19T03:19:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "svick",
                                            "createdAt":  "2022-07-10T16:19:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2022-07-11T14:37:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gurustron",
                                            "createdAt":  "2022-09-30T10:52:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "boriseetgerink",
                                            "createdAt":  "2022-10-13T19:38:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Iviyan",
                                            "createdAt":  "2022-11-11T16:37:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Oblomoff",
                                            "createdAt":  "2022-11-11T20:17:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mgernand",
                                            "createdAt":  "2022-11-13T17:02:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Timovzl",
                                            "createdAt":  "2022-12-05T19:36:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Code-Chops",
                                            "createdAt":  "2022-12-05T19:37:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kzrnm",
                                            "createdAt":  "2023-01-08T03:16:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2023-04-20T18:17:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xiety",
                                            "createdAt":  "2023-06-05T09:59:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BYTESHAUS",
                                            "createdAt":  "2023-08-12T16:09:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2023-08-17T08:13:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kasanami",
                                            "createdAt":  "2023-08-17T08:30:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tan90909090",
                                            "createdAt":  "2023-08-17T11:22:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-08-12T12:49:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kevin-d-omara",
                                            "createdAt":  "2024-08-12T20:05:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aradalvand",
                                            "createdAt":  "2024-08-24T07:02:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-08-26T15:13:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Chris-Culter-Fulfil",
                                            "createdAt":  "2024-09-19T05:10:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DevTKSS",
                                            "createdAt":  "2025-06-01T16:40:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "voroninp",
                                            "createdAt":  "2025-07-14T09:22:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Athari",
                                            "createdAt":  "2025-07-19T00:13:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bcallaghan-et",
                                            "createdAt":  "2025-08-06T17:36:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xriuk",
                                            "createdAt":  "2025-09-18T14:54:25Z"
                                        }
                                    ],
                          "totalCount":  37
                      },
        "updatedAt":  "2024-08-27T09:01:56Z",
        "body":  "### Background and motivation\r\n\r\nWith the introduction of generic operators it\u0027s expected to be able to use LINQ over numeric sequences in a generic manner.\r\nAdditionally this can be considered for extensions on other list-like types.\r\n\r\nRelates to https://github.com/dotnet/runtime/issues/63732\r\n\r\n\r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace System.Linq\r\n{\r\n    public static class Enumerable\r\n    {\r\n        public static T Sum\u003cT\u003e(this IEnumerable\u003cT\u003e source) where T : IAdditionOperators\u003cT, T, T\u003e, IAdditiveIdentity\u003cT, T\u003e;\r\n        public static IEnumerable\u003cT\u003e Range\u003cT, TStep\u003e(T start, T end, TStep step) where ...;\r\n        public static T Min\u003cT\u003e(this IEnumerable\u003cT\u003e source) where T : ..;\r\n        public static T Max\u003cT\u003e(this IEnumerable\u003cT\u003e source) where T : ..;\r\n        // The result value is most likely floating-point. Should it be generic?\r\n        // If so, is it possible for type inference to pick an appropriate type?\r\n        public static T Average\u003cT\u003e(this IEnumerable\u003cT\u003e source) where T : ..;\r\n        // ..\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```C#\r\nIEnumerable\u003cT\u003e numericSeq = e;\r\nT sum = numericSeq.Sum();\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOic220Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc48oWJd",
                                           "createdAt":  "2022-01-20T08:01:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nWith the introduction of generic operators it\u0027s expected to be able to use LINQ over numeric sequences in a generic manner.\r\n\r\nThis relates to https://github.com/dotnet/runtime/issues/63732 where new constraints are being discussed for `T.Min`/`T.Max` etc.\r\n\r\n\n\n### API Proposal\n\n```C#\r\nnamespace System.Linq\r\n{\r\n    public static class Enumerable\r\n    {\r\n        public static T Sum\u003cT\u003e(this IEnumerable\u003cT\u003e source) where T : IAdditionOperators\u003cT, T, T\u003e;\r\n        public static T Min\u003cT\u003e(this IEnumerable\u003cT\u003e source) where T : ..;\r\n        public static T Max\u003cT\u003e(this IEnumerable\u003cT\u003e source) where T : ..;\r\n        // The result value is most likely floating-point. Should it be generic?\r\n        // If so, is it possible for type inference to pick an appropriate type?\r\n        public static T Average\u003cT\u003e(this IEnumerable\u003cT\u003e source) where T : ..;\r\n        // ..\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```C#\r\nIEnumerable\u003cT\u003e numericSeq = e;\r\nT sum = numericSeq.Sum();\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ealrz\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Linq`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-20T08:01:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48oWmu",
                                           "createdAt":  "2022-01-20T08:03:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alrz",
                                           "body":  "cc @tannergooding ",
                                           "updatedAt":  "2022-01-20T08:03:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48tKTd",
                                           "createdAt":  "2022-01-21T12:41:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Echoing @tannergooding\u0027s comments in https://github.com/dotnet/runtime/issues/63732#issuecomment-1012258457 wouldn\u0027t adding such overloads break overload resolution?",
                                           "updatedAt":  "2022-01-21T12:41:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48_k9W",
                                           "createdAt":  "2022-01-27T14:59:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvs7mQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alrz",
                                                                               "createdAt":  "2022-02-14T23:53:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mrxx99",
                                                                               "createdAt":  "2023-08-17T08:14:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-08-12T12:49:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-08-26T15:13:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "Joe4evr",
                                           "body":  "\u003e wouldn\u0027t adding such overloads break overload resolution?\r\n\r\nI wouldn\u0027t think so. The current overloads (taking `IEnumerable\u003c{int|long|float|double|decimal}(?)\u003e`) should be more specific than `IEnumerable\u003cT\u003e where T : ...`. The example Tanner gives in that comment concerns an implicit conversion from `int` to `double` (because some functions like `Sqrt` are only available on `double` so that\u0027s what passing an `int` binds to today), which is allowed for a single value, [but an `IEnumerable\u003cint\u003e` can\u0027t implicitly convert to `IEnumerable\u003cdouble\u003e`](https://sharplab.io/#v2:EYLgtghglgdgNAFxANwKYCcoDMCeAfAAQAYACAgRgBYBuAWACgCBmMgJhIGEGBvBk/siwKUSAWQAUASj4De9AQrLkmAHgAmAewCuwADaoAfCTUBnEgF5+MVAHcSsBAG0AuiW4kmcEpS8BWEgC+dPICAQwBQA) so the `\u003cint\u003e` case should keep binding to the existing `\u003cint\u003e` overload even if a generic constrained overload is introduced.",
                                           "updatedAt":  "2022-01-27T14:59:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GUcfU",
                                           "createdAt":  "2022-07-10T17:07:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "I specifically had this need considering how to represent a sum of time intervals operation for translation to SQL with EF Core. A generic Sum method would be perfect for that (TimeSpan would also to implement the appropriate interfaces as well). Of course we\u0027d need queryable versions of these operators.\r\n\r\n",
                                           "updatedAt":  "2022-07-10T17:07:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5P69IQ",
                                           "createdAt":  "2022-12-07T11:50:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODtrImg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kzrnm",
                                                                               "createdAt":  "2023-01-08T03:16:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mrxx99",
                                                                               "createdAt":  "2023-08-17T08:14:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-08-12T12:49:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Timovzl",
                                           "body":  "The selector-based overloads ([example](https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.sum?view=net-7.0#system-linq-enumerable-sum-1(system-collections-generic-ienumerable((-0))-system-func((-0-system-int32))))) seem to be missing from the API proposal.\r\n\r\n```cs\r\npublic static T Sum\u003cTSource, T\u003e (this IEnumerable\u003cTSource\u003e source, Func\u003cTSource, T\u003e selector) \r\n    where T : IAdditionOperators\u003cT, T, T\u003e, IAdditiveIdentity\u003cT, T\u003e;\r\n```\r\n\r\nEspecially for these, perhaps a more descriptive name for `T` is in order, although I haven\u0027t come up with one so far.",
                                           "updatedAt":  "2022-12-07T11:50:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jk7_7",
                                           "createdAt":  "2024-08-24T07:13:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvi_hQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "xiety",
                                                                               "createdAt":  "2024-08-24T07:59:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "aradalvand",
                                           "body":  "Why hasn\u0027t this been done already? Genuine question. We\u0027ve had generic math for a few years now. Was there a reason implemented right away?",
                                           "updatedAt":  "2024-08-24T08:44:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JlBl-",
                                           "createdAt":  "2024-08-24T08:12:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvy6QA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2024-08-27T08:55:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "@aradalvand that kind of comment isn\u0027t helpful; engineering resources are always limited, and decisions must be made on what\u0027s more important. I do agree this issue needs to be done at some point, but given that LINQ operators exist for the major numeric types, it doesn\u0027t seem very urgent. This seems to be confirmed by the fact that there are only 30 votes on this issue since it was opened 2.5 years ago.",
                                           "updatedAt":  "2024-08-24T08:12:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JlIhx",
                                           "createdAt":  "2024-08-24T08:44:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aradalvand",
                                           "body":  "@roji I may have worded that badly; I was just curious to know if there\u0027s any other problem currently blocking this or something. Similar to how, for example, there doesn\u0027t seem to be a consensus on whether `TimeSpan` should implement generic math interfaces (see #76225). I was wondering if there was a lingering question mark of that kind here as well, which may be the reason for it not having already been implemented because it seems pretty trivial and obvious on the surface.",
                                           "updatedAt":  "2024-08-24T08:45:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JzbbR",
                                           "createdAt":  "2024-08-27T09:01:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODv1y7g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2024-08-27T09:31:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-08-27T14:56:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e Why hasn\u0027t this been done already? Genuine question.\r\n\r\nThe short answer is resourcing, somebody needs to take the time to prototype generic math methods and importantly examine how new overloads might interact with existing ones in terms of breaking changes etc. It\u0027s also not entirely clear to me how generic math (or static abstracts in general) would interact with the `IQueryable` APIs since they typically invoke their `IEnumerable` counterparts using reflection. Perhaps this is an already solved problem, but again somebody needs to work this out before we bring the proposal in for review. We\u0027re happy to consider community driven prototypes, they typically create momentum for a proposal becoming mature enough and getting prioritized.",
                                           "updatedAt":  "2024-08-27T09:01:56Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "API Proposal: Generic LINQ Numeric Operators",
        "labels":  [
                       "api-suggestion",
                       "area-System.Linq"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68625",
        "createdAt":  "2022-04-27T21:59:11Z",
        "number":  68625,
        "author":  "frankshearar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODKapGg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "am11",
                                            "createdAt":  "2022-04-28T18:54:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DrkWzrd",
                                            "createdAt":  "2022-04-29T15:45:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vladd",
                                            "createdAt":  "2022-06-23T08:14:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2022-07-08T13:35:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "theodorzoulias",
                                            "createdAt":  "2022-07-21T09:53:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "viceroypenguin",
                                            "createdAt":  "2022-11-04T22:48:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dthemg",
                                            "createdAt":  "2024-06-05T13:18:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EamonNerbonne",
                                            "createdAt":  "2025-03-12T07:51:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tuscen",
                                            "createdAt":  "2025-08-08T08:17:45Z"
                                        }
                                    ],
                          "totalCount":  9
                      },
        "updatedAt":  "2022-07-21T10:05:02Z",
        "body":  "### Background and motivation\n\nAggregate takes a collection of values and uses a fold to accumulate all these values together. Scan returns the [prefix sum](https://en.wikipedia.org/wiki/Prefix_sum): the sequence of partial accumulations, including the final complete accumulation.\r\n\r\nThis new API would add to C# functionality that already exists in F#, through List.scan/Seq.scan.\r\n\r\n\"Scan\" is a familiar term in the functional programming community (hence F#\u0027s naming), but LINQ has followed a more SQL-like naming convention (Select instead of map, Where instead of filter). I\u0027m not aware of a SQL equivalent to Scan. (Scan isn\u0027t a very \"operates on sets\" type primitive; it\u0027s much more cursor-like.)\n\n### API Proposal\n\n```C#\r\nnamespace System.Collections.Generic\r\n{\r\n    public static partial class Enumerable\r\n    {\r\n        public static IEnumerable\u003cTAccumulate\u003e Scan\u003cTSource, TAccumulate\u003e(this IEnumerable\u003cTSource\u003e source, Func\u003cTAccumulate, TSource, TAccumulate\u003e func);\r\n\r\n        public static IEnumerable\u003cTAccumulate\u003e Scan\u003cTSource, TAccumulate\u003e(this IEnumerable\u003cTSource\u003e source, TAccumulate seed, Func\u003cTAccumulate, TSource, TAccumulate\u003e func);\r\n\r\n        public static IEnumerable\u003cTResult\u003e Scan\u003cTSource, TAccumulate, TResult\u003e(this IEnumerable\u003cTSource\u003e source, TAccumulate seed, Func\u003cTAccumulate, TSource, TAccumulate\u003e func, Func\u003cTAccumulate, TResult\u003e resultSelector)\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```C#\r\n[Fact]\r\npublic void Scan_EmptySource_ReturnsEmptyResult()\r\n    =\u003e Assert.Empty(Enumerable.Empty\u003cint\u003e().Scan(0, (acc, each) =\u003e acc + each));\r\n\r\n[Fact]\r\npublic void Scan_Source_ReturnsAllPartialAggregates()\r\n{\r\n    var source = new[] { 0, 1, 2, 3 };\r\n\r\n    Assert.Collection(\r\n        source.Scan(0, (acc, each) =\u003e acc + each),\r\n        x =\u003e Assert.Equal(0, x),\r\n        x =\u003e Assert.Equal(0 + 1, x),\r\n        x =\u003e Assert.Equal(0 + 1 + 2, x),\r\n        x =\u003e Assert.Equal(0 + 1 + 2 + 3, x));\r\n}\r\n\r\n[Fact]\r\npublic void Scan_SourceWithProjection_ReturnsAllProjectedPartialAggregates()\r\n{\r\n    var source = new[] { 0, 1, 2, 3 };\r\n\r\n    Assert.Collection(\r\n        source.Scan(0, (acc, each) =\u003e acc + each, x =\u003e x.ToString(CultureInfo.InvariantCulture)),\r\n        x =\u003e Assert.Equal(0.ToString(CultureInfo.InvariantCulture), x),\r\n        x =\u003e Assert.Equal((0 + 1).ToString(CultureInfo.InvariantCulture), x),\r\n        x =\u003e Assert.Equal((0 + 1 + 2).ToString(CultureInfo.InvariantCulture), x),\r\n        x =\u003e Assert.Equal((0 + 1 + 2 + 3).ToString(CultureInfo.InvariantCulture), x));\r\n}\r\n```\r\n\n\n### Alternative Designs\n\nScan is equivalent to\r\n```csharp\r\nsource.Select((x, i) =\u003e source.Take(i + 1)).Select(prefix =\u003e prefix.Aggregate(seed, func));\r\n```\r\nbut of course linear rather than quadratic.\r\n\r\nIt\u0027s a somewhat specialized form of Select:\r\n```csharp\r\nvar seed = something;\r\nsource.Select(each =\u003e\r\n    {\r\n        var next = func(seed, each);\r\n        seed = next;\r\n        return next;\r\n    })\r\n```\n\n### Risks\n\nScan is a pretty useful tool, so like Chunk() it runs the risk of forcing folks upgrading to delete their local implementations.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORwG5IQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5CQIHm",
                                           "createdAt":  "2022-04-27T21:59:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nAggregate takes a collection of values and uses a fold to accumulate all these values together. Scan returns the [prefix sum](https://en.wikipedia.org/wiki/Prefix_sum): the sequence of partial accumulations, including the final complete accumulation.\r\n\r\nThis new API would add to C# functionality that already exists in F#, through List.scan/Seq.scan.\r\n\r\n\"Scan\" is a familiar term in the functional programming community (hence F#\u0027s naming), but LINQ has followed a more SQL-like naming convention (Select instead of map, Where instead of filter). I\u0027m not aware of a SQL equivalent to Scan. (Scan isn\u0027t a very \"operates on sets\" type primitive; it\u0027s much more cursor-like.)\n\n### API Proposal\n\n```C#\r\nnamespace System.Collections.Generic\r\n{\r\n    public static partial class Enumerable\r\n    {\r\n        public static IEnumerable\u003cTAccumulate\u003e Scan\u003cTSource, TAccumulate\u003e(this IEnumerable\u003cTSource\u003e source, Func\u003cTAccumulate, TSource, TAccumulate\u003e func);\r\n\r\n        public static IEnumerable\u003cTAccumulate\u003e Scan\u003cTSource, TAccumulate\u003e(this IEnumerable\u003cTSource\u003e source, TAccumulate seed, Func\u003cTAccumulate, TSource, TAccumulate\u003e func);\r\n\r\n        public static IEnumerable\u003cTResult\u003e Scan\u003cTSource, TAccumulate, TResult\u003e(this IEnumerable\u003cTSource\u003e source, TAccumulate seed, Func\u003cTAccumulate, TSource, TAccumulate\u003e func, Func\u003cTAccumulate, TResult\u003e resultSelector)\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```C#\r\n[Fact]\r\npublic void Scan_EmptySource_ReturnsEmptyResult()\r\n    =\u003e Assert.Empty(Enumerable.Empty\u003cint\u003e().Scan(0, (acc, each) =\u003e acc + each));\r\n\r\n[Fact]\r\npublic void Scan_Source_ReturnsAllPartialAggregates()\r\n{\r\n    var source = new[] { 0, 1, 2, 3 };\r\n\r\n    Assert.Collection(\r\n        source.Scan(0, (acc, each) =\u003e acc + each),\r\n        x =\u003e Assert.Equal(0, x),\r\n        x =\u003e Assert.Equal(0 + 1, x),\r\n        x =\u003e Assert.Equal(0 + 1 + 2, x),\r\n        x =\u003e Assert.Equal(0 + 1 + 2 + 3, x));\r\n}\r\n\r\n[Fact]\r\npublic void Scan_SourceWithProjection_ReturnsAllProjectedPartialAggregates()\r\n{\r\n    var source = new[] { 0, 1, 2, 3 };\r\n\r\n    Assert.Collection(\r\n        source.Scan(0, (acc, each) =\u003e acc + each, x =\u003e x.ToString(CultureInfo.InvariantCulture)),\r\n        x =\u003e Assert.Equal(0.ToString(CultureInfo.InvariantCulture), x),\r\n        x =\u003e Assert.Equal((0 + 1).ToString(CultureInfo.InvariantCulture), x),\r\n        x =\u003e Assert.Equal((0 + 1 + 2).ToString(CultureInfo.InvariantCulture), x),\r\n        x =\u003e Assert.Equal((0 + 1 + 2 + 3).ToString(CultureInfo.InvariantCulture), x));\r\n}\r\n```\r\n\n\n### Alternative Designs\n\nScan is equivalent to\r\n```csharp\r\nsource.Select((x, i) =\u003e source.Take(i + 1)).Select(prefix =\u003e prefix.Aggregate(seed, func));\r\n```\r\nbut of course linear rather than quadratic.\r\n\r\nIt\u0027s a somewhat specialized form of Select:\r\n```csharp\r\nvar seed = something;\r\nsource.Select(each =\u003e\r\n    {\r\n        var next = func(seed, each);\r\n        seed = next;\r\n        return next;\r\n    })\r\n```\n\n### Risks\n\nScan is a pretty useful tool, so like Chunk() it runs the risk of forcing folks upgrading to delete their local implementations.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efrankshearar\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Linq`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-27T21:59:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CSHr4",
                                           "createdAt":  "2022-04-28T10:33:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "TBH I\u0027ve never found much use for `Seq.scan` in F#. Could you share a few applications where you feel it might be relevant?\r\n\r\nThis is somewhat related to #20330. The size of `System.Linq` is generally something we are concerned about, so we want to avoid adding new methods unless there is high potential for impact. What\u0027s more, all methods in `System.Linq` returning `IEnumerable` need to define an `IQueryable` equivalent, so the fact that this doesn\u0027t naturally map to SQL means that we likely wouldn\u0027t be considering this. \r\n\r\nIf I\u0027m honest, this feels like the type of method that is better suited for Linq extensions libraries.",
                                           "updatedAt":  "2022-04-28T10:33:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CSO3U",
                                           "createdAt":  "2022-04-28T11:09:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdEHkw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2025-08-04T21:05:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "The SQL `SUM(column) OVER(grouping)` expression produces a partial sum, so there is a mechanism to map this to SQL.",
                                           "updatedAt":  "2022-04-28T11:09:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CUCJm",
                                           "createdAt":  "2022-04-28T18:50:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e The SQL `SUM(column) OVER(grouping)` expression produces a partial sum, so there is a mechanism to map this to SQL.\r\n\r\nRather than just `SUM`, it\u0027s probably better to consider it as the underlying mechanism to map all of the windowing functions; `SUM`, `AVG`, `MIN`, `MAX`, `FIRST`, `LAST`...",
                                           "updatedAt":  "2022-04-28T18:50:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CUDZ6",
                                           "createdAt":  "2022-04-28T18:57:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Sounds like `AggregateOver` might be more LINQ-y name for this API. :)",
                                           "updatedAt":  "2022-04-28T18:57:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CUHGN",
                                           "createdAt":  "2022-04-28T19:16:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCn0cZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theodorzoulias",
                                                                               "createdAt":  "2022-07-21T10:02:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "grbell-ms",
                                           "body":  "\u003e If I\u0027m honest, this feels like the type of method that is better suited for Linq extensions libraries.\r\n\r\nAnd MoreLinq already has [`Scan()`](https://morelinq.github.io/3.3/ref/api/html/M_MoreLinq_MoreEnumerable_Scan__2.htm)",
                                           "updatedAt":  "2022-04-28T19:16:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CUfXa",
                                           "createdAt":  "2022-04-28T21:24:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEJhuFA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EamonNerbonne",
                                                                               "createdAt":  "2025-03-12T07:52:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "frankshearar",
                                           "body":  "Cool, I didn\u0027t know about MoreLinq, and that scratches my itch. I will note that the fact that MoreLinq implemented it is sign enough for me that Scan (or AggregateOver) is a generally useful primitive!",
                                           "updatedAt":  "2022-04-28T21:24:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CXg3m",
                                           "createdAt":  "2022-04-29T15:40:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DrkWzrd",
                                           "body":  "I always needed this function, and I created myself for my private utilities library years ago, with a sketchy name\r\n\r\n```C#\r\npublic static IEnumerable\u003cTAccumulate\u003e AccumulativeSequence\u003cTSource, TAccumulate\u003e(this IEnumerable\u003cTSource\u003e items, TAccumulate? initial, Func\u003cTAccumulate?, TSource, TAccumulate\u003e aggregator)\r\n{\r\n    TAccumulate? result = initial;\r\n    foreach (TSource item in items)\r\n    {\r\n        result = aggregator(result, item);\r\n        yield return result;\r\n    }\r\n}\r\n```\r\nI didn\u0027t know this has \"an official name\". Sometimes is very useful.",
                                           "updatedAt":  "2022-04-29T15:40:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CYbLV",
                                           "createdAt":  "2022-04-29T20:29:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEJhuQg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EamonNerbonne",
                                                                               "createdAt":  "2025-03-12T07:52:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "frankshearar",
                                           "body":  "The cause that resulted in me raising this request was debugging an Aggregate - it was really handy for me to dump out the intermediate calculations. Scan also allows for the construction of something like a short-circuiting Aggregate - Scan(...).First(predicate) - which crops up in my ecosystem a fair bit. Utility? Well, Haskell, F#, Scala, Rust all ship the function in the base library.",
                                           "updatedAt":  "2022-04-29T20:29:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FVKGG",
                                           "createdAt":  "2022-06-22T14:27:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rjgotten",
                                           "body":  "FWIW I\u0027ve on a number of occasions had to map certain ordered items where the result value of the mapping for the current item depends on the context of the previous item. This is where a `Scan` operation can have use.\r\n\r\nJust had one such case the other day, actually - when dealing with composing different snippits of content originating from a CMS and deciding whether some kind of horizontal break was needed to be rendered in between two items depending on the stylistic break configured from an `enum` and specified as `BreakBefore` and `BreakAfter` properties on these content sections.\r\n\r\nAnd yes; it triggered me to (once again) write the extension method my self.\r\nI ... should probably really just put it into a private library by now. 😄 \r\n",
                                           "updatedAt":  "2022-06-22T14:28:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HAbkh",
                                           "createdAt":  "2022-07-21T10:05:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "theodorzoulias",
                                           "body":  "The `Scan` operator is also included in the [`System.Interactive`](https://github.com/dotnet/reactive/blob/main/Ix.NET/Source/System.Interactive/System/Linq/Operators/Scan.cs) package, which [will cause them pain](https://github.com/dotnet/reactive/issues/1647 \".NET 6.0 Enumerable.MaxBy conflicts with Enumerable.MaxBy\") if it appears in the standard libraries with the same name.",
                                           "updatedAt":  "2022-07-21T10:05:02Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "[API Proposal]: Enumerable.Scan()",
        "labels":  [
                       "api-suggestion",
                       "area-System.Linq"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68811",
        "createdAt":  "2022-05-03T12:36:59Z",
        "number":  68811,
        "author":  "TonyValenti",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCuVecw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "theodorzoulias",
                                            "createdAt":  "2022-05-04T19:42:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Neme12",
                                            "createdAt":  "2022-05-05T13:40:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2022-05-30T21:34:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2023-02-10T14:26:27Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2022-05-04T18:12:45Z",
        "body":  "### Background and motivation\n\nCurrently, creating a dictionary or immutable dictionary is clumsy and requires specifying type parameters.  It would be nice if ValueTuple\u003cK,V\u003e could be treated as a KeyValuePair and we could just call ```ToDictionary``` on a list of it.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Collections.Immutable {\r\n\r\npublic static class ImmutableDictionary\r\n{\r\n    public static ImmutableDictionary\u003cTKey, TValue\u003e ToImmutableDictionary\u003cTKey, TValue(this IEnumerable\u003cValueTuple\u003cTKey, TValue\u003e\u003e source);\r\n\r\n    public static ImmutableDictionary\u003cTKey, TValue\u003e ToImmutableDictionary\u003cTKey, TValue(this IEnumerable\u003cValueTuple\u003cTKey, TValue\u003e\u003e source, IEqualityComparer\u003cTKey\u003e? keyComparer);\r\n\r\n    public static ImmutableDictionary\u003cTKey, TValue\u003e ToImmutableDictionary\u003cTKey, TValue(this IEnumerable\u003cValueTuple\u003cTKey, TValue\u003e\u003e source, IEqualityComparer\u003cTKey\u003e? keyComparer, IEqualityComparer\u003cTValue\u003e? valueComparer);\r\n}\r\n}\r\n```\r\n\r\n```csharp\r\nnamespace System.Linq {\r\n\r\npublic static class Enumerable\r\n{\r\n    public static Dictionary\u003cTKey, TValue\u003e ToDictionary\u003cTKey, TValue(this IEnumerable\u003cValueTuple\u003cTKey, TValue\u003e\u003e source);\r\n\r\n    public static Dictionary\u003cTKey, TValue\u003e ToDictionary\u003cTKey, TValue(this IEnumerable\u003cValueTuple\u003cTKey, TValue\u003e\u003e source, IEqualityComparer\u003cTKey\u003e? keyComparer);\r\n\r\n    public static Dictionary\u003cTKey, TValue\u003e ToDictionary\u003cTKey, TValue(this IEnumerable\u003cValueTuple\u003cTKey, TValue\u003e\u003e source, IEqualityComparer\u003cTKey\u003e? keyComparer, IEqualityComparer\u003cTValue\u003e? valueComparer);\r\n}\r\n}\r\n```\n\n### API Usage\n\n```csharp\r\n                var V1 = new[]\r\n                {\r\n                    (Key1,Value1),\r\n                    (Key2,Value2),\r\n                }.ToDictionary();\r\n```\r\n\n\n### Alternative Designs\n\nWe could just leave things as they are.\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQp4Pxw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ChZOP",
                                           "createdAt":  "2022-05-03T12:37:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-collections\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nCurrently, creating a dictionary or immutable dictionary is clumsy and requires specifying type parameters.  It would be nice if ValueTuple\u003cK,V\u003e could be treated as a KeyValuePair and we could just call ```ToDictionary``` on a list of it.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Collections.Immutable {\r\n\r\npublic static class ImmutableDictionary\r\n{\r\n    public static ImmutableDictionary\u003cTKey, TValue\u003e ToImmutableDictionary\u003cTKey, TValue(this IEnumerable\u003cValueTuple\u003cTKey, TValue\u003e\u003e source);\r\n\r\n    public static ImmutableDictionary\u003cTKey, TValue\u003e ToImmutableDictionary\u003cTKey, TValue(this IEnumerable\u003cValueTuple\u003cTKey, TValue\u003e\u003e source, IEqualityComparer\u003cTKey\u003e? keyComparer);\r\n\r\n    public static ImmutableDictionary\u003cTKey, TValue\u003e ToImmutableDictionary\u003cTKey, TValue(this IEnumerable\u003cValueTuple\u003cTKey, TValue\u003e\u003e source, IEqualityComparer\u003cTKey\u003e? keyComparer, IEqualityComparer\u003cTValue\u003e? valueComparer);\r\n}\r\n}\r\n```\r\n\r\n```csharp\r\nnamespace System.Linq {\r\n\r\npublic static class Enumerable\r\n{\r\n    public static Dictionary\u003cTKey, TValue\u003e ToDictionary\u003cTKey, TValue(this IEnumerable\u003cValueTuple\u003cTKey, TValue\u003e\u003e source);\r\n\r\n    public static Dictionary\u003cTKey, TValue\u003e ToDictionary\u003cTKey, TValue(this IEnumerable\u003cValueTuple\u003cTKey, TValue\u003e\u003e source, IEqualityComparer\u003cTKey\u003e? keyComparer);\r\n\r\n    public static Dictionary\u003cTKey, TValue\u003e ToDictionary\u003cTKey, TValue(this IEnumerable\u003cValueTuple\u003cTKey, TValue\u003e\u003e source, IEqualityComparer\u003cTKey\u003e? keyComparer, IEqualityComparer\u003cTValue\u003e? valueComparer);\r\n}\r\n}\r\n```\n\n### API Usage\n\n```csharp\r\n                var V1 = new[]\r\n                {\r\n                    (Key1,Value1),\r\n                    (Key2,Value2),\r\n                }.ToDictionary();\r\n```\r\n\n\n### Alternative Designs\n\nWe could just leave things as they are.\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTonyValenti\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Collections`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-03T12:37:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Chea5",
                                           "createdAt":  "2022-05-03T13:01:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nCurrently, creating a dictionary or immutable dictionary is clumsy and requires specifying type parameters.  It would be nice if ValueTuple\u003cK,V\u003e could be treated as a KeyValuePair and we could just call ```ToDictionary``` on a list of it.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Collections.Immutable {\r\n\r\npublic static class ImmutableDictionary\r\n{\r\n    public static ImmutableDictionary\u003cTKey, TValue\u003e ToImmutableDictionary\u003cTKey, TValue(this IEnumerable\u003cValueTuple\u003cTKey, TValue\u003e\u003e source);\r\n\r\n    public static ImmutableDictionary\u003cTKey, TValue\u003e ToImmutableDictionary\u003cTKey, TValue(this IEnumerable\u003cValueTuple\u003cTKey, TValue\u003e\u003e source, IEqualityComparer\u003cTKey\u003e? keyComparer);\r\n\r\n    public static ImmutableDictionary\u003cTKey, TValue\u003e ToImmutableDictionary\u003cTKey, TValue(this IEnumerable\u003cValueTuple\u003cTKey, TValue\u003e\u003e source, IEqualityComparer\u003cTKey\u003e? keyComparer, IEqualityComparer\u003cTValue\u003e? valueComparer);\r\n}\r\n}\r\n```\r\n\r\n```csharp\r\nnamespace System.Linq {\r\n\r\npublic static class Enumerable\r\n{\r\n    public static Dictionary\u003cTKey, TValue\u003e ToDictionary\u003cTKey, TValue(this IEnumerable\u003cValueTuple\u003cTKey, TValue\u003e\u003e source);\r\n\r\n    public static Dictionary\u003cTKey, TValue\u003e ToDictionary\u003cTKey, TValue(this IEnumerable\u003cValueTuple\u003cTKey, TValue\u003e\u003e source, IEqualityComparer\u003cTKey\u003e? keyComparer);\r\n\r\n    public static Dictionary\u003cTKey, TValue\u003e ToDictionary\u003cTKey, TValue(this IEnumerable\u003cValueTuple\u003cTKey, TValue\u003e\u003e source, IEqualityComparer\u003cTKey\u003e? keyComparer, IEqualityComparer\u003cTValue\u003e? valueComparer);\r\n}\r\n}\r\n```\n\n### API Usage\n\n```csharp\r\n                var V1 = new[]\r\n                {\r\n                    (Key1,Value1),\r\n                    (Key2,Value2),\r\n                }.ToDictionary();\r\n```\r\n\n\n### Alternative Designs\n\nWe could just leave things as they are.\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTonyValenti\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Linq`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-03T13:01:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CiInw",
                                           "createdAt":  "2022-05-03T15:39:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCbOzvQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2022-05-04T18:11:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "For the LINQ portion, duplicate of #65925 , #45679 , multiple other.\r\n\r\n\r\n",
                                           "updatedAt":  "2022-05-03T15:39:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Cng_H",
                                           "createdAt":  "2022-05-04T18:12:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Dupe of https://github.com/dotnet/runtime/issues/65925, we might consider adding `ToImmutableDictionary` methods provided that the other issue passes API review.",
                                           "updatedAt":  "2022-05-04T18:12:30Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: ToDictionary / ToImmutableDictionary for ValueTuple\u003cK,V\u003e",
        "labels":  [
                       "api-suggestion",
                       "area-System.Linq",
                       "wishlist"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73240",
        "createdAt":  "2022-08-02T15:49:41Z",
        "number":  73240,
        "author":  "edgarfgp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCpwAnA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "theodorzoulias",
                                            "createdAt":  "2022-08-02T16:17:37Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-05-02T16:45:55Z",
        "body":  "### Description\n\nSeemingly making NaN the lowest number only affects Min not Max.\r\n\r\nWhile contributing to https://github.com/dotnet/fsharp/issues/13207.  and based on @tannergooding comment https://github.com/dotnet/fsharp/issues/13207#issuecomment-1194417377\n\n### Reproduction Steps\n\n```csharp\r\nConsole.WriteLine((new double[] { double.NaN, 2.0, 3.0 }).Max());\r\nConsole.WriteLine((new double[] { 3.0, double.NaN, 2.0 }).Max());\r\nConsole.WriteLine((new double[] { 3.0, double.NaN, 2.0 }).Min());\r\nConsole.WriteLine((new double[] { 3.0, double.NaN, 2.0 }).Min());\r\n\r\n```\n\n### Expected behavior\n\nNaN\r\nNaN\r\nNaN\r\nNaN\n\n### Actual behavior\n\n3\r\n3\r\nNaN\r\nNaN\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOW02E1w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5HsnBM",
                                           "createdAt":  "2022-08-02T15:50:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nSeemingly making NaN the lowest number only affects Min not Max.\r\n\r\nWhile contributing to https://github.com/dotnet/fsharp/issues/13207.  and based on @tannergooding comment https://github.com/dotnet/fsharp/issues/13207#issuecomment-1194417377\n\n### Reproduction Steps\n\n```csharp\r\nConsole.WriteLine((new double[] { double.NaN, 2.0, 3.0 }).Max());\r\nConsole.WriteLine((new double[] { 3.0, double.NaN, 2.0 }).Max());\r\nConsole.WriteLine((new double[] { 3.0, double.NaN, 2.0 }).Min());\r\nConsole.WriteLine((new double[] { 3.0, double.NaN, 2.0 }).Min());\r\n\r\n```\n\n### Expected behavior\n\nNaN\r\nNaN\r\nNaN\r\nNaN\n\n### Actual behavior\n\n3\r\n3\r\nNaN\r\nNaN\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eedgarfgp\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Numerics`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-02T15:50:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hsp9-",
                                           "createdAt":  "2022-08-02T15:55:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nSeemingly making NaN the lowest number only affects Min not Max.\r\n\r\nWhile contributing to https://github.com/dotnet/fsharp/issues/13207.  and based on @tannergooding comment https://github.com/dotnet/fsharp/issues/13207#issuecomment-1194417377\n\n### Reproduction Steps\n\n```csharp\r\nConsole.WriteLine((new double[] { double.NaN, 2.0, 3.0 }).Max());\r\nConsole.WriteLine((new double[] { 3.0, double.NaN, 2.0 }).Max());\r\nConsole.WriteLine((new double[] { 3.0, double.NaN, 2.0 }).Min());\r\nConsole.WriteLine((new double[] { 3.0, double.NaN, 2.0 }).Min());\r\n\r\n```\n\n### Expected behavior\n\nNaN\r\nNaN\r\nNaN\r\nNaN\n\n### Actual behavior\n\n3\r\n3\r\nNaN\r\nNaN\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eedgarfgp\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-02T15:55:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hsy-W",
                                           "createdAt":  "2022-08-02T16:09:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC9SiBQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "edgarfgp",
                                                                               "createdAt":  "2022-08-02T17:09:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "abelbraaksma",
                                                                               "createdAt":  "2023-06-06T20:07:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The root issue is that `Max`/`Min` don\u0027t follow any documentable IEEE 754 behavior around `NaNs`.\r\n\r\nThere are effectively three behaviors we could consider:\r\n1. `max`/`min`\r\n2. `maxNumber`/`minNumber`\r\n3. `totalOrder`\r\n\r\n`max`/`min` always propagate `NaN` back and thus `Max(NaN, number)` and `Min(NaN, number)` will both return `NaN`. Likewise, `-0` is less than `+0`.\r\n\r\n`maxNumber`/`minNumber` always propagate back a `number` and thus `MaxNumber(NaN, number)` and `MinNumber(NaN, number)` will both return `number`. Likewise, `-0` is less than `+0`.\r\n\r\n`totalOrder` gives a \"total ordering\" for NaN in relation to other floating-point values such that it has a \"proper\" sort position:\r\n* Just like with `Max`, `MaxNumber`, `Min`, and `MinNumber`: `-0` is less than `+0`\r\n* `-NaN` is less than any number\r\n* `+NaN` is greater than any number\r\n* `+sNaN` is less than `+qNaN`\r\n* `-sNaN` is greater than `-qNaN`\r\n\r\n`Enumerable.Max` and `Enumerable.Min` currently most closely resembles `totalOrder` but considers any `NaN` to be less than everything. This not only differs from the default `Max`/`Min` implementation which leads to confusion to end users on how it behaves, but also means that it doesn\u0027t match a behavior we could reasonably explain to users who expect IEEE 754 compliance.\r\n\r\nUpdating it to actually match `totalOrder` while a breaking change, is likely not to be super impactful because the `NaN` users are most likely to encounter is `float.NaN` and `double.NaN`, both of which are a `-qNaN` (this includes what constant folding will normalize a result to).\r\n\r\nUpdating it to actually match `Max`/`Min` and then exposing `MaxNumber`/`MinNumber` equivalents would be \"best design\" if doing this from day 1 since it would\u0027ve then matched what `INumber\u003cT\u003e.Max/MaxNumber/Min/MinNumber` do. But this has the highest chance to break some user depending on the handling of NaNs today.",
                                           "updatedAt":  "2022-08-02T16:09:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hs-mS",
                                           "createdAt":  "2022-08-02T16:42:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Seems like something we don\u0027t need to address in .NET 7?",
                                           "updatedAt":  "2022-08-02T16:42:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HtC1E",
                                           "createdAt":  "2022-08-02T17:00:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Right, its a bit late in the cycle to consider a break like this and the current behavior, although confusing, has been around for many years.\r\n\r\nWe should consider it for .NET 8 and if nothing else improve the documentation around the type to call out the handling of NaN.",
                                           "updatedAt":  "2022-08-02T17:00:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bTGTf",
                                           "createdAt":  "2023-05-02T16:03:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "edgarfgp",
                                           "body":  "@eiriktsarpalis Will this make it to NET 8? Thanks in advance",
                                           "updatedAt":  "2023-05-02T16:03:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bTYTX",
                                           "createdAt":  "2023-05-02T16:45:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Hi, it\u0027s unlikely we\u0027d be able to get around to fixing it during this release. Happy to review any community contributions that try to address it though.",
                                           "updatedAt":  "2023-05-02T16:45:55Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Seemingly making NaN the lowest number only affects Min not Max.",
        "labels":  [
                       "enhancement",
                       "area-System.Linq"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77460",
        "createdAt":  "2022-08-29T23:16:14Z",
        "number":  77460,
        "author":  "kingmotley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-10-27T09:30:18Z",
        "body":  "### Description\r\n\r\nThe performance of the .OfType\u003cT\u003e and .Cast\u003cT\u003e methods are suboptimal in many cases.  For example, while essentially equivalent:\r\n\r\n`people.Cast\u003cPerson\u003e().ToList()` runs about 4 times as slow and takes 4 times the memory as `people.Select(x =\u003e (Person)x).ToList()` while being essentially logically equivalent.\r\n\r\n// * Summary *\r\n\r\nBenchmarkDotNet=v0.13.2, OS=Windows 11 (10.0.22000.856/21H2)\r\nAMD Ryzen 9 5900X, 1 CPU, 24 logical and 12 physical cores\r\n.NET SDK=6.0.203\r\n  [Host]     : .NET 6.0.8 (6.0.822.36306), X64 RyuJIT AVX2\r\n  DefaultJob : .NET 6.0.8 (6.0.822.36306), X64 RyuJIT AVX2\r\n\r\n\r\n|        Method |      Mean |    Error |   StdDev | Allocated |\r\n|-------------- |----------:|---------:|---------:|----------:|\r\n|          Cast | 177.81 us | 1.554 us | 1.378 us | 256.41 KB |\r\n|   Cast_Select |  43.62 us | 0.396 us | 0.331 us |  78.25 KB |\r\n|        OfType | 193.63 us | 2.182 us | 2.041 us | 256.41 KB |\r\n|     OfType_As |  97.13 us | 1.330 us | 1.244 us | 256.47 KB |\r\n| OfExactlyType |  82.80 us | 0.805 us | 0.753 us | 256.47 KB |\r\n\r\n\r\n\r\n### Configuration\r\n\r\nTested on .Net Core 6.0.8, windows 11 x64.\r\n\r\n### Other information\r\n\r\nCastIterator is on Enumerable, while the SelectListIterator/SelectArrayIterator/SelectEnumerableIterator is a generic iterator.  Creating optimized versions of the Cast/OfType methods could lead to significant performance increases.\r\n\r\n[CastingObjects.zip](https://github.com/dotnet/core/files/9448367/CastingObjects.zip)\r\n\r\nCredit for finding this should go to Nick Chapsas: https://youtu.be/dIu5EisoB_s\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTRVp1w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5M9yOP",
                                           "createdAt":  "2022-10-26T00:02:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-10-26T00:02:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5M9ySd",
                                           "createdAt":  "2022-10-26T00:03:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nThe performance of the .OfType\u003cT\u003e and .Cast\u003cT\u003e methods are suboptimal in many cases.  For example, while essentially equivalent:\r\n\r\n`people.Cast\u003cPerson\u003e().ToList()` runs about 4 times as slow and takes 4 times the memory as `people.Select(x =\u003e (Person)x).ToList()` while being essentially logically equivalent.\r\n\r\n// * Summary *\r\n\r\nBenchmarkDotNet=v0.13.2, OS=Windows 11 (10.0.22000.856/21H2)\r\nAMD Ryzen 9 5900X, 1 CPU, 24 logical and 12 physical cores\r\n.NET SDK=6.0.203\r\n  [Host]     : .NET 6.0.8 (6.0.822.36306), X64 RyuJIT AVX2\r\n  DefaultJob : .NET 6.0.8 (6.0.822.36306), X64 RyuJIT AVX2\r\n\r\n\r\n|        Method |      Mean |    Error |   StdDev | Allocated |\r\n|-------------- |----------:|---------:|---------:|----------:|\r\n|          Cast | 177.81 us | 1.554 us | 1.378 us | 256.41 KB |\r\n|   Cast_Select |  43.62 us | 0.396 us | 0.331 us |  78.25 KB |\r\n|        OfType | 193.63 us | 2.182 us | 2.041 us | 256.41 KB |\r\n|     OfType_As |  97.13 us | 1.330 us | 1.244 us | 256.47 KB |\r\n| OfExactlyType |  82.80 us | 0.805 us | 0.753 us | 256.47 KB |\r\n\r\n\r\n\r\n### Configuration\r\n\r\nTested on .Net Core 6.0.8, windows 11 x64.\r\n\r\n### Other information\r\n\r\nCastIterator is on Enumerable, while the SelectListIterator/SelectArrayIterator/SelectEnumerableIterator is a generic iterator.  Creating optimized versions of the Cast/OfType methods could lead to significant performance increases.\r\n\r\n[CastingObjects.zip](https://github.com/dotnet/core/files/9448367/CastingObjects.zip)\r\n\r\nCredit for finding this should go to Nick Chapsas: https://youtu.be/dIu5EisoB_s\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekingmotley\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-26T00:03:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5M_401",
                                           "createdAt":  "2022-10-26T10:20:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "The difference in performance can be attributed to a couple of reasons:\r\n\r\n1.  The `Select` method acts on generic `IEnumerable\u003cT\u003e` sources whereas `Cast` and `OfType` act on non-generic `IEnumerable` sources.\r\n2. Your choice of source type is `List\u003cT\u003e`, which makes it possible for generic Linq methods to apply performance optimizations. If I change the input to a non-collection `IEnumerable\u003cobject\u003e` then the difference effectively vanishes.\r\n\r\nIt is not possible for the `Cast` to apply any performance optimizations unless we expose an overload accepting `IEnumerable\u003cT\u003e` inputs, however such an overload would effectively negate the [purpose of the method](https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.cast?view=net-7.0), which is to convert non-generic IEnumerable inputs to generic ones.\r\n\r\nOne possibility though is to add an analyzer that triggers whenever users call `Cast` on generic IEnumerable inputs (since it always performs worse than `Select`).",
                                           "updatedAt":  "2022-10-26T10:20:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NBbjZ",
                                           "createdAt":  "2022-10-26T15:25:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kingmotley",
                                           "body":  "Changing the source to an `IEnumerable\u003cobject\u003e` still shows performance improvements by using Cast_Select over the normal Cast for me:\r\n|        Method |     Mean |     Error |    StdDev | Allocated |\r\n|-------------- |---------:|----------:|----------:|----------:|\r\n|          Cast | 2.528 ms | 0.0092 ms | 0.0072 ms |   1.55 MB |\r\n|   Cast_Select | 1.887 ms | 0.0087 ms | 0.0081 ms |   1.37 MB |\r\n|        OfType | 2.531 ms | 0.0059 ms | 0.0053 ms |   1.55 MB |\r\n|     OfType_As | 2.488 ms | 0.0258 ms | 0.0241 ms |   1.55 MB |\r\n| OfExactlyType | 2.488 ms | 0.0260 ms | 0.0243 ms |   1.55 MB |\r\n\r\nNew code:\r\n```\r\n    // private static readonly List\u003cobject\u003e People = Enumerable\r\n    //     .Range(0, 10000)\r\n    //     .Select(x =\u003e (object)new Person(Guid.NewGuid(), Guid.NewGuid().ToString()))\r\n    //     .ToList();\r\n    \r\n    private static readonly IEnumerable\u003cobject\u003e People = Enumerable\r\n        .Range(0, 10000)\r\n        .Select(x =\u003e (object)new Person(Guid.NewGuid(), Guid.NewGuid().ToString()));\r\n        \r\n    [Benchmark]\r\n    public List\u003cPerson\u003e Cast()\r\n    {\r\n        return People\r\n            .Cast\u003cPerson\u003e()\r\n            .ToList();\r\n    }\r\n    \r\n    [Benchmark]\r\n    public List\u003cPerson\u003e Cast_Select()\r\n    {\r\n        return People\r\n            .Select(x =\u003e (Person)x)\r\n            .ToList();\r\n    }\r\n```\r\n",
                                           "updatedAt":  "2022-10-26T15:37:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NBh3X",
                                           "createdAt":  "2022-10-26T15:44:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Using select over range enumerables is still subject to performance optimizations. You should consider using an iterator method instead to ensure a (relatively) apples-to-apples comparison.\r\n\r\nLike I said though, we won\u0027t be entertaining any changes to the Cast method itself, it is really only intended as an adapter for older non-generix APIs.",
                                           "updatedAt":  "2022-10-26T15:44:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NCA5m",
                                           "createdAt":  "2022-10-26T17:28:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC2io0g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "leotsarev",
                                                                               "createdAt":  "2022-11-22T11:26:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "declard",
                                                                               "createdAt":  "2023-02-22T11:20:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "kingmotley",
                                           "body":  "That seems counter intuitive that the Cast method would not be the best choice for changing types on a `IEnumerable\u003cT\u003e` and the dotnet team feels that we should be using the less specific and less readable Select method, but if that is the opinion of the team then so be it.\r\n\r\nThe same goes for OfType.\r\n\r\nI really hope the team reconsiders.  Perhaps adding documentation on these methods pointing out that while they work on `IEnumerable\u003cT\u003e`s, that they are specifically meant to only be for non-generics, and the negative performance implications?",
                                           "updatedAt":  "2022-10-26T17:32:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NCDNH",
                                           "createdAt":  "2022-10-26T17:35:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e but if that is the opinion of the team then so be it\r\n\r\nWhat optimizations would you suggest? As mentioned many of the optimizations in Select rely on the fact that the input source is generic which is not the case here.",
                                           "updatedAt":  "2022-10-26T17:35:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NCETM",
                                           "createdAt":  "2022-10-26T17:40:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kingmotley",
                                           "body":  "Would it be possible to check if the source coming into the method is generic, and if so, then just call the generic select to leverage it\u0027s already existing optimizations, or returning the same type of Iterator that the select could have?",
                                           "updatedAt":  "2022-10-26T17:41:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NCExk",
                                           "createdAt":  "2022-10-26T17:42:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e Would it be possible to check if the source coming into the method is generic\r\n\r\nGeneric with respect to what element type? Cast only sees the type of the target enumerable so it cannot really deduce the generic type of the source without using reflection. ",
                                           "updatedAt":  "2022-10-26T17:43:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NCFrF",
                                           "createdAt":  "2022-10-26T17:45:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kingmotley",
                                           "body":  "I see your point.  I guess it would need to be a new method wouldn\u0027t it?  One that took an `IEnumerable\u003cT\u003e` like you\u0027ve been saying all along.",
                                           "updatedAt":  "2022-10-26T17:45:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NCG_z",
                                           "createdAt":  "2022-10-26T17:51:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Correct, but I question whether such an overload would be useful beyond converting `IEnumerable\u003cobject\u003e` sources, which aren\u0027t all that common. I think the best way forward is to consider an analyzer for improper uses of Cast.",
                                           "updatedAt":  "2022-10-26T17:51:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NCMSa",
                                           "createdAt":  "2022-10-26T18:13:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kingmotley",
                                           "body":  "Anecdotal, but going through a project that I am currently working on, in one instance we are using reflection to get Attributes on models (for validation).  The propertyInfo.GetCustomAttributes method that allows you to not inherit from parents returns an object array.  We then cast this object array into the Attribute type we just looked for, essentially `object[].Cast\u003cCustomAttribute\u003e()`.  Elsewhere, we are casting some Kendo objects from a derived type to a root parent type as we walk an expression tree and return all the leafs.\r\n\r\nWould an analyzer pointing out that it might be better to use Select fix the issue? Yes, it probably would, but if it is possible to just write the optimized code when dealing with a generic source, why would that not be preferable?\r\n\r\nIn any case, thank you for your time Eirik.",
                                           "updatedAt":  "2022-10-26T18:30:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NFWnX",
                                           "createdAt":  "2022-10-27T09:29:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e The propertyInfo.GetCustomAttributes method that allows you to not inherit from parents returns an object array.\r\n\r\nTrue, but I doubt Linq performance would be the bottleneck when running reflection code. Incidentally you might want to use one of the [generic extension methods](https://learn.microsoft.com/en-us/dotnet/api/system.reflection.customattributeextensions.getcustomattributes?view=net-6.0#system-reflection-customattributeextensions-getcustomattributes-1(system-reflection-memberinfo-system-boolean)) to avoid needing to deal with object arrays.\r\n\r\n\u003e but if it is possible to just write the optimized code when dealing with a generic source, why would that not be preferable?\r\n\r\nGenerally speaking, Linq performance optimizations are a trade-off with System.Linq assembly size. We try to be strategic about what Linq methods we do optimize, and apply no optimizations at all in platforms where assembly size is important (e.g. wasm). You can see this in the [implementation source files](https://github.com/dotnet/runtime/tree/9ec7fc21862f3446c6c6f7dcfff275942e3884d3/src/libraries/System.Linq/src/System/Linq), where some implementations are split between \"speedopt\" and \"sizeopt\" variants.\r\n\r\n\u003e In any case, thank you for your time Eirik.\r\n\r\nYou\u0027re welcome, happy to answer any other questions you may have.",
                                           "updatedAt":  "2022-10-27T09:30:18Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Add analyzer detecting \u0026 fixing use of Cast/OfType methods on generic IEnumerable sources.",
        "labels":  [
                       "area-System.Linq",
                       "code-analyzer",
                       "code-fixer"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79111",
        "createdAt":  "2022-12-01T20:05:24Z",
        "number":  79111,
        "author":  "angellaa",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODA-L2Q==",
                          "nodes":  [
                                        {
                                            "content":  "CONFUSED",
                                            "user":  "KeterSCP",
                                            "createdAt":  "2022-12-01T22:09:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "giladfrid009",
                                            "createdAt":  "2022-12-03T09:37:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2022-12-05T15:48:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "turhany",
                                            "createdAt":  "2022-12-06T10:18:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rasputino",
                                            "createdAt":  "2022-12-14T21:52:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sander1095",
                                            "createdAt":  "2022-12-20T21:05:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2023-01-03T23:45:55Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2023-01-03T23:45:57Z"
                                        },
                                        {
                                            "content":  "CONFUSED",
                                            "user":  "patricksadowski",
                                            "createdAt":  "2023-03-06T08:50:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "testfirstcoder",
                                            "createdAt":  "2024-04-02T10:52:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PanSzelescik",
                                            "createdAt":  "2025-04-08T13:00:51Z"
                                        }
                                    ],
                          "totalCount":  11
                      },
        "updatedAt":  "2022-12-03T19:36:25Z",
        "body":  "### Background and motivation\r\n\r\nThe framework already contains a [Chunk](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Linq/src/System/Linq/Chunk.cs) extension method to splits the elements of a sequence into chunks of size at most size.\r\n\r\nThere are situations when you want to splits the elements of a sequence based on a predicate, similarly to using `String.Split` for strings.\r\n\r\nI propose to introduce a ChunkBy extension method to chunk a sequence based on a predicate.\r\n\r\nThis is a naive reference implementation of the idea:\r\n\r\n```csharp \r\n\r\n    public static IEnumerable\u003cIEnumerable\u003cTSource\u003e\u003e ChunkBy\u003cTSource\u003e(\r\n        this IEnumerable\u003cTSource\u003e source, \r\n        Func\u003cTSource, bool\u003e predicate)\r\n    {\r\n        var chunk = new List\u003cTSource\u003e();\r\n\r\n        foreach (var item in source)\r\n        {\r\n            if (predicate(item))\r\n            {\r\n                yield return chunk;\r\n                chunk.Clear();\r\n                continue;\r\n            }\r\n\r\n            chunk.Add(item);\r\n        }\r\n\r\n        yield return chunk;\r\n    }\r\n\r\n```\r\n\r\nLINQ provides methods like [Max](https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.max?view=net-7.0) and [MaxBy](https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.maxby?view=net-7.0) so the name ChunkBy would follow the same patterns.\r\n\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Linq;\r\n\r\npublic static partial class Enumerable\r\n{\r\n    public static IEnumerable\u003cIEnumerable\u003cTSource\u003e\u003e ChunkBy\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source, Func\u003cTSource,bool\u003e predicate);\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\n        var sequence = new[] { \"1\", \"2\", \"\", \"3\", \"4\", \"\", \"5\" };\r\n\r\n        foreach (var chunk in sequence.ChunkBy(x =\u003e x == \"\"))\r\n        {\r\n            Console.WriteLine(string.Join(\u0027,\u0027, chunk));\r\n        }\r\n\r\n        // Prints\r\n        // 1,2\r\n        // 3,4\r\n        // 5\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nTo match the same API signature of Chunk, wecan use a TSource[] array to represent chunks in the return type.\r\n\r\n```csharp\r\npublic static partial class Enumerable\r\n{\r\n    public static IEnumerable\u003cTSource[]\u003e ChunkBy\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source, Func\u003cTSource,bool\u003e predicate);\r\n}\r\n```\r\n\r\n### Risks\r\n\r\nThis is a new extension method on Enumerable so I can\u0027t think of any risks of breaking changes.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOT6V5PQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5PiIoh",
                                           "createdAt":  "2022-12-01T20:05:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nThe framework already contains a [Chunk](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Linq/src/System/Linq/Chunk.cs) extension method to splits the elements of a sequence into chunks of size at most size.\r\n\r\nThere are situations when you want to splits the elements of a sequence based on a predicate, similarly to using `String.Split` for strings.\r\n\r\nI propose to introduce a ChunkBy extension method to chunk a sequence based on a predicate.\r\n\r\nThis is a naive reference implementation of the idea:\r\n\r\n```csharp \r\n\r\n    public static IEnumerable\u003cIEnumerable\u003cTSource\u003e\u003e ChunkBy\u003cTSource\u003e(\r\n        this IEnumerable\u003cTSource\u003e source, \r\n        Func\u003cTSource, bool\u003e predicate)\r\n    {\r\n        var chunk = new List\u003cTSource\u003e();\r\n\r\n        foreach (var item in source)\r\n        {\r\n            if (predicate(item))\r\n            {\r\n                yield return chunk;\r\n                chunk.Clear();\r\n                continue;\r\n            }\r\n\r\n            chunk.Add(item);\r\n        }\r\n\r\n        yield return chunk;\r\n    }\r\n\r\n```\r\n\r\nLINQ provides methods like [Max](https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.max?view=net-7.0) and [MaxBy](https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.maxby?view=net-7.0) so the name ChunkBy would follow the same patterns.\r\n\n\n### API Proposal\n\n```csharp\r\nnamespace System.Linq;\r\n\r\npublic static partial class Enumerable\r\n{\r\n    public static IEnumerable\u003cIEnumerable\u003cTSource\u003e\u003e Chunk\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source, Func\u003cTSource,bool\u003e predicate);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n        var sequence = new[] { \"1\", \"2\", \"\", \"3\", \"4\", \"\", \"5\" };\r\n\r\n        foreach (var chunk in sequence.ChunkBy(x =\u003e x == \"\"))\r\n        {\r\n            Console.WriteLine(string.Join(\u0027,\u0027, chunk));\r\n        }\r\n\r\n        // Prints\r\n        // 1,2\r\n        // 3,4\r\n        // 5\r\n```\r\n\n\n### Alternative Designs\n\nTo match the same API signature of Chunk, wecan use a TSource[] array to represent chunks in the return type.\r\n\r\n```csharp\r\npublic static partial class Enumerable\r\n{\r\n    public static IEnumerable\u003cTSource[]\u003e Chunk\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source, Func\u003cTSource,bool\u003e predicate);\r\n}\r\n```\n\n### Risks\n\nThis is a new extension method on Enumerable so I can\u0027t think of any risks of breaking changes.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eangellaa\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Linq`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-01T20:05:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pj9Lp",
                                           "createdAt":  "2022-12-02T06:43:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpmtPg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "angellaa",
                                                                               "createdAt":  "2022-12-02T16:26:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theodorzoulias",
                                                                               "createdAt":  "2022-12-03T08:19:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2022-12-05T06:37:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mrxx99",
                                                                               "createdAt":  "2023-01-03T23:46:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "patricksadowski",
                                                                               "createdAt":  "2023-03-06T08:50:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spatzner",
                                                                               "createdAt":  "2024-07-13T01:56:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "lsoft",
                                           "body":  "@angellaa we are loosing \"border\" items in this design, probably it\u0027s not a expected behaviour for `Chunk` operation (but I see the simmetry with `String.Split`). From my point of view, `ChunkBy` is a good idea and I see the place where I can use it for my codebase, but I\u0027m pretty sure that I do not want to loose items in `ChunkBy`.\r\n\r\nIn addition: if we want to lost border items, `SplitBy` would be better name I guess.\r\n\r\nIf we choose not to lost items, then the question arise: should we put the border item as the last element of the chunk, or a first element of the next chunk? I have no opinion.",
                                           "updatedAt":  "2022-12-02T06:45:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PmbFW",
                                           "createdAt":  "2022-12-02T16:03:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpmtSg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "angellaa",
                                                                               "createdAt":  "2022-12-02T16:32:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "theodorzoulias",
                                                                               "createdAt":  "2022-12-03T08:20:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "avsorokin",
                                                                               "createdAt":  "2022-12-08T06:17:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spatzner",
                                                                               "createdAt":  "2024-07-13T01:56:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "The `By` suffix is typically reserved methods that are performing operations on the source enumerable based on project to a given key type. This takes a predicate and not project, so I would argue this might probably be named `ChunkWhile`, folllowing existing convention of the `TakeWhile` method.\r\n\r\nThere are many ways one might want to chunk their enumerables. We added `Chunk` because it was simple and common enough, I don\u0027t this one is particularly common (or difficult to implement oneself) to justify inclusion.",
                                           "updatedAt":  "2022-12-02T16:05:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PmjCs",
                                           "createdAt":  "2022-12-02T16:29:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6cfgg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2022-12-03T05:33:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2022-12-05T06:37:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mrxx99",
                                                                               "createdAt":  "2023-01-03T23:47:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "neon-sunset",
                                                                               "createdAt":  "2023-04-24T09:27:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "angellaa",
                                           "body":  "I agree with you @lsoft, I think `Enumerable.SplitBy` feels a more appropiate name or based on what @eiriktsarpalis said, probably even simply `Enumerable.Split`.\r\n\r\nMy intent was to add a method that behaves like Split for strings.\r\n\r\nThe predicate helps to identify what elements we consider separators and separators should not be included in the results.\r\n\r\nShould I update the title and the content of the proposal?\r\n\r\n",
                                           "updatedAt":  "2022-12-02T16:33:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pml8c",
                                           "createdAt":  "2022-12-02T16:40:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODZOwmQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephentoub",
                                                                               "createdAt":  "2024-03-04T15:54:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Honestly, I\u0027d be inclined to say that this doesn\u0027t meet the bar for inclusion. I had not realized that items satisfying the predicate are being skipped as \"separators\" -- I had assumed they were being included as the final element in the chunk. Not saying that it\u0027s \"wrong\" but it definitely feels like a helper method for a specific use case rather than something that is general-purpose enough.",
                                           "updatedAt":  "2022-12-02T16:40:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PmxMW",
                                           "createdAt":  "2022-12-02T17:23:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "angellaa",
                                           "body":  "I agree that Chunk should not remove any elements from the sequence so reflecting back ChunkBy is the wrong name.\r\n\r\nWhat I proposed was effectively `Enumerable.Split` but I totally accept that might not be general-purpose enough. \r\n\r\nI leave it with you to decide what to do. \r\n\r\nPleasure to talk with you and keep up with the amazing work you\u0027re doing in making .NET better.\r\n\r\n",
                                           "updatedAt":  "2022-12-02T17:23:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Po4L1",
                                           "createdAt":  "2022-12-03T08:47:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "theodorzoulias",
                                           "body":  "Two similar MoreLinq operators are the [`Segment`](https://github.com/morelinq/MoreLINQ/blob/master/MoreLinq/Segment.cs) and the [`Split`](https://github.com/morelinq/MoreLINQ/blob/master/MoreLinq/Split.cs). The first preserves the separator, and the second consumes it.\r\n\r\n```C#\r\nvar source = Enumerable.Range(1, 15);\r\nvar segmented = source.Segment(x =\u003e x % 5 == 0);\r\nvar split = source.Split(x =\u003e x % 5 == 0);\r\n```\r\n\r\nOutput:\r\n\r\n```none\r\nSource:    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\r\nSegmented: [1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15]\r\nSplit:     [1, 2, 3, 4], [6, 7, 8, 9], [11, 12, 13, 14]\r\n```\r\n\r\n[Live demo](https://dotnetfiddle.net/6sWdyb).",
                                           "updatedAt":  "2022-12-03T08:48:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PpXk9",
                                           "createdAt":  "2022-12-03T19:36:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "angellaa",
                                           "body":  "@theodorzoulias the last example you shared `source.Split(x =\u003e x % 5 == 0)` covers effectively my use case.\r\n",
                                           "updatedAt":  "2022-12-03T19:36:25Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[API Proposal]: Enumerable.ChunkBy",
        "labels":  [
                       "api-suggestion",
                       "area-System.Linq",
                       "wishlist"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86472",
        "createdAt":  "2023-05-18T23:49:28Z",
        "number":  86472,
        "author":  "TonyValenti",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCwK2kg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2023-05-19T06:16:36Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-05-19T17:26:13Z",
        "body":  "### Background and motivation\n\nPlease Implement #65925 for ImmutableDictionaries as well. \n\n### API Proposal\n\nPlease Implement #65925 for ImmutableDictionaries as well. \n\n### API Usage\n\nPlease Implement #65925 for ImmutableDictionaries as well. \n\n### Alternative Designs\n\nI’m sorry about the brevity. Can someone put in the details?  I’ve put in about 90 hours this week and am dead. \n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXK98Xw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5cnP1h",
                                           "createdAt":  "2023-05-18T23:49:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-collections\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nPlease Implement #65925 for ImmutableDictionaries as well. \n\n### API Proposal\n\nPlease Implement #65925 for ImmutableDictionaries as well. \n\n### API Usage\n\nPlease Implement #65925 for ImmutableDictionaries as well. \n\n### Alternative Designs\n\nI’m sorry about the brevity. Can someone put in the details?  I’ve put in about 90 hours this week and am dead. \n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTonyValenti\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Collections`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-18T23:49:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cpfKJ",
                                           "createdAt":  "2023-05-19T10:42:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nPlease Implement #65925 for ImmutableDictionaries as well. \n\n### API Proposal\n\nPlease Implement #65925 for ImmutableDictionaries as well. \n\n### API Usage\n\nPlease Implement #65925 for ImmutableDictionaries as well. \n\n### Alternative Designs\n\nI’m sorry about the brevity. Can someone put in the details?  I’ve put in about 90 hours this week and am dead. \n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTonyValenti\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Linq`, `wishlist`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-19T10:42:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cr3xf",
                                           "createdAt":  "2023-05-19T17:26:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chrisoverzero",
                                           "body":  "`ImmutableDictionary` appears already to have [a robust set of overloads as requested in the linked issue](https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutabledictionary.toimmutabledictionary?view=net-7.0) for creation from an instance of `IEnumerable\u003cKeyValuePair\u003cTKey, TValue\u003e\u003e`.",
                                           "updatedAt":  "2023-05-19T17:26:12Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "ToImmutableDictionary for KVP and Tuples",
        "labels":  [
                       "api-suggestion",
                       "area-System.Linq",
                       "wishlist"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88314",
        "createdAt":  "2023-07-03T07:53:37Z",
        "number":  88314,
        "author":  "huoyaoyuan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4uYvQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Joe4evr",
                                            "createdAt":  "2023-07-03T08:15:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2023-07-04T22:04:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GerardSmit",
                                            "createdAt":  "2023-07-04T22:55:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-06-18T22:30:39Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2024-03-19T02:08:56Z",
        "body":  "Since `Append` and `Prepend` comes much later than `Enumerable.Concat`, there are many old code using `Concat` with single-element array:\r\n```csharp\r\nvalues.Concat(new[] { moreValue })\r\n```\r\nwhich can be converted into:\r\n```csharp\r\nvalues.Append(moreValue)\r\n```\r\n\r\n`Prepend` is less common, and changes the order of two elements in code, but it would be more natural.\r\n\r\nCategory: Performance\r\nSeverity: Info",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOd4sxrg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5gahFQ",
                                           "createdAt":  "2023-07-03T07:53:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSince `Append` and `Prepend` comes much later than `Enumerable.Concat`, there are many old code using `Concat` with single-element array:\r\n```csharp\r\nvalues.Concat(new[] { moreValue })\r\n```\r\nwhich can be converted into:\r\n```csharp\r\nvalues.Append(moreValue)\r\n```\r\n\r\n`Prepend` is less common, and changes the order of two elements in code, but it would be more natural.\r\n\r\nCategory: Performance\r\nSeverity: Info\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehuoyaoyuan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Linq`, `code-analyzer`, `code-fixer`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-03T07:53:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ga135",
                                           "createdAt":  "2023-07-03T08:47:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "campersau",
                                           "body":  "Note that `Enumerable.Append` is not directly supported in `net47` or older.\r\nhttps://apisof.net/catalog/6ae58543-a1b1-3617-8780-227339489ae8",
                                           "updatedAt":  "2023-07-03T08:47:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ga9B4",
                                           "createdAt":  "2023-07-03T09:05:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e Note that `Enumerable.Append` is not directly supported in `net47` or older.\r\n\r\nYes, it needs extra attention for `netstandard2.0`, since it requires a shim on net461-net47.\r\nFor non-netstandard platforms, just detecting the existence of the methods should be sufficient.",
                                           "updatedAt":  "2023-07-03T09:05:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53izGu",
                                           "createdAt":  "2024-03-19T02:08:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "With collection expressions, there are actually additional options with spread: `[..values, morevalue]`. But maybe there are ones still prefer method call.",
                                           "updatedAt":  "2024-03-19T02:08:55Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Analyzer: change Enumerable.Concat with single element arrays into Append or Prepend",
        "labels":  [
                       "api-suggestion",
                       "area-System.Linq",
                       "code-analyzer",
                       "code-fixer"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91804",
        "createdAt":  "2023-09-08T15:39:04Z",
        "number":  91804,
        "author":  "colejohnson66",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-09-16T17:07:01Z",
        "body":  "### Background and motivation\n\n.NET has a method to \"zip\" `IEnumerable`s together into an `IEnumerable` of tuples. However, there\u0027s no way to \"revert\" this operation.\r\n\r\nI propose an \"unzip\" operation that would do such a thing. These methods would take an `IEnumerable\u003c\u003e` of tuples and \"unzip\" them into a tuple of `IEnumerable\u003cT\u003e`, one for each element. In addition, \"unzip to array\" and \"unzip to list\" could be added to simplify an \"unzip and collect\" operation.\n\n### API Proposal\n\n```cs\r\n\r\nusing System.Collections.Generic;\r\n\r\nnamespace System.Linq;\r\n\r\npublic static class Enumerable\r\n{\r\n    public static (IEnumerable\u003cTFirst\u003e First, IEnumerable\u003cTSecond\u003e Second) Unzip\u003cTFirst, TSecond\u003e(\r\n        this IEnumerable\u003c(TFirst, TSecond)\u003e source);\r\n    public static (IEnumerable\u003cTFirst\u003e First, IEnumerable\u003cTSecond\u003e Second, IEnumerable\u003cTThird\u003e Third) Unzip\u003cTFirst, TSecond, TThird\u003e(\r\n        this IEnumerable\u003c(TFirst, TSecond, TThird)\u003e source);\r\n\r\n    // could also be `UnzipToArrays`\r\n    public static (TFirst[] First, TSecond[] Second) UnzipToArray\u003cTFirst, TSecond\u003e(\r\n        this IEnumerable\u003c(TFirst, TSecond)\u003e source);\r\n    public static (TFirst[] First, TSecond[] Second, TThird[] Third) UnzipToArray\u003cTFirst, TSecond, TThird\u003e(\r\n        this IEnumerable\u003c(TFirst, TSecond, TThird)\u003e source);\r\n\r\n    // could also be `UnzipToLists`\r\n    public static (List\u003cTFirst\u003e First, List\u003cTSecond\u003e Second) UnzipToList\u003cTFirst, TSecond\u003e(\r\n        this IEnumerable\u003c(TFirst, TSecond)\u003e source);\r\n    public static (List\u003cTFirst\u003e First, List\u003cTSecond\u003e Second, List\u003cTThird\u003e Third) UnzipToList\u003cTFirst, TSecond, TThird\u003e(\r\n        this IEnumerable\u003c(TFirst, TSecond, TThird)\u003e source);\r\n}\r\n```\r\n\n\n### API Usage\n\nA use case of these could be to take an `IEnumerable\u003c(TNumber X, TNumber Y)\u003e` of points on a chart, and extract it into two `IEnumerable\u003cTNumber\u003e`s - one for the X values and one for the Y values. However, doing so with `Select` would incur multiple enumeration, which is not good. The current method requires collecting the first `IEnumerable` (of the tuple) into an array or list, then `Select`ing the individual tuple elements:\r\n\r\n```cs\r\nIEnumerable\u003c(decimal X, decimal Y)\u003e points = ...\r\n(decimal X, decimal Y)[] pointsAsArray = points.ToArray(); // required to avoid multiple enumeration below\r\ndecimal[] xValues = pointsAsArray.Select(tuple =\u003e tuple.X).ToArray();\r\ndecimal[] yValues = pointsAsArray.Select(tuple =\u003e tuple.Y).ToArray();\r\n```\r\n\r\nThe \"unzip\" methods would bypass the collection step above:\r\n\r\n```cs\r\nIEnumerable\u003c(decimal X, decimal Y)\u003e points = ...\r\n(IEnumerable\u003cdecimal\u003e xValuesEnumerable, IEnumerable\u003cdecimal\u003e yValuesEnumerable) = points.Unzip();\r\ndecimal[] xValues = xValuesEnumerable.ToArray();\r\ndecimal[] yValues = yValuesEnumerable.ToArray();\r\n```\r\n\r\nAs mentioned above, \"unzip to array\" and \"unzip to list\" convenience methods would be provided to simplify the extra \"collect\" steps after unziping:\r\n\r\n```cs\r\nIEnumerable\u003c(decimal X, decimal Y)\u003e points = ...\r\n(decimal[] xValues, decimal[] yValues) = points.UnzipToArray();\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZqfK1A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5mCPYQ",
                                           "createdAt":  "2023-09-08T15:39:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\n.NET has a method to \"zip\" `IEnumerable`s together into an `IEnumerable` of tuples. However, there\u0027s no way to \"revert\" this operation.\r\n\r\nI propose an \"unzip\" operation that would do such a thing. These methods would take an `IEnumerable\u003c\u003e` of tuples and \"unzip\" them into a tuple of `IEnumerable\u003cT\u003e`, one for each element. In addition, \"unzip to array\" and \"unzip to list\" could be added to simplify an \"unzip and collect\" operation.\n\n### API Proposal\n\n```cs\r\n\r\nusing System.Collections.Generic;\r\n\r\nnamespace System.Linq;\r\n\r\npublic static class Enumerable\r\n{\r\n    public static (IEnumerable\u003cTFirst\u003e First, IEnumerable\u003cTSecond\u003e Second) Unzip\u003cTFirst, TSecond\u003e(\r\n        this IEnumerable\u003c(TFirst, TSecond)\u003e source);\r\n    public static (IEnumerable\u003cTFirst\u003e First, IEnumerable\u003cTSecond\u003e Second, IEnumerable\u003cTThird\u003e Third) Unzip\u003cTFirst, TSecond, TThird\u003e(\r\n        this IEnumerable\u003c(TFirst, TSecond, TThird)\u003e source);\r\n\r\n    // could also be `UnzipToArrays`\r\n    public static (TFirst[] First, TSecond[] Second) UnzipToArray\u003cTFirst, TSecond\u003e(\r\n        this IEnumerable\u003c(TFirst, TSecond)\u003e source);\r\n    public static (TFirst[] First, TSecond[] Second, TThird[] Third) UnzipToArray\u003cTFirst, TSecond, TThird\u003e(\r\n        this IEnumerable\u003c(TFirst, TSecond, TThird)\u003e source);\r\n\r\n    // could also be `UnzipToLists`\r\n    public static (List\u003cTFirst\u003e First, List\u003cTSecond\u003e Second) UnzipToList\u003cTFirst, TSecond\u003e(\r\n        this IEnumerable\u003c(TFirst, TSecond)\u003e source);\r\n    public static (List\u003cTFirst\u003e First, List\u003cTSecond\u003e Second, List\u003cTThird\u003e Third) UnzipToList\u003cTFirst, TSecond, TThird\u003e(\r\n        this IEnumerable\u003c(TFirst, TSecond, TThird)\u003e source);\r\n}\r\n```\r\n\n\n### API Usage\n\nA use case of these could be to take an `IEnumerable\u003c(TNumber X, TNumber Y)\u003e` of points on a chart, and extract it into two `IEnumerable\u003cTNumber\u003e`s - one for the X values and one for the Y values. However, doing so with `Select` would incur multiple enumeration, which is not good. The current method requires collecting the first `IEnumerable` (of the tuple) into an array or list, then `Select`ing the individual tuple elements:\r\n\r\n```cs\r\nIEnumerable\u003c(decimal X, decimal Y)\u003e points = ...\r\n(decimal X, decimal Y)[] pointsAsArray = points.ToArray(); // required to avoid multiple enumeration below\r\ndecimal[] xValues = pointsAsArray.Select(tuple =\u003e tuple.X).ToArray();\r\ndecimal[] yValues = pointsAsArray.Select(tuple =\u003e tuple.Y).ToArray();\r\n```\r\n\r\nThe \"unzip\" methods would bypass the collection step above:\r\n\r\n```cs\r\nIEnumerable\u003c(decimal X, decimal Y)\u003e points = ...\r\n(IEnumerable\u003cdecimal\u003e xValuesEnumerable, IEnumerable\u003cdecimal\u003e yValuesEnumerable) = points.Unzip();\r\ndecimal[] xValues = xValuesEnumerable.ToArray();\r\ndecimal[] yValues = yValuesEnumerable.ToArray();\r\n```\r\n\r\nAs mentioned above, \"unzip to array\" and \"unzip to list\" convenience methods would be provided to simplify the extra \"collect\" steps after unziping:\r\n\r\n```cs\r\nIEnumerable\u003c(decimal X, decimal Y)\u003e points = ...\r\n(decimal[] xValues, decimal[] yValues) = points.UnzipToArray();\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecolejohnson66\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Linq`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-08T15:39:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mCiF7",
                                           "createdAt":  "2023-09-08T16:32:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Unzip methods necessarily need to eagerly evaluate the source enumerable and return two resultant enumerables as materialized collections. If we do eventually add an `Unzip` method it should not be returning `IEnumerable` but instead always be an array (or `IReadOnlyList\u003cT\u003e`).",
                                           "updatedAt":  "2023-09-08T16:32:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mCwAy",
                                           "createdAt":  "2023-09-08T17:21:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "@eiriktsarpalis Why would eager evaluation require returning an array-like type? `GroupBy` uses `Lookup\u003c\u003e.Create`, and that consumes the input on the call to `GetEnumerator`:\r\n\r\n```cs\r\n// in `Enumerable`: https://source.dot.net/#System.Linq/System/Linq/Grouping.cs,12\r\npublic static IEnumerable\u003cIGrouping\u003cTKey, TSource\u003e\u003e GroupBy\u003cTSource, TKey\u003e(this IEnumerable\u003cTSource\u003e source, Func\u003cTSource, TKey\u003e keySelector) =\u003e\r\n    new GroupedEnumerable\u003cTSource, TKey\u003e(source, keySelector, null);\r\n\r\n// in `GroupedEnumerable`: https://source.dot.net/#System.Linq/System/Linq/Grouping.cs,279\r\npublic IEnumerator\u003cIGrouping\u003cTKey, TSource\u003e\u003e GetEnumerator() =\u003e\r\n    Lookup\u003cTKey, TSource\u003e.Create(_source, _keySelector, _comparer).GetEnumerator();\r\n\r\n// in `Lookup`: https://source.dot.net/#System.Linq/System/Linq/Lookup.cs,87\r\ninternal static Lookup\u003cTKey, TElement\u003e Create(IEnumerable\u003cTElement\u003e source, Func\u003cTElement, TKey\u003e keySelector, IEqualityComparer\u003cTKey\u003e? comparer)\r\n{\r\n    Debug.Assert(source != null);\r\n    Debug.Assert(keySelector != null);\r\n\r\n    Lookup\u003cTKey, TElement\u003e lookup = new Lookup\u003cTKey, TElement\u003e(comparer);\r\n    foreach (TElement item in source)\r\n    {\r\n        lookup.GetGrouping(keySelector(item), create: true)!.Add(item);\r\n    }\r\n\r\n    return lookup;\r\n}\r\n```\r\n\r\nJust to be clear: I would not be opposed to just having them return arrays.",
                                           "updatedAt":  "2023-09-08T17:21:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mC9uV",
                                           "createdAt":  "2023-09-08T18:12:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODGM2SA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "manandre",
                                                                               "createdAt":  "2023-09-08T21:50:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "Actually, collecting before unzipping is not necessary. Each returned enumerable just needs a buffer of \"next\" values to emit. Stepping (`MoveNext()`) will emit from said buffer. If the buffer is empty, the source is stepped and the other enumerable\u0027s buffer will be \"topped up\" with the undesired tuple element.\r\n\r\nThe logic below is a bit horrendous, but it\u0027s a proof of concept:\r\n\r\n```cs\r\npublic static (IEnumerable\u003cTFirst\u003e, IEnumerable\u003cTSecond\u003e) Unzip\u003cTFirst, TSecond\u003e(this IEnumerable\u003c(TFirst, TSecond)\u003e source)\r\n{\r\n    UnzipEnumerator\u003cTFirst, TSecond\u003e enumerator = new(source);\r\n    return (enumerator.First, enumerator.Second);\r\n}\r\n\r\nprivate class UnzipEnumeratorFirst\u003cTA, TB\u003e : IEnumerable\u003cTA\u003e, IEnumerator\u003cTA\u003e\r\n{\r\n    private readonly UnzipEnumerator\u003cTA, TB\u003e _parent;\r\n    public List\u003cTA\u003e Buffer { get; } = new();\r\n\r\n    public UnzipEnumeratorFirst(UnzipEnumerator\u003cTA, TB\u003e parent)\r\n    {\r\n        _parent = parent;\r\n    }\r\n\r\n    public void Reset() =\u003e\r\n        throw new NotSupportedException();\r\n\r\n    public bool MoveNext()\r\n    {\r\n        if (Buffer.Count is not 0)\r\n        {\r\n            // buffer contains data; take from it\r\n            Current = Buffer[0];\r\n            Buffer.RemoveAt(0);\r\n            return true;\r\n        }\r\n\r\n        // otherwise, ask the parent to advance\r\n        if (_parent.TryGetNextFirst(out TA element))\r\n        {\r\n            Current = element;\r\n            return true;\r\n        }\r\n\r\n        // parent failed to advance; this tuple element has been consumed\r\n        return false;\r\n    }\r\n\r\n    public TA Current { get; private set; } = default!;\r\n\r\n    object? IEnumerator.Current =\u003e Current;\r\n\r\n    public void Dispose()\r\n    {\r\n        _parent.Dispose();\r\n    }\r\n\r\n    public IEnumerator\u003cTA\u003e GetEnumerator() =\u003e\r\n        this;\r\n\r\n    IEnumerator IEnumerable.GetEnumerator() =\u003e\r\n        this;\r\n}\r\n\r\nprivate class UnzipEnumeratorSecond\u003cTA, TB\u003e : IEnumerable\u003cTB\u003e, IEnumerator\u003cTB\u003e\r\n{\r\n    private readonly UnzipEnumerator\u003cTA, TB\u003e _parent;\r\n    public List\u003cTB\u003e Buffer { get; } = new();\r\n\r\n    public UnzipEnumeratorSecond(UnzipEnumerator\u003cTA, TB\u003e parent)\r\n    {\r\n        _parent = parent;\r\n    }\r\n\r\n    public void Reset() =\u003e\r\n        throw new NotSupportedException();\r\n\r\n    public bool MoveNext()\r\n    {\r\n        if (Buffer.Count is not 0)\r\n        {\r\n            // buffer contains data; take from it\r\n            Current = Buffer[0];\r\n            Buffer.RemoveAt(0);\r\n            return true;\r\n        }\r\n\r\n        // otherwise, ask the parent to advance\r\n        if (_parent.TryGetNextSecond(out TB element))\r\n        {\r\n            Current = element;\r\n            return true;\r\n        }\r\n\r\n        // parent failed to advance; this tuple element has been consumed\r\n        return false;\r\n    }\r\n\r\n    public TB Current { get; private set; } = default!;\r\n\r\n    object? IEnumerator.Current =\u003e Current;\r\n\r\n    public void Dispose()\r\n    {\r\n        _parent.Dispose();\r\n    }\r\n\r\n    public IEnumerator\u003cTB\u003e GetEnumerator() =\u003e\r\n        this;\r\n\r\n    IEnumerator IEnumerable.GetEnumerator() =\u003e\r\n        this;\r\n}\r\n\r\n\r\nprivate class UnzipEnumerator\u003cTA, TB\u003e : IDisposable\r\n{\r\n    private readonly IEnumerator\u003c(TA, TB)\u003e _e;\r\n\r\n    public UnzipEnumeratorFirst\u003cTA, TB\u003e First { get; }\r\n    public UnzipEnumeratorSecond\u003cTA, TB\u003e Second { get; }\r\n\r\n    public UnzipEnumerator(IEnumerable\u003c(TA, TB)\u003e source)\r\n    {\r\n        _e = source.GetEnumerator();\r\n        First = new(this);\r\n        Second = new(this);\r\n    }\r\n\r\n    public bool TryGetNextFirst(out TA step)\r\n    {\r\n        step = default!;\r\n        if (!_e.MoveNext())\r\n            return false;\r\n\r\n        Second.Buffer.Add(_e.Current.Item2);\r\n        step = _e.Current.Item1;\r\n        return true;\r\n    }\r\n\r\n    public bool TryGetNextSecond(out TB step)\r\n    {\r\n        step = default!;\r\n        if (!_e.MoveNext())\r\n            return false;\r\n\r\n        First.Buffer.Add(_e.Current.Item1);\r\n        step = _e.Current.Item2;\r\n        return true;\r\n    }\r\n\r\n    public void Dispose()\r\n    {\r\n        _e.Dispose();\r\n    }\r\n}\r\n```\r\n\r\nAs a test:\r\n\r\n```cs\r\nIEnumerable\u003c(int, int)\u003e zip = Enumerable.Range(0, 5).Zip(Enumerable.Range(10, 5));\r\n\r\n(IEnumerable\u003cint\u003e first, IEnumerable\u003cint\u003e second) = zip.Unzip();\r\nusing IEnumerator\u003cint\u003e e1 = first.GetEnumerator();\r\nusing IEnumerator\u003cint\u003e e2 = second.GetEnumerator();\r\n\r\ne1.MoveNext(); Console.WriteLine(e1.Current); // 0\r\ne1.MoveNext(); Console.WriteLine(e1.Current); // 1\r\ne1.MoveNext(); Console.WriteLine(e1.Current); // 2\r\ne2.MoveNext(); Console.WriteLine(e2.Current); // 10\r\ne1.MoveNext(); Console.WriteLine(e1.Current); // 3\r\ne2.MoveNext(); Console.WriteLine(e2.Current); // 11\r\ne1.MoveNext(); Console.WriteLine(e1.Current); // 4\r\ne2.MoveNext(); Console.WriteLine(e2.Current); // 12\r\ne2.MoveNext(); Console.WriteLine(e2.Current); // 13\r\ne2.MoveNext(); Console.WriteLine(e2.Current); // 14\r\nConsole.WriteLine(e1.MoveNext());             // \"False\"\r\nConsole.WriteLine(e2.MoveNext());             // \"False\"",
                                           "updatedAt":  "2023-09-08T23:57:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mDQWd",
                                           "createdAt":  "2023-09-08T19:27:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "Isn\u0027t this a one-ish line extension method?\r\n\r\nUnless I am misunderstanding, it\u0027s reasonably easy for someone to implement this themselves.\r\n\r\n```C#\r\npublic static class MyExtensions {\r\n    public static (IEnumerable\u003cTA\u003e first, IEnumerable\u003cTB\u003e second) Unzip\u003cTA, TB\u003e(this IEnumerable\u003c(TA first, TB second)\u003e enumerable) {\r\n        return (enumerable.Select(e =\u003e e.Item1), enumerable.Select(e =\u003e e.Item2));\r\n    }\r\n}\r\n```\r\n\r\nWhich has the [same output](https://sharplab.io/#v2:C4LgTgrgdgNAJiA1AHwAICYAMBYAUBgRj1UwAJUCAWAbmLIoDoAZASygEdbdiCBmAHgAUbYDFIiAlAD5SALxYAHUgF5SAUSgQAtgFMwAQwBGAGx0MASvqgBzHYMxiArBIYAtRYI3a9R0xau2ggQOpM4SXHiCFAIiMgBmLGAAzqLkfPyxpEk6AMYA9lBwEipyigwAqlDyCoLhdKQAkl66BsB5YBlQwDI6BCUJycAMAOI6wM0+bWC1XCSNE63tnd2kOugl2fmFI2ML+lMzeL0MALJ5AG46AHI6AB7AM2kAnILHAMIQYGA6XeGkAPT/Ug4XDHM6XG73R4UF7vT7fX7UAFAoigginC7XO4PP4w17oj5fH7AP6A0joI7oDEQ7HQgiwqmEhEkpFk4JHdHgrFQ3H0/EMJnE0lA3iU6ncnFIvFrAXwoWslGosGYyGS578wWI5GkShirmqukM2VErVsimgqn62m8o2alnavh6lXWqV8mV24WkKg8WGc508v6kIPBkNBskAIgAYvpjNlwz7Xpb/TjA6G0xHo7GdPHuPheGkAGzkdYnACeanuPySLAKSVIAG88CHUPmKEWoukACoAQXiiRSYmi/E7ACEZJsCkVSJVqsPu2JR1JBMAABYsOtDwQ90gDAekUdZXKT6SrTQtXw6YqN3BpoOoADspFeZ58JjMAGUdKYcg8dCoegwDTADoWgEBIYg/N4Bhvgwn7fr+/6rIBwFaOgEh1DewYAL54FhQA=) as your demo.",
                                           "updatedAt":  "2023-09-08T19:27:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mDROO",
                                           "createdAt":  "2023-09-08T19:31:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODGVXvA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-09-08T21:35:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2023-09-11T05:38:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Which has the [same output](https://sharplab.io/#v2:C4LgTgrgdgNAJiA1AHwAICYAMBYAUBgRj1UwAJUCAWAbmLIoDoAZASygEdbdiCBmAHgAUbYDFIiAlAD5SALxYAHUgF5SAUSgQAtgFMwAQwBGAGx0MASvqgBzHYMxiArBIYAtRYI3a9R0xau2ggQOpM4SXHiCFAIiMgBmLGAAzqLkfPyxpEk6AMYA9lBwEipyigwAqlDyCoLhdKQAkl66BsB5YBlQwDI6BCUJycAMAOI6wM0+bWC1XCSNE63tnd2kOugl2fmFI2ML+lMzeL0MALJ5AG46AHI6AB7AM2kAnILHAMIQYGA6XeGkAPT/Ug4XDHM6XG73R4UF7vT7fX7UAFAoigginC7XO4PP4w17oj5fH7AP6A0joI7oDEQ7HQgiwqmEhEkpFk4JHdHgrFQ3H0/EMJnE0lA3iU6ncnFIvFrAXwoWslGosGYyGS578wWI5GkShirmqukM2VErVsimgqn62m8o2alnavh6lXWqV8mV24WkKg8WGc508v6kIPBkNBskAIgAYvpjNlwz7Xpb/TjA6G0xHo7GdPHuPheGkAGzkdYnACeanuPySLAKSVIAG88CHUPmKEWoukACoAQXiiRSYmi/E7ACEZJsCkVSJVqsPu2JR1JBMAABYsOtDwQ90gDAekUdZXKT6SrTQtXw6YqN3BpoOoADspFeZ58JjMAGUdKYcg8dCoegwDTADoWgEBIYg/N4Bhvgwn7fr+/6rIBwFaOgEh1DewYAL54FhQA=) as your demo.\r\n\r\n(only if the enumerable produces the same results on each iteration through it)",
                                           "updatedAt":  "2023-09-08T19:31:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mID2f",
                                           "createdAt":  "2023-09-11T08:14:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e Actually, collecting before unzipping is not necessary.\r\n\r\nThe issue I find with that approach is that the two enumerables necessarily share mutable state in a way that is not transparent to the user. The two projections could easily end up being enumerated by different threads, so thread safety immediately becomes a concern.\r\n\r\nUse of caching on the enumerable rather than the enumerator is also nonstandard. It means that rather than having delayed semantics like most other LINQ methods this would necessarily have lazy semantics:\r\n\r\n```C#\r\n(IEnumerable\u003cint\u003e left, IEnumerable\u003cint\u003e right) = Enumerable.Repeat(1, 10)\r\n    .Select(i =\u003e { Console.WriteLine(\"side-effect\"); return (i,i); })\r\n    .Unzip();\r\n\r\nleft.Count();\r\nleft.Count(); // No console output printed.\r\n````",
                                           "updatedAt":  "2023-09-11T08:14:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mM1iC",
                                           "createdAt":  "2023-09-11T21:58:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "grbell-ms",
                                           "body":  "MoreLinq offers the [Transpose](https://morelinq.github.io/3.4/ref/api/html/M_MoreLinq_MoreEnumerable_Transpose__1.htm) method, which does roughly what you want.",
                                           "updatedAt":  "2023-09-11T21:58:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mQso8",
                                           "createdAt":  "2023-09-12T12:43:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "\u003e \u003e Actually, collecting before unzipping is not necessary.\r\n\u003e \r\n\u003e The issue I find with that approach is that the two enumerables necessarily share mutable state in a way that is not transparent to the user. The two projections could easily end up being enumerated by different threads, so thread safety immediately becomes a concern.\r\n\u003e \r\n\u003e Use of caching on the enumerable rather than the enumerator is also nonstandard. It means that rather than having delayed semantics like most other LINQ methods this would necessarily have lazy semantics:\r\n\u003e \r\n\u003e ```cs\r\n\u003e (IEnumerable\u003cint\u003e left, IEnumerable\u003cint\u003e right) = Enumerable.Repeat(1, 10)\r\n\u003e     .Select(i =\u003e { Console.WriteLine(\"side-effect\"); return (i,i); })\r\n\u003e     .Unzip();\r\n\u003e \r\n\u003e left.Count();\r\n\u003e left.Count(); // No console output printed.\r\n\u003e ```\r\n\r\nAh. I had not considered side effects; I was assuming \"pure\" enumerables. In that case, having `Unzip` collect and return *arrays* would probably be the best option; That would let the user know that their enumerable will be consumed at the call site, not later. Sidenote: I\u0027m assuming you meant `right.Count()` on the last line, which would indeed print nothing as the elements were cached when enumerating the left.\r\n\r\n\u003e MoreLinq offers the [Transpose](https://morelinq.github.io/3.4/ref/api/html/M_MoreLinq_MoreEnumerable_Transpose__1.htm) method, which does roughly what you want.\r\n\r\nThat *would* work, except that tuples don\u0027t implement `IEnumerable`; We have `IEnumerable\u003c(T1, T2)\u003e`, not `IEnumerable\u003cIEnumerable\u003cT\u003e\u003e`. I\u0027d assume it\u0027s not implemented is because tuples aren\u0027t sequences, but more akin to anonymous types; What would iterating through `(int, CancellationToken)` even *mean*? It\u0027s not a sequence IMO. The only valid method of implementing `IEnumerable` would have to be the non-generic version.",
                                           "updatedAt":  "2023-09-12T12:45:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mRIpB",
                                           "createdAt":  "2023-09-12T13:51:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODGiI2A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-09-12T14:32:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e Ah. I had not considered side effects; I was assuming \"pure\" enumerables.\r\n\r\nEven if the source enumerable was pure, the implementation shared above isn\u0027t thread safe.",
                                           "updatedAt":  "2023-09-12T13:51:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mRbVf",
                                           "createdAt":  "2023-09-12T14:32:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "Well, yes. It was a terrible implementation I made just as a proof of concept.",
                                           "updatedAt":  "2023-09-12T14:32:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mRqfh",
                                           "createdAt":  "2023-09-12T15:06:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "I don\u0027t think it could be made thread safe without locking on the enumerator, which is probably just as terrible.",
                                           "updatedAt":  "2023-09-12T15:06:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mp8rU",
                                           "createdAt":  "2023-09-16T17:07:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "As I said: it\u0027s not good code, but just a proof of concept that an enumerable _could_ be unzipped without collecting first. It doesn\u0027t mean that one would want to use that code because, as you mentioned, side effects and thread-safety are not accounted for.\r\n\r\nAnd I mentioned before that post that I wouldn\u0027t be opposed to them returning two \"collected\" arrays instead of enumerables. The API proposal was just my first thought of how it would look; We could toss the `Unzip` and `UnzipToList(s)` methods out, and rename `UnzipToArray(s)` to `Unzip`:\r\n\r\n```cs\r\nusing System.Collections.Generic;\r\n\r\nnamespace System.Linq;\r\n\r\npublic static class Enumerable\r\n{\r\n    public static (TFirst[] First, TSecond[] Second) Unzip\u003cTFirst, TSecond\u003e(\r\n        this IEnumerable\u003c(TFirst, TSecond)\u003e source);\r\n    public static (TFirst[] First, TSecond[] Second, TThird[] Third) Unzip\u003cTFirst, TSecond, TThird\u003e(\r\n        this IEnumerable\u003c(TFirst, TSecond, TThird)\u003e source);\r\n}\r\n```\r\n\r\nThat would be a much simpler API to implement also, I would assume.",
                                           "updatedAt":  "2023-09-16T17:07:00Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "[API Proposal]: Add `IEnumerable` extension for \"unzipping\"",
        "labels":  [
                       "api-suggestion",
                       "area-System.Linq",
                       "wishlist"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92165",
        "createdAt":  "2023-09-15T22:53:01Z",
        "number":  92165,
        "author":  "MatthewSteeples",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCzhueg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2023-10-24T15:46:07Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-10-01T19:12:45Z",
        "body":  "### Background and motivation\r\n\r\nRelated to https://github.com/dotnet/runtime/issues/86219\r\nSimilar to https://github.com/dotnet/runtime/issues/91756 and https://github.com/dotnet/runtime/issues/31001\r\n\r\nThis class already implements the functionality of the interface without explicitly implementing it (as it implements `IList\u003cTElement\u003e`).\r\n\r\nThe indexer on `Lookup\u003cTKey, TElement\u003e` returns this as an `IEnumerable\u003cTElement\u003e` when using the indexer. We have analysers that ensure that we don\u0027t enumerate IEnumerables more than once so we have some code that either casts them to their equivalent collection or converts the `IEnumerable\u003cT\u003e` into an `ICollection\u003cT\u003e` or `IReadOnlyCollection\u003cT\u003e`. In this case we end up passing the Grouping in as a parameter to ReadOnlyCollection because it doesn\u0027t explicitly implement the interface.\r\n\r\n```csharp\r\npublic static IReadOnlyCollection\u003cT\u003e AsReadOnlyCollection\u003cT\u003e(this IEnumerable\u003cT\u003e values)\r\n{\r\n\tif (values is IReadOnlyCollection\u003cT\u003e readonlyCollection)\r\n\t\treturn readonlyCollection; //Ideally we\u0027d want it to return here\r\n\r\n\tif (values is IList\u003cT\u003e list)\r\n\t{\r\n\t\tif (list.Count == 0)\r\n\t\t\treturn Array.Empty\u003cT\u003e();\r\n\r\n\t\treturn new ReadOnlyCollection\u003cT\u003e(list); //It actually returns here\r\n\t}\r\n\r\n        ///rest of implementation\r\n}\r\n```\r\n\r\n### API Proposal\r\n\r\nReplace\r\n\r\n```csharp\r\npublic class Grouping\u003cTKey, TElement\u003e : IGrouping\u003cTKey, TElement\u003e, IList\u003cTElement\u003e\r\n```\r\n\r\nwith\r\n\r\n```csharp\r\npublic class Grouping\u003cTKey, TElement\u003e : IGrouping\u003cTKey, TElement\u003e, IList\u003cTElement\u003e, IReadOnlyList\u003cTElement\u003e\r\n```\r\n\r\n\r\n### API Usage\r\n\r\nNo change in usage of the class\r\n\r\n### Alternative Designs\r\n\r\nBecause making `IList\u003cT\u003e` implement `IReadOnlyList\u003cT\u003e` will cause breaking changes it has been recommended to update the individual classes\r\n\r\n### Risks\r\n\r\nPotential performance penalty of implementing an additional interface",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZ9dxJQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5mo0QA",
                                           "createdAt":  "2023-09-15T22:53:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nRelated to https://github.com/dotnet/runtime/issues/86219\r\nSimilar to https://github.com/dotnet/runtime/issues/91756 and https://github.com/dotnet/runtime/issues/31001\r\n\r\nThis class already implements the functionality of the interface without explicitly implementing it (as it implements `IList\u003cTElement\u003e`).\r\n\r\nThe indexer on `Lookup\u003cTKey, TElement\u003e` returns this as an `IEnumerable\u003cTElement\u003e` when using the indexer. We have analysers that ensure that we don\u0027t enumerate IEnumerables more than once so we have some code that either casts them to their equivalent collection or converts the `IEnumerable\u003cT\u003e` into an `ICollection\u003cT\u003e` or `IReadOnlyCollection\u003cT\u003e`. In this case we end up passing the Grouping in as a parameter to ReadOnlyCollection because it doesn\u0027t explicitly implement the interface.\r\n\r\n```csharp\r\npublic static IReadOnlyCollection\u003cT\u003e AsReadOnlyCollection\u003cT\u003e(this IEnumerable\u003cT\u003e values)\r\n{\r\n\tif (values is IReadOnlyCollection\u003cT\u003e readonlyCollection)\r\n\t\treturn readonlyCollection; //Ideally we\u0027d want it to return here\r\n\r\n\tif (values is IList\u003cT\u003e list)\r\n\t{\r\n\t\tif (list.Count == 0)\r\n\t\t\treturn Array.Empty\u003cT\u003e();\r\n\r\n\t\treturn new ReadOnlyCollection\u003cT\u003e(list); //It actually returns here\r\n\t}\r\n\r\n        ///rest of implementation\r\n}\n\n### API Proposal\n\nReplace\r\n\r\n```csharp\r\npublic class Grouping\u003cTKey, TElement\u003e : IGrouping\u003cTKey, TElement\u003e, IList\u003cTElement\u003e\r\n```\r\n\r\nwith\r\n\r\n```csharp\r\npublic class Grouping\u003cTKey, TElement\u003e : IGrouping\u003cTKey, TElement\u003e, IList\u003cTElement\u003e, IReadOnlyList\u003cTElement\u003e\r\n```\r\n\n\n### API Usage\n\nNo change in usage of the class\n\n### Alternative Designs\n\nBecause making `IList\u003cT\u003e` implement `IReadOnlyList\u003cT\u003e` will cause breaking changes it has been recommended to update the individual classes\n\n### Risks\n\nPotential performance penalty of implementing an additional interface\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMatthewSteeples\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Linq`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-15T22:53:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mqmE2",
                                           "createdAt":  "2023-09-17T10:05:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "It is something that we do for other public collection types as well, so I don\u0027t see why we couldn\u0027t do it here. @stephentoub any objections?\r\n\r\nNote that we might also want to update a few internal types that also implement the `IGrouping` interface for consistency:\r\n\r\nhttps://github.com/dotnet/runtime/blob/197268373bcf990756561fa728f971dc30332012/src/libraries/System.Linq.Parallel/src/System/Linq/Parallel/QueryOperators/Unary/GroupByQueryOperator.cs#L29-L30",
                                           "updatedAt":  "2023-09-17T10:05:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mqqvj",
                                           "createdAt":  "2023-09-17T12:00:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e @stephentoub any objections?\r\n\r\nI don\u0027t have a problem with relevant internal LINQ types implementing IROL as an implementation detail. There\u0027s the ever present discussion about whether type checks in LINQ should _query_ for IROL, which is a separate consideration.",
                                           "updatedAt":  "2023-09-17T12:00:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mqr3U",
                                           "createdAt":  "2023-09-17T12:25:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MatthewSteeples",
                                           "body":  "Agreed. The checking for IROL (or IROC in our case) was only meant as a sample of how we\u0027re using it, not a suggestion to update LINQ",
                                           "updatedAt":  "2023-09-17T12:25:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mqs7t",
                                           "createdAt":  "2023-09-17T12:49:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "There\u0027s one potential issue to be aware of, ensure we have tests for, and if it does manifest, decide what to do about. Historically we\u0027ve had issues where folks complained about changes that resulted in side effects from enumeration not occurring, eg if we made the type returned from a select on an array implement IROC, then code that was either querying for the interface and accessing its Count or else enumerating to get the count would no longer enumerate, in which case the delegate to Select wouldn\u0027t be invoked where it was previously. For types already implementing IList, though, that\u0027s not a concern. ",
                                           "updatedAt":  "2023-09-17T12:52:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mqwSv",
                                           "createdAt":  "2023-09-17T13:59:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e I don\u0027t have a problem with relevant internal LINQ types implementing IROL as an implementation detail.\r\n\r\nIt would also be adding it to a public class, `Grouping\u003cTKey, TElement\u003e`.",
                                           "updatedAt":  "2023-09-17T13:59:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mq51r",
                                           "createdAt":  "2023-09-17T17:16:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e \u003e I don\u0027t have a problem with relevant internal LINQ types implementing IROL as an implementation detail.\r\n\u003e \r\n\u003e It would also be adding it to a public class, `Grouping\u003cTKey, TElement\u003e`.\r\n\r\nSeems fine. Just looked at it... we should delete the comments on the type, which at this point are silly.",
                                           "updatedAt":  "2023-09-17T17:16:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nH5-f",
                                           "createdAt":  "2023-09-21T18:51:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "[Video](https://www.youtube.com/watch?v=gtnntYhxRE4\u0026t=0h28m24s)\n\nThis issue prompted two competing options: explore trying to use a DIM to make `IList\u003cT\u003e : IReadOnlyList\u003cT\u003e`, or writing a tool (analyzer?) to identify all IList-implementing types that are missing IReadOnlyList and fixing them in bulk.\r\n\r\nSo it\u0027s in principle approved, but not quite yet pending followups.\r\n\r\n@terrajobst ",
                                           "updatedAt":  "2023-09-21T19:09:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nIm6K",
                                           "createdAt":  "2023-09-21T21:12:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "Here is the list of all in-box types in .NET 8 that implement any of the mutable interfaces but don\u0027t implement their read-only counterpart.\r\n\r\n\u003e [!NOTE]\r\n\u003e This doesn\u0027t include `Grouping\u003cTKey, TValue\u003e` because the type isn\u0027t available in the reference assembly (it\u0027s only public in the implementation).\r\n\r\n\u003e [!NOTE]\r\n\u003e This also includes interfaces because those would also be impacted by making the mutable interfaces extend the read-only ones.\r\n\r\n```text\r\nSystem.Net.Http.Headers.HttpHeaderValueCollection\u003cT\u003e\r\nSystem.Collections.Generic.ISet\u003cT\u003e\r\nSystem.Collections.Generic.ICollection\u003cT\u003e\r\nSystem.Collections.Generic.IDictionary\u003cTKey, TValue\u003e\r\nSystem.Collections.Generic.IList\u003cT\u003e\r\nSystem.Net.HttpListenerPrefixCollection\r\nSystem.Net.NetworkInformation.IPAddressInformationCollection\r\nSystem.Net.NetworkInformation.UnicastIPAddressInformationCollection\r\nSystem.Net.NetworkInformation.MulticastIPAddressInformationCollection\r\nSystem.Net.NetworkInformation.IPAddressCollection\r\nSystem.Net.NetworkInformation.GatewayIPAddressInformationCollection\r\nSystem.Diagnostics.ActivityTagsCollection\r\nSystem.Security.Principal.IdentityReferenceCollection\r\nSystem.Runtime.CompilerServices.ReadOnlyCollectionBuilder\u003cT\u003e\r\nSystem.Data.Common.DbBatchCommandCollection\r\nSystem.Dynamic.ExpandoObject\r\nSystem.Text.Json.Nodes.JsonArray\r\nSystem.Text.Json.Nodes.JsonObject\r\nSystem.Threading.Tasks.Dataflow.BatchedJoinBlock\u003cT1, T2\u003e\r\nSystem.Threading.Tasks.Dataflow.BatchedJoinBlock\u003cT1, T2, T3\u003e\r\nMicrosoft.Extensions.DependencyInjection.IServiceCollection\r\nMicrosoft.Extensions.DependencyInjection.ServiceCollection\r\nMicrosoft.AspNetCore.Connections.ConnectionItems\r\nMicrosoft.AspNetCore.Http.IHeaderDictionary\r\nMicrosoft.AspNetCore.Http.HeaderDictionary\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.TempDataDictionary\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\r\nMicrosoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList\r\nMicrosoft.AspNetCore.Server.HttpSys.UrlPrefixCollection\r\n```\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eThis is the code I used to get this list from API Catalog.\u003c/summary\u003e\r\n\r\n```C#\r\nusing NuGet.Frameworks;\r\n\r\nusing Terrajobst.ApiCatalog;\r\n\r\nvar catalog = await ApiCatalogModel.LoadFromWebAsync();\r\nvar context = ApiAvailabilityContext.Create(catalog);\r\nvar net80 = NuGetFramework.Parse(\"net80\");\r\n\r\nvar scg = catalog.RootApis.Single(a =\u003e a.GetFullName() == \"System.Collections.Generic\");\r\nvar readOnlyCollection = scg.Children.Single(a =\u003e a.Name == \"IReadOnlyCollection\u003cT\u003e\");\r\nvar readOnlyList = scg.Children.Single(a =\u003e a.Name == \"IReadOnlyList\u003cT\u003e\");\r\nvar readOnlyDictionary = scg.Children.Single(a =\u003e a.Name == \"IReadOnlyDictionary\u003cTKey, TValue\u003e\");\r\n\r\nvar collection = scg.Children.Single(a =\u003e a.Name == \"ICollection\u003cT\u003e\");\r\nvar list = scg.Children.Single(a =\u003e a.Name == \"IList\u003cT\u003e\");\r\nvar dictionary = scg.Children.Single(a =\u003e a.Name == \"IDictionary\u003cTKey, TValue\u003e\");\r\n\r\n\r\nforeach (var a in catalog.GetAllApis())\r\n{\r\n    if (!a.Kind.IsType())\r\n        continue;\r\n\r\n    var availability = context.GetAvailability(a, net80);\r\n    if (availability is null || !availability.IsInBox)\r\n        continue;\r\n\r\n    var syntax = availability.Declaration.GetMyMarkup();\r\n\r\n    var implementsCollection = false;\r\n    var implementsList = false;\r\n    var implementsDictionary = false;\r\n\r\n    var implementsReadOnlyCollection = false;\r\n    var implementsReadOnlyList = false;\r\n    var implementsReadOnlyDictionary = false;\r\n\r\n    foreach (var m in syntax.Parts)\r\n    {\r\n        if (m.Kind != MarkupPartKind.Reference)\r\n            continue;\r\n\r\n        if (m.Reference == collection.Guid)\r\n            implementsCollection = true;\r\n\r\n        if (m.Reference == list.Guid)\r\n            implementsList = true;\r\n\r\n        if (m.Reference == dictionary.Guid)\r\n            implementsDictionary = true;\r\n\r\n        if (m.Reference == readOnlyCollection.Guid)\r\n            implementsReadOnlyCollection = true;\r\n\r\n        if (m.Reference == readOnlyList.Guid)\r\n            implementsReadOnlyList = true;\r\n\r\n        if (m.Reference == readOnlyDictionary.Guid)\r\n            implementsReadOnlyDictionary = true;\r\n    }\r\n\r\n    if (implementsCollection \u0026\u0026 !implementsReadOnlyCollection ||\r\n        implementsList \u0026\u0026 !implementsReadOnlyList ||\r\n        implementsDictionary \u0026\u0026 !implementsReadOnlyDictionary)\r\n    {\r\n        Console.WriteLine(a.GetFullName());\r\n    }\r\n}\r\n```\r\n\r\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-21T21:12:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nIneM",
                                           "createdAt":  "2023-09-21T21:15:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODHqvtw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "huoyaoyuan",
                                                                               "createdAt":  "2023-09-25T05:45:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "I\u0027ve marked #31001 for .NET 9 and ready for review so we can discuss this again.",
                                           "updatedAt":  "2023-09-21T21:15:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5n13El",
                                           "createdAt":  "2023-10-01T19:12:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODmKWCg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Daniel-Svensson",
                                                                               "createdAt":  "2023-10-03T10:15:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-06-18T22:30:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Mrxx99",
                                           "body":  "\u003e use a DIM to make `IList\u003cT\u003e : IReadOnlyList\u003cT\u003e`\n\nThis would solve so many pain points\n\n",
                                           "updatedAt":  "2023-10-01T19:12:45Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "[API Proposal]: Add `IReadOnlyList\u003cTElement\u003e` to System.Linq.Grouping\u003cTKey, TElement\u003e",
        "labels":  [
                       "api-needs-work",
                       "area-System.Linq"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92230",
        "createdAt":  "2023-09-18T15:26:51Z",
        "number":  92230,
        "author":  "PetSerAl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-17T12:11:03Z",
        "body":  "### Description\n\n#84519 introduce vectorization into LINQ `Sum` for `int` and `long`. Vectorization change the order in which number summed. In certain cases this affect whenever `OverflowException` will be thrown.\n\n### Reproduction Steps\n\n```c#\r\nIEnumerable\u003cint\u003e Test1() {\r\n    for(int i = 0; i \u003c 32; ++i) {\r\n        yield return 1_000_000_000;\r\n        yield return -1_000_000_000;\r\n    }\r\n}\r\n\r\nIEnumerable\u003cint\u003e Test2() {\r\n    for(int i = 0; i \u003c 32; ++i) {\r\n        yield return 100_000_000;\r\n    }\r\n    for(int i = 0; i \u003c 32; ++i) {\r\n        yield return -100_000_000;\r\n    }\r\n}\r\n\r\nTest1().Sum();\r\nTest1().ToArray().Sum();\r\nTest2().Sum();\r\nTest2().ToArray().Sum();\r\n```\n\n### Expected behavior\n\n```c#\r\nTest1().Sum();           // 0\r\nTest1().ToArray().Sum(); // 0\r\nTest2().Sum();           // OverflowException\r\nTest2().ToArray().Sum(); // OverflowException\r\n```\n\n### Actual behavior\n\n```c#\r\nTest1().Sum();           // 0\r\nTest1().ToArray().Sum(); // OverflowException\r\nTest2().Sum();           // OverflowException\r\nTest2().ToArray().Sum(); // 0\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhPAxXg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5mvatc",
                                           "createdAt":  "2023-09-18T15:26:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\n#84519 introduce vectorization into LINQ `Sum` for `int` and `long`. Vectorization change the order in which number summed. In certain cases this affect whenever `OverflowException` will be thrown.\n\n### Reproduction Steps\n\n```c#\r\nIEnumerable\u003cint\u003e Test1() {\r\n    for(int i = 0; i \u003c 32; ++i) {\r\n        yield return 1_000_000_000;\r\n        yield return -1_000_000_000;\r\n    }\r\n}\r\n\r\nIEnumerable\u003cint\u003e Test2() {\r\n    for(int i = 0; i \u003c 32; ++i) {\r\n        yield return 100_000_000;\r\n    }\r\n    for(int i = 0; i \u003c 32; ++i) {\r\n        yield return -100_000_000;\r\n    }\r\n}\r\n\r\nTest1().Sum();\r\nTest1().ToArray().Sum();\r\nTest2().Sum();\r\nTest2().ToArray().Sum();\r\n```\n\n### Expected behavior\n\n```c#\r\nTest1().Sum();           // 0\r\nTest1().ToArray().Sum(); // 0\r\nTest2().Sum();           // OverflowException\r\nTest2().ToArray().Sum(); // OverflowException\r\n```\n\n### Actual behavior\n\n```c#\r\nTest1().Sum();           // 0\r\nTest1().ToArray().Sum(); // OverflowException\r\nTest2().Sum();           // OverflowException\r\nTest2().ToArray().Sum(); // 0\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ePetSerAl\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-18T15:26:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5myaXL",
                                           "createdAt":  "2023-09-18T21:37:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Talked with @tannergooding about this. We\u0027re leaning toward keeping the new behavior that works well with vectorized implementations. For consistency across configurations though (such as when intrinsics are disabled), the naive implementation would need to be updated. Its new behavior would be to avoid the overflow exceptions through upcasting until the final result is achieved (and checked against the result type). If we stick with the previous behavior, our ability to vectorize this method is substantially hindered.\r\n\r\nAssuming the inconsistency is unacceptable, our .NET 8 resolution options are:\r\n\r\n1. Update the naive implementation per above (this is risky and late)\r\n2. Revert the vectorization in .NET 8, bring it back in .NET 9 along with the naive implementation change\r\n3. Leave this as a known issue in .NET 8, with documentation stating that we do not guarantee if/when an overflow is thrown while accumulating; make the fix in .NET 9\r\n\r\n@stephentoub -- what do you think?",
                                           "updatedAt":  "2023-09-18T21:37:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mygy0",
                                           "createdAt":  "2023-09-18T22:01:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@PetSerAl, what is the scenario where this is actually causing problems for you?",
                                           "updatedAt":  "2023-09-18T22:01:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mzi7M",
                                           "createdAt":  "2023-09-19T03:42:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PetSerAl",
                                           "body":  "I have no scenario, which is currently affected. But I find no discussion of that change in PR. And I decide to raise issue explicitly. So conscious decision about it can be made. And we at least have proper documentation of expected behavior, and any discrepancies between vectorized/non-vectorized versions, if allowed.",
                                           "updatedAt":  "2023-09-19T03:42:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m1U0I",
                                           "createdAt":  "2023-09-19T10:39:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODp-2xA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-16T15:26:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "I wouldn\u0027t say this is an issue specific to vectorization, you can encounter similar behaviour in .NET 7 simply by shuffling the source enumerable:\r\n\r\n```C#\r\nTest1().Sum(); // 0\r\nTest1().Order().Sum(); // OverflowException\r\n```\r\n\r\nTL;DR adding fixed-size integers isn\u0027t an associative operation.\r\n\r\nI think we should just document this as a breaking change and consider adding a LINQ-specific feature switch if we do receive reports of users being impacted (I suspect that\u0027s going to be unlikely).",
                                           "updatedAt":  "2023-09-19T10:40:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m1VJf",
                                           "createdAt":  "2023-09-19T10:40:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Added `needs-breaking-change-doc-created` label because this issue has the `breaking-change` label. \n\n1. [ ] Create and link to this issue a matching issue in the dotnet/docs repo using the [breaking change documentation template](https://aka.ms/dotnet/docs/new-breaking-change-issue), then remove this `needs-breaking-change-doc-created` label.\n\nTagging @dotnet/compat for awareness of the breaking change.",
                                           "updatedAt":  "2023-09-19T10:40:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m33Fo",
                                           "createdAt":  "2023-09-19T15:43:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJQmLw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vcsjones",
                                                                               "createdAt":  "2023-09-24T16:20:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lsoft",
                                                                               "createdAt":  "2023-10-11T05:11:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@eiriktsarpalis, the consideration here isn\u0027t whether there is a difference between `[ int.MaxValue, -1, +1 ].Sum()` and `[ int.MaxValue, +1, -1].Sum()` (although that is an interesting case to consider as well)\r\n\r\nThe consideration is that there is a difference for `[ int.MaxValue, +1, -1].Sum()` based on the hardware you run on and our behavior is now non-deterministic (which is justifiably very bad and can lead to very hard to track down bugs).\r\n\r\nWe basically have a few options we could do...\r\n\r\n1. We say this break is by design and document the new behavior. -- I personally think this is the worst option because, as I indicated above, it can lead to very hard to track down bugs and bugs that only repro some of the time and only on some hardware.\r\n\r\n2. We say this break is not by design and no longer vectorize the code. -- I think this is an \"ok\" option, but it means we will never be able to provide perf gains here.\r\n\r\n3. We say this break is desirable and update the algorithms to only throw if the total sum of integers overflows. This would require a change to both the scalar and vector algorithms to sum themselves in the next largest integer when an overflow is first detected. So something like:\r\n```csharp\r\npublic static int Sum(ReadOnlySpan\u003cint\u003e values)\r\n{\r\n    int sum = 0;\r\n    int lastSign = 0;\r\n\r\n    for (int i = 0; i \u003c values.Length; i++)\r\n    {\r\n        int tmp = sum + value;\r\n        int sign = value \u003e\u003e\u003e 31;\r\n\r\n        // ideally this check is recognized and optimized by the JIT\r\n        if ((lastSign == sign) \u0026\u0026 (sign != (tmp \u003e\u003e\u003e 31)))\r\n        {\r\n            return SumWithPotentialOverflow(sum, values.Slice(i));\r\n        }\r\n    }\r\n    \r\n    return sum;\r\n}\r\n\r\nprivate static int SumWithPotentialOverflow(long sum, ReadOnlySpan\u003cint\u003e values)\r\n{\r\n    for (int i = 0; i \u003c values.Length; i++)\r\n    {\r\n        sum += values[i];\r\n    }\r\n\r\n   return checked((int)sum);\r\n}\r\n```\r\n\r\nUnder such a setup we will only throw an `OverflowException` if the total sum of all values results in an overflow and therefore the ordering of them doesn\u0027t matter. It also avoids requiring upcasts for every value processed and allows vectorization to be kept.\r\n\r\nThe one niche consideration that still exists is if someone has defined a custom enumerator that yields more than `int.MaxValue` results for 32-bit sums and more than `long.MaxValue` results for 64-bit sums. That could still overflow, but is likely so rare that it\u0027s acceptable to leave as undefined (rather than continuing to fallback to a larger temporary).",
                                           "updatedAt":  "2023-09-19T15:43:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oqIBX",
                                           "createdAt":  "2023-10-10T16:59:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I\u0027ve marked the PR which made this change as breaking - we will need to document that if the break remains.  We should make sure that has a workaround for folks.  Moving this to track follow up work (option 3) to 9.0.0.  We could always do option 2 in servicing if we get more feedback around this.",
                                           "updatedAt":  "2023-10-10T16:59:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5puMWF",
                                           "createdAt":  "2023-10-21T08:26:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PetSerAl",
                                           "body":  "My suggestion would be to fallback to sequential summing, when overflow encountered. That will make sure everything, that can be summed sequential, will not overflow with vectorization.\r\n```c#\r\nint Fallback(ref int ptr, nuint length, Vector\u003cint\u003e accumulator, nuint index, nuint lastKnownGood) {\r\n    while(index \u003e lastKnownGood) {\r\n        index -= (nuint)Vector\u003cint\u003e.Count;\r\n        accumulator -= Vector.LoadUnsafe(ref ptr, index);\r\n    }\r\n    long wideResult = 0;\r\n    for(int i = 0; i \u003c Vector\u003cint\u003e.Count; ++i) {\r\n        wideResult += accumulator[i];\r\n    }\r\n    int result = checked((int)wideResult);\r\n    for(; index \u003c length; ++index) {\r\n        checked { result += Unsafe.Add(ref ptr, index); }\r\n    }\r\n    return result;\r\n}\r\n```",
                                           "updatedAt":  "2023-10-21T08:26:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E8DFe",
                                           "createdAt":  "2024-07-16T08:36:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "I removed the `regression-from-last-release` label to indicate that this change is already present in .NET 8",
                                           "updatedAt":  "2024-07-16T08:36:16Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "LINQ `Sum` behavior change",
        "labels":  [
                       "area-System.Linq"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96277",
        "createdAt":  "2023-12-22T15:46:52Z",
        "number":  96277,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8laSQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eiriktsarpalis",
                                            "createdAt":  "2023-12-22T16:06:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2023-12-23T14:01:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2024-01-19T12:32:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LeaFrock",
                                            "createdAt":  "2024-04-22T06:57:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-11-12T13:02:51Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-11-12T13:02:53Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-07-16T06:53:22Z",
        "body":  "Order/OrderBy.Take is currently an O(N log N) operation that allocates an array of length N and keeps all the data around until the relevant portion of the data is consumed.  With a PriorityQueue, however, for OrderBy(...).Take(T) this would instead be O(N log T), and it would only need to keep space proportional to T, not N, so if T is significantly smaller than N (which in typical use is the case, often with a small T value passed to Take), this could lead to significant throughput and memory consumption benefits.\r\n\r\nVariations of this with OrderByDescending are also possible.  It\u0027d also be possible to accomodate OrderBy().Skip(S).Take(T); the priority queue would then need to maintain S+T values, so the benefits would diminish as S grew. However, from an algorithmic complexity perspective, S+T \u003c= N, which means O(N log (S+T)) \u003c= O(N log N). Of course, we\u0027d still need to be careful, since the constants here do matter from a throughput perspective.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkypMPA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5vVN5Y",
                                           "createdAt":  "2023-12-22T15:47:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nOrder/OrderBy.Take is currently an O(N log N) operation that allocates an array of length N and keeps all the data around until the relevant portion of the data is consumed.  With a PriorityQueue, however, for OrderBy(...).Take(T) this would instead be O(N log T), and it would only need to keep space proportional to T, not N, so if T is significantly smaller than N (which in typical use is the case, often with a small T value passed to Take), this could lead to significant throughput and memory consumption benefits.\r\n\r\nVariations of this with OrderByDescending are also possible.  It\u0027d also be possible to accomodate OrderBy().Skip(S).Take(T); the priority queue would then need to maintain S+T values, so the benefits would diminish as S grew. However, from an algorithmic complexity perspective, S+T \u003c= N, which means O(N log (S+T)) \u003c= O(N log N). Of course, we\u0027d still need to be careful, since the constants here do matter from a throughput perspective.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-22T15:47:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vVV_h",
                                           "createdAt":  "2023-12-22T16:23:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQaM1w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephentoub",
                                                                               "createdAt":  "2023-12-23T00:50:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "At quick glance it seems we already have the infrastructure to accommodate such an optimization, essentially it would be us updating this method to use a PQ:\r\n\r\nhttps://github.com/dotnet/runtime/blob/14127ea770cf748509b9057b7a8ed5a3471ebfed/src/libraries/System.Linq/src/System/Linq/OrderedEnumerable.cs#L34-L59",
                                           "updatedAt":  "2023-12-22T16:23:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vfVFB",
                                           "createdAt":  "2023-12-27T17:09:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akade",
                                           "body":  "Do you still want contributions on this? I\u0027d be happy to explore that.\r\n\r\nAfter a quick look at it, I have the following thoughts:\r\nThe priority queue does not support removing leafs, correct? Hence, for the implementation, I think it would be something along the following lines:\r\n\r\n* \"Inverted\" priority queue (capacity: `maxIdx`)\r\n* for each element:\r\n  * if `queue.Count \u003c maxIdx`: Simply Enqueue\r\n  * if `queue.Count \u003e= maxIdx`: Peek, compare and possibly `DequeueEnqueue`\r\n* \"Reverse queue\"\r\n* Yield return items between `minIdx` and `maxIdx`\r\n\r\nDoes that make sense? Or is there any way to avoid the need for reversing as it likely will require a second allocation of a `maxIdx` sized chunk.\r\n\r\nOne question remains, though. Afaik `OrderBy` guarantees stable sort but `PriorityQueue` doesn\u0027t give any guarantees for values with the same priority. We would need to account for that separately right?",
                                           "updatedAt":  "2023-12-27T17:10:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vfc9X",
                                           "createdAt":  "2023-12-27T17:59:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "OrderBy is already ordered min to max, and PriorityQueue is a min heap; there shouldn\u0027t be any need for reversal. There\u0027s also no need to Peek; if Count == take limit, just EnqueueDequeue. And at the end of the enumeration, just TryDequeue until it returns false. For stability, yes, it needs to account for it; easiest way is to store the element\u0027s index as part of the priority and use it as a tie breaker if the elements otherwise compare equal.\r\n\r\nI have a prototype locally, but if you\u0027d like to try / take over, have at it :) The hardest part is the heuristic for when to use this approach. ",
                                           "updatedAt":  "2023-12-27T18:09:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vfzWW",
                                           "createdAt":  "2023-12-27T20:29:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akade",
                                           "body":  "As I would probably have some time the next few days, I\u0027d like to have a go :)\r\n\r\nI played around with a bit of code and understand now, that no peeking is necessary and keeping the sort stable is trivial using a combined prio.\r\n\r\nHowever, I\u0027m still not sure what I missed with regards to inverting the queue:\r\n\r\nIf you take the following random input `[6, 3, 0, 6, 7, 1, 4, 9, 3, 2]` and use a priority queue with just `EnqueueDequeue` when reaching the limit of  `3`, you will get `[6,7,9]` instead of `[0,1,2]`.\r\n\r\n`EnqueueDequeue()` removes the smallest element, i.e. in this case `0` when enqueuing the second `6` and smaller values are immediately discarded. Accordingly, just looping for `TryDequeue` returns ascending values, starting by the min in the heap.\r\n\r\nThe (isolated) code that I used:\r\n```\r\nstatic IEnumerable\u003cT\u003e TakeOrdered\u003cT, TKey\u003e(IEnumerable\u003cT\u003e source, Func\u003cT, TKey\u003e keySelector, int count)\r\n{\r\n    PriorityQueue\u003cT, (TKey key, int sourcePos)\u003e queue = new(count);\r\n\r\n    int i = 0;\r\n    foreach (T item in source)\r\n    {\r\n        if (queue.Count == count)\r\n        {\r\n            queue.EnqueueDequeue(item, (keySelector(item), i));\r\n        }\r\n        else\r\n        {\r\n            queue.Enqueue(item, (keySelector(item), i));\r\n        }\r\n\r\n        i++;\r\n    }\r\n\r\n    while(queue.TryDequeue(out T? elem, out _))\r\n    {\r\n        yield return elem;\r\n    }\r\n}\r\n```\r\nReversing the comparison will result in [2, 1, 0] instead of [0, 1, 2]...",
                                           "updatedAt":  "2023-12-27T20:29:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vf-GG",
                                           "createdAt":  "2023-12-27T21:56:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQqOVA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "akade",
                                                                               "createdAt":  "2023-12-27T22:08:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e However, I\u0027m still not sure what I missed with regards to inverting the queue:\r\n\r\nYou want to use a comparer that inverts the comparison (ideally by implementing a custom struct TPriority with a Compare that inverts the comparison); that then ensures that EnqueueDequeue will remove the largest elements such that the smallest remain in the queue.  But then, you\u0027re right, you\u0027ll need to reverse the final order of elements retrieved with TryDequeue at the end, as they\u0027ll emerge largest to smallest rather than smallest to largest.  The theory is that this optimization will be used when the Take(T) count is a relatively small number, and the reversal either can possibly be done with stack memory or won\u0027t even require additional memory because, e.g. it\u0027s part of a ToArray or ToList where the elements can either be stored into their destination slot directly or alternatively reversed in the destination storage.",
                                           "updatedAt":  "2023-12-27T21:56:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xDIxy",
                                           "createdAt":  "2024-01-17T20:35:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akade",
                                           "body":  "Update from my side:\r\n\r\nI wrote a first version in isolation (against .NET 8):\r\n| Method               | NumberOfPeople | AmountTaken | AmountSkipped | Mean      | Error     | StdDev    | Gen0   | Gen1   | Allocated |\r\n|--------------------- |--------------- |------------ |-------------- |----------:|----------:|----------:|-------:|-------:|----------:|\r\n| OrderByValueType     | 512            | 20          | 0             |  2.697 us | 0.0162 us | 0.0136 us | 0.6294 | 0.0114 |   10528 B |\r\n| OrderByValueType_New | 512            | 20          | 0             |  2.031 us | 0.0342 us | 0.0320 us | 0.0420 |      - |     728 B |\r\n| OrderByValueType     | 512            | 20          | 128           |  4.866 us | 0.0167 us | 0.0130 us | 0.6256 | 0.0076 |   10560 B |\r\n| OrderByValueType_New | 512            | 20          | 128           |  2.193 us | 0.0191 us | 0.0170 us | 0.2251 |      - |    3800 B |\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003e\r\nMore results\r\n\u003c/summary\u003e\r\n| Method               | NumberOfPeople | AmountTaken | AmountSkipped | Mean      | Error     | StdDev    | Gen0   | Gen1   | Allocated |\r\n|--------------------- |--------------- |------------ |-------------- |----------:|----------:|----------:|-------:|-------:|----------:|\r\n| OrderByValueType     | 512            | 10          | 0             |  2.669 us | 0.0408 us | 0.0361 us | 0.6294 | 0.0114 |   10528 B |\r\n| OrderByValueType_New | 512            | 10          | 0             |  2.114 us | 0.0071 us | 0.0067 us | 0.0267 |      - |     488 B |\r\n| OrderByValueType     | 512            | 20          | 0             |  2.697 us | 0.0162 us | 0.0136 us | 0.6294 | 0.0114 |   10528 B |\r\n| OrderByValueType_New | 512            | 20          | 0             |  2.031 us | 0.0342 us | 0.0320 us | 0.0420 |      - |     728 B |\r\n| OrderByValueType     | 512            | 128         | 0             |  6.731 us | 0.0332 us | 0.0310 us | 0.6256 | 0.0076 |   10528 B |\r\n| OrderByValueType_New | 512            | 128         | 0             |  2.180 us | 0.0144 us | 0.0127 us | 0.1984 |      - |    3320 B |\r\n| OrderByValueType     | 512            | 256         | 0             |  9.985 us | 0.0381 us | 0.0318 us | 0.6256 |      - |   10528 B |\r\n| OrderByValueType_New | 512            | 256         | 0             |  2.247 us | 0.0252 us | 0.0236 us | 0.3815 | 0.0076 |    6392 B |\r\n| OrderByValueType     | 512            | 512         | 0             | 15.035 us | 0.0864 us | 0.0765 us | 0.6256 |      - |   10528 B |\r\n| OrderByValueType_New | 512            | 512         | 0             |  2.345 us | 0.0355 us | 0.0332 us | 0.7477 | 0.0305 |   12536 B |\r\n| OrderByValueType     | 512            | 10          | 128           |  4.825 us | 0.0375 us | 0.0351 us | 0.6256 | 0.0076 |   10560 B |\r\n| OrderByValueType_New | 512            | 10          | 128           |  2.086 us | 0.0092 us | 0.0081 us | 0.2098 |      - |    3560 B |\r\n| OrderByValueType     | 512            | 20          | 128           |  4.866 us | 0.0167 us | 0.0130 us | 0.6256 | 0.0076 |   10560 B |\r\n| OrderByValueType_New | 512            | 20          | 128           |  2.193 us | 0.0191 us | 0.0170 us | 0.2251 |      - |    3800 B |\r\n| OrderByValueType     | 512            | 128         | 128           |  7.138 us | 0.0450 us | 0.0399 us | 0.6256 | 0.0076 |   10560 B |\r\n| OrderByValueType_New | 512            | 128         | 128           |  2.177 us | 0.0416 us | 0.0478 us | 0.3815 | 0.0076 |    6392 B |\r\n| OrderByValueType     | 512            | 256         | 128           | 10.607 us | 0.0890 us | 0.0832 us | 0.6256 |      - |   10560 B |\r\n| OrderByValueType_New | 512            | 256         | 128           |  2.304 us | 0.0352 us | 0.0329 us | 0.5646 | 0.0191 |    9464 B |\r\n| OrderByValueType     | 512            | 512         | 128           | 13.314 us | 0.0530 us | 0.0496 us | 0.6256 |      - |   10560 B |\r\n| OrderByValueType_New | 512            | 512         | 128           |  2.434 us | 0.0313 us | 0.0261 us | 0.9308 | 0.0534 |   15608 B |\r\n\u003c/details\u003e\r\n\r\nWhile a bit different than expected and with room for improvement, it looks very promising. So I went along and implemented it within the real system. However, the results are completely different there:\r\n\r\nBefore:\r\n| Method           | NumberOfPeople | AmountTaken | AmountSkipped | Mean        | Error     | StdDev    | Median      | Min         | Max         | Gen0   | Gen1   | Allocated |\r\n|----------------- |--------------- |------------ |-------------- |------------:|----------:|----------:|------------:|------------:|------------:|-------:|-------:|----------:|\r\n| OrderByValueType | 512            | 20          | 0             | 3,169.08 ns | 18.857 ns | 17.639 ns | 3,168.06 ns | 3,145.39 ns | 3,207.83 ns | 0.6181 | 0.0126 |  10.28 KB |\r\n| OrderByValueType | 512            | 20          | 128           | 3,965.31 ns | 76.728 ns | 78.794 ns | 3,959.77 ns | 3,872.22 ns | 4,131.64 ns | 0.6277 |      - |  10.31 KB |\r\n\u003cdetails\u003e\r\n\u003csummary\u003eMore results\u003c/summary\u003e\r\n| Method           | NumberOfPeople | AmountTaken | AmountSkipped | Mean        | Error     | StdDev    | Median      | Min         | Max         | Gen0   | Gen1   | Allocated |\r\n|----------------- |--------------- |------------ |-------------- |------------:|----------:|----------:|------------:|------------:|------------:|-------:|-------:|----------:|\r\n| OrderByValueType | 128            | 10          | 0             | 1,069.33 ns | 13.612 ns | 12.733 ns | 1,063.60 ns | 1,056.67 ns | 1,097.17 ns | 0.1665 |      - |   2.78 KB |\r\n| OrderByValueType | 128            | 10          | 128           |    78.08 ns |  0.838 ns |  0.784 ns |    77.90 ns |    76.75 ns |    79.66 ns | 0.0739 |      - |   1.21 KB |\r\n| OrderByValueType | 128            | 20          | 0             | 1,410.42 ns | 14.162 ns | 13.247 ns | 1,408.20 ns | 1,389.74 ns | 1,435.97 ns | 0.1702 |      - |   2.78 KB |\r\n| OrderByValueType | 128            | 20          | 128           |    80.11 ns |  1.244 ns |  1.164 ns |    80.23 ns |    78.31 ns |    82.10 ns | 0.0740 |      - |   1.21 KB |\r\n| OrderByValueType | 256            | 10          | 0             | 1,591.40 ns | 17.533 ns | 16.400 ns | 1,589.09 ns | 1,567.72 ns | 1,615.40 ns | 0.3225 |      - |   5.28 KB |\r\n| OrderByValueType | 256            | 10          | 128           | 2,178.09 ns | 15.293 ns | 13.557 ns | 2,175.82 ns | 2,161.71 ns | 2,210.39 ns | 0.3210 |      - |   5.31 KB |\r\n| OrderByValueType | 256            | 20          | 0             | 1,701.12 ns | 18.830 ns | 16.692 ns | 1,694.16 ns | 1,682.97 ns | 1,737.79 ns | 0.3205 |      - |   5.28 KB |\r\n| OrderByValueType | 256            | 20          | 128           | 2,335.03 ns | 23.073 ns | 21.582 ns | 2,325.46 ns | 2,308.20 ns | 2,372.47 ns | 0.3231 |      - |   5.31 KB |\r\n| OrderByValueType | 512            | 10          | 0             | 2,995.15 ns | 22.336 ns | 19.801 ns | 2,995.85 ns | 2,951.57 ns | 3,026.48 ns | 0.6284 | 0.0119 |  10.28 KB |\r\n| OrderByValueType | 512            | 10          | 128           | 3,744.72 ns | 28.800 ns | 25.530 ns | 3,743.69 ns | 3,712.89 ns | 3,808.58 ns | 0.6260 |      - |  10.31 KB |\r\n| OrderByValueType | 512            | 20          | 0             | 3,169.08 ns | 18.857 ns | 17.639 ns | 3,168.06 ns | 3,145.39 ns | 3,207.83 ns | 0.6181 | 0.0126 |  10.28 KB |\r\n| OrderByValueType | 512            | 20          | 128           | 3,965.31 ns | 76.728 ns | 78.794 ns | 3,959.77 ns | 3,872.22 ns | 4,131.64 ns | 0.6277 |      - |  10.31 KB |\r\n\u003c/details\u003e\r\n\r\n~2-3x slower with priority queue:\r\n| Method           | NumberOfPeople | AmountTaken | AmountSkipped | Mean      | Error     | StdDev    | Median    | Min       | Max       | Gen0   | Allocated |\r\n|----------------- |--------------- |------------ |-------------- |----------:|----------:|----------:|----------:|----------:|----------:|-------:|----------:|\r\n| OrderByValueType | 512            | 20          | 0             |  6.230 us | 0.0480 us | 0.0425 us |  6.225 us |  6.187 us |  6.329 us | 0.0498 |     912 B |\r\n| OrderByValueType | 512            | 20          | 128           | 12.693 us | 0.0361 us | 0.0320 us | 12.687 us | 12.650 us | 12.770 us | 0.2532 |    5040 B |\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eMore results\u003c/summary\u003e\r\n| Method           | NumberOfPeople | AmountTaken | AmountSkipped | Mean      | Error     | StdDev    | Median    | Min       | Max       | Gen0   | Allocated |\r\n|----------------- |--------------- |------------ |-------------- |----------:|----------:|----------:|----------:|----------:|----------:|-------:|----------:|\r\n| OrderByValueType | 128            | 10          | 0             |  1.929 us | 0.1280 us | 0.1474 us |  1.877 us |  1.779 us |  2.195 us | 0.0319 |     592 B |\r\n| OrderByValueType | 128            | 10          | 128           |  4.551 us | 0.0481 us | 0.0427 us |  4.561 us |  4.490 us |  4.618 us | 0.2719 |    4640 B |\r\n| OrderByValueType | 128            | 20          | 0             |  2.178 us | 0.0160 us | 0.0125 us |  2.177 us |  2.160 us |  2.194 us | 0.0519 |     912 B |\r\n| OrderByValueType | 128            | 20          | 128           |  4.598 us | 0.0671 us | 0.0628 us |  4.562 us |  4.537 us |  4.701 us | 0.2854 |    4880 B |\r\n| OrderByValueType | 256            | 10          | 0             |  3.096 us | 0.0116 us | 0.0102 us |  3.091 us |  3.085 us |  3.118 us | 0.0247 |     592 B |\r\n| OrderByValueType | 256            | 10          | 128           |  7.838 us | 0.1283 us | 0.1200 us |  7.809 us |  7.712 us |  8.114 us | 0.2542 |    4720 B |\r\n| OrderByValueType | 256            | 20          | 0             |  3.514 us | 0.0124 us | 0.0110 us |  3.514 us |  3.502 us |  3.536 us | 0.0420 |     912 B |\r\n| OrderByValueType | 256            | 20          | 128           |  8.106 us | 0.1318 us | 0.1168 us |  8.065 us |  7.988 us |  8.361 us | 0.2905 |    5040 B |\r\n| OrderByValueType | 512            | 10          | 0             |  5.772 us | 0.1035 us | 0.1062 us |  5.730 us |  5.703 us |  6.045 us | 0.0228 |     592 B |\r\n| OrderByValueType | 512            | 10          | 128           | 12.315 us | 0.0979 us | 0.0868 us | 12.322 us | 12.154 us | 12.454 us | 0.2478 |    4720 B |\r\n| OrderByValueType | 512            | 20          | 0             |  6.230 us | 0.0480 us | 0.0425 us |  6.225 us |  6.187 us |  6.329 us | 0.0498 |     912 B |\r\n| OrderByValueType | 512            | 20          | 128           | 12.693 us | 0.0361 us | 0.0320 us | 12.687 us | 12.650 us | 12.770 us | 0.2532 |    5040 B |\r\n\r\nNote that the heuristic is very simple at the moment, and the capacity passed to the priority collection is suboptimal when skipping large amounts even when the count would be known in advance.\r\n\u003c/details\u003e\r\n\r\nI shelved it and came back to it multiple times but have not yet understood what is going on.\r\nHow do you usually profile such things? Are you using ETWProfiler? Any pointers before I go off into the wrong direction would be appriciated :)\r\n",
                                           "updatedAt":  "2024-01-17T20:35:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xJknd",
                                           "createdAt":  "2024-01-18T11:51:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Would it be possible to share your changes?",
                                           "updatedAt":  "2024-01-18T11:51:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xaWgS",
                                           "createdAt":  "2024-01-21T19:17:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akade",
                                           "body":  "\u003e Would it be possible to share your changes?\r\n\r\nOf course, I created a Draft PR for easy viewing: [#97277](https://github.com/dotnet/runtime/pull/97277)",
                                           "updatedAt":  "2024-01-21T19:17:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53bO0d",
                                           "createdAt":  "2024-03-18T11:10:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfCBQA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LeaFrock",
                                                                               "createdAt":  "2024-04-22T07:04:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sfiruch",
                                           "body":  "While heap sort has the (in a sense) optimal asymptotic complexity of O(n log n), the constant factor is fairly high. This is why many people tend to use sorting algorithms other than heap sort.\r\n\r\nWhen `n` is small, perhaps insertion sort might even beat `PriorityQueue`. People usually pick a threshold between `5` and `20`, so for fewer elements people use insertion sort, rather than QuickSort. Please note that QuickSort usually has a lower constant factor than HeapSort, so I\u0027d expect the threshold to be higher in our case.\r\n\r\nIn short: I\u0027d use insertion sort when we know `n \u003c 50` (or so).",
                                           "updatedAt":  "2024-03-18T11:10:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57Tr2U",
                                           "createdAt":  "2024-04-22T08:08:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LeaFrock",
                                           "body":  "Do make sense while N is a large number and T is much smaller(T \u003c\u003c N).\r\n\r\nFor time complexity, it expects `log(T) \u003c\u003c log(N)` which means a higher threshold of `T \u003c\u003c N`. As the `PriorityQueue` depends on 4-ary heap, I guess the different $`k`$ of $`log_k(N)`$ between heap sort and quick sort is also a factor for consideration. It shall be a useful reference to the performance testing cases and threshold finalization.\r\n\r\nFor space complexity, it\u0027s really a brilliant idea. `N-\u003eT` is the most valuable change from the perspective of my view.\r\n\r\nThe final result could be like,\r\n\r\n* When N is less than `n`, use insertion sort.\r\n* When N is more then `n`\r\n  * If T is less than `n * rate`, use heap sort\r\n  * if T is more than `n * rate`, use quick sort\r\n\r\nThe side effect is that, make source codes much more complex 🤣.",
                                           "updatedAt":  "2024-04-22T08:08:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TKkw8",
                                           "createdAt":  "2024-11-11T21:07:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEF_EZg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-11-12T13:06:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "dagophil",
                                                                               "createdAt":  "2025-02-11T16:07:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "PranavSenthilnathan",
                                           "body":  "Just a small clarification, the current implementation is actually `O(N + T log T)`, not `O(N log N)` because quickselect is `O(n)` and allows only needing to sort `T` elements. \n\nSince `O(N log (S+T)) \u003e= O(N log T)`, `O(N log T) \u003e= O(N)` and `O(N log T) \u003e= O(T log T)`, we get `O(N log (S+T)) \u003e= O(N + T log T)` which means that the PQ is never asymptotically better for any `T` or `S`.\n\nBut as mentioned, constants do matter, so for very small `T` and `S` there could be optimization, but even in that case we might want to just scope this to insertion sort + lookup as @LeaFrock suggested (`Max`/`Min` is just a degenerate case of this) instead of a priority queue.",
                                           "updatedAt":  "2024-11-11T21:07:52Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Investigate optimizing some OrderBy().Take calls to use a PriorityQueue",
        "labels":  [
                       "area-System.Linq",
                       "tenet-performance",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98259",
        "createdAt":  "2024-02-10T04:16:53Z",
        "number":  98259,
        "author":  "timcassell",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-08T03:51:24Z",
        "body":  "The implementations of the new `CountBy` and `AggregateBy` Linq extensions don\u0027t preserve order like `GroupBy` does. I think they should.\r\n\r\nhttps://github.com/dotnet/runtime/blob/b5411e3a110cdbc643be3a922a150a9e083cd240/src/libraries/System.Linq/src/System/Linq/CountBy.cs#L39-L42",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOc3Ug5Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5zcghr",
                                           "createdAt":  "2024-02-10T04:16:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe implementations of the new `CountBy` and `AggregateBy` Linq extensions don\u0027t preserve order like `GroupBy` does. I think they should.\r\n\r\nhttps://github.com/manandre/runtime/blob/2f8ef582a8e2e7e7996267694cd7ac73f9e8f34b/src/libraries/System.Linq/src/System/Linq/CountBy.cs#L34-L37\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etimcassell\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Linq`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-10T04:16:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zcm3w",
                                           "createdAt":  "2024-02-10T05:32:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timcassell",
                                           "body":  "Also because the implementations are using a regular Dictionary, they don\u0027t allow null keys, which `GroupBy` does. I think that could be useful to allow null keys. In essence, the semantics should match.",
                                           "updatedAt":  "2024-02-10T05:48:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zc_Tj",
                                           "createdAt":  "2024-02-10T11:25:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e The implementations of the new CountBy and AggregateBy Linq extensions don\u0027t preserve order like GroupBy does.\r\n\r\nCould you share a repro demonstrating this? My impression is that the current implementation of `Dictionary` does preserve insertion order so long as items aren\u0027t being removed from it.\r\n\r\n\u003e Also because the implementations are using a regular Dictionary, they don\u0027t allow null keys, which GroupBy does. \r\n\r\nThis also stems from the shape that [got approved in API review](https://github.com/dotnet/runtime/issues/77716#issuecomment-1664448577). From a performance perspective, it would be nice to keep the Dictionary-based implementation and particularly use of `CollectionsMarshal.GetValueRefOrAddDefault`. I think it should be possible to remove the `notnull` constraint with minimal modifications to the existing implementation (e.g. by wrapping ref-type keys in a struct), but it would need to go through API review again.\r\n\r\ncc @bartonjs @stephentoub @terrajobst for a second opinion on whether we should do this.",
                                           "updatedAt":  "2024-02-10T11:25:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zc_pi",
                                           "createdAt":  "2024-02-10T11:32:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timcassell",
                                           "body":  "\u003e Could you share a repro demonstrating this? My impression is that the current implementation of `Dictionary` does preserve insertion order so long as items aren\u0027t being removed from it.\r\n\r\nOh, my mistake, I didn\u0027t realize Dictionary behaved this way. I went on the assumption that it is unordered. But still the concern for null keys. ",
                                           "updatedAt":  "2024-02-10T11:32:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zdB5u",
                                           "createdAt":  "2024-02-10T12:04:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Regardless, we should add testing validating that order is being preserved.",
                                           "updatedAt":  "2024-02-10T12:04:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zdHN7",
                                           "createdAt":  "2024-02-10T13:47:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e @bartonjs @stephentoub @terrajobst for a second opinion on whether we should do this\r\n\r\nRemoving the constraint and making null keys work sounds fine if there\u0027s actually a need.",
                                           "updatedAt":  "2024-02-10T13:47:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zdSDl",
                                           "createdAt":  "2024-02-10T16:25:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "It\u0027s something we could do in a later release as well, it wouldn\u0027t constitute a breaking change.",
                                           "updatedAt":  "2024-02-10T16:25:28Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Remove notnull constraint from CountBy/AggregateBy",
        "labels":  [
                       "enhancement",
                       "area-System.Linq"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101903",
        "createdAt":  "2024-05-06T06:22:22Z",
        "number":  101903,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-06T06:22:45Z",
        "body":  "`AsQueryable` is marked as trimming unsafe and AOT unsafe. However, we still did some work to make it partially work with trimming. Specifically, `AsQueryable` followed by `Queryable.OrderByDescending`, `Queryable.Skip`, etc. will work thanks to `DynamicDependency` we placed on `OrderByDescending` \u0026 co.\r\n\r\nThis `DynamicDependency` is however not sufficient to make AOT work.\r\n\r\nContext: https://github.com/dotnet/runtime/pull/101417#discussion_r1580590316\r\n\r\nThere\u0027s a test disabled on this issue. Look for the issue number in the repo.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfONOAg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc58404C",
                                           "createdAt":  "2024-05-06T06:22:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-06T06:22:44Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "AsQueryable trimmed happy path doesn\u0027t work with AOT",
        "labels":  [
                       "area-System.Linq"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102252",
        "createdAt":  "2024-05-15T11:03:07Z",
        "number":  102252,
        "author":  "Emik03",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5O9eA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Blaisor",
                                            "createdAt":  "2024-07-09T15:10:58Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-05-15T17:35:48Z",
        "body":  "Consider the following code:\r\n\r\n```cs\r\nvar buffer = new int[4096];\r\nvar index = 0;\r\n\r\nConsole.WriteLine(buffer.Index().TryGetNonEnumeratedCount(out _)); // False\r\nConsole.WriteLine(buffer.Select((x, i) =\u003e (i, x)).TryGetNonEnumeratedCount(out _)); // False\r\nConsole.WriteLine(buffer.Select(x =\u003e (index++, x)).TryGetNonEnumeratedCount(out _)); // True\r\n```\r\n\r\nAll three enumerables produce identical output, yet it is only the last one that is responsible for printing `True`, the rest print `False`.\r\n\r\nLooking at the source code, this is to be expected, since the implementations of [`Select(..., Func\u003cT, int, TResult\u003e)`](https://github.com/dotnet/runtime/blob/8698d3dfcd2398b75920be68f464984ccb8ccca4/src/libraries/System.Linq/src/System/Linq/Select.cs#L74-L86) and [`Index`](https://github.com/dotnet/runtime/blob/8698d3dfcd2398b75920be68f464984ccb8ccca4/src/libraries/System.Linq/src/System/Linq/Index.cs#L29-L41) use iterator methods.\r\n\r\nMy proposal is to create dedicated `Iterator` classes internally just as [`Select(..., Func\u003cT, TResult\u003e)`](https://github.com/dotnet/runtime/blob/8698d3dfcd2398b75920be68f464984ccb8ccca4/src/libraries/System.Linq/src/System/Linq/Select.SpeedOpt.cs) does. I\u0027m very willing to write that myself and contribute a PR for that, if this suggestion is approved.\r\n\r\nThe main advantage with this change comes from the fact that `Select(..., Func\u003cT, int, TResult\u003e)` is a very common operation — hence why `Index` has gotten a dedicated method in the first place — and allowing both to be countable without enumeration would result in a good amount of optimizations both within `System.Linq` (subsequent calls to [`Concat`](https://github.com/dotnet/runtime/blob/8698d3dfcd2398b75920be68f464984ccb8ccca4/src/libraries/System.Linq/src/System/Linq/Concat.SpeedOpt.cs#L16-L26), [`ElementAt`](https://github.com/dotnet/runtime/blob/8698d3dfcd2398b75920be68f464984ccb8ccca4/src/libraries/System.Linq/src/System/Linq/ElementAt.cs#L62), [`Take`](https://github.com/dotnet/runtime/blob/8698d3dfcd2398b75920be68f464984ccb8ccca4/src/libraries/System.Linq/src/System/Linq/Take.cs#L84),[`ToDictionary`](https://github.com/dotnet/runtime/blob/8698d3dfcd2398b75920be68f464984ccb8ccca4/src/libraries/System.Linq/src/System/Linq/ToCollection.cs#L155), and [`Reverse`](https://github.com/dotnet/runtime/blob/8698d3dfcd2398b75920be68f464984ccb8ccca4/src/libraries/System.Linq/src/System/Linq/Reverse.SpeedOpt.cs#L28)) and from any other library that makes use of `TryGetNonEnumeratedCount`.\r\n\r\nPotential drawbacks include:\r\n- Increase in binary size, in which case we can add an `OPTIMIZE_FOR_SIZE` `#if` directive to fallback on iterator methods.\r\n- Callers hypothetically may rely on `TryGetNonEnumeratedCount` returning `false` to force proper enumeration.\r\n- As with any change, there can be unexpected regressions in performance from other areas. If implemented properly though, it should match the existing performance for enumeration.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOffNHiA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc595d90",
                                           "createdAt":  "2024-05-15T11:03:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-15T11:03:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc596GGt",
                                           "createdAt":  "2024-05-15T12:21:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "This would require converting the cited implementations to use iterators. It seems doable to me, but out of size concerns we\u0027ve been reserving these for methods we deem to be high impact.",
                                           "updatedAt":  "2024-05-15T12:21:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5961qT",
                                           "createdAt":  "2024-05-15T13:42:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Emik03",
                                           "body":  "Would a compromise of just a single iterator class be acceptable then?",
                                           "updatedAt":  "2024-05-15T13:42:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5966I8",
                                           "createdAt":  "2024-05-15T13:48:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Presumably that would involve encoding `Index` on top of `Select`? That might improve `Index().TryGetNonEnumeratedCount()` but the hidden delegate invocation feels like it might regress more common use cases. We\u0027d be happy to consider a PR, provided that it\u0027s accompanied with comprehensive benchmarking.",
                                           "updatedAt":  "2024-05-15T13:48:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc597FW6",
                                           "createdAt":  "2024-05-15T14:03:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Emik03",
                                           "body":  "I was thinking about that, yeah. I\u0027ll get to it some time later today then, and post a PR with a link back to this issue once I find the best balance. Thanks!",
                                           "updatedAt":  "2024-05-15T14:03:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5980eI",
                                           "createdAt":  "2024-05-15T17:35:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "Is size really a concern now that trimming and NativeAOT exist (or, will with .NET 9)?",
                                           "updatedAt":  "2024-05-15T17:35:47Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[System.Linq] Consider supporting `Enumerable.TryGetNonEnumeratedCount` in `Enumerable.Select(..., Func\u003cT, int, TResult\u003e)` and `Enumerable.Index`",
        "labels":  [
                       "area-System.Linq",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105660",
        "createdAt":  "2024-07-29T22:08:12Z",
        "number":  105660,
        "author":  "ElectNewt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7hrAQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-07-30T13:44:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "rjgotten",
                                            "createdAt":  "2024-07-31T11:59:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "En3Tho",
                                            "createdAt":  "2024-07-31T12:05:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "wvpm",
                                            "createdAt":  "2024-08-06T10:07:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "khellang",
                                            "createdAt":  "2024-08-06T10:45:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "andrewjsaid",
                                            "createdAt":  "2024-10-03T08:00:43Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2024-08-07T13:49:33Z",
        "body":  "### Background and motivation\n\n`ToListOrEmpty\u003cT\u003e` is an extension method that i saw repeatly during most of my career.  It has been used mainly when getting information from 3rd party applications where I expect a response, but for whatever reason it might not be there (normally it will be null) and I dont want the process to break in that case.\r\n\r\nThis issue is easily solvale with the following code: \r\n\r\n```\r\nIEnumerable\u003cFoo\u003e? foo = _provider.GetFoo();\r\nList\u003cFoo\u003e foolist = foo?.ToList() ?? new List\u003cFoo\u003e(); //or foo?.ToList() ?? []\r\n```\r\n\r\nWhich is not too bad, but as I had to write/review this so many times, I rather to have a method for it. \r\n\r\n\r\nI searched for similar issues but i could not find any, and I thought it will be worth the shot to study if it is worth to add it, specially for those migrating from legacy systems (mainly .NET Framework) to .NET 8+ as I saw this situation repeated on those kind of codebases.  At the same time its an extra abstraction to maintain which makes me wonder if this is really worth the effort.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Collections.Generic;\r\n\r\nnamespace System.Linq\r\n{\r\n    public static partial class Enumerable\r\n    {\r\n\r\n\r\n     public static List\u003cTSource\u003e ToListOrEmpty\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e? source){}\r\n\r\n     }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nIEnumerable\u003cFoo\u003e foo = _provider.GetFoo();\r\n\r\nList\u003cFoo\u003e foolist = foo.ToListOrEmpty();\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh4M_VA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6GiIY5",
                                           "createdAt":  "2024-07-29T22:08:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-29T22:08:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GjWv5",
                                           "createdAt":  "2024-07-30T04:05:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEDhliQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "strangeman375",
                                                                               "createdAt":  "2024-07-30T04:20:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dersia",
                                                                               "createdAt":  "2024-07-30T06:43:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wvpm",
                                                                               "createdAt":  "2024-07-30T11:41:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-30T13:44:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-30T13:44:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "khellang",
                                                                               "createdAt":  "2024-08-06T10:45:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jomaxso",
                                                                               "createdAt":  "2025-01-22T07:46:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "I disagree with this. Many times, people are using null to indicate a lack of results. Instead, what they should be returning is `Enumerable.Empty\u003cT\u003e()`, or `Array.Empty\u003cT\u003e()`.\r\n\r\nThe proposed API just feeds bad practices.",
                                           "updatedAt":  "2024-07-30T04:05:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GjbMZ",
                                           "createdAt":  "2024-07-30T04:23:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODs9Aow==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wvpm",
                                                                               "createdAt":  "2024-08-06T10:07:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e Many times, people are using null to indicate a lack of results. Instead, what they should be returning is `Enumerable.Empty\u003cT\u003e()`, or `Array.Empty\u003cT\u003e()`.\r\n\r\nThe source can be out of control from the usage site.\r\n\r\nBut we don\u0027t provide `IEnumerable\u003cT\u003e?` handling in LINQ. `ToList` is just one single case among LINQ. We won\u0027t add a single case for this.",
                                           "updatedAt":  "2024-07-30T04:23:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GkHn_",
                                           "createdAt":  "2024-07-30T07:01:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ElectNewt",
                                           "body":  "\u003e Many times, people are using null to indicate a lack of results. Instead, what they should be returning is `Enumerable.Empty\u003cT\u003e()`, or `Array.Empty\u003cT\u003e()`.\r\n\r\nyes, I agree that sometimes null means a lack of results and for that scenario, this API is not needed. but the scenarios I\u0027ve been facing the last few years with people migrating/dealing with legacy systems is that you have to deal with this scenario.\r\n\r\nabout the `Enumerable.Empty\u003cT\u003e()`, or `Array.Empty\u003cT\u003e()` when i mentioned 3rd party providers I meant services (usually other companies) that you have no access at all. \r\n\r\n",
                                           "updatedAt":  "2024-07-30T07:01:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GmLPp",
                                           "createdAt":  "2024-07-30T11:45:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODsHGgw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "huoyaoyuan",
                                                                               "createdAt":  "2024-07-30T11:47:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-07-30T12:52:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "wvpm",
                                           "body":  "`foo?.ToList() ?? []` is immediately clear to me.\r\n`foo.ToListOrEmpty()` is not. It raises the question \"Why not `.ToList()`?\" (because it might be null).\r\n\r\nBesides that, I also wonder why you want List. Do you intend to change the length? If not, `.ToArray()` is more appropriate.",
                                           "updatedAt":  "2024-07-30T11:45:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GnGRi",
                                           "createdAt":  "2024-07-30T13:47:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODs9Rfg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-07-30T14:15:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wvpm",
                                                                               "createdAt":  "2024-07-30T18:19:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "En3Tho",
                                                                               "createdAt":  "2024-07-31T12:06:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bgrainger",
                                                                               "createdAt":  "2024-08-03T20:14:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "khellang",
                                                                               "createdAt":  "2024-08-06T10:46:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "julealgon",
                                           "body":  "I\u0027ve worked on a project where there were \"Safe\" variations of tons of LINQ methods, so that they could be called \"safely\" on `null` values. These ended up infesting the entire codebase with thousands of usages each.\r\n\r\nThis proposal basically reminds me of that nightmare. It just promotes a terrible practice. I\u0027d hate to see such methods in the BCL for things that lead people into the pit of failure by default.",
                                           "updatedAt":  "2024-07-30T13:47:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GulsY",
                                           "createdAt":  "2024-07-31T12:02:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxWrbg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wvpm",
                                                                               "createdAt":  "2024-07-31T12:31:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-07-31T13:06:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ElectNewt",
                                                                               "createdAt":  "2024-07-31T14:25:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bgrainger",
                                                                               "createdAt":  "2024-08-03T20:15:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cklutz",
                                                                               "createdAt":  "2024-08-07T15:16:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "saint4eva",
                                                                               "createdAt":  "2024-09-07T07:20:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "rjgotten",
                                           "body":  "\u003e Besides that, I also wonder why you want List. Do you intend to change the length? If not, `.ToArray()` is more appropriate.\r\n\r\nActually the most appropriate is:\r\n\r\n```cs\r\nreturn [.. foo ?? []];\r\n```\r\nWhich will allow the compiler to select an optimized implementation under the hood.\r\nCurrently `ReadOnlyArray\u003c\u003e` if your method returns either `IEnumerable\u003c\u003e` or `IReadOnlyList\u003c\u003e`, iirc.",
                                           "updatedAt":  "2024-07-31T12:02:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HTfu7",
                                           "createdAt":  "2024-08-05T22:36:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODs9C5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-08-05T22:44:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "wvpm",
                                                                               "createdAt":  "2024-08-06T10:07:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-08-06T10:12:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "DrkWzrd",
                                           "body":  "This should come with (or refactored to) another convenience method\r\n\r\n```c#\r\npublic static IEnumerable\u003cT\u003e NotNull\u003cT\u003e(this IEnumerable\u003cT\u003e? possiblyNull)\r\n{\r\n    return possiblyNull ?? [];\r\n}\r\n```\r\nI think this should be the only method managing null `IEnumerable` in linq. And it is the simplest way to protect from `NullReferenceException` in linq.\r\n\r\nEven more, as @wvpm says, with this previous method I think is more readable\r\n\r\n```c#\r\nIEnumerable\u003c\u003e data = GetPossiblyNullData();\r\nvar list = data.NotNull().ToList();\r\n\r\n//event you can extend it to linq queries\r\nvar elements = from value in /*not null*/ data select...\r\n```",
                                           "updatedAt":  "2024-08-05T22:43:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HWycs",
                                           "createdAt":  "2024-08-06T10:06:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODs_Tlg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-08-06T10:12:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-08-06T14:18:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rjgotten",
                                                                               "createdAt":  "2024-08-06T14:58:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "wvpm",
                                           "body":  "\u003e This should come with (or refactored to) another convenience method\r\n\u003e \r\n\u003e ```cs\r\n\u003e public static IEnumerable\u003cT\u003e NotNull\u003cT\u003e(this IEnumerable\u003cT\u003e? possiblyNull)\r\n\u003e {\r\n\u003e     return possiblyNull ?? [];\r\n\u003e }\r\n\u003e ```\r\n\u003e \r\n\u003e I think this should be the only method managing null `IEnumerable` in linq. And it is the simplest way to protect from `NullReferenceException` in linq.\r\n\u003e \r\n\u003e Even more, as @wvpm says, with this previous method I think is more readable\r\n\u003e \r\n\u003e ```cs\r\n\u003e IEnumerable\u003c\u003e data = GetPossiblyNullData();\r\n\u003e var list = data.NotNull().ToList();\r\n\u003e \r\n\u003e //event you can extend it to linq queries\r\n\u003e var elements = from value in /*not null*/ data select...\r\n\u003e ```\r\n\r\nSince you mention linq queries, I\u0027ll focus on that type of usage of Linq.\r\nLinq queries, in my opinion, should be used for querying.\r\nThat is:\r\n\r\n- joining \u0027tables\u0027 (via `Select`)\r\n- declaring which \u0027columns\u0027 you want (via `Select`)\r\n- expanding collections (via `SelectMany`)\r\n- aggregation (via `Sum`, `Count`, `Average` \u0026 `Aggregate`)\r\n- filtering (`Where`)\r\n- paging (`Skip` \u0026 `Take`)\r\n- ordering/sorting (`OrderBy`)\r\n\r\nThe `ToList` \u0026 `ToArray` are not part of the querying but used to execute the query and materialise the `IEnumerable`. Including a `not null` in the linq query therefore feels out of place.\r\n\r\nAs others have pointed out, a query returning `null` is strange behaviour. It does not make sense in the context of querying a database. `IEnumerable\u003cT\u003e?` tends to appear when querying a collection that is nullable.\r\n\r\nIf the source is not null, a linq query doesn\u0027t produce `null`. Therefore handling the `null` case does not belong to the responsibility of linq queries. Handling the `null` case should be done outside of linq code.\r\n\r\nSuppose you want to do the following:\r\n```csharp\r\nvar obj = new {\r\n\tCollection = (IEnumerable\u003cstring\u003e?) null\r\n};\r\nstring[] strings = obj.Collection.Where(x =\u003e x.Length \u003e 0).ToArray();\r\n```\r\n\r\nPrefer:\r\n`string[] strings = obj.Collection is {} collection ? collection.Where(x =\u003e x.Length \u003e 0).ToArray() : null`\r\nShorthand:\r\n`string[] strings = obj?.Collection.Where(x =\u003e x.Length \u003e 0).ToArray() ?? []`\r\n\r\nOver\r\n`string[] strings = obj.Collection.Where(x =\u003e x.Length \u003e 0).NotNull().ToArray()`\r\nor\r\n`string[] strings = obj.Collection.Where(x =\u003e x.Length \u003e 0).ToArrayOrEmpty()`\r\n\r\nMethods such as `Where` specifically throw `ArgumentNullException`, so Linq has no reason to handle the `null` case.\r\n",
                                           "updatedAt":  "2024-08-06T10:06:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HZH8g",
                                           "createdAt":  "2024-08-06T15:01:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DrkWzrd",
                                           "body":  "\u003e Over `string[] strings = obj.Collection.Where(x =\u003e x.Length \u003e 0).NotNull().ToArray()` or `string[] strings = obj.Collection.Where(x =\u003e x.Length \u003e 0).ToArrayOrEmpty()`\r\n\u003e \r\n\u003e Methods such as `Where` specifically throw `ArgumentNullException`, so Linq has no reason to handle the `null` case.\r\n\r\nHere I think this should come like this\r\n```c#\r\nstring[] strings = obj.Collection.AsNotNull().Where(x=\u003e x.Length\u003e 0).ToArray(); \r\n//this way you don\u0027t care if collection is null, \r\n//you will get the result or an empty (but enumerable) array. \r\n//The same result as you are proposing.\r\n```\r\n\r\nYou are doing an exercise of responsability saying \"I know this could be null, and I\u0027m handling it\". And you are avoiding throwing an exception, which we all know is preferable.\r\n\r\nAnd in the second case quoted you proposed. If `Collection` is null, it blows up.\r\n\r\nIn the end, these are very subtle (and therefore irrelevant) differences.\r\n\r\nPS: On the queries subject, after consider it, I think you are right.",
                                           "updatedAt":  "2024-08-06T15:07:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HbiKo",
                                           "createdAt":  "2024-08-06T20:59:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wvpm",
                                           "body":  "@DrkWzrd\r\nMoving the `AsNotNull()` before the query makes more sense and looks better than the previous proposed API changes.\r\nPersonally I\u0027d still prefer `?? []` in scenarios like that.\r\nYou could also use in this way: `string[] strings = (obj.Collection ?? []).Where(x=\u003e x.Length\u003e 0).ToArray(); `\r\nNote that with this approach you\u0027d call the `.Where` \u0026 `.ToArray` on an empty collection which is a tiny performance waste.\r\nIf you use `string[] strings = obj?.Collection.Where(x =\u003e x.Length \u003e 0).ToArray() ?? []` the methods are skipped for `null`.",
                                           "updatedAt":  "2024-08-06T21:00:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hgz9U",
                                           "createdAt":  "2024-08-07T13:49:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODtR3VQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-08-07T15:15:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rjgotten",
                                                                               "createdAt":  "2024-08-08T08:36:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wvpm",
                                                                               "createdAt":  "2024-08-08T14:24:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@DrkWzrd \r\n\u003e You are doing an exercise of responsability saying \"I know this could be null, and I\u0027m handling it\". And you are avoiding throwing an exception, which we all know is preferable.\r\n\r\nIn the vast majority of cases from my experience, a `null` collection is just a bug/bad practice that needs fixing. So, I disagree: handling the `null` value in those cases instead of letting it throw just masks and postpones an issue that needed immediate attention instead.",
                                           "updatedAt":  "2024-08-07T13:49:31Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "[API Proposal]: Create a ToListOrEmpty\u003cT\u003e on System.Collections.Generic",
        "labels":  [
                       "api-suggestion",
                       "area-System.Linq"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105743",
        "createdAt":  "2024-07-31T09:28:52Z",
        "number":  105743,
        "author":  "alrz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-04T21:01:28Z",
        "body":  "### Background and motivation\r\n\r\nThese operators have a direct sql translation and generally feels missing from the set of operators we have today.\r\n\r\nThe implementation is identical to `Intersect` and `IntersetBy` except with a `Contains` in place of `Remove`.\r\n\r\n\r\n### API Proposal\r\n\r\n```cs\r\npublic static partial class Enumerable\r\n{\r\n+  static IEnumerable\u003cTSource\u003e WhereIn\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source, IEnumerable\u003cTSource\u003e values);\r\n+  static IEnumerable\u003cTSource\u003e WhereIn\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source, IEnumerable\u003cTSource\u003e values, IEqualityComparer\u003cTSource\u003e? comparer);\r\n\r\n+  static IEnumerable\u003cTSource\u003e WhereInBy\u003cTSource, TKey\u003e(this IEnumerable\u003cTSource\u003e source, IEnumerable\u003cTKey\u003e values, Func\u003cTSource, TKey\u003e keySelector);\r\n+  static IEnumerable\u003cTSource\u003e WhereInBy\u003cTSource, TKey\u003e(this IEnumerable\u003cTSource\u003e source, IEnumerable\u003cTKey\u003e values, Func\u003cTSource, TKey\u003e keySelector, IEqualityComparer\u003cTKey\u003e? comparer);\r\n\r\n+  static IEnumerable\u003cTSource\u003e WhereNotIn\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source, IEnumerable\u003cTSource\u003e values);\r\n+  static IEnumerable\u003cTSource\u003e WhereNotIn\u003cTSource\u003e(this IEnumerable\u003cTSource\u003e source, IEnumerable\u003cTSource\u003e values, IEqualityComparer\u003cTSource\u003e? comparer);\r\n\r\n+  static IEnumerable\u003cTSource\u003e WhereNotInBy\u003cTSource, TKey\u003e(this IEnumerable\u003cTSource\u003e source, IEnumerable\u003cTKey\u003e values, Func\u003cTSource, TKey\u003e keySelector);\r\n+  static IEnumerable\u003cTSource\u003e WhereNotInBy\u003cTSource, TKey\u003e(this IEnumerable\u003cTSource\u003e source, IEnumerable\u003cTKey\u003e values, Func\u003cTSource, TKey\u003e keySelector, IEqualityComparer\u003cTKey\u003e? comparer);\r\n}\r\n\r\npublic static class Queryable\r\n{\r\n+  static IQueryable\u003cTSource\u003e WhereIn\u003cTSource\u003e(this IQueryable\u003cTSource\u003e source, IEnumerable\u003cTSource\u003e values);\r\n+  static IQueryable\u003cTSource\u003e WhereIn\u003cTSource\u003e(this IQueryable\u003cTSource\u003e source, IEnumerable\u003cTSource\u003e values, IEqualityComparer\u003cTSource\u003e? comparer);\r\n\r\n+  static IQueryable\u003cTSource\u003e WhereInBy\u003cTSource, TKey\u003e(this IQueryable\u003cTSource\u003e source, IEnumerable\u003cTKey\u003e values, Expression\u003cFunc\u003cTSource, TKey\u003e\u003e keySelector);\r\n+  static IQueryable\u003cTSource\u003e WhereInBy\u003cTSource, TKey\u003e(this IQueryable\u003cTSource\u003e source, IEnumerable\u003cTKey\u003e values, Expression\u003cFunc\u003cTSource, TKey\u003e\u003e keySelector, IEqualityComparer\u003cTKey\u003e? comparer);\r\n\r\n+  static IQueryable\u003cTSource\u003e WhereNotIn\u003cTSource\u003e(this IQueryable\u003cTSource\u003e source, IEnumerable\u003cTSource\u003e values);\r\n+  static IQueryable\u003cTSource\u003e WhereNotIn\u003cTSource\u003e(this IQueryable\u003cTSource\u003e source, IEnumerable\u003cTSource\u003e values, IEqualityComparer\u003cTSource\u003e? comparer);\r\n\r\n+  static IQueryable\u003cTSource\u003e WhereNotInBy\u003cTSource, TKey\u003e(this IQueryable\u003cTSource\u003e source, IEnumerable\u003cTKey\u003e values, Expression\u003cFunc\u003cTSource, TKey\u003e\u003e keySelector);\r\n+  static IQueryable\u003cTSource\u003e WhereNotInBy\u003cTSource, TKey\u003e(this IQueryable\u003cTSource\u003e source, IEnumerable\u003cTKey\u003e values, Expression\u003cFunc\u003cTSource, TKey\u003e\u003e keySelector, IEqualityComparer\u003cTKey\u003e? comparer);\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar filtered = list.WhereIn(anotherList);\r\n```\r\n\r\n\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOu-WZeg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Gtgq3",
                                           "createdAt":  "2024-07-31T09:29:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-31T09:29:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Gtyfs",
                                           "createdAt":  "2024-07-31T10:06:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e The implementation is identical to `Intersect` and `IntersetBy` except with a `Contains` in place of `Remove`.\r\n\r\nI\u0027m not sure I follow this distinction. Looking at sql WHERE IN examples it seems to be [equivalent to this particular `IntersectBy` overload](https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.intersectby?view=net-8.0#system-linq-enumerable-intersectby-2(system-collections-generic-ienumerable((-0))-system-collections-generic-ienumerable((-1))-system-func((-0-1)))) so it isn\u0027t clear to me what the proposed methods are bringing to the table (other than naming parity perhaps).\r\n\r\ncc @dotnet/efteam ",
                                           "updatedAt":  "2024-07-31T10:06:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Gt8in",
                                           "createdAt":  "2024-07-31T10:29:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alrz",
                                           "body":  "\u003eso it isn\u0027t clear to me what the proposed methods are bringing to the table\r\n\r\n`Intersect` and `IntersectBy` remove duplicates. Note the the distinction is more visible with the latter where you have a key selector, this will keep items that are not exactly \"duplicates\" but are determined to be the _same_ by virtue of using a key selector.\r\n",
                                           "updatedAt":  "2024-07-31T10:44:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GuA-4",
                                           "createdAt":  "2024-07-31T10:38:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "I see, so you want to avoid set semantics. Does this extend to the other set-like operators such as Except or Union?",
                                           "updatedAt":  "2024-07-31T10:38:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GuE7O",
                                           "createdAt":  "2024-07-31T10:46:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alrz",
                                           "body":  "\u003e Does this extend to the other set-like operators such as Except or Union?\r\n\r\nI don\u0027t think this applies to Except and Union. Except returns every item that is not present in the input and the equivalent of Union without set semantics would be Concat.\r\n",
                                           "updatedAt":  "2024-07-31T11:10:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GuJm2",
                                           "createdAt":  "2024-07-31T10:58:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alrz",
                                           "body":  "Actually `Except` would be equivalent to `WhereNotIn` so this fills the gap where you don\u0027t want `Not` there. I added a note to op.",
                                           "updatedAt":  "2024-07-31T11:39:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GuQy3",
                                           "createdAt":  "2024-07-31T11:13:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alrz",
                                           "body":  "By that reasoning the implementation for `Except` and `ExceptBy` is incorrect?\r\n\r\nFor `Except` using `!set.Contains` and `set.Add` have the same effect only for the first call, but not for subsequent ones.\r\n\u003e ```cs\r\n\u003e private static IEnumerable\u003cTSource\u003e ExceptByIterator\u003cTSource, TKey\u003e(IEnumerable\u003cTSource\u003e first, IEnumerable\u003cTKey\u003e second, Func\u003cTSource, TKey\u003e keySelector, IEqualityComparer\u003cTKey\u003e? comparer)\r\n\u003e {\r\n\u003e     var set = new HashSet\u003cTKey\u003e(second, comparer);\r\n\u003e \r\n\u003e     foreach (TSource element in first)\r\n\u003e     {\r\n\u003e         if (set.Add(keySelector(element)))\r\n\u003e         {\r\n\u003e             yield return element;\r\n\u003e         }\r\n\u003e     }\r\n\u003e }\r\n\u003e ```\r\n\r\nThis actually remove \"duplicates\" but I don\u0027t think Except is supposed to do that.\r\n\r\nFor example, `new[] {1,1,2}.Except(new[] {2})` should return `[1, 1]` but it returns `[1]`.",
                                           "updatedAt":  "2024-07-31T11:34:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Gysfo",
                                           "createdAt":  "2024-07-31T20:48:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e This actually remove \"duplicates\" but I don\u0027t think Except is supposed to do that.\r\n\r\nIt is, that\u0027s the set semantics.\r\n\r\nYou can of course implement `WhereIn` via `.Where(x =\u003e y.Contains(x))`, or some form of `Join` with a result selector (which may perform better, and `WhereNotIn` as `.Where(x =\u003e !y.Contains(x))`.",
                                           "updatedAt":  "2024-07-31T20:48:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G3L32",
                                           "createdAt":  "2024-08-01T09:44:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alrz",
                                           "body":  "\u003eIt is\r\n\r\nTIL :)\r\n\r\n\u003eYou can of course implement WhereIn\r\n\r\nYes, as long as you manually create the hashset (or if you just generating sql) this is fine, otherwise you\u0027re doing n^2. Of course this doesn\u0027t enable scenarios that are impossible and adding a helper in source to do that is trivial, this would only be a convenience API for readability.",
                                           "updatedAt":  "2024-08-05T12:16:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HAR4z",
                                           "createdAt":  "2024-08-02T09:48:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODskPdg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alrz",
                                                                               "createdAt":  "2024-08-02T10:24:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "It seems like a useful addition that we could consider in a future version. Would it be possible to update your original proposal such that the following have been added?\r\n\r\n1. Missing parameter names and namespaces,\r\n2. Matching `WhereNotIn` methods and\r\n3. Matching IQueryable overloads.\r\n\r\nThanks!",
                                           "updatedAt":  "2024-08-02T09:51:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc675Zl6",
                                           "createdAt":  "2025-08-04T20:56:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Missed this when it was originally opened. This is a bit similar to SQL concepts of semijoin and antijoin, which I looked into a few months ago.\n\n@alrz what\u0027s the exact motivation for asking for a dedicated operator, as opposed to just writing out `Where(b =\u003e list.Contains(b))` and `Where(b =\u003e !list.Contains(b))`? If the motivation is somehow related to databases and SQL, then I\u0027m not sure I see it - the above LINQ constructs (with Where and Contains) are already well-supported in EF and other LINQ providers, and SQL itself does not have dedicated WhereIn/WhereInBy operators.\n\nAs a side note, if the main issue with the set operations (Intersect, Except) is the removal of duplicates, then instead of introducing dedicated WhereIn/WhereNotIn operators we could consider introducing non-duplicate-removing versions of these two operations; in other words, just like Concat is a non-deduplicating version of Union, we could have non-deduplicating versions of Intersect and Except. FWIW PostgreSQL has both duplicate-removing and non-duplicate-removing  variants of all three operations (i.e. INTERSECT vs. INTERSECT ALL, [see docs](https://www.postgresql.org/docs/current/queries-union.html)).",
                                           "updatedAt":  "2025-08-04T21:01:28Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "[API Proposal]: `WhereIn` and `WhereInBy` LINQ operators",
        "labels":  [
                       "api-suggestion",
                       "area-System.Linq"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112165",
        "createdAt":  "2025-02-05T00:16:42Z",
        "number":  112165,
        "author":  "WhatzGames",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-zF6A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2025-02-05T15:29:52Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-02-21T07:36:51Z",
        "body":  "### Background and motivation\n\nConcatenating asynchronous data is currently only returned in the order in which the AsyncEnumerables are passed into `Concat`.\nIn the case that the order of the data itself does not matter, having to wait for a previous sequence to fully complete is not necessary.\n\nE.g. collecting data through separate paginated sources like an API and a database would require for one of the two to wait for the previous stream to be completely read. (This might not be the best example, but I hope you get the idea.)\n\nThe goal of this proposal is to take the idea of `Task.WhenEach()` and instead of waiting for a full completion of the first sequence, it would be possible to iterate over the results as soon as one of the two sequences returns a new entry.\n\n### API Proposal\n\n```csharp\nnamespace System.Linq;\n\npublic static class AsyncEnumerable\n{\n    public static IAsyncEnumerable\u003cT\u003e ConcatWhenEach(this IAsyncEnumerable\u003cT\u003e source, IAsyncEnumerable\u003cT\u003e other);\n    //This one is optional. As Task.WhenEach would provide an IAsyncEnumerable\u003cT\u003e already\n    public static IAsyncEnumerable\u003cT\u003e ConcatWhenEach(this IAsyncEnumerable\u003cT\u003e source, IEnumerable\u003cTask\u003cT\u003e\u003e other);\n}\n\n```\n\n### API Usage\n\n```csharp\n\n// return entries with ~3 ms delay per entry\nIAsyncEnumerable\u003cData\u003e source = GetDataFromAPI();\n// return entries with ~1ms delay per entry \nIAsyncEnumerable\u003cData\u003e other = GetDataFromDatabase();\n\n// returns other[0], other[1], source[0], other[2], other[3], other[4], source[1], other[5] etc... \nsource.ConcatWhenEach(second)\n\n```\n\n\n### Alternative Designs\n\nCurrently I can\u0027t think of any other approach, but I\u0027m open to any other possible suggestions and discussions.\n\n### Risks\n\nNone that come to mind.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnZoLFQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6dFWHJ",
                                           "createdAt":  "2025-02-05T00:17:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-05T00:17:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dLRtv",
                                           "createdAt":  "2025-02-05T14:18:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbB6ZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2025-02-05T15:26:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alrz",
                                                                               "createdAt":  "2025-07-18T02:02:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "The term \"concatenation\" in my mind has a strong association with chaining each of the input enumerables in order. This doesn\u0027t do that so I would suggest either adopting the original \"WhenEach\" terminology:\n\n```C#\npublic static IAsyncEnumerable\u003cT\u003e WhenEach(params ReadOnlySpan\u003cIAsyncEnumerable\u003cT\u003e\u003e sources);\n```\n\nor perhaps \n\n```C#\npublic static IAsyncEnumerable\u003cT\u003e Interleave(params ReadOnlySpan\u003cIAsyncEnumerable\u003cT\u003e\u003e sources);\n```\n\n@stephentoub opinions?",
                                           "updatedAt":  "2025-02-05T14:18:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dLWgd",
                                           "createdAt":  "2025-02-05T14:26:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEF6tVQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2025-02-05T14:27:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WhatzGames",
                                                                               "createdAt":  "2025-02-05T15:21:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2025-02-05T15:26:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-02-05T15:55:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "timcassell",
                                                                               "createdAt":  "2025-02-06T02:29:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "omariom",
                                                                               "createdAt":  "2025-02-08T00:58:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vladd",
                                                                               "createdAt":  "2025-02-10T04:05:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "FiniteReality",
                                                                               "createdAt":  "2025-02-11T05:34:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "FWIW, dotnet/reactive calls this particular operation Merge.\n\nI\u0027d like for us to examine holistically the set of APIs reactive exposes for IObservable in the System.Reactive package and for IAsyncEnumerable in the System.Interactive.Async package, and come up with a list of the additional methods we think make sense to add to AsyncEnumerable all up, rather than doing them one at a time. Where the names are reasonable, it\u0027d also be good to use the naming already employed there (that said, some of the naming is not desirable, like \"Amb\").",
                                           "updatedAt":  "2025-02-05T14:26:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dMTrN",
                                           "createdAt":  "2025-02-05T15:29:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e The term \"concatenation\" in my mind has a strong association with chaining each of the input enumerables in order. This doesn\u0027t do that \n\n100% agreed.\n\n\u003e FWIW, dotnet/reactive calls this particular operation Merge.\n\nI was going to mention either `Merge` or `Combine` would be more intuitive. Given `Merge` already exists, that automatically wins to me. \n\nThe term `Interleave` also has strong semantic behind it, usually meaning it alternates consistently. Seeing variable results on an \"interleave\" call would be misleading IMHO.",
                                           "updatedAt":  "2025-02-05T15:29:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dO8Tj",
                                           "createdAt":  "2025-02-05T20:19:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "toupswork",
                                           "body":  "\u003e FWIW, dotnet/reactive calls this particular operation Merge.\n\u003e \n\u003e I\u0027d like for us to examine holistically the set of APIs reactive exposes for IObservable in the System.Reactive package and for IAsyncEnumerable in the System.Interactive.Async package, and come up with a list of the additional methods we think make sense to add to AsyncEnumerable all up, rather than doing them one at a time. Where the names are reasonable, it\u0027d also be good to use the naming already employed there (that said, some of the naming is not desirable, like \"Amb\").\n\nYes! What @stephentoub said! I accomplished the same thing using MergeEx I believe. But it is very prudent on Stephen\u0027s part to wait before just bringing it in as-is. If you take a look at the comments for merge and I remember there are two of them (I believe one is an extension method in the other is not), the author wrote in the comments something of a regret that he or she wished they had designed it different but now they are locked in. Read it and you\u0027ll see what I am talking about. Plus, looking out how they implemented it, it looks like there are significant opportunities to improve the performance of it, and I would much rather have the Merge method written by Stephen.",
                                           "updatedAt":  "2025-02-05T20:19:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dmgsV",
                                           "createdAt":  "2025-02-07T21:00:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WhatzGames",
                                           "body":  "\u003e I was going to mention either Merge or Combine would be more intuitive. Given Merge already exists, that automatically wins to me.\n\nYeah, I was not too sure about the naming myself for the get go. If Merge has already been used before, I\u0027d go with that one as well.\n\n@stephentoub With you on that one. Makes sense to get them all in one fell swoop.\n",
                                           "updatedAt":  "2025-02-07T21:00:05Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal]: ConcatWhenEach for IAsyncEnumerable\u003cT\u003e",
        "labels":  [
                       "api-suggestion",
                       "area-System.Linq"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114269",
        "createdAt":  "2025-04-04T16:32:59Z",
        "number":  114269,
        "author":  "fedeAlterio",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODMF3Eg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "neon-sunset",
                                            "createdAt":  "2025-04-04T22:29:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2025-08-21T09:38:28Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-04-07T08:43:53Z",
        "body":  "### Background and motivation\n\nCurrent LINQ operators for `IAsyncEnumerable\u003cT\u003e` are the async transposition of the Synchronous LINQ over `IEnumerable\u003cT\u003e` and that is great. But `IAsyncEnumerable\u003cT\u003e` has a lot of similarities with `IObservable\u003cT\u003e` also, since its not blocking nature, and it has full language support (with await foreach).\n\nI think its a great opportunity to pick some brilliant ideas (operators) from dotnet-reactive that are more oriented to event processing.\n\n### API Proposal\n\nFor example:\n\n```csharp\n\npublic static partial class AsyncEnumerable\n{\n    /// \u003csummary\u003e\n    /// Flattens an asynchronous sequence of asynchronous sequences into a single sequence.\n    /// Always switches to the latest inner sequence, canceling previous ones.\n    /// \u003c/summary\u003e\n    /// \u003ctypeparam name=\"T\"\u003eThe type of elements in the sequence.\u003c/typeparam\u003e\n    /// \u003cparam name=\"sources\"\u003eThe source sequence of sequences.\u003c/param\u003e\n    /// \u003creturns\u003eA single flattened sequence of elements.\u003c/returns\u003e\n    public static IAsyncEnumerable\u003cT\u003e Switch\u003cT\u003e(this IAsyncEnumerable\u003cIAsyncEnumerable\u003cT\u003e\u003e sources);\n\n    /// \u003csummary\u003e\n    /// Merges multiple asynchronous sequences into a single sequence.\n    /// Unlike Concat, elements are interleaved as they arrive.\n    /// \u003c/summary\u003e\n    /// \u003ctypeparam name=\"T\"\u003eThe type of elements in the sequence.\u003c/typeparam\u003e\n    /// \u003cparam name=\"sources\"\u003eThe source sequences to merge.\u003c/param\u003e\n    /// \u003creturns\u003eA merged asynchronous sequence.\u003c/returns\u003e\n    public static IAsyncEnumerable\u003cT\u003e Merge\u003cT\u003e(this IAsyncEnumerable\u003cIAsyncEnumerable\u003cT\u003e\u003e sources);\n\n    /// \u003csummary\u003e\n    /// Concatenates multiple asynchronous sequences into a single sequence.\n    /// Processes them sequentially: each sequence starts after the previous one completes.\n    /// \u003c/summary\u003e\n    /// \u003ctypeparam name=\"T\"\u003eThe type of elements in the sequence.\u003c/typeparam\u003e\n    /// \u003cparam name=\"sources\"\u003eThe source sequences to concatenate.\u003c/param\u003e\n    /// \u003creturns\u003eA concatenated asynchronous sequence.\u003c/returns\u003e\n    public static IAsyncEnumerable\u003cT\u003e Concat\u003cT\u003e(this IAsyncEnumerable\u003cIAsyncEnumerable\u003cT\u003e\u003e sources);\n}\n\n```\n\n- It could be useful to process some `IAsyncEnumerable\u003cvoid\u003e` sequences. Rx solves this problem using an empty Unit struct. I dont know if this could be an acceptable solution.\n- Maybe could be useful a [GroupByLazy](https://github.com/dotnet/reactive/issues/1211#issuecomment-700240083)?\n- Throttle and Debounce?\n\n\n### API Usage\n\n```csharp\nasync IAsyncEnumerable\u003cIAsyncEnumerable\u003cint\u003e\u003e GetDataSources()\n{\n    yield return GenerateNumbers(1); \n    await Task.Delay(3000); \n    yield return GenerateNumbers(100); \n}\n\nasync IAsyncEnumerable\u003cint\u003e GenerateNumbers(int start)\n{\n    for (int i = 0; i \u003c 5; i++)\n    {\n        yield return start + i;\n        await Task.Delay(1000); \n    }\n}\n\nawait foreach (var number in GetDataSources().Switch())\n{\n    Console.WriteLine(number);\n}\n\nawait foreach (var number in GetDataSources().Merge())\n{\n    Console.WriteLine(number);\n}\n\nawait foreach (var number in GetDataSources().Concat())\n{\n    Console.WriteLine(number);\n}\n\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpbES1Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6lp-tz",
                                           "createdAt":  "2025-04-04T16:33:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-04T16:33:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lsNfd",
                                           "createdAt":  "2025-04-04T22:31:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlgorithmsAreCool",
                                           "body":  "There is [System.Linq.Async](https://www.nuget.org/packages/System.Linq.Async/) which has pretty extensive support for LINQ operations on `IAsyncEnumerable\u003cT\u003e`",
                                           "updatedAt":  "2025-04-04T22:31:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lsRLV",
                                           "createdAt":  "2025-04-04T22:40:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEM_Mvg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlgorithmsAreCool",
                                                                               "createdAt":  "2025-04-04T22:52:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "neon-sunset",
                                           "body":  "\u003e There is [System.Linq.Async](https://www.nuget.org/packages/System.Linq.Async/) which has pretty extensive support for LINQ operations on `IAsyncEnumerable\u003cT\u003e`\n\nThis issue is likely a follow-up to https://github.com/dotnet/runtime/issues/79782\n\nLast time I checked, System.Linq.Async package had pretty gnarly overhead and I assume what we have now is much more well-behaved.",
                                           "updatedAt":  "2025-04-04T22:40:00Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Rx-like operators for IAsyncEnumerable\u003cT\u003e",
        "labels":  [
                       "api-suggestion",
                       "area-System.Linq"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115079",
        "createdAt":  "2025-04-26T13:59:41Z",
        "number":  115079,
        "author":  "willdean",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODB1HPw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lindexi",
                                            "createdAt":  "2025-04-28T03:10:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TickThunder",
                                            "createdAt":  "2025-04-29T04:47:46Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-23T07:52:46Z",
        "body":  "### Description\n\n[ In all the following, I\u0027m ignoring arrays, because they\u0027re already special-cased ]\n\n`Enumerable.Chunk()` uses a \"list-like\" exponential-growth approach to arriving at the size of buffer it needs to hold a chunk.  This optimises the case where the chunk size is much larger than the number of entries in the collection.   But in cases where there _is_ at least one whole chunk, then there will have been been a series of \"wasted\" reallocations as the first chunk buffer is repeatedly found to be too small and resized.\n\nFor example, a chunk size of 512 takes 8 allocations/resizes to arrive at its full size: 4,8,16,32,64,128,256,512, allocating almost twice as much space for the first chunk as it really needed, and doing 8x more optimisations than may have been necessary.  \n\nWhether or not this matters, or can be improved, depends:\n\n* For collections with a small number of chunks, the \u0027wasted\u0027 allocations of the first chunk can be as numerous, or more numerous, than the genuine ones.\n* In collections with many chunks, we don\u0027t care because the \u0027waste\u0027 is a small proportion of the genuine allocations\n* In uncountable collections, we don\u0027t know the size up front so we\u0027re stuck with discovering it incrementally\n* But, in collections which **are** countable, we could trivially avoid the waste by knowing how big the first chunk needs to be\n\nI have read #67132 and it\u0027s clear to me that nobody expects a great deal from `Chunk()` in the way of performance - it\u0027s allocation-heavy and that\u0027s that.   But that issue does leave the door open in https://github.com/dotnet/runtime/issues/67132#issuecomment-1085924041 for \"little tweaks\" to make it better, and in the spirit of small tweakery, I propose changing the setup of the first chunk buffer in `EnumerableChunkIterator` from \n\n```\n     int arraySize = Math.Min(size, 4);\n```\nto\t\n```\n   int arraySize = Math.Min(size, source.TryGetNonEnumeratedCount(out int sourceCount) ? sourceCount : 4);\n```\n\t\t\nI think from the history that there was a time when calling `TryGetNonEnumeratedCount` might have seemed too expensive, but there is now another type-check looking for the array special case, so it seems that people are now OK with doing low-cost O(1) up-front checks if they help performance.\n\nI tend to assume that `TryGetNonEnumeratedCount` is not expensive (unless a particular `IEnumerable\u003cT\u003e` misbehaves), and have not been able to measure the deleterious effect of adding it to any vaguely realistic `Chunk()` benchmark - I simply can\u0027t get it out of the Benchmark.NET noise-floor - see Data below.\n\n### Configuration\n\nBenchmarkDotNet v0.14.0, Windows 11 (10.0.26100.3775)\nIntel Core Ultra 9 185H, 1 CPU, 22 logical and 16 physical cores\n.NET SDK 9.0.203\n  [Host]     : .NET 9.0.4 (9.0.425.16305), X64 RyuJIT AVX2\n  DefaultJob : .NET 9.0.4 (9.0.425.16305), X64 RyuJIT AVX2\n\n### Regression?\n\nNo\n\n### Data\n\n| Method             | CollectionSize | ChunkSize | Mean         | Gen0   | Allocated |\n|------------------- |--------------- |---------- |-------------:|-------:|----------:|\n| Enumerable         | 10             | 5         |     99.53 ns | 0.0039 |     208 B |\n| FastEnumerable     | 10             | 5         |     99.49 ns | 0.0039 |     208 B |\n| ListCollection     | 10             | 5         |     97.82 ns | 0.0039 |     208 B |\n| FastListCollection | 10             | 5         |     93.75 ns | 0.0033 |     176 B |\n| Enumerable         | 10             | 100       |    112.94 ns | 0.0048 |     256 B |\n| FastEnumerable     | 10             | 100       |    105.72 ns | 0.0049 |     256 B |\n| ListCollection     | 10             | 100       |    108.35 ns | 0.0049 |     256 B |\n| FastListCollection | 10             | 100       |     79.46 ns | 0.0029 |     152 B |\n| Enumerable         | 10             | 512       |    110.42 ns | 0.0049 |     256 B |\n| FastEnumerable     | 10             | 512       |    104.97 ns | 0.0049 |     256 B |\n| ListCollection     | 10             | 512       |    105.93 ns | 0.0049 |     256 B |\n| FastListCollection | 10             | 512       |     76.74 ns | 0.0029 |     152 B |\n| Enumerable         | 1500           | 5         |  6,419.44 ns | 0.1831 |    9744 B |\n| FastEnumerable     | 1500           | 5         |  6,486.67 ns | 0.1831 |    9744 B |\n| ListCollection     | 1500           | 5         |  6,955.54 ns | 0.1831 |    9744 B |\n| FastListCollection | 1500           | 5         |  6,829.16 ns | 0.1831 |    9712 B |\n| Enumerable         | 1500           | 100       |  3,462.08 ns | 0.0420 |    2280 B |\n| FastEnumerable     | 1500           | 100       |  3,586.67 ns | 0.0381 |    2280 B |\n| ListCollection     | 1500           | 100       |  3,806.44 ns | 0.0420 |    2280 B |\n| FastListCollection | 1500           | 100       |  3,726.25 ns | 0.0381 |    2032 B |\n| Enumerable         | 1500           | 512       |  3,593.68 ns | 0.0534 |    2904 B |\n| FastEnumerable     | 1500           | 512       |  3,350.55 ns | 0.0534 |    2904 B |\n| ListCollection     | 1500           | 512       |  3,888.40 ns | 0.0534 |    2904 B |\n| FastListCollection | 1500           | 512       |  3,560.02 ns | 0.0420 |    2224 B |\n| Enumerable         | 15000          | 5         | 65,909.87 ns | 1.8311 |   96144 B |\n| FastEnumerable     | 15000          | 5         | 65,062.50 ns | 1.8311 |   96144 B |\n| ListCollection     | 15000          | 5         | 65,179.16 ns | 1.8311 |   96144 B |\n| FastListCollection | 15000          | 5         | 62,964.80 ns | 1.8311 |   96112 B |\n| Enumerable         | 15000          | 100       | 32,222.36 ns | 0.3662 |   19560 B |\n| FastEnumerable     | 15000          | 100       | 32,730.25 ns | 0.3662 |   19560 B |\n| ListCollection     | 15000          | 100       | 32,583.27 ns | 0.3662 |   19560 B |\n| FastListCollection | 15000          | 100       | 33,289.45 ns | 0.9155 |   19312 B |\n| Enumerable         | 15000          | 512       | 31,407.68 ns | 0.3052 |   17048 B |\n| FastEnumerable     | 15000          | 512       | 30,778.50 ns | 0.3052 |   17048 B |\n| ListCollection     | 15000          | 512       | 31,196.14 ns | 0.3052 |   17048 B |\n| FastListCollection | 15000          | 512       | 30,826.80 ns | 0.3052 |   16368 B |\n\n`Enumerable` and `ListCollection` are running the current framework source code, but compiled in my test project\n`FastEnumerable` and `FastListCollection` are a copy the same code but with the modification suggested above.\n`Enumerable` is directly using an iterator method that yields bytes.\n`ListCollection` is the same iterator that\u0027s been pushed through `ToList()` before the benchmark\n\n### Analysis\n\nEveryone has their own idea about how `Chunk()` is actually used, and I don\u0027t know how many real-world scenarios this change actually improves, but it seems a low-cost way of avoiding a few allocations - the CPU difference is apparently negligible but the number of allocations is definitely reduced for countable collections (primarily `IList\u003c\u003e`, I would have guessed).\n\nOf course, one could do another fast-path for `IList\u003c\u003e`, but that would definitely add a lot more additional complexity and risk of regression than this proposal.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqNNUsg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6o0hyK",
                                           "createdAt":  "2025-04-26T15:51:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "I\u0027d always assumed it would do one allocation of the desired size. And if that singular chunk was too large, just treat it like the last chunk and resize it down. Sure, you\u0027d have one too-large allocation, but the GC would likely clean it up real quick.",
                                           "updatedAt":  "2025-04-26T15:51:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6o01Sy",
                                           "createdAt":  "2025-04-26T16:37:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "willdean",
                                           "body":  "\u003e I\u0027d always assumed it would do one allocation of the desired size. And if that singular chunk was too large, just treat it like the last chunk and resize it down. Sure, you\u0027d have one too-large allocation, but the GC would likely clean it up real quick.\n\nI agree - that\u0027s what I had assumed and what piqued my interested when I read the code and saw that it didn\u0027t.\n\nBut if you read #67132 you\u0027ll see that there are apparently consumers whose mental model is that `chunk()` is doing `min(chunkSize, remainingLength)` (not totally unreasonable: that\u0027s a typical feature of a chunking loop) and they come unstuck by asking for wildly large chunk-sizes in the expectation that the consequences will be benign.\n\nBefore I read that thread I was also going to argue that it was a weakness to start at size = 4 when one had been given a hint about the chunk size.  If you\u0027re trying to cope with genuine-but-part-filled chunks, then why not start at some reasonable fraction of a chunk (say a quarter or something)?    But if, instead, you\u0027re trying to cope safely with the situation that the chunk size is absurdly large, it makes no sense to use it as a hint at all.\n",
                                           "updatedAt":  "2025-04-26T16:37:37Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "`Enumerable.Chunk()` could reduce memory allocation without reducing its performance",
        "labels":  [
                       "area-System.Linq",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116005",
        "createdAt":  "2025-05-27T03:01:54Z",
        "number":  116005,
        "author":  "weitzhandler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODEyy8A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2025-06-25T21:41:46Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-05-27T17:05:14Z",
        "body":  "### Background and motivation\n\nPlease add an overload of `ExceptBy` that takes another collection of the source type (instead of `TKey` type). The same `keySelector` will then be used to obtain the keys from both collections.\n\nRelated #115797\n\n### API Proposal\n\n```csharp\nnamespace System.Collections.Generic;\n\npublic static class Enumerable\n{\n+    public static IEnumerable\u003cTSource\u003e ExceptBy\u003cTSource, TKey\u003e(\n         this IEnumerable\u003cTSource\u003e first,\n         IEnumerable\u003cTSource\u003e second,\n         Func\u003cTSource, TKey\u003e keySelector);\n}\n```\n\n\n### API Usage\n\n```csharp\nIEnumerable\u003cSource\u003e x = ...;\nIEnumerable\u003cSource\u003e y = ...;\n\nvar excepted = x.ExceptBy(y, source =\u003e source.Key);\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOraWpUw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6tgdSx",
                                           "createdAt":  "2025-05-27T03:02:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-27T03:02:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tk9uY",
                                           "createdAt":  "2025-05-27T11:21:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "IIRC such an overload was considered when we were reviewing the design. Ultimately it was decided to keep things simple since you can easily obtain the required behaviour by running a select on the second enumerable.",
                                           "updatedAt":  "2025-05-27T11:21:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tpalT",
                                           "createdAt":  "2025-05-27T17:02:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEX9SOw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IDisposable",
                                                                               "createdAt":  "2025-05-28T20:26:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mrxx99",
                                                                               "createdAt":  "2025-06-25T21:41:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "weitzhandler",
                                           "body":  "I mean, we\u0027re already specifying the key selection here, why specify it twice.\nTo me, the proposed overload is **more useful** than the implemented one.",
                                           "updatedAt":  "2025-05-27T17:02:51Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: ExceptBy taking another collection of the source type",
        "labels":  [
                       "api-suggestion",
                       "area-System.Linq"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117409",
        "createdAt":  "2025-07-08T07:49:12Z",
        "number":  117409,
        "author":  "sator-imaging",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-22T06:49:01Z",
        "body":  "### Background and motivation\n\nI needed to flatten tree structure to array.\nThere are some solutions but not handy.\n\n\n### API Proposal\n\n**UPDATE**: https://github.com/dotnet/runtime/issues/117409#issuecomment-3051021618\n\nRecursive `SelectMany` calls taking property access as `Func`.\n\n```csharp\nstatic IEnumerable\u003cT\u003e Flatten\u003cT\u003e(this T source, Func\u003cT, IEnumerable\u003cT\u003e\u003e selectMany)\n{\n    yield return node;\n\n    foreach (var child in selectMany.Invoke(node))\n    {\n        foreach (var x in Flatten(child, selectMany))\n        {\n            yield return x;\n        }\n    }\n}\n```\n\n\n### API Usage\n\n```csharp\nclass Node\n{\n    public Node? Parent;\n    public List\u003cNode\u003e Children;\n}\n\nvar node = new Node();\n\n// imagine creating tree structure\nnode.Children = new()\n{\n   new() { Children = new() { ..., ..., .., } },\n   new() { Children = new() { ..., ..., .., } },\n   new() { Children = new() { ..., ..., .., } },\n}\n\nvar allNodesInHierarchy = node.Flatten(x =\u003e x.Children);\n\n// Getting the values out\nforeach (var n in allNodesInHierarchy)\n    Console.WriteLine(n);\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nSeems nothing. just helps.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtdrlMg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc61qgSL",
                                           "createdAt":  "2025-07-08T08:07:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WeihanLi",
                                           "body":  "Maybe duplicate of #54220 #74219",
                                           "updatedAt":  "2025-07-09T10:19:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61q2JN",
                                           "createdAt":  "2025-07-08T08:34:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-08T08:34:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61rRjx",
                                           "createdAt":  "2025-07-08T09:07:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZvwyw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "sator-imaging",
                                                                               "createdAt":  "2025-07-08T10:35:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "neuecc",
                                           "body":  "I think this is a proposal for an API that flattens data using DepthFirstSearch or BreadthFirstSearch.\nI often create an extension method called `TraverseDepthFirst` with the signature `(this IEnumerable\u003cT\u003e, Func\u003cT, IEnumerable\u003cT\u003e\u003e selector)`.",
                                           "updatedAt":  "2025-07-08T09:07:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61sg9C",
                                           "createdAt":  "2025-07-08T10:37:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sator-imaging",
                                           "body":  "Another API idea like Select and SelectMany pair.\n\n```cs\nstatic IEnumerable\u003c(int depth, T element)\u003e FlattenDepth\u003cT\u003e(T source, Func\u003cT, IEnumerable\u003cT\u003e\u003e selectMany)\n{\n    return Core(0, source);\n\n    IEnumerable\u003c(int, T)\u003e Core(int depth, T source)\n    {\n        yield return (depth, source);\n\n        depth++;\n\n        foreach (var child in selectMany.Invoke(source))\n        {\n            foreach (var x in Core(depth, child))\n            {\n                yield return x;\n            }\n        }\n    }\n}\n```\n\nReturn value is a little bit weird but this allows dealing with structure in LINQ manner.\n\n```cs\nvar fromTipToRoot = node.FlattenDepth(x =\u003e x.Children)\n                        .Where(x =\u003e x.depth \u003c 10)\n                        .OrderByDescending(x =\u003e x.depth)\n                        .Select(x =\u003e x.element)\n                        ;\n```\n",
                                           "updatedAt":  "2025-07-08T10:37:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61tkGQ",
                                           "createdAt":  "2025-07-08T11:57:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZyahA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "sator-imaging",
                                                                               "createdAt":  "2025-07-08T13:58:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KeterSCP",
                                                                               "createdAt":  "2025-07-08T15:03:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "elgonzo",
                                           "body":  "There are several different strategies for tree traversal. Therefore, a method for flattening trees should either provide means for specifying the desired traversal strategy, or its method name should make it obvious which traversal strategy it uses.\n\nIf the method is supposed to use only one fixed traversal strategy, i don\u0027t think method names like `Flatten`, `FlattenDepth` or `FlattenDepthFirst` cut the cheese, as it would make it rather awkward regarding the method name when adding further Flatten* methods implementing other traversal strategies in the future. For example, if the method should do depth-first pre-order, it\u0027s method name should reflect that, like for example `FlattenDepthPreOrder`, or perhaps simply `FlattenPreOrder`, as pre-order is a depth-first traversal strategy. Then there can be other methods like `FlattenInOrder`, `FlattenPostOrder`, `FlattenBreadthFirst` (`FlattenLevelOrder`), etc. implemented now or in the futures, and it would all remain nice and tidy and readable to the human eye (not that the AIs doing the coding in the future would mind anyways, but i digress...)\n",
                                           "updatedAt":  "2025-07-08T12:01:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61vb8y",
                                           "createdAt":  "2025-07-08T14:05:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sator-imaging",
                                           "body":  "Here is a revised version.\n\n```cs\nenum FlattenStrategy\n{\n    DepthFirst,   // default cuz extra iteration for the same collection is not required, right?\n    BreadthFirst,\n    //...\n}\n```\n\n\u003e `(int, T)` should be `KeyValuePair\u003cint, T\u003e` but, what the \u0027Key\u0027...\n\n```cs\nIEnumerable\u003cT\u003e Flatten(this T source, Func\u003cT, IEnumerable\u003cT\u003e\u003e selectMany, FlattenStrategy strategy = FlattenStrategy.DepthFirst);\nIEnumerable\u003cT\u003e Flatten(this T source, Func\u003cT, int, IEnumerable\u003cT\u003e?\u003e selectMany, FlattenStrategy strategy = FlattenStrategy.DepthFirst);\n\nIEnumerable\u003c(int, T)\u003e FlattenDepth(T source, Func\u003cT, IEnumerable\u003cT\u003e\u003e selectMany, FlattenStrategy strategy = FlattenStrategy.DepthFirst);\nIEnumerable\u003c(int, T)\u003e FlattenDepth(T source, Func\u003cT, int, IEnumerable\u003cT\u003e?\u003e selectMany, FlattenStrategy strategy = FlattenStrategy.DepthFirst);\n```\n\nThere are additional overloads `Func\u003cT, int, IEnumerable\u003cT\u003e?\u003e` that is similar to `Select` method allowing user to prevent subsequent traversal based on provided depth level.\n\n**EDIT**: maybe `FlattenMap` or `FlattenWithDepth` is more describing the functionality.\n",
                                           "updatedAt":  "2025-07-08T14:55:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc612uUy",
                                           "createdAt":  "2025-07-09T03:54:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sator-imaging",
                                           "body":  "I\u0027d forgotten LINQ should be extension method for `IEnumerable\u003cT\u003e`.\n\nUpdated API follows existing LINQ extension.\n\n```cs\nIEnumerable\u003cT\u003e Flatten\u003cT\u003e(this IEnumerable\u003cT\u003e source, FlattenStrategy strategy = FlattenStrategy.DepthFirst) where T : IEnumerable\u003cT\u003e;\nIEnumerable\u003cT\u003e Flatten\u003cT\u003e(this IEnumerable\u003cT\u003e source, Predicate\u003cint\u003e predicate, FlattenStrategy strategy = FlattenStrategy.DepthFirst) where T : IEnumerable\u003cT\u003e;\n\nIEnumerable\u003cKeyValuePair\u003cint, T\u003e\u003e FlattenMap\u003cT\u003e(this IEnumerable\u003cT\u003e source, FlattenStrategy strategy = FlattenStrategy.DepthFirst) where T : IEnumerable\u003cT\u003e;\nIEnumerable\u003cKeyValuePair\u003cint, T\u003e\u003e FlattenMap\u003cT\u003e(this IEnumerable\u003cT\u003e source, Predicate\u003cint\u003e predicate, FlattenStrategy strategy = FlattenStrategy.DepthFirst) where T : IEnumerable\u003cT\u003e;\n\n// helper for the class that cannot implement recursion interface.\nEnumerable.Flatten\u003cT\u003e(T source, Func\u003cT, IEnumerable\u003cT\u003e\u003e selectMany, FlattenStrategy strategy = FlattenStrategy.DepthFirst);\nEnumerable.Flatten\u003cT\u003e(T source, Func\u003cT, int, IEnumerable\u003cT\u003e?\u003e selectMany, FlattenStrategy strategy = FlattenStrategy.DepthFirst);\n```\n\nTree node needs to be IEnumerable of tree node.\n\n```cs\nclass Node : IEnumerable\u003cNode\u003e  // node implements recursion interface\n{\n    public Node? Parent;\n    public List\u003cNode\u003e Children = new();\n\n    public IEnumerator\u003cNode\u003e GetEnumerator() =\u003e Children.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() =\u003e GetEnumerator();\n\n    public void Add(Node node) =\u003e Children.Add(node);\n}\n\nstatic class FlattenLinqExtensions\n{\n    public static IEnumerable\u003cT\u003e Flatten\u003cT\u003e(this IEnumerable\u003cT\u003e source, FlattenStrategy strategy = FlattenStrategy.DepthFirst)\n        where T : IEnumerable\u003cT\u003e\n    {\n        if (source is T self)\n        {\n            yield return self;\n        }\n\n        foreach (var child in source)\n        {\n            foreach (var x in child.Flatten(strategy))\n            {\n                yield return x;\n            }\n        }\n    }\n}\n```\n\nAPI usages and extension method impl.\nnow can easily perform with `node.Flatten()`.\n\n```cs\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Runtime.CompilerServices;\n\nnamespace X\n{\n    class Program\n    {\n        static void Main()\n        {\n            var node = new Node()\n            {\n                new Node()\n                {\n                    new Node(),\n                    new Node(),\n                },\n                new Node()\n                {\n                    new Node(),\n                    new Node(),\n                },\n                new Node()\n                {\n                    new Node(),\n                    new Node(),\n                },\n            };\n\n            var allNodes = node.Flatten();\n\n            int i = 0;\n            foreach (var n in node.Flatten())\n            {\n                i++;\n                Console.WriteLine($\"{i}: {n.GetHashCode()}\");\n            }\n        }\n    }\n\n    class Node : IEnumerable\u003cNode\u003e  // node implements recursion interface\n    {\n        public Node? Parent;\n        public List\u003cNode\u003e Children = new();\n\n        public IEnumerator\u003cNode\u003e GetEnumerator() =\u003e Children.GetEnumerator();\n        IEnumerator IEnumerable.GetEnumerator() =\u003e GetEnumerator();\n\n        public void Add(Node node) =\u003e Children.Add(node);\n    }\n\n    static class FlattenLinqExtensions\n    {\n        public static IEnumerable\u003cT\u003e Flatten\u003cT\u003e(this IEnumerable\u003cT\u003e source, FlattenStrategy strategy = FlattenStrategy.DepthFirst)\n            where T : IEnumerable\u003cT\u003e\n        {\n            if (source is T self)\n            {\n                yield return self;\n            }\n\n            foreach (var child in source)\n            {\n                foreach (var x in child.Flatten(strategy))\n                {\n                    yield return x;\n                }\n            }\n        }\n    }\n\n    enum FlattenStrategy\n    {\n        DepthFirst,\n        BreadthFirst,\n    }\n}\n```\n",
                                           "updatedAt":  "2025-07-09T05:11:37Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[API Proposal]: Flatten() for LINQ",
        "labels":  [
                       "api-suggestion",
                       "area-System.Linq"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117717",
        "createdAt":  "2025-07-16T12:24:55Z",
        "number":  117717,
        "author":  "martincostello",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODQ_FhQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lindexi",
                                            "createdAt":  "2025-07-16T13:02:10Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "filipnavara",
                                            "createdAt":  "2025-07-16T18:16:44Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "KeterSCP",
                                            "createdAt":  "2025-07-16T20:59:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "spixy",
                                            "createdAt":  "2025-09-10T17:04:19Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "romfir",
                                            "createdAt":  "2025-09-16T16:04:33Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-09-12T13:02:43Z",
        "body":  "### Description\n\nI\u0027ve been doing various testing with previews of .NET 10 and have noticed a regression of ~+50% in a benchmark I have.\n\nThis appears to have been introduced in .NET 10 preview 5, but I only just noticed it when reviewing the results after updating to .NET 10 preview 6.\n\nThe benchmark is of a solution to [an Advent of Code puzzle](https://adventofcode.com/2016/day/22). Based on [what the code does](https://github.com/martincostello/dotnet-10-performance-regression/blob/5eaece453f7f00709b0605577d365800b26837a0/Program.cs#L27-L140) (`Max()`, `Min()`, `First()`), I _think_ the regression is in LINQ, but I haven\u0027t drilled into exactly where the time is being spent yet.\n\nThe runtime performance of the code was significantly improved when updated from .NET 8 to .NET 9, but this improvement has noticeably regressed with .NET 10 since preview 5:\n\n\u003cimg width=\"700\" height=\"450\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/6e6e2cfe-5d11-4293-9988-4decf788d261\" /\u003e\n\nRunning a distillation of the original code into a dedicated benchmark gives me the following results:\n\n```text\nBenchmarkDotNet v0.15.2, Windows 11 (10.0.26100.4652/24H2/2024Update/HudsonValley)\n13th Gen Intel Core i7-13700H 2.90GHz, 1 CPU, 20 logical and 14 physical cores\n.NET SDK 10.0.100-preview.6.25358.103\n  [Host]     : .NET 8.0.18 (8.0.1825.31117), X64 RyuJIT AVX2\n  Job-HFWDAV : .NET 10.0.0 (10.0.25.35903), X64 RyuJIT AVX2\n  Job-XMDLXS : .NET 8.0.18 (8.0.1825.31117), X64 RyuJIT AVX2\n  Job-NFJGQR : .NET 9.0.7 (9.0.725.31616), X64 RyuJIT AVX2\n```\n\n| Method | Runtime   | Mean     | Error     | StdDev    | Ratio | Gen0    | Gen1    | Allocated | Alloc Ratio |\n|------- |---------- |---------:|----------:|----------:|------:|--------:|--------:|----------:|------------:|\n| Solve  | .NET 8.0  | 2.918 ms | 0.0351 ms | 0.0293 ms |  1.00 | 46.8750 | 11.7188 | 600.94 KB |        1.00 |\n| Solve  | .NET 9.0  | 1.139 ms | 0.0127 ms | 0.0113 ms |  0.39 | 44.9219 | 11.7188 | 562.14 KB |        0.94 |\n| Solve  | .NET 10.0 | 1.775 ms | 0.0065 ms | 0.0058 ms |  0.61 | 44.9219 | 11.7188 | 562.14 KB |        0.94 |\n\nI\u0027ll freely admit that the _absolute_ performance of the solution to the puzzle could no doubt be improved, but I would expect the _relative_ performance to remain the same or improve.\n\nIt may be that the performance regression is the result of an intentional change to improve other use cases and this is just an outlier that has to pay the price, but I thought I would raise it anyway.\n\n\n### Reproduction Steps\n\n1. Clone https://github.com/martincostello/dotnet-10-performance-regression.git\n2. Run the following commands from the root of the repository:\n   ```pwsh\n   $env:PUZZLE_INPUT = Resolve-Path (Join-Path \".\" \"input.txt\")\n   dotnet run --configuration Release --framework net8.0 --runtimes net8.0 net9.0 net10.0\n   ```\n\n### Expected behavior\n\nRuntime performance is equivalent to .NET 9.\n\n\n### Actual behavior\n\nRuntime performance is ~150% that of .NET 9.\n\n\n### Regression?\n\nYes\n\n### Known Workarounds\n\nNone\n\n### Configuration\n\n.NET SDK `10.0.100-preview.6.25358.103`\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw9BTrg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc63tF8d",
                                           "createdAt":  "2025-07-17T01:19:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BoyBaykiller",
                                           "body":  "Replacing the linq usage [here](https://github.com/martincostello/dotnet-10-performance-regression/blob/afc1a0f7486118ed8491123d2bab4f3c40dbfadd/Program.cs#L80) with for-loop removes the regression for me:\n```cs\nNode node = null;\nfor (int i = 0; i \u003c nodes.Count; i++)\n{\n    node = nodes[i];\n    if (node.Location.X == x \u0026\u0026 node.Location.Y == y)\n    {\n        break;\n    }\n}\n```\nOut of the box:\n| Method | Runtime   | Mean     | Error     | StdDev    | Ratio | Gen0    | Gen1   | Allocated | Alloc Ratio |\n|------- |---------- |---------:|----------:|----------:|------:|--------:|-------:|----------:|------------:|\n| Solve  | .NET 10.0 | 2.057 ms | 0.0077 ms | 0.0065 ms |  0.62 |  7.8125 |      - | 562.14 KB |        0.94 |\n| Solve  | .NET 8.0  | 3.326 ms | 0.0178 ms | 0.0167 ms |  1.00 | 11.7188 |      - | 600.94 KB |        1.00 |\n| Solve  | .NET 9.0  | 1.439 ms | 0.0028 ms | 0.0024 ms |  0.43 |  9.7656 | 1.9531 | 562.14 KB |        0.94 |\n\nWith for-loop fix:\n| Method | Runtime   | Mean     | Error     | StdDev    | Ratio | Gen0   | Gen1   | Allocated | Alloc Ratio |\n|------- |---------- |---------:|----------:|----------:|------:|-------:|-------:|----------:|------------:|\n| Solve  | .NET 10.0 | 1.441 ms | 0.0106 ms | 0.0094 ms |  0.97 | 9.7656 | 1.9531 | 499.12 KB |        1.00 |\n| Solve  | .NET 8.0  | 1.483 ms | 0.0095 ms | 0.0088 ms |  1.00 | 9.7656 | 1.9531 | 499.16 KB |        1.00 |\n| Solve  | .NET 9.0  | 1.459 ms | 0.0024 ms | 0.0020 ms |  0.98 | 9.7656 | 1.9531 | 499.12 KB |        1.00 |\n",
                                           "updatedAt":  "2025-07-17T01:19:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63tMUb",
                                           "createdAt":  "2025-07-17T01:34:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "Likely codegen related, seems like we no longer inline the delegate method `Puzzle+\u003c\u003ec__DisplayClass0_1.\u003cSolve\u003eb__6(class Node)`\n```\n9.0\n\n00.80%   8E+05       ?        Unknown\n59.84%   6.004E+07   Tier-1   [Benchmarks]Puzzle.Solve(class System.Collections.Generic.IEnumerable`1\u003cclass System.String\u003e)\n21.85%   2.192E+07   Tier-1   [System.Linq]Enumerable.TryGetFirst(class System.Collections.Generic.IEnumerable`1\u003c!!0\u003e,class System.Func`2\u003c!!0,bool\u003e,bool\u0026)\n05.28%   5.3E+06     native   coreclr.dll\n02.45%   2.46E+06    Tier-1   [System.Private.CoreLib]String.SplitWithPostProcessing(value class System.ReadOnlySpan`1\u003cint32\u003e,value class System.ReadOnlySpan`1\u003cint32\u003e,int32,int32,value class System.StringSplitOptions)\n01.86%   1.87E+06    Tier-1   [System.Private.CoreLib]String.MakeSeparatorListVectorized(value class System.ReadOnlySpan`1\u003cwchar\u003e,value class System.Collections.Generic.ValueListBuilder`1\u003cint32\u003e\u0026,wchar,wchar,wchar)\n01.16%   1.16E+06    native   ntoskrnl.exe\n01.01%   1.01E+06    Tier-1   [System.Private.CoreLib]Number.TryParseBinaryIntegerStyle(value class System.ReadOnlySpan`1\u003c!!0\u003e,value class System.Globalization.NumberStyles,class System.Globalization.NumberFormatInfo,!!1\u0026)\n00.98%   9.8E+05     Tier-1   [System.Private.CoreLib]String.Ctor(value class System.ReadOnlySpan`1\u003cwchar\u003e)\n00.70%   7E+05       Tier-1   [System.Private.CoreLib]String.TrimHelper(wchar*,int32,value class System.Text.TrimType)\n00.65%   6.5E+05     Tier-1   [Benchmarks]Puzzle+Node.Parse(class System.String)\n00.50%   5E+05       Tier-1   [System.Private.CoreLib]String.SplitInternal(value class System.ReadOnlySpan`1\u003cwchar\u003e,int32,value class System.StringSplitOptions)\n00.36%   3.6E+05     Tier-1   [System.Private.CoreLib]PackedSpanHelpers.IndexOf(int16\u0026,int16,int32)\n00.34%   3.4E+05     Tier-1   [System.Private.CoreLib]System.ReadOnlySpan`1[System.Char].ToString()\n00.33%   3.3E+05     Tier-1   [System.Linq]Enumerable.MaxInteger(class System.Collections.Generic.IEnumerable`1\u003c!!0\u003e,class System.Func`2\u003c!!0,!!1\u003e)\n00.33%   3.3E+05     native   clrjit.dll\n00.31%   3.1E+05     Tier-1   [System.Private.CoreLib]String.MakeSeparatorListAny(value class System.ReadOnlySpan`1\u003cwchar\u003e,value class System.ReadOnlySpan`1\u003cwchar\u003e,value class System.Collections.Generic.ValueListBuilder`1\u003cint32\u003e\u0026)\n00.28%   2.8E+05     Tier-1   [System.Private.CoreLib]SpanHelpers.Memmove(unsigned int8\u0026,unsigned int8\u0026,unsigned int)\n00.28%   2.8E+05     Tier-1   [System.Private.CoreLib]NumberFormatInfo.\u003cGetInstance\u003eg__GetProviderNonNull|58_0(class System.IFormatProvider)\n00.25%   2.5E+05     Tier-1   [System.Linq]Enumerable.MinInteger(class System.Collections.Generic.IEnumerable`1\u003c!!0\u003e,class System.Func`2\u003c!!0,!!1\u003e)\n00.12%   1.2E+05     Tier-1   [System.Linq]System.Linq.Enumerable+OrderedIterator`2[System.__Canon,System.Int32].TryGetFirst(bool\u0026)\n00.11%   1.1E+05     native   ntdll.dll\n\nBenchmark: found 20 intervals; mean interval 498.610ms\n\n10.0 (preview 6)\n\n07.35%   1.09E+07    ?        Unknown\n60.07%   8.928E+07   Tier-1   [Benchmarks]Puzzle.Solve(class System.Collections.Generic.IEnumerable`1\u003cclass System.String\u003e)\n21.24%   3.157E+07   Tier-1   [Benchmarks]Puzzle+\u003c\u003ec__DisplayClass0_1.\u003cSolve\u003eb__6(class Node)\n03.67%   5.46E+06    native   coreclr.dll\n02.62%   3.9E+06     Tier-1   [System.Private.CoreLib]String.SplitInternal(value class System.ReadOnlySpan`1\u003cwchar\u003e,int32,value class System.StringSplitOptions)\n01.29%   1.91E+06    native   ntoskrnl.exe\n00.70%   1.04E+06    Tier-1   [System.Private.CoreLib]Number.TryParseBinaryIntegerStyle(value class System.ReadOnlySpan`1\u003c!!0\u003e,value class System.Globalization.NumberStyles,class System.Globalization.NumberFormatInfo,!!1\u0026)\n00.66%   9.8E+05     Tier-1   [System.Private.CoreLib]String.Ctor(value class System.ReadOnlySpan`1\u003cwchar\u003e)\n00.36%   5.3E+05     Tier-1   [System.Private.CoreLib]String.TrimHelper(wchar*,int32,value class System.Text.TrimType)\n00.36%   5.3E+05     Tier-1   [Benchmarks]Puzzle+Node.Parse(class System.String)\n00.30%   4.5E+05     Tier-1   [System.Private.CoreLib]System.Collections.Generic.List`1+Enumerator[System.__Canon].MoveNext()\n00.29%   4.3E+05     native   clrjit.dll\n00.25%   3.7E+05     Tier-1   [System.Private.CoreLib]SpanHelpers.Memmove(unsigned int8\u0026,unsigned int8\u0026,unsigned int)\n00.24%   3.5E+05     Tier-1   [System.Private.CoreLib]PackedSpanHelpers.IndexOf(int16\u0026,int16,int32)\n00.19%   2.8E+05     Tier-1   [System.Private.CoreLib]NumberFormatInfo.\u003cGetInstance\u003eg__GetProviderNonNull|58_0(class System.IFormatProvider)\n00.10%   1.5E+05     Tier-1   [System.Private.CoreLib]System.Collections.Generic.List`1+Enumerator[System.__Canon].get_Current()\n00.06%   9E+04       native   ntdll.dll\n00.05%   8E+04       Tier-1   [System.Private.CoreLib]String.FastAllocateString(int32)\n\nBenchmark: found 20 intervals; mean interval 739.019ms\n```",
                                           "updatedAt":  "2025-07-17T01:34:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63tc2y",
                                           "createdAt":  "2025-07-17T01:58:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "At first glance I\u0027d say we are being foiled by BDN\u0027s own use of Linq colliding with the benchmark\u0027s use of Linq, so that PGO is making nonsensical-looking choices.\n\nEG looking at compilation of Puzzle.Solve, we see things like:\n```\nImporting BB08 (PC=040) of \u0027System.Linq.Enumerable:MaxInteger[System.__Canon,int](System.Collections.Generic.IEnumerable`1[System.__Canon],System.Func`2[System.__Canon,int]):int\u0027\n    [ 0]  40 (0x028) ldarg.1\n    [ 1]  41 (0x029) ldloc.1\n    [ 2]  42 (0x02a) callvirt 0A000044\nIn Compiler::impImportCall: opcode is callvirt, kind=2, callRetType is ref, structSize is 0\n\nimpDevirtualizeCall: Trying to devirtualize interface call:\n    class for \u0027this\u0027 is System.Collections.Generic.IEnumerator`1[Puzzle+Node] (attrib 20200600)\n    base method is System.Collections.Generic.IEnumerator`1[System.__Canon]::get_Current\nConsidering guarded devirtualization at IL offset 42 (0x2a)\nLikely classes for call [001577] on class 00007FFC90C96640 (System.Collections.Generic.IEnumerator`1[Puzzle+Node])\n  1) 00007FFC906E6860 (System.SZGenericArrayEnumerator`1[System.String]) [likelihood:100%]\nAccepting type System.SZGenericArrayEnumerator`1[System.String] with likelihood 100 as a candidate\nGDV likely: resolveVirtualMethod (method 00007FFC8FF119E8 class 00007FFC906E6860 context 00007FFC90C96641)\nCan\u0027t figure out which method would be invoked, sorry. [object class could not be cast to interface class]\nINLINER: during \u0027impMarkInlineCandidate\u0027 result \u0027failed this call site\u0027 reason \u0027target not direct\u0027 for \u0027System.Linq.Enumerable:MaxInteger[System.__Canon,int](System.Collections.Generic.IEnumerable`1[System.__Canon],System.Func`2[System.__Canon,int]):int\u0027 calling \u0027System.Collections.Generic.IEnumerator`1[System.__Canon]:get_Current():System.__Canon:this\u0027\nINLINER: during \u0027impMarkInlineCandidate\u0027 result \u0027failed this call site\u0027 reason \u0027target not direct\u0027\n\nSaving generic context 00007FFC90C96641 and inline context 00000103033450A8 for call [001577]\n\n    [ 2]  47 (0x02f) callvirt 0A000068\nIn Compiler::impImportCall: opcode is callvirt, kind=0, callRetType is int, structSize is 0\nConsidering guarded devirtualization at IL offset 47 (0x2f)\nLikely methods for call [001578] to method System.Func`2[System.__Canon,int]:Invoke(System.__Canon):int:this\n  1) 00007FFC90AF14E8 (BenchmarkDotNet.Reports.Measurement+\u003c\u003ec:\u003c.cctor\u003eb__31_0(System.String):int:this) [likelihood:50%]\n  2) 00007FFC90AF1500 (BenchmarkDotNet.Reports.Measurement+\u003c\u003ec:\u003c.cctor\u003eb__31_1(System.String):int:this) [likelihood:50%]\ndelegate call would invoke method BenchmarkDotNet.Reports.Measurement+\u003c\u003ec:\u003c.cctor\u003eb__31_0(System.String):int:this\nMarking call [001578] as guarded devirtualization candidate; will guess for method BenchmarkDotNet.Reports.Measurement+\u003c\u003ec:\u003c.cctor\u003eb__31_0(System.String):int:this\n```",
                                           "updatedAt":  "2025-07-17T01:58:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63t0nn",
                                           "createdAt":  "2025-07-17T02:37:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "Probably the first question to answer is why the profile at offset 47 in `MaxInteger` looks the way it does -- there are no samples for the expected method, just bits of BDN. One possibility is that we may be seeing the impact of overly aggressive Tier1+Instr here too (like what lead to https://github.com/dotnet/runtime/pull/117492). However latest main builds don\u0027t show any improvement.\n\nNote that the main benchmark method loops enough to trigger OSR, so our only opportunity to instrument is at Tier1.",
                                           "updatedAt":  "2025-07-17T02:37:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64KgFV",
                                           "createdAt":  "2025-07-18T14:53:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiJwcw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "martincostello",
                                                                               "createdAt":  "2025-07-18T15:04:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JulieLeeMSFT",
                                                                               "createdAt":  "2025-07-18T15:30:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "silkfire",
                                                                               "createdAt":  "2025-09-13T18:56:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "Think I can extend the fix from https://github.com/dotnet/runtime/pull/117492 to also cover OSR (basically restoring OSR inlining to .NET 9 behavior).",
                                           "updatedAt":  "2025-07-18T14:53:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66XyEr",
                                           "createdAt":  "2025-07-28T11:30:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcKEiQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "filipnavara",
                                                                               "createdAt":  "2025-07-28T11:44:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "martincostello",
                                           "body":  "Looks much improved in the latest nightly release 👍\n\n\u003cimg width=\"700\" height=\"450\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/02847d48-0eb5-488c-8daf-9948972c3f82\" /\u003e",
                                           "updatedAt":  "2025-07-28T11:30:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66k4e0",
                                           "createdAt":  "2025-07-29T00:54:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcRvOg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "martincostello",
                                                                               "createdAt":  "2025-07-29T06:26:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "\u003e Looks much improved in the latest nightly release 👍\n\u003e \n\nGlad to hear it. Thanks for reporting this!\n\n",
                                           "updatedAt":  "2025-07-29T00:54:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Cd9pP",
                                           "createdAt":  "2025-09-06T17:05:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "@AndyAyersMS I\u0027m reopening this since [Linq performance regression on .net 10 (#119425)](https://github.com/dotnet/runtime/issues/119425) was filed indicating the regression isn\u0027t fully addressed. (This issue was already closed/locked).",
                                           "updatedAt":  "2025-09-06T17:05:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Cm-0Y",
                                           "createdAt":  "2025-09-08T07:38:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhYppA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2025-09-08T22:39:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "johnnygiter",
                                           "body":  "i9 cpu, win11, still net 9 much better than 10\n| Method | Runtime   | Mean       | Error   | StdDev  | Ratio | Gen0    | Gen1   | Allocated | Alloc Ratio |\n|------- |---------- |-----------:|--------:|--------:|------:|--------:|-------:|----------:|------------:|\n| Solve  | .NET 10.0 | 1,055.1 us | 3.55 us | 3.14 us |  0.45 | 29.2969 | 7.8125 | 562.14 KB |        0.94 |\n| Solve  | .NET 8.0  | 2,333.9 us | 9.17 us | 8.13 us |  1.00 | 31.2500 | 7.8125 | 600.94 KB |        1.00 |\n| Solve  | .NET 9.0  |   902.7 us | 3.54 us | 3.14 us |  0.39 | 30.2734 | 8.7891 | 562.14 KB |        0.94 |",
                                           "updatedAt":  "2025-09-08T07:39:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Ct8pu",
                                           "createdAt":  "2025-09-08T15:22:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEh1TNQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2025-09-08T22:40:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2025-09-11T12:18:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "Yeah I see a 10%ish regression in current .net 10 and it\u0027s similar to the perf after the fix I made. Unfortunately I don\u0027t think we can further address this in .NET 10 without causing other possible regressions.\n\nThe below is from an AMD Zen4, so the magnitude of it may be CPU dependent. I will try doing some runs on Intel to see if I get anything like what you are seeing above.\n\n| Method  | Toolchain                                                                                 | Mean     | Error     | StdDev    | Ratio | Gen0    | Gen1   | Allocated | Alloc Ratio |\n|------- |------------------------------------------------------------------------------------------- |---------:|----------:|----------:|------:|--------:|-------:|----------:|------------:|\n| Solve  |  net9.0                                                                                    | 1.843 ms | 0.0049 ms | 0.0041 ms |  1.00 | 33.2031 | 9.7656 | 562.14 KB |        1.00 |\n| Solve  | 177717 fix                                                      | 2.044 ms | 0.0194 ms | 0.0181 ms |  1.11 | 31.2500 | 7.8125 | 562.14 KB |        1.00 |\n| Solve  | 177171 base                                                     | 2.969 ms | 0.0094 ms | 0.0088 ms |  1.61 | 31.2500 | 7.8125 | 562.14 KB |        1.00 |\n| Solve  | main | 2.061 ms | 0.0108 ms | 0.0101 ms |  1.12 | 31.2500 | 7.8125 | 562.14 KB |        1.00 |\n",
                                           "updatedAt":  "2025-09-08T15:22:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CzbOb",
                                           "createdAt":  "2025-09-08T22:40:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiZjuw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "MrKWatkins",
                                                                               "createdAt":  "2025-09-09T19:46:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "alvicode",
                                                                               "createdAt":  "2025-09-09T19:58:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "c-michail",
                                                                               "createdAt":  "2025-09-09T20:22:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Azyyyyyy",
                                                                               "createdAt":  "2025-09-09T20:40:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "lbosquett",
                                                                               "createdAt":  "2025-09-09T21:30:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "markusstephanides",
                                                                               "createdAt":  "2025-09-09T21:47:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Kralizek",
                                                                               "createdAt":  "2025-09-10T01:15:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "mattbdc",
                                                                               "createdAt":  "2025-09-10T01:35:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "joshdixon",
                                                                               "createdAt":  "2025-09-10T02:55:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "NeurekaSoftware",
                                                                               "createdAt":  "2025-09-10T03:23:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "yukina3230",
                                                                               "createdAt":  "2025-09-10T03:25:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "tbasallo",
                                                                               "createdAt":  "2025-09-10T03:47:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "patrikpop10",
                                                                               "createdAt":  "2025-09-10T18:48:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "silkfire",
                                                                               "createdAt":  "2025-09-13T18:58:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "jfoot",
                                                                               "createdAt":  "2025-09-13T20:18:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "bairog",
                                                                               "createdAt":  "2025-09-16T06:38:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  16
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Thanks @johnnygiter and @AndyAyersMS. I\u0027ll move the issue to .NET 11.",
                                           "updatedAt":  "2025-09-08T22:40:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7C3-0S",
                                           "createdAt":  "2025-09-09T08:13:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhzWAQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NeurekaSoftware",
                                                                               "createdAt":  "2025-09-10T03:24:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Hutch79",
                                                                               "createdAt":  "2025-09-11T08:48:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "johnnygiter",
                                           "body":  "@AndyAyersMS on my second intel machine, it\u0027s 18% so one above pasted almost 17% other 18%, quite big regression, too bad that LTS😒",
                                           "updatedAt":  "2025-09-09T08:14:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DMAXe",
                                           "createdAt":  "2025-09-10T12:20:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "johnnygiter",
                                           "body":  "RC1 - 19%, noticable regression. Ok my last test and post. Just does not look good.\n\n| Method | Runtime   | Mean       | Error    | StdDev   | Ratio | Gen0    | Gen1   | Allocated | Alloc Ratio |\n|------- |---------- |-----------:|---------:|---------:|------:|--------:|-------:|----------:|------------:|\n| Solve  | .NET 10.0 | 1,084.7 us | 11.18 us | 10.45 us |  0.44 | 29.2969 | 7.8125 | 562.14 KB |        0.94 |\n| Solve  | .NET 8.0  | 2,461.0 us | 11.09 us |  9.83 us |  1.00 | 31.2500 | 7.8125 | 600.94 KB |        1.00 |\n| Solve  | .NET 9.0  |   912.9 us | 10.14 us |  8.99 us |  0.37 | 30.2734 | 8.7891 | 562.14 KB |        0.94 |",
                                           "updatedAt":  "2025-09-10T12:20:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DPUQU",
                                           "createdAt":  "2025-09-10T15:56:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiJwuQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "silkfire",
                                                                               "createdAt":  "2025-09-13T18:59:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Kralizek",
                                           "body":  "@jeffhandley \n\u003e Thanks [@johnnygiter](https://github.com/johnnygiter) and [@AndyAyersMS](https://github.com/AndyAyersMS). I\u0027ll move the issue to .NET 11.\n\nCould you explain the rationale behind this decision?\n\n.NET 10 is a LTS and there are plenty of teams out there that are forced to jump from LTS to LTS thus being either forced to swallow the performance degradation or stay out of supported runtime before .NET 12 is out.",
                                           "updatedAt":  "2025-09-10T15:56:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DPWQE",
                                           "createdAt":  "2025-09-10T15:58:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiKq7g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gandhis1",
                                                                               "createdAt":  "2025-09-10T16:04:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "neon-sunset",
                                                                               "createdAt":  "2025-09-10T16:29:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jjnguy",
                                                                               "createdAt":  "2025-09-11T01:21:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2025-09-11T12:18:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-09-11T13:21:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ryanheath",
                                                                               "createdAt":  "2025-09-12T08:20:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "s341507",
                                                                               "createdAt":  "2025-09-12T08:37:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "FedeArre",
                                                                               "createdAt":  "2025-09-12T13:53:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LiorBanai",
                                                                               "createdAt":  "2025-09-13T12:52:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dev-masih",
                                                                               "createdAt":  "2025-09-14T03:19:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  10
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e RC1 - 19%, noticable regression. Ok my last test and post. Just does not look good.\n\nPercentages are relative and not all 19% are created equal.\n\nFor example, a 19% regression for something changing from 912ns to 1084ns, is much less significant than the same regression of 912us to 1084us, which is much less significant than 91ms to 1084ms.\n\nIn this case, we\u0027re in the microsecond range and so we\u0027re looking at around 1720ns regression for a decently large function. On a \"typical\" 2.5GHz computer (which is the average base clock speed), this is 4300 cycles. There are then 994 lines in the input file, of which 992 are actually part of the list which means we\u0027re averaging about 4.33 cycles per entry slower (which is approximately the cost of a read from the L1 cache, or the fastest speed you can read memory). \n\nWhat this basically means is that in an end to end production app, this is incredibly unlikely to be the bottleneck or even make a measurable impact to the user experience or general perception of the application speed.\n\nIt is something we will end up continuing to investigate and it is something we will likely be able to fix. But calling it \"quite big\" or claiming it doesn\u0027t look good is a bit of an overstatement without a more concrete real world example showcasing it as the bottleneck. \n\nAn app will be likely to see more general latency from things like the overhead of the OS performing process context switches every ~16ms, from cache misses caused by other background apps and services running, from cache contention due to other code evicting data from the cache, from reading files off disk, doing networking, etc. Enough such that the perf difference here will likely not matter. -- And yes, at larger scales (say 10k or 100k entries) the perf difference may be even more, but still likely not significantly so. If it is perf critical, then additional optimization effort on the user side likely also becomes a core consideration. There are number of optimization opportunities in the benchmark code, just at the cost of additional algorithm complexity.",
                                           "updatedAt":  "2025-09-10T15:58:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DPZJf",
                                           "createdAt":  "2025-09-10T16:02:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEig7hQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kralizek",
                                                                               "createdAt":  "2025-09-10T16:09:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jjnguy",
                                                                               "createdAt":  "2025-09-11T01:22:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MrMikeJJ",
                                                                               "createdAt":  "2025-09-11T05:54:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Hutch79",
                                                                               "createdAt":  "2025-09-11T08:51:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2025-09-11T12:19:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "s341507",
                                                                               "createdAt":  "2025-09-12T08:37:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kuurama",
                                                                               "createdAt":  "2025-09-12T12:57:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LiorBanai",
                                                                               "createdAt":  "2025-09-13T12:52:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HalidCisse",
                                                                               "createdAt":  "2025-09-13T13:59:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dev-masih",
                                                                               "createdAt":  "2025-09-14T03:19:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IhateTrains",
                                                                               "createdAt":  "2025-09-14T19:43:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WailGree",
                                                                               "createdAt":  "2025-09-16T18:40:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  12
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@Kralizek, if the user is only doing LTS to LTS updates then they will see a 55.9% improvement to execution time from .NET 8 (being over 2x faster). The regression detailed above is only with regards to .NET 9 and where, as I detailed in the last message, is relatively small when you factor in the number of items being processed and time scale they take.\n\nThe complexity required in winning back those 4.33 CPU cycles per iteration is large, as is the likelihood of negatively impacting other workloads in a patch that is small enough to qualify for the servicing bar checks (such as risk).\n\nThe fix will require more time, more investigation, and a lot more measurements to show that it remains beneficial to real apps and not just a particular microbenchmark.",
                                           "updatedAt":  "2025-09-10T16:02:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DPate",
                                           "createdAt":  "2025-09-10T16:04:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhsUXA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2025-09-10T16:06:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Kralizek",
                                           "body":  "@tannergooding thank you for both the explainations. I think we were typing at the same time. :)",
                                           "updatedAt":  "2025-09-10T16:04:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DQJ8A",
                                           "createdAt":  "2025-09-10T17:09:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEi60dQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2025-09-10T17:27:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "neon-sunset",
                                                                               "createdAt":  "2025-09-10T17:33:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kralizek",
                                                                               "createdAt":  "2025-09-10T18:27:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kingmotley",
                                                                               "createdAt":  "2025-09-10T21:46:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jjnguy",
                                                                               "createdAt":  "2025-09-11T01:23:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2025-09-11T12:19:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-09-11T13:21:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "s341507",
                                                                               "createdAt":  "2025-09-12T08:43:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kuurama",
                                                                               "createdAt":  "2025-09-12T13:05:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LiorBanai",
                                                                               "createdAt":  "2025-09-13T12:52:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HalidCisse",
                                                                               "createdAt":  "2025-09-13T13:59:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ngiakhanh96",
                                                                               "createdAt":  "2025-09-14T12:12:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IhateTrains",
                                                                               "createdAt":  "2025-09-14T19:44:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WailGree",
                                                                               "createdAt":  "2025-09-16T18:40:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AndyAyersMS",
                                                                               "createdAt":  "2025-09-18T21:59:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  15
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "This regression is tied to the interaction of PGO and inlining with a particular runtime/codegen feature (OSR) that is unlikely to affect most applications but is a bit more likely to show up in benchmarks. You can see that the partial mitigation I did a while back had very little impact on our benchmark suite: https://github.com/dotnet/runtime/pull/117816.\n\nSo the issue title here perhaps gives a misleading impression. Linq in .NET 10 is generally faster than it is in .NET 9, sometimes considerably faster.\n\nWe\u0027re never happy to have to ship with a known regression over a previous release, but changes in inlining policy have difficult to anticipate ripple effects, and while we likely could fix this regression, we would almost certainly end up causing regressions elsewhere.",
                                           "updatedAt":  "2025-09-10T17:09:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7D0FOu",
                                           "createdAt":  "2025-09-12T13:02:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kuurama",
                                           "body":  "Is the perf still lower if you use the MaxBy method instead of orderByDescending().First() while doing all the benjchmarks?",
                                           "updatedAt":  "2025-09-12T13:02:43Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "Performance regression of ~+50% in LINQ(?) in .NET 10 compared to .NET 9",
        "labels":  [
                       "area-System.Linq"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118312",
        "createdAt":  "2025-08-03T08:57:11Z",
        "number":  118312,
        "author":  "Akeit0",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-04T07:15:14Z",
        "body":  "`TakeRangeFromEndIterator` uses a regular `Queue \u003cT\u003e`when `IsStartIndexFromEnd`, but this process can be done without intervening yields, allowing optimization using `ArrayPool` and `Span`.\n\nhttps://github.com/dotnet/runtime/blob/3f25a276772b8d0e54452321e7525b7a176aa4a7/src/libraries/System.Linq/src/System/Linq/Take.cs#L111C13-L154C18\n\n\nBelow is the PR I did on ZLinq.\nhttps://github.com/Cysharp/ZLinq/pull/207/files\nUnlike ZLinq, a ToArray is required at the end of the queueing for Linq, but it will be similar.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOu7gvfw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc67p7qp",
                                           "createdAt":  "2025-08-03T10:41:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-03T10:41:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67uC9_",
                                           "createdAt":  "2025-08-04T07:14:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEc_iZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Akeit0",
                                                                               "createdAt":  "2025-08-04T11:09:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Thanks for the suggestion, @Akeit0. If you can verify the gains using existing or new benchmarks in [dotnet/performance](https://github.com/dotnet/performance), we\u0027d consider accepting a pull request for this.",
                                           "updatedAt":  "2025-08-04T07:14:56Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "TakeLast Performance Improvement suggestion",
        "labels":  [
                       "area-System.Linq",
                       "tenet-performance",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119040",
        "createdAt":  "2025-08-24T07:52:10Z",
        "number":  119040,
        "author":  "fedeAlterio",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-31T17:58:57Z",
        "body":  "### Background and motivation\n\nBoth `IObservable\u003cT\u003e` and `IAsyncEnumerable\u003cT\u003e` are defined in the runtime, \nhowever the conversion helpers between one and the other are not.\n\nSince `System.Linq.Async` will be deprecated, these methods need to be defined somehwere else.\nIn my opinion makes sense to define them here, in a similar way of  this [DataFlowBlock to `IObservable\u003cT\u003e` helper](https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.dataflow.dataflowblock.asobservable?view=net-9.0).\n\nNote also that current implementations in dotnet/reactive have some serious issues. So it doesn\u0027t exist any valid implementation at all at the moment! (See for example [this](https://github.com/dotnet/reactive/issues/2212) issue on reactive).\n\nSee also [this](https://github.com/dotnet/reactive/issues/2199).\n\n\n\n### API Proposal\n\n```csharp\nusing System.Collections.Generic;\n\nnamespace System.Linq;\npublic static partial class AsyncEnumerable\n{\n    public static IAsyncEnumerable\u003cTSource\u003e ToAsyncEnumerable\u003cTSource\u003e(this IObservable\u003cTSource\u003e source);\n    public static IObservable\u003cTSource\u003e ToObservable\u003cTSource\u003e(this IAsyncEnumerable\u003cTSource\u003e source);\n}\n\n```\n\n### API Usage\n\n```csharp\nusing System.Reactive.Linq;\nusing System.Threading.Channels;\n\nvar source = Observable.Timer(TimeSpan.FromSeconds(1));\nawait foreach (var tick in source.ToAsyncEnumerable())\n{\n    if (tick == 4) break;\n    Console.WriteLine(tick);\n}\n\nvar numbersChannel = Channel.CreateUnbounded\u003cint\u003e();\nIObservable\u003cint\u003e numbersObservable = numbersChannel.Reader\n                                                   .ReadAllAsync()\n                                                   .ToObservable();\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv8-sog==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6_zZUm",
                                           "createdAt":  "2025-08-24T07:56:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "I\u0027m a bot. Here is a possible related and/or duplicate issue (I may be wrong):\n- https://github.com/dotnet/runtime/issues/79782",
                                           "updatedAt":  "2025-08-24T07:56:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_z6yi",
                                           "createdAt":  "2025-08-24T12:08:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-24T12:08:06Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: ToObservable and ToAsyncEnumerable()",
        "labels":  [
                       "api-suggestion",
                       "area-System.Linq",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119209",
        "createdAt":  "2025-08-29T16:01:19Z",
        "number":  119209,
        "author":  "LWChris",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODQb_pw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CyrusNajmabadi",
                                            "createdAt":  "2025-08-29T19:37:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichaeIDietrich",
                                            "createdAt":  "2025-08-30T08:20:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jeffhandley",
                                            "createdAt":  "2025-08-31T18:05:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aradalvand",
                                            "createdAt":  "2025-09-14T21:03:24Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-09-04T10:16:07Z",
        "body":  "### Background and motivation\n\nWhen we are interested in whether there is _exactly one_ element in an `IEnumeable\u003cT\u003e` (with or without a predicate), there\u0027s three possible outcomes:\n\n* No, n=0\n* Yes, n=1\n* No, n\u003e1\n\nLINQ does currently not provide an easy way to \"retrieve if n=1, default otherwise\" without the need to handle exceptions: `FirstOrDefault`, `LastOrDefault` and `SingleOrDefault` all return `default(T)` for n=0, and the element for n=1. But for n\u003e 1, the first two also return an element, and the latter throws an `InvalidOperationException`.\n\nI have made the same request 6 years ago (#29398) as `UniqueOrDefault`, but it was closed, because Eirik Tsarpalis didn\u0027t like the name \"Unique\". He felt it implies the return value is a boolean, like \"All\" or \"Any\". I didn\u0027t agree; I\u0027d name such a function \"IsUnique\". He didn\u0027t reply to that for a month, then just closed the issue.\n\nWell, I don\u0027t insist on any name in particular, but I still need the functionality quite often and find myself adding a custom extension to many projects. Please re-consider adding it, under a name that you see fit.\n\n### API Proposal\n\n```csharp\nnamespace System.Collections.Generic;\n\npublic partial static class Enumerable\n{\n    public static T? OnlyOrDefault\u003cT\u003e(this IEnumerable\u003cT\u003e sequence);\n    public static T? OnlyOrDefault\u003cT\u003e(this IEnumerable\u003cT\u003e sequence, Func\u003cT, bool\u003e predicate);\n}\n```\n\n### API Usage\n\n```csharp\nprivate static bool TryGetAutoCompleteSuggestion(this IEnumerable\u003cstring\u003e entries, string input, out string? suggestion) {\n    suggestion = entries.OnlyOrDefault(e =\u003e e.StartsWith(input));\n    return suggestion != null;\n}\n```\n\n```csharp\nvar selectedOption = availableOptions.OnlyOrDefault() // If there\u0027s only one option applicable, use that,\n    ?? availableOptions.OnlyOrDefault(o =\u003e o.IsDefault) // otherwise select default option if unambiguous,\n    ?? ShowOptionSelectDialog(availableOptions); // otherwise let the user pick one.\n```\n\n### Alternative Designs\n\n```csharp\nnamespace System.Collections.Generic;\n\npublic enum Cardinality\n{\n  Empty, // or Zero, None\n  Single, // or One, Only\n  Many // or Multiple\n}\n\npublic partial static class Enumerable\n{\n    public static bool TryGetOnly\u003cT\u003e(this IEnumerable\u003cT\u003e sequence, out T? element);\n    public static bool TryGetOnly\u003cT\u003e(this IEnumerable\u003cT\u003e sequence, out T? element, out Cardinality cardinality);\n    public static bool TryGetOnly\u003cT\u003e(this IEnumerable\u003cT\u003e sequence, Func\u003cT, bool\u003e predicate, out T? element);\n    public static bool TryGetOnly\u003cT\u003e(this IEnumerable\u003cT\u003e sequence, Func\u003cT, bool\u003e predicate, out T? element, out Cardinality cardinality);\n}\n```\n\nThis is fitting the \"TryGet\" pattern, but it wouldn\u0027t fit that well alongside `[First|Last|Single](OrDefault)?`\n\n### Risks\n\nNone.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOweQgJg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7A-Lrx",
                                           "createdAt":  "2025-08-29T16:02:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-29T16:02:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A-lh9",
                                           "createdAt":  "2025-08-29T16:43:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "Perhaps something along the lines of `DistinctOrDefault` would be a suitable name? There is prior art here in `Enumerable.Distinct`/`DistinctBy`.",
                                           "updatedAt":  "2025-08-29T16:43:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A_rTW",
                                           "createdAt":  "2025-08-29T18:51:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "\u003e There is prior art here in `Enumerable.Distinct`/`DistinctBy`.\n\nI think that\u0027s a point against the `Distinct` name, since it implies doing equality comparisons.",
                                           "updatedAt":  "2025-08-29T18:51:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A_we7",
                                           "createdAt":  "2025-08-29T19:00:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgSq0A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2025-08-31T18:04:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "We\u0027ve had a few proposals/issues on this over the years, I think the last one suggested `Unique` and got closed: https://github.com/dotnet/runtime/issues/29398\n\nThe suggested names have been pretty varied however and so I don\u0027t think there\u0027s a good way to link them all here.\n\nIt is a highly requested thing however and has had comments made in API review, LDM, and other meetings; not to mention at the MVP summit, Microsoft Build, and other conferences on how people wish \"something\" existed.",
                                           "updatedAt":  "2025-08-29T19:00:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A_zmf",
                                           "createdAt":  "2025-08-29T19:06:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "\u003e \u003e There is prior art here in `Enumerable.Distinct`/`DistinctBy`.\n\u003e \n\u003e I think that\u0027s a point against the `Distinct` name, since it implies doing equality comparisons.\n\nBut equality comparisons are inherently required to determine if the value is unique, are they not?\n\nEdit: I think I may have misunderstood the intent of the API proposal, if it\u0027s operating based on the number of items in the collection then I agree that `Distinct` is not an appropriate name.",
                                           "updatedAt":  "2025-08-29T19:15:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7A_-vr",
                                           "createdAt":  "2025-08-29T19:24:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgSL6Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kronic",
                                                                               "createdAt":  "2025-08-30T03:48:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "huoyaoyuan",
                                                                               "createdAt":  "2025-08-30T05:16:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichaeIDietrich",
                                                                               "createdAt":  "2025-08-30T08:23:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2025-08-30T12:06:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-08-31T02:30:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DrkWzrd",
                                                                               "createdAt":  "2025-08-31T13:50:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "timcassell",
                                           "body":  "What about just adding an extra `bool throwIfMultiple` param to `SingleOrDefault`? I think the `SingleOrDefault` name is already ideal, it\u0027s just the behavior that needs to change.\n\nBtw, I do like `Try*` methods for distinguishing between valid default values and not existing.",
                                           "updatedAt":  "2025-08-29T19:24:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BIPJ4",
                                           "createdAt":  "2025-08-31T13:53:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DrkWzrd",
                                           "body":  "\u003e What about just adding an extra `bool throwIfMultiple` param to `SingleOrDefault`? I think the `SingleOrDefault` name is already ideal, it\u0027s just the behavior that needs to change.\n\nThis is the only that makes sense trying to avoid a breaking change but, SingleOrDefault should have returned default if not single (single OR default) from the beggining. This should warrant a breaking change in my opinion.",
                                           "updatedAt":  "2025-08-31T14:04:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BIuJQ",
                                           "createdAt":  "2025-08-31T17:22:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "That’s too breaking, it’s unlikely to happen",
                                           "updatedAt":  "2025-08-31T17:22:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BTUdZ",
                                           "createdAt":  "2025-09-01T18:30:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DrkWzrd",
                                           "body":  "Adding an optional parameter is a breaking change?",
                                           "updatedAt":  "2025-09-01T18:30:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BTx0G",
                                           "createdAt":  "2025-09-01T20:05:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I was responding to the following, which I took to mean suggesting we take a break in the implementation.\n\u003e SingleOrDefault should have returned default if not single (single OR default) from the beggining. This should warrant a breaking change in my opinion.\n\nAdding a new overload with a parameter is not-breaking, but the expectation (and general Framework Design Guidlines) would be that `SingleOrDefault(false)` has the same behavior as `SingleOrDefault()`.",
                                           "updatedAt":  "2025-09-01T20:05:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BUOST",
                                           "createdAt":  "2025-09-01T21:56:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DrkWzrd",
                                           "body":  "Bending a little bit your reasoning, `.ConfigureAwait(true)` is the default behavior, and there are some other methods (not many, I know) that put true as default, so it isn\u0027t wrong to consider `SingleOrDefault() == SingleOrDefault(true)`.\n\nBut if that\u0027s the problem, the \"dirty\" solution is `SingleOrDefault(bool allowMultiple = false)`.",
                                           "updatedAt":  "2025-09-01T22:01:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7B4gHe",
                                           "createdAt":  "2025-09-04T09:35:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LWChris",
                                           "body":  "I am in principle totally fine with the additional overload because it would get _the thing that I need_ done without having to introduce the same extensions in every project.\n\nOn the other hand, it feels like a boolean overload would suffer from the typical \"a boolean changes behavior\" problem: unless you use a named parameter, it\u0027s not inherently obvious what the different overloads do:\n\n```\nlist.SingleOrDefault();\nlist.SingleOrDefault(true);\nlist.SingleOrDefault(false);\n```\n\nTherefore, by personal API design standards, I would always try to find a distinct method name that one can _learn_ the meaning of, rather than introducing a `bool doSomethingDifferently` parameter. People who have worked with LINQ a lot might have a deeply rooted belief that \"`Single` throws for `n \u003e 1`\", and not even consider that `SingleOrDefault(false)` or `SingleOrDefault(true)` could change that \"fundamental\" known behavior.\n\nIf we are going for the overload, I\u0027d actually also advocate to have `SingleOrDefault(true)` be the same, because it feels off to have `false` enable a behavior and `true` disable them. I know you can use the `allowMultiple` parameter name, but it feels like the exception is the added thing on top of a more lenient default behavior, not leniency that is enabled on top of a strict default behavior.",
                                           "updatedAt":  "2025-09-04T09:36:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7B4zzk",
                                           "createdAt":  "2025-09-04T09:58:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LWChris",
                                           "body":  "My preference in order from most to least preferred addition is:\n\n* New extension, with a learnable, new and distinct name\n* `SingleOrDefault(bool throwIfMultiple)` \u0026rArr; `SingleOrDefault()` \u0026hArr; `SingleOrDefault(true)`\n* `SingleOrDefault(bool allowMultiple)` \u0026rArr; `SingleOrDefault()` \u0026hArr; `SingleOrDefault(false)`\n* `TryGet_`\n\nThe reason `TryGet` is ranking so low for me is\n\na) because in general I prefer `TryGet` to mean \"do something, or return `false` if _it can\u0027t be done_\", like for `TryGetNonEnumeratedCount`, the only other `TryGet` extension in LINQ so far, and\n\nb) much more importantly, it would make coalesce use cases (which are my most common use case when using my current `OnlyOrDefault` extensions) more ugly:\n\n```csharp\nvar selectedOption = availableOptions.OnlyOrDefault()\n    ?? availableOptions.OnlyOrDefault(o =\u003e o.IsDefault)\n    ?? ShowOptionSelectDialog(availableOptions);\n\n// vs\n\nvar selectedOption = (availableOptions.TryGet_(out var x) ? x : null)\n    ?? (availableOptions.TryGet_(o =\u003e o.IsDefault, out var y) ? y : null)\n    ?? ShowOptionSelectDialog(availableOptions);\n```",
                                           "updatedAt":  "2025-09-04T09:58:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7B5CAm",
                                           "createdAt":  "2025-09-04T10:16:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LWChris",
                                           "body":  "\u003e We\u0027ve had a few proposals/issues on this over the years, I think the last one suggested `Unique` and got closed: [#29398](https://github.com/dotnet/runtime/issues/29398)\n\nThis was also mine @tannergooding, as stated in the original post 😁 I had missed the opportunity to re-open back then (because I had not expected this issue to suddenly be closed that way after almost 1 year).\n\nBut now, several years later, I still find myself adding this behavior as custom extension time and time again (admittedly always under the name `UniqueOrDefault`). So I decided to ask for it again.\n\nI think it\u0027s clear that, apart from the name, the general consensus is that _something_ should exist, as you say. And I agree with @timcassell that `SingleOrDefault` would\u0027ve been the _perfect_ name for this behavior, but alas that is already taken.",
                                           "updatedAt":  "2025-09-04T10:16:07Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "[API Proposal]: Add some LINQ extension to return a single element but not throw for multiple",
        "labels":  [
                       "api-suggestion",
                       "area-System.Linq"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119718",
        "createdAt":  "2025-09-15T15:26:02Z",
        "number":  119718,
        "author":  "Tragetaschen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-15T16:42:34Z",
        "body":  "### Description\n\nI\u0027ve been trying to apply the suggestions for the expected breaking changes regarding the System.Linq.Async nuget. However, I\u0027m not able to get to a working configuration. Between `ToAsyncEnumerable` being ambiguous and `AnyAwaitAsync` seemingly gone.\n\n### Reproduction Steps\n\nIn a class library referencing `System.Linq.Async` targeting `net9.0` and `net10.0`, I have these reduced (and now nonsensical) extension methods.\n\n```csharp\npublic static class MyExtensions\n{\n    public static ValueTask\u003cbool\u003e AnyAwaitConcurrent\u003cTSource\u003e(\n        this IAsyncEnumerable\u003cTSource\u003e items,\n        Predicate\u003cTSource\u003e predicate,\n        CancellationToken cancellationToken = default)\n      =\u003e items.AnyAwaitAsync(x =\u003e ValueTask.FromResult(predicate(x)), cancellationToken);\n\n    public static IAsyncEnumerable\u003cT\u003e MyToAsyncEnumerable\u003cT\u003e(this IEnumerable\u003cT\u003e source)\n        =\u003e source.ToAsyncEnumerable();\n}\n```\nThis code compiles for `net9.0`\n\n### Expected behavior\n\nThere are clear migration steps and available APIs for this code to continue to work.\n\n### Actual behavior\n\nFor `net10.0`:\nAs given, it\u0027s reporting the documented ambiguous method since .NET 10 now comes with a base class library method, but the documented fixes also break the code.\n\nSince it\u0027s a direct reference in a multi-target library, I\u0027m supposed to reference `System.Linq.AsyncEnumerable` instead. This, however, breaks the call to `AnyAwaitAsync` since this extension method isn\u0027t available in that setup.\n\n### Regression?\n\nIt\u0027s a known breaking change, but the resolution steps are at least unclear. I\u0027m inclined to say:\n\nYes.\n\n### Known Workarounds\n\nThere might be a way to call the correct extension methods using assembly aliases, but I have no clue how to declare those with framework assemblies.\n\n### Configuration\n\n10.0.100-rc.1.25451.107\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxEf4LQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7EQ8NL",
                                           "createdAt":  "2025-09-15T15:30:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-linq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-15T15:30:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EQ9YX",
                                           "createdAt":  "2025-09-15T15:30:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "I\u0027m a bot. Here are possible related and/or duplicate issues (I may be wrong):\n- https://github.com/dotnet/runtime/issues/112462\n- https://github.com/dotnet/runtime/issues/79782",
                                           "updatedAt":  "2025-09-15T15:30:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EQ-Y1",
                                           "createdAt":  "2025-09-15T15:32:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tragetaschen",
                                           "body":  "yup, that has been my reading material for the past 90 minutes 😁 ",
                                           "updatedAt":  "2025-09-15T15:32:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7ERBoI",
                                           "createdAt":  "2025-09-15T15:34:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Have you tried the workaround given here: \u003chttps://github.com/dotnet/runtime/issues/79782#issuecomment-2625927473\u003e\n\n@eiriktsarpalis would be the best person to comment on if the improved documentation ended up getting added anywhere.",
                                           "updatedAt":  "2025-09-15T15:34:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7ERECh",
                                           "createdAt":  "2025-09-15T15:37:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tragetaschen",
                                           "body":  "Yes.\nIf I understand it right, this removes the nuget assembly from the compilation if it was brought in via transitive reference. This isn\u0027t the case in my example, but has the same effect as removing the direct reference with the same outcome.",
                                           "updatedAt":  "2025-09-15T15:37:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7ERLB7",
                                           "createdAt":  "2025-09-15T15:44:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tragetaschen",
                                           "body":  "Regarding documentation, it looks like the last questions remained unanswered in the issue\nhttps://github.com/dotnet/docs/issues/44886#issuecomment-2797784902",
                                           "updatedAt":  "2025-09-15T15:44:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7ERPsR",
                                           "createdAt":  "2025-09-15T15:49:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Can you not change your call to AnyAwaitAsync to instead call AnyAsync?",
                                           "updatedAt":  "2025-09-15T15:49:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7ERuMe",
                                           "createdAt":  "2025-09-15T16:23:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tragetaschen",
                                           "body":  "Unsure. I\u0027m not the original author of the actual extension methods and not fluent in the actual semantics of the System.Linq.Async extensions methods. I need to look into that. That\u0027s probably something where the documentation could help a lot...",
                                           "updatedAt":  "2025-09-15T16:23:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7ER_gt",
                                           "createdAt":  "2025-09-15T16:42:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "This is an example where the functionality is expected to be the same, it\u0027s just that the community project used an undesirable name, and the official library fixed it, so the intent is anywhere you\u0027re using AnyAwaitAsync you should instead just be able to use AnyAsync. This is an example of what https://learn.microsoft.com/en-us/dotnet/core/compatibility/core-libraries/10.0/asyncenumerable refers to when it says \"some call sites might need updates to refer to newer names and signatures\".",
                                           "updatedAt":  "2025-09-15T16:42:34Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Unresolvable(?) breaking change with System.Linq.Async in net10.0",
        "labels":  [
                       "area-System.Linq",
                       "untriaged"
                   ]
    }
]
