[
    {
        "url":  "https://github.com/dotnet/runtime/issues/50029",
        "createdAt":  "2018-11-22T20:28:01Z",
        "number":  50029,
        "author":  "aarrgard",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-04-23T03:03:19Z",
        "body":  "We are currently using Unity in some of our projects and want to use it with asp.net core. To enable this feature we use the \"Unity.Microsoft.DependencyInjection - 2.1.1\". We also register some types in the default ServiceCollection provided here that then resolves types from the Unity registrations. There seems to be an issue how unity resolves object by using lambda functions. Since all the DI tests runs successfully using the Unity bridge perhaps the \"Microsoft.Extensions.DependencyInjection.Specification.Tests\" needs to address this.\r\n\r\nThe issue is related to scoped containers. \r\n1. Create and register a transient type that takes a scoped type as parameter.\r\n2. Create service provider \r\n3. Create scoped provider\r\n3. Make sure that the scoped type comes from the child container when getting the transient type.\r\n\r\nThis works in Unity if you register the type with \r\n```c#\r\nserviceCollection.AddTransient\u003cITransientService, TransientService\u003e()\r\n```\r\nbut not if you register it with\r\n```c#\r\nserviceCollection.AddTransient\u003cITransientService\u003e(sp=\u003enew TransientService(sp.GetRequiredService\u003cIScopedService\u003e()))\r\n```\r\n\r\nThe lamda function receives the root container when resolving types in the scoped container.\r\n\r\nAttaching test case. Not XUnit :( \r\n\r\nI can rewrite the test in XUnit and perhaps reuse some of the existing test structures if this is an issue that you feel should be addressed.\r\n\r\n// Andreas\r\n[UnitTestScopes.txt](https://github.com/aspnet/Extensions/files/2609193/UnitTestScopes.txt)\r\n\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMNX6XA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MTE1MjM1Mw==",
                                           "createdAt":  "2018-11-23T03:59:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pakrym",
                                           "body":  "I\u0027ll add a spec test. You might want to file a similar issue in https://github.com/unitycontainer/microsoft-dependency-injection/issues. \r\n\r\ncc @ENikS ",
                                           "updatedAt":  "2018-11-23T03:59:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NTAzMTc3Nw==",
                                           "createdAt":  "2018-12-06T21:14:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ENikS",
                                           "body":  "@aarrgard @pakrym  I will take a look",
                                           "updatedAt":  "2018-12-06T21:14:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NTYwNjM2MA==",
                                           "createdAt":  "2018-12-10T01:06:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAgIL_Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pakrym",
                                                                               "createdAt":  "2018-12-10T01:24:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "pakrym",
                                                                               "createdAt":  "2018-12-10T01:25:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ENikS",
                                           "body":  "I fixed it in Unity.DI. xUnit tests are available [here](https://github.com/unitycontainer/microsoft-dependency-injection/blob/master/tests/GitHub.cs)",
                                           "updatedAt":  "2018-12-10T01:06:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NzY3MTUyOQ==",
                                           "createdAt":  "2018-12-16T20:04:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aarrgard",
                                           "body":  "Looks good. Just out of curiosity. Is this test intended for just th unity container is is is something that should be tested i the generic test suite where the container is created using an abstract method. Since the https://github.com/unitycontainer/microsoft-dependency-injection passes all the tests i thougth it would be a good idea to add one that addresses the problem for all the IoC frameworks that want to be compatible. Perhaps I´m missing something. Just my 2 cents.",
                                           "updatedAt":  "2018-12-16T20:04:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NzkxODA3NQ==",
                                           "createdAt":  "2018-12-17T16:57:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pakrym",
                                           "body":  "We should add a spec test too. This scenario was implied but not tested so it should pass on all supported containers.",
                                           "updatedAt":  "2018-12-17T16:57:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNDI1MjgzMg==",
                                           "createdAt":  "2021-03-22T17:28:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe are currently using Unity in some of our projects and want to use it with asp.net core. To enable this feature we use the \"Unity.Microsoft.DependencyInjection - 2.1.1\". We also register some types in the default ServiceCollection provided here that then resolves types from the Unity registrations. There seems to be an issue how unity resolves object by using lambda functions. Since all the DI tests runs successfully using the Unity bridge perhaps the \"Microsoft.Extensions.DependencyInjection.Specification.Tests\" needs to address this.\r\n\r\nThe issue is related to scoped containers. \r\n1. Create and register a transient type that takes a scoped type as parameter.\r\n2. Create service provider \r\n3. Create scoped provider\r\n3. Make sure that the scoped type comes from the child container when getting the transient type.\r\n\r\nThis works in Unity if you register the type with \r\nserviceCollection.AddTransient\u003cITransientService, TransientService\u003e()\r\nbut not if you register it with\r\nserviceCollection.AddTransient\u003cITransientService\u003e(sp=\u003enew TransientService(sp.GetRequiredService\u003cIScopedService\u003e()))\r\n\r\nThe lamda function receives the root container when resolving types in the scoped container.\r\n\r\nAttaching test case. Not XUnit :( \r\n\r\nI can rewrite the test in XUnit and perhaps reuse some of the existing test structures if this is an issue that you feel should be addressed.\r\n\r\n// Andreas\r\n[UnitTestScopes.txt](https://github.com/aspnet/Extensions/files/2609193/UnitTestScopes.txt)\r\n\r\n\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eaarrgard\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-DependencyInjection`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-22T17:28:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMDY5MDMwMg==",
                                           "createdAt":  "2021-03-31T01:38:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ENikS",
                                           "body":  "\u003e serviceCollection.AddTransient(sp=\u003enew TransientService(sp.GetRequiredService()))\r\n\r\nYou are resolving service from root inside your lambda, how sp should know about the scope?",
                                           "updatedAt":  "2021-03-31T01:38:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTMyOTYyOA==",
                                           "createdAt":  "2021-04-14T08:19:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aarrgard",
                                           "body":  "When I tested this 2,5 years ago this registration works:\r\n\r\nserviceCollection.AddTransient\u003cITransientService, TransientService\u003e()\r\n\r\nHow does the service provider know about the scope in that case when resolving instances?\r\n",
                                           "updatedAt":  "2021-04-14T08:19:57Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Add DI compatibility test",
        "labels":  [
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36403",
        "createdAt":  "2019-01-13T11:59:16Z",
        "number":  36403,
        "author":  "stevejgordon",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-10-12T16:50:26Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nCurrently, many generic extension methods exist on the IServiceCollection to support the registration of services. One that seems to be missing is a TryAddEnumerable extension which supports generics. The remarks for TryAddEnumerable recommend it for situations where multiple implementations are being registered. Currently, when using TryAddEnumerable it\u0027s one the few cases I\u0027ve found where the user must also understand how to directly create a ServiceDescriptor.\r\n\r\n### Describe the solution you\u0027d like\r\nSomething along the lines of this would be sufficient as a minimum, although perhaps other overloads would be useful to support the different lifetimes...\r\n\r\n```csharp\r\npublic static void TryAddEnumerable\u003cTService, TImplementation\u003e(this IServiceCollection collection, ServiceLifetime serviceLifetime)\r\n\twhere TService : class\r\n\twhere TImplementation : class, TService\r\n{\r\n\tvar serviceDescriptor =\r\n\t\tServiceDescriptor.Describe(typeof(TService), typeof(TImplementation), serviceLifetime);\r\n\r\n\tcollection.TryAddEnumerable(serviceDescriptor);\r\n}\r\n```\r\n\r\nIf this looks reasonable I\u0027d be happy to submit a PR for this and any other extension methods that would be helpful.\r\n\r\n### Describe alternatives you\u0027ve considered\r\nN/A\r\n\r\n### Additional context\r\nN/A",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOj5Cxfg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MzkwMjcwNQ==",
                                           "createdAt":  "2019-01-14T05:02:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rynowak",
                                           "body":  "@stevejgordon  do you feel like this is common enough to worth adding? We considered this at a much earlier point and left it out because we felt like only commonly needed to do this... but that might have been wrong. Do you have examples of where you\u0027ve needed this?",
                                           "updatedAt":  "2019-01-14T05:02:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MzkyMTQ0Mg==",
                                           "createdAt":  "2019-01-14T07:44:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stevejgordon",
                                           "body":  "Hi @rynowak. I\u0027d definitely expect that it\u0027s less common but we have used the pattern of registering multiple implementations of a service type in at least 3 microservices in the last year or so. The typical case for us is in data processing services where we\u0027re applying either rules or a conditional set of data enrichment services over the messages being processed. These are typically .NET Core generic host based queue readers.\r\n\r\nFor example, we have something like an IDataEnricher interface defining two methods `Task Enrich(Message m)` and `Task\u003cbool\u003e CanEnrich(Message m)`. We then register in our case around 14 implementations this and have a message enricher accepting the IEnumerable\u003cIDataEnricher\u003e that envokes the Enrich method against the message for all those that can enrich it.\r\n\r\nFor our first services, I was completely unaware of the TryAddEnumerable method and we just used the regular Add extensions. We switched to TryAddEnumerable after I discovered it and saw it remarks. I\u0027ve got a small internal package where we have a couple of extensions to make the use by our teams more consistent with the other generic methods.\r\n\r\nI\u0027m also now considering using the scanning feature in [Scrutor ](https://github.com/khellang/Scrutor) by @khellang.\r\n\r\nI don\u0027t know if we\u0027re a bit of an exception in that use, but it would be great even in our small case to have at least this one generic method.\r\n\r\nI\u0027m including a section on this pattern and registering with TryAddEnumerable in my Pluralisght course too. In that demo, I\u0027m showing the concept of having an IRule interface defined for a booking system. There can then be multiple rule implementations which are registered and all of which are evaluated when a booking attempt is made. This is in an ASP.NET Core web app scenario.",
                                           "updatedAt":  "2019-01-14T07:44:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PkLF-",
                                           "createdAt":  "2024-10-12T16:50:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "silkfire",
                                           "body":  "Could this be added for .NET 10?",
                                           "updatedAt":  "2024-10-12T16:50:26Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Generic TryAddEnumerable method(s)",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36461",
        "createdAt":  "2019-08-21T08:04:21Z",
        "number":  36461,
        "author":  "yuniansheng",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9ABFQ==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "rcollina",
                                            "createdAt":  "2019-09-17T21:39:38Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "wjrogers",
                                            "createdAt":  "2021-04-03T22:15:19Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "markusschaber",
                                            "createdAt":  "2021-04-06T08:18:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ulrichb",
                                            "createdAt":  "2021-10-25T14:41:06Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "ulrichb",
                                            "createdAt":  "2021-10-25T14:41:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "chjrom",
                                            "createdAt":  "2022-06-29T05:20:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EnsignPayton",
                                            "createdAt":  "2022-09-13T15:43:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jeffmccormick",
                                            "createdAt":  "2023-01-05T06:03:51Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "jeffmccormick",
                                            "createdAt":  "2023-01-05T06:13:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "epsitec",
                                            "createdAt":  "2024-11-27T09:52:44Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2025-07-26T10:39:07Z",
        "body":  "I am reading the soure code of DI projects,  and i found some code in the class [CallSiteRuntimeResolver](https://github.com/aspnet/Extensions/blob/master/src/DependencyInjection/DI/src/ServiceLookup/CallSiteRuntimeResolver.cs#L18) may leading memory issue, below is the method in this class. If we register a service implemented the IDisposable interface with a transient lifetime, and then get this service from the root ServiceProviderEngineScope, the root scope will hold the reference of this service because the VisitDisposeCache method called Scope.CaptureDisposable, CaptureDisposable\u0027s inner logic will add this service to it\u0027s _disposables list, so this service will never be collected by GC, if the service has some non-managed resource, this resource will never be disposed. \r\n```C#\r\n        protected override object VisitDisposeCache(ServiceCallSite transientCallSite, RuntimeResolverContext context)\r\n        {\r\n            return context.Scope.CaptureDisposable(VisitCallSiteMain(transientCallSite, context));\r\n        }\r\n````\r\n\r\nI suggest adding an if condition in the VisitDisposeCache method, if the context.Scope is the Root scope then just return the resolved service else call the CaptureDisposable to add the service to scope\u0027s _disposables list\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtMUo8Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMTQ4NzU1NA==",
                                           "createdAt":  "2019-09-14T15:14:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This is a known issue with the container and it would need to be opt out at this point. If we don\u0027t capture transient disposables in the root scope then they wouldn\u0027t get disposed when the container is disposed.",
                                           "updatedAt":  "2019-09-14T15:14:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU1Njk2Nw==",
                                           "createdAt":  "2020-05-08T00:03:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "As part of the migration of components from dotnet/extensions to dotnet/runtime (https://github.com/aspnet/Announcements/issues/411) we will be bulk closing some of the older issues. If you are still interested in having this issue addressed, just comment and the issue will be automatically reactivated (even if you aren\u0027t the author). When you do that, I\u0027ll page the team to come take a look. If you\u0027ve moved on or workaround the issue and no longer need this change, just ignore this and the issue will be closed in **7 days**.\n\nIf you know that the issue affects a package that has moved to a different repo, please consider re-opening the issue in that repo. If you\u0027re unsure, that\u0027s OK, someone from the team can help!",
                                           "updatedAt":  "2020-05-08T00:03:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODU0ODM1NQ==",
                                           "createdAt":  "2020-05-14T10:37:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tim-fernico",
                                           "body":  "I have been caught by this issue, it needs to be addressed",
                                           "updatedAt":  "2020-05-14T10:37:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODU0ODM2OQ==",
                                           "createdAt":  "2020-05-14T10:37:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Paging @dotnet/extensions-migration ! This issue has been revived from staleness. Please take a look and route to the appropriate repository.",
                                           "updatedAt":  "2020-05-14T10:37:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODc1NTk0MQ==",
                                           "createdAt":  "2020-05-14T16:46:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@davidfowl what about `WeakReference`?  Would that solve this compatibly?",
                                           "updatedAt":  "2020-05-14T16:46:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDMzODc3Mg==",
                                           "createdAt":  "2020-10-06T15:11:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "@davidfowl should this be considered for 6.0?",
                                           "updatedAt":  "2020-10-06T15:11:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDQzNDYxNw==",
                                           "createdAt":  "2020-10-06T17:34:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e @davidfowl what about WeakReference? Would that solve this compatibly?\r\n\r\nDispose needs to be explicitly called and WeakReference would add overhead.\r\n\r\n\u003e @davidfowl should this be considered for 6.0?\r\n\r\nWe could add a global option but nothing per service. That requires other containers to buy in.",
                                           "updatedAt":  "2020-10-06T17:34:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMjkyMzMxMw==",
                                           "createdAt":  "2021-04-03T20:49:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "History - https://github.com/aspnet/DependencyInjection/issues/456\r\n\r\nI say, lets add a flag for this and have it apply to the root scope only:\r\n\r\n## API proposal\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.DependencyInjection\r\n{\r\n    public class ServiceProviderOptions\r\n    {\r\n+       public TransientBehavior TransientBehavior { get; set; }\r\n    }\r\n\r\n+    public enum TransientBehavior\r\n+    {\r\n+        Default,\r\n+        WeakDisposableCaptureInAllScopes,\r\n+    }\r\n}\r\n```\r\n\r\nThe name is verbose but explicit. I think we have 2 options here:\r\n- Don\u0027t track them at all - It means the user is responsible for tracking the transitive closure of disposable objects and disposing them.\r\n- Track them with WeakReferences as @ericstj mentions and make it a best effort for disposal",
                                           "updatedAt":  "2021-04-03T23:31:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMjkzMTkwOA==",
                                           "createdAt":  "2021-04-03T22:06:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "It may be better to make this option an enum, with the options to:\r\n\r\n- preserve legacy behaviour (I.e no change)\r\n- disable in root scope only (as you\u0027ve proposed)\r\n- disable for all scopes\r\n\r\nUpdate: looks like api proposal does have this I must have missed it on first glance!",
                                           "updatedAt":  "2021-04-03T23:11:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMjk0MDY5Mg==",
                                           "createdAt":  "2021-04-03T23:31:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCZWBew==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Hylaean",
                                                                               "createdAt":  "2021-04-23T08:53:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikhail-khalizev",
                                                                               "createdAt":  "2022-04-22T15:55:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e Disabling in root scope only seems oddly asymmetric and that could be problematic in my view. For example if a class is injected with a transient disposable dependency - if that class is resolved in root scope it would be responsible for disposing of its dependency, but if its resolved in non root scope it wouldn\u0027t be. Yet it has no control over what scope/s it\u0027s potentially resolved in so how does it know what to do?\r\n\r\nThis is a problem regardless. Usually the actor that controls disposing the container doesn\u0027t control all objects that go into the container. How would a library every know if this switch is on or not since they can no longer predict if they need to call dispose or not? The other complication comes from the fact that we capture the disposable based on the implementation type, not the service type. That means that it\u0027s possible to set this flag and leak dependencies you don\u0027t own because they were relying on somebody else calling dispose. The reason I like the root container only option is because I think that\u0027s the only problematic case, other scopes get disposed more often than once per application. \r\n\r\nThough if you were doing something where you had long running application scoped tenants (like I assume you do) I can see why you\u0027d run into the same issue. Though if you were creating multiple root container instances you could configure it there.\r\n\r\nWhat you say tough makes me remember some of the initial discussion around this where objects need to be designed around the fact that they hold onto disposable objects. The problem is that today the DI container lets you skip thinking about this because its the container\u0027s job. As a result you can have objects graphs like this:\r\n\r\nA -\u003eB (disposable) -\u003e C-\u003e D (disposable)\r\n\r\nThe DI container sits between this object graph and will dispose B and D when the scope is disposed. Manually disposing this object graph, you either need the entire graph to be disposable so that disposing A disposes everything else, or I need to somehow track disposable objects myself.\r\n\r\n**Maybe this is a bad idea and we should have a single option to use a weak reference instead of a strong reference is better for all scopes, not just the root scope.**\r\n\r\nUpdated the API to reflect this. Let me know your thoughts.\r\n\r\n",
                                           "updatedAt":  "2021-04-03T23:31:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMjk0MjY3OQ==",
                                           "createdAt":  "2021-04-03T23:50:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "@davidfowl Yes I\u0027m having very similar thought patterns.\r\n\r\nRoot scope is only problematic in this case because its typically long living. However in unit test scenarios creating a root SP per unit test and disposing of it at the end of each test- there is no issue.\r\n\r\nWith that in mind I\u0027m thinking this issue could be addressed by adding a single opt in behaviour, to throw when a non singleton IDisposable is resolved (injected) in \"root\" scope. \r\n\r\nHostbuilder scenarios (typically Hostbuilder means an actual application scenario) could potentially opt in to this by default (bit risky) as its expected the root SP that it builds will be a long living one for a long running host. However unit test code or code that directly creates a new ServiceProvider - could remain an explicit opt in. Just an idea.\r\n\r\nThis opt in behaviour would add a small safety net of sorts. If the exception is thrown its because you are most likely resolving transient or scoped IDisposables from root scope which is most likely not want you want to be doing. The answer isn\u0027t to disable tracking though (because we have no other agreed way to control disposable ownership with a mechanism that all containers conform too yet) but its instead to make sure you create a scope and resolve from that, then dispose the scop - the exception would indicate this.\r\n\r\nThis does special case the root scope a bit though. In theory any scope could be made a long living scope and exhibit this problem. Therefore it might be an idea to also expose the same behavioural options when creating a new scope. If you are creating a new scope for a very long running background job you might want to opt in to this same option for all of the same reasons.",
                                           "updatedAt":  "2021-04-04T02:05:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VuIUX",
                                           "createdAt":  "2023-02-21T09:38:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "springy76",
                                           "body":  "Wow 7+ years of discussion, nothing gained. Can I control this in a better way using AutoFac, DryIOC (or whatever is hip in 2023)? (I\u0027m using Blazor-Server, so there exist long living service scopes.)\r\n\r\nBtw, there is one disposable transient service in the framework: `Microsoft.AspNetCore.Routing.Matching.DataSourceDependentMatcher+Lifetime` - can\u0027t tell if it is a candidate for memory leaks.\r\n\r\n",
                                           "updatedAt":  "2023-02-23T09:01:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VxMhU",
                                           "createdAt":  "2023-02-21T19:01:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "I still think adding the following would solve this issue:\r\n\r\n- Add an opt in, to throw a runtime exception if an `IDisposable` service registered as `Transient` or `Scoped` is resolved in root scope. (Singleton is fine).\r\n- Add an opt in, for .CreateScope() - to throw a runtime exception if an `IDisposable` service registered as `Transient`  is resolved in that scope. Assume scoped IDisposable\u0027s resolved in a scope are ok due to the concept that scopes should have fixed lifetimes shorter than the application lifetime.\r\n",
                                           "updatedAt":  "2023-02-21T19:01:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5V3Mh6",
                                           "createdAt":  "2023-02-22T18:09:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "@davidfowl any thoughts on the above proposal?",
                                           "updatedAt":  "2023-02-22T18:09:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ck6Ya",
                                           "createdAt":  "2023-05-18T14:49:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC_dkwg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gian7sm",
                                                                               "createdAt":  "2023-06-29T23:28:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "OvidiuTK",
                                           "body":  "One workaround with factory delegate which would allow decoupling:\r\n`services.AddTransient\u003cFunc\u003cIFooDisposable\u003e\u003e(sp =\u003e () =\u003e new FooDisposable());`\r\nand the consumer:\r\n`public class Consumer`\r\n`{`\r\n`    Func\u003cIFooDisposable\u003e _factoryDelegate;`\r\n`    public Consumer2(Func\u003cIFooDisposable\u003e factoryDelegate)`\r\n`    {`\r\n`       _factoryDelegate = factoryDelegate;`\r\n`    }`\r\n`    public void DoSomeWork()`\r\n`    {`\r\n`        // We can repeat this as many times as we want to, because fooDisposable will be disposed when we want to.`\r\n`        using (IFooDisposable fooDisposable = _factoryDelegate()) { ... }`\r\n`    }`\r\n`}`\r\nWhere:\r\n`public interface IFooDisposable : IDisposable { /*...*/ }`\r\nSo I would lean toward a compile warning with a message hinting to the use of a factory delegate instead.\r\nAlso an opt-in or opt-out \"object not disposed\" compile warning in general may help, when a path not disposing a disposable object exists.\r\nBased on #36491 comment by @dazinator",
                                           "updatedAt":  "2023-05-18T15:08:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jaytS",
                                           "createdAt":  "2023-08-07T14:28:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving this for v9",
                                           "updatedAt":  "2023-08-07T14:28:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qaBXG",
                                           "createdAt":  "2023-10-30T13:31:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChiefInnovator",
                                           "body":  "\u003e The reason I like the root container only option is because I think that\u0027s the only problematic case, other scopes get disposed more often than once per application.\r\n\r\nI think this needs to be with all containers.  There are scopes such as Login to Logout in a Desktop application which has a long lifetime, almost the entire lifetime of an application.  Yet there are tons of Transients in that scope that you want Disposed independent of Container lifetime.",
                                           "updatedAt":  "2023-10-30T13:31:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ye-9n",
                                           "createdAt":  "2024-12-21T22:41:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iXab3r",
                                           "body":  "\n@stephentoub Is there are chance we\u0027ll get this in 10th version ? \n\nBeen a reoccurring issue for **9 years** at that point and one of constant traps into which people tend to fall.\n\nEven throwing exceptions like @dazinator proposed would be better than spending time over and over again on tracing memory leaks in different services, just to find that it is caused by someone adding IDisposable to transient dependency in a decade year old codebase. \n\nRight now, in .NET, we have an amazing infrastructure built around DI with built-in memory leak. Seen that in all kinds of different forms throughout years - web servers, desktop apps, container-2-container bridges, even in tutorials where authors show how to use DI in .NET.  The current behaviour is one of \"gotcha\" moments which is unobvious until you\u0027ve stumbled upon it\n",
                                           "updatedAt":  "2024-12-22T02:44:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eblL0",
                                           "createdAt":  "2025-02-14T01:04:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "While it might be hard to reach consensus on the safety (and behavior) of a potential global switch, I\u0027d very much prefer to have at least _some_ ability to influence it per _specific_ service. The kind of service I can say \"I solemnly swear that I will track this service myself, and dispose it myself when it will be safe to do so\".\n\nThis is exactly the case with `HttpClient` and `HttpMessageHandler`, which are already fully managed by the `IHttpClientFactory`. There is absolutely no need to track them in the container, it will even prevent the factory from cleaning up in time. (more discussions in https://github.com/dotnet/runtime/issues/89755)\n\nTo avoid the need to force all other container implementations to add the feature ASAP, I was thinking maybe the property can have a \"recommendation\"/\"request\" semantic? E.g. I say to the container that I _already_ do the tracking myself, so the container _does not have to_. And then the container honoring this request becomes more an optimization rather than a whole new feature.\n\nAnd for the concerns that the consumer might not know whether the service needs to be disposed -- this is one of the reasons I think it is much better to say per specific service, where the consumer _can_ actually give such a guarantee.\n\nThe API surface can look like this:\n\n```c#\nnamespace Microsoft.Extensions.DependencyInjection;\n\npublic enum DisposableTrackingLevel\n{\n    Default,\n    NotRequired,\n    //WeakReference // can be added later\n}\n\npublic class ServiceDescriptor\n{\n    public DisposableTrackingLevel TrackingLevel { get; } = DisposableTrackingLevel.Default;\n\n    public ServiceDescriptor(\n            Type serviceType,\n            [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] Type implementationType,\n            ServiceLifetime lifetime,\n            DisposableTrackingLevel trackingLevel) { }\n\n    public ServiceDescriptor(\n            Type serviceType,\n            object? serviceKey,\n            [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] Type implementationType,\n            ServiceLifetime lifetime,\n            DisposableTrackingLevel trackingLevel) { }\n\n    public ServiceDescriptor(\n            Type serviceType,\n            Func\u003cIServiceProvider, object\u003e factory,\n            ServiceLifetime lifetime,\n            DisposableTrackingLevel trackingLevel) { }\n\n    public ServiceDescriptor(\n            Type serviceType,\n            object? serviceKey,\n            Func\u003cIServiceProvider, object?, object\u003e factory,\n            ServiceLifetime lifetime,\n            DisposableTrackingLevel trackingLevel) { }\n    //...\n}\n\n// usage:\n\nvar client = new ServiceDescriptor(\n    typeof(HttpClient),\n    ServiceKey,\n    CreateKeyedClient,\n    lifetime,\n    DisposableTrackingLevel.NotRequired);\n\nvar handler = new ServiceDescriptor(\n    typeof(HttpMessageHandler),\n    ServiceKey,\n    CreateKeyedHandler,\n    lifetime,\n    DisposableTrackingLevel.NotRequired);\n\nservices.Add(client);\nservices.Add(handler);\n```\n\ncc @halter73 @davidfowl @steveharter ",
                                           "updatedAt":  "2025-02-14T01:04:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eeS3r",
                                           "createdAt":  "2025-02-14T09:35:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Anything on service descriptor needs to be supported by the containers that implement the abstraction. As long as the other container authors sign off on a change like this, we can implement it.",
                                           "updatedAt":  "2025-02-14T09:35:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6efe6i",
                                           "createdAt":  "2025-02-14T11:24:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "Makes sense. Linking a related comment for future reference https://github.com/dotnet/runtime/issues/64427#issuecomment-1026501870",
                                           "updatedAt":  "2025-02-14T11:24:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ehZSa",
                                           "createdAt":  "2025-02-14T15:01:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGbkxQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "CarnaViire",
                                                                               "createdAt":  "2025-02-14T18:11:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "DI council: @alexmg @tillig @pakrym @ENikS @ipjohnson @dadhi @seesharper @jeremydmiller @alistairjevans\n\n😄 ",
                                           "updatedAt":  "2025-02-14T15:01:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ehy_O",
                                           "createdAt":  "2025-02-14T15:41:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGffQA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CarnaViire",
                                                                               "createdAt":  "2025-02-14T18:11:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexmg",
                                                                               "createdAt":  "2025-02-15T05:24:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "u7pro",
                                                                               "createdAt":  "2025-02-16T06:32:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "tillig",
                                           "body":  "Autofac already supports the ability to register things as \"don\u0027t track my disposal\" using `ExternallyOwned()`:\n\n```c#\nbuilder.RegisterType\u003cService\u003e().As\u003cIDisposableComponent\u003e().ExternallyOwned();\n```\n\nDoing that allows folks to opt out.\n\nThere\u0027s only \"track\" or \"don\u0027t track,\" though; there\u0027s no notion of `WeakReference`. We tried doing that, to attempt auto-disposing of child scopes when a parent scope was disposed, and it got really hairy. Ended up rolling it back. I\u0027m not sure we\u0027d add that.",
                                           "updatedAt":  "2025-02-14T15:41:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ennMh",
                                           "createdAt":  "2025-02-16T01:44:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "If we want to be explicit about not tracking an IDisposable, it\u0027s simple to register a Func\u003cMyDisposable\u003e instead. So I don\u0027t think this is about any kind of need for `ExternallyOwned`.\nI think the issue is just that devs get caught out by disposal tracking in long living containers.\n\nI\u0027d propose:\n- a flag for whether the container is \"long living\" - defaults to true on root container and false on scopes\n- if an idisposable is resolved in a \"long living\" scope (i.e root) the container throws.\n- a setting to enable this new behaviour (could be on by default but could be a bit like how scope validation is enabled by default in dev) this could be \"long living dispose tracker validation\" :-)\n\nWhen creating a scope, it\u0027s possible the particular scope is not for a http request or something known to be short lived.. Imagine a win forms application that creates a scope round a user form - there is no way to know how long that form, and therefore that scope , may be in use for. Therefore the ability when creating a scope to override the default assumption that its a short lifetime and say its indeterminate would be useful. This would just make it explicit as to why the safety net enabled by this new option, would then kick in for that scope. You\u0027d then have to check your IDisposable\u0027s and the problem is surfaced earlier before any memory leak in prod. The solution for the dev seeing the exception would be to register the pesky idisposable using a factory - to avoid the tracker. \n\n",
                                           "updatedAt":  "2025-02-16T01:49:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6evHUI",
                                           "createdAt":  "2025-02-17T13:31:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "\u003e There\u0027s only \"track\" or \"don\u0027t track,\" though; there\u0027s no notion of `WeakReference`. We tried doing that, to attempt auto-disposing of child scopes when a parent scope was disposed, and it got really hairy. Ended up rolling it back. I\u0027m not sure we\u0027d add that.\n\n@tillig that\u0027s a great data point, thanks. My initial draft also had a simple flag there (and even with the same name 😂) Let me bring it in as well as an alternative.\n\n```c#\n// --- Minimal Feature API ---\n// Constraint level: none\n\nnamespace Microsoft.Extensions.DependencyInjection;\n\npublic class ServiceDescriptor\n{\n    public bool ExternallyOwned { get; } = false;\n\n    public ServiceDescriptor(\n        Type serviceType,\n        [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] Type implementationType,\n        ServiceLifetime lifetime,\n        bool externallyOwned) { }\n\n    public ServiceDescriptor(\n        Type serviceType,\n        object? serviceKey,\n        [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] Type implementationType,\n        ServiceLifetime lifetime,\n        bool externallyOwned) { }\n\n    public ServiceDescriptor(\n        Type serviceType,\n        Func\u003cIServiceProvider, object\u003e factory,\n        ServiceLifetime lifetime,\n        bool externallyOwned) { }\n\n    public ServiceDescriptor(\n        Type serviceType,\n        object? serviceKey,\n        Func\u003cIServiceProvider, object?, object\u003e factory,\n        ServiceLifetime lifetime,\n        bool externallyOwned) { }\n\n    //...\n}\n\n// usage:\n\nvar client = new ServiceDescriptor(\n    typeof(HttpClient), ServiceKey, CreateKeyedClient, lifetime,\n    externallyOwned: true); // owned by HttpClientFactory\n\nvar handler = new ServiceDescriptor(\n    typeof(HttpMessageHandler), ServiceKey, CreateKeyedHandler, lifetime,\n    externallyOwned: true); // owned by HttpClientFactory\n\nservices.Add(client);\nservices.Add(handler);\n```\n\nOptional Convenience 1: `ServiceDescriptor.Describe[Disposable]` et al.\n\n\u003cdetails\u003e\n\n```c#\n// --- Optional Convenience #1 ---\n// Constraint level: low (IDisposable implementation type)\n\nnamespace Microsoft.Extensions.DependencyInjection;\n\npublic class ServiceDescriptor\n{\n    public static ServiceDescriptor DescribeDisposable(\n        Type serviceType,\n        [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] Type implementationType,\n        ServiceLifetime lifetime,\n        bool externallyOwned) { } // throws if implementationType is not IDisposable\n\n    public static ServiceDescriptor DescribeKeyedDisposable(\n        Type serviceType,\n        object? serviceKey,\n        [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] Type implementationType,\n        ServiceLifetime lifetime,\n        bool externallyOwned) { } // throws if implementationType is not IDisposable\n\n    public static ServiceDescriptor DescribeDisposable(\n        Type serviceType,\n        Func\u003cIServiceProvider, IDisposable\u003e implementationFactory,\n        ServiceLifetime lifetime,\n        bool externallyOwned) { }\n\n    public static ServiceDescriptor DescribeKeyedDisposable(\n        Type serviceType,\n        object? serviceKey,\n        Func\u003cIServiceProvider, object?, IDisposable\u003e implementationFactory,\n        ServiceLifetime lifetime,\n        bool externallyOwned) { }\n\n    // (?) IAsyncDisposable without IDisposable are expected to be rare,\n    // and in such a case, the descriptor\u0027s ctor can be used directly\n\n    //...\n}\n\n// usage:\n\nvar client = ServiceDescriptor.DescribeKeyedDisposable(\n    typeof(HttpClient), ServiceKey, CreateKeyedClient, lifetime,\n    externallyOwned: true); // owned by HttpClientFactory\n\nvar handler = ServiceDescriptor.DescribeKeyedDisposable(\n    typeof(HttpMessageHandler), ServiceKey, CreateKeyedHandler, lifetime,\n    externallyOwned: true); // owned by HttpClientFactory\n\nservices.Add(client);\nservices.Add(handler);\n```\n\n\u003c/details\u003e\n\nOptional Convenience 2: `ServiceDescriptor.Transient[Disposable]` et al.\n\n\u003cdetails\u003e\n\n```c#\n// --- Optional Convenience #2 ---\n// Constraint level: high (IDisposable service type + transient lifetime)\n\nnamespace Microsoft.Extensions.DependencyInjection;\n\npublic class ServiceDescriptor\n{\n    public static ServiceDescriptor TransientDisposable\u003cTService, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] TImplementation\u003e(\n        bool externallyOwned)\n        where TService : class, IDisposable // (?) for a convenience method: consumer should be able to dispose the service\n        where TImplementation : class, TService { }\n\n    public static ServiceDescriptor KeyedTransientDisposable\u003cTService, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] TImplementation\u003e(\n        object? serviceKey,\n        bool externallyOwned)\n        where TService : class, IDisposable // (?) consumer should be able to dispose\n        where TImplementation : class, TService { }\n\n    public static ServiceDescriptor TransientDisposable\u003cTService, TImplementation\u003e(\n        Func\u003cIServiceProvider, TImplementation\u003e implementationFactory,\n        bool externallyOwned)\n        where TService : class, IDisposable // (?) consumer should be able to dispose\n        where TImplementation : class, TService { }\n\n    public static ServiceDescriptor KeyedTransientDisposable\u003cTService, TImplementation\u003e(\n        object? serviceKey,\n        Func\u003cIServiceProvider, TImplementation\u003e implementationFactory,\n        bool externallyOwned)\n        where TService : class, IDisposable // (?) consumer should be able to dispose\n        where TImplementation : class, TService { }\n\n    public static ServiceDescriptor TransientDisposable\u003cTService\u003e(\n        Func\u003cIServiceProvider, TService\u003e implementationFactory,\n        bool externallyOwned)\n        where TService : class, IDisposable { } // (?) consumer should be able to dispose\n\n    public static ServiceDescriptor KeyedTransientDisposable\u003cTService\u003e(\n        object? serviceKey,\n        Func\u003cIServiceProvider, TService\u003e implementationFactory,\n        bool externallyOwned)\n        where TService : class, IDisposable { } // (?) consumer should be able to dispose\n\n    //...\n}\n\n// usage:\n\nServiceDescriptor client;\nServiceDescriptor handler;\nif (lifetime is ServiceLifetime.Transient) // opting out from transient tracking\n{\n    client = ServiceDescriptor.KeyedTransientDisposable\u003cHttpClient\u003e(\n        ServiceKey, CreateKeyedClient, externallyOwned: true); // owned by HttpClientFactory\n\n    handler = ServiceDescriptor.KeyedTransientDisposable\u003cHttpMessageHandler\u003e(\n        ServiceKey, CreateKeyedHandler, externallyOwned: true); // owned by HttpClientFactory\n}\nelse\n{\n    client = ServiceDescriptor.DescribeKeyed(typeof(HttpClient), ServiceKey, CreateKeyedClient, lifetime);\n    handler = ServiceDescriptor.DescribeKeyed(typeof(HttpMessageHandler), ServiceKey, CreateKeyedHandler, lifetime);\n}\n\nservices.Add(client);\nservices.Add(handler);\n```\n\n\u003c/details\u003e\n\nI contemplated also adding versions of `AddTransient`/`AddKeyedTransient`/`TryAddTransient`/`TryAddKeyedTransient` as an `Optional Convenience #3`, but as the API surface grows exponentially, I don\u0027t think it\u0027s worth it. I\u0027m not sure whether the first two Optional Conveniences are worth it either, but at least they are more compact (and offer ability to set some constraints).\n\nI do feel strongly about the minimal per-descriptor opt-out feature though.\n",
                                           "updatedAt":  "2025-02-18T12:47:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ev-UH",
                                           "createdAt":  "2025-02-17T15:01:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGn0Mg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CarnaViire",
                                                                               "createdAt":  "2025-02-17T17:32:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dadhi",
                                           "body":  "@davidfowl @tillig \n\n[DryIoc](https://github.com/dadhi/DryIoc) has the granulated control for the tracking of the Disposable Transients.\nThe rules may be set on the Container level, and can be overridden for the Individual registration.\n\nOn the container level, the DryIoc has the set of the rules conforming to MS.DI including `Settings.TrackingDisposableTransients`.\nThis setting differs from the DryIoc defaults, which is not to track and prohibit the `IDisposable` transient registrations in general (`Settings.ThrowOnRegisteringDisposableTransient`).\n\n\u003cdetails\u003e\u003csummary\u003eAll basic conforming rules for the MS.DI for the reference...\u003c/summary\u003e\n\n```cs\n    private static Rules WithMicrosoftDependencyInjectionRules(Rules rules, ParameterSelector parameters)\n    {\n        var made = rules._made;\n        var newMade = made.With(\n            DryIoc.FactoryMethod.ConstructorWithResolvableArguments,\n            made.Parameters.OverrideWith(parameters));\n\n        var newRules = rules.With(newMade);\n\n        newRules._settings = (rules._settings\n            | Settings.TrackingDisposableTransients\n            | Settings.SelectLastRegisteredFactory)\n            \u0026 ~Settings.ThrowOnRegisteringDisposableTransient\n            \u0026 ~Settings.VariantGenericTypesInResolvedCollection;\n\n        newRules._serviceKeyToTypeIndex ??= ImHashMap\u003cobject, object\u003e.Empty;\n\n        newRules.FactorySelector = SelectLastRegisteredFactory;\n        return newRules;\n    }\n```\n\u003c/details\u003e \n\nThose may be overridden on the registration level as following:\n\n```cs\n// allows the registration, but no tracking though\ncontainer.Register\u003cA\u003e(Reuse.Transient, \n    setup: Setup.With(allowDisposableTransient: true, trackDisposableTransient: false));  \n```\n\nAdditionally, there is an orthogonal mechanism which will wrap the registered services in the  `HiddenDisposable` or `WeakReference` boxes (as an implementation detail), basically excluding them from the Settings, Rules described above.\n\n```cs\n // hides the disposable\ncontainer.Register\u003cFoo\u003e(setup: Setup.With(preventDisposal: true));\n\n// a weakly referenced thingy\ncontainer.Register\u003cBar\u003e(setup: Setup.With(weaklyReferenced: true));\n``` \n\nThe docs:\n\n- https://github.com/dadhi/DryIoc/blob/master/docs/DryIoc.Docs/RulesAndDefaultConventions.md\n- https://github.com/dadhi/DryIoc/blob/master/docs/DryIoc.Docs/ReuseAndScopes.md#disposable-transient\n- https://github.com/dadhi/DryIoc/blob/master/docs/DryIoc.Docs/ReuseAndScopes.md#weakly-referenced-reused-service\n",
                                           "updatedAt":  "2025-02-20T11:30:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ex4C0",
                                           "createdAt":  "2025-02-17T18:43:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "@dazinator as you say yourself, in a general case it\u0027s just impossible to say whether the scope will be long-lived or short-lived. Even for an HTTP request, it could be, for example, an upgrade to a websocket connection which can stay up for a really long time. It feels like if we follow that logic, then all of the (automatically, internally created) scopes need to be considered indeterminate 🤔\nI\u0027m also not sure I see how an end-user could influence a scope creation that happens outside of the end-user code, e.g. within a 3rd party library, in a general case. So if you can\u0027t really specify the setting per scope \"kind\", and neither can you configure a specific instance... I think it defeats the whole idea. The only thing you can easily influence is a scope that you create manually with `IServiceScopeFactory`; but in such a case you already have all the lifetime control over this scope and all its contents.\n\nBTW, re: factories. I know I keep mentioning it, but it\u0027s one of the potential examples, and it\u0027s closer to my heart, so I\u0027ll bring it up again. If we consider `IHttpClientFactory` -- it already _is_ a factory, so you can say that the \"factory workaround\" was applied to it since the beginning, and HttpClients are _not_ parts of DI (by default). And yes, it\u0027s working like this, and it prevents the clients from leaking. But going forward, we actually _want_ them to become a part of DI. To enable Keyed services integrations and more. FWIW it\u0027s not the matter of just simplicity, but convenience that can go even beyond the immediate injection/creation.",
                                           "updatedAt":  "2025-02-17T18:43:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ezCIG",
                                           "createdAt":  "2025-02-17T22:39:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGpYEA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "pakrym",
                                                                               "createdAt":  "2025-02-17T22:40:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "u7pro",
                                                                               "createdAt":  "2025-02-17T23:00:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "I did some investigations, and it seems that the majority already supports opting out in one way or another:\n\n| Container       | Maintainer(s)                     | [Listed](https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection-guidelines#default-service-container-replacement) | Tracking disposable transients? | Disable tracking per service?                 | Additional Notes                                    | Links                                                                                   |\n|-----------------|-----------------------------------|-----|-----------------------|------------------------------------------|-----------------------------------------------------|-----------------------------------------------------------------------------------------|\n| [Autofac](https://github.com/autofac/Autofac)         | @tillig, @alexmg, @alistairjevans | ➕ | ☑️ Yes               | ✅ Yes, `ExternallyOwned()`                   |                                                     | https://github.com/dotnet/runtime/issues/36461#issuecomment-2659659726                                                                                        |\n| [DryIoc](https://github.com/dadhi/DryIoc)          | @dadhi                            | ➕ | ☑️ Yes (M.E.DI conforming); ⛔ Throws (native)          | ✅ Yes, `Setup.With(` `allowDisposableTransient: true,` `trackDisposableTransient: false)` |             | https://github.com/dotnet/runtime/issues/36461#issuecomment-2663376135, https://github.com/dotnet/runtime/issues/36461#issuecomment-2671239213                                                                                        |\n| [Grace](https://github.com/ipjohnson/Grace/)*          | @ipjohnson                        | ➕ | ⛓️‍💥 No           | ✅ Yes, `ExternallyOwned`                     | `TrackDisposableTransients` enables per container; _(*) Deprecation notice posted_ |                                           |\n| [LightInject](https://github.com/seesharper/LightInject)     | @seesharper                       | ➕ | ☑️ Yes               | ✅ Yes, via custom lifetime                     | Possible to override with a custom lifetime         | [Custom Lifetime](https://github.com/seesharper/LightInject?tab=readme-ov-file#custom-lifetime) |\n| [Lamar](https://github.com/JasperFx/lamar)           | @jeremydmiller                    | ➕ | ☑️ Yes               | ❌ No                                       | No override available            | [Disposing Transients](https://jasperfx.github.io/lamar/guide/ioc/disposing.html#transients)            |\n| [Stashbox](https://github.com/z4kn4fein/stashbox)        | @z4kn4fein                        | ➕ | ⛓️‍💥 No           | ✅ Yes, `WithoutDisposalTracking()`           |                                                     | [Tracking Disposable Transients](https://z4kn4fein.github.io/stashbox/docs/configuration/container-configuration#tracking-disposable-transients) |\n| [Simple Injector](https://github.com/simpleinjector/SimpleInjector) | @dotnetjunkie                     | ➕ | ⛓️‍💥 No           | N/A                                      | Does not track disposable transients [at all](https://docs.simpleinjector.org/en/latest/disposabletransientcomponent.html)         | [Transient Lifestyle](https://docs.simpleinjector.org/en/latest/lifetimes.html#transient-lifestyle)     |\n| [Jab](https://github.com/pakrym/jab)*              | @pakrym                           |   | ☑️ Yes               | ❌ No                                       | Doesn\u0027t use `ServiceDescriptor`s and `IServiceCollection`; _(*) Not officially released yet_              |                                                |\n| [Unity](https://github.com/unitycontainer)*          | @ENikS                            |   | ☑️ Yes               | ✅ Yes, `ExternallyControlledLifetimeManager` | _(*) Currently not maintained_                  |                                            |",
                                           "updatedAt":  "2025-02-20T16:25:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ezi7Y",
                                           "createdAt":  "2025-02-18T00:58:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGuBRQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2025-02-18T01:46:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CarnaViire",
                                                                               "createdAt":  "2025-02-18T11:43:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ipjohnson",
                                           "body":  "I\u0027m in favor of the `ExternallyOwned` flag. It address the issue, it has generally broad support out of the box and it doesn\u0027t introduce a more complex idea like using WeakReference to manage the lifecycle. ",
                                           "updatedAt":  "2025-02-18T00:58:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fD2bI",
                                           "createdAt":  "2025-02-19T13:00:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEHA7gQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "CarnaViire",
                                                                               "createdAt":  "2025-02-20T10:58:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dazinator",
                                           "body":  "@CarnaViire \n\u003e  it could be, for example, an upgrade to a websocket connection which can stay up for a really long time. It feels like if we follow that logic, then all of the (automatically, internally created) scopes need to be considered indeterminate\n\nYes I think you are right. Setting a per scope level option is not the right idea.. unless the scope was bounded by an explicit max lifetime, without that, who knows how long it could live for.  By default in asp.net core web requests, I don\u0027t think any timeout to a request exists by default. The client could disconnect but unless something is honouring the request cancellation token the request could go on being processed on the server indefinitely. Same with all other scope scenarios like background jobs etc.\n\nAlso its not really the duration of the scope that means there is a problem. You could have a long living scope and only inject your single disposable in it. Its more about whether you have process within that scope that can run-away resolving transient IDisposables adding to the tracker. So my idea wasn\u0027t even directly addressing the issue, it was just a vague form of trying to limit the chances of hitting an issue.\n\nThanks for responding and insight.\n\n",
                                           "updatedAt":  "2025-02-19T13:03:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fD51d",
                                           "createdAt":  "2025-02-19T13:05:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "With this in mind:\n\n\u003e You could have a long living scope and only inject your single disposable in it. Its more about whether you have process within that scope that can run-away resolving transient IDisposables adding to the tracker\n\nCould there be some sort of max limit protection added to the disposable tracker itself? It could throw if the same transient IDisposable type instance was increasing in number in the tracker and hit the cap... This could then be an option with a default setting like `MaxDisposableTransientInstanceLimitForTracker`  = 100",
                                           "updatedAt":  "2025-02-19T13:09:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fD_mY",
                                           "createdAt":  "2025-02-19T13:15:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "\u003e I\u0027m in favor of the ExternallyOwned flag. It address the issue, it has generally broad support out of the box and it doesn\u0027t introduce a more complex idea like using WeakReference to manage the lifecycle.\n\n@ipjohnson \n\nThe only bit missing in my view is it doesn\u0027t do much to help protect developers from the problem in the first place. Developer journey would be like:-\n- Developer registers a transient disposable with no warning from the compiler - and knowing that DI tracks disposabled for them - great\n- Developer tests functionality locally - no issue\n- Functionality may pass through testing to onwards environments\n- Eventually something happens where someone spots a memory leak (depending on the level and robustness of your onwards processes, this could be in production)\n- Developer picks up a bug and finds this issue\n- Developer makes use of the `externallyOwned` flag for that problematic registration.\n\ne.g a memory leak has to potentially be diagnosed (which is non trivial), in order to trace the issue back to `externallyOwned` as a resolution path for a particular type registration.\n\nThat\u0027s where I was thinking something like this\n\n\u003e Could there be some sort of max limit protection added to the disposable tracker itself? It could throw if the same transient IDisposable type instance was increasing in number in the tracker and hit the cap... This could then be an option with a default setting like MaxDisposableTransientInstanceLimitForTracker = 100\n\nIn an attempt at early detection and resolution of the potential issue. Not sold on this idea either though, what would the default value be? Whats a typical number of the same transient disposable type you\u0027d expect to be injected in a single scope? :-)\n\n\n\n",
                                           "updatedAt":  "2025-02-19T13:22:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fN-At",
                                           "createdAt":  "2025-02-20T11:35:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEHDaDA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CarnaViire",
                                                                               "createdAt":  "2025-02-20T16:21:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dadhi",
                                           "body":  "@CarnaViire \nJust to clarify, DryIoc in the column of `Tracking disposable transients?` has \u0027⛔ Throws\u0027 which means this is default DryIoc **native behavior**. But it does the tracking in DryIoc.Microsoft.DependenyInjection conforming container by default. ",
                                           "updatedAt":  "2025-02-20T11:35:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fQ53H",
                                           "createdAt":  "2025-02-20T16:25:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "@dadhi thanks for the clarification! Updated the table",
                                           "updatedAt":  "2025-02-20T16:25:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oasw8",
                                           "createdAt":  "2025-04-23T21:48:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "\u003e DI council: @alexmg @tillig @pakrym @ENikS @ipjohnson @dadhi @seesharper @jeremydmiller @alistairjevans\n\nSo far it seems that the majority is in favor, and the per-service override also already exists in the majority of cases.\n\n@jeremydmiller Lamar is the only one that doesn\u0027t have an option to disable disposable tracking. Will you be able to share your thoughts on the feature please?\n\n@davidfowl Is there any \"official resolution\" that we must get before moving forward? 🙂\n\n-------\n\nA bit brushed up version of the proposal:\n\n### Proposed API\n\n#### 1. **Microsoft.Extensions.DependencyInjection._Abstractions_** package\n\n`ExternallyOwned` property + ctor overloads with a respective param\n\n```c#\nnamespace Microsoft.Extensions.DependencyInjection;\n\npublic class ServiceDescriptor\n{\n    public bool ExternallyOwned { get; } = false; // \u0027false\u0027 by default;\n                                                  // unless it\u0027s a singleton made from an externally\n                                                  // provided instance, in which case it should be\n                                                  // \u0027true\u0027 by definition\n\n    public ServiceDescriptor(\n        Type serviceType,\n        [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] Type implementationType,\n        ServiceLifetime lifetime,\n        bool externallyOwned) { }\n\n    public ServiceDescriptor(\n        Type serviceType,\n        object? serviceKey,\n        [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] Type implementationType,\n        ServiceLifetime lifetime,\n        bool externallyOwned) { }\n\n    public ServiceDescriptor(\n        Type serviceType,\n        Func\u003cIServiceProvider, object\u003e factory,\n        ServiceLifetime lifetime,\n        bool externallyOwned) { }\n\n    public ServiceDescriptor(\n        Type serviceType,\n        object? serviceKey,\n        Func\u003cIServiceProvider, object?, object\u003e factory,\n        ServiceLifetime lifetime,\n        bool externallyOwned) { }\n\n    // ...\n}\n```\n\n#### 2. **Microsoft.Extensions.DependencyInjection._Abstractions_** package\n\n\u003cdetails\u003e\n\u003csummary\u003e⏬ Transient\u003c\u003e convenience method overloads\u003c/summary\u003e\n\n```c#\nnamespace Microsoft.Extensions.DependencyInjection;\n\npublic class ServiceDescriptor\n{\n    public static ServiceDescriptor Transient\u003cTService, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] TImplementation\u003e(\n        bool externallyOwned)\n            where TService : class\n            where TImplementation : class, TService { }\n\n    public static ServiceDescriptor KeyedTransient\u003cTService, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] TImplementation\u003e(\n        object? serviceKey,\n        bool externallyOwned)\n            where TService : class\n            where TImplementation : class, TService { }\n\n    public static ServiceDescriptor Transient\u003cTService, TImplementation\u003e(\n        Func\u003cIServiceProvider, TImplementation\u003e implementationFactory,\n        bool externallyOwned)\n            where TService : class\n            where TImplementation : class, TService { }\n\n    public static ServiceDescriptor KeyedTransient\u003cTService, TImplementation\u003e(\n        object? serviceKey, Func\u003cIServiceProvider, TImplementation\u003e implementationFactory,\n        bool externallyOwned)\n            where TService : class\n            where TImplementation : class, TService { }\n\n    public static ServiceDescriptor Transient\u003cTService\u003e(\n        Func\u003cIServiceProvider, TService\u003e implementationFactory,\n        bool externallyOwned)\n            where TService : class { }\n\n    public static ServiceDescriptor KeyedTransient\u003cTService\u003e(\n        object? serviceKey, Func\u003cIServiceProvider, TService\u003e implementationFactory,\n        bool externallyOwned)\n            where TService : class { }\n\n    //...\n}\n```\n\n\u003c/details\u003e\n\n#### 3. **Microsoft.Extensions.DependencyInjection** package\n\n\u003cdetails\u003e\n\u003csummary\u003e⏬ DisposableTransientStrategy property + enum\u003c/summary\u003e\n\n```c#\nnamespace Microsoft.Extensions.DependencyInjection;\n\npublic class ServiceProviderOptions\n{\n    public DisposableServiceStrategy DisposableTransientStrategy { get; set; } =\n        DisposableServiceStrategy.AllowAllTrackOwned;\n\n    // ...\n}\n\npublic enum DisposableServiceStrategy\n{\n    AllowAllTrackOwned = 0,\n    AllowAllTrackAll,\n    AllowAllTrackNone,\n    AllowExternallyOwned,\n    AllowNone\n}\n```\n\n\u003c/details\u003e\n\n### Usages:\n\n#### 1. `ServiceDescriptor` ctor overloads with `externallyOwned` param\n\n```c#\n\n// Keyed usage (HttpClientFactory example)\n\nvar namedHandler = new ServiceDescriptor(\n    typeof(HttpMessageHandler), Name, CreateNamedHandler, lifetime, externallyOwned: true); // owned by HttpClientFactory\n\nservices.Add(namedHandler);\n\n// Non-keyed usage\n\nservices.Add(\n    new ServiceDescriptor(\n        typeof(IService), typeof(DisposableService), ServiceLifetime.Transient, externallyOwned: true));\n```\n\n\u003cdetails\u003e\n\u003csummary\u003e⏬ 2. Transient\u003c\u003e convenience method overloads\u003c/summary\u003e\n\n```c#\n// Keyed usage (HttpClientFactory example)\n\nvar namedClient = ServiceDescriptor.KeyedTransient\u003cHttpClient\u003e(Name, CreateNamedClient, externallyOwned: true); // owned by HttpClientFactory\n\nservices.Add(namedClient);\n\n// Non-keyed usage\n\nservices.Add(ServiceDescriptor.Transient\u003cIService, OtherService\u003e(externallyOwned: true));\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003e⏬ 3. ExternallyOwned property + DisposableTransientStrategy\u003c/summary\u003e\n\n\u0026nbsp;\n3.1. Checks on CaptureDisposable:\n\n```c#\nbool TryCaptureDisposable(ServiceDescriptor sd, object resolved)\n{\n    if (resolved is not IDisposable and not IAsyncDisposable)\n    {\n        return false;\n    }\n\n    if (sd.Lifetime != ServiceLifetime.Transient)\n    {\n        return false;\n    }\n\n    bool shouldCapture = Options.DisposableTransientStrategy switch\n    {\n        DisposableServiceStrategy.AllowAllTrackOwned                           =\u003e !sd.ExternallyOwned,\n        DisposableServiceStrategy.AllowAllTrackAll                             =\u003e true,\n        DisposableServiceStrategy.AllowAllTrackNone                            =\u003e false,\n        DisposableServiceStrategy.AllowExternallyOwned when sd.ExternallyOwned =\u003e false,\n        _ =\u003e throw new InvalidOperationException(\"Disposable Transients are not allowed\")\n    };\n\n    if (shouldCapture)\n    {\n        CaptureDisposable(resolved);\n    }\n    return shouldCapture;\n}\n```\n\n3.2. Disposable Transient validations:\n\n```c#\nvoid ValidateDescriptor(ServiceDescriptor sd)\n{\n    if (descriptor.Lifetime == ServiceLifetime.Transient \u0026\u0026 IsDisposableService(sd))\n    {\n        if (Options.DisposableTransientStrategy == DisposableServiceStrategy.AllowNone\n            || (Options.DisposableTransientStrategy == DisposableServiceStrategy.AllowExternallyOwned \u0026\u0026 !sd.ExternallyOwned))\n        {\n            throw new InvalidOperationException(\"Disposable Transients are not allowed\");\n        }\n    }\n}\n```\n\n\u003c/details\u003e\n\n-------\n\n_UPD on 02.06.2025: moved everything under cut except for the minimal required API_",
                                           "updatedAt":  "2025-06-02T20:22:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pMi__",
                                           "createdAt":  "2025-04-29T12:30:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "@jeremydmiller, @davidfowl \n/cc @halter73, @steveharter, @stephentoub \n\nJust following up on my previous comment from last week:\n\n\u003e So far it seems that the majority is in favor, and the per-service override also already exists in the majority of cases.\n\u003e\n\u003e @jeremydmiller Lamar is the only one that doesn\u0027t have an option to disable disposable tracking. Will you be able to share your thoughts on the feature please?\n\u003e\n\u003e @davidfowl Is there any \"official resolution\" that we must get before moving forward? 🙂\n\nThis feature is quite relevant for our upcoming release. The part of the [API review resolution](https://github.com/dotnet/runtime/issues/89755#issuecomment-2231477356) for #89755 (HttpClientFactory support for keyed DI) was: _\"The default behavior won\u0027t change for .NET 9, the expectation is that .NET 10 will change the default add it keyed lifetime by default\"._ We need this feature to support the change.\n\nI\u0027d love to hear your thoughts. Thanks! 😊",
                                           "updatedAt":  "2025-04-29T12:30:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60xSjx",
                                           "createdAt":  "2025-07-03T16:07:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "@CarnaViire I would suggest opening a new issue with just the proposal, it\u0027ll be easier for the people you\u0027re tagging to know what to reply to. Nevertheless I would also really like this feature to exist sooner rather than later, it\u0027s a real issue.",
                                           "updatedAt":  "2025-07-03T16:07:40Z"
                                       }
                                   ],
                         "totalCount":  37
                     },
        "title":  "transient service is better not be captured by root serviceScope",
        "labels":  [
                       "api-suggestion",
                       "feature-request",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36458",
        "createdAt":  "2019-08-29T18:09:06Z",
        "number":  36458,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCq5jQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dlyz",
                                            "createdAt":  "2022-02-11T10:31:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eduard-bystrov",
                                            "createdAt":  "2022-02-11T10:38:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EnCey",
                                            "createdAt":  "2022-05-23T11:31:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AinoraZ",
                                            "createdAt":  "2023-03-21T08:39:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lawrence-laz",
                                            "createdAt":  "2023-05-08T10:33:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "igorquintaes",
                                            "createdAt":  "2023-09-10T19:22:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hmoratopcs",
                                            "createdAt":  "2024-07-25T08:35:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wvpm",
                                            "createdAt":  "2024-08-05T12:15:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2025-02-06T14:39:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "johnpedersen-adtech",
                                            "createdAt":  "2025-05-20T02:55:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0x0309",
                                            "createdAt":  "2025-05-22T05:11:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "johnpedersen-freightways",
                                            "createdAt":  "2025-05-22T05:12:13Z"
                                        }
                                    ],
                          "totalCount":  12
                      },
        "updatedAt":  "2025-08-07T22:03:59Z",
        "body":  "In 3.0 we rewrote the code generation logic in the DI container to make it resillent to stack overflows for deep object graphs. As a result of this change, what would previously result in a stackoverflow exception for lazily resolved circular references now results in ~~an infinite recursion. We\u0027re missing a number of stacks maximum.~~ a deadlock.\r\n\r\n```C#\r\nusing System;\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace WebApplication315\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            var services = new ServiceCollection();\r\n            services.AddSingleton\u003cFoo\u003e();\r\n            var serviceProvider = services.BuildServiceProvider();\r\n            var foo = serviceProvider.GetService\u003cFoo\u003e();\r\n        }\r\n    }\r\n\r\n    public class Foo\r\n    {\r\n        public Foo(IServiceProvider serviceProvider)\r\n        {\r\n            serviceProvider.GetService\u003cFoo\u003e();\r\n        }\r\n    }\r\n}\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvLS4XA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNjMxNTI2Ng==",
                                           "createdAt":  "2019-08-29T18:52:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "![image](https://user-images.githubusercontent.com/95136/63967972-678e8300-ca53-11e9-915e-8148ef87fdef.png)\r\n",
                                           "updatedAt":  "2019-08-29T18:52:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNjQ1MzM3OA==",
                                           "createdAt":  "2019-08-30T04:44:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I think we should remove the stack guard.",
                                           "updatedAt":  "2019-08-30T04:44:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NjMwNjk0OA==",
                                           "createdAt":  "2020-03-09T02:46:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MrSmoke",
                                           "body":  "Is there a current workaround for this (aside from removing the circular references)?",
                                           "updatedAt":  "2020-03-09T02:46:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NjMxNjMwNg==",
                                           "createdAt":  "2020-03-09T03:36:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "No there’s no workaround.",
                                           "updatedAt":  "2020-03-09T03:36:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU1NjkxNA==",
                                           "createdAt":  "2020-05-08T00:02:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "As part of the migration of components from dotnet/extensions to dotnet/runtime (https://github.com/aspnet/Announcements/issues/411) we will be bulk closing some of the older issues. If you are still interested in having this issue addressed, just comment and the issue will be automatically reactivated (even if you aren\u0027t the author). When you do that, I\u0027ll page the team to come take a look. If you\u0027ve moved on or workaround the issue and no longer need this change, just ignore this and the issue will be closed in **7 days**.\n\nIf you know that the issue affects a package that has moved to a different repo, please consider re-opening the issue in that repo. If you\u0027re unsure, that\u0027s OK, someone from the team can help!",
                                           "updatedAt":  "2020-05-08T00:02:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODUzNTgyNQ==",
                                           "createdAt":  "2020-05-14T10:11:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC4jP0A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HalidCisse",
                                                                               "createdAt":  "2023-03-25T19:47:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tim-fernico",
                                           "body":  "I have just come across this issue so it still needs looking at.",
                                           "updatedAt":  "2020-05-14T10:11:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODUzNTg0MQ==",
                                           "createdAt":  "2020-05-14T10:11:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Paging @dotnet/extensions-migration ! This issue has been revived from staleness. Please take a look and route to the appropriate repository.",
                                           "updatedAt":  "2020-05-14T10:11:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODc1MzE3MQ==",
                                           "createdAt":  "2020-05-14T16:40:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Could be similar to https://github.com/dotnet/runtime/issues/35986",
                                           "updatedAt":  "2020-05-14T16:40:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4MDI1OTYwNA==",
                                           "createdAt":  "2021-07-14T22:49:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@maryamariyan - was this fixed with your deadlock work in 6.0? Moving to 7.0, in case it wasn\u0027t. But please close if this is fixed in the latest.",
                                           "updatedAt":  "2021-07-14T22:49:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4MDI2MjkyOA==",
                                           "createdAt":  "2021-07-14T22:57:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODsueqQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2021-07-14T23:11:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HalidCisse",
                                                                               "createdAt":  "2023-03-25T19:47:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wvpm",
                                                                               "createdAt":  "2024-08-04T08:27:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "No this isn\u0027t fixed.",
                                           "updatedAt":  "2021-07-14T22:57:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42VDpO",
                                           "createdAt":  "2021-09-02T10:07:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "springy76",
                                           "body":  "I\u0027m on net5 using M.E.DI 6.0.0-preview7 and exactly got that deadlock on StackGuard\u003eWaitOne yesterday :-|",
                                           "updatedAt":  "2021-09-02T10:07:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DoA-I",
                                           "createdAt":  "2022-05-23T11:37:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7RcOg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "lawrence-laz",
                                                                               "createdAt":  "2023-05-08T10:33:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EnCey",
                                           "body":  "I believe I also just fell in this hole, on net6.0. Took quite some digging around to figure out that a circular reference was the culprit, I was certain we\u0027d get an exception from the DI container if that happened and didn\u0027t even look at that when I started my investigation 🙈 ",
                                           "updatedAt":  "2022-05-23T11:37:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ougs-",
                                           "createdAt":  "2022-11-19T06:25:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "The fix here is easy but adds overhead. We should prototype something. If anybody wants to look at this, we do a cycle check when building up the callsite, this only detects cycles in constructor visible dependencies at startup. This doesn\u0027t work for runtime resolved dependencies as the [`CallSiteRuntimeResolver`](https://github.com/dotnet/runtime/blob/911cc41358aa3a99c24fa85dca426fafa3bef555/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceLookup/CallSiteRuntimeResolver.cs) doesn\u0027t detect cycles.",
                                           "updatedAt":  "2022-11-19T14:51:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5brlp-",
                                           "createdAt":  "2023-05-08T10:38:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENwbmg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nth-commit",
                                                                               "createdAt":  "2025-04-10T20:09:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lawrence-laz",
                                           "body":  "Is there a work around to detect this during run time? \r\nWe are working on a big code base that is slowly moving to dependency containers and I can already see this coming back to bite us many times...",
                                           "updatedAt":  "2023-05-08T10:38:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HJjGa",
                                           "createdAt":  "2024-08-04T08:26:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wvpm",
                                           "body":  "Moved from #105900 \r\n\r\n### Possible solution\r\n~~I think the loop is caused by [the lock inside the CallSiteFactory](https://github.com/dotnet/runtime/blob/f120fff4838fbae622123c6578734275d909a3f2/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceLookup/CallSiteFactory.cs#L197). I might be wrong, but it\u0027s a good place to look for the bug.~~\r\n\r\nEdit: seeing this issue has been open for years, I doubt the solution is simple. This interests me. :)\r\nI\u0027ll download the repo and see what I can find and fix.\r\n\r\nEdit2: tried that fix but it doesn\u0027t work. Btw it took me 3 hours just to set up the project and pass the tests.",
                                           "updatedAt":  "2024-08-04T12:34:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HKC6F",
                                           "createdAt":  "2024-08-04T14:10:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wvpm",
                                           "body":  "@davidfowl \r\nI fixed it in https://github.com/wvpm/runtime/commit/f47317a6bd67ca9f7dedda944bf9f0fad1dd821d + https://github.com/wvpm/runtime/commit/8081e734abb6e5b20e8401b8a514171511340c30.\r\nAll tests read green on my machine, including the scenario I added in #105900 .\r\n\r\nEdit: there was a false circle detection when resolving the same type with different keys. The 2nd commit fixes that by using ServiceIdentifier instead of Type.",
                                           "updatedAt":  "2024-08-05T10:24:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HMQNP",
                                           "createdAt":  "2024-08-05T04:12:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Is there any reason you didn\u0027t do the check in the CallSiteRuntimeResolver?",
                                           "updatedAt":  "2024-08-05T04:12:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HNLb0",
                                           "createdAt":  "2024-08-05T07:35:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wvpm",
                                           "body":  "\u003e Is there any reason you didn\u0027t do the check in the CallSiteRuntimeResolver?\r\n\r\nI tried that initially but it doesn\u0027t work.\r\nYou could either store the state in the `CallSiteRuntimeResolver` or pass it through the functions.\r\nStoring it in the `CallSiteRuntimeResolver` caused deadlocks anyway, I think it\u0027s due to the static Instance.\r\nPassing it through the functions doesn\u0027t work either because the `Resolve` method gets called halfway through, creating new state.\r\n\r\nStoring the state in the `ServiceProviderEngineScope ` works perfect.\r\nI should note that I deleted the remote execution tests as I couldn\u0027t get them to run and thus haven\u0027t tested them.",
                                           "updatedAt":  "2024-08-05T07:35:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ha1zk",
                                           "createdAt":  "2024-08-06T19:07:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Wouldn\u0027t it be state on the RuntimeResolverContext? ",
                                           "updatedAt":  "2024-08-06T19:07:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HbeMn",
                                           "createdAt":  "2024-08-06T20:49:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wvpm",
                                           "body":  "\u003e Wouldn\u0027t it be state on the RuntimeResolverContext?\r\n\r\n@davidfowl \r\nNo, because a new context is created for every call to `CallSiteRuntimeResolver.Resolve(ServiceCallSite callSite, ServiceProviderEngineScope scope)`. Only the `ServiceProviderEngineScope` is passed throughout the process. That\u0027s why I added the state there.",
                                           "updatedAt":  "2024-08-06T20:49:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KsH6i",
                                           "createdAt":  "2024-09-03T15:29:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVLFuw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nth-commit",
                                                                               "createdAt":  "2025-04-10T20:10:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wilkmaia",
                                                                               "createdAt":  "2025-06-03T19:16:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "wvpm",
                                           "body":  "How should we proceed with implementing the fix?",
                                           "updatedAt":  "2024-09-03T15:29:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68tLhc",
                                           "createdAt":  "2025-08-07T22:02:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wvpm",
                                           "body":  "@davidfowl is there anything more I can do to fix this?\n\nThe solutions provided in https://github.com/wvpm/runtime/commit/f47317a6bd67ca9f7dedda944bf9f0fad1dd821d + https://github.com/wvpm/runtime/commit/8081e734abb6e5b20e8401b8a514171511340c30 should suffice.\nIf those changes aren\u0027t sufficient, please let me know and I can have a look at it again.\nIf it\u0027s merely a question of planning internally, consider dropping the \"help wanted\" tag.",
                                           "updatedAt":  "2025-08-07T22:03:59Z"
                                       }
                                   ],
                         "totalCount":  22
                     },
        "title":  "Circular reference results in deadlock",
        "labels":  [
                       "bug",
                       "help wanted",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36021",
        "createdAt":  "2019-11-13T06:07:21Z",
        "number":  36021,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODOPKNg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rcollina",
                                            "createdAt":  "2019-11-13T21:51:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dadhi",
                                            "createdAt":  "2019-11-14T08:14:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "woutersmit",
                                            "createdAt":  "2019-11-19T06:52:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "loic-sharma",
                                            "createdAt":  "2020-01-21T00:59:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ViIvanov",
                                            "createdAt":  "2020-05-19T20:59:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NilFusion",
                                            "createdAt":  "2020-11-27T21:18:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TechnoBerry",
                                            "createdAt":  "2020-12-02T22:52:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ulrichb",
                                            "createdAt":  "2021-02-10T11:46:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CleytonGoncalves",
                                            "createdAt":  "2021-03-29T14:50:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tiberriver256",
                                            "createdAt":  "2021-04-08T03:12:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jackalvrus",
                                            "createdAt":  "2021-05-11T16:04:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vit-svoboda",
                                            "createdAt":  "2021-06-02T18:48:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vspectre",
                                            "createdAt":  "2021-07-21T13:26:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "allantargino",
                                            "createdAt":  "2021-08-12T16:59:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FrankVonDerHoeh",
                                            "createdAt":  "2022-01-20T10:58:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SteveDunn",
                                            "createdAt":  "2022-02-16T06:40:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2022-06-17T04:43:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexeyshockov",
                                            "createdAt":  "2022-06-29T06:12:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Kiril1512",
                                            "createdAt":  "2022-07-06T11:19:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ajbeaven",
                                            "createdAt":  "2022-08-03T23:07:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mariusz96",
                                            "createdAt":  "2022-08-27T20:36:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "manne",
                                            "createdAt":  "2023-02-14T10:02:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hwoodiwiss",
                                            "createdAt":  "2023-02-27T22:50:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bjornen77",
                                            "createdAt":  "2023-06-23T08:55:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MaxLevs",
                                            "createdAt":  "2023-09-27T16:22:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexanderwieland",
                                            "createdAt":  "2023-12-11T12:32:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marinasundstrom",
                                            "createdAt":  "2023-12-20T16:02:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2024-03-09T08:37:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Shak-o",
                                            "createdAt":  "2024-03-14T05:53:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gioalhaz",
                                            "createdAt":  "2024-03-14T06:36:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "levanoz",
                                            "createdAt":  "2024-03-14T09:05:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "keir-nellyer",
                                            "createdAt":  "2024-06-19T12:11:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "itsmecurtis",
                                            "createdAt":  "2024-08-19T15:53:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yan-oreshchenkov",
                                            "createdAt":  "2024-08-22T16:45:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-11-20T14:50:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ZarehD",
                                            "createdAt":  "2024-11-20T21:08:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alkampfergit",
                                            "createdAt":  "2025-01-28T18:09:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aemarco",
                                            "createdAt":  "2025-04-06T15:27:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alienwareone",
                                            "createdAt":  "2025-05-23T15:36:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kzu",
                                            "createdAt":  "2025-06-17T03:52:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "leotsarev",
                                            "createdAt":  "2025-07-06T18:06:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NilsLattek",
                                            "createdAt":  "2025-08-10T17:48:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jamers99",
                                            "createdAt":  "2025-09-03T19:50:30Z"
                                        }
                                    ],
                          "totalCount":  43
                      },
        "updatedAt":  "2024-11-20T15:23:29Z",
        "body":  "[AB#1244416](https://devdiv.visualstudio.com/10e66e43-9645-4201-b128-0fdc3769cc17/_workitems/edit/1244416)\r\nCurrently Scrutor has these:\r\n\r\nhttps://github.com/khellang/Scrutor/blob/338a59333c7eafe25d5aefdd22434653c83eb9ab/src/Scrutor/ServiceCollectionExtensions.Decoration.cs#L10\r\n\r\nI think we should consider adding something similar in the box for a couple of reasons: \r\n\r\n- It helps when default implementations are internal or non virtual. \r\n- It promotes composition over inheritance\r\n\r\nThis needs to be built in a way that doesn\u0027t require container authors to change anything (that\u0027s why extension methods are being proposed).\r\n\r\ncc @khellang Since he may want to contribute this 😉. \r\n\r\nSome things I am concerned about in the above implementation:\r\n- Performance of those methods, some of them allocate (https://github.com/khellang/Scrutor/blob/338a59333c7eafe25d5aefdd22434653c83eb9ab/src/Scrutor/ServiceCollectionExtensions.Decoration.cs#L249)\r\n- Performance of Scanning the IServiceCollection, multiple times (https://github.com/khellang/Scrutor/blob/338a59333c7eafe25d5aefdd22434653c83eb9ab/src/Scrutor/ServiceCollectionExtensions.Decoration.cs#L294)\r\n- Performance of service resolution https://github.com/khellang/Scrutor/blob/338a59333c7eafe25d5aefdd22434653c83eb9ab/src/Scrutor/ServiceCollectionExtensions.Decoration.cs#L333-L356,  `ActivatorUtilities.GetServiceOrCreateInstance` should be swapped with `CreateFactory`.\r\n- The quirks around the fact that this mutates the service collection in place (https://github.com/khellang/Scrutor/blob/338a59333c7eafe25d5aefdd22434653c83eb9ab/src/Scrutor/ServiceCollectionExtensions.Decoration.cs#L296). It affects code like this:\r\n    Works\r\n    ```C#\r\n    services.AddSingleton\u003cIFoo, Foo\u003e();\r\n    services.Decorate\u003cIFoo, Foo2\u003e();\r\n    ```\r\n    Does not work\r\n    ```C#\r\n    services.Decorate\u003cIFoo, Foo2\u003e();\r\n    services.AddSingleton\u003cIFoo, Foo\u003e();\r\n    ```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlFkz7g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MzMzNzI3NQ==",
                                           "createdAt":  "2019-11-13T10:20:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "khellang",
                                           "body":  "Yeah... The current implementation is a giant hack around the container\u0027s current limitations and there are some confusing aspects around the API, like \"what lifetime should the decorator have?\". I\u0027ve settled on copying the lifetime of the decoratee, but some people have argued that there are cases where this isn\u0027t the best solution.\r\n\r\nAgreed on all the perf concerns. I\u0027ve basically just kept things as simple as possible (code-wise) since it\u0027s mostly a one-time cost at startup and no one has complained (yet).\r\n\r\nMost of them should be pretty easy to fix, i.e. remove LINQ usage, but some things are just fundamentally hard to do on top of the current feature set. I\u0027d be really interested in hearing your take on the last bullet point, as an example.",
                                           "updatedAt":  "2019-11-13T10:20:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MzQ5NjA2OA==",
                                           "createdAt":  "2019-11-13T17:03:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e Yeah... The current implementation is a giant hack around the container\u0027s current limitations and there are some confusing aspects around the API, like \"what lifetime should the decorator have?\". I\u0027ve settled on copying the lifetime of the decoratee, but some people have argued that there are cases where this isn\u0027t the best solution.\r\n\r\nI think people are wrong there, the most correct thing is to preserve the lifetime.\r\n\r\n\u003e Agreed on all the perf concerns. I\u0027ve basically just kept things as simple as possible (code-wise) since it\u0027s mostly a one-time cost at startup and no one has complained (yet).\r\n\r\nPeople wouldn\u0027t complain but I would 😄. More seriously, we\u0027re been taking a look at how much time we spend re-enumerating the IServiceCollection at startup and it\u0027s kinda crazy.\r\n\r\n\u003e Most of them should be pretty easy to fix, i.e. remove LINQ usage, but some things are just fundamentally hard to do on top of the current feature set. \r\n\r\nAgreed but I think doing this without it being a container native feature is appealing.\r\n\r\n\u003e I\u0027d be really interested in hearing your take on the last bullet point, as an example.\r\n\r\nI think that limitation is fine. The alternatives I can think of have to do with storing that list of decorators in a side object and writing a custom IServiceProviderFactory that unwraps them but that seems like overkill.",
                                           "updatedAt":  "2019-11-13T17:03:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MzQ5ODYzNg==",
                                           "createdAt":  "2019-11-13T17:09:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "cc @aspnet/di-council ",
                                           "updatedAt":  "2019-11-14T07:09:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1Mzk2Mjk2OA==",
                                           "createdAt":  "2019-11-14T16:20:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7z6Nw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "haavamoa",
                                                                               "createdAt":  "2019-11-14T16:27:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Yazurka",
                                                                               "createdAt":  "2019-11-18T13:08:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CleytonGoncalves",
                                                                               "createdAt":  "2021-03-29T15:01:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Tiberriver256",
                                                                               "createdAt":  "2021-04-08T03:15:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2022-06-17T13:24:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AgentFire",
                                                                               "createdAt":  "2022-11-30T09:59:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2024-03-09T08:38:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AmrAlSayed0",
                                                                               "createdAt":  "2024-04-02T07:27:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikhail-khalizev",
                                                                               "createdAt":  "2024-04-10T05:59:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "skabariya",
                                                                               "createdAt":  "2024-04-10T13:20:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ZarehD",
                                                                               "createdAt":  "2024-11-20T21:13:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  11
                                                         },
                                           "author":  "seesharper",
                                           "body":  "@aspnet/di-council\r\nBetter decorator support would be great to have and this is something that has been supported in LightInject since the beginning. \r\n\r\nTo get the discussion going I\u0027ll give you a brief explanation of how this is implemented in LightInject.\r\n\r\n### Decorator characteristics\r\n\r\n* Decorators MUST implement the same interface as the service being decorated. \r\n* Decorators MUST inject the service being decorated.\r\n* Decorators can OPTIONALLY inject other services.\r\n* Decorators ALWAYS follow the same lifetime/lifecycle as the decorated service (decoratee).\r\n* Decorators are ALWAYS applied in their registration order.\r\n\r\nExample \r\n\r\n```c#\r\npublic class FooDecorator : IFoo\r\n{\r\n    public FooDecorator(IFoo decoratee, IBar bar)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### Registration\r\n\r\nLet\u0027s take a look at the following registrations. \r\n\r\n```c#\r\ncontainer.RegisterScoped\u003cIFoo, Foo\u003e();\r\ncontainer.Decorate\u003cIFoo, FooDecorator\u003e();\r\ncontainer.Decorate\u003cIFoo, AnotherFooDecorator\u003e();\r\n```\r\n\r\nThe decorators are applied in the registration order meaning that the decorator chain here will be\r\n\r\n```\r\nAnotherFooDecorator -\u003e FooDecorator -\u003e Foo\r\n```\r\n\r\nPlease note that service registration is completely decoupled from the decorators meaning that the following will also work.\r\n\r\n```c#\r\ncontainer.Decorate\u003cIFoo, FooDecorator\u003e();\r\ncontainer.Decorate\u003cIFoo, AnotherFooDecorator\u003e();\r\ncontainer.RegisterScoped\u003cIFoo, Foo\u003e();\r\n```\r\n\r\n### Lifetime\r\n\r\nDecorators follow the same lifetime as the service being decorated which is a very important aspect of decorators. Allowing a decorator to have a different lifetime/lifecycle than the service being decorated could lead to some serious confusion among users. If we think of decorators as being the manifestation of the Open/Closed principle, we want to be able to add new functionality/aspect without altering the behavor of the service being decorated. \r\n\r\nIf in any case we should require different lifetimes, and mind that these cases should be extremely rare, we can always do \"manual\" decoration in the factory delegate used during registration. So my advice here is to keep it simple and let decorators follow the lifetime of the decorated service. \r\n\r\n### Summary\r\n\r\nThis covers the very basics of decorator support in LightInject and I have intentionally not gone into more advanced scenarios like decorating open generic types which is where things really starts to get complicated from an implementation standpoint. I would also advice against such advanced features as it would make it substantially harder to confirm to the MS.DI abstraction \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n",
                                           "updatedAt":  "2019-11-14T16:23:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1Mzk3NjUyOQ==",
                                           "createdAt":  "2019-11-14T16:50:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA1EPVA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "seesharper",
                                                                               "createdAt":  "2019-11-14T16:53:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@seesharper See the code I linked to (@khellang\u0027s code) which implements decorators on top of the `IServiceCollection` primitives. I\u0027m entertaining this approach because it doesn\u0027t require any changes to the spec or other containers. It\u0027s built on top but comes with some limitations. ",
                                           "updatedAt":  "2019-11-14T16:50:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDAwMTc1NQ==",
                                           "createdAt":  "2019-11-14T17:50:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA1FpOw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2019-11-14T20:57:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dadhi",
                                           "body":  "@davidfowl ,\r\n\r\nIf the Decorators implemented externally as extensions, does it mean that DI adapters treat them as normal services and register as usual?\r\nAs a result we are getting two types of decorators - black boxes in the ServiceCollection and the native ones in IoC libraries.\r\n\r\nIt may cause a confusion:\r\n\r\n- Both Decorartor kinds will have a different feature set.\r\n- Registration intent is erased in case of SC.\r\n- Resolution Error messages may be confusing with the mixed stack of things.\r\n\r\n\r\n",
                                           "updatedAt":  "2019-11-14T17:50:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDA1MjQyMw==",
                                           "createdAt":  "2019-11-14T19:53:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ENikS",
                                           "body":  "Could you provide a link to the relevant documentation? This term is rather ambiguous and would be nice to know exactly what is being discussed.\r\n\r\nIs this akin to interception?",
                                           "updatedAt":  "2019-11-14T19:55:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDA3NTg5Mg==",
                                           "createdAt":  "2019-11-14T20:56:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "khellang",
                                           "body":  "https://en.m.wikipedia.org/wiki/Decorator_pattern",
                                           "updatedAt":  "2019-11-14T20:56:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDA3ODkxOA==",
                                           "createdAt":  "2019-11-14T21:05:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ENikS",
                                           "body":  "So, essentially decorators are what Unity and Castle call interception, or are these separate services?\r\n\r\nIn other words, if I resolve IFoo, will container return three services with two of them being decorators, or it will return one latest decorator with others and original service chained down the line? ",
                                           "updatedAt":  "2019-11-14T21:05:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDA4MzIyNQ==",
                                           "createdAt":  "2019-11-14T21:15:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "khellang",
                                           "body":  "\u003e So, essentially decorators are what Unity and Castle call interception, or are these separate services?\r\n\r\nI\u0027m not super familiar with it, but I always thought interception was some sort of AOP thing where proxies were generated to intercept calls to resolved instances. I guess you could look at it as interception, but with way less magic.\r\n\r\n\u003e In other words, if I resolve IFoo, will container return three services with two of them being decorators, or it will return one latest decorator with others and original service chained down the line?\r\n\r\nThe latter. You\u0027ll get a chain of wrapped interceptors.",
                                           "updatedAt":  "2019-11-14T21:15:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDA4NjY2NQ==",
                                           "createdAt":  "2019-11-14T21:25:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ENikS",
                                           "body":  "Well, if this is the later than it would be rather challenging to implement for multiple, chained decorators. Not impossible, but very challenging. At present Unity does not implement multilevel interception.\r\n\r\nI like the idea though",
                                           "updatedAt":  "2019-11-14T21:25:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDA4OTA2Mg==",
                                           "createdAt":  "2019-11-14T21:31:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ENikS",
                                           "body":  "@dadhi \r\n\r\n\u003e If the Decorators implemented externally as extensions, does it mean that DI adapters treat them as normal services and register as usual?\r\n\r\nI do not think you could register decorators as normal services. The adapter has to recognize these registrations are decorators and create relevant internal registrations (configure interception in case of Unity). The entry in a collection should unambiguously identify it as a decorator.",
                                           "updatedAt":  "2019-11-14T21:36:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDA5NDk2OQ==",
                                           "createdAt":  "2019-11-14T21:46:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "khellang",
                                           "body":  "\u003e I do not think you could register decorators as normal services.\r\n\r\nThe OP shows an implementation of this on top of the existing abstractions as extensions. ",
                                           "updatedAt":  "2019-11-14T21:46:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDA5ODAyOQ==",
                                           "createdAt":  "2019-11-14T21:54:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ENikS",
                                           "body":  "@khellang \r\n\r\nI was talking about implementing decoration in the container itself. Done at the container level it would eliminate all these scans and speed things up a bit.",
                                           "updatedAt":  "2019-11-14T21:55:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDEwNTM0NA==",
                                           "createdAt":  "2019-11-14T22:15:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7z-eQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ENikS",
                                                                               "createdAt":  "2019-11-14T22:35:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "woutersmit",
                                                                               "createdAt":  "2019-11-19T06:53:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ZarehD",
                                                                               "createdAt":  "2024-11-20T21:24:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "seesharper",
                                           "body":  "\u003e Is this akin to interception?\r\n\r\nYou could say that decorators are a way of implementing AOP (Aspect Oriented Programming) where each decorator is responsible for an \"aspect\" such as logging, profiling ,caching, circuit breaking and other cross cutting concerns. The decorator pattern really starts to shine when dealing with reusable open generic types. As an example, a common way of implementing the command part of the CQRS pattern is to have an `ICommandHandler\u003cT\u003e` interface like this.\r\n\r\n```c#\r\npublic interface ICommandHandler\u003cin TCommand\u003e\r\n{              \r\n    Task HandleAsync(TCommand command, CancellationToken cancellationToken = default);\r\n}\r\n```\r\n\r\n```c#\r\npublic class SaveCustomerCommandHandler : ICommandHandler\u003cSaveCustomerCommand\u003e\r\n{\r\n    private readonly IDbConnection dbConnection;\r\n    \r\n    public SaveCustomerCommandHandler(IDbConnection dbConnection)\r\n    {\r\n        this.dbConnection = dbConnection;    \r\n    }\r\n\r\n    public async Task HandleAsync(SaveCustomerCommand command, CancellationToken cancellationToken = default(CancellationToken))\r\n    {\r\n        // Save the customer to the database\r\n    }\r\n}\r\n```\r\n\r\nNow let\u0027s imagine that we have many of these command handlers and we want to make sure that we execute them in the context of a transaction. We could start the transaction in each command handler or we could use the decorator pattern to wrap all command handlers in a transaction like this.\r\n\r\n```c#\r\npublic class TransactionalCommandHandler\u003cTCommand\u003e : ICommandHandler\u003cTCommand\u003e\r\n{\r\n    private readonly IDbConnection dbConnection;\r\n    private readonly ICommandHandler\u003cTCommand\u003e commandHandler;    \r\n\r\n    public TransactionalCommandHandler(IDbConnection dbConnection, ICommandHandler\u003cTCommand\u003e commandHandler)\r\n    {\r\n        this.dbConnection = dbConnection;\r\n        this.commandHandler = commandHandler;        \r\n    }\r\n\r\n    public async Task HandleAsync(TCommand command, CancellationToken cancellationToken)\r\n    {        \r\n        using (var transaction = dbConnection.BeginTransaction())\r\n        {\r\n            await commandHandler.HandleAsync(command, cancellationToken);\r\n            transaction.Commit();     \r\n        }\r\n    }\r\n}\r\n```\r\n\r\nTo decorate each command handler with the `TransactionalCommandHandler` all we need is this line (LightInject).\r\n\r\n```c#\r\ncontainer.Decorate(typeof(ICommandHandler\u003c\u003e), typeof(TransactionalCommandHandler\u003c\u003e))\r\n```\r\n\r\nAnd Viola, all command handlers are now executed in a transaction. We could do the same for logging, profiling and other cross cutting concerns.  @khellang You can decorate open generics in Scrutor as well?\r\n\r\nBut as mentioned, most people think of AOP as magic stuff involving generating proxies and implementing interceptors. I have a fair bit of experience with how much magic it takes since I\u0027ve written an interception library ([LightInject.Interception](https://github.com/seesharper/LightInject.Interception)). The difference is that the \"decorator\" is implemented at runtime (proxy) and the method calls are forwarded to the interceptor. The downside of this is that it is in many cases difficult to debug and to grasp for new developers. We will also take a performance hit since all method arguments are passed to the interceptor as `object` meaning there will be a lot of casting and boxing going on. \r\n\r\n \r\n\r\n",
                                           "updatedAt":  "2019-11-14T22:18:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDE5MDEzOQ==",
                                           "createdAt":  "2019-11-15T03:04:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dadhi",
                                           "body":  "The Decorators in DryIoc described here: https://github.com/dadhi/DryIoc/blob/master/docs/DryIoc.Docs/Decorators.md\r\n \r\nIn general the feature is similar to LightInject and combining with other library features may enable more things.\r\n\r\nThe __important__ point is that Decorator registrations  are distinguished from the \"normal\" Service registrations. This info is preserved by container and used to enable nesting, special diagnostics, control the caching, etc. \r\n\r\nFor the whole picture DryIoc has a 3rd kind of registrations - [Wrappers](https://github.com/dadhi/DryIoc/blob/master/docs/DryIoc.Docs/Wrappers.md), e.g. `Func`, `Lazy`, collections go here.",
                                           "updatedAt":  "2019-11-15T03:04:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDMzODgxNg==",
                                           "createdAt":  "2019-11-15T12:19:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ipjohnson",
                                           "body":  "So for external containers the decorator will be created by the external container and the decorated type (original registration) will be created using `ActivatorUtilities.GetServiceOrCreateInstance(provider, type);` not the external container? \r\n\r\nCan you chain together decorators? Does it support more advanced scenarios like where the decorator can have `Func\u003cT\u003e` as the constructor parameter instead of just `T`?",
                                           "updatedAt":  "2019-11-15T12:19:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDMzOTk4MA==",
                                           "createdAt":  "2019-11-15T12:23:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "khellang",
                                           "body":  "\u003e So for external containers the decorator will be created by the external container and the decorated type (original registration) will be created using `ActivatorUtilities.GetServiceOrCreateInstance(provider, type);` not the external container?\r\n\r\nCorrect. The decorated type (decoratee) won\u0027t be resolved from the external container, but all its dependencies will.\r\n\r\nThis is also problematic for disposal, since the decorated instance won\u0027t be tracked by the container for disposal 😞 ",
                                           "updatedAt":  "2019-11-15T12:23:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDQ0Nzg0Ng==",
                                           "createdAt":  "2019-11-15T17:15:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODag5KQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dadhi",
                                                                               "createdAt":  "2019-11-15T19:55:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ENikS",
                                                                               "createdAt":  "2019-11-15T23:56:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NilFusion",
                                                                               "createdAt":  "2020-11-27T22:04:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2024-03-14T06:32:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "tillig",
                                           "body":  "While I like the notion that it doesn\u0027t require any container authors to change anything, it also might be nice to allow containers that already implement decorators to do so natively. Similar to the way `ISupportRequiredService` allowed optional support for the `GetRequiredService` extension.\r\n\r\nI\u0027m also having a tough time working out mentally: What does it mean if some decorators are registered with these extension methods while others may be registered via the underlying container? For example:\r\n\r\n```c#\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n  services.AddSingleton\u003cIFoo, Foo\u003e();\r\n  services.Decorate\u003cIFoo, Foo2\u003e();\r\n}\r\n\r\npublic void ConfigureContainer(ContainerBuilder builder)\r\n{\r\n  builder.RegisterDecorator\u003cLoggingDecorator, IFoo\u003e();\r\n}\r\n```\r\n\r\nAt least in Autofac, there\u0027s a whole resolution context around decoration so folks can intercept when something is getting decorated and do some complex things. I\u0027m not clear how that would interact by some decoration being handled externally and some internally, like if there\u0027d be some weirdness around things getting double decorated or possibly decorated in the wrong order.\r\n\r\nI think if there was some way to map the `IServiceCollection` extensions to something native for those containers that support native decoration, it might be easier to address.",
                                           "updatedAt":  "2019-11-15T17:15:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDU3NDc2Nw==",
                                           "createdAt":  "2019-11-15T23:56:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ENikS",
                                           "body":  "\u003e Correct. The decorated type (decoratee) won\u0027t be resolved from the external container, but all its dependencies will.\r\n\r\nThis is a problem. My concerns are:\r\n- How to keep track of the dependency graphs? \r\n- Using containers configured outside of IServiceCollection\r\n- Recurrent references?",
                                           "updatedAt":  "2019-11-15T23:56:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDYyODg3OQ==",
                                           "createdAt":  "2019-11-16T11:34:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "khellang",
                                           "body":  "\u003e Recurrent references?\r\n\r\nThe entire reason this is done is because of recurrent references (if I understand the term correctly). Decorators always get an instance of \"itself\" injected, i.e. you have an `ICommandHandler\u003cTCommand\u003e` that takes an `ICommandHandler\u003cTCommand\u003e` to decorate. This results in a `StackOverflowException` unless you do it this way. ",
                                           "updatedAt":  "2019-11-16T11:34:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTQ4NDgyNw==",
                                           "createdAt":  "2020-05-07T20:38:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-05-07T20:38:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MjY0NzM2OQ==",
                                           "createdAt":  "2020-12-10T16:51:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBlOXCQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CleytonGoncalves",
                                                                               "createdAt":  "2021-03-29T15:09:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ah1508",
                                           "body":  "Hi,\r\n\r\nThe problem with the decorator pattern is that the decorator class must exist in the source, and it must implement the same interfaces as the decorated class. So for each decorated class, a decorator class is needed. Actually if several decorated classes implement the same interface then only one decorator class is needed for them, but a real class is still needed in the source.\r\n\r\nProxy pattern is better for cross cutting concerns (transaction, trace, etc...). Like for the decorator pattern, one proxy instance is created for each target instance but it is generated at runtime, no additional class is needed.\r\n\r\nFor example : \r\n\r\n```csharp\r\npublic interface IFoo\r\n{\r\n    void DoSomething();\r\n}\r\npublic class Foo : IFoo\r\n{\r\n    public override void DoSomething()\r\n    {\r\n        // code\r\n    }\r\n}\r\n\r\npublic interface IBar\r\n{\r\n    void DoSomethingElse();\r\n}\r\npublic class Bar : IBar\r\n{\r\n    public override void DoSomethingElse()\r\n    {\r\n        // code\r\n    }\r\n}\r\n```\r\nTo apply transaction around method invocation :\r\n\r\n```csharp\r\npublic class Proxy : System.Reflection.DispatchProxy\r\n{\r\n    private object target;\r\n\r\n    protected override object? Invoke(MethodInfo? targetMethod, object?[]? args)\r\n    {\r\n        using(var tx = new TransactionScope())\r\n        {\r\n            object ret = targetMethod.Invoke(target, args);\r\n            tx.Complete();\r\n            return ret;\r\n        }\r\n    }\r\n\r\n    public static T For\u003cT\u003e(T target)\r\n    {\r\n        object proxy = System.Reflection.DispatchProxy.Create\u003cT, Proxy\u003e();\r\n        ((Proxy)proxy).target = target;\r\n        return (T)proxy;\r\n    }\r\n}\r\n```\r\nService collection registration : \r\n\r\n```csharp\r\nIServiceCollection sc = new ServiceCollection();\r\nsc.AddSingleton\u003cIFoo\u003e(Proxy.For\u003cIFoo\u003e(new Foo());\r\nsc.AddSingleton\u003cIBar\u003e(Proxy.For\u003cIBar\u003e(new Bar());\r\n```\r\n\r\nSuggested in #45760 :\r\n\r\n```csharp\r\nIServiceCollection sc = new ServiceCollection();\r\nsc.AddSingleton\u003cIFoo, Foo\u003e(fooInstance =\u003e Proxy.For\u003cIFoo\u003e(fooInstance));\r\nsc.AddSingleton\u003cIBar, Bar\u003e(barInstance =\u003e Proxy.For\u003cIBar\u003e(barInstance));\r\n```\r\nThe idea is to be involved in the service registration, a `Func\u003cTService, TService\u003e` receives the instance created by the default factory and returns something built from it (here : a proxy). What is returned replaces in the service collection the instance received as argument.\r\n\r\nOne limitation : the `DispatchProxy` is a interface based proxy so \r\n* the target class must implement an interface. \r\n* `proxy is Foo` or `proxy is Bar` return false\r\n* only one interface can be declared in the `Create` method, what if the target class implements several interfaces ?\r\n\r\nA inheritance based proxy would be much better. \r\n\r\nWith appropriate custom attributes (`[Transactional]`, `[Traceable]`, etc...) the proxy can adapt its interception logic to the target method. Example : \r\n\r\n```csharp\r\npublic class Foo : IFoo\r\n{\r\n    [Transactional]\r\n    public override void Bar()\r\n    {\r\n        // code\r\n    }\r\n}\r\n```\r\nBetter design : the proxy would apply a chain of interceptors (transactional interceptor, trace interceptor, etc...), the chain is based on the custom attributes discovered on target\u0027s methods. No custom attribute on any method for a given class means that there is no need for a proxy. This introspection has to be done only once.\r\n\r\nBut a developer should not have to create its own proxies and interceptors for common use cases...\r\n\r\nThis interception support should be built-in : built-in custom attributes for common use cases (transaction, trace....),built-in proxy creation with a chain of interceptors and the possibility to create custom interception logic. It has been a proven solution in Java for 10 years.\r\n\r\nIt would be similar to Aspnet `ActionFilter` but for any service registered in the `IServiceCollection`. It would benefit to custom interceptors, third party interceptors, microsoft interceptors. Something like that  :\r\n\r\n```csharp\r\npublic interface IInterceptorAttribute: System.Attribute\r\n{\r\n    Object AroundInvoke(InvocationContext ctx);\r\n}\r\n\r\npublic class TransactionalAttribute : IInterceptorAttribute\r\n{\r\n    public override Object AroundInvoke(InvocationContext ctx)\r\n   {\r\n        // do something before\r\n        object ret = ctx.Proceed();\r\n        // do something after\r\n        return ret;\r\n   }\r\n}\r\n```\r\nWith an async version of course.",
                                           "updatedAt":  "2020-12-10T18:45:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MjY4MTAxNw==",
                                           "createdAt":  "2020-12-10T17:44:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBlOXFw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CleytonGoncalves",
                                                                               "createdAt":  "2021-03-29T15:09:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This isn\u0027t something we would build into the default container. The bar is really high for new features, especially ones like this. I\u0027d look at other containers that may have this built in",
                                           "updatedAt":  "2020-12-10T17:44:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNjAyMDQwMg==",
                                           "createdAt":  "2021-04-08T17:51:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEW1pFg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "csteeg",
                                                                               "createdAt":  "2021-07-01T12:07:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "chweidling",
                                                                               "createdAt":  "2021-07-07T07:55:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2022-06-17T13:26:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2024-03-14T06:34:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kzu",
                                                                               "createdAt":  "2025-06-17T03:57:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "Tiberriver256",
                                           "body":  "Might be a relevant addition to the conversation. This is a super simple method for a decorate extension that is borrowed from how HttpClient and HttpClientFactory work.\r\n\r\n```\r\npublic static class ServiceCollectionExtensions {\r\n\r\n  public static void Decorate\u003cTInterface, TDecorator\u003e(this IServiceCollection services)\r\n    where TInterface : class\r\n    where TDecorator : class, TInterface\r\n  {\r\n    // grab the existing registration\r\n    var wrappedDescriptor = services.FirstOrDefault(\r\n      s =\u003e s.ServiceType == typeof(TInterface));\r\n\r\n    // check it\u0026#039;s valid\r\n    if (wrappedDescriptor == null)\r\n      throw new InvalidOperationException($\"{typeof(TInterface).Name} is not registered\");\r\n\r\n    // create the object factory for our decorator type,\r\n    // specifying that we will supply TInterface explicitly\r\n    var objectFactory = ActivatorUtilities.CreateFactory(\r\n      typeof(TDecorator),\r\n      new[] { typeof(TInterface) });\r\n\r\n    // replace the existing registration with one\r\n    // that passes an instance of the existing registration\r\n    // to the object factory for the decorator\r\n    services.Replace(ServiceDescriptor.Describe(\r\n      typeof(TInterface),\r\n      s =\u003e (TInterface)objectFactory(s, new[] { s.CreateInstance(wrappedDescriptor) }),\r\n      wrappedDescriptor.Lifetime)\r\n    );\r\n  }\r\n\r\n  private static object CreateInstance(this IServiceProvider services, ServiceDescriptor descriptor)\r\n  {\r\n    if (descriptor.ImplementationInstance != null)\r\n      return descriptor.ImplementationInstance;\r\n\r\n    if (descriptor.ImplementationFactory != null)\r\n      return descriptor.ImplementationFactory(services);\r\n\r\n    return ActivatorUtilities.GetServiceOrCreateInstance(services, descriptor.ImplementationType);\r\n  }\r\n}\r\n```\r\n\r\nBorrowed from this blog which goes into further detail:\r\nhttps://greatrexpectations.com/2018/10/25/decorators-in-net-core-with-dependency-injection\r\n\r\nThings it does:\r\n✅ Decorator can construct on an interface\r\n✅ Wrapped implementation can be registered against the interface\r\n✅ Decorator scope is taken from wrapped service\r\n✅ Dependencies in wrapped implementation are injected automatically\r\n✅ Dependencies in decorator are injected automatically",
                                           "updatedAt":  "2021-04-08T17:51:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc402ZF3",
                                           "createdAt":  "2021-07-26T12:50:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD70Mcw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Tiberriver256",
                                                                               "createdAt":  "2022-06-17T13:54:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "tiagofrois",
                                                                               "createdAt":  "2022-10-17T12:01:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "AgentFire",
                                                                               "createdAt":  "2022-11-30T14:14:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2024-03-14T06:36:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "levanoz",
                                                                               "createdAt":  "2024-03-14T09:07:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ZarehD",
                                                                               "createdAt":  "2024-11-20T21:35:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "vspectre",
                                                                               "createdAt":  "2024-11-20T21:54:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "Timovzl",
                                           "body":  "@Tiberriver256, it\u0027s good to see that we have nearly the same implementation.\r\n\r\nI have the following suggestions:\r\n\r\n- Use the _last_ (i.e. winning) previous registration, rather than the first.\r\n- `Add` rather than `Replace` the prior registration. After all, we cannot speak of _the_ prior registration, but only of _a_ prior registration; there may be _multiple_ prior registrations, and replacing them all makes no sense. As such, I reason that replacing a single one makes no sense either.\r\n- Support an overload with a custom factory parameter: `Func\u003cIServiceProvider, TInterface, TDecorator\u003e decoratorFactory`.\r\n- Rename `TInterface` to `TService`, for consistency with existing methods.\r\n- `s.CreateInstance(wrappedDescriptor)`: I don\u0027t see any `IServiceProvider.CreateInstance`. This should probably just use `GetRequiredService`.\r\n\r\nAlthough the above code and the suggestions are probably clear, I\u0027ve included my own extension for reference. (It fulfills all the above, including the checkboxes.)\r\n\r\n```cs\r\n/// \u003csummary\u003e\r\n/// Helps register decorator implementations that wrap existing ones in the container.\r\n/// \u003c/summary\u003e\r\ninternal static class DecoratorRegistrationExtensions\r\n{\r\n\t/// \u003csummary\u003e\r\n\t/// Registers a \u003ctypeparamref name=\"TService\"/\u003e decorator on top of the previous registration of that type.\r\n\t/// \u003c/summary\u003e\r\n\t/// \u003cparam name=\"lifetime\"\u003eIf no lifetime is provided, the lifetime of the previous registration is used.\u003c/param\u003e\r\n\tpublic static IServiceCollection AddDecorator\u003cTService, TImplementation\u003e(\r\n\t\tthis IServiceCollection services,\r\n\t\tServiceLifetime? lifetime = null)\r\n\t\twhere TService : class\r\n\t\twhere TImplementation : TService\r\n\t{\r\n\t\tvar decoratorFactory = ActivatorUtilities.CreateFactory(typeof(TImplementation),\r\n\t\t\tnew[] { typeof(TService) });\r\n\r\n\t\treturn AddDecorator\u003cTService\u003e(\r\n\t\t\tservices,\r\n\t\t\t(serviceProvider, decoratedInstance) =\u003e\r\n\t\t\t\t(TService)decoratorFactory(serviceProvider, new object[] { decoratedInstance }),\r\n\t\t\tlifetime);\r\n\t}\r\n\r\n\t/// \u003csummary\u003e\r\n\t/// Registers a \u003ctypeparamref name=\"TService\"/\u003e decorator on top of the previous registration of that type.\r\n\t/// \u003c/summary\u003e\r\n\t/// \u003cparam name=\"decoratorFactory\"\u003eConstructs a new instance based on the the instance to decorate and the \u003csee cref=\"IServiceProvider\"/\u003e.\u003c/param\u003e\r\n\t/// \u003cparam name=\"lifetime\"\u003eIf no lifetime is provided, the lifetime of the previous registration is used.\u003c/param\u003e\r\n\tpublic static IServiceCollection AddDecorator\u003cTService\u003e(\r\n\t\tthis IServiceCollection services,\r\n\t\tFunc\u003cIServiceProvider, TService, TService\u003e decoratorFactory,\r\n\t\tServiceLifetime? lifetime = null)\r\n\t\twhere TService : class\r\n\t{\r\n\t\t// By convention, the last registration wins\r\n\t\tvar previousRegistration = services.LastOrDefault(\r\n\t\t\tdescriptor =\u003e descriptor.ServiceType == typeof(TService));\r\n\r\n\t\tif (previousRegistration is null)\r\n\t\t\tthrow new InvalidOperationException($\"Tried to register a decorator for type {typeof(TService).Name} when no such type was registered.\");\r\n\r\n\t\t// Get a factory to produce the original implementation\r\n\t\tvar decoratedServiceFactory = previousRegistration.ImplementationFactory;\r\n\t\tif (decoratedServiceFactory is null \u0026\u0026 previousRegistration.ImplementationInstance != null)\r\n\t\t\tdecoratedServiceFactory = _ =\u003e previousRegistration.ImplementationInstance;\r\n\t\tif (decoratedServiceFactory is null \u0026\u0026 previousRegistration.ImplementationType != null)\r\n\t\t\tdecoratedServiceFactory = serviceProvider =\u003e ActivatorUtilities.CreateInstance(\r\n\t\t\t\tserviceProvider, previousRegistration.ImplementationType, Array.Empty\u003cobject\u003e());\r\n\r\n\t\tif (decoratedServiceFactory is null) // Should be impossible\r\n\t\t\tthrow new Exception($\"Tried to register a decorator for type {typeof(TService).Name}, but the registration being wrapped specified no implementation at all.\");\r\n\r\n\t\tvar registration = new ServiceDescriptor(\r\n\t\t\ttypeof(TService), CreateDecorator, lifetime ?? previousRegistration.Lifetime);\r\n\r\n\t\tservices.Add(registration);\r\n\r\n\t\treturn services;\r\n\r\n\t\t// Local function that creates the decorator instance\r\n\t\tTService CreateDecorator(IServiceProvider serviceProvider)\r\n\t\t{\r\n\t\t\tvar decoratedInstance = (TService)decoratedServiceFactory(serviceProvider);\r\n\t\t\tvar decorator = decoratorFactory(serviceProvider, decoratedInstance);\r\n\t\t\treturn decorator;\r\n\t\t}\r\n\t}\r\n}\r\n```",
                                           "updatedAt":  "2021-07-26T12:54:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FEvgZ",
                                           "createdAt":  "2022-06-17T13:27:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WeihanLi",
                                           "body":  "Any update on this? Would this come in .NET 7?",
                                           "updatedAt":  "2022-06-17T13:27:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FE3U0",
                                           "createdAt":  "2022-06-17T14:02:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgu43g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "AgentFire",
                                                                               "createdAt":  "2022-11-30T14:14:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "tomeyerman",
                                                                               "createdAt":  "2023-01-26T23:22:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "jamers99",
                                                                               "createdAt":  "2025-09-03T19:52:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "The milestone is marked as \"future\", so no, this is not happening for .NET 7.",
                                           "updatedAt":  "2022-06-17T14:02:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FE4-1",
                                           "createdAt":  "2022-06-17T14:09:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WeihanLi",
                                           "body":  "@davidfowl  thanks ",
                                           "updatedAt":  "2022-06-17T14:09:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TyuFQ",
                                           "createdAt":  "2023-01-26T23:22:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tomeyerman",
                                           "body":  "I see lots of code snippets here :) which is the recommended implementation until this is officially supported?\r\n\r\n",
                                           "updatedAt":  "2023-01-26T23:22:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Tz-W1",
                                           "createdAt":  "2023-01-27T07:47:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEW1pkg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MatthewSteeples",
                                                                               "createdAt":  "2023-01-27T08:08:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2023-01-27T15:18:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dazinator",
                                                                               "createdAt":  "2023-04-21T13:57:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gerneio",
                                                                               "createdAt":  "2023-05-08T19:36:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2023-07-10T13:07:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aa-dit-yuh",
                                                                               "createdAt":  "2023-11-20T09:14:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2024-03-09T10:15:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-11-20T14:57:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "kzu",
                                                                               "createdAt":  "2025-06-17T03:58:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "khellang",
                                           "body":  "[Scrutor](https://www.nuget.org/packages/Scrutor) has about 65M downloads in the meantime 😅",
                                           "updatedAt":  "2023-01-27T07:47:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UWK7I",
                                           "createdAt":  "2024-11-20T15:10:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEOt3Zw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IanGraingerGMSL",
                                                                               "createdAt":  "2025-04-17T12:28:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e \u003e Yeah... The current implementation is a giant hack around the container\u0027s current limitations and there are some confusing aspects around the API, like \"what lifetime should the decorator have?\". I\u0027ve settled on copying the lifetime of the decoratee, but some people have argued that there are cases where this isn\u0027t the best solution.\n\u003e \n\u003e I think people are wrong there, the most correct thing is to preserve the lifetime.\n\n@davidfowl I\u0027m not sure if your stance has since changed on this, but IMHO it is not a matter of \"right or wrong\", but of the specific situation here, so it depends.\n\nIt is perfectly acceptable to consume a transient base service, and have a need to have the decorator have a longer lifetime because it stores extra state not present in the core service, one simple example being a decorator that relies on `Lazy\u003cT\u003e` fields internally for a local cache of sorts. I\u0027ve run into this situation a few times already in my own code, and due to Scrutor\u0027s limitation here (copying the lifetime of the decorated service) I was forced to increase the lifetime of the core service itself so that my decorator would also get that same lifetime, but that was a workaround. Ideally, only the decorator would get the expanded lifetime. In some cases, this can also be undesirable, because that base registration might be in use _without_ the decorator somewhere else, and changing its lifetime could go against the needs on those usages. Remember that the decorator can be registered far away from where the base service is registered, sometimes even in different methods/libraries, leading to scenarios where some cases use just the core service, while others use the core service plus the decorator on top.\n\nIn some cases, the above can be circumvented by adding an indirection: instead of having the state inside the decorator itself, have the decorator take an extra scoped/singleton service that itself stores the state. Again, a simple example here is replacing a `Lazy\u003cT\u003e` field, with an `IMemoryCache` dependency. But that is not always feasible or desired.\n\nThe other way around is also perfectly acceptable: for example, a transient decorator to a scoped service, or a scoped decorator to a singleton service. Imagine here a core service that needs to be a singleton, but you want a decorator implementation that depends on `IOptionsSnapshot\u003cT\u003e`, which should refresh per request and should thus be injected into a scoped instance. Yes, using `IOptionsMonitor\u003cT\u003e` in this case and keeping the decorator a singleton would work, but it would add unnecessary complexity. Besides, not every \"scoped\" functionality has an equivalent singleton accessor like `IOptions` does, so this also not always works.\n\nCopying the lifetime from the core service might be a good \"default\", but it is not necessarily \"correct\". It is just opinionated and inflexible.",
                                           "updatedAt":  "2024-11-20T15:10:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UWTPu",
                                           "createdAt":  "2024-11-20T15:23:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "As part of this new API, it would also be nice to add support for a runtime check before applying a decorator.\n\nA super normal scenario I\u0027ve run into multiple times, is to be able to \"toggle\" some behavior, like logging or caching, based on a configuration setting (`IOptions\u003cT\u003e`), or a feature toggle (using, say, Microsoft FeatureManagement), or even based on the current environment the app is running in (using `IHostEnvironment`). Since I usually try to move logging and caching into decorator implementations, toggling those behaviors could be equivalent to \"applying or skipping\" the respective decorator.\n\nYes, I\u0027m aware logging has its own built-in toggling mechanism based on the logger category (and I do try to use that whenever possible), but this is not always the case with other abstractions. For instance, in the case of caching, the only way to \"disable\" caching conditionally would be to create a decorator for `IMemoryCache` itself and have the toggling mechanism work on the methods there, or alternatively implement a `NullMemoryCache` and toggle between that and the \"normal\" instance in a proxy implementation. But then, you run into the fact that `IMemoryCache` is usually registered as a singleton, and thus affects caching for an entire application by default. In this scenario, if you only wanted to disable caching for a particular use case/service, it would\u0027ve been much nicer to be able to control that via \"adding/skipping\" the caching decorator for a specific service instead of building service-specific toggles inside of a global cache.\n\nChoosing between 2 different implementations based on a check is usually straightforward to implement with a proxy implementation that delegates the logic to the 2 underlying implementations, but this is not as easy to do when the logic is not \"pick between 2 instances\" but instead \"decide whether to include a decorator or not\": there is zero support for the former in the current container and simulating it is not as straightforward as adding a proxy.\n\nThe simplest way I\u0027m familiar with to support something like that is by coupling the toggling behavior to the decorator implementation itself. So instead of having a \"caching decorator\", you end up with a \"conditional caching decorator\" that performs the `ShouldCache` checks internally. While this works, it is clearly a SRP violation as you are now coupling the choice to the implementation. This also forces you to embed this \"conditional\" behavior in many decorators potentially, depending on whether you need the capability in those.",
                                           "updatedAt":  "2024-11-20T15:23:28Z"
                                       }
                                   ],
                         "totalCount":  33
                     },
        "title":  "Add decorator extension methods to IServiceCollection",
        "labels":  [
                       "api-suggestion",
                       "feature-request",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43062",
        "createdAt":  "2020-06-09T17:36:37Z",
        "number":  43062,
        "author":  "codingonHP",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-10-05T18:20:57Z",
        "body":  "If I have to extend `IServiceCollection` and `IServiceProvider` so that I can implement something similar to Unity\u0027s name based registration and resolution then what are the possible solutions?\r\n\r\nI am trying to implement API something similar to this for registration:\r\n\r\n```\r\n           var serviceCollection = new ServiceCollection();\r\n            serviceCollection\r\n                 .AddTransient\u003cIPerson, Person\u003e()\r\n                .AddTransient\u003cIPerson, Person2\u003e(\"person2\")\r\n                .AddTransient\u003cIPerson, Person3\u003e(\"person3\")\r\n                .AddTransient\u003cIPerson, Person4\u003e(\"person4\")\r\n                .AddTransient\u003cIPerson, Person5\u003e(\"person5\")\r\n                .AddTransient\u003cIPerson, Person6\u003e(\"person6\");\r\n\r\n             var serviceProvider = serviceCollection.BuildServiceProvider();\r\n```\r\nResolution:\r\n`           serviceProvider.GetService\u003cIPerson\u003e(\"person2\");`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKfuSGQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MjQ5MzMwMA==",
                                           "createdAt":  "2020-07-01T15:38:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I wonder if it is possible to create a TypeDelegator instance for each (Type type, string name) combination and then use those as keys in IServiceProvider. Might require overriding the UnderlyingSystemType property. That would be quite an ugly hack.",
                                           "updatedAt":  "2020-07-01T15:38:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzkwNTI4Nw==",
                                           "createdAt":  "2020-10-05T21:42:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-10-05T21:42:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDI5NDg3MQ==",
                                           "createdAt":  "2020-10-06T14:09:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-06T14:09:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDMyNzA1OA==",
                                           "createdAt":  "2020-10-06T14:56:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Would it be possible to store a `Dictionary\u003cstring, Type\u003e` that maps the \"person2\" to `Person2` in an `.AddTransient\u003cTService, TImplementation\u003e(string key)` extension method?\r\n\r\nAnd then in the `.GetService\u003cTService\u003e(string key)`, look up in the Dictionary which Type maps to `key`, and call `GetServices\u003cTService\u003e()`, looking for the one with the correct `Type`?\r\n\r\nAnother thought would be to create your own class that derives from `IServiceProvider` and wraps the built-in `IServiceProvider`, which does the `key =\u003e Type` mapping.\r\n\r\ncc @davidfowl - thoughts?",
                                           "updatedAt":  "2020-10-06T14:56:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDM1Mjc5Mw==",
                                           "createdAt":  "2020-10-06T15:30:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Wrapping doesn\u0027t work for these kinds of features because you need to handle both explicit and implicit calls to GetService. The container implementation doesn\u0027t call GetService for transitive dependencies of a type so it can\u0027t be used as an extensibility point to add behavior like this.\n\nAs usually though this feature requires all existing containers to support it (unless we pivot and make a separate registration API which isn\u0027t planned at the moment). I\u0027d recommend using unity if you need this feature.\n",
                                           "updatedAt":  "2020-10-06T15:30:10Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[Question/Help required] Extend IServiceCollection and IServiceProvider to implement name based resolution as in Unity",
        "labels":  [
                       "question",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/41050",
        "createdAt":  "2020-08-19T18:35:28Z",
        "number":  41050,
        "author":  "wvpm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODLfyQg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lawrence-laz",
                                            "createdAt":  "2020-11-12T14:21:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "erinloy",
                                            "createdAt":  "2021-07-25T23:33:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fjmorel",
                                            "createdAt":  "2021-12-15T22:00:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gregory-seidman",
                                            "createdAt":  "2021-12-28T16:31:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "retterbot",
                                            "createdAt":  "2021-12-30T11:44:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gary-lg",
                                            "createdAt":  "2022-03-07T12:01:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "batkinz",
                                            "createdAt":  "2022-04-06T09:09:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HernanFAR",
                                            "createdAt":  "2022-06-27T19:14:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lucasteles",
                                            "createdAt":  "2022-07-25T17:04:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "glen-84",
                                            "createdAt":  "2022-08-21T08:49:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2022-10-09T23:27:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "johncrim",
                                            "createdAt":  "2022-11-21T20:49:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Binkus",
                                            "createdAt":  "2022-12-21T18:14:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Chakrygin",
                                            "createdAt":  "2023-03-04T14:48:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Spaier",
                                            "createdAt":  "2023-03-31T07:35:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexkreskiyan",
                                            "createdAt":  "2023-05-28T11:18:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "flydyk",
                                            "createdAt":  "2023-05-30T13:25:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BlueXTX",
                                            "createdAt":  "2023-06-07T21:06:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MaceWindu",
                                            "createdAt":  "2023-07-13T12:45:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2023-12-30T12:01:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joewashear007",
                                            "createdAt":  "2024-01-18T21:47:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Serg046",
                                            "createdAt":  "2024-01-19T00:25:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kimsey0",
                                            "createdAt":  "2024-02-20T15:20:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CoenraadS",
                                            "createdAt":  "2024-04-11T22:36:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ygoe",
                                            "createdAt":  "2024-04-30T14:32:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CSymes",
                                            "createdAt":  "2024-05-28T00:41:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SKProCH",
                                            "createdAt":  "2024-06-17T15:32:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rasert",
                                            "createdAt":  "2024-06-19T21:28:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BrunoJuchli",
                                            "createdAt":  "2024-07-17T15:26:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-09-30T13:47:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "epsitec",
                                            "createdAt":  "2024-11-27T09:29:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yufeih",
                                            "createdAt":  "2025-02-18T06:37:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aradalvand",
                                            "createdAt":  "2025-03-02T07:17:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NateRickard",
                                            "createdAt":  "2025-03-13T18:45:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TheConstructor",
                                            "createdAt":  "2025-04-18T18:46:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CoreDX9",
                                            "createdAt":  "2025-04-28T05:14:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ohmios",
                                            "createdAt":  "2025-04-29T03:42:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tornhoof",
                                            "createdAt":  "2025-05-09T07:51:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kevin-s-diaz",
                                            "createdAt":  "2025-06-05T00:56:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dmillerkeyfive",
                                            "createdAt":  "2025-06-05T00:56:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Koloto",
                                            "createdAt":  "2025-06-20T16:09:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "5he11",
                                            "createdAt":  "2025-08-17T12:01:22Z"
                                        }
                                    ],
                          "totalCount":  42
                      },
        "updatedAt":  "2025-08-07T12:29:07Z",
        "body":  "## Background and Motivation\r\nWhen using the Microsoft.Extensions.DependencyInjection\u0027s ServiceviceDescriptor to register a service, you can register an instance, factory or implementationtype. This is great and generally works fine. However, when registering an open generic type, you can only use an implementationtype. Any other variant will cause runtime errors.\r\n\r\n\u003c!--\r\nWe welcome API proposals! We have a process to evaluate the value and shape of new API. There is an overview of our process [here](https://github.com/dotnet/runtime/blob/master/docs/project/api-review-process.md). This template will help us gather the information we need to start the review process.\r\nFirst, please describe the purpose and value of the new API here.\r\n--\u003e\r\n\r\n## Proposed API\r\nI propose adding a property to the ServiceDescriptor, along with a constructor to set the property like this:\r\n```cs\r\nnamespace Microsoft.Extensions.DependencyInjection {\r\n    public class ServiceDescriptor\r\n    {\r\n+    public Func\u003cIServiceProvider, Type, object\u003e? TypedImplementationFactory { get; }\r\n+    /// \u003csummary\u003e\r\n+    /// Initializes a new instance of \u003csee cref=\"ServiceDescriptor\"/\u003e with the specified \u003cparamref name=\"factory\"/\u003e.\r\n+    /// \u003c/summary\u003e\r\n+    /// \u003cparam name=\"serviceType\"\u003eThe \u003csee cref=\"Type\"/\u003e of the service.\u003c/param\u003e\r\n+    /// \u003cparam name=\"factory\"\u003eA factory used for creating service instances. The type parameter is the requested serviceType.\u003c/param\u003e\r\n+    /// \u003cparam name=\"lifetime\"\u003eThe \u003csee cref=\"ServiceLifetime\"/\u003e of the service.\u003c/param\u003e\r\n+    public ServiceDescriptor(\r\n+        Type serviceType,\r\n+        Func\u003cIServiceProvider, Type, object\u003e factory,\r\n+        ServiceLifetime lifetime)\r\n+        : this(serviceType, lifetime)\r\n+    {\r\n+        if (serviceType == null)\r\n+        {\r\n+            throw new ArgumentNullException(nameof(serviceType));\r\n+        }\r\n+    \r\n+        if (factory == null)\r\n+        {\r\n+            throw new ArgumentNullException(nameof(factory));\r\n+        }\r\n+    \r\n+        TypedImplementationFactory = factory;\r\n+        ImplementationFactory = provider =\u003e factory(provider, serviceType);\r\n+     }\r\n```\r\n\r\n\u003c!--\r\nPlease provide the specific public API signature diff that you are proposing. For example:\r\nYou may find the [Framework Design Guidelines](https://github.com/dotnet/runtime/blob/master/docs/coding-guidelines/framework-design-guidelines-digest.md) helpful.\r\n--\u003e\r\n\r\n## Usage Examples\r\n\r\nYou would be able to use it when adding DI registrations as follows:\r\n```cs\r\nIServiceCollection serviceCollection = new ServiceCollection();\r\nServiceDescriptor descriptor = new (\r\n     typeof(IGenericService\u003c\u003e),\r\n     (IServiceProvider provider, Type requestedType) =\u003e\r\n          provider.GetRequiredService\u003cIGenericServiceFactory\u003e()\r\n          .Build(requestedType),\r\n     ServiceLifetime.Singleton\r\n);\r\nserviceCollection.Add(descriptor);\r\n```\r\nWhere `IGenericService\u003c\u003e` and `IGenericServiceFactory` would be custom interfaces not part of the dotnet runtime code.\r\n`IGenericServiceFactory.Build(Type)` would of course return an instance of that type.\r\n\r\n\u003c!--\r\nPlease provide code examples that highlight how the proposed API additions are meant to be consumed.\r\nThis will help suggest whether the API has the right shape to be functional, performant and useable.\r\nYou can use code blocks like this:\r\n```cs\r\n// some lines of code here\r\n```\r\n--\u003e\r\n\r\n## Alternative Designs\r\nI could not think of any other good solution.\r\nA bad alternative solution required emitting dynamic wrapper classes.\r\n\u003c!--\r\nWere there other options you considered, such as alternative API shapes?\r\nHow does this compare to analogous APIs in other ecosystems and libraries?\r\n--\u003e\r\n\r\n## Risks\r\nI foresee two risks and two concerns regarding extra work due to obsolete code.\r\n\r\nRisks:\r\n1. ServiceProviders would have to be edited to provide support for the TypedImplementationFactory. If a ServiceProvider does not support this, you would only find this out runtime possibly by a nullref, depending on implementation.\r\n2. The IServiceCollectionExtensions should be expanded with overloads for the TypedImplementationFactory, which might confuse programmers.\r\n\r\nExtra work concerns, If the IServiceCollectionExtensions and ServiceDescriptor constructor using the ImplementationFactory were tagged as obsolete:\r\n1. Programmers using Microsoft.Extensions.DependencyInjection should update their code, resulting in extra work.\r\n2. The obsolete code should eventually be removed from Microsoft.Extensions.DependencyInjection, resulting in extra work.\r\n\r\n\u003c!--\r\nPlease mention any risks that to your knowledge the API proposal might entail, such as breaking changes, performance regressions, etc.\r\n--\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObETWkg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NjU5MjE0NA==",
                                           "createdAt":  "2020-08-19T18:35:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-19T18:35:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NjY4NDk2NQ==",
                                           "createdAt":  "2020-08-19T20:46:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wvpm",
                                           "body":  "I did work out an implementation in the CallSiteFactory which is used to actually resolve services.\nI\u0027ll create a fork later to show the code changes.\n\n```cs\n        private ServiceCallSite TryCreateExact(ServiceDescriptor descriptor, Type serviceType, CallSiteChain callSiteChain, int slot)\n        {\n            if (serviceType == descriptor.ServiceType)\n            {\n                ServiceCallSite callSite;\n                var lifetime = new ResultCache(descriptor.Lifetime, serviceType, slot);\n                if (descriptor.ImplementationInstance != null)\n                {\n                    callSite = new ConstantCallSite(descriptor.ServiceType, descriptor.ImplementationInstance);\n                }\n+                else if (descriptor.TypedImplementationFactory != null)\n+                {\n+                    callSite = new FactoryCallSite(lifetime, descriptor.ServiceType, provider =\u003e descriptor.TypedImplementationFactory(provider, serviceType));\n+                }\n                else if (descriptor.ImplementationFactory != null)\n                {\n                    callSite = new FactoryCallSite(lifetime, descriptor.ServiceType, descriptor.ImplementationFactory);\n                }\n                else if (descriptor.ImplementationType != null)\n                {\n                    callSite = CreateConstructorCallSite(lifetime, descriptor.ServiceType, descriptor.ImplementationType, callSiteChain);\n                }\n                else\n                {\n                    throw new InvalidOperationException(\"Invalid service descriptor\");\n                }\n\n                return callSite;\n            }\n\n            return null;\n        }\n```\n\n```cs\n        private ServiceCallSite TryCreateOpenGeneric(ServiceDescriptor descriptor, Type serviceType, CallSiteChain callSiteChain, int slot, bool throwOnConstraintViolation)\n        {\n            if (serviceType.IsConstructedGenericType \u0026\u0026\n                serviceType.GetGenericTypeDefinition() == descriptor.ServiceType)\n            {\n+                var lifetime = new ResultCache(descriptor.Lifetime, serviceType, slot);\n+                if (descriptor.TypedImplementationFactory != null)\n+                {\n+                    Type closedServiceType;\n+                    try\n+                    {\n+                        closedServiceType = descriptor.ServiceType.MakeGenericType(serviceType.GenericTypeArguments);\n+                    }\n+                    catch (ArgumentException)\n+                    {\n+                        if (throwOnConstraintViolation)\n+                        {\n+                            throw;\n+                        }\n+\n+                        return null;\n+                    }\n+                    return new FactoryCallSite(lifetime, descriptor.ServiceType, provider =\u003e  descriptor.TypedImplementationFactory(provider, closedServiceType));\n+                }\n+\n                Debug.Assert(descriptor.ImplementationType != null, \"descriptor.ImplementationType != null\");\n-                var lifetime = new ResultCache(descriptor.Lifetime, serviceType, slot);\n                Type closedType;\n                try\n                {\n                    closedType = descriptor.ImplementationType.MakeGenericType(serviceType.GenericTypeArguments);\n                }\n                catch (ArgumentException)\n                {\n                    if (throwOnConstraintViolation)\n                    {\n                        throw;\n                    }\n\n                    return null;\n                }\n\n                return CreateConstructorCallSite(lifetime, serviceType, closedType, callSiteChain);\n            }\n\n            return null;\n        }\n```",
                                           "updatedAt":  "2025-08-07T12:29:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NjY5MTg3NA==",
                                           "createdAt":  "2020-08-19T20:52:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBN6fWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wvpm",
                                                                               "createdAt":  "2020-08-20T06:06:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e I lack the rights to push a branch to this repository, so I cannot create a pull request myself. \r\n\r\nYou don\u0027t need push rights to make a pull request. You can [fork the repo](https://docs.github.com/en/enterprise/2.20/user/github/getting-started-with-github/fork-a-repo) yourself, and make a PR from your fork.\r\n\r\nHowever, since this is proposing a new API you should wait until the API is reviewed and approved before creating a PR. See https://github.com/dotnet/runtime/blob/master/docs/project/api-review-process.md for more info.",
                                           "updatedAt":  "2020-08-19T20:52:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3Nzc4NTIyNA==",
                                           "createdAt":  "2020-08-20T17:00:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVY2Xw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "lawrence-laz",
                                                                               "createdAt":  "2020-11-12T14:21:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "retterbot",
                                                                               "createdAt":  "2021-12-30T11:45:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "steveharter",
                                                                               "createdAt":  "2023-11-02T20:19:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-06-05T01:35:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-06-05T01:35:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "carusology",
                                           "body":  "Unless the stance of Microsoft [here](https://github.com/aspnet/DependencyInjection/issues/498), [here](https://github.com/dotnet/extensions/issues/478) or [here](https://github.com/aspnet/DependencyInjection/issues/474) changed, this isn\u0027t happening. \r\n\r\nA good summary statement from @pakrym ([Source](https://github.com/dotnet/extensions/issues/478#issuecomment-440061954)):\r\n\u003e We haven\u0027t broken other service provider implementation since 1.0 and this feature is certainly not worth it. What it\u0027s trying to accomplish already exists in other providers\r\n\r\nWhile it\u0027s not a breaking change for _consumers_, they don\u0027t want a breaking change for other DI _implementers_ who would need to support the new typed implementation factory API. You correctly identified this problem in your \"Risks\" section.\r\n\r\nFor reference, [it\u0027s still fairly popular question on StackOverflow](https://stackoverflow.com/questions/39029344) with no great answer.",
                                           "updatedAt":  "2020-08-20T17:00:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NzgzNzgzMg==",
                                           "createdAt":  "2020-08-20T18:51:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wvpm",
                                           "body":  "Thanks @carusology for linking those. I couldn\u0027t find any related issues within this github and the stackoverflow post reveals the open wound. I could imagine that with .Net 5 Microsoft could consider real API changes. When they made .Net Core they changed a lot also. If they don\u0027t want to change the API for this feature specifically, perhaps they can bundle it with other features. It would be sad if the API is stuck in place due to implementers having to add features. That sounds very similar to ECMAScript \u002799-2015.\r\n\r\nIf I look at the before and after for implementers that do not support this feature, it would be runtime exception vs runtime exception. Where you just have to know that open generics can only be registered with an open generic implementation. Seems to me there is not that much to lose.",
                                           "updatedAt":  "2020-08-20T18:51:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3ODg0MTg1Mg==",
                                           "createdAt":  "2020-08-23T23:53:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD0GLEA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wvpm",
                                                                               "createdAt":  "2020-08-24T06:53:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "anr-variant",
                                                                               "createdAt":  "2020-09-21T14:37:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tillig",
                                                                               "createdAt":  "2021-08-05T13:51:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kunalm8470",
                                                                               "createdAt":  "2021-08-19T17:39:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DonaldRecord",
                                                                               "createdAt":  "2022-06-30T22:02:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Federerer",
                                                                               "createdAt":  "2022-12-01T23:51:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-09-30T13:48:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "davidfowl",
                                           "body":  ".NET 5 is done, we can look at something for .NET 6 but we\u0027re not making any breaking changes in this space regardless. On top of that, any new requirement to the DI container abstraction needs to be implemented in all existing supported containers, that is the *minimum* bar for new features.\r\n\r\nThat said, I like this feature 😄 ",
                                           "updatedAt":  "2020-08-23T23:59:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3ODk0NDU1OQ==",
                                           "createdAt":  "2020-08-24T06:59:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wvpm",
                                           "body":  "Good to hear .NET 5 is done.\r\n\r\nI added a fallback option in the proposed API constructor. The TypedImplementationFactory variant now also sets the ImplementationFactory. This way, providers that don\u0027t support the TypedImplementationFactory can continue to use the ImplementationFactory. So if I use the TypedImplementationFactory constructor and my provider does not support it, it will work if the serviceType is not an open generic (as before). It will throw runtime exceptions with open generics (as before). So if a provider does not change anything, it will work the same as before. This allows providers to implement it at their pace. \r\n\r\nIf for some reason the ServiceDescriptor API may not be altered because not all implementors support it and the implementors depend on a TypedImplementationFactory, then you have a chicken-egg issue. So I hope dotnet takes the initiative and alters the API is a non-breaking way, so that the implementors can use the new API to update their code.",
                                           "updatedAt":  "2020-08-24T07:04:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3ODk0OTg5Mw==",
                                           "createdAt":  "2020-08-24T07:11:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "That\u0027s not how changes to the DI system work. You need to take the initiative and see how the supported containers behave and how difficult this support would be to implement. When the rubber meets the road, we actually tests all known implementations as part of success criteria so it\u0027s not something we would commit then figure out.\n\nWe can mention the various authors to get some other opinions",
                                           "updatedAt":  "2020-08-24T07:11:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODI0MTkyOQ==",
                                           "createdAt":  "2020-09-24T09:52:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVY9JA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wvpm",
                                                                               "createdAt":  "2020-09-24T19:46:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "epsitec",
                                                                               "createdAt":  "2024-11-27T09:32:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MattiasOnline",
                                                                               "createdAt":  "2025-03-27T14:29:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-06-05T02:00:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "dazinator",
                                           "body":  "I am creating [a library](https://github.com/dazinator/Dazinator.Extensions.DependencyInjection/tree/develop/src/DependencyInjection.ChildContainers) to provide a \"child container\" feature for the native MS `ServiceProvider` but I have hit this problem with respect to `singleton open generic registrations` .  I just cannot solve it in a decent way, precisely due to this issue outlined. I\u0027ve worked around it, by giving the user some options around how these registrations are dealt with when they are encountered, none of which are ideal. For example one option is to just throw when these descriptors are encountered - and there are usually atleast the following added by the Hosting layer:\r\n\r\n```\r\nDazinator.Extensions.DependencyInjection.Tests.ChildServiceProvider.GenericHostTests.Options_WorksInChildContainers(args: [\"\"])\r\n   Source: GenericHost.cs line 23\r\n   Duration: 269 ms\r\n\r\n \u003e Message: \r\n    System.NotSupportedException : Open generic types registered as singletons in the parent container are not supported when using child containers: \r\n    ServiceType: Microsoft.Extensions.Options.IOptions`1\r\n    ServiceType: Microsoft.Extensions.Options.IOptionsMonitor`1\r\n    ServiceType: Microsoft.Extensions.Options.IOptionsMonitorCache`1\r\n    ServiceType: Microsoft.Extensions.Logging.ILogger`1\r\n    ServiceType: Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfiguration`1\r\n```\r\n\r\nThe issue (as already described) is that when a `singleton open generic` descriptor is registered, there is no ability to specify that you want the instance to be provided from \"elsewhere\". This is a problem for the parent --\u003e child relationship I was aiming to achieve! In my case the child container needs to be able to resolve a singleton open generic from the parent container so it gets the same instance.\r\n\r\nThis TypedImplementationFactory would only `partly` solve the problem - enabling me to do as @wvpm suggested:\r\n\r\n\r\n```\r\nIServiceProvider parentServiceProvider = GetParentServiceProvider();\r\nIServiceCollection childServices= GetChildServiceCollection();\r\n\r\n// for each of the singleton open generic descriptors registered in the parent, add them to the child but re-point the instance to be sourced from the parent container as we want to keep it a true singleton. \r\nchildServices.Add(new ServiceDescriptor(parentDescriptor.ServiceType , (IServiceProvider provider, Type requestedType) =\u003e parentServiceProvider.GetRequiredService(requestedType))\r\n```\r\n\r\nI say partly, because it doesn\u0027t address the last option that we have with closed type singleton registrations - the ability when the instance is provided to prevent the container from owning / tracking / disposing of that instance. When I ultimately provide a singleton instance that I have created \"externally\" (in my case via the parent container,) I want to hint to the container that this singleton instance is \"external\" like I can with closed type singleton registrations when providing an instance. Please - if you do decide to make the changes necessary to solve this issue, please can you also go the whole hog and add this option? @wpvm do you have any thoughts on what that api might look like - i.e to indicate its an \"external\" instance that shouldn\u0027t be tracked for disposal?",
                                           "updatedAt":  "2020-09-24T10:38:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODI1MzQwNg==",
                                           "createdAt":  "2020-09-24T10:16:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "\u003e We can mention the various authors to get some other opinions\r\n\r\n@tillig @jeremydmiller would be very greatful for any opinions you may like to share on this as well as any other container authors!",
                                           "updatedAt":  "2020-09-24T10:25:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODM4NTA0Mg==",
                                           "createdAt":  "2020-09-24T14:34:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIJyIA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-03-02T07:19:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tillig",
                                           "body":  "This is not something Autofac provides out of the box. I think it\u0027d be possible, but it doesn\u0027t exist today.\r\n\r\nThat said, I haven\u0027t seen an issue come through for something like this for Autofac, though I have seen a couple of StackOverflow questions over the years. I have to assume that if it was a popular enough feature that enough people wanted we\u0027d have seen an issue come in by now. I could be wrong.\r\n\r\nFrom a container developer perspective, if a new \"registration type\" gets added to the system, it\u0027s a breaking interface change. The way things work, at least in Autofac, we iterate through the set of registrations in the `IServiceCollection` and effectively \"convert\" them to Autofac registrations. If there\u0027s a new property added to the registration, that means one of two things happens:\r\n\r\n- The property _isn\u0027t_ looked at and folks wonder why that registration type isn\u0027t handled.\r\n- The property _is_ looked at and we now have to maintain different code (maybe different packages?) based on whether the Autofac/MS DI adapter package is being used with old registrations or new ones.\r\n\r\nMy understanding of the Microsoft DI container is that it was intended to be sort of a lowest-common-denominator conforming container, enough to support the use cases for ASP.NET Core; and if you want more \"advanced features,\" that was the point of being able to use other backing containers. Sort of like the difference between System.Text.Json and Newtonsoft.Json - System.Text.Json is there, it does _most_ of what you need, but it isn\u0027t as fully-featured as Newtonsoft.Json and isn\u0027t intended to be. If you want the extra features, you opt in to use Newtonsoft.Json to get them rather than having every feature implemented in System.Text.Json.\r\n\r\nSo... I think the feature is interesting, for some folks it is probably valuable, but I don\u0027t think it should be added to the MS DI container. I think the MS DI container should stay as basic as possible to allow easier conformance. I\u0027d say if someone wants to use a feature like this, it could be in a more fully-featured backing container.",
                                           "updatedAt":  "2020-09-24T14:34:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODQxOTA1OQ==",
                                           "createdAt":  "2020-09-24T15:29:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeremydmiller",
                                           "body":  "This won\u0027t help you at all, but the equivalent functionality was buggy in StructureMap and I\u0027ve held the line of not wanting to have to support this functionality in Lamar. It\u0027s just a very complex problem with oodles of edge cases.",
                                           "updatedAt":  "2020-09-24T15:29:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODQzNjA1Ng==",
                                           "createdAt":  "2020-09-24T15:59:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCarDTg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wvpm",
                                                                               "createdAt":  "2020-09-24T19:50:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "phorks",
                                                                               "createdAt":  "2022-05-02T00:52:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "dazinator",
                                           "body":  "@tillig @jeremydmiller thanks both for responding!\r\n\r\nI understand your point @jeremydmiller - child containers are certainly not something for everyone, it\u0027s complicated enough for consumers, let alone authors. Saying that, they do solve some problems architecturally in a nice way and so have their uses. I can see why some DI containers would want to support the notion and not others.\r\n\r\n.. but actually you should be supporting me in this @jeremydmiller  - with a couple of very minor tweaks to ServiceDescriptor, it would be possible to populate two independent containers in a way that results in a parent - child relationship, without the underlying container author having to do anything special - just support population of their container from `IEnumerable\u003cServiceDescriptor\u003e()`. The only change needed for this to be a reality is to extend ServiceDescriptor with the two tweaks mentioned in this issue:\r\n\r\n1. For open generics, allow a factory delegate to provide the instance \r\n2. For open generics, allow a boolean hint as to whether the container should own the instance that is provided by the above.\r\n\r\nI appreciate @tillig that this may seem an advanced feature that you should be swapping containers for - and I take your point about not seeing much demand for it - although you do support `ExternallyOwned` for open generic registrations - so from that perspective there must be some demand for that aspect. However from my perspective, `ServiceDescriptor` is just a descriptor - and as such, should be able to _describe_ the registration requirement - it\u0027s down to the underlying DI container to decide (like it currently does) if it wants to throw a \"NotSupportedException\". Perhaps (based on your feedback) there should be a better way for DI containers to be able detect unsupported service descriptors if changes are made in future - so like you say, you don\u0027t have to contain so many conditional compilations? \r\n\r\nThere is also another point purely from aesthetical point of view. Closed types can currently be described / registered as singleton \"externally\" owned instances, I am just seeking **Feature parity** for open generic registrations. Why is it a valid requirement for one and not the other?",
                                           "updatedAt":  "2020-09-24T16:25:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODQ0ODQ0Nw==",
                                           "createdAt":  "2020-09-24T16:22:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVY_bg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dazinator",
                                                                               "createdAt":  "2020-09-24T19:26:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2022-09-21T14:26:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-06-05T02:07:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "tillig",
                                           "body":  "\u003e but `ServiceDescriptor` is just a descriptor - all I am asking is that it should be able to _describe_ the registration requirement ... it\u0027s down to the underlying DI container to decide if it wants to throw a \"NotSupportedException\"\r\n\r\nThat\u0027s not how it works, unfortunately. In order to say you support the MS DI abstraction, you have to support all the things. There\u0027s no `NotSupportedException` option. There are even [specification tests the backing container has to pass](https://github.com/dotnet/runtime/tree/master/src/libraries/Microsoft.Extensions.DependencyInjection/tests/DI.Specification.Tests). If something gets added to the base DI container, all the conforming containers have to support it.\r\n\r\n`ExternallyOwned` has nothing to do with open generics or specifically supporting that. `ExternallyOwned` is about whether, once you resolve a concrete _closed generic_, the Autofac lifetime scope tracks and manages disposal. It\u0027s an opt-out. It doesn\u0027t participate in the actual resolution/construction of the thing.\r\n\r\nI\u0027ll again reiterate, if something gets added, it\u0027s effectively a breaking change. There\u0027s not a way to say \"this Autofac adapter package targets `netstandard2.0` _and_ should use this code if you\u0027re referencing the old MS.DI abstraction but this _other_ code if you\u0027re referencing the new one.\" It\u0027s an interface, just like `ILogger\u003cT\u003e` or anything else. It seems like a simple thing to add, but there are a ton of downstream ripple effects.\r\n\r\nIt\u0027s exactly for these reasons that there\u0027s a separation between `ConfigureServices` and `ConfigureContainer` in a Startup class. If you can stick to the common abstractions, great. If not, `ConfigureContainer`.\r\n\r\nAnyway, I\u0027ve kinda said my piece here. I think it might be an interesting feature for a backing container, I definitely don\u0027t think it belongs in the MS.DI container. There\u0027s not much more I can contribute on the subject.",
                                           "updatedAt":  "2020-09-24T16:22:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODQ2MjM0Nw==",
                                           "createdAt":  "2020-09-24T16:48:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeremydmiller",
                                           "body":  "I\u0027m going to ditto what @tillig said about this being a feature for a specific backing container. The configuration part of this isn\u0027t that bad, it\u0027s the runtime that\u0027s going to get you. The rules about what the client container can override or carry through from the parent container is rough, not disposing objects created from the parent, and every user having a little different idea about exactly how the child container feature should work.\r\n\r\nAs a somewhat active maintainer of one of the very many IoC containers that conform to the ASP.Net DI standard, I\u0027d strongly prefer that that standard basically never change, or at least very, very rarely.",
                                           "updatedAt":  "2020-09-24T16:48:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODQ3MzExMw==",
                                           "createdAt":  "2020-09-24T17:09:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "Thanks @tillig \r\n\r\n\u003e I\u0027ll again reiterate, if something gets added, it\u0027s effectively a breaking change. There\u0027s not a way to say \"this Autofac adapter package targets netstandard2.0 and should use this code if you\u0027re referencing the old MS.DI abstraction but this other code if you\u0027re referencing the new one.\" It\u0027s an interface, just like ILogger\u003cT\u003e or anything else. It seems like a simple thing to add, but there are a ton of downstream ripple effects.\r\n\r\nThats a pain isn\u0027t it! Do you think this warrants a seperate API proposal (and breaking change) in some attempt at addressing? Or is it not worth it? E.g some mechanism to allow the container to detect servicedescriptors that it can\u0027t process safely at runtime?\r\n",
                                           "updatedAt":  "2020-09-24T17:29:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODQ4MjQyNA==",
                                           "createdAt":  "2020-09-24T17:28:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBmrdXw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wvpm",
                                                                               "createdAt":  "2020-09-24T19:51:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wolfweb",
                                                                               "createdAt":  "2021-04-10T02:42:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "dazinator",
                                           "body":  "@jeremydmiller - ditto, I also hope breaking changes are always very few and very far between! :-)",
                                           "updatedAt":  "2020-09-24T18:13:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODU0NDU4Mw==",
                                           "createdAt":  "2020-09-24T19:32:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "I think me mentioning \"child containers\" in this discussion may have side tracked it slightly - apologies for that @wvpm ! The issue really has a much more limited scope which has already been summarised nicely, and getting into the complexities of child containers is probably not helpful on my part.",
                                           "updatedAt":  "2020-09-24T19:32:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODU0Nzk5Mg==",
                                           "createdAt":  "2020-09-24T19:39:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "@wvpm \r\n\u003e I could not think of any other good solution.\r\n\r\nGiven there is a lot of pushback on any proposed changes to `ServiceDescriptor` (and for good reasons) - I wonder if an alternative might be for the consumer to register some sort of provider globally with the microsoft service provider directly (on app startup somewhere), that the service provider will then delegate to (if set) when it needs to create a new instance from an open generic registration. If its not set, it will just do its normal type resolution it does today.  In this way there would not be any new property added to `ServiceDescriptor`, the descriptor would still just have the ordinary `ServiceType` and `ImplementationtType` set.\r\n\r\nThe good thing about that (aside from no changes to service descriptor) would be that this function would be a container feature added to microsoft service provider only, and not expected to be implemented by all other containers.\r\n\r\nI haven\u0027t looked at the code yet, but if it looks viable, might submit an API proposal for that type of change.",
                                           "updatedAt":  "2020-09-24T19:48:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODU1OTgyMA==",
                                           "createdAt":  "2020-09-24T20:02:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@dazinator I agree that child containers shouldn\u0027t be discussed on this issue.\r\n\r\nBut generally for issues like this we can do in 2 directions: \r\n\r\n1. Expose another builder on top of the `ServiceCollection` that\u0027s specific to the built in container. That puts you in the category of being tied to a specific container implementation.\r\n2. Enhance the abstraction. Getting container authors on board to implement more functionality in the spec. Even when this is a breaking change it is possible to do this in newer versions in practice (especially if those scenarios were failing before).\r\n\r\nThe first requires a bunch of ground work to design a new set of registration APIs (possibly only new ones?) and the second requires looking at all of the existing tests and container and getting agreement and consensus with the current container authors.",
                                           "updatedAt":  "2020-09-24T20:02:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODU2MTgxNA==",
                                           "createdAt":  "2020-09-24T20:06:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wvpm",
                                           "body":  "@dazinator, @tillig \u0026 @jeremydmiller\r\nThanks for your input. From what I understand this proposal creates new questions for some implementors in regards to child containers.\r\n\r\nTo make sure we talk about the same specifics, I added the following code:\r\n```\r\n//A. Registration of closed type via factory\r\nservices.AddSingleton(typeof(IService), (provider) =\u003e new implementation());\r\n//B. Registration of open type\r\nservices.AddSingleton(typeof(IGenericService\u003c\u003e), typeof(Implementation\u003c\u003e));\r\n//C. Registration of open type via factory\r\nservices.AddSingleton(typeof(IGenericService\u003c\u003e), (IServiceProvider provider, Type requestedType) =\u003e provider.GetRequiredService\u003cIGenericServiceFactory\u003e().Build(requestedType));\r\n```\r\n\r\nIt is my understanding (based on the Microsoft implementation) that a singleton is maintained in the root container and shared with all descendants. I don\u0027t see any difference here between the closed type via factory (A), open generic type (B) and open type via factory registrations (C).\r\n\r\nCould either one of you explain to me the crucial difference between these registration types?",
                                           "updatedAt":  "2020-09-24T20:07:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODU3MjAwNg==",
                                           "createdAt":  "2020-09-24T20:29:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "@wvpm \r\n\r\n\u003e Thanks for your input. From what I understand this proposal creates new questions for some implementors in regards to child containers.\r\n\r\nAs per above, I think we should forget child containers were ever mentioned, the issue isn\u0027t really to do with them.\r\n\r\n\u003e It is my understanding (based on the Microsoft implementation) that a singleton is maintained in the root container and shared with all descendants. I don\u0027t see any difference here between the closed type via factory (A), open generic type (B) and open type via factory registrations (C).\r\n\r\nYou\u0027ve missed one there! We can also register a singleton (closed type) instance. In which case the instance won\u0027t be owned / disposed by the container when the container is disposed:\r\n\r\n```\r\nservices.AddSingleton(fooInstance);\r\n```\r\n\r\nSo to try and summarise the feature gap for open generic registrations vs closed type registrations:\r\n\r\n1. closed types can have a factory method (container will still own / dispose of them), open types can\u0027t (this is what you are trying to address)\r\n2. An instance of a closed type can be registered as a singleton and the container won\u0027t own / dispose of it. No way to do that for instances created from open type registrations. (This API proposal doesn\u0027t try to address that)\r\n\r\nI think the API proposal would ideally resolve both of the above!",
                                           "updatedAt":  "2020-09-24T20:56:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODU4MDM1Mg==",
                                           "createdAt":  "2020-09-24T20:47:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "@davidfowl \r\n\r\n\u003e Expose another builder on top of the ServiceCollection that\u0027s specific to the built in container. That puts you in the category of being tied to a specific container implementation.\r\n\r\nI think this would be great. If this could be addressed purely as native ServiceProvider / ServiceCollection feature, i.e some api\u0027s to bring open type registrations up to par with what you can currently do with closed type registrations then I\u0027d be down with that. It won\u0027t break any other containers this way.",
                                           "updatedAt":  "2020-09-24T20:49:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODU4Nzc3Mg==",
                                           "createdAt":  "2020-09-24T21:04:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wvpm",
                                           "body":  "@dazinator I know the singleton closed type instance registration, but did not include it in my post since it\u0027s a standalone case in my opinion. It\u0027s quite different compared to the other registrations in that the DI implementation only passes it on to a consumer. It is not managed at all beyond that. My proposal (in the original post) is about using a function to resolve a closed type at runtime that inherits from an open generic type (B). I think this should function very similar to the current implementation of closed type factory registration (A) and the open type generic registration (C). See my previous post for a code sample for A, B and C.\r\n\r\nFrom what I\u0027ve read there are 3 \u0027issues\u0027:\r\n\r\n1. child container behaviour (which we\u0027d best leave out of this thread)\r\n2. externally owned singletons (which I think are not that relevant to my proposal)\r\n3. implementors would have to edit their implementation, else MS DI would no longer be the lowest common denominator.\r\n\r\nI think issue 3 basically comes down to \"Is MS DI set in stone?\". If the API may not be edited now or in the future, then the whole proposal can be rejected at once. If however, changes are possible, we could talk about how other implementors could update their implementation to support this API change and if that effort is worth it.\r\n\r\nSince there is interest and are stackoverflow post asking for this, I argue that it is worth the effort (atleast for MS DI).",
                                           "updatedAt":  "2020-09-24T21:04:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODYyNTMwMA==",
                                           "createdAt":  "2020-09-24T22:42:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e I think this would be great. If this could be addressed purely as native ServiceProvider / ServiceCollection feature, i.e some api\u0027s to bring open type registrations up to par with what you can currently do with closed type registrations then I\u0027d be down with that. It won\u0027t break any other containers this way.\r\n\r\nIt begs the question as to why you don\u0027t just use the other containers that support this then.",
                                           "updatedAt":  "2020-09-24T22:42:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODY0Mjk3MA==",
                                           "createdAt":  "2020-09-24T23:45:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "@davidfowl \r\n\r\n\u003e It begs the question as to why you don\u0027t just use the other containers that support this then.\r\n\r\n1. My library is specifically aiming to extend / leverage the native service provider to allow it to be used for child containers in applications. Its ok for me to be coupled with the native service provider- this is by design and is my goal.\r\n\r\n2. Not all other containers currently support these options for open generic registrations as per discussion above - I havent looked at which ones do and don\u0027t - but purely from a native service provider perspective, I think making these additional registration options available for open generics would fill a gap (from whats available for closed types) that would then just so happen to be very useful for my scenarios.\r\n\r\nTo pre-empt a possible next question - why do I want to create such a project? Why am I not just switching to a new container already!\r\n\r\n1. I like the native service provider and think it does a [reasonable job perf wise](https://github.com/danielpalme/IocPerformance). If I can avoid switching in my applications I will do. Child containers is the only feature that has ever caused me to switch away. I was hoping to do something about that. ",
                                           "updatedAt":  "2020-09-25T00:16:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNTIyOTk5Mw==",
                                           "createdAt":  "2020-11-28T13:16:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MithrilMan",
                                           "body":  "mmm ok I was trying to achieve this kind of child service provider because I\u0027ve the need to run different Hosts that share the same DI resolutions.\r\nI tried to have a child serviceprovider implementation basically solving the child using the parent sp but of course I can\u0027t proceed because of this open generic problem.\r\nMy only chance now would be to be able to reuse the same serviceprovider in different Hosts but even this doesn\u0027t seems possible, am I missing something? (e.g. being able to set host.Services property passing the main serviceProvider instance)",
                                           "updatedAt":  "2020-11-28T13:16:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNTI3NDIyOQ==",
                                           "createdAt":  "2020-11-28T18:36:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "You can plug in a service provider into the host via an ISericeProviderFactory https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.hostbuilder.useserviceproviderfactory?view=dotnet-plat-ext-5.0",
                                           "updatedAt":  "2020-11-28T18:36:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNTI4NTM3Nw==",
                                           "createdAt":  "2020-11-28T20:15:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MithrilMan",
                                           "body":  "Hey @davidfowl I tried that approach, my problem is that I\u0027m trying to run multiple `Host`s using the same serviceprovider\r\nand actually the main serviceprovider is built before other hosts are configured so I can\u0027t add services to it.\r\nI tried to implement a kind of aggregator to simulate a child service provider but failed (a Iserviceprovider implementation that first tries to solve with the parent, then with the child serviceprovider, but I had too many problems and at the end it couldn\u0027t work if you try to resolve a service that have constructor parameters that has to be solved some on the parent container and some on the child container)\r\nI opened a discussion https://github.com/dotnet/aspnetcore/discussions/28228 to see what\u0027s the best way to achieve what I\u0027m trying to achieve\r\n\r\nI may be able to alter the design and delay the building of the main host in order to register everything in the same HostBuilder, exposing different APIs on different endpoints with swagger, eventually adding blazor server, etc... but I doubt it\u0027s feasible, if it is I\u0027d like to know how",
                                           "updatedAt":  "2020-11-28T20:15:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNTI4NjAwMQ==",
                                           "createdAt":  "2020-11-28T20:21:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "\u003e Hey @davidfowl I tried that approach, my problem is that I\u0027m trying to run multiple `Host`s using the same serviceprovider\r\n\u003e and actually the main serviceprovider is built before other hosts are configured so I can\u0027t add services to it.\r\n\u003e I tried to implement a kind of aggregator to simulate a child service provider but failed (a Iserviceprovider implementation that first tries to solve with the parent, then with the child serviceprovider, but I had too many problems and at the end it couldn\u0027t work if you try to resolve a service that have constructor parameters that has to be solved some on the parent container and some on the child container)\r\n\u003e I opened a discussion [dotnet/aspnetcore#28228](https://github.com/dotnet/aspnetcore/discussions/28228) to see what\u0027s the best way to achieve what I\u0027m trying to achieve\r\n\u003e \r\n\u003e I may be able to alter the design and delay the building of the main host in order to register everything in the same HostBuilder, exposing different APIs on different endpoints with swagger, eventually adding blazor server, etc... but I doubt it\u0027s feasible, if it is I\u0027d like to know how\r\n\r\nHave you looked at the [Child containers](https://github.com/dazinator/Dazinator.Extensions.DependencyInjection/blob/develop/src/DependencyInjection.ChildContainers/README.md) provided by https://github.com/dazinator/Dazinator.Extensions.DependencyInjection - it has some tests - open generic registrations for singletons can result in duplicate singleton in the child container though (there are options for how you address this). ",
                                           "updatedAt":  "2020-11-28T20:25:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNTI4Njc2MA==",
                                           "createdAt":  "2020-11-28T20:28:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MithrilMan",
                                           "body":  "I saw your project but didnt\u0027t tried it because it actually has same limitation of my implementation\r\ne.g. in my hacking attempt , in ConfigureServices of my 2nd host (built after the main was already running) I passed the main serviceprovider and its servicecollection and did this\r\n\r\n```\r\n// copies all the services registered in the forge, maintaining eventual singleton instances\r\n// also copies over singleton instances already defined\r\nforeach (ServiceDescriptor service in _registeredServices)\r\n{\r\n   if (service.ServiceType == typeof(IHostedService))\r\n   {\r\n      //prevent to start again an hosted service that\u0027s already running\r\n      continue;\r\n   }\r\n   // open types failure, adding as service wull resolve to a new instance\r\n   else if (service.ServiceType.IsGenericType)\r\n   {\r\n      services.Add(service);\r\n   }\r\n   else if (service.Lifetime == ServiceLifetime.Singleton)\r\n   {\r\n      services.AddSingleton(service.ServiceType, sp =\u003e _serviceProvider.GetServices(service.ServiceType).First(s =\u003e service.ImplementationType == null || s.GetType() == service.ImplementationType)); //resolve singletons from the main provider\r\n   }\r\n   else\r\n   {\r\n      services.Add(service);\r\n   }\r\n}\r\n```\r\n\r\nthat gave me the false illusion it was working but (I was serving singleton by using the main _serviceProvider as wrapper), as you may guess, it generates duplicate IOptions for instance or other glitches\r\nif GetService on an open generic was accepting a factory it would work tho :/",
                                           "updatedAt":  "2020-11-28T20:28:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNTI5NDc4NQ==",
                                           "createdAt":  "2020-11-28T21:50:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "\u003e I saw your project but didnt\u0027t tried it because it actually has same limitation of my implementation\r\n\u003e e.g. in my hacking attempt , in ConfigureServices of my 2nd host (built after the main was already running) I passed the main serviceprovider and its servicecollection and did this\r\n\u003e \r\n\u003e ```\r\n\u003e // copies all the services registered in the forge, maintaining eventual singleton instances\r\n\u003e // also copies over singleton instances already defined\r\n\u003e foreach (ServiceDescriptor service in _registeredServices)\r\n\u003e {\r\n\u003e    if (service.ServiceType == typeof(IHostedService))\r\n\u003e    {\r\n\u003e       //prevent to start again an hosted service that\u0027s already running\r\n\u003e       continue;\r\n\u003e    }\r\n\u003e    // open types failure, adding as service wull resolve to a new instance\r\n\u003e    else if (service.ServiceType.IsGenericType)\r\n\u003e    {\r\n\u003e       services.Add(service);\r\n\u003e    }\r\n\u003e    else if (service.Lifetime == ServiceLifetime.Singleton)\r\n\u003e    {\r\n\u003e       services.AddSingleton(service.ServiceType, sp =\u003e _serviceProvider.GetServices(service.ServiceType).First(s =\u003e service.ImplementationType == null || s.GetType() == service.ImplementationType)); //resolve singletons from the main provider\r\n\u003e    }\r\n\u003e    else\r\n\u003e    {\r\n\u003e       services.Add(service);\r\n\u003e    }\r\n\u003e }\r\n\u003e ```\r\n\u003e \r\n\u003e that gave me the false illusion it was working but (I was serving singleton by using the main _serviceProvider as wrapper), as you may guess, it generates duplicate IOptions for instance or other glitches\r\n\u003e if GetService on an open generic was accepting a factory it would work tho :/\r\n\r\nAh right. Yep you\u0027ve hit the same limitation as I did :-). \r\nI dont think a resolution will be possible unless something like what @davidfowl suggested is added specifically for the native service provider to allow the construction of open generic type instances to be delegated to a custom factory set by the user:\r\n\r\n\u003e Expose another builder on top of the ServiceCollection that\u0027s specific to the built in container. That puts you in the category of being tied to a specific container implementation.\r\n\r\nThis small additional feature being added to the native provider, and arguably useful in its own right, would then unlock a larger additional feature being provided for the native service provider, through community packages (or app specific implementations) namely - child container behaviour - giving some users less of a need to switch away from the native service provider - when they have been generally happy with its performance, with the caveat that usage of such \"advanced\" features may tie you more strongly to the native provider and make it more difficult for you to switch (if you wanted too) in future.",
                                           "updatedAt":  "2020-11-28T22:03:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNzQ3NjQxNA==",
                                           "createdAt":  "2020-12-02T20:27:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "As for the `ServiceDescriptor` api changes, I would strongly recommend while doing these changes to also add the concept of ownership with a flag like `ExternalOwnership` (somewhat mirrorring `ExternallyOwned()` in AutoFac), this would make cross wiring at the descriptor level (for a unified and overridable service graph) much more feasible.\r\n\r\nIf it would require another api proposal to do so we should.",
                                           "updatedAt":  "2020-12-02T20:27:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMjg0ODYwMw==",
                                           "createdAt":  "2021-03-19T13:52:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "@MithrilMan I\u0027ve addressed the \"singleton open generic\" type registration issue now, so that when resolving from the child service provider, if the type being resolved matches an open generic registration that is registered at parent (and not child) level - the request is forwarded to the parent service provider for resolution - so you get the same singleton instance. It\u0027s over [here](https://github.com/dazinator/Dazinator.Extensions.DependencyInjection/blob/develop/src/DependencyInjection.ChildContainers/README.md#singleton-open-generic-registrations) if you wanted to try it out. It does add a tiny bit of overhead when resolving services from a child container, but I\u0027ve tried to keep that as small as possible, and it\u0027s the best I can come up with given current status of api\u0027s involved.",
                                           "updatedAt":  "2021-03-19T13:55:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMjkyODY2NA==",
                                           "createdAt":  "2021-03-19T15:47:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MithrilMan",
                                           "body":  "@dazinator thanks, I\u0027ve solved for my use case but I\u0027ll take a look.",
                                           "updatedAt":  "2021-03-19T15:47:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41Pjy1",
                                           "createdAt":  "2021-08-05T08:30:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDlszA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "cmxl",
                                                                               "createdAt":  "2022-11-18T09:16:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "he-dev",
                                                                               "createdAt":  "2023-08-14T15:58:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "AKA285066112",
                                           "body":  "This is the cause of  **.net core** self-death ",
                                           "updatedAt":  "2021-08-05T08:30:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41PltN",
                                           "createdAt":  "2021-08-05T08:42:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDls3w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "he-dev",
                                                                               "createdAt":  "2023-08-14T15:58:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This one bug Doubtful... There are also ways to do this on .NET Core with other DI containers.",
                                           "updatedAt":  "2021-08-05T08:42:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41P4Vz",
                                           "createdAt":  "2021-08-05T10:41:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "The only workaround I could find was to:-\r\n1. Examine the `ServiceDescriptors` before the service provider is built, and harvest Open Type Generic descriptors.\r\n2. Use the information gleaned in step 1, to construct a decorator for the original IServiceProvider, that intercepts `GetService` requests and identifies if the service being requested relates to an open generic type descriptor. The result of this can be lazily cached by type for a perf boost. to avoid checking each time. If it is, have the decorator construct or return the instance from wherever you need it to.\r\n3. Swap out the original `IServiceProvider` usage in your app for the decorated one. This is not as easy as it should be and led me to other issues. YMMV\r\n\r\nI use this approach [here](https://github.com/dazinator/Dazinator.Extensions.DependencyInjection/blob/develop/src/DependencyInjection.ReRouting/ReRoutingServiceProvider.cs) with tests [here](https://github.com/dazinator/Dazinator.Extensions.DependencyInjection/blob/develop/src/DependencyInjection.Tests/ReRouting/ReRoutingServiceProviderTests.cs)\r\n",
                                           "updatedAt":  "2021-08-05T10:52:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47yIOI",
                                           "createdAt":  "2021-12-30T11:54:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDltHA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "he-dev",
                                                                               "createdAt":  "2023-08-14T15:59:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "retterbot",
                                           "body":  "@tillig this is something that `Autofac` does out of the box, the `RegisterGeneric` factory delegate has a types parameter. But just knowing the requested type would be enough.\r\n\r\nhttps://autofac.readthedocs.io/en/latest/register/registration.html#open-generic-components",
                                           "updatedAt":  "2021-12-30T11:54:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47ycrB",
                                           "createdAt":  "2021-12-30T15:38:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "@tillig just a minor point of clarification:\r\n\r\n\u003e `ExternallyOwned` has nothing to do with open generics or specifically supporting that. `ExternallyOwned` is about whether, once you resolve a concrete _closed generic_, the Autofac lifetime scope tracks and manages disposal. It\u0027s an opt-out.\r\n\r\nI do understand the usage of ExternallyOwned in Autofac, I mentioned it because singleton instances (created outside of the container) then registered with MS DI are ExternallyOwned.  Disposing of the ServiceProvider does \r\nnot dispose them. Therefore when registering singletons you can create an instance in advance and register that instance to take control of its lifetime. However for Open Generic registrations this is not possible because both features are lacking: 1) ability to take control of creating the instance, 2) ability to specify that the created instance is ExternallyOwned. \r\n\r\nThe following is not aimed at anyone, but just my general thought on the topic still after all this time. As a consumer, its great that containers conform to a standard, but its not great that the standard limits some kinds of registrations over others making them inherently less useful or desirable. For example registering a closed singleton generic type I can take control of instance creation and lifetime. Registering a singleton open generic type I can\u0027t. I lack all control over instance creation and whether the container owns those instances. Why the bias - are we saying that in one scenario its useful and the other it never is? ",
                                           "updatedAt":  "2021-12-30T15:46:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47ygHw",
                                           "createdAt":  "2021-12-30T16:17:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIJyHw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-03-02T07:19:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tillig",
                                           "body":  "@brian-tygotech You\u0027re correct, Autofac does support it _now_. At the time of my comment we were working on getting the 6.0 release out the door and a lot was going on. That feature was added in the 6.0 release a couple of weeks before my comment and in the shuffle I\u0027d forgotten. Sorry. My brain was still in 5.x land at the time.\r\n\r\nRegardless, I\u0027m still pretty much in the same position I was [when I made that original comment](https://github.com/dotnet/runtime/issues/41050#issuecomment-698385042):\r\n\r\n\u003e I think the feature is interesting, for some folks it is probably valuable, but I don\u0027t think it should be added to the MS DI container. I think the MS DI container should stay as basic as possible to allow easier conformance. I\u0027d say if someone wants to use a feature like this, it could be in a more fully-featured backing container.",
                                           "updatedAt":  "2021-12-30T16:17:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47yxhb",
                                           "createdAt":  "2021-12-30T20:06:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "retterbot",
                                           "body":  "@tillig yes, I now understand what you are saying in regard to the MS DI container being _the_ DI container specification for the `dotnet` framework and so adding a new feature causes issues for every conforming container.\r\n\r\nHowever what I would say is that now the framework has a pretty good DI container it\u0027s starting to become embedded into lots of libraries and so although it\u0027s original aims may have been to be a simple container, developers seem to have other aspirations for it.\r\n\r\nI do appreciate that it\u0027s possible to populate an  `Autofac` container with an `IServiceCollection` and use both kinds of registration, but having tried it and being a diehard `Autofac` fan for almost a decade it just felt messy to me. These days we don\u0027t have any choice but to register services through an `IServiceCollection` because libraries are now rapidly adopting it, so you are left with this nasty chimera container, or that\u0027s how it feels to me.\r\n\r\nI also get that this is a somewhat esoteric feature, but not having it causes two specific issues:\r\n\r\n- It is very hard to register generic components generated at runtime such as proxies, the most likely reason one might want to do this is to register fakes in test code.\r\n- The workaround is to create a non-generic factory that knows how to create the generic that one wants to create and inject that instead, but this is a code change and to me feels similarly bad to injecting the container itself.\r\n\r\nAll I\u0027m asking is that rather than making this a hard no, you leave the door open and consider putting it on the roadmap. Thanks. ",
                                           "updatedAt":  "2021-12-30T20:06:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47yykX",
                                           "createdAt":  "2021-12-30T20:22:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVY4jw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-06-05T01:43:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tillig",
                                           "body":  "If the argument is that libraries are looking for a way to register a factory delegate for an open generic... I\u0027m thinking the library may be doing a bit too much. I\u0027ll stand by the notion that the MS container should be lowest common denominator. Libraries should focus on providing _the inversion of control required to support DI_ and focus less on the specific registrations. And, yeah, I get the desire to have the glue \"convenience methods\" of registration, but I think those are separate adapter libraries for specific DI containers, not core functions in your main library.\r\n\r\nThere\u0027s a lot of history about arguing the confirming container point that goes back before it even came out. It\u0027s not worth rehashing it all here, but if you search a little, you\u0027ll find a lot of threads just like this where some folks want the MS DI container to have a lot of functionality and others (like me) think it should stay as minimal as possible.",
                                           "updatedAt":  "2021-12-30T20:22:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48AbS9",
                                           "createdAt":  "2022-01-06T16:53:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "retterbot",
                                           "body":  "I think my argument was that people are looking to converge on this as\n*the* dotnet\nDI container. However, I appreciate that there is a lot more history to\nthis that I\u0027m aware of.\n\nOn Thu, 30 Dec 2021 at 20:22, Travis Illig ***@***.***\u003e wrote:\n\n\u003e If the argument is that libraries are looking for a way to register a\n\u003e factory delegate for an open generic... I\u0027m thinking the library may be\n\u003e doing a bit too much. I\u0027ll stand by the notion that the MS container should\n\u003e be lowest common denominator. Libraries should focus on providing *the\n\u003e inversion of control required to support DI* and focus less on the\n\u003e specific registrations. And, yeah, I get the desire to have the glue\n\u003e \"convenience methods\" of registration, but I think those are separate\n\u003e adapter libraries for specific DI containers, not core functions in your\n\u003e main library.\n\u003e\n\u003e There\u0027s a lot of history about arguing the confirming container point that\n\u003e goes back before it even came out. It\u0027s not worth rehashing it all here,\n\u003e but if you search a little, you\u0027ll find a lot of threads just like this\n\u003e where some folks want the MS DI container to have a lot of functionality\n\u003e and others (like me) think it should stay as minimal as possible.\n\u003e\n\u003e —\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/dotnet/runtime/issues/41050#issuecomment-1003170071\u003e,\n\u003e or unsubscribe\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AVOUDMWI2RWQFWHXRXSYO33UTS5QPANCNFSM4QFHQ7KA\u003e\n\u003e .\n\u003e Triage notifications on the go with GitHub Mobile for iOS\n\u003e \u003chttps://apps.apple.com/app/apple-store/id1477376905?ct=notification-email\u0026mt=8\u0026pt=524675\u003e\n\u003e or Android\n\u003e \u003chttps://play.google.com/store/apps/details?id=com.github.android\u0026referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub\u003e.\n\u003e\n\u003e You are receiving this because you were mentioned.Message ID:\n\u003e ***@***.***\u003e\n\u003e\n",
                                           "updatedAt":  "2022-01-06T16:53:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5b-Q5q",
                                           "createdAt":  "2023-05-11T01:35:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIJyGw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "leonardoporro",
                                                                               "createdAt":  "2024-09-30T13:34:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-03-02T07:18:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "EvilVir",
                                           "body":  "I\u0027ll support argument that .NET\u0027s implementation should NOT be minimal. It\u0027s everywhere: examples, tutorials, documentation and as base of other .NET Core\u0027s libraries. So in general this solution is *default* now in .NET world, yet crippled. At this point in time, OTHER libraries should release compatibility patches if they want to be used as .NET\u0027s DI replacements IMHO.\r\n\r\nAnyway, going back to the original problem, what about some kind of fallback factory for ALL unresolved types?\r\n\r\n```\r\nAddLastChanceResolver(this IServiceCollection services, Func\u003cServiceProvider, Type, object?\u003e factoryDelegate); // If null then current sad path is taken (eg. exception is thrown) if not null then this instance is used.\r\n```",
                                           "updatedAt":  "2023-05-11T01:36:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5b_WXl",
                                           "createdAt":  "2023-05-11T04:55:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "If the application calls AddLastChanceResolver, how would the DI container implementation of IServiceProviderIsService (\u003chttps://github.com/dotnet/runtime/pull/54047\u003e) know which types are available from the last-chance resolver?  Would the container have to not provide IServiceProviderIsService if AddLastChanceResolver has been called?",
                                           "updatedAt":  "2023-05-11T04:55:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cAvbm",
                                           "createdAt":  "2023-05-11T09:56:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EvilVir",
                                           "body":  "Well it can be another delegate, that returns bool or instead method can take type of a class that would implement some ILastChanceResolver that would have both methods on it. Even better as then such type could be registered as yet another service and take full advantage of DI.\r\n\r\nHaving methods like IsSupported(Type) is common pattern when it comes to factories (eg. JsonConverterFactory etc.). ",
                                           "updatedAt":  "2023-05-11T09:56:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mUG7p",
                                           "createdAt":  "2023-09-12T21:59:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD8sWpg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2023-09-12T23:09:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fjmorel",
                                                                               "createdAt":  "2023-09-13T17:49:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gus-loaded",
                                                                               "createdAt":  "2023-12-07T02:21:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "frankracis-litmos",
                                                                               "createdAt":  "2024-03-13T14:36:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nullpainter",
                                                                               "createdAt":  "2024-07-17T03:51:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BrunoJuchli",
                                                                               "createdAt":  "2024-07-17T15:28:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "epsitec",
                                                                               "createdAt":  "2024-11-27T09:33:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "peabnuts123",
                                           "body":  "\u003e Unless the stance of Microsoft [here](https://github.com/aspnet/DependencyInjection/issues/498), [here](https://github.com/dotnet/extensions/issues/478) or [here](https://github.com/aspnet/DependencyInjection/issues/474) changed, this isn\u0027t happening.\r\n\u003e \r\n\u003e A good summary statement from @pakrym ([Source](https://github.com/dotnet/extensions/issues/478#issuecomment-440061954)):\r\n\u003e \r\n\u003e \u003e We haven\u0027t broken other service provider implementation since 1.0 and this feature is certainly not worth it. What it\u0027s trying to accomplish already exists in other providers\r\n\u003e \r\n\u003e While it\u0027s not a breaking change for _consumers_, they don\u0027t want a breaking change for other DI _implementers_ who would need to support the new typed implementation factory API. You correctly identified this problem in your \"Risks\" section.\r\n\u003e \r\n\u003e For reference, [it\u0027s still fairly popular question on StackOverflow](https://stackoverflow.com/questions/39029344) with no great answer.\r\n\r\nA lot of history here so I\u0027ll reply to just this comment which as far as I can tell is the overarching reason that this (and other issues) can\u0027t get any traction. Does this not create a bit of a \"death by 1000 cuts\" scenario? If the service provider system can ONLY tolerate huge, necessary changes, how can it ever improve? Even if there are 100 smaller changes that would collectively make up a huge necessary change, they can\u0027t be made. This seems like an ecosystem problem if nobody is capable of making any changes to keep their implementation up-to-date. I understand that implementers need to match a spec for consumers benefit, but surely this cannot be used to keep the service implementation the same forever? What about accepting API changes, and then targeting them all for a future release (such as .NET 9 or 10)? Could implementers not implement these API changes with sufficient warning, much like any other API change? ",
                                           "updatedAt":  "2023-09-12T21:59:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sP5ZW",
                                           "createdAt":  "2023-11-17T10:23:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVYrvA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BrunoJuchli",
                                                                               "createdAt":  "2024-07-17T15:27:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "asvishnyakov",
                                                                               "createdAt":  "2024-10-23T15:16:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wvpm",
                                                                               "createdAt":  "2024-11-03T20:33:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-06-05T00:55:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "In .NET 8, Microsoft.Extensions.DependencyInjection now supports keyed service registrations (\u003chttps://github.com/dotnet/runtime/issues/64427\u003e), which shows it is not impossible to add new features to ServiceDescriptor even if they then need to be supported in each IServiceProviderFactory\\\u003cTContainerBuilder\\\u003e implementation.",
                                           "updatedAt":  "2023-11-17T10:23:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sRNaS",
                                           "createdAt":  "2023-11-17T13:39:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tillig",
                                           "body":  "Counterpoint: it may be that not all `IServiceProviderFactory\u003cTContainerBuilder\u003e` implementations can/will support keyed services in the way they\u0027ve been added (the `AnyKey` behavior is... _complex_) so by adding more features to the conforming container you slowly cut down your DI options until only the MS DI container is left.",
                                           "updatedAt":  "2023-11-17T13:39:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ODRM-",
                                           "createdAt":  "2024-09-30T13:37:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "leonardoporro",
                                           "body":  "What about adding a generic factory class instead of lambda?\r\n\r\n`services.AddServiceFactory(typeof(MyService\u003c\u003e), typeof(MyServiceFactory\u003c\u003e))`\r\n\r\nwhere `MyServiceFactory\u003cT\u003e` is `IServiceFactory\u003cT\u003e`\r\n?\r\nif the registered type is IServiceFactory, then there would be an extra step of calling Create().",
                                           "updatedAt":  "2024-09-30T13:37:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OQXHC",
                                           "createdAt":  "2024-10-01T18:08:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wvpm",
                                           "body":  "\u003e What about adding a generic factory class instead of lambda?\r\n\u003e \r\n\u003e `services.AddServiceFactory(typeof(MyService\u003c\u003e), typeof(MyServiceFactory\u003c\u003e))`\r\n\u003e \r\n\u003e where `MyServiceFactory\u003cT\u003e` is `IServiceFactory\u003cT\u003e` ? if the registered type is IServiceFactory, then there would be an extra step of calling Create().\r\n\r\nWhat is a `IServiceFactory\u003cT\u003e`? (Preferably link to documentation)\r\nWhy would you prefer a generic factory class over the proposed `Func\u003c\u003e` solution?\r\n",
                                           "updatedAt":  "2024-10-01T18:08:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jIqed",
                                           "createdAt":  "2025-03-19T14:57:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "For those wanting support for open generics, has the need for that gone away or diminished due to support for keyed services?",
                                           "updatedAt":  "2025-03-19T14:57:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jIyi2",
                                           "createdAt":  "2025-03-19T15:06:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Chakrygin",
                                           "body":  "@steveharter No. It isn\u0027t possible to register a logger factory for example:\n\n```cs\nservices.AddSingleton(typeof(ILogger\u003c\u003e), serviceProvider =\u003e\n{\n    // How to create instance?\n});\n```",
                                           "updatedAt":  "2025-03-19T15:06:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jNl-G",
                                           "createdAt":  "2025-03-19T21:54:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "\u003e [@steveharter](https://github.com/steveharter) No. It isn\u0027t possible to register a logger factory for example:\n\u003e \n\u003e services.AddSingleton(typeof(ILogger\u003c\u003e), serviceProvider =\u003e\n\u003e {\n\u003e     // How to create instance?\n\u003e });\n\nWhy not just register an open generic type implementation here instead of a factory delegate?",
                                           "updatedAt":  "2025-03-19T21:54:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jTTOX",
                                           "createdAt":  "2025-03-20T09:36:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVYrow==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KalleOlaviNiemitalo",
                                                                               "createdAt":  "2025-03-20T09:54:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-06-05T00:55:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Chakrygin",
                                           "body":  "An open generic type doesn\u0027t allow to choose implementation type based on generic type parameter. Logger just an example.\n\n```cs\nservices.AddSingleton(typeof(IMySomeService\u003c\u003e), (serviceProvider, serviceType) =\u003e\n{\n    var serviceTypeParameter = serviceType.Parameters.Single();\n    var mySomeServiceGenericType = serviceTypeParameter.ParameterType.IsStruct\n        ? typeof(MySomeServiceForStruct\u003c\u003e)\n        : typeof(MySomeServiceForClass\u003c\u003e);\n    var mySomeServiceType = mySomeServiceGenericType.MakeGenericType(serviceTypeParameter.ParameterType);\n\n    return ActivatorUtilities.CreateInstance(serviceProvider, mySomeServiceType);\n});\n```",
                                           "updatedAt":  "2025-03-20T09:36:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jgrHc",
                                           "createdAt":  "2025-03-21T12:39:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVY6-w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-06-05T01:52:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dazinator",
                                           "body":  "@Chakrygin its not nice, but one workaround on a case by case basis is to use a proxy/decorator combination. Could be workable if this is very niche.\n\n```\n// Define a proxy/decorator implementation for the open generic interface\npublic class ConditionalServiceProxy\u003cT\u003e : IMySomeService\u003cT\u003e\n{\n    private readonly IMySomeService\u003cT\u003e _implementation;\n\n    public ConditionalServiceProxy(IServiceProvider serviceProvider)\n    {\n        // Determine which implementation to use based on T\n        if (typeof(T).IsValueType)\n        {\n            _implementation = (IMySomeService\u003cT\u003e)ActivatorUtilities.CreateInstance(\n                serviceProvider, \n                typeof(MySomeServiceForStruct\u003c\u003e).MakeGenericType(typeof(T)));\n        }\n        else\n        {\n            _implementation = (IMySomeService\u003cT\u003e)ActivatorUtilities.CreateInstance(\n                serviceProvider, \n                typeof(MySomeServiceForClass\u003c\u003e).MakeGenericType(typeof(T)));\n        }\n    }\n\n    // Delegate all interface methods to the actual implementation\n    public void SomeMethod() =\u003e _implementation.SomeMethod();\n    // ... other interface methods\n}\n\n```\n\n```\nservices.AddSingleton(typeof(IMySomeService\u003c\u003e), typeof(ConditionalServiceProxy\u003c\u003e));\n```\n\nIts not as clean, and adds to the callstack. Maybe you already considered it. I agree the DI system could be better here.",
                                           "updatedAt":  "2025-03-21T12:40:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vX6-5",
                                           "createdAt":  "2025-06-05T00:56:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dmillerkeyfive",
                                           "body":  "This is so painfully needed. Please consider it for .NET 10.",
                                           "updatedAt":  "2025-06-05T00:56:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vYX_L",
                                           "createdAt":  "2025-06-05T01:26:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEegjKQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-06-05T01:53:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "LucStr",
                                                                               "createdAt":  "2025-06-05T07:38:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "spicy-tomato",
                                                                               "createdAt":  "2025-08-16T09:05:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "It’s not happening in .NET 10. You can look at the issue milestones to get clues as to what is being actively considered in a release of .NET",
                                           "updatedAt":  "2025-06-05T01:28:09Z"
                                       }
                                   ],
                         "totalCount":  59
                     },
        "title":  "Dependency Injection of Open Generics via factory",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51270",
        "createdAt":  "2020-10-29T17:41:44Z",
        "number":  51270,
        "author":  "mkArtakMSFT",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-04-22T23:33:40Z",
        "body":  "- Huge confusing factor, not clear when registering how it’s used and not clear when using how it was registered.  \r\n- DI Explorer, something to explore the services in my app and what it is.  \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMOjKKA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxODkxMzczNA==",
                                           "createdAt":  "2020-10-29T17:41:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Thanks for contacting us.\nWe\u0027re moving this issue to the `Next sprint planning` milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
                                           "updatedAt":  "2020-10-29T17:41:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MDEyNzEwMQ==",
                                           "createdAt":  "2021-02-16T21:25:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotalik",
                                           "body":  "Notes:\r\n- Consider changing message to put message class before service\r\n- Make poll for team internally for which error message is better\r\n- Dump callsite graph for DI\r\n- Autofac has this feature (dot files)\r\n- Event source today that dumps out DI json, can potentially reuse for object graph\r\n- Option to resolve DI earlier for debugging.",
                                           "updatedAt":  "2021-02-16T21:25:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTgzMzgwNw==",
                                           "createdAt":  "2021-04-14T21:08:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-04-14T21:08:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxOTgzNDA1Mw==",
                                           "createdAt":  "2021-04-14T21:08:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotalik",
                                           "body":  "@davidfowl recommended we transfer this to runtime.",
                                           "updatedAt":  "2021-04-14T21:08:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMDU2MjQ3Mg==",
                                           "createdAt":  "2021-04-15T16:26:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n- Huge confusing factor, not clear when registering how it’s used and not clear when using how it was registered.  \r\n- DI Explorer, something to explore the services in my app and what it is.  \r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emkArtakMSFT\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-DependencyInjection`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-15T16:26:04Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Simplify DI-related investigations",
        "labels":  [
                       "feature-request",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45497",
        "createdAt":  "2020-12-02T20:19:13Z",
        "number":  45497,
        "author":  "NinoFloris",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4M52Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "robertvanhoesel",
                                            "createdAt":  "2020-12-03T00:30:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dazinator",
                                            "createdAt":  "2020-12-04T22:04:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2024-03-14T06:40:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2024-05-28T09:02:27Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2022-02-27T13:51:47Z",
        "body":  "## Proposed API \r\nI want to propose one api addition to MS DI which would be useful for use-cases like service decoration, debug/logging service requests, cross-wiring, child containers and scope tracking. \r\n\r\n ```diff\r\npublic class ServiceProviderOptions\r\n{\r\n          ...\r\n+        /// \u003csummary\u003e\r\n+        /// Enables any service requests or IServiceProvider arguments to be delegated to the returned IServiceProvider.\r\n+        /// \u003c/summary\u003e\r\n+        public Func\u003cIServiceProvider, IServiceProvider\u003e? ServiceProviderFactory { get; set; }\r\n}\r\n```\r\n\r\nNaming is of course up for discussion, `ServiceProviderFactory` is an overloaded term but I didn\u0027t directly find any precedent for calling anything a `Decorator` in dotnet/runtime so I left it like this for now.\r\n\r\nAdding this specific api at this specific spot I believe is the smallest change, has the best chance of being generally useful, and as an added bonus does not directly add to the complexity of the shared specification for all container implementations (though a cursory look through other container\u0027s implementations of IServiceProvider looks to be a regular service that can be decorated readily).\r\n\r\n## Background and Motivation\r\nProper child containers is the main reason for us as a company to propose this api.\r\n\r\nFor the issues around implementing child containers and more generally cross-wiring I would point to some links by @dazinator (Dotnettency author), and benfoster (Saaskit author), there is plenty more if you search google and github.\r\n\r\n- https://github.com/saaskit/saaskit/issues/67\r\n- https://github.com/saaskit/saaskit/issues/68\r\n- https://github.com/dotnet/runtime/issues/41050#issuecomment-698241929\r\n- https://github.com/dazinator/Dazinator.Extensions.DependencyInjection/tree/develop/src/DependencyInjection.ChildContainers\r\n\r\nNeedless to say building this right is a delicate job with any container, however MS DI with its immutable design could, with some tweaks, be the most intuitively understandable and stable implementation out there for building child containers. Having a mutable service graph adds **a lot** more cognitive complexity.\r\n\r\nMoving to scope tracking, this is important for orderly disposal of the container as these may not live for the duration of the app. Our software has tenancy support just like Orchard which we like to run on MS DI, the integration with the framework, stability, immutable service graph and performance are all very good.\r\nSpecifically the support of soft reload allows us to reload tenant configuration without rebooting the entire app, we keep serving requests with the old container until the soft reload is done, at which point we swap the containers. \r\n\r\nToday after we do that swap with the old container we are forced to choose between:\r\n\r\n- Interruption of any requests running with the old container that may still have scopes active, disposing `ServiceProvider` (note, the actual type) breaks all scopes which is unacceptable to us, it would defeat the soft part in \u0027soft reload\u0027.\r\n- No disposal of the old `ServiceProvider`, meaning singletons may never be fully cleaned up, we\u0027re choosing to do this today.\r\n\r\nThe issue is we have no way of tracking active scopes (and I would find proposing an api for it questionable).\r\n\r\nHaving the ability to decorate `IServiceProvider` we can replace any requests for `IServiceProviderFactory` with a decorated version counting (increment) all `CreateScope()` calls, giving out decorated `IServiceScope` instances counting (decrement) all scope disposals. Now when our old container should be disposed we can have the last scope to dispose do so for us!\r\n\r\nA prototype implementation of this can be found in the tests:\r\nhttps://github.com/NinoFloris/dotnet-runtime/blob/76fd089360e2e4fa76f05cbfa8a7c08345fd1a40/src/libraries/Microsoft.Extensions.DependencyInjection/tests/DI.Tests/ServiceProviderFactoryTests.cs#L64-L137\r\n\r\n## PR\r\nI created a \u0027prototype\u0027 branch at https://github.com/NinoFloris/dotnet-runtime/tree/feature/service-provider-decorator which is complete, tested, and already handles all the fun re-entrant and concurrent cases.\r\n\r\nI\u0027m not ready to open a PR just yet as I want to flesh out a *reliable* child container implementation on top of this new api first, which will be at https://github.com/NinoFloris/dotnet-runtime/tree/example/child-container \r\nThe most straightforward way to do that — until we have the [ServiceDescriptor api changes](https://github.com/dotnet/runtime/issues/41050) — would be to cross-wire parent and child at the `GetService` level, this has the small downside of having a split service graph between two containers, meaning you cannot add or override a parent service dependency in a child container, but it will correctly handle any open generics and (singleton) disposal behavior.\r\n\r\nRegardless of this proposal gaining any approval I will round off our internal child container implementation based on this work but I would definitely like to see these changes \u0027upstreamed\u0027 :)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLpfoCQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNzQ3MTk5OQ==",
                                           "createdAt":  "2020-12-02T20:19:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Proposed API \r\nI want to propose one api addition to MS DI which would be useful for use-cases like service decoration, debug/logging service requests, cross-wiring, child containers and scope tracking. \r\n\r\n ```diff\r\npublic class ServiceProviderOptions\r\n{\r\n          ...\r\n+        /// \u003csummary\u003e\r\n+        /// Enables any service requests or IServiceProvider arguments to be delegated to the returned IServiceProvider.\r\n+        /// \u003c/summary\u003e\r\n+        public Func\u003cIServiceProvider, IServiceProvider\u003e? ServiceProviderFactory { get; set; }\r\n}\r\n```\r\n\r\nNaming is of course up for discussion, `ServiceProviderFactory` is an overloaded term but I didn\u0027t directly find any precedent for calling anything a `Decorator` in dotnet/runtime so I left it like this for now.\r\n\r\nAdding this specific api at this specific spot I believe is the smallest change, has the best chance of being generally useful, and as an added bonus does not directly add to the complexity of the shared specification for all container implementations (though a cursory look through other container\u0027s implementations of IServiceProvider looks to be a regular service that can be decorated readily).\r\n\r\n## Background and Motivation\r\nProper child containers is the main reason for us as a company to propose this api.\r\n\r\nFor the issues around implementing child containers and more generally cross-wiring I would point to some links by @dazinator (Dotnettency author), and benfoster (Saaskit author), there is plenty more if you search google and github.\r\n\r\n- https://github.com/saaskit/saaskit/issues/67\r\n- https://github.com/saaskit/saaskit/issues/68\r\n- https://github.com/dotnet/runtime/issues/41050#issuecomment-698241929\r\n- https://github.com/dazinator/Dazinator.Extensions.DependencyInjection/tree/develop/src/DependencyInjection.ChildContainers\r\n\r\nNeedless to say building this right is a delicate job with any container, however MS DI with its immutable design could, with some tweaks, be the most intuitively understandable and stable implementation out there for building child containers. Having a mutable service graph adds **a lot** more cognitive complexity.\r\n\r\nMoving to scope tracking, this is important for orderly disposal of the container as these may not live for the duration of the app. Our software has tenancy support just like Orchard which we like to run on MS DI, the integration with the framework, stability, immutable service graph and performance are all very good.\r\nSpecifically the support of soft reload allows us to reload tenant configuration without rebooting the entire app, we keep serving requests with the old container until the soft reload is done, at which point we swap the containers. \r\n\r\nToday after we do that swap with the old container we are forced to choose between:\r\n\r\n- Interruption of any requests running with the old container that may still have scopes active, disposing `ServiceProvider` (note, the actual type) breaks all scopes which is unacceptable to us, it would defeat the soft part in \u0027soft reload\u0027.\r\n- No disposal of the old `ServiceProvider`, meaning singletons may never be fully cleaned up, we\u0027re choosing to do this today.\r\n\r\nThe issue is we have no way of tracking active scopes (and I would find proposing an api for it questionable).\r\n\r\nHaving the ability to decorate `IServiceProvider` we can replace any requests for `IServiceProviderFactory` with a decorated version counting (increment) all `CreateScope()` calls, giving out decorated `IServiceScope` instances counting (decrement) all scope disposals. Now when our old container should be disposed we can have the last scope to dispose do so for us!\r\n\r\nA prototype implementation of this can be found in the tests:\r\nhttps://github.com/NinoFloris/dotnet-runtime/blob/76fd089360e2e4fa76f05cbfa8a7c08345fd1a40/src/libraries/Microsoft.Extensions.DependencyInjection/tests/DI.Tests/ServiceProviderFactoryTests.cs#L64-L137\r\n\r\n## PR\r\nI created a \u0027prototype\u0027 branch at https://github.com/NinoFloris/dotnet-runtime/tree/feature/service-provider-decorator which is complete, tested, and already handles all the fun re-entrant and concurrent cases, this serves a.\r\n\r\nI\u0027m not ready to open a PR just yet as I want to flesh out a *reliable* child container implementation on top of this new api first, which will be at https://github.com/NinoFloris/dotnet-runtime/tree/example/child-container \r\nThe most straightforward way to do that — until we have the [ServiceDescriptor api changes](https://github.com/dotnet/runtime/issues/41050) — would be to cross-wire parent and child at the `GetService` level, this has the small downside of having a split service graph between two containers, meaning you cannot add or override a parent service dependency in a child container, but it will correctly handle any open generics and (singleton) disposal behavior.\r\n\r\nRegardless of this proposal gaining any approval I will round off our internal child container implementation based on this work but I would definitely like to see these changes \u0027upstreamed\u0027 :)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNinoFloris\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-DependencyInjection`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-12-02T20:19:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNzUxMTUwNA==",
                                           "createdAt":  "2020-12-02T21:37:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I think avoiding service descriptor API changes is best here so this has that going for it. The other thing I would say is that it needs to be free when this setting is null.\r\n\r\nI also don\u0027t quite understand how this extensibility solves the things described in the issue so I\u0027d need to see some more concrete ways this solves those problems.",
                                           "updatedAt":  "2020-12-02T21:37:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNzU0NjE4OA==",
                                           "createdAt":  "2020-12-02T22:57:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "@NinoFloris \r\nI went down the same path as you - in terms of a scope tracking IServiceProvider, capable of being asynchronously disposed - that safely waits for any active scopes to become freed. I had discussions somewhere with @davidfowl at the time about this general concept, will see if I can dig it out - I couldn\u0027t sell it very well!\r\n\r\nYou can find my (working) implementation here: \r\nhttps://github.com/dazinator/serviceprovider-experiment/tree/master/src\r\n\r\nI was planning on migrating that accross to Dazinator.Extensions.DependencyInjection and releasing it on nuget.\r\n\r\nRelated issue I had with the framework - that I had to workaround in my experiment above - is this whole issue of \"decorating\" not really being possible\r\nhttps://github.com/dotnet/runtime/issues/38240\r\n\r\nFinal note, if you just want to reload middleware pipeline based on a change token signalling (like options monitor or config) you might find this useful\r\nhttps://github.com/dazinator/Dazinator.AspNetCore.Builder.ReloadablePipeline\r\n\r\n",
                                           "updatedAt":  "2020-12-02T23:03:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNzU2MzI3MQ==",
                                           "createdAt":  "2020-12-02T23:44:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "Thanks @davidfowl that\u0027s an encouraging reply!\r\n\r\nI\u0027ll go through it piece by piece.\r\n\r\n\u003eI think avoiding service descriptor API changes is best here so this has that going for it.\r\n\r\nI hope you didn\u0027t mind the length of the proposal too much ;) it was precisely because I know how hard it is (something something constrained open generics) to get any changes into this area, really glad to hear this!\r\n\r\n\u003eThe other thing I would say is that it needs to be free when this setting is null.\r\n\r\nUnderstood and I wouldn\u0027t want it any other way, if you take a look at ILEmit as an example:\r\n\r\n```diff \r\n- // [return] ProviderScope\r\n+ // [return] ProviderScope.ServiceProvider\r\n  argument.Generator.Emit(OpCodes.Ldarg_1);\r\n+ argument.Generator.Emit(OpCodes.Callvirt, ServiceProviderGetter); \r\n```\r\nhttps://github.com/NinoFloris/dotnet-runtime/commit/76fd089360e2e4fa76f05cbfa8a7c08345fd1a40#diff-fbaf59e20d1ca7916fb25c4e1b7a4f272024bf38fcd18d407d91dfacd14cf6a8R196-R198\r\nhttps://github.com/NinoFloris/dotnet-runtime/commit/76fd089360e2e4fa76f05cbfa8a7c08345fd1a40#diff-fbaf59e20d1ca7916fb25c4e1b7a4f272024bf38fcd18d407d91dfacd14cf6a8R261\r\n\r\nThis is the case for all the others as well, there are no extra allocs and the additional logic to assign the `_serviceProvider` field once per scope amounts to a branch `_serviceProvider = factory is null ? this : ... ;` plus a null check per access of ServiceProvider (the latter would be avoidable but it needs some extra restructuring, creating a bigger diff)\r\n\r\n\u003eI also don\u0027t quite understand how this extensibility solves the things described in the issue so I\u0027d need to see some more concrete ways this solves those problems.\r\n\r\nI will absolutely get to that as I agree it\u0027s critical for this proposal to go anywhere.\r\n\r\n\u003eI\u0027m not ready to open a PR just yet as I want to flesh out a reliable child container implementation on top of this new api first, which will be at https://github.com/NinoFloris/dotnet-runtime/tree/example/child-container\r\n\r\nI will have an implementation you can play with and check out. I already know it would require `ServiceDescriptor` changes for a fully unified service graph but if you look past that it really is possible to create something good out of this. Slower due to the runtime overhead of managing two containers but it will be reliable and predictable.",
                                           "updatedAt":  "2020-12-02T23:50:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNzU2NDk0MQ==",
                                           "createdAt":  "2020-12-02T23:49:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "@dazinator thanks for the comment :) I know you battled with many of the same issues, at Crowded we started using .net core 1.0 alpha, back then we used StructureMap like Saaskit and like them we had an endless list of issues, around 2.0 we switched fully to MS DI where we are today. Our tenancy support is an implementation in F# and one day when all of this works without hacks I\u0027d love to open source it, it\u0027s \u0027just plumbing\u0027 but it\u0027s really good.\r\n\r\nWe\u0027re all bumping into the same limitations, for instance your experiment doesn\u0027t (and can\u0027t of course) wrap the `IServiceProvider` passed into `ServiceDescriptor` implementation factories, meaning any of those could ask for the original IServicScopeFactory and have no trouble obtaining it. Another way would be to register a type with an `IServiceProvider` or `IServiceScopeFactory` constructor argument which would again sidestep your wrapper. \r\n\r\nAll these edge cases is exactly why I opened this proposal, it\u0027s written in such a way you can hermetically decorate anything. Just take a look at some of [these tests](https://github.com/NinoFloris/dotnet-runtime/blob/76fd089360e2e4fa76f05cbfa8a7c08345fd1a40/src/libraries/Microsoft.Extensions.DependencyInjection/tests/DI.Tests/ServiceProviderFactoryTests.cs)\r\n\r\n\u003eFinal note, if you just want to reload middleware pipeline based on a change token signalling (like options monitor or config) you might find this useful\r\n\r\nI wish life was that simple ;)",
                                           "updatedAt":  "2020-12-02T23:50:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODkxNDczMQ==",
                                           "createdAt":  "2020-12-04T17:33:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "@NinoFloris \r\n\u003e We\u0027re all bumping into the same limitations, for instance your experiment doesn\u0027t (and can\u0027t of course) wrap the IServiceProvider passed into ServiceDescriptor implementation factories, meaning any of those could ask for the original IServicScopeFactory and have no trouble obtaining it. \r\n\r\nYep thats the exact hurdle I hit. I got as far as exploring the native service provider code - but props on actually working through a solution. I\u0027d love to see this feature land. Decorating the service provider seems the only way to implement scope tracking hermetically. (P.S thank you for also introducing me to the word `hermitically`!)\r\n\r\n\r\n",
                                           "updatedAt":  "2020-12-04T17:33:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NzMyNzA0NA==",
                                           "createdAt":  "2021-01-09T16:00:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "@NinoFloris - given the lack of movement on this, what are you thoughts on forking and publishing the modified package?",
                                           "updatedAt":  "2021-01-09T16:00:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NjM1NzIwMg==",
                                           "createdAt":  "2021-01-24T14:30:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBdfGZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2021-01-24T15:33:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dazinator",
                                           "body":  "@NinoFloris I\u0027ve published this as a seperate nuget package so I could continue to use it and try it out in some other projects. Hope that\u0027s ok? It\u0027s here: https://www.nuget.org/packages/Dazinator.Extensions.DependencyInjection.Microsoft/1.1.0-PullRequest0022.76",
                                           "updatedAt":  "2021-01-24T14:30:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MTcwNzI3Mw==",
                                           "createdAt":  "2021-02-18T23:40:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Related to https://github.com/dotnet/runtime/issues/36021",
                                           "updatedAt":  "2021-02-18T23:40:00Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Dependency Injection IServiceProvider Decoration",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/47607",
        "createdAt":  "2021-01-28T23:59:43Z",
        "number":  47607,
        "author":  "sebastienros",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-20T16:56:32Z",
        "body":  "In Orchard CMS which is quite allocaty, the second culprit is DI. This code path does a database request and renders the html. During that process several services are resolved, increasing the size of the scoped service dictionary.\r\n\r\nStack trace of allocations:\r\n\r\n```\r\nName                                                                                                                                                                                                                                  \tInc %\r\n Type Entry[Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCacheKey,System.Object][]                                                                                                                                   \t  7.8\r\n+ coreclr!?                                                                                                                                                                                                                           \t  7.8\r\n|+ System.Private.CoreLib.il!System.Collections.Generic.Dictionary`2[Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCacheKey,System.__Canon].Resize(int32,bool)                                                        \t  7.8\r\n||+ System.Private.CoreLib.il!System.Collections.Generic.Dictionary`2[Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCacheKey,System.__Canon].TryInsert(!0,!1,value class System.Collections.Generic.InsertionBehavior)\t  7.8\r\n|| + System.Private.CoreLib.il!System.Collections.Generic.Dictionary`2[Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCacheKey,System.__Canon].Add(!0,!1)                                                              \t  7.8\r\n||  + microsoft.extensions.dependencyinjection.il!dynamicClass.ResolveService(pMT: 00007FF84C1DFF08,pMT: 00007FF84C1D9B20)                                                                                                            \t  7.8\r\n||   + microsoft.extensions.dependencyinjection.il!dynamicClass.ResolveService(pMT: 00007FF84C1DFF08,pMT: 00007FF84C1D9B20)                                                                                                           \t  7.8\r\n||    + microsoft.extensions.dependencyinjection.abstractions.il!ServiceProviderServiceExtensions.GetRequiredService                                                                                                                  \t  4.8\r\n||    |+ microsoft.extensions.dependencyinjection.abstractions.il!ServiceProviderServiceExtensions.GetRequiredService                                                                                                                 \t  4.8\r\n||    | + orchardcore.displaymanagement.liquid!OrchardCore.DisplayManagement.Liquid.LiquidTemplateContextExtensions+\u003cEnterScopeAsync\u003ed__0.MoveNext()                                                                                  \t  4.5\r\n\r\n```\r\n\r\nAnd overall memory consumption:\r\n\r\n```\r\nName                                                                                                                                         Exc %  ExcInc %     Inc Fold                            When\r\n?!?                                                                                                                                           8.66,57215.5  11,8571,7788389CDDoDCDFED9ECFFFDGGHFFE89DY*\r\ne_sqlite3!?                                                                                                                                   4.03,088 6.1   4,7011,36762526767655664565557556565569535\r\nmicrosoft.extensions.dependencyinjection.il!dynamicClass.ResolveService(pMT: 00007FF84C1DFF08,pMT: 00007FF84C1D9B20)                          2.92,217 5.4   4,1341,907105o556655665546566567566564630o\r\norchardcore.displaymanagement!OrchardCore.DisplayManagement.Implementation.DefaultHtmlDisplay+\u003cExecuteAsync\u003ed__7.MoveNext()                   2.72,09728.1  21,4691,95400N5WWXVWVVVWSOXUWWXXVWXWWXRWN9.\r\norchardcore.contentmanagement.display!OrchardCore.ContentManagement.Display.ContentItemDisplayCoordinator+\u003cBuildDisplayAsync\u003ed__9.MoveNext() 2.31,74910.0   7,6481,6760_81BCABBBABB99CBBACBABBBCCBD92_\r\nSystem.Private.CoreLib.il!AsyncMethodBuilderCore.Start                                                                                        2.21,69071.9  54,9611,42801****************************3_\r\norchardcore.displaymanagement!OrchardCore.DisplayManagement.Views.ShapeResult+\u003cApplyImplementationAsync\u003ed__17.MoveNext()                      2.01,540 5.2   4,0081,4130o40665656555446655655656666741_\r\norchardcore.displaymanagement.liquid!OrchardCore.DisplayManagement.Liquid.Tags.HelperStatement+\u003cWriteToAsync\u003ed__4.MoveNext()                  1.91,47413.0   9,9651,38200A3FGFFEEEEEDBGEEEFEEEFFGGCDA51\r\nntoskrnl!RtlpLookupFunctionEntryForStackWalks                                                                                                 1.91,437 1.9   1,437  242__o012222223221122222o222220____\r\norchardcore.displaymanagement.liquid!LiquidTagHelperActivator.Create                                                                          1.91,428 2.3   1,7831,3710o202222222222132232222233222110\r\n```\r\n\r\nThis issue is just to raise some concern, and maybe there is nothing better to be done.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONHe8OQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTQ3NzU3MA==",
                                           "createdAt":  "2021-01-28T23:59:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-01-28T23:59:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTQ4NTQ0MQ==",
                                           "createdAt":  "2021-01-29T00:21:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIn Orchard CMS which is quite allocaty, the second culprit is DI. This code path does a database request and renders the html. During that process several services are resolved, increasing the size of the scoped service dictionary.\r\n\r\nStack trace of allocations:\r\n\r\n```\r\nName                                                                                                                                                                                                                                  \tInc %\r\n Type Entry[Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCacheKey,System.Object][]                                                                                                                                   \t  7.8\r\n+ coreclr!?                                                                                                                                                                                                                           \t  7.8\r\n|+ System.Private.CoreLib.il!System.Collections.Generic.Dictionary`2[Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCacheKey,System.__Canon].Resize(int32,bool)                                                        \t  7.8\r\n||+ System.Private.CoreLib.il!System.Collections.Generic.Dictionary`2[Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCacheKey,System.__Canon].TryInsert(!0,!1,value class System.Collections.Generic.InsertionBehavior)\t  7.8\r\n|| + System.Private.CoreLib.il!System.Collections.Generic.Dictionary`2[Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCacheKey,System.__Canon].Add(!0,!1)                                                              \t  7.8\r\n||  + microsoft.extensions.dependencyinjection.il!dynamicClass.ResolveService(pMT: 00007FF84C1DFF08,pMT: 00007FF84C1D9B20)                                                                                                            \t  7.8\r\n||   + microsoft.extensions.dependencyinjection.il!dynamicClass.ResolveService(pMT: 00007FF84C1DFF08,pMT: 00007FF84C1D9B20)                                                                                                           \t  7.8\r\n||    + microsoft.extensions.dependencyinjection.abstractions.il!ServiceProviderServiceExtensions.GetRequiredService                                                                                                                  \t  4.8\r\n||    |+ microsoft.extensions.dependencyinjection.abstractions.il!ServiceProviderServiceExtensions.GetRequiredService                                                                                                                 \t  4.8\r\n||    | + orchardcore.displaymanagement.liquid!OrchardCore.DisplayManagement.Liquid.LiquidTemplateContextExtensions+\u003cEnterScopeAsync\u003ed__0.MoveNext()                                                                                  \t  4.5\r\n\r\n```\r\n\r\nAnd overall memory consumption:\r\n\r\n```\r\nName                                                                                                                                         Exc %  ExcInc %     Inc Fold                            When\r\n?!?                                                                                                                                           8.66,57215.5  11,8571,7788389CDDoDCDFED9ECFFFDGGHFFE89DY*\r\ne_sqlite3!?                                                                                                                                   4.03,088 6.1   4,7011,36762526767655664565557556565569535\r\nmicrosoft.extensions.dependencyinjection.il!dynamicClass.ResolveService(pMT: 00007FF84C1DFF08,pMT: 00007FF84C1D9B20)                          2.92,217 5.4   4,1341,907105o556655665546566567566564630o\r\norchardcore.displaymanagement!OrchardCore.DisplayManagement.Implementation.DefaultHtmlDisplay+\u003cExecuteAsync\u003ed__7.MoveNext()                   2.72,09728.1  21,4691,95400N5WWXVWVVVWSOXUWWXXVWXWWXRWN9.\r\norchardcore.contentmanagement.display!OrchardCore.ContentManagement.Display.ContentItemDisplayCoordinator+\u003cBuildDisplayAsync\u003ed__9.MoveNext() 2.31,74910.0   7,6481,6760_81BCABBBABB99CBBACBABBBCCBD92_\r\nSystem.Private.CoreLib.il!AsyncMethodBuilderCore.Start                                                                                        2.21,69071.9  54,9611,42801****************************3_\r\norchardcore.displaymanagement!OrchardCore.DisplayManagement.Views.ShapeResult+\u003cApplyImplementationAsync\u003ed__17.MoveNext()                      2.01,540 5.2   4,0081,4130o40665656555446655655656666741_\r\norchardcore.displaymanagement.liquid!OrchardCore.DisplayManagement.Liquid.Tags.HelperStatement+\u003cWriteToAsync\u003ed__4.MoveNext()                  1.91,47413.0   9,9651,38200A3FGFFEEEEEDBGEEEFEEEFFGGCDA51\r\nntoskrnl!RtlpLookupFunctionEntryForStackWalks                                                                                                 1.91,437 1.9   1,437  242__o012222223221122222o222220____\r\norchardcore.displaymanagement.liquid!LiquidTagHelperActivator.Create                                                                          1.91,428 2.3   1,7831,3710o202222222222132232222233222110\r\n```\r\n\r\nThis issue is just to raise some concern, and maybe there is nothing better to be done.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esebastienros\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-DependencyInjection`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-01-29T00:21:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTQ5MjQyMg==",
                                           "createdAt":  "2021-01-29T00:39:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "The thing that stands out to me is the dictionary resize. We could potentially improve this by specifying a capacity like max(scoped/2, 30) something like this (I picked those numbers out of thin air)",
                                           "updatedAt":  "2021-01-29T00:39:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTU0MzAxOA==",
                                           "createdAt":  "2021-01-29T03:05:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@sebastienros - are there instructions on how to run this locally to investigate?",
                                           "updatedAt":  "2021-01-29T03:05:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTg4OTk3Nw==",
                                           "createdAt":  "2021-01-29T15:58:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sebastienros",
                                           "body":  "Here is how I do it:\r\n- clone https://github.com/orchardcms/orchardcore\r\n- in `src/OrchardCore.Cms.Web` run `dotnet run -c release`\r\n- setup the \"Blog\" recipe, with Sqlite (default)\r\n- generate some load with a tool like bombardier, on the `/about` page (the simplest one)\r\n\r\nI can help more if you need. I can also provide this scenario as a `crank` command.",
                                           "updatedAt":  "2021-01-29T15:58:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMDAyMDYxMg==",
                                           "createdAt":  "2021-03-30T08:20:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I was discussing this with @maryamariyan and one thing we might want to try is re-using the scoped dictionary. This makes some assumption that scopes look the same and we have no idea to identify similar scopes (say by an id) so we can try it out with a small pool (say number of size of number of cores). This won\u0027t help for long running scopes in things like Blazor server, or Orleans but will do 2 things:\r\n- Significantly cut down the on the allocation cost of scopes short lived scopes\r\n- Reduce dictionary resizes when the number of scoped and transient services is high, per scope\r\n\r\nWe *might* also want to keep the dictionaries to a reasonable size so we don\u0027t bloat memory (maybe calling TrimExcess if we reached some number of entries threshold).",
                                           "updatedAt":  "2021-03-30T08:20:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMDgzODM0OA==",
                                           "createdAt":  "2021-04-16T01:12:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Re-opening this as I reverted the change. I\u0027ve added an event to the event source so we can figure out just how heterogeneous or homogenous scopes are within the same container.",
                                           "updatedAt":  "2021-04-16T01:12:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4MDI2MjIwMQ==",
                                           "createdAt":  "2021-07-14T22:55:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Moving to 7.0 since this isn\u0027t a \"must have\" for 6.0.",
                                           "updatedAt":  "2021-07-14T22:55:21Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "DI allocations improvements",
        "labels":  [
                       "tenet-performance",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49209",
        "createdAt":  "2021-03-05T13:28:09Z",
        "number":  49209,
        "author":  "bitbonk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-15T23:03:13Z",
        "body":  "I have several `IHostedService` implementations that depend on another dependency `IDepedency`. \r\n\r\n```csharp\r\npublic class Worker1 : BackgroundService\r\n{\r\n    public Worker(IDependency dependency)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n```csharp\r\npublic class Worker2 : BackgroundService\r\n{\r\n    public Worker(IDependency dependency)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nNow because the implementations of `IDependency` also is something that needs to be started (before it can be used !) , run in the background and then stopped when the application stops, I thought it might be a good idea to  I implemented it also as `IHostedService`\r\n\r\n```csharp\r\npublic class Dependency : BackgroundService, IDependency\r\n{    \r\n}\r\n```\r\n\r\nSo if am careful and register the services in the right order, everything works as expected. \r\n\r\n```csharp\r\nservices.AddSingleton\u003cIDependency, Dependency\u003e();\r\nservices.AddSingleton(s =\u003e (IHostedService)s.GetRequiredService\u003cIDependency\u003e()); // quirky, but I guess that\u0027s another story\r\nservices.AddHosteService\u003cWorker1\u003e();\r\nservices.AddHosteService\u003cWorker2\u003e();\r\n```\r\n\r\n`Worker1` and `Worker2` are only created and after `Dependency` has been successfully started.\r\n\r\nNow my question is this good design? Do I use it the way it was intended? Should I really model `Dependency` as a worker service? Should worker services depend upon each other at all? If find it a bit to implicit that I have to register the services in the right order.\r\n\r\nIf this is not a good idea, what would be a good alternative?\r\n\r\nOne alternative I have thought about is to create a custom `IHostLifetime` that starts all known dependcies in `WaitForStartAsync` but that doesn\u0027t feel right either.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdz7csQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MTQxOTE5NA==",
                                           "createdAt":  "2021-03-05T13:28:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI have several `IHostedService` implementations that depend on another dependency `IDepedency`. \r\n\r\n```csharp\r\npublic class Worker1 : BackgroundService\r\n{\r\n    public Worker(IDependency dependency)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n```csharp\r\npublic class Worker2 : BackgroundService\r\n{\r\n    public Worker(IDependency dependency)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nNow because the implementations of `IDependency` also is something that needs to be started (before it can be used !) , run in the background and then stopped when the application stops, I thought it might be a good idea to  I implemented it also as `IHostedService`\r\n\r\n```csharp\r\npublic class Dependency : BackgroundService, IDependency\r\n{    \r\n}\r\n```\r\n\r\nSo if am careful and register the services in the right order, everything works as expected. \r\n\r\n```csharp\r\nservices.AddSingleton\u003cIDependency, Dependency\u003e();\r\nservices.AddSingleton(s =\u003e (IHostedService)s.GetRequiredService\u003cIDependency\u003e()); // quirky, but I guess that\u0027s another story\r\nservices.AddHosteService\u003cWorker1\u003e();\r\nservices.AddHosteService\u003cWorker2\u003e();\r\n```\r\n\r\n`Worker1` and `Worker2` are only created and after `Dependency` has been successfully started.\r\n\r\nNow my question is this good design? Do I use it the way it was intended? Should I really model `Dependency` as a worker service? If not, what would be a good alternative?\r\n\r\nOne alternative I have thought about is to create a custom `IHostLifetime` that starts all known dependcies in `WaitForStartAsync`.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebitbonk\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-DependencyInjection`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-05T13:28:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNTMzNjExMw==",
                                           "createdAt":  "2021-04-23T02:12:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Does it not work if you try below?\r\n\r\n```csharp\r\nservices.AddSingleton\u003cIDependency, Dependency\u003e();\r\nservices.AddHostedService\u003cDependency\u003e();\r\nservices.AddHostedService\u003cWorker1\u003e();\r\nservices.AddHostedService\u003cWorker2\u003e();\r\n```\r\n\r\n----\r\n\r\nUPDATE: \r\nThis suggestion won\u0027t work. I see why you tried it the way above.\r\n\r\nI\u0027ll update with another comment once I get something else.",
                                           "updatedAt":  "2021-04-23T03:56:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNjc5MDY4OQ==",
                                           "createdAt":  "2021-04-26T12:20:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB0c58w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2021-07-29T22:49:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bitbonk",
                                           "body":  "My problem is not that it doesn\u0027t work. The initial code I showed works. My problem is also not the quirky line where I have to register the same instance as two interfaces. That\u0027s just ugly code to write but I can live with that.\r\n\r\nMy problem is that it will **only** work if the three hosted services are registered in the right order.  Because hosted services are started in the order they are registered. `Worker1` and `Worker2` need to be started _after_ `Dependency` because they both depend on it and may only access `IDependency` if  `Dependency`  has been started.\r\n\r\nThis seems like bad design because usually it doesn\u0027t matter in which order you register things in the DI container. It is so easy to get wrong. \r\n\r\nSo my question is, has `Microsoft.Extensions.Hosting` something to offer to solve this problem? If not, shouldn\u0027t it?",
                                           "updatedAt":  "2022-03-30T13:32:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AkDbs",
                                           "createdAt":  "2022-03-30T14:13:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bitbonk",
                                           "body":  "A workaround could be to not register the class `Dependency` as a hosted service at all, but instead start the hosted service manually in an implementation of `IHostLifetime.WaitForStartAsync`. But I suppose that\u0027s not how it is supposed to work, right?\r\n\r\nIt looks to me like Microsoft.Extension.Hosting is missing functionality or the right type of abstractions here.\r\n\r\nWhat\u0027s your take?",
                                           "updatedAt":  "2022-03-30T14:13:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DpCNe",
                                           "createdAt":  "2022-05-23T15:37:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abbotware",
                                           "body":  "I ran into this same issue.  I have an API suggestion for the library that may solve the issue and follow the design of other **Microsoft.Extensions.*** patterns.   For dependencies between host services there should be an `IHostedService\u003cT\u003e` wrapper and it should function similar to how `IOptionsSnapshot\u003cT\u003e / IOptionsMonitor\u003cT\u003e` work.  This can be used for injection as follows:\r\n\r\n\r\n```\r\npublic class Worker1 : BackgroundService\r\n{\r\n    public Worker1(IHostedService\u003cWorker2\u003e dependency)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nThat can be used to order the hosted services to started in the correct by (assuming there are no circular dependences / cycles) and not require 2 different interfaces to be registered",
                                           "updatedAt":  "2022-05-23T15:40:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EECwK",
                                           "createdAt":  "2022-05-31T09:42:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bitbonk",
                                           "body":  "@abbotware That API suggestion might be somewhat suboptimal since as the consumer of `Worker2`, I now get all the APIs of `IHostedService\u003cT\u003e` that I do not want inside `Worker1`. `Worker1` could now potentially start and stop `Worker2`. ",
                                           "updatedAt":  "2022-05-31T09:42:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EKdCO",
                                           "createdAt":  "2022-06-01T13:08:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abbotware",
                                           "body":  "@bitbonk  - that is not how IOptions\u003c\u003e etc  work.  Its actually just a simple interface wrapper/forwarder\r\n\r\nThey are meant to be **readonly** and usually have a single property that just forwards to the actually dependency.  \r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.options.ioptions-1?view=dotnet-plat-ext-6.0\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.options.ioptionssnapshot-1?view=dotnet-plat-ext-6.0\r\n\r\nThe suggestion  of IHostedService\u003c\u003e  would look like this \r\n\r\n```\r\nIHostedService\u003cT\u003e\r\n    T Service { get; }\r\n    ServiceStatus { get; }   (might be useful too?)\r\n\r\n```\r\n\r\n\u003e I now get all the APIs of IHostedService\u003cT\u003e\r\n\r\nIt would not derive from IHostedService (so a different name should be picked I suppose), so there would not be an API that has any ability to stop/start the service.  I agree this would be bad, but that wasn\u0027t the point - there seems to be some sort of limitation to what the MS DI Container can do.  I am guessing they came up with IOptions\u003c\u003e to help the container treat those objects differently by adding metadata.    Using the interface wrappers in an object\u0027s Ctor lets the DI container know these objects have a special type of injected dependency and can be treated differently.   \r\n",
                                           "updatedAt":  "2022-06-01T13:08:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EKiMO",
                                           "createdAt":  "2022-06-01T13:27:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bitbonk",
                                           "body":  "OK, I somehow accidentally assumed you actually meant [Microsoft.Extensions.Hosting.IHostedService](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.ihostedservice). It makes sense now.\r\n\r\nHowever, figuring out the order of which the hosted services need to be started (and stopped), by looking at all the types and its constructors may actually be not so trivial.\r\nInjecting a concrete Type (e.g. `WorkerService2`, `IHostedService\u003cWorkerSerice2\u003e` respectively`) is also usually not what one would want to do. Usually one whould want to inject an abstraction e.g.\r\n\r\n```csharp\r\npublic class Worker1 : BackgroundService\r\n{\r\n    public Worker1(IServiceAbstraction dependency)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nWhere `IServiceAbstraction ` is something that itself either depends on `WorkerService2` or `WorkerService2` actually implements `IServiceAbstraction`.",
                                           "updatedAt":  "2022-06-01T13:27:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EM9wW",
                                           "createdAt":  "2022-06-01T23:38:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abbotware",
                                           "body":  "in your example, my suggestion would be: \r\n\r\n```\r\n\r\npublic class Worker1 : BackgroundService\r\n{\r\n    public Worker1(IService\u003cIServiceAbstraction\u003e dependency)\r\n    {\r\n    }\r\n}\r\n\r\npublic class Worker2 : BackgroundService, IServiceAbstraction \r\n{\r\n    public Worker2 ()\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nI dont see any issue with the above?  obviously, there couldn\u0027t be a circular dependency between services so all \u0027dependency interfaces\u0027 would need to be unique.\r\n\r\nbtw I also wanted this feature to work out of the box - much like IStartable in castle (maybe aslso the same in autofac).  I know in Castle.Windsor, it will start components automatically once they have all dependencies registered / available.    You could register the last item and then like magic, all components would start as more dependencies become \u0027available\u0027 (this was deferred start mode: https://github.com/castleproject/Windsor/blob/master/docs/startable-facility.md)\r\n\r\nUnfortunately, the Microsoft dependency injection really is... the least common denominator, and we have gone back to the \u0027dark ages\u0027 in terms of DI / Containers.  I find myself writing so much \u0027factory\u0027 / \u0027glue\u0027 code that I never had to do before.  \r\n\r\nThe alternative is to just write your own - I am doing this actually by \u0027starting\u0027 all dependencies for the hosted services after `Build() ` but before `Run()` - this way everything is \u0027registered\u0027 - this requires you to register \u0027metadata\u0027 along with each service - if this sounds like something you are interested in I can flush out the code in more detail.   \r\n\r\nThe general idea is to group dependencies that can be started into batches with priority and pre-init them before the Run() starts the app / which would then start the hosted services.  ",
                                           "updatedAt":  "2022-06-01T23:38:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53Ptyx",
                                           "createdAt":  "2024-03-15T23:03:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODayjTQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mindball",
                                                                               "createdAt":  "2024-03-16T06:06:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lipchev",
                                           "body":  "I think this relates to my API proposal #99846",
                                           "updatedAt":  "2024-03-15T23:03:12Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Dependencies between hosted services",
        "labels":  [
                       "question",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49851",
        "createdAt":  "2021-03-19T02:17:21Z",
        "number":  49851,
        "author":  "mdh1418",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-03-26T18:28:40Z",
        "body":  "Running the `Microsoft.Extensions.DependencyInjection.ExternalContainers.Tests.csproj` test suite on Browser WebAssembly runs into Trim analysis error IL2103. \r\n\r\n`C:\\projects\\grace\\src\\Grace\\Data\\ReflectionService.cs(297,21): error IL2103: Grace.Data.ReflectionService.CreateDelegateForType(Type,ReflectionService.PropertyCasing): Value passed to the \u0027#1\u0027 parameter of method \u0027System.Linq.Expressions.MemberExpression System.Linq.Expressions.Expression::Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\u0027 cannot be statically determined as a property accessor. [/Users/mdhwang/steveisok/src/libraries/Microsoft.Extensions.DependencyInjection/tests/DI.External.Tests/Microsoft.Extensions.DependencyInjection.ExternalContainers.Tests.csproj]`\r\n\r\nRepro:\r\n```\r\n./build.sh -os Browser -arch wasm -c Release\r\n./dotnet.sh build /t:Test /p:TargetOS=Browser /p:TargetArchitecture=wasm /p:Configuration=Release /p:EnableAggressiveTrimming=true src/libraries/Microsoft.Extensions.DependencyInjection/tests/DI.External.Tests/Microsoft.Extensions.DependencyInjection.ExternalContainers.Tests.csproj\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOL9wY-g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMjQ2OTYxMg==",
                                           "createdAt":  "2021-03-19T02:17:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRunning the `Microsoft.Extensions.DependencyInjection.ExternalContainers.Tests.csproj` test suite on Browser WebAssembly runs into Trim analysis error IL2103. \r\n\r\n`C:\\projects\\grace\\src\\Grace\\Data\\ReflectionService.cs(297,21): error IL2103: Grace.Data.ReflectionService.CreateDelegateForType(Type,ReflectionService.PropertyCasing): Value passed to the \u0027#1\u0027 parameter of method \u0027System.Linq.Expressions.MemberExpression System.Linq.Expressions.Expression::Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\u0027 cannot be statically determined as a property accessor. [/Users/mdhwang/steveisok/src/libraries/Microsoft.Extensions.DependencyInjection/tests/DI.External.Tests/Microsoft.Extensions.DependencyInjection.ExternalContainers.Tests.csproj]`\r\n\r\nRepro:\r\nCheck out https://github.com/steveisok/runtime/commits/build-wasm-aot-helix at `78264e595b27f98f74f93f9ae7b0301f08b444b0`\r\n```\r\n./build.sh -os Browser -arch wasm -c Release\r\n./dotnet.sh build /t:Test /p:TargetOS=Browser /p:TargetArchitecture=wasm /p:Configuration=Release /p:EnableAggressiveTrimming=true src/libraries/Microsoft.Extensions.DependencyInjection/tests/DI.External.Tests/Microsoft.Extensions.DependencyInjection.ExternalContainers.Tests.csproj\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emdh1418\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-19T02:17:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMjQ2OTYxNg==",
                                           "createdAt":  "2021-03-19T02:17:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-03-19T02:17:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMjg2OTI4MA==",
                                           "createdAt":  "2021-03-19T14:22:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRunning the `Microsoft.Extensions.DependencyInjection.ExternalContainers.Tests.csproj` test suite on Browser WebAssembly runs into Trim analysis error IL2103. \r\n\r\n`C:\\projects\\grace\\src\\Grace\\Data\\ReflectionService.cs(297,21): error IL2103: Grace.Data.ReflectionService.CreateDelegateForType(Type,ReflectionService.PropertyCasing): Value passed to the \u0027#1\u0027 parameter of method \u0027System.Linq.Expressions.MemberExpression System.Linq.Expressions.Expression::Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\u0027 cannot be statically determined as a property accessor. [/Users/mdhwang/steveisok/src/libraries/Microsoft.Extensions.DependencyInjection/tests/DI.External.Tests/Microsoft.Extensions.DependencyInjection.ExternalContainers.Tests.csproj]`\r\n\r\nRepro:\r\nCheck out https://github.com/steveisok/runtime/commits/build-wasm-aot-helix at `78264e595b27f98f74f93f9ae7b0301f08b444b0`\r\n```\r\n./build.sh -os Browser -arch wasm -c Release\r\n./dotnet.sh build /t:Test /p:TargetOS=Browser /p:TargetArchitecture=wasm /p:Configuration=Release /p:EnableAggressiveTrimming=true src/libraries/Microsoft.Extensions.DependencyInjection/tests/DI.External.Tests/Microsoft.Extensions.DependencyInjection.ExternalContainers.Tests.csproj\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emdh1418\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-Extensions-DependencyInjection`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-19T14:22:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMjg4NzAwMA==",
                                           "createdAt":  "2021-03-19T14:47:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Why is this an error and simply not a warning? Is this blocking?\r\n\r\nAlso, this is test code, which I\u0027m not sure how much we care about ILLink warnings in it. Even more, the code that is being referenced is in a different repo:\r\n\r\nhttps://github.com/ipjohnson/Grace/blob/e00cdebe3384bc5073b04c6cb4531453b1aa528a/src/Grace/Data/ReflectionService.cs#L291-L300\r\n\r\ncc @vitek-karas ",
                                           "updatedAt":  "2021-03-19T14:50:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMjk1MzQ2Ng==",
                                           "createdAt":  "2021-03-19T16:23:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "This is a warning, but if Warnings as Errors is turned on it will show up as an error.\r\n\r\nI agree that turning on trim analysis warnings in tests is a bit weird - or rather it will be difficult to get to 0.\r\nAlso there\u0027s something weird about this because it didn\u0027t report the parameter by name, the fact that it use `#1` means that the type/method didn\u0027t property resolve or something similar.",
                                           "updatedAt":  "2021-03-19T16:23:06Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[wasm] Trim analysis error IL2103 in Microsoft.Extensions.DependencyInjection.ExternalContainers.Tests.csproj",
        "labels":  [
                       "linkable-framework",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53327",
        "createdAt":  "2021-05-27T01:32:15Z",
        "number":  53327,
        "author":  "JamesNK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-06-05T20:40:48Z",
        "body":  "TryAddEnumerable doesn\u0027t add new registrations if singletons with distinct constant values are used. Only the first TryAddEnumerable successfully adds a registration.\r\n\r\n```cs\r\nservices.TryAddEnumerable(ServiceDescriptor.Singleton\u003cLoadBalancerFactory\u003e(new TestLoadBalancerFactory(id: 1)));\r\nservices.TryAddEnumerable(ServiceDescriptor.Singleton\u003cLoadBalancerFactory\u003e(new TestLoadBalancerFactory(id: 2)));\r\n```\r\n\r\nI would expect TryAddEnumerable to check if the singleton has a constant value, and check whether it already exists or not.\r\n\r\n`services.Add(...)` can be used as a workaround.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMp9W7w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTI0NjM4OA==",
                                           "createdAt":  "2021-05-27T01:32:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nTryAddEnumerable doesn\u0027t add new registrations if singleton with constant values are used. Only the first TryAddEnumerable successfully adds a registration.\r\n\r\n```cs\r\nservices.TryAddEnumerable(ServiceDescriptor.Singleton\u003cLoadBalancerFactory\u003e(new TestLoadBalancerFactory(id: 1)));\r\nservices.TryAddEnumerable(ServiceDescriptor.Singleton\u003cLoadBalancerFactory\u003e(new TestLoadBalancerFactory(id: 2)));\r\n```\r\n\r\nI would expect TryAddEnumerable to check if the singleton has a constant value, and check whether it already exists or not.\r\n\r\n`services.Add(...)` can be used as a workaround.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJamesNK\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-27T01:32:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTMwMzI3OQ==",
                                           "createdAt":  "2021-05-27T04:08:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODoFWng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "allantargino",
                                                                               "createdAt":  "2021-09-11T02:52:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jaliyaudagedara",
                                                                               "createdAt":  "2022-10-08T22:10:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "im-aIex",
                                                                               "createdAt":  "2024-07-02T16:20:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "How would this work? I don\u0027t think this is doable.",
                                           "updatedAt":  "2021-05-27T04:45:33Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "TryAddEnumerable and singleton",
        "labels":  [
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56844",
        "createdAt":  "2021-08-04T16:28:24Z",
        "number":  56844,
        "author":  "radical",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-29T15:42:01Z",
        "body":  "[Microsoft.Extensions.DependencyInjection.Tests](https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-52004-merge-7a4dd01ba7eb45b883/Microsoft.Extensions.DependencyInjection.Tests/1/console.86662e2c.log?sv=2019-07-07\u0026se=2021-08-24T06%3A48%3A53Z\u0026sr=c\u0026sp=rl\u0026sig=IhTugai%2BC8NrqjQD9I2jBBfVtHJGbKMeEI0anAMGtes%3D)\r\n\r\n```\r\n[07:26:48] fail: [FAIL] Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsServiceResolvedEvent\r\n[07:26:48] info: Assert.Equal() Failure\r\n[07:26:48] info: Expected: 3\r\n[07:26:48] info: Actual:   0\r\n[07:26:48] info:    at Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsServiceResolvedEvent()\r\n[07:26:48] info:    at System.Reflection.RuntimeMethodInfo.Invoke(Object , BindingFlags , Binder , Object[] , CultureInfo )\r\n[07:26:48] fail: [FAIL] Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsServiceRealizationFailedEvent\r\n[07:26:48] info: System.InvalidOperationException : Sequence contains no matching element\r\n[07:26:48] info:    at System.Linq.ThrowHelper.ThrowNoMatchException()\r\n[07:26:48] info:    at System.Linq.Enumerable.Single[EventWrittenEventArgs](IEnumerable`1 source, Func`2 predicate)\r\n[07:26:48] info:    at Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsServiceRealizationFailedEvent()\r\n[07:26:48] info:    at System.Reflection.RuntimeMethodInfo.Invoke(Object , BindingFlags , Binder , Object[] , CultureInfo )\r\n[07:26:48] fail: [FAIL] Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsExpressionTreeBuiltEvent\r\n[07:26:48] info: System.InvalidOperationException : Sequence contains no matching element\r\n[07:26:48] info:    at System.Linq.ThrowHelper.ThrowNoMatchException()\r\n[07:26:48] info:    at System.Linq.Enumerable.Single[EventWrittenEventArgs](IEnumerable`1 source, Func`2 predicate)\r\n[07:26:48] info:    at Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsExpressionTreeBuiltEvent()\r\n[07:26:48] info:    at System.Reflection.RuntimeMethodInfo.Invoke(Object , BindingFlags , Binder , Object[] , CultureInfo )\r\n[07:26:48] fail: [FAIL] Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.ExistsWithCorrectId\r\n[07:26:48] info: Assert.Equal() Failure\r\n[07:26:48] info:           â†“ (pos 0)\r\n[07:26:48] info: Expected: Microsoft-Extensions-DependencyInjection\r\n[07:26:48] info: Actual:   DependencyInjectionEventSource\r\n[07:26:48] info:           â†‘ (pos 0)\r\n[07:26:48] info:    at Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.ExistsWithCorrectId()\r\n[07:26:48] info:    at System.Reflection.RuntimeMethodInfo.Invoke(Object , BindingFlags , Binder , Object[] , CultureInfo )\r\n[07:26:48] fail: [FAIL] Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsCallSiteBuiltEvent\r\n[07:26:48] info: System.InvalidOperationException : Sequence contains no matching element\r\n[07:26:48] info:    at System.Linq.ThrowHelper.ThrowNoMatchException()\r\n[07:26:48] info:    at System.Linq.Enumerable.Single[EventWrittenEventArgs](IEnumerable`1 source, Func`2 predicate)\r\n[07:26:48] info:    at Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsCallSiteBuiltEvent()\r\n[07:26:48] info:    at System.Reflection.RuntimeMethodInfo.Invoke(Object , BindingFlags , Binder , Object[] , CultureInfo )\r\n[07:26:48] fail: [FAIL] Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsDynamicMethodBuiltEvent\r\n[07:26:48] info: System.InvalidOperationException : Sequence contains no matching element\r\n[07:26:48] info:    at System.Linq.ThrowHelper.ThrowNoMatchException()\r\n[07:26:48] info:    at System.Linq.Enumerable.Single[EventWrittenEventArgs](IEnumerable`1 source, Func`2 predicate)\r\n[07:26:48] info:    at Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsDynamicMethodBuiltEvent()\r\n[07:26:48] info:    at System.Reflection.RuntimeMethodInfo.Invoke(Object , BindingFlags , Binder , Object[] , CultureInfo )\r\n```\r\n\r\nTest built with `/p:EnableAggressiveTrimming=true`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORsCzPg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41Nwq4",
                                           "createdAt":  "2021-08-04T16:28:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n[Microsoft.Extensions.DependencyInjection.Tests](https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-52004-merge-7a4dd01ba7eb45b883/Microsoft.Extensions.DependencyInjection.Tests/1/console.86662e2c.log?sv=2019-07-07\u0026se=2021-08-24T06%3A48%3A53Z\u0026sr=c\u0026sp=rl\u0026sig=IhTugai%2BC8NrqjQD9I2jBBfVtHJGbKMeEI0anAMGtes%3D)\r\n\r\n```\r\n[07:26:48] fail: [FAIL] Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsServiceResolvedEvent\r\n[07:26:48] info: Assert.Equal() Failure\r\n[07:26:48] info: Expected: 3\r\n[07:26:48] info: Actual:   0\r\n[07:26:48] info:    at Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsServiceResolvedEvent()\r\n[07:26:48] info:    at System.Reflection.RuntimeMethodInfo.Invoke(Object , BindingFlags , Binder , Object[] , CultureInfo )\r\n[07:26:48] fail: [FAIL] Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsServiceRealizationFailedEvent\r\n[07:26:48] info: System.InvalidOperationException : Sequence contains no matching element\r\n[07:26:48] info:    at System.Linq.ThrowHelper.ThrowNoMatchException()\r\n[07:26:48] info:    at System.Linq.Enumerable.Single[EventWrittenEventArgs](IEnumerable`1 source, Func`2 predicate)\r\n[07:26:48] info:    at Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsServiceRealizationFailedEvent()\r\n[07:26:48] info:    at System.Reflection.RuntimeMethodInfo.Invoke(Object , BindingFlags , Binder , Object[] , CultureInfo )\r\n[07:26:48] fail: [FAIL] Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsExpressionTreeBuiltEvent\r\n[07:26:48] info: System.InvalidOperationException : Sequence contains no matching element\r\n[07:26:48] info:    at System.Linq.ThrowHelper.ThrowNoMatchException()\r\n[07:26:48] info:    at System.Linq.Enumerable.Single[EventWrittenEventArgs](IEnumerable`1 source, Func`2 predicate)\r\n[07:26:48] info:    at Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsExpressionTreeBuiltEvent()\r\n[07:26:48] info:    at System.Reflection.RuntimeMethodInfo.Invoke(Object , BindingFlags , Binder , Object[] , CultureInfo )\r\n[07:26:48] fail: [FAIL] Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.ExistsWithCorrectId\r\n[07:26:48] info: Assert.Equal() Failure\r\n[07:26:48] info:           â†“ (pos 0)\r\n[07:26:48] info: Expected: Microsoft-Extensions-DependencyInjection\r\n[07:26:48] info: Actual:   DependencyInjectionEventSource\r\n[07:26:48] info:           â†‘ (pos 0)\r\n[07:26:48] info:    at Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.ExistsWithCorrectId()\r\n[07:26:48] info:    at System.Reflection.RuntimeMethodInfo.Invoke(Object , BindingFlags , Binder , Object[] , CultureInfo )\r\n[07:26:48] fail: [FAIL] Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsCallSiteBuiltEvent\r\n[07:26:48] info: System.InvalidOperationException : Sequence contains no matching element\r\n[07:26:48] info:    at System.Linq.ThrowHelper.ThrowNoMatchException()\r\n[07:26:48] info:    at System.Linq.Enumerable.Single[EventWrittenEventArgs](IEnumerable`1 source, Func`2 predicate)\r\n[07:26:48] info:    at Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsCallSiteBuiltEvent()\r\n[07:26:48] info:    at System.Reflection.RuntimeMethodInfo.Invoke(Object , BindingFlags , Binder , Object[] , CultureInfo )\r\n[07:26:48] fail: [FAIL] Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsDynamicMethodBuiltEvent\r\n[07:26:48] info: System.InvalidOperationException : Sequence contains no matching element\r\n[07:26:48] info:    at System.Linq.ThrowHelper.ThrowNoMatchException()\r\n[07:26:48] info:    at System.Linq.Enumerable.Single[EventWrittenEventArgs](IEnumerable`1 source, Func`2 predicate)\r\n[07:26:48] info:    at Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsDynamicMethodBuiltEvent()\r\n[07:26:48] info:    at System.Reflection.RuntimeMethodInfo.Invoke(Object , BindingFlags , Binder , Object[] , CultureInfo )\r\n```\r\n\r\nTest built with `/p:EnableAggressiveTrimming=true`\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eradical\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `trimming-for-aot`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-04T16:28:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GwLM-",
                                           "createdAt":  "2022-07-18T10:32:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "There are some new failures when `DependencyInjection.Tests` enabled:\r\n```\r\n[FAIL] Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsServiceProviderBuilt\r\n       System.InvalidOperationException : Sequence contains no matching element\r\n       at System.Linq.ThrowHelper.ThrowNoMatchException()\r\n       at System.Linq.Enumerable.Single[EventWrittenEventArgs](IEnumerable`1 source, Func`2 predicate)\r\n       at Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsServiceProviderBuilt()\r\n       at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n\r\n[FAIL] Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsServiceProviderBuiltOnAttach\r\n       System.InvalidOperationException : Sequence contains no matching element\r\n       at System.Linq.ThrowHelper.ThrowNoMatchException()\r\n       at System.Linq.Enumerable.Single[EventWrittenEventArgs](IEnumerable`1 source, Func`2 predicate)\r\n       at Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsServiceProviderBuiltOnAttach()\r\n        at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n\r\n[FAIL] Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsScopeDisposedEvent\r\n        System.InvalidOperationException : Sequence contains no matching element\r\n        at System.Linq.ThrowHelper.ThrowNoMatchException()\r\n        at System.Linq.Enumerable.Single[EventWrittenEventArgs](IEnumerable`1 source, Func`2 predicate)\r\n        at Microsoft.Extensions.DependencyInjection.Tests.DependencyInjectionEventSourceTests.EmitsScopeDisposedEvent()\r\n        at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n\r\n[FAIL] Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactoryTest.CreateCallSite_Throws_IfClosedTypeDoesNotSatisfyNewGenericConstraint\r\n        System.ArgumentException : Generic implementation type \u0027Microsoft.Extensions.DependencyInjection.Specification.Fakes.ClassWithNewConstraint`1\u0027 has a DefaultConstructorConstraint (\u0027new()\u0027 constraint), but the generic service type \u0027Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService`1\u0027 doesn\u0027t.\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.ValidateTrimmingAnnotations(Type , Type[] , Type , Type[] )\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.Populate()\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory..ctor(ICollection`1 )\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactoryTest.GetCallSiteFactory(ServiceDescriptor[] descriptors)\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactoryTest.CreateCallSite_Throws_IfClosedTypeDoesNotSatisfyNewGenericConstraint()\r\n        at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n\r\n[FAIL] Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactoryTest.CreateCallSite_ReturnsService_IfClosedTypeSatisfiesNewGenericConstraint\r\n        System.ArgumentException : Generic implementation type \u0027Microsoft.Extensions.DependencyInjection.Specification.Fakes.ClassWithNewConstraint`1\u0027 has a DefaultConstructorConstraint (\u0027new()\u0027 constraint), but the generic service type \u0027Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService`1\u0027 doesn\u0027t.\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.ValidateTrimmingAnnotations(Type , Type[] , Type , Type[] )\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.Populate()\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory..ctor(ICollection`1 )\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactoryTest.GetCallSiteFactory(ServiceDescriptor[] descriptors)\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactoryTest.CreateCallSite_ReturnsService_IfClosedTypeSatisfiesNewGenericConstraint()\r\n        at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n\r\n[FAIL] Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactoryTest.CreateCallSite_ReturnsMatchingTypesThatMatchCorrectConstraints(closedServiceType: typeof(Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService\u003cint[]\u003e), value: [1, 2, 3], matchingImplementationTypes: [typeof(Microsoft.Extensions.DependencyInjection.Specification.Fakes.FakeOpenGenericService\u003cint[]\u003e), typeof(Microsoft.Extensions.DependencyInjection.Specification.Fakes.ClassWithClassConstraint\u003cint[]\u003e), typeof(Microsoft.Extensions.DependencyInjection.Specification.Fakes.ClassWithInterfaceConstraint\u003cint[]\u003e)])\r\n        System.ArgumentException : Generic implementation type \u0027Microsoft.Extensions.DependencyInjection.Specification.Fakes.ClassWithStructConstraint`1\u0027 has a DefaultConstructorConstraint (\u0027new()\u0027 constraint), but the generic service type \u0027Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService`1\u0027 doesn\u0027t.\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.ValidateTrimmingAnnotations(Type , Type[] , Type , Type[] )\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.Populate()\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory..ctor(ICollection`1 )\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactoryTest.GetCallSiteFactory(ServiceDescriptor[] descriptors)\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactoryTest.CreateCallSite_ReturnsMatchingTypesThatMatchCorrectConstraints(Type closedServiceType, Object value, Type[] matchingImplementationTypes)\r\n        at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n\r\n[FAIL] Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactoryTest.CreateCallSite_ReturnsService_IfClosedTypeSatisfiesStructGenericConstraint\r\n        System.ArgumentException : Generic implementation type \u0027Microsoft.Extensions.DependencyInjection.Specification.Fakes.ClassWithStructConstraint`1\u0027 has a DefaultConstructorConstraint (\u0027new()\u0027 constraint), but the generic service type \u0027Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService`1\u0027 doesn\u0027t.\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.ValidateTrimmingAnnotations(Type , Type[] , Type , Type[] )\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.Populate()\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory..ctor(ICollection`1 )\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactoryTest.GetCallSiteFactory(ServiceDescriptor[] descriptors)\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactoryTest.CreateCallSite_ReturnsService_IfClosedTypeSatisfiesStructGenericConstraint()\r\n        at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n\r\n[FAIL] Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactoryTest.CreateCallSite_Throws_IfClosedTypeDoesNotSatisfyStructGenericConstraint\r\n        System.ArgumentException : Generic implementation type \u0027Microsoft.Extensions.DependencyInjection.Specification.Fakes.ClassWithStructConstraint`1\u0027 has a DefaultConstructorConstraint (\u0027new()\u0027 constraint), but the generic service type \u0027Microsoft.Extensions.DependencyInjection.Specification.Fakes.IFakeOpenGenericService`1\u0027 doesn\u0027t.\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.ValidateTrimmingAnnotations(Type , Type[] , Type , Type[] )\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.Populate()\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory..ctor(ICollection`1 )\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactoryTest.GetCallSiteFactory(ServiceDescriptor[] descriptors)\r\n        at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactoryTest.CreateCallSite_Throws_IfClosedTypeDoesNotSatisfyStructGenericConstraint()\r\n        at System.Reflection.MethodInvoker.InterpretedInvoke(Object , Span`1 , BindingFlags )\r\n```",
                                           "updatedAt":  "2022-07-18T10:32:54Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[wasm][eat] `Microsoft.Extensions.DependencyInjection.Tests` test failures",
        "labels":  [
                       "arch-wasm",
                       "area-Extensions-DependencyInjection",
                       "trimming-for-aot"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57333",
        "createdAt":  "2021-08-13T07:08:17Z",
        "number":  57333,
        "author":  "skclusive",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-20T16:56:17Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\nEnumerable dependencies are not resolved consistently when open generic services are registered later.\r\n\r\nEx:\r\n\r\n#### Setup\r\n```csharp\r\ninterface IProcessor\u003cT\u003e {}\r\n\r\nrecord AnyProcessor\u003cT\u003e : IProcessor\u003cT\u003e;\r\n\r\nrecord IntProcessor : IProcessor\u003cint\u003e;\r\n```\r\n\r\n#### Registration\r\n```csharp\r\nvar services = new ServiceCollection();\r\nservices.TryAddEnumerable(ServiceDescriptor.Scoped(typeof(IProcessor\u003cint\u003e), typeof(IntProcessor)));\r\n// Fix: ordering open generic above concretes\r\nservices.TryAddEnumerable(ServiceDescriptor.Scoped(typeof(IProcessor\u003c\u003e), typeof(AnyProcessor\u003c\u003e)));\r\n```\r\n\r\n#### Resolving\r\n```csharp\r\nvar serviceProvider = services.BuildServiceProvider();\r\n\r\nusing var scope = serviceProvider.CreateAsyncScope();\r\n\r\n// bug is reproducible only when below line enabled\r\nvar processor = scope.ServiceProvider.GetService\u003cIProcessor\u003cint\u003e\u003e();\r\n\r\nvar processors = scope.ServiceProvider.GetService\u003cIEnumerable\u003cIProcessor\u003cint\u003e\u003e\u003e() ?? Enumerable.Empty\u003cIProcessor\u003cint\u003e\u003e();\r\n\r\n// prints \"IntProcessor -- IntProcessor\" instead of IntProcessor -- AnyProcessor`1 if line 17 commented.\r\nConsole.WriteLine(string.Join(\" -- \", processors.Select(p =\u003e p.GetType().Name)));\r\n```\r\n\r\n### To Reproduce\r\n\r\nsample repo to reproduce the bug https://github.com/skclusive/EnumerableCallSiteBugConsole\r\n\r\n### Configuration\r\n\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\n- `dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.7.21379.14\r\n Commit:    22d70b47bc\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22000\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.100-preview.7.21379.14\\\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.7.21377.19\r\n  Commit:  91ba01788d\r\n\r\n.NET SDKs installed:\r\n  5.0.301 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.400 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.100-preview.7.21379.14 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-preview.7.21378.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.7.21377.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.0-preview.7.21378.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n- Microsoft Visual Studio Community 2022 Preview (64-bit) Version 17.0.0 Preview 3.0\r\n\r\n### Regression?\r\n\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Other information\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONtdkBg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41ig4m",
                                           "createdAt":  "2021-08-13T07:08:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-08-13T07:08:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41ihYq",
                                           "createdAt":  "2021-08-13T07:12:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "skclusive",
                                           "body":  "belongs to area-Extensions-DependencyInjection",
                                           "updatedAt":  "2021-08-13T07:12:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41imah",
                                           "createdAt":  "2021-08-13T07:53:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\nEnumerable dependencies are not resolved consistently when open generic services are registered later.\r\n\r\nEx:\r\n\r\n#### Setup\r\n```csharp\r\ninterface IProcessor\u003cT\u003e {}\r\n\r\nrecord AnyProcessor\u003cT\u003e : IProcessor\u003cT\u003e;\r\n\r\nrecord IntProcessor : IProcessor\u003cint\u003e;\r\n```\r\n\r\n#### Registration\r\n```csharp\r\nvar services = new ServiceCollection();\r\nservices.TryAddEnumerable(ServiceDescriptor.Scoped(typeof(IProcessor\u003cint\u003e), typeof(IntProcessor)));\r\n// Fix: ordering open generic above concretes\r\nservices.TryAddEnumerable(ServiceDescriptor.Scoped(typeof(IProcessor\u003c\u003e), typeof(AnyProcessor\u003c\u003e)));\r\n```\r\n\r\n#### Resolving\r\n```csharp\r\nvar serviceProvider = services.BuildServiceProvider();\r\n\r\nusing var scope = serviceProvider.CreateAsyncScope();\r\n\r\n// bug is reproducible only when below line enabled\r\nvar processor = scope.ServiceProvider.GetService\u003cIProcessor\u003cint\u003e\u003e();\r\n\r\nvar processors = scope.ServiceProvider.GetService\u003cIEnumerable\u003cIProcessor\u003cint\u003e\u003e\u003e() ?? Enumerable.Empty\u003cIProcessor\u003cint\u003e\u003e();\r\n\r\n// prints \"IntProcessor -- IntProcessor\" instead of IntProcessor -- AnyProcessor`1 if line 17 commented.\r\nConsole.WriteLine(string.Join(\" -- \", processors.Select(p =\u003e p.GetType().Name)));\r\n```\r\n\r\n### To Reproduce\r\n\r\nsample repo to reproduce the bug https://github.com/skclusive/EnumerableCallSiteBugConsole\r\n\r\n### Configuration\r\n\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n* If you\u0027re using Blazor, which web browser(s) do you see this issue in?\r\n  --\u003e\r\n- `dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.7.21379.14\r\n Commit:    22d70b47bc\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22000\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.100-preview.7.21379.14\\\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.7.21377.19\r\n  Commit:  91ba01788d\r\n\r\n.NET SDKs installed:\r\n  5.0.301 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.400 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.100-preview.7.21379.14 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-preview.7.21378.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.7.21377.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.0-preview.7.21378.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n- Microsoft Visual Studio Community 2022 Preview (64-bit) Version 17.0.0 Preview 3.0\r\n\r\n### Regression?\r\n\r\n\u003c!--\r\n* Did this work in a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\n\r\n### Other information\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eskclusive\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-13T07:53:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41kncm",
                                           "createdAt":  "2021-08-14T01:44:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "cc @maryamariyan @eerhardt We should look into this.",
                                           "updatedAt":  "2021-08-14T01:44:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41oouj",
                                           "createdAt":  "2021-08-16T21:59:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Moving to 7.0 since it\u0027s not a regression and we\u0027re closing down on 6.0 ",
                                           "updatedAt":  "2021-08-16T21:59:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4212QG",
                                           "createdAt":  "2021-09-15T14:44:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "allantargino",
                                           "body":  "Hi, after exploring the problem a bit I believe it relies on the `_callSiteCache` inside `CallSiteFactory`:\r\nhttps://github.com/dotnet/runtime/blob/abd0088681a3cb53b32dc412b1fd623743dac342/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceLookup/CallSiteFactory.cs#L18\r\n\r\n- After the first `GetService` call, it caches the [key](https://github.com/dotnet/runtime/blob/abd0088681a3cb53b32dc412b1fd623743dac342/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceLookup/ServiceCacheKey.cs) `(IProcessor\u003cint\u003e,0)` and the method [`TryCreateExact`](https://github.com/dotnet/runtime/blob/abd0088681a3cb53b32dc412b1fd623743dac342/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceLookup/CallSiteFactory.cs#L342) sets its value to the `IntProcessor`\u0027s call site.\r\n- In the second `GetService` call, when iterating over the first descriptor inside [`TryCreateEnumerable`](https://github.com/dotnet/runtime/blob/abd0088681a3cb53b32dc412b1fd623743dac342/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceLookup/CallSiteFactory.cs#L272-L276), the method [`TryCreateOpenGeneric`](https://github.com/dotnet/runtime/blob/abd0088681a3cb53b32dc412b1fd623743dac342/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceLookup/CallSiteFactory.cs#L357-L361) looks up the cache using the same key, `(IProcessor\u003cint\u003e,0)`, so the existing `IntProcessor`\u0027s call site is returned instead of creating `AnyProcessor\u003cint\u003e`\u0027s call site.\r\n\r\nWhile we discuss the best approach to solve it, I will send a PR with the failing test for this issue.",
                                           "updatedAt":  "2021-09-15T15:26:28Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Enumerable dependencies resolving not consistent when open generic is used (area-Extensions-DependencyInjection)",
        "labels":  [
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58494",
        "createdAt":  "2021-09-01T12:59:54Z",
        "number":  58494,
        "author":  "mc0re",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-23T09:49:26Z",
        "body":  "How come the DLL versions inside 5.0.2 Nuget package are actually 5.0.0.1 and 5.0.0.2? This seems to unleash DLL hell onto me right now...\r\n\r\nhttps://i.imgur.com/Sb1fIin.png",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiX3TUw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42QXY3",
                                           "createdAt":  "2021-09-01T13:00:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHow come the DLL versions inside 5.0.2 Nuget package are actually 5.0.0.1 and 5.0.0.2? This seems to unleash DLL hell onto me right now...\r\n\r\nhttps://i.imgur.com/Sb1fIin.png\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emc0re\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-01T13:00:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42QwRA",
                                           "createdAt":  "2021-09-01T14:51:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "See the same question (but a different package) here: https://github.com/dotnet/runtime/issues/49642.\r\n\r\n\u003e That is actually by design and explained in detail here: https://github.com/dotnet/runtime/blob/release/5.0/docs/project/library-servicing.md#determine-assemblyversion.\r\n\r\nFYI @ericstj @ViktorHofer ",
                                           "updatedAt":  "2021-09-01T14:51:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42UU4C",
                                           "createdAt":  "2021-09-02T07:13:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mc0re",
                                           "body":  "I\u0027m afraid I don\u0027t see the explanation in that link. I only found that phrase, which points in another direction:\r\n\r\n\u003e The baseline version for the assembly in the package index should also be incremented so that all the other packages can use this servicing version for package dependencies.\r\n\r\nAnd it doesn\u0027t explain what to do when the versions differ, so I ask for `5.0.2.0`, but the system is looking for `5.0.0.1` or `5.0.0.2` and complains that it cannot find `5.0.2.0`...",
                                           "updatedAt":  "2021-09-02T07:13:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JfdNT",
                                           "createdAt":  "2024-08-23T09:49:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bstordrup",
                                           "body":  "If I look at `Microsoft.Extensions.Configuration` nuget package, then version 6.0.0 ships with two copies: `net461` and `netstandard2.0`. Both have Assembly Version `6.0.0.0` and File Version `6.0.21.52210`.\r\n\r\nFor the same package, but version 6.0.1, it still ships two copies. Here, `net461` copy has Assembly Version `6.0.0.1` and File Version `6.0.322.12309`. But the `netstandard2.0` copy has Assembly Version `6.0.0.0` and File Version `6.0.322.12309`.\r\n\r\nWhy this difference in Assembly version calculation? The code behind it is (I assume) still the same for both copies of the 6.0.1 package.\r\n\r\nHaving this difference in Assembly version makes it hard to use assembly redirection in a situation where a part of the solution targets `netstandard2.0` and other parts of the solution targets `net461` (or newer). Because an assembly redirect to version 6.0.0.1 causes the load of the `netstandard2.0` version to fail due to the Assembly Version on the `netstandard2.0` is 6.0.0.0.\r\n\r\nAs far as I can determine, this is an issue on both the Microsoft.Extension.* libraries as well as all the System.* assemblies (have exactly this issue on `System.Diagnostics.DiagnosticsSource.7.0.2.nupkg`).",
                                           "updatedAt":  "2024-08-23T09:49:25Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Microsoft.Extensions.DependencyInjection 5.0.2 versioning",
        "labels":  [
                       "question",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59899",
        "createdAt":  "2021-10-02T19:11:11Z",
        "number":  59899,
        "author":  "Stabzs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-10-14T22:14:16Z",
        "body":  "### Description\r\n\r\nWhen resolving registered instances with `IEnumerable\u003cT\u003e arg1 = null` constructor dependencies, `arg1` in unexpectedly initialized to an empty array, instead of null.  This is inconsistent with other collection types such as `IList\u003cT\u003e`, `List\u003cT\u003e` or `IList\u003cT\u003e`.\r\n\r\nThis can be recreated with the following code:\r\n\r\n```\r\npublic class Test : ITest\r\n{\r\n    private ISet\u003cstring\u003e _defaults = new HashSet\u003cstring\u003e { \"one\", \"two\", \"three\" };\r\n    private ISet\u003cstring\u003e _filters;\r\n\r\n    public Test(IEnumerable\u003cstring\u003e filters = null)\r\n    {\r\n        _filters = new HashSet\u003cstring\u003e(filters.ToHashSet() ?? _defaults);\r\n    }\r\n}\r\n\r\npublic interface ITest { }\r\n\r\nservices.AddScoped\u003cITest, Test\u003e();\r\n```\r\n\r\nin the above example, you would expect that `_defaults` would be used since there is no parameter registered via a factory to the concrete type. However, `filters` is passed as an empty array by the IoC resolve call.\r\n\r\nThis does not occur for the following example:\r\n\r\n```\r\npublic class Test : ITest\r\n{\r\n    private ISet\u003cstring\u003e _defaults = new HashSet\u003cstring\u003e { \"one\", \"two\", \"three\" };\r\n    private ISet\u003cstring\u003e _filters;\r\n\r\n    public Test(List\u003cstring\u003e filters = null)\r\n    {\r\n        _filters = new HashSet\u003cstring\u003e(filters.ToHashSet() ?? _defaults);\r\n    }\r\n}\r\n\r\npublic interface ITest { }\r\n\r\nservices.AddScoped\u003cITest, Test\u003e();\r\n```\r\n\r\nin the second example, `_defaults` is used because filters is correctly passed as null.\r\n\r\n### Configuration\r\n* Which version of .NET is the code running on?\r\n* * .netcoreapp3.1 and .net5.0\r\n* What OS and version, and what distro if applicable?\r\n* * Reproduced on Windows 10, but I would the same reproduction on other OSes.\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* * Specifically reproduced on x64.\r\n* Do you know whether it is specific to that configuration?\r\n* * I do not know because I have not tested other configurations, but I wouldn\u0027t expect it to be limited to x64.\r\n\r\n### Regression?\r\n\r\nThis seems consistent across at least .netcore 3.1 and .net 5. I did not test further back.\r\n\r\n### Other information\r\nThis seems to be related to how the constructor/IEnumerable visitor works [here](https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceLookup/CallSiteRuntimeResolver.cs#L161):\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHON7_9uw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43mX4h",
                                           "createdAt":  "2021-10-02T19:11:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-10-02T19:11:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43mYNL",
                                           "createdAt":  "2021-10-02T19:20:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen resolving registered instances with `IEnumerable\u003cT\u003e arg1 = null` constructor dependencies, `arg1` in unexpectedly initialized to an empty array, instead of null.  This is inconsistent with other collection types such as `IList\u003cT\u003e`, `List\u003cT\u003e` or `IList\u003cT\u003e`.\r\n\r\nThis can be recreated with the following code:\r\n\r\n```\r\npublic class Test : ITest\r\n{\r\n    private ISet\u003cstring\u003e _defaults = new HashSet\u003cstring\u003e { \"one\", \"two\", \"three\" };\r\n    private ISet\u003cstring\u003e _filters;\r\n\r\n    public Test(IEnumerable\u003cstring\u003e filters = null)\r\n    {\r\n        _filters = new HashSet\u003cstring\u003e(filters.ToHashSet() ?? _defaults);\r\n    }\r\n}\r\n\r\npublic interface ITest { }\r\n\r\nservices.AddScoped\u003cITest, Test\u003e();\r\n```\r\n\r\nin the above example, you would expect that `_defaults` would be used since there is no parameter registered via a factory to the concrete type. However, `filters` is passed as an empty array by the IoC resolve call.\r\n\r\nThis does not occur for the following example:\r\n\r\n```\r\npublic class Test : ITest\r\n{\r\n    private ISet\u003cstring\u003e _defaults = new HashSet\u003cstring\u003e { \"one\", \"two\", \"three\" };\r\n    private ISet\u003cstring\u003e _filters;\r\n\r\n    public Test(List\u003cstring\u003e filters = null)\r\n    {\r\n        _filters = new HashSet\u003cstring\u003e(filters.ToHashSet() ?? _defaults);\r\n    }\r\n}\r\n\r\npublic interface ITest { }\r\n\r\nservices.AddScoped\u003cITest, Test\u003e();\r\n```\r\n\r\nin the second example, `_defaults` is used because filters is correctly passed as null.\r\n\r\n### Configuration\r\n* Which version of .NET is the code running on?\r\n* * .netcoreapp3.1 and .net5.0\r\n* What OS and version, and what distro if applicable?\r\n* * Reproduced on Windows 10, but I would the same reproduction on other OSes.\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* * Specifically reproduced on x64.\r\n* Do you know whether it is specific to that configuration?\r\n* * I do not know because I have not tested other configurations, but I wouldn\u0027t expect it to be limited to x64.\r\n\r\n### Regression?\r\n\r\nThis seems consistent across at least .netcore 3.1 and .net 5. I did not test further back.\r\n\r\n### Other information\r\nThis seems to be related to how the constructor/IEnumerable visitor works [here](https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceLookup/CallSiteRuntimeResolver.cs#L161):\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eStabzs\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-02T19:20:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43mlFY",
                                           "createdAt":  "2021-10-03T04:21:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Other collection types aren\u0027t supported at all so that\u0027s why you\u0027re seeing that behavior. I don\u0027t have a strong sense of what is the right thing to do here but this seems like a reasonable thing to expect if you explicitly ask for null instead of empty. \n\n\nIt\u0027s also a breaking change so I don\u0027t know if we\u0027d do it. We can try with other DI containers as well to see what the behavior looks like there.",
                                           "updatedAt":  "2021-10-03T04:21:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43pKU0",
                                           "createdAt":  "2021-10-04T14:22:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "One reason for using an empty array is for performance. Take for example https://github.com/dotnet/runtime/pull/49970 where we assume that an array is always passed by DI.",
                                           "updatedAt":  "2021-10-04T14:22:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43v_27",
                                           "createdAt":  "2021-10-06T03:06:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Stabzs",
                                           "body":  "@eerhardt that makes perfect sense from a performance perspective. And in your example, the factory is responsible for the defaulting behavior, not the DI resolver itself.\r\n\r\nAs far as other IoC containers go, SimpleInjector will not even permit this type of registration due to unregistered dependencies and would require a factory, preventing the issue in the first place.\r\n\r\nAutofac has similar behavior of defaulting `IEnumerable\u003cT\u003e`, `ICollection\u003cT\u003e` and `IList\u003cT\u003e`, but not `List\u003cT\u003e` or `ISet\u003cT\u003e`, which throws an exception during resolution.\r\n\r\nLightInject defaults `IEnumerable\u003cT\u003e`, `ICollection\u003cT\u003e` and `IList\u003cT\u003e`, and throws on `List\u003cT\u003e` or `ISet\u003cT\u003e`.\r\n\r\nIt seems odd that most container implementations are somewhat inconsistent on how they handle it. If nothing else, it seems like this behavior should potentially expand to other collection types and be better documented. And ideally, a container verification model would prevent this type of odd registration altogether.\r\n\r\n",
                                           "updatedAt":  "2021-10-06T03:06:50Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "IEnumerable\u003cT\u003e is defaulted to an empty array during DI resolution",
        "labels":  [
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62531",
        "createdAt":  "2021-12-08T14:41:10Z",
        "number":  62531,
        "author":  "hasrthur",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCnTA9A==",
                          "nodes":  [
                                        {
                                            "content":  "CONFUSED",
                                            "user":  "reecebradley",
                                            "createdAt":  "2022-07-19T00:26:48Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-12-08T21:39:12Z",
        "body":  "\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003e\r\n\r\n### Describe the bug\r\nIHttpClientFactory cannot be injected into ILoggerProvider since the application hangs at the moment when it should be built.\r\n\r\n### To Reproduce\r\n\u003c!--\r\nWe ❤ code! Point us to a minimalistic repro project hosted in a public GitHub repo.\r\nFor a repro project, create a new ASP.NET Core project using the template of your choice, apply the minimum required code to result in the issue you\u0027re observing.\r\n\r\nWe will close this issue if:\r\n- The repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\r\n- If we will not be able to repro the behavior you\u0027re reporting.\r\n- If the repro project is attached as a `.zip` file.\r\n- If the GitHub repro project is set to `Private`.\r\n--\u003e\r\nClone https://github.com/hasrthur/IHttpClientFactoryInSingletonService and try `dotnet run` inside the project.\r\nThe message `Before building WebApplication` will be shown in console but `This will never be shown` will never appear which should be written after the application is built (`var app = builder.Build();`)\r\n\r\n### Further technical details\r\n- ASP.NET Core version: 6.0.0\r\n- Running from console\r\n- Include the output of `dotnet --info`:\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003edotnet --info Output\u003c/summary\u003e\r\n\r\n```\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100\r\n Commit:    9e8b04bbff\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  12.0\r\n OS Platform: Darwin\r\n RID:         osx-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/6.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0\r\n  Commit:  4822e3c3aa\r\n\r\n.NET SDKs installed:\r\n  2.1.816 [/usr/local/share/dotnet/sdk]\r\n  3.1.100 [/usr/local/share/dotnet/sdk]\r\n  3.1.200 [/usr/local/share/dotnet/sdk]\r\n  3.1.300 [/usr/local/share/dotnet/sdk]\r\n  3.1.413 [/usr/local/share/dotnet/sdk]\r\n  5.0.100-preview.6.20318.15 [/usr/local/share/dotnet/sdk]\r\n  5.0.100-preview.7.20366.6 [/usr/local/share/dotnet/sdk]\r\n  5.0.100-rc.1.20452.10 [/usr/local/share/dotnet/sdk]\r\n  5.0.100 [/usr/local/share/dotnet/sdk]\r\n  5.0.401 [/usr/local/share/dotnet/sdk]\r\n  6.0.100-rc.1.21463.6 [/usr/local/share/dotnet/sdk]\r\n  6.0.100-rc.2.21505.57 [/usr/local/share/dotnet/sdk]\r\n  6.0.100 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.28 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.28 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.19 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-preview.4.20257.10 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-preview.5.20279.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-preview.6.20312.15 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-preview.7.20365.19 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-rc.1.20451.17 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.10 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-rc.2.21480.10 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.17 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.18 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.28 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.19 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-preview.4.20251.6 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-preview.5.20278.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-preview.6.20305.6 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-preview.7.20364.11 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-rc.1.20451.14 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.10 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-rc.2.21480.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\u003c/details\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOvZCkA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc468TOe",
                                           "createdAt":  "2021-12-08T14:55:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-12-08T14:55:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc468T7w",
                                           "createdAt":  "2021-12-08T14:58:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pranavkm",
                                           "body":  "Seems to be a DI thing (/cc @davidfowl). \r\n\r\n@hasrthur the default implementation of IHttpClientFactory expects a ILoggerFactory, so you have a recursive relationship between the two. The fact that the DI container doesn\u0027t fail with this message is suprising.",
                                           "updatedAt":  "2021-12-08T14:58:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc468T_b",
                                           "createdAt":  "2021-12-08T14:59:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003e\r\n\r\n### Describe the bug\r\nIHttpClientFactory cannot be injected into ILoggerProvider since the application hangs at the moment when it should be built.\r\n\r\n### To Reproduce\r\n\u003c!--\r\nWe ❤ code! Point us to a minimalistic repro project hosted in a public GitHub repo.\r\nFor a repro project, create a new ASP.NET Core project using the template of your choice, apply the minimum required code to result in the issue you\u0027re observing.\r\n\r\nWe will close this issue if:\r\n- The repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\r\n- If we will not be able to repro the behavior you\u0027re reporting.\r\n- If the repro project is attached as a `.zip` file.\r\n- If the GitHub repro project is set to `Private`.\r\n--\u003e\r\nClone https://github.com/hasrthur/IHttpClientFactoryInSingletonService and try `dotnet run` inside the project.\r\nThe message `Before building WebApplication` will be shown in console but `This will never be shown` will never appear which should be written after the application is built (`var app = builder.Build();`)\r\n\r\n### Further technical details\r\n- ASP.NET Core version: 6.0.0\r\n- Running from console\r\n- Include the output of `dotnet --info`:\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003edotnet --info Output\u003c/summary\u003e\r\n\r\n```\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100\r\n Commit:    9e8b04bbff\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  12.0\r\n OS Platform: Darwin\r\n RID:         osx-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/6.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0\r\n  Commit:  4822e3c3aa\r\n\r\n.NET SDKs installed:\r\n  2.1.816 [/usr/local/share/dotnet/sdk]\r\n  3.1.100 [/usr/local/share/dotnet/sdk]\r\n  3.1.200 [/usr/local/share/dotnet/sdk]\r\n  3.1.300 [/usr/local/share/dotnet/sdk]\r\n  3.1.413 [/usr/local/share/dotnet/sdk]\r\n  5.0.100-preview.6.20318.15 [/usr/local/share/dotnet/sdk]\r\n  5.0.100-preview.7.20366.6 [/usr/local/share/dotnet/sdk]\r\n  5.0.100-rc.1.20452.10 [/usr/local/share/dotnet/sdk]\r\n  5.0.100 [/usr/local/share/dotnet/sdk]\r\n  5.0.401 [/usr/local/share/dotnet/sdk]\r\n  6.0.100-rc.1.21463.6 [/usr/local/share/dotnet/sdk]\r\n  6.0.100-rc.2.21505.57 [/usr/local/share/dotnet/sdk]\r\n  6.0.100 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.28 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.28 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.19 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-preview.4.20257.10 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-preview.5.20279.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-preview.6.20312.15 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-preview.7.20365.19 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-rc.1.20451.17 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.10 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-rc.2.21480.10 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.17 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.18 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.28 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.19 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-preview.4.20251.6 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-preview.5.20278.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-preview.6.20305.6 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-preview.7.20364.11 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-rc.1.20451.14 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.10 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-rc.2.21480.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\u003c/details\u003e\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehasrthur\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-08T14:59:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc468cNF",
                                           "createdAt":  "2021-12-08T15:37:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Seems to be a duplicate of https://github.com/dotnet/runtime/issues/36458",
                                           "updatedAt":  "2021-12-08T15:37:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc468yDs",
                                           "createdAt":  "2021-12-08T17:18:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hasrthur",
                                           "body":  "\u003e Seems to be a duplicate of #36458\r\n\r\nor rather this: https://github.com/dotnet/runtime/issues/35986? But I don\u0027t know how to be 100% sure",
                                           "updatedAt":  "2021-12-08T17:18:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc468yyh",
                                           "createdAt":  "2021-12-08T17:22:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e or rather this: #35986?\r\n\r\n#35986 was fixed in 6.0. So if you are still seeing the issue, it isn\u0027t a duplicate of that.",
                                           "updatedAt":  "2021-12-08T17:22:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc468z8R",
                                           "createdAt":  "2021-12-08T17:28:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "No it\u0027s #36458. It really shouldn\u0027t hang but this scenario can\u0027t work anyways. Don\u0027t inject the IHttpClientFactory into your logger. As @pranavkm said, there\u0027s a cycle there. ",
                                           "updatedAt":  "2021-12-08T17:28:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4683-7",
                                           "createdAt":  "2021-12-08T17:49:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hasrthur",
                                           "body":  "@pranavkm , @davidfowl thank you for the answers, though I am puzzled on what to do. What should be the proposed way to log something to server from blazor application? Should I then not use the default approach with logger providers and come up with something custom?",
                                           "updatedAt":  "2021-12-08T17:49:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4685Bx",
                                           "createdAt":  "2021-12-08T17:54:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCFz4oA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pranavkm",
                                                                               "createdAt":  "2021-12-08T17:55:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2021-12-08T18:31:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hasrthur",
                                                                               "createdAt":  "2021-12-08T20:40:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Would not using DI to inject `IHttpClientFactory` into your `ILogger` work? Just create an `HttpClient` like normal.",
                                           "updatedAt":  "2021-12-08T17:54:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc469YUS",
                                           "createdAt":  "2021-12-08T20:25:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hasrthur",
                                           "body":  "@eerhardt \r\n\r\n\u003e using DI to inject `IHttpClientFactory` into your `ILogger`\r\n\r\nnot sure I understand what you mean here. As far as I read from [documentation](https://docs.microsoft.com/en-us/dotnet/core/extensions/custom-logging-provider) the only way to use custom logger is to have a custom logger provider.\r\n\r\n\u003e Just create an `HttpClient` like normal\r\n\r\nYou mean like `new HttpClient()`?\r\n\r\nAlso, from another [documentation](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-6.0#no-asynchronous-logger-methods) I found that my approach is not recommended and I shouldn\u0027t do anything time consuming when logging and the better approach would be to use some in-memory queue/channel and have some `IHostedService` which will listen to that channel and actually make http calls if/when needed\r\n\r\n",
                                           "updatedAt":  "2021-12-08T20:25:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc469Zib",
                                           "createdAt":  "2021-12-08T20:33:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCFz14A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "hasrthur",
                                                                               "createdAt":  "2021-12-08T20:35:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e You mean like new HttpClient()?\r\n\r\nYes.",
                                           "updatedAt":  "2021-12-08T20:33:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc469fXF",
                                           "createdAt":  "2021-12-08T21:09:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "What is your custom logger factory going to do? I\u0027m curious...",
                                           "updatedAt":  "2021-12-08T21:09:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc469f6s",
                                           "createdAt":  "2021-12-08T21:12:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hasrthur",
                                           "body":  "\u003e What is your custom logger factory going to do? I\u0027m curious...\r\n\r\nI have a blazor application where I want to have a logger which can log to server via REST API",
                                           "updatedAt":  "2021-12-08T21:12:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc469gXh",
                                           "createdAt":  "2021-12-08T21:15:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e I have a blazor application where I want to have a logger which can log to server via REST API\r\n\r\nAnd you plan to implement this by batching a set of logs and sending a request with a batch on a background thread right? The logging APIs are synchronous, and making an outbound http request per log would be pretty terrible.",
                                           "updatedAt":  "2021-12-08T21:15:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc469kKQ",
                                           "createdAt":  "2021-12-08T21:39:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hasrthur",
                                           "body":  "That\u0027s the plan. Right now it is performed as fire-and-forget task which makes http request in background but nothing is batched",
                                           "updatedAt":  "2021-12-08T21:39:12Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "IHttpClientFactory cannot be injected into ILoggerProvider",
        "labels":  [
                       "question",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64510",
        "createdAt":  "2022-01-30T12:00:42Z",
        "number":  64510,
        "author":  "KSemenenko",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCV-v2Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2022-01-30T13:13:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dudchenko610",
                                            "createdAt":  "2022-01-30T13:35:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vitalik23",
                                            "createdAt":  "2022-01-30T16:55:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KSemenenko",
                                            "createdAt":  "2022-01-30T18:26:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dtymakhov",
                                            "createdAt":  "2022-01-31T09:02:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2022-04-04T04:14:39Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2024-09-23T20:12:13Z",
        "body":  "### Background and motivation\r\n\r\nFor replacement implementation in TestHost I should do like this:\r\n``` cs\r\n services.RemoveAll\u003cISomeInterface\u003e();\r\n services.AddSingleton\u003cISomeInterface, FakeImplementation\u003e();\r\n```\r\n\r\nOr like this\r\n\r\n``` cs\r\nservices.Replace(new ServiceDescriptor(..... ));\r\n```\r\nSo I thought, why not use the Replace\u003cT\u003e method\r\nbut found that it didn\u0027t exist.\r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace Microsoft.Extensions.DependencyInjection.Extensions\r\n{\r\n    public static class ServiceCollectionDescriptorExtensions\r\n    {\r\n        public static bool Replace(this IServiceCollection services, Type serviceType, Func\u003cIServiceProvider, object\u003e factory);\r\n        public static bool Replace\u003cTService\u003e(this IServiceCollection services, Func\u003cIServiceProvider, TService\u003e factory);\r\n        public static bool Replace\u003cTService, TImplementation\u003e(this IServiceCollection services);\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n\r\n``` cs\r\n services.Replace\u003cFakeImplementation\u003e();\r\n services.Replace\u003cISomeInterface, FakeImplementation\u003e();\r\n services.Replace\u003cISomeInterface\u003e(f=\u003e new FakeImplementation());\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nThe Replace method already exists, it\u0027s a new API, so I don\u0027t see any serious risks.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeMTlGw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49GjYY",
                                           "createdAt":  "2022-01-30T12:00:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nFor replacement implementation in TestHost I should do like this:\r\n``` cs\r\n services.RemoveAll\u003cISomeInterface\u003e();\r\n services.AddSingleton\u003c ISomeInterface, FakeImplementation\u003e();\r\n```\r\n\r\nOr like this\r\n\r\n``` cs\r\nservices.Replace(new ServiceDescriptor(..... ));\r\n```\r\nSo I thought, why not use the Replace\u003cT\u003e method\r\nbut found that it didn\u0027t exist.\n\n### API Proposal\n\n```C#\r\nnamespace Microsoft.Extensions.DependencyInjection.Extensions\r\n{\r\n    public static class ServiceCollectionDescriptorExtensions\r\n    {\r\n        public static bool Replace(this IServiceCollection services, Type serviceType, Func\u003cIServiceProvider, object\u003e factory);\r\n        public static bool Replace\u003cTService\u003e(this IServiceCollection services, Func\u003cIServiceProvider, TService\u003e factory);\r\n        public static bool Replace\u003cTService, TImplementation\u003e(this IServiceCollection services);\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n\r\n``` cs\r\n services.Replace\u003cFakeImplementation\u003e();\r\n services.Replace\u003cISomeInterface, FakeImplementation\u003e();\r\n services.Replace\u003cISomeInterface\u003e(f=\u003e new FakeImplementation());\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nThe Replace method already exists, it\u0027s a new API, so I don\u0027t see any serious risks.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eKSemenenko\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-30T12:00:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49Gja5",
                                           "createdAt":  "2022-01-30T12:01:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KSemenenko",
                                           "body":  "If it\u0027s a good idea, I\u0027m happy to implement it.",
                                           "updatedAt":  "2022-01-30T12:01:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54xOUb",
                                           "createdAt":  "2024-03-28T21:34:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KSemenenko",
                                           "body":  "I think lifetime should be the same, as you mention it’s for testing",
                                           "updatedAt":  "2024-03-28T21:34:02Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Add to ServiceCollectionDescriptorExtensions generic .Replace\u003cT\u003e method",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64680",
        "createdAt":  "2022-02-02T13:58:00Z",
        "number":  64680,
        "author":  "michelcedric",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCMurFg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Enderlook",
                                            "createdAt":  "2022-02-02T14:52:30Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-02-08T22:16:37Z",
        "body":  "### Background and motivation\n\nBased on this old issue https://github.com/dotnet/aspnetcore/issues/2328\r\nA suggestion with very usefull Extension method was proposed\r\nA old PR was created\r\nhttps://github.com/aspnet/DependencyInjection/pull/619#issuecomment-361105539\r\n\r\nBut finally never finished.\r\n\r\nI adapted a little to \r\n\r\npublic static IServiceCollection Replace\u003cTService, TOldImplementation, TNewImplementation\u003e(this IServiceCollection collection, bool onlyFirst = false)\r\n\r\nThat can be very usefull in test project to replace an implementation by a fake/mock one.\r\n\r\nThanks to https://github.com/ManuDinicola for you question and challenge me to help me to create this proposition\n\n### API Proposal\n\n```C#\r\n /// \u003csummary\u003e\r\n        /// Replace all services in \u003csee cref=\"IServiceCollection\"/\u003e with the same service type\r\n        /// as \u003ctypeparamref name=\"TOldImplementation\"/\u003e and adds \u003ctypeparamref name=\"TNewImplementation\"/\u003e to the collection.\r\n        /// \u003c/summary\u003e\r\n        /// \u003ctypeparam name=\"TService\"\u003eThe type of the service to replace.\u003c/typeparam\u003e\r\n        /// \u003ctypeparam name=\"TOldImplementation\"\u003eThe old instance of the service to replace.\u003c/typeparam\u003e\r\n        /// \u003ctypeparam name=\"TNewImplementation\"\u003eThe new instance of the service to add.\u003c/typeparam\u003e\r\n        /// \u003cparam name=\"collection\"\u003eThe \u003csee cref=\"IServiceCollection\"/\u003e.\u003c/param\u003e\r\n        /// \u003cparam name=\"onlyFirst\"\u003eSupport to only replace the first \u003ctypeparamref name=\"TService\"/\u003e corresponding to \u003ctypeparamref name=\"TOldImplementation\"/\u003e\r\n        /// By default is false\r\n        /// \u003c/param\u003e\r\n        /// \u003creturns\u003eThe \u003csee cref=\"IServiceCollection\"/\u003e for chaining.\u003c/returns\u003e\r\n        public static IServiceCollection Replace\u003cTService, TOldImplementation, TNewImplementation\u003e(this IServiceCollection collection, bool onlyFirst = false)\r\n        {\r\n            if (collection == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(collection));\r\n            }\r\n\r\n            var serviceType = typeof(TService);\r\n            var oldImplementationType = typeof(TOldImplementation);\r\n            var newImplementationType = typeof(TNewImplementation);\r\n\r\n            var oldDescriptors = collection.Where(service =\u003e service.ServiceType == serviceType \u0026\u0026 service.ImplementationType == oldImplementationType).ToArray();\r\n\r\n            for (int i = 0; i \u003c oldDescriptors.Length; i++)\r\n            {\r\n                var oldDescriptor = oldDescriptors[i];\r\n                var index = collection.IndexOf(oldDescriptor);\r\n\r\n                // Copy the old descriptor, but replace its implementation type.\r\n                var newDescriptor = ServiceDescriptor.Describe(\r\n                    oldDescriptor.ServiceType,\r\n                    newImplementationType,\r\n                    oldDescriptor.Lifetime);\r\n\r\n                collection.Insert(index, newDescriptor);\r\n\r\n                collection.Remove(oldDescriptor);\r\n\r\n                if (onlyFirst)\r\n                    break;\r\n            }\r\n\r\n            return collection;\r\n        }\r\n```\r\n\n\n### API Usage\n\n```C#\r\nvar collection = new ServiceCollection();\r\n            var descriptor1 = new ServiceDescriptor(typeof(IFakeService), typeof(FakeService), ServiceLifetime.Transient);\r\n            var descriptor2 = new ServiceDescriptor(typeof(IFakeService), typeof(FakeService), ServiceLifetime.Transient);\r\n            var descriptor3 = new ServiceDescriptor(typeof(IFakeService), typeof(FakeService2), ServiceLifetime.Transient);\r\n            collection.Add(descriptor1);\r\n            collection.Add(descriptor2);\r\n\r\n            // Act\r\n            collection.Replace\u003cIFakeService, FakeService, FakeService2\u003e();\r\n```\r\n\n\n### Alternative Designs\n\nNo other idea but i open to other ideas ;)\n\n### Risks\n\nRisk very limited beacause it\u0027s a new Extension Method to facilitate the replacement in ServiceCollection.\r\nIt\u0027s also covered by unit tests",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPVIWaw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49RYei",
                                           "createdAt":  "2022-02-02T13:58:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-02-02T13:58:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49RZN1",
                                           "createdAt":  "2022-02-02T14:01:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michelcedric",
                                           "body":  "@davidfowl That can maybe interreted you? \r\nYou comment last Pull request about this similar proposition",
                                           "updatedAt":  "2022-02-02T14:01:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49R2fM",
                                           "createdAt":  "2022-02-02T15:59:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tornhoof",
                                           "body":  "There is:\r\nhttps://github.com/dotnet/runtime/blob/a5fda753afce966b9d31c76559636eb515bfa05a/src/libraries/Microsoft.Extensions.DependencyInjection.Abstractions/src/Extensions/ServiceCollectionDescriptorExtensions.cs#L676-L703\r\n\r\nwhich is used like\r\n``services.Replace(new ServiceDescriptor(typeof(IGroupProvider), typeof(MockedGroupProvider), ServiceLifetime.Singleton));``\r\n\r\nYour suggestion includes a replaceAll and a slightly changed signature to do it without the ServiceDescriptor type, but without the lifetime logic?",
                                           "updatedAt":  "2022-02-02T15:59:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49R26L",
                                           "createdAt":  "2022-02-02T16:00:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nBased on this old issue https://github.com/dotnet/aspnetcore/issues/2328\r\nA suggestion with very usefull Extension method was proposed\r\nA old PR was created\r\nhttps://github.com/aspnet/DependencyInjection/pull/619#issuecomment-361105539\r\n\r\nBut finally never finished.\r\n\r\nI adapted a little to \r\n\r\npublic static IServiceCollection Replace\u003cTService, TOldImplementation, TNewImplementation\u003e(this IServiceCollection collection, bool onlyFirst = false)\r\n\r\nThat can be very usefull in test project to replace an implementation by a fake/mock one.\r\n\r\nThanks to https://github.com/ManuDinicola for you question and challenge me to help me to create this proposition\n\n### API Proposal\n\n```C#\r\n /// \u003csummary\u003e\r\n        /// Replace all services in \u003csee cref=\"IServiceCollection\"/\u003e with the same service type\r\n        /// as \u003ctypeparamref name=\"TOldImplementation\"/\u003e and adds \u003ctypeparamref name=\"TNewImplementation\"/\u003e to the collection.\r\n        /// \u003c/summary\u003e\r\n        /// \u003ctypeparam name=\"TService\"\u003eThe type of the service to replace.\u003c/typeparam\u003e\r\n        /// \u003ctypeparam name=\"TOldImplementation\"\u003eThe old instance of the service to replace.\u003c/typeparam\u003e\r\n        /// \u003ctypeparam name=\"TNewImplementation\"\u003eThe new instance of the service to add.\u003c/typeparam\u003e\r\n        /// \u003cparam name=\"collection\"\u003eThe \u003csee cref=\"IServiceCollection\"/\u003e.\u003c/param\u003e\r\n        /// \u003cparam name=\"onlyFirst\"\u003eSupport to only replace the first \u003ctypeparamref name=\"TService\"/\u003e corresponding to \u003ctypeparamref name=\"TOldImplementation\"/\u003e\r\n        /// By default is false\r\n        /// \u003c/param\u003e\r\n        /// \u003creturns\u003eThe \u003csee cref=\"IServiceCollection\"/\u003e for chaining.\u003c/returns\u003e\r\n        public static IServiceCollection Replace\u003cTService, TOldImplementation, TNewImplementation\u003e(this IServiceCollection collection, bool onlyFirst = false)\r\n        {\r\n            if (collection == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(collection));\r\n            }\r\n\r\n            var serviceType = typeof(TService);\r\n            var oldImplementationType = typeof(TOldImplementation);\r\n            var newImplementationType = typeof(TNewImplementation);\r\n\r\n            var oldDescriptors = collection.Where(service =\u003e service.ServiceType == serviceType \u0026\u0026 service.ImplementationType == oldImplementationType).ToArray();\r\n\r\n            for (int i = 0; i \u003c oldDescriptors.Length; i++)\r\n            {\r\n                var oldDescriptor = oldDescriptors[i];\r\n                var index = collection.IndexOf(oldDescriptor);\r\n\r\n                // Copy the old descriptor, but replace its implementation type.\r\n                var newDescriptor = ServiceDescriptor.Describe(\r\n                    oldDescriptor.ServiceType,\r\n                    newImplementationType,\r\n                    oldDescriptor.Lifetime);\r\n\r\n                collection.Insert(index, newDescriptor);\r\n\r\n                collection.Remove(oldDescriptor);\r\n\r\n                if (onlyFirst)\r\n                    break;\r\n            }\r\n\r\n            return collection;\r\n        }\r\n```\r\n\n\n### API Usage\n\n```C#\r\nvar collection = new ServiceCollection();\r\n            var descriptor1 = new ServiceDescriptor(typeof(IFakeService), typeof(FakeService), ServiceLifetime.Transient);\r\n            var descriptor2 = new ServiceDescriptor(typeof(IFakeService), typeof(FakeService), ServiceLifetime.Transient);\r\n            var descriptor3 = new ServiceDescriptor(typeof(IFakeService), typeof(FakeService2), ServiceLifetime.Transient);\r\n            collection.Add(descriptor1);\r\n            collection.Add(descriptor2);\r\n\r\n            // Act\r\n            collection.Replace\u003cIFakeService, FakeService, FakeService2\u003e();\r\n```\r\n\n\n### Alternative Designs\n\nNo other idea but i open to other ideas ;)\n\n### Risks\n\nRisk very limited beacause it\u0027s a new Extension Method to facilitate the replacement in ServiceCollection.\r\nIt\u0027s also covered by unit tests\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emichelcedric\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-02T16:00:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49UXB2",
                                           "createdAt":  "2022-02-03T08:55:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michelcedric",
                                           "body":  "\u003e Tornhoof\r\n\r\nYes, it\u0027s volontary, the replacement make the replace by the same lifetime of the old implementation\r\nBut I can add the possibility to pass the lifetime desired for the replacement\r\n",
                                           "updatedAt":  "2022-02-03T08:55:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49UhZr",
                                           "createdAt":  "2022-02-03T09:40:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "If you add `Replace\u003cTService, TOldImplementation, TNewImplementation\u003e`, then please also add an overload that takes `Type` parameters so that it can be used on open generic service registrations.\r\n\r\n```C#\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nclass NullLogger\u003cT\u003e : ILogger\u003cT\u003e\r\n{\r\n    public void Log\u003cTState\u003e(LogLevel logLevel, EventId eventID, TState state, Exception? exception, Func\u003cTState, Exception?, string\u003e func) {}\r\n    public bool IsEnabled(LogLevel logLevel) =\u003e false;\r\n    public IDisposable BeginScope\u003cTState\u003e(TState state) =\u003e new NullDisposable();\r\n\r\n    private struct NullDisposable : IDisposable\r\n    {\r\n        public void Dispose() {}\r\n    }\r\n}\r\n\r\nstatic class Program\r\n{\r\n    // Signature from the proposed API.\r\n    public static IServiceCollection Replace\u003cTService, TOldImplementation, TNewImplementation\u003e(this IServiceCollection collection, bool onlyFirst = false)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    // Alternative signature.\r\n    public static IServiceCollection Replace(this IServiceCollection collection, Type service, Type oldImplementation, Type newImplementation, bool onlyFirst = false)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    static void Main()\r\n    {\r\n        var services = new ServiceCollection();\r\n        services.AddLogging();\r\n\r\n        // error CS7003: Unexpected use of an unbound generic name\r\n        services.Replace\u003cILogger\u003c\u003e, Logger\u003c\u003e, NullLogger\u003c\u003e\u003e();\r\n\r\n        // No problem here.\r\n        services.Replace(typeof(ILogger\u003c\u003e), typeof(Logger\u003c\u003e), typeof(NullLogger\u003c\u003e));\r\n    }\r\n}\r\n```\r\n\r\n",
                                           "updatedAt":  "2022-02-03T09:42:46Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal]: Add easyway possibility to replace a specific Implementation in ServiceCollection",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65656",
        "createdAt":  "2022-02-21T05:25:34Z",
        "number":  65656,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-Gh1w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2022-02-21T06:24:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2022-02-21T08:34:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ShreyasJejurkar",
                                            "createdAt":  "2022-02-21T09:58:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mterhorst",
                                            "createdAt":  "2022-02-21T19:20:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "karb0f0s",
                                            "createdAt":  "2022-02-21T19:39:03Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "karb0f0s",
                                            "createdAt":  "2022-02-21T19:39:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "avsteele",
                                            "createdAt":  "2022-05-18T00:09:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SijyKijy",
                                            "createdAt":  "2022-06-10T08:50:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Peter-Ivan",
                                            "createdAt":  "2023-03-29T08:50:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "divyeshio",
                                            "createdAt":  "2023-05-11T12:09:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ValeriyBogorodskiy",
                                            "createdAt":  "2023-06-30T06:54:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "scharnyw",
                                            "createdAt":  "2023-07-03T09:31:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "angelofb",
                                            "createdAt":  "2023-07-07T07:29:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fifty-six",
                                            "createdAt":  "2023-07-26T20:09:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2023-08-05T13:06:07Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "mblichowski",
                                            "createdAt":  "2023-08-09T12:40:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hexawyz",
                                            "createdAt":  "2023-09-01T00:52:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alirezanet",
                                            "createdAt":  "2023-10-09T23:03:07Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "alirezanet",
                                            "createdAt":  "2023-10-09T23:03:09Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "alirezanet",
                                            "createdAt":  "2023-10-09T23:03:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sidneyxvr",
                                            "createdAt":  "2023-12-01T02:16:29Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "cdschneider",
                                            "createdAt":  "2024-02-20T22:09:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cdschneider",
                                            "createdAt":  "2024-02-20T22:09:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "batkaevruslan",
                                            "createdAt":  "2024-02-21T09:27:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LeDahu22",
                                            "createdAt":  "2024-02-29T14:03:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cduivis",
                                            "createdAt":  "2024-03-05T09:22:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YohanSciubukgian",
                                            "createdAt":  "2024-03-17T01:14:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "egbakou",
                                            "createdAt":  "2024-03-17T03:23:26Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "egbakou",
                                            "createdAt":  "2024-03-17T03:23:28Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "sergiojrdotnet",
                                            "createdAt":  "2024-03-17T13:38:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sergiojrdotnet",
                                            "createdAt":  "2024-03-17T13:38:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MarioGruda",
                                            "createdAt":  "2024-04-24T15:05:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alienriver49",
                                            "createdAt":  "2024-05-03T13:12:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-06-18T00:14:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lvde0",
                                            "createdAt":  "2024-06-19T12:24:30Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "lvde0",
                                            "createdAt":  "2024-06-19T12:24:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ohmios",
                                            "createdAt":  "2024-07-29T03:54:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YZahringer",
                                            "createdAt":  "2024-08-15T06:40:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "romfir",
                                            "createdAt":  "2024-08-20T20:19:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "antoniofreire",
                                            "createdAt":  "2024-09-16T17:21:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Stolpe",
                                            "createdAt":  "2024-10-10T06:07:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jukkahyv",
                                            "createdAt":  "2024-10-18T10:13:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PieterjanDeClippel",
                                            "createdAt":  "2024-10-18T12:31:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "osajdapawel",
                                            "createdAt":  "2024-10-30T10:22:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "voroninp",
                                            "createdAt":  "2024-11-27T16:08:08Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "voroninp",
                                            "createdAt":  "2024-11-27T16:08:09Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "voroninp",
                                            "createdAt":  "2024-11-27T16:08:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andhesky",
                                            "createdAt":  "2025-01-03T20:41:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PejmanNik",
                                            "createdAt":  "2025-01-08T11:51:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KennethHoff",
                                            "createdAt":  "2025-01-13T20:06:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lvchkn",
                                            "createdAt":  "2025-01-17T00:50:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FiniteVoid",
                                            "createdAt":  "2025-01-23T14:26:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "neistow",
                                            "createdAt":  "2025-02-14T13:44:23Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "neistow",
                                            "createdAt":  "2025-02-14T13:44:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StevenRasmussen",
                                            "createdAt":  "2025-03-18T20:27:53Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "Meir017",
                                            "createdAt":  "2025-04-06T20:33:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kota-sakahara",
                                            "createdAt":  "2025-04-09T08:15:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "avsorokin",
                                            "createdAt":  "2025-04-17T18:10:21Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "ms-mayya",
                                            "createdAt":  "2025-04-25T03:03:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ms-mayya",
                                            "createdAt":  "2025-04-26T06:12:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ArminShoeibi",
                                            "createdAt":  "2025-05-12T12:58:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mariusz96",
                                            "createdAt":  "2025-05-13T09:05:26Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "mariusz96",
                                            "createdAt":  "2025-05-13T09:05:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aetos382",
                                            "createdAt":  "2025-06-12T08:40:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "inelisoni",
                                            "createdAt":  "2025-06-22T11:42:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "frencsi",
                                            "createdAt":  "2025-08-04T14:51:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "verdie-g",
                                            "createdAt":  "2025-08-14T15:33:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PabloStarOk",
                                            "createdAt":  "2025-08-16T01:01:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gagabu",
                                            "createdAt":  "2025-09-12T09:52:42Z"
                                        }
                                    ],
                          "totalCount":  69
                      },
        "updatedAt":  "2024-05-08T17:35:57Z",
        "body":  "### Background and motivation\r\n\r\nThere are cases where it is necessary to inject a dependency as a result of an asynchronous operation. This usually comes up when the dependency requires input from some IO operation (like retrieving a secret from a remote store). Today, developers tend to put blocking calls in factories:\r\n\r\n```C#\r\nvar services = new ServiceCollection();\r\nservices.AddSingleton\u003cIRemoteConnectionFactory, RedisConnectionFactory\u003e();\r\nservices.AddSingleton\u003cIRemoteConnection\u003e(sp =\u003e \r\n{\r\n    var factory = sp.GetRequiredService\u003cIRemoteConnectionFactory\u003e();\r\n    // NOOOOOO 😢 \r\n    return factory.ConnectAsync().Result;\r\n});\r\nServiceProvider sp = services.BuildServiceProvider();\r\n\r\nIRemoteConnection connection = await sp.GetRequiredServiceAsync\u003cIRemoteConnection\u003e();\r\n\r\npublic interface IRemoteConnection\r\n{\r\n    Task PublishAsync(string channel, string message);\r\n    Task DisposeAsync();\r\n}\r\n\r\npublic interface IRemoteConnectionFactory\r\n{\r\n    Task\u003cIRemoteConnection\u003e ConnectAsync();\r\n}\r\n```\r\n\r\nThe only other viable solution is to move that async operation to method calls, which results in deferring all IO until methods are called (where things can truly be async). This is a non-trivial refactoring that might be impossible depending on the circumstance. The idea here is to provide asynchronous construction support, so that these scenarios can work.\r\n\r\n### API Proposal\r\n\r\n#### Async Resolution Support\r\n\r\n```C#\r\nnamespace Microsoft.Extensions.DependencyInjection;\r\n\r\npublic class ServiceDescriptor\r\n{\r\n    public static ServiceDescriptor Describe(Type serviceType, Func\u003cIServiceProvider, ValueTask\u003cobject\u003e\u003e asyncFactory, ServiceLifetime serviceLifetime) =\u003e null;\r\n}\r\n\r\n// These are extension methods that take an async factory\r\npublic static class ServiceCollectionExtensions\r\n{\r\n    public static IServiceCollection AddSingleton\u003cTService\u003e(this IServiceCollection services, Func\u003cIServiceProvider, ValueTask\u003cTService\u003e\u003e asyncFactory);\r\n\r\n    public static IServiceCollection AddSingleton(this IServiceCollection services, Type serviceType, Func\u003cIServiceProvider, ValueTask\u003cobject\u003e\u003e asyncFactory);\r\n\r\n    public static IServiceCollection AddScoped\u003cTService\u003e(this IServiceCollection services, Func\u003cIServiceProvider, ValueTask\u003cTService\u003e\u003e asyncFactory);\r\n\r\n    public static IServiceCollection AddScoped(this IServiceCollection services, Type serviceType, Func\u003cIServiceProvider, ValueTask\u003cobject\u003e\u003e asyncFactory);\r\n\r\n    public static IServiceCollection AddTransient\u003cTService\u003e(this IServiceCollection services, Func\u003cIServiceProvider, ValueTask\u003cTService\u003e\u003e asyncFactory);\r\n\r\n    public static IServiceCollection AddTransient(this IServiceCollection services, Type serviceType, Func\u003cIServiceProvider, ValueTask\u003cobject\u003e\u003e asyncFactory);\r\n}\r\n\r\npublic static class AsyncServiceProviderExtensions\r\n{\r\n    public static async ValueTask\u003cT\u003e GetRequiredServiceAsync\u003cT\u003e(this IServiceProvider serviceProvider);\r\n    public static async ValueTask\u003cobject\u003e GetServiceAsync(this IServiceProvider serviceProvider, Type serviceType);\r\n}\r\n```\r\n\r\n#### Async Injection Support\r\n\r\nThese APIs would use the convention that async resolution is tied to `ValueTask/Task\u003cTServiceType\u003e` and would resolve the service and await the result as part of construction (see the example for more details).\r\n\r\n```C#\r\nnamespace Microsoft.Extensions.DependencyInjection;\r\n\r\npublic delegate ValueTask\u003cobject\u003e AsyncObjectFactory(IServiceProvider serviceProvider, object?[]? args);\r\npublic delegate ValueTask\u003cT\u003e AsyncObjectFactory\u003cT\u003e(IServiceProvider serviceProvider, object?[]? args);\r\n\r\npublic static class ActivatorUtilities\r\n{\r\n    public static AsyncObjectFactory CreateAsyncFactory(Type type);\r\n    public static AsyncObjectFactory\u003cT\u003e CreateAsyncFactory\u003cT\u003e();\r\n}\r\n```\r\n\r\n**NOTE: The generic version could be done using static abstract interface methods and would be more trim friendly.**\r\n\r\n### API Usage\r\n\r\n```C#\r\nvar services = new ServiceCollection();\r\n\r\n// This implementation will add `Task\u003cIRemoteConnection\u003e` to the container.\r\nservices.AddSingleton\u003cIRemoteConnection\u003e(sp =\u003e \r\n{\r\n    var factory = sp.GetRequiredService\u003cIRemoteConnectionFactory\u003e();\r\n    return factory.ConnectAsync();\r\n});\r\nServiceProvider sp = services.BuildServiceProvider();\r\n\r\nIRemoteConnection connection = await sp.GetRequiredServiceAsync\u003cIRemoteConnection\u003e();\r\n\r\nAsyncObjectFactory\u003cB\u003e factory = ActivatorUtilities.CreateAsyncFactory\u003cB\u003e(sp);\r\nB dep = await factory(sp, null);\r\n\r\npublic class A\r\n{\r\n    private IRemoteConnection _connection;\r\n    private A(IRemoteConnection connection) { _connection = connection }\r\n    // We can\u0027t use a constructor here since the container doesn\u0027t natively understand async dependencies\r\n    public static A Create(IRemoteConnection connection)\r\n    {\r\n         return new A(connection);\r\n    }\r\n}\r\n\r\npublic class B\r\n{\r\n    private A _a;\r\n    private B(A a) { _a = a }\r\n    // We can\u0027t use a constructor here since the container doesn\u0027t natively understand async dependencies\r\n    public static B Create(A a)\r\n    {\r\n         return new B(a);\r\n    }\r\n}\r\n\r\npublic interface IRemoteConnection\r\n{\r\n    Task PublishAsync(string channel, string message);\r\n    Task DisposeAsync();\r\n}\r\n\r\npublic interface IRemoteConnectionFactory\r\n{\r\n    Task\u003cIRemoteConnection\u003e ConnectAsync();\r\n}\r\n```\r\n\r\n### Risks\r\n\r\n- Need to determine what happens when async services are resolved from a sync call to GetService (we should throw).\r\n- ~3rd party DI containers would need to support this~\r\n- There are no async constructors, we need to invent a constructor surrogate for this (see the example).\r\n- ~Implementation complexity (but we can handle this 😄)~. It\u0027s a bit easier if we do it as an extension.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfTvoHw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-YCNK",
                                           "createdAt":  "2022-02-21T05:25:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nThere are cases where it is necessary to inject a dependency as a result of an asynchronous operation. This usually comes up when the dependency requires input from some IO operation (like retrieving a secret from a remote store). Today, developers tend to put blocking calls in factories:\r\n\r\n```C#\r\nvar services = new ServiceCollection();\r\nservices.AddSingleton\u003cIRemoteConnectionFactory, RedisConnectionFactory\u003e();\r\nservices.AddSingleton\u003cIRemoteConnection\u003e(sp =\u003e \r\n{\r\n    var factory = sp.GetRequiredService\u003cIRemoteConnectionFactory\u003e();\r\n    // NOOOOOO 😢 \r\n    return factory.ConnectAsync().Result;\r\n});\r\nServiceProvider sp = services.BuildServiceProvider();\r\n\r\nIRemoteConnection connection = await sp.GetRequiredServiceAsync\u003cIRemoteConnection\u003e();\r\n\r\npublic interface IRemoteConnection\r\n{\r\n    Task PublishAsync(string channel, string message);\r\n    Task DisposeAsync();\r\n}\r\n\r\npublic interface IRemoteConnectionFactory\r\n{\r\n    Task\u003cIRemoteConnection\u003e ConnectAsync();\r\n}\r\n```\r\n\r\nThe only other viable solution is to move that async operation to method calls, which results in deferring all IO until methods are called (where things can truly be async). This is a non-trivial refactoring that might be impossible depending on the circumstance. The idea here is to provide asynchronous construction support, so that these scenarios can work.\r\n\r\nThere are a set of features that would be required outside of this API proposal to make this work but those will be left out for now (specifically around how constructors would work).\n\n### API Proposal\n\n\r\n```C#\r\nnamespace Microsoft.Extensions.DependencyInjection\r\n{\r\n    public interface IAsyncServiceProvider : IServiceProvider\r\n    {\r\n        ValueTask\u003cobject\u003e GetServiceAsync(Type serviceType);\r\n    }\r\n\r\n    // Added the IAsyncServiceProvider implementation\r\n    public sealed class ServiceProvider : IAsyncDisposable, IDisposable, IServiceProvider, IAsyncServiceProvider \r\n    {\r\n    }\r\n\r\n    // This AsyncImplementationFactory gets added to the existing service descriptor\r\n    public class ServiceDescriptor\r\n    {\r\n        public ServiceDescriptor(Func\u003cIAsyncServiceProvider, ValueTask\u003cobject\u003e\u003e asyncImplementationFactory)\r\n        {\r\n            AsyncImplementationFactory  = asyncImplementationFactory;\r\n        }\r\n\r\n        public Func\u003cIAsyncServiceProvider, ValueTask\u003cobject\u003e\u003e? AsyncImplementationFactory { get; }\r\n    \r\n        public static AsyncServiceDescriptor Describe(Type serviceType, Func\u003cIAsyncServiceProvider, ValueTask\u003cobject\u003e\u003e asyncFactory, ServiceLifetime serviceLifetime) =\u003e null;\r\n    }\r\n    \r\n    // These are extension methods that take an async factory\r\n    public static class ServiceCollectionExtensions\r\n    {\r\n        public static IServiceCollection AddSingleton\u003cTService\u003e(this IServiceCollection services, Func\u003cIAsyncServiceProvider, ValueTask\u003cTService\u003e\u003e asyncFactory);\r\n    \r\n        public static IServiceCollection AddSingleton(this IServiceCollection services, Type serviceType, Func\u003cIAsyncServiceProvider, ValueTask\u003cobject\u003e\u003e asyncFactory);\r\n    \r\n        public static IServiceCollection AddScoped\u003cTService\u003e(this IServiceCollection services, Func\u003cIAsyncServiceProvider, ValueTask\u003cTService\u003e\u003e asyncFactory);\r\n    \r\n        public static IServiceCollection AddScoped(this IServiceCollection services, Type serviceType, Func\u003cIAsyncServiceProvider, ValueTask\u003cobject\u003e\u003e asyncFactory);\r\n    \r\n        public static IServiceCollection AddTransient\u003cTService\u003e(this IServiceCollection services, Func\u003cIAsyncServiceProvider, ValueTask\u003cTService\u003e\u003e asyncFactory);\r\n    \r\n        public static IServiceCollection AddTransient(this IServiceCollection services, Type serviceType, Func\u003cIAsyncServiceProvider, ValueTask\u003cobject\u003e\u003e asyncFactory);\r\n    }\r\n\r\n    public static class AsyncServiceProviderExtensions\r\n    {\r\n        public static async ValueTask\u003cT\u003e GetRequiredServiceAsync\u003cT\u003e(this IAsyncServiceProvider serviceProvider);\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```C#\r\nvar services = new ServiceCollection();\r\nservices.AddSingleton\u003cIRemoteConnection\u003e(sp =\u003e \r\n{\r\n    var factory = sp.GetRequiredService\u003cIRemoteConnectionFactory\u003e();\r\n    return factory.ConnectAsync();\r\n});\r\nServiceProvider sp = services.BuildServiceProvider();\r\n\r\nIRemoteConnection connection = await sp.GetRequiredServiceAsync\u003cIRemoteConnection\u003e();\r\n\r\npublic interface IRemoteConnection\r\n{\r\n    Task PublishAsync(string channel, string message);\r\n    Task DisposeAsync();\r\n}\r\n\r\npublic interface IRemoteConnectionFactory\r\n{\r\n    Task\u003cIRemoteConnection\u003e ConnectAsync();\r\n}\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n- Need to determine what happens when async services are resolved from a sync call to GetService (we should throw).\r\n- 3rd party DI containers would need to support this \r\n- There are no async constructors, we need to invent a constructor surrogate for this.\r\n- Implementation complexity (but we can handle this 😄)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavidfowl\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-21T05:25:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-YCf3",
                                           "createdAt":  "2022-02-21T05:28:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCPkRuw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "dadhi",
                                                                               "createdAt":  "2022-02-21T06:39:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "DI council: @alexmg @tillig @pakrym @ENikS @ipjohnson @dadhi @seesharper @jeremydmiller @alistairjevans\r\n\r\n",
                                           "updatedAt":  "2022-02-21T05:28:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-YGj4",
                                           "createdAt":  "2022-02-21T06:07:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "FWIW, it feels weird to put `IAsyncServiceProvider` in `Microsoft.Extensions.DependencyInjection` when `IServiceProvider` is in `System`.",
                                           "updatedAt":  "2022-02-21T06:07:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-YVjR",
                                           "createdAt":  "2022-02-21T07:52:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Joe4evr",
                                           "body":  "\u003e * There are no async constructors, we need to invent a constructor surrogate for this.\r\n\r\n[Related discussion](https://github.com/dotnet/csharplang/discussions/419), itself linking to [this overarching issue](https://github.com/dotnet/aspnetcore/issues/24142).",
                                           "updatedAt":  "2022-02-21T07:52:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-Z2El",
                                           "createdAt":  "2022-02-21T14:55:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbJhcQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "tillig",
                                                                               "createdAt":  "2022-02-21T15:13:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2022-02-21T15:35:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "aloraman",
                                                                               "createdAt":  "2022-02-21T20:05:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ENikS",
                                                                               "createdAt":  "2022-02-21T21:10:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "rjgotten",
                                                                               "createdAt":  "2022-02-22T14:59:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2022-03-07T20:25:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "pakrym-stripe",
                                                                               "createdAt":  "2022-05-23T16:13:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Burrix",
                                                                               "createdAt":  "2024-03-19T17:49:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "alistairjevans",
                                           "body":  "Ok, so there\u0027s a few things to cover off here. Some of them may be specific to Autofac, some of them not. \r\n\r\nWe dipped our toe in the async-di water last year to add support for `IAsyncDisposable`.  This actually required relatively minimal changes to the overall Autofac codebase, primarily because disposal happens outside of the actual service resolve pipeline. At the time when we did that, I did consider what might be involved to go full-async, because honestly @davidfowl raising this proposal was just a matter of time.\r\n\r\nI\u0027ll lead with what you describe as \"implementation complexity\", just because we should discuss the amount of change needed by us if you want to do async DI properly. Arguably, complexity isn\u0027t a superb reason to just not do something, but in this case...\r\n\r\n### Async virality\r\n\r\nFundamentally, the entire Autofac resolve pipeline will need to be updated to use `ValueTask\u003cT\u003e` instead of `T`, and async/await as needed. \r\n\r\nWe can\u0027t only change the resolve path for the async registrations; the viral nature of async prevents it, unless we do sync-over-async when resolving those services.  The ability to await a service resolve would have to be everywhere to actually gain the async benefits.\r\n\r\n\u003e Attempting to ignore the viral nature of async by making assumptions in certain places has yielded a [bug](https://github.com/autofac/Autofac/issues/1284) on `IAsyncDisposable` support already.\r\n\r\nWe also really don\u0027t want to maintain a sync _and_ async resolve pipeline, that would be a huge amount of extra code maintenance, because, like I said, everything would have to change in our resolve pipeline.\r\n\r\nSo that all implies our pipeline becomes async by default, and we add a new `ResolveAsync\u003cTService\u003e()` method on `ILifetimeScope`, that becomes the \"normal\" resolve entry point. Then the existing sync `Resolve\u003cTService\u003e()` method would invoke `ResolveAsync\u003cTService\u003e()`, and if the returned `ValueTask\u003cTService\u003e` did not complete synchronously we do what? Throw? It\u0027s effectively illegal to not await a `ValueTask` you know is completing asynchronously, so not sure what we do there.\r\n\r\n```csharp\r\npublic class LifetimeScope \r\n{\r\n    public T Resolve\u003cT\u003e()\r\n    { \r\n         var task = ResolveAsync\u003cT\u003e();\r\n\r\n         if (result.IsCompleted) \r\n         {\r\n            return task.Result;\r\n         }\r\n         \r\n         // ??\r\n         throw new Exception(\"?\");\r\n    }\r\n\r\n    public ValueTask\u003cT\u003e ResolveAsync() \r\n    {\r\n        // do the resolve\r\n    }\r\n}\r\n```\r\n\r\nIt\u0027s important to note that we cannot know before beginning the resolve whether or not the resolve operation will complete synchronously, so we basically have to \"try\" and somehow bail after the fact.\r\n\r\nThis all starts to get pretty complicated.\r\n\r\n### Lazy\u003cT\u003e\r\n\r\nUsers of Autofac often inject `Lazy\u003cT\u003e`, which is based in the sync world.\r\n\r\nSpecifically, it has a property used to access the underlying service. \r\n\r\nThat won\u0027t work for async, so I imagine we would need a new `LazyAsync\u003cT\u003e`? Would that live in `System` as `Lazy\u003cT\u003e` does?\r\n\r\nBeyond technical problems, this puts an onus on the component to know which type of lazy it should use; this introduces coupling between the service and the dependency, which somewhat defies the point.\r\n\r\n### Func\u003cT\u003e Dependencies\r\n\r\nAutofac let\u0027s you inject invokable factories as `Func\u003cTService\u003e` instances, to be resolved later. I imagine we would need to implement support for generating async versions of those factories.\r\n\r\n### Thread Safety\r\n\r\nOne of the things we\u0027ve generally asserted in Autofac is that a Resolve happens on a single thread. Because it\u0027s possible for users to create new lifetime scopes and generally do very weird stuff in resolve paths, there are locks in place that would need to be replaced, because the resolve would now be able to proceed on a different thread than the one it started on.\r\n\r\n### Integrations\r\n\r\nMost of our existing active integrations would need updating to understand/support async, which is quite an undertaking in and of itself.\r\n\r\n---------\r\n\r\nThere\u0027s almost certainly more challenges here than I\u0027ve documented; these are just a few. I\u0027m pretty confident that this would be a _huge_ piece of work to implement for Autofac.\r\n\r\nBeyond the actual difficulty though...\r\n\r\n### Libraries would have to change\r\n\r\nThese changes could get more complex/confusing for users if an existing library component depends on a service that a user can override. For a random example, let\u0027s say a library `Contoso.ConnectLib` has a dependency on Autofac, and uses our `Lazy\u003cT\u003e` support to do lazy instantiation.  (While it may not be best practice for public nuget libraries to take a direct dependency on a IoC container, this happens with internal packages all the time.)\r\n\r\nNow, `Contoso.ConnectLib` lets you override some behaviour by registering your own implementation of a service, and a component in the library injects that using `Lazy\u003cIMyService\u003e`.   Now, a user will look at Autofac and think, \"cool, I can just register an async delegate for this type\". Then they try to use the library and it explodes because you can\u0027t do a sync injection of the async type. \r\n\r\nEither the library implementer has to change to support async DI injection, Autofac would have to change to have a compatibility \"fallback\" of doing sync-over-async, or there will be a lot of users having to apply workarounds like the below to get compatibility with their libraries.\r\n\r\n```csharp\r\n// 🤮\r\nbuilder.Register(ctx =\u003e new Lazy\u003cMyService\u003e(() =\u003e ctx.ResolveAsync\u003cMyService\u003e().Result));\r\n```\r\n\r\n### Performance Overheads\r\n\r\nI don\u0027t have the numbers on this, but I imagine the runtime team will; what are the overheads of a `ValueTask` backed state machine being added to a method, even if the method completes synchronously? In the Autofac resolve pipeline, it would be sync in a huge percentage of cases.  To do async resolve properly, a lot of methods inside Autofac would get async state machines, and I\u0027m somewhat concerned about the extra CPU time spent doing all resolves, to support a small subset of dependencies doing async setup.\r\n\r\n### User Breaking Changes\r\n\r\nIn 2020, Autofac v6 changed the way that Autofac can be extended by switching to a pipeline approach, and letting users add middleware. Middleware created since then may likely have to change to support users, even if they don\u0027t use async factory registration, which I can imagine might annoy our users somewhat.\r\n\r\n--------- \r\n\r\nAs a parting note, I will add that Autofac is about object construction. That\u0027s pretty much it. People have tried to do some pretty crazy things with Autofac beyond that task, up to and including doing their entire app startup using build callbacks and the `IStartable` interface.  Adding async DI like this feels like it could make this worse.\r\n\r\nI generally think that injecting a factory type, and then calling async methods on that factory when you need it, to get the appropriate instance, isn\u0027t the end of the world, and I\u0027m not sure the trade-offs would be worth it. ",
                                           "updatedAt":  "2022-02-21T14:55:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-apUV",
                                           "createdAt":  "2022-02-21T19:26:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOER41Vg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2022-02-22T06:07:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Khitiara",
                                                                               "createdAt":  "2022-06-27T14:17:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "mariusz96",
                                                                               "createdAt":  "2025-05-13T09:07:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "dadhi",
                                           "body":  "I agree with @alistairjevans that the \"native\" async support will be a very complex task.\r\nSo instead, I propose to make this an external extension to solve the specific problem.\r\n\r\nIf we concentrate only on the async **resolution** (because it is unclear to me how an async **injection** suppose to work),\r\nwe may use much smaller API extensions of the DI libs to achieve the result.\r\n\r\nHere is the working example from the [DryIoc](https://github.com/dotnet/runtime/issues/65656)\r\n\r\n```cs\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing NUnit.Framework;\r\n\r\nnamespace DryIoc.Microsoft.DependencyInjection.Specification.Tests\r\n{\r\n    public static class AsyncExt\r\n    {\r\n        public static IServiceCollection AddSingleton\u003cTService\u003e(this IServiceCollection services, Func\u003cIServiceProvider, Task\u003cTService\u003e\u003e asyncFactory)\r\n        {\r\n            var factoryID = Factory.GetNextID();\r\n\r\n            Task\u003cTService\u003e CreateServiceAsync(IServiceProvider sp)\r\n            {\r\n                var dryIoc = sp.GetRequiredService\u003cIResolverContext\u003e();\r\n                var result = dryIoc.SingletonScope.GetOrAddViaFactoryDelegate(factoryID, r =\u003e asyncFactory(r), dryIoc);\r\n                return (Task\u003cTService\u003e)result;\r\n            }\r\n\r\n            return services.AddSingleton\u003cFunc\u003cIServiceProvider, Task\u003cTService\u003e\u003e\u003e(CreateServiceAsync);\r\n        }\r\n\r\n        public static Task\u003cTService\u003e GetRequiredServiceAsync\u003cTService\u003e(this IServiceProvider sp) =\u003e\r\n            sp.GetRequiredService\u003cFunc\u003cIServiceProvider, Task\u003cTService\u003e\u003e\u003e().Invoke(sp);\r\n    }\r\n\r\n    public class AsyncResolutionTestsPOC\r\n    {\r\n        [Test]\r\n        public async Task GetRequiredServiceAsync()\r\n        {\r\n            var services = new ServiceCollection();\r\n\r\n            services.AddSingleton\u003cIRemoteConnectionFactory, TestConnectionFactory\u003e();\r\n            services.AddSingleton\u003cIRemoteConnection\u003e(sp =\u003e\r\n            {\r\n                var factory = sp.GetRequiredService\u003cIRemoteConnectionFactory\u003e();\r\n                return factory.ConnectAsync();\r\n            });\r\n\r\n            var providerFactory = new DryIocServiceProviderFactory();\r\n            var provider = providerFactory.CreateServiceProvider(providerFactory.CreateBuilder(services));\r\n\r\n            var connection1 = await provider.GetRequiredServiceAsync\u003cIRemoteConnection\u003e();\r\n            Assert.IsNotNull(connection1);\r\n\r\n            var connection2 = await provider.GetRequiredServiceAsync\u003cIRemoteConnection\u003e();\r\n            Assert.AreSame(connection2, connection1);\r\n\r\n            await connection2.PublishAsync(\"hello\", \"sailor\");\r\n        }\r\n\r\n        public interface IRemoteConnection\r\n        {\r\n            Task PublishAsync(string channel, string message);\r\n            Task DisposeAsync();\r\n        }\r\n\r\n        public interface IRemoteConnectionFactory\r\n        {\r\n            Task\u003cIRemoteConnection\u003e ConnectAsync();\r\n        }\r\n        class TestConnectionFactory : IRemoteConnectionFactory\r\n        {\r\n            public Task\u003cIRemoteConnection\u003e ConnectAsync() =\u003e Task.FromResult\u003cIRemoteConnection\u003e(new TestRemoteConnection());\r\n\r\n        }\r\n        class TestRemoteConnection : IRemoteConnection\r\n        {\r\n            public Task DisposeAsync() =\u003e Task.CompletedTask;\r\n            public async Task PublishAsync(string channel, string message)\r\n            {\r\n                await Task.Delay(TimeSpan.FromMilliseconds(17));\r\n                Console.WriteLine(channel + \"-\u003e\" + message);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n      ",
                                           "updatedAt":  "2022-02-21T19:27:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-aqVn",
                                           "createdAt":  "2022-02-21T19:34:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCPsTGQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tillig",
                                                                               "createdAt":  "2022-02-21T19:39:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2022-02-21T20:38:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ENikS",
                                           "body":  "I went through implementation of async in one of my prototypes for Unity. Ended up with two independent pipelines with rather complex synchronization issues. For example, all thread based lifetimes stopped working in async.\r\n\r\nAfter spending couple of months on this endeavor I decided to scratch support for async completely.",
                                           "updatedAt":  "2022-02-21T19:34:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-bvb6",
                                           "createdAt":  "2022-02-22T06:12:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@alistairjevans Thanks for those thoughts. Those resonate and I understand how complex it would be to support this (as it forks the entire code base).\r\n\r\n@dadhi I love this. I\u0027ve listed it under alternative designs. There are some complexities around:\r\n- What happens when resolution fails. Is the Task cached?\r\n- Synchronizaton needs to be handled in this extension (if multiple people try to resolve the same Task\u003cT\u003e, they should get the same instance).\r\n\r\n\u003e (because it is unclear to me how an async injection suppose to work),\r\n\r\nI was thinking that we could look at an constructor surrogate. A static factory method on the type (Create or CreateAsync). You could even envision a static abstract interface method here (`ICreateable\u003cT, ...Tn\u003e`). This could be added externally as well though, it could be an extension to ActivatorUtilitites",
                                           "updatedAt":  "2022-02-22T06:27:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-bzib",
                                           "createdAt":  "2022-02-22T06:47:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I\u0027ve updated the API proposal. We need to agree on some semantics for how this extension would work. I like the idea that we would map async resolution to `ValueTask/Task\u003cTServiceType\u003e` and we can build other conventions on top of those primitives.\r\n\r\n",
                                           "updatedAt":  "2022-02-22T06:47:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-cAsT",
                                           "createdAt":  "2022-02-22T08:14:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dadhi",
                                           "body":  "@davidfowl  \r\n\r\n\u003e What happens when resolution fails. Is the Task cached?\r\n\r\nIn the demonstrated approach DryIoc will cache the task for the `SingletonScope` or for the  `CurrentScope` lifetime. Moreover `ValueTask` will be boxed to object. \r\nBut this is the current behavior and we may play with that.\r\n\r\n\u003e Synchronizaton needs to be handled in this extension (if multiple people try to resolve the same Task, they should get the same instance).\r\n\r\n Not sure. At least `IScope.GetOrAddViaFactoryDelegate` ensures that the passed task-creation delegate will be called just once.\r\n\r\n\r\n",
                                           "updatedAt":  "2022-02-22T08:17:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-dUrm",
                                           "createdAt":  "2022-02-22T14:50:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEeCO9Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "quixoticaxis",
                                                                               "createdAt":  "2022-02-23T00:13:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "seesharper",
                                                                               "createdAt":  "2022-02-23T00:45:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "drmollineda",
                                                                               "createdAt":  "2025-08-12T18:20:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "tillig",
                                           "body":  "I could be missing something, but it seemed like the convenience of trying to wrap the async factory in the DI container was to abstract away the factory itself so you could \"simply inject\" the thing that required the async/await.\r\n\r\nIn the new proposal, it just moves the factory itself out a level, plus it introduces the need for any async resolution to use service location. How is that better than just resolving the factory and using it directly?",
                                           "updatedAt":  "2022-02-22T14:50:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ruD89",
                                           "createdAt":  "2023-11-12T20:56:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODzq59g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "quixoticaxis",
                                                                               "createdAt":  "2023-11-13T01:23:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Burrix",
                                                                               "createdAt":  "2024-03-19T17:51:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "scharnyw",
                                                                               "createdAt":  "2024-09-26T08:47:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "dazinator",
                                           "body":  "A bit nervous to be perhaps stating the obvious here but why not something like this:-\r\n\r\n```casharp\r\nvar services = new ServiceCollection();\r\nservices.AddSingleton\u003cIRemoteConnectionFactory, RedisConnectionFactory\u003e();\r\nservices.AddSingleton\u003cTask\u003cIRemoteConnection\u003e\u003e(sp =\u003e \r\n{\r\n    var factory = sp.GetRequiredService\u003cIRemoteConnectionFactory\u003e();\r\n    return factory.ConnectAsync();\r\n});\r\nServiceProvider sp = services.BuildServiceProvider();\r\n\r\nIRemoteConnection connection = await sp.GetRequiredServiceAsync\u003cIRemoteConnection\u003e();\r\n\r\npublic interface IRemoteConnection\r\n{\r\n    Task PublishAsync(string channel, string message);\r\n    Task DisposeAsync();\r\n}\r\n\r\npublic interface IRemoteConnectionFactory\r\n{\r\n    Task\u003cIRemoteConnection\u003e ConnectAsync();\r\n}\r\n\r\n```\r\nHere `GetRequiredServiceAsync\u003cIRemoteConnection\u003e();` would act as more of a convenience method that resolves `Task\u003cIRemoteConnection\u003e` and returns it.\r\n\r\nRegardless of the above, some additional thoughts:-\r\n\r\nAsync calls are typically going to be more prone to transient or other exceptions, especially if they involve any network bound stuff.\r\n\r\n1. How would exceptions be surfaced?\r\n2. Guidance on resiliency / where would polly policies be placed for example?\r\n\r\nI suspect the answers to the above would be that the containers wouldn\u0027t help here, and so that stuff would have to be \"handled\" by the developer in their underlying factory method implementations.. In other words, developer authored factory methods or classes would still be desired in perhaps most cases, if not initially, then eventually.\r\n\r\nGeneral observation: Placing async code in DI location takes control away from the application and hands it to the DI container. This is not necessarily wise without wrapping it with sufficient resiliency or other features and ensuring you have visibility and insight into failures and that the impact of a failure upon the application can be understood. By injecting a factory and calling an async method tylically within another async method the control flow is easy to follow and the impact easy to assess. By promoting the async factory method somewhere up into the container for DI to handle, I wonder whether that will actually make developers lives any easier when they do have to reason about failures or impacts. P.s I am not saying it will or it won\u0027t just a consideration.",
                                           "updatedAt":  "2023-11-12T21:13:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59OVHn",
                                           "createdAt":  "2024-05-08T16:00:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODhJ9NA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MV10",
                                                                               "createdAt":  "2024-05-08T17:07:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mrudat",
                                           "body":  "I would expect that a failed async initialisation (e.g. database is down) would have the exception handled precisely the same way as throwing an exception in a constructor is now (e.g. an invalid requested state in the new object).\n\nI\u0027m not sure why it might _want_ to be semantically distinct. It\u0027s still a failure to create the object you wanted.\n\nIf you require special handling for a transient error, you can do that in the async constructor or a try/catch, as usual.",
                                           "updatedAt":  "2024-05-08T16:00:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59O-gf",
                                           "createdAt":  "2024-05-08T17:35:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKbkHQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StevenRasmussen",
                                                                               "createdAt":  "2025-03-18T20:28:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mrudat",
                                           "body":  "On the subject of _consuming_ services that might be created asynchronously...\n\nI think that you want to be able to request _both_ `TService` and `Task\u003cTService\u003e` for _all_ services, regardless of how they\u0027re created/registered.\n\nIf your class doesn\u0027t do any async initialisation, you don\u0027t need to care. If you do, you can request a Task for everything (regardless of how it was created) and only await it when required.\n\nThat means when or if a dependency changes to async construction, your code doesn\u0027t need to change to take advantage of it.\n\nFor example, if you don\u0027t have any async initialisation in the second class, both classes have the same behaviour.\n\n```cs\npublic class SyncConstructor(TService service) {}\n\npublic class AsyncConstructor{\n    private AsyncConstructor(TService service) {}\n\n    [AsyncConstructor] // or however we declare an async factory.\n    public static async Task\u003cAsyncConstructor\u003e Factory(Task\u003cTService service\u003e) {\n        // async stuff here...\n        return new AsyncConstructor(await service);\n    }\n}\n```\n\nOf course, it only makes sense to wait for _potentially_ async objects, but you could, for example, start requesting l10n from a slow resource, and it\u0027s suddenly an async service.",
                                           "updatedAt":  "2024-05-08T17:35:56Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "[API Proposal]: Asynchronous DI support",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67309",
        "createdAt":  "2022-03-29T22:13:48Z",
        "number":  67309,
        "author":  "captainsafia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9IJ0A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "halter73",
                                            "createdAt":  "2022-04-05T22:35:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alrz",
                                            "createdAt":  "2024-12-02T18:43:04Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-08-13T20:55:04Z",
        "body":  "The `ActivatorUtilities.CreateFactory` API supports consuming an `argumentTypes` parameter that defines a list of additional arguments in the constructor to be matched that are not resolved from DI. The implementation currently enforces strict matches for these arguments and the parameters in the found constructor.\r\n\r\nTo support some scenarios in ASP.NET Core, we would like to be able to provide _optional_ additional arguments to the `CreateFactory` call that will function as follows:\r\n\r\n- If a type contains a single constructor, resolve to that constructor regardless of whether or not it contains the optional type.\r\n- If a type contains multiple constructors that define the optional type, then select either (1) the constructor that also matches the required argument types or (2) the constructor that matches the most number of optional types.\r\n\r\nFor this particular case, we\u0027re not able to provide the type of the optional argument in DI so that it can be resolved without having to strictly match the constructor shape using the current matching implementation.\r\n\r\ncc: @eerhardt ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOveL5Rw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5AhHIw",
                                           "createdAt":  "2022-03-29T22:13:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-03-29T22:13:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AhIx3",
                                           "createdAt":  "2022-03-29T22:24:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe `ActivatorUtilities.CreateFactory` API supports consuming an `argumentTypes` parameter that defines a list of additional arguments in the constructor to be matched that are not resolved from DI. The implementation currently enforces strict matches for these arguments and the parameters in the found constructor.\r\n\r\nTo support some scenarios in ASP.NET Core, we would like to be able to provide _optional_ additional arguments to the `CreateFactory` call that will function as follows:\r\n\r\n- If a type contains a single constructor, resolve to that constructor regardless of whether or not it contains the optional type.\r\n- If a type contains multiple constructors that define the optional type, then select either (1) the constructor that also matches the required argument types or (2) the constructor that matches the most number of optional types.\r\n\r\nFor this particular case, we\u0027re not able to provide the type of the optional argument in DI so that it can be resolved without having to strictly match the constructor shape using the current matching implementation.\r\n\r\ncc: @eerhardt \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecaptainsafia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-29T22:24:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc694vlH",
                                           "createdAt":  "2025-08-13T20:55:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ArsalanImamverdi",
                                           "body":  "Hello, this issue is the root cause of some confusing behavior in an ASP.NET Core extension method (AddEndpointFilter). The current implementation throws a first-chance `InvalidOperationException` which negatively impacts the developer experience during debugging. You can see the related discussion and frustration this causes for developers [here](https://github.com/dotnet/aspnetcore/issues/61515).\n\nAs a proposal, adding an `ActivatorUtilities.TryCreateFactory` method would solve this cleanly. For example, it would allow the code in ASP.NET Core to change from this:\n```csharp\n// Current implementation\nObjectFactory filterFactory;\ntry\n{\n    filterFactory = ActivatorUtilities.CreateFactory(..., new[] { typeof(EndpointFilterFactoryContext) });\n}\ncatch (InvalidOperationException)\n{\n    filterFactory = ActivatorUtilities.CreateFactory(..., Type.EmptyTypes);\n}\n```\nTo this much cleaner implementation:\n```csharp\n// Proposed implementation\nif (!ActivatorUtilities.TryCreateFactory(..., new[] { typeof(EndpointFilterFactoryContext) }, out var filterFactory) \n      \u0026\u0026 !ActivatorUtilities.TryCreateFactory(..., Type.EmptyTypes, out filterFactory))\n{\n    throw new InvalidOperationException(...)\n}\n```\n\nThis `try...` pattern is more aligned with modern .NET APIs and would resolve the motivating problem for this issue in a very elegant way.\n\nI am willing to contribute and work on a PR to implement this solution.",
                                           "updatedAt":  "2025-08-13T20:55:04Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Support optional argument types in `ActivatorUtilities.CreateFactory`",
        "labels":  [
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70004",
        "createdAt":  "2022-05-31T08:32:46Z",
        "number":  70004,
        "author":  "FooRider",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODFGA_w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DaveSenn",
                                            "createdAt":  "2022-05-31T19:52:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2022-05-31T20:08:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lilinus",
                                            "createdAt":  "2022-06-02T13:47:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FooRider",
                                            "createdAt":  "2022-06-03T12:30:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "P4bl3r",
                                            "createdAt":  "2022-06-03T12:30:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2022-06-23T06:43:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vini-nu",
                                            "createdAt":  "2022-07-02T22:29:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GerardSmit",
                                            "createdAt":  "2023-04-05T13:42:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "huoyaoyuan",
                                            "createdAt":  "2023-08-18T02:43:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "neoGeneva",
                                            "createdAt":  "2024-03-21T20:47:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "XavierCL",
                                            "createdAt":  "2024-05-01T17:42:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "muffin-frette",
                                            "createdAt":  "2024-05-01T18:11:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Fresa",
                                            "createdAt":  "2024-05-20T15:18:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wvpm",
                                            "createdAt":  "2024-07-25T12:53:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-07-25T15:05:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lafar6502",
                                            "createdAt":  "2024-09-08T13:47:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "a10r",
                                            "createdAt":  "2024-10-25T13:06:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "loicmorvan",
                                            "createdAt":  "2025-01-18T21:39:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sybren9",
                                            "createdAt":  "2025-02-07T10:52:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aradalvand",
                                            "createdAt":  "2025-05-06T00:24:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mstancombe",
                                            "createdAt":  "2025-06-11T01:20:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "znakeeye",
                                            "createdAt":  "2025-06-29T17:44:24Z"
                                        }
                                    ],
                          "totalCount":  22
                      },
        "updatedAt":  "2024-07-25T15:57:48Z",
        "body":  "### Background and motivation\n\nWhen using Microsoft.Extensions.DependencyInjection, there is no way to explicitly bind multiple interfaces to a singleton instance of their implementation. Common workaround is to create ServiceDescriptor with implementationFactory that calls IServiceProvider.GetRequiredService() method.\r\n\r\nThis approach has two issues with current implementation:\r\n\r\n- implementationFactory function hides dependency and therefore ServiceProvider can not find missing bindings during validation.\r\n- The fact that the same instance is injected under different ServiceDescriptors is lost, potentially causing the ServiceProvider to dispose the same object multiple times.\r\n\r\nMinimum example of the disposing issue:\r\n```csharp\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nusing (var host = Host.CreateDefaultBuilder(args)\r\n  .UseDefaultServiceProvider(options =\u003e\r\n  { options.ValidateOnBuild = true; })\r\n  .ConfigureServices(services =\u003e\r\n  {\r\n    services.AddSingleton\u003cNameAndGreetingGenerator\u003e();\r\n    services.AddSingleton\u003cINameGenerator\u003e(x =\u003e x.GetRequiredService\u003cNameAndGreetingGenerator\u003e());\r\n    services.AddSingleton\u003cIGreetingGenerator\u003e(x =\u003e x.GetRequiredService\u003cNameAndGreetingGenerator\u003e());\r\n\r\n    services.AddTransient\u003cExampleRunner\u003e();\r\n  })\r\n  .Build())\r\n{\r\n\r\n  var gwn1 = host.Services.GetRequiredService\u003cExampleRunner\u003e()\r\n                          .GenerateGreetingWithName();\r\n  Console.WriteLine(gwn1);\r\n\r\n  var gwn2 = host.Services.GetRequiredService\u003cExampleRunner\u003e()\r\n                          .GenerateGreetingWithName();\r\n  Console.WriteLine(gwn2);\r\n\r\n}\r\n\r\nclass ExampleRunner\r\n{\r\n  private readonly INameGenerator nameGenerator;\r\n  private readonly IGreetingGenerator greetingGenerator;\r\n\r\n  public ExampleRunner(INameGenerator nameGenerator, IGreetingGenerator greetingGenerator)\r\n  {\r\n    Console.WriteLine($\"Creating {nameof(ExampleRunner)}\");\r\n    this.nameGenerator = nameGenerator;\r\n    this.greetingGenerator = greetingGenerator;\r\n  }\r\n\r\n  public string GenerateGreetingWithName()\r\n    =\u003e greetingGenerator.GenerateGreeting(nameGenerator.GenerateName());\r\n}\r\n\r\ninterface INameGenerator { string GenerateName(); }\r\ninterface IGreetingGenerator { string GenerateGreeting(string name); }\r\n\r\nclass NameAndGreetingGenerator : INameGenerator, IGreetingGenerator, IDisposable\r\n{\r\n  private readonly Random random = new Random();\r\n\r\n  public NameAndGreetingGenerator() =\u003e\r\n    Console.WriteLine($\"Creating {nameof(NameAndGreetingGenerator)}\");\r\n\r\n  public string GenerateName()\r\n  {\r\n    var chars = new List\u003cchar\u003e();\r\n\r\n    chars.Add((char)(\u0027A\u0027 + random.Next(\u0027Z\u0027 - \u0027A\u0027)));\r\n    var length = random.Next(4, 10);\r\n    while (chars.Count \u003c length)\r\n      chars.Add((char)(\u0027a\u0027 + random.Next(\u0027Z\u0027 - \u0027A\u0027)));\r\n\r\n    return new string(chars.ToArray());\r\n  }\r\n\r\n  public string GenerateGreeting(string name) =\u003e\r\n    $\"Welcome {name}!\";\r\n\r\n  public void Dispose() =\u003e\r\n    Console.WriteLine($\"Disposing {nameof(NameAndGreetingGenerator)}\");\r\n}\r\n```\r\n\r\nOutputs: \r\n```\r\nCreating NameAndGreetingGenerator\r\nCreating ExampleRunner\r\nWelcome Xjcicxw!\r\nCreating ExampleRunner\r\nWelcome Jeudgnlkv!\r\nDisposing NameAndGreetingGenerator\r\nDisposing NameAndGreetingGenerator\r\nDisposing NameAndGreetingGenerator\r\n```\r\n\r\nMinimum example of the validation issue (assume the same support classes and interfaces):\r\n```csharp\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nusing (var host = Host.CreateDefaultBuilder(args)\r\n  .UseDefaultServiceProvider(options =\u003e\r\n  { options.ValidateOnBuild = true; })\r\n  .ConfigureServices(services =\u003e\r\n  {\r\n    //services.AddSingleton\u003cNameAndGreetingGenerator\u003e();\r\n    services.AddSingleton\u003cINameGenerator\u003e(x =\u003e x.GetRequiredService\u003cNameAndGreetingGenerator\u003e());\r\n    services.AddSingleton\u003cIGreetingGenerator\u003e(x =\u003e x.GetRequiredService\u003cNameAndGreetingGenerator\u003e());\r\n\r\n    services.AddTransient\u003cExampleRunner\u003e();\r\n  })\r\n  .Build())\r\n{\r\n\r\n  var gwn1 = host.Services.GetRequiredService\u003cExampleRunner\u003e() // throws exception after host is built, when ExampleRunner is requested\r\n                          .GenerateGreetingWithName();\r\n  Console.WriteLine(gwn1);\r\n\r\n  var gwn2 = host.Services.GetRequiredService\u003cExampleRunner\u003e()\r\n                          .GenerateGreetingWithName();\r\n  Console.WriteLine(gwn2);\r\n\r\n}\r\n```\r\nIn this example, ServiceProvider validation doesn\u0027t reveal the fact that INameGenerator, nor IGreetingGenerator instances could be created using provided bindings, and doesn\u0027t throw an exception from .Build() method, allowing the program to continue and fail after initialization, when requesting ExampleRunner service.\n\n### API Proposal\n\nBoth of the current issues stem from the fact that ServiceDescriptor class currently doesn\u0027t know that multiple different service types are provided by the same instance of implementation type. There are multiple possible ways to encode this information into ServiceDescriptor class.\r\n\r\nPossible solution # 1 - modify ServiceDescriptor class to contain multiple types as its ServiceType, in new property ServiceTypes.\r\n\r\n```csharp\r\npublic class ServiceDescriptor\r\n{\r\n  // ...\r\n  public Type ServiceType { get; }\r\n  \r\n  public Type[] ServiceTypes { get; } // Add new property possibly containing multiple service types\r\n  // ...\r\n  // Also, add constructors accepting multiple serviceTypes\r\n  public ServiceDescriptor(\r\n    IEnumerable\u003cType\u003e serviceTypes,\r\n    Type implementationType,\r\n    ServiceLifetime lifetime)\r\n    : this(serviceTypes, lifetime\r\n  {\r\n    // ...\r\n    ImplementationType = implementationType;\r\n  }\r\n  private ServiceDescriptor(\r\n    IEnumerable\u003cType\u003e serviceTypes,\r\n    ServiceLifetime lifetime)\r\n  {\r\n    Lifetime = lifetime;\r\n    ServiceTypes = serviceTypes.ToArray();\r\n  }\r\n}\r\n```\n\n### API Usage\n\nUsage of possible solution # 1:\r\n\r\n```csharp\r\nhostBuilder.ConfigureServices(services =\u003e \r\n{\r\n  var descriptor = new ServiceDescriptor(\r\n    new[] { typeof(INameGenerator), typeof(IGreetingGenerator) },\r\n    typeof(NameAndGreetingGenerator),\r\n    ServiceLifetime.Singleton);\r\n  services.Add(descriptor);\r\n}\r\n```\r\n\r\nUsing extension methods:\r\n\r\n```csharp\r\nhostBuilder.ConfigureServices(services =\u003e\r\n{\r\n  services.Add(new[] { typeof(INameGenerator), typeof(IGreetingGenerator) }, typeof(NameAndGreetingGenerator), ServiceLifetime.Singleton);\r\n}\r\n```\r\n\r\nAnother extension method using generics:\r\n\r\nThe name of this method should be different from \"AddSingleton\", because it could be confusing. Name of the extension method in the example is just a first proposal, a better name could be surely found.\r\n\r\n```csharp\r\nhostBuilder.ConfigureServices(services =\u003e\r\n{\r\n  services.AddMultiServiceSingleton\u003cINameGenerator, IGreetingGenerator, NameAndGreetingGenerator\u003e();\r\n}\r\n```\n\n### Alternative Designs\n\nAnother solution would require IoC container to check whether implementation type is already bound and use that binding to satisfy request for requested service type.\r\n\r\nThis could be problematic, since it would change current behavior.\n\n### Risks\n\nProposed solution will have consequences for current implementation of IoC containers. Each implementation would need to be able to work with ServiceDescriptors that have (ServiceType != null \u0026\u0026 ServiceTypes == null) and (ServiceType == null \u0026\u0026 ServiceTypes != null) and somehow implement the new scenario.\r\n\r\nProposed alternative solution will mean no changes in API interface, but would specify different behavior for container implementation. The risk for existing projects could be mitigated by new option in ServiceProviderOptions class that would enable this new behavior on request. Problem with this could be perhaps non-intuitive behavior when bindings do not have the same ServiceLifetime set.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhigkOw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5EDw6s",
                                           "createdAt":  "2022-05-31T08:32:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nWhen using Microsoft.Extensions.DependencyInjection, there is no way to explicitly bind multiple interfaces to a singleton instance of their implementation. Common workaround is to create ServiceDescriptor with implementationFactory that calls IServiceProvider.GetRequiredService() method.\r\n\r\nThis approach has two issues with current implementation:\r\n\r\n- implementationFactory function hides dependency and therefore ServiceProvider can not find missing bindings during validation.\r\n- The fact that the same instance is injected under different ServiceDescriptors is lost, potentially causing the ServiceProvider to dispose the same object multiple times.\r\n\r\nMinimum example of the disposing issue:\r\n```csharp\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nusing (var host = Host.CreateDefaultBuilder(args)\r\n  .UseDefaultServiceProvider(options =\u003e\r\n  { options.ValidateOnBuild = true; })\r\n  .ConfigureServices(services =\u003e\r\n  {\r\n    services.AddSingleton\u003cNameAndGreetingGenerator\u003e();\r\n    services.AddSingleton\u003cINameGenerator\u003e(x =\u003e x.GetRequiredService\u003cNameAndGreetingGenerator\u003e());\r\n    services.AddSingleton\u003cIGreetingGenerator\u003e(x =\u003e x.GetRequiredService\u003cNameAndGreetingGenerator\u003e());\r\n\r\n    services.AddTransient\u003cExampleRunner\u003e();\r\n  })\r\n  .Build())\r\n{\r\n\r\n  var gwn1 = host.Services.GetRequiredService\u003cExampleRunner\u003e()\r\n                          .GenerateGreetingWithName();\r\n  Console.WriteLine(gwn1);\r\n\r\n  var gwn2 = host.Services.GetRequiredService\u003cExampleRunner\u003e()\r\n                          .GenerateGreetingWithName();\r\n  Console.WriteLine(gwn2);\r\n\r\n}\r\n\r\nclass ExampleRunner\r\n{\r\n  private readonly INameGenerator nameGenerator;\r\n  private readonly IGreetingGenerator greetingGenerator;\r\n\r\n  public ExampleRunner(INameGenerator nameGenerator, IGreetingGenerator greetingGenerator)\r\n  {\r\n    Console.WriteLine($\"Creating {nameof(ExampleRunner)}\");\r\n    this.nameGenerator = nameGenerator;\r\n    this.greetingGenerator = greetingGenerator;\r\n  }\r\n\r\n  public string GenerateGreetingWithName()\r\n    =\u003e greetingGenerator.GenerateGreeting(nameGenerator.GenerateName());\r\n}\r\n\r\ninterface INameGenerator { string GenerateName(); }\r\ninterface IGreetingGenerator { string GenerateGreeting(string name); }\r\n\r\nclass NameAndGreetingGenerator : INameGenerator, IGreetingGenerator, IDisposable\r\n{\r\n  private readonly Random random = new Random();\r\n\r\n  public NameAndGreetingGenerator() =\u003e\r\n    Console.WriteLine($\"Creating {nameof(NameAndGreetingGenerator)}\");\r\n\r\n  public string GenerateName()\r\n  {\r\n    var chars = new List\u003cchar\u003e();\r\n\r\n    chars.Add((char)(\u0027A\u0027 + random.Next(\u0027Z\u0027 - \u0027A\u0027)));\r\n    var length = random.Next(4, 10);\r\n    while (chars.Count \u003c length)\r\n      chars.Add((char)(\u0027a\u0027 + random.Next(\u0027Z\u0027 - \u0027A\u0027)));\r\n\r\n    return new string(chars.ToArray());\r\n  }\r\n\r\n  public string GenerateGreeting(string name) =\u003e\r\n    $\"Welcome {name}!\";\r\n\r\n  public void Dispose() =\u003e\r\n    Console.WriteLine($\"Disposing {nameof(NameAndGreetingGenerator)}\");\r\n}\r\n```\r\n\r\nOutputs: \r\n```\r\nCreating NameAndGreetingGenerator\r\nCreating ExampleRunner\r\nWelcome Xjcicxw!\r\nCreating ExampleRunner\r\nWelcome Jeudgnlkv!\r\nDisposing NameAndGreetingGenerator\r\nDisposing NameAndGreetingGenerator\r\nDisposing NameAndGreetingGenerator\r\n```\r\n\r\nMinimum example of the validation issue (assume the same support classes and interfaces):\r\n```csharp\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nusing (var host = Host.CreateDefaultBuilder(args)\r\n  .UseDefaultServiceProvider(options =\u003e\r\n  { options.ValidateOnBuild = true; })\r\n  .ConfigureServices(services =\u003e\r\n  {\r\n    //services.AddSingleton\u003cNameAndGreetingGenerator\u003e();\r\n    services.AddSingleton\u003cINameGenerator\u003e(x =\u003e x.GetRequiredService\u003cNameAndGreetingGenerator\u003e());\r\n    services.AddSingleton\u003cIGreetingGenerator\u003e(x =\u003e x.GetRequiredService\u003cNameAndGreetingGenerator\u003e());\r\n\r\n    services.AddTransient\u003cExampleRunner\u003e();\r\n  })\r\n  .Build())\r\n{\r\n\r\n  var gwn1 = host.Services.GetRequiredService\u003cExampleRunner\u003e() // throws exception after host is built, when ExampleRunner is requested\r\n                          .GenerateGreetingWithName();\r\n  Console.WriteLine(gwn1);\r\n\r\n  var gwn2 = host.Services.GetRequiredService\u003cExampleRunner\u003e()\r\n                          .GenerateGreetingWithName();\r\n  Console.WriteLine(gwn2);\r\n\r\n}\r\n```\r\nIn this example, ServiceProvider validation doesn\u0027t reveal the fact that INameGenerator, nor IGreetingGenerator instances could be created using provided bindings, and doesn\u0027t throw an exception from .Build() method, allowing the program to continue and fail after initialization, when requesting ExampleRunner service.\n\n### API Proposal\n\nBoth of the current issues stem from the fact that ServiceDescriptor class currently doesn\u0027t know that multiple different service types are provided by the same instance of implementation type. There are multiple possible ways to encode this information into ServiceDescriptor class.\r\n\r\nPossible solution # 1 - modify ServiceDescriptor class to contain multiple types as its ServiceType, in new property ServiceTypes.\r\n\r\n```csharp\r\npublic class ServiceDescriptor\r\n{\r\n  // ...\r\n  public Type ServiceType { get; }\r\n  \r\n  public Type[] ServiceTypes { get; } // Add new property possibly containing multiple service types\r\n  // ...\r\n  // Also, add constructors accepting multiple serviceTypes\r\n  public ServiceDescriptor(\r\n    IEnumerable\u003cType\u003e serviceTypes,\r\n    Type implementationType,\r\n    ServiceLifetime lifetime)\r\n    : this(serviceTypes, lifetime\r\n  {\r\n    // ...\r\n    ImplementationType = implementationType;\r\n  }\r\n  private ServiceDescriptor(\r\n    IEnumerable\u003cType\u003e serviceTypes,\r\n    ServiceLifetime lifetime)\r\n  {\r\n    Lifetime = lifetime;\r\n    ServiceTypes = serviceTypes.ToArray();\r\n  }\r\n}\r\n```\n\n### API Usage\n\nUsage of possible solution # 1:\r\n\r\n```csharp\r\nhostBuilder.ConfigureServices(services =\u003e \r\n{\r\n  var descriptor = new ServiceDescriptor(\r\n    new[] { typeof(INameGenerator), typeof(IGreetingGenerator) },\r\n    typeof(NameAndGreetingGenerator),\r\n    ServiceLifetime.Singleton);\r\n  services.Add(descriptor);\r\n}\r\n```\r\n\r\nUsing extension methods:\r\n\r\n```csharp\r\nhostBuilder.ConfigureServices(services =\u003e\r\n{\r\n  services.Add(new[] { typeof(INameGenerator), typeof(IGreetingGenerator) }, typeof(NameAndGreetingGenerator), ServiceLifetime.Singleton);\r\n}\r\n```\r\n\r\nAnother extension method using generics:\r\n\r\nThe name of this method should be different from \"AddSingleton\", because it could be confusing. Name of the extension method in the example is just a first proposal, a better name could be surely found.\r\n\r\n```csharp\r\nhostBuilder.ConfigureServices(services =\u003e\r\n{\r\n  services.AddMultiServiceSingleton\u003cINameGenerator, IGreetingGenerator, NameAndGreetingGenerator\u003e();\r\n}\r\n```\n\n### Alternative Designs\n\nAnother solution would require IoC container to check whether implementation type is already bound and use that binding to satisfy request for requested service type.\r\n\r\nThis could be problematic, since it would change current behavior.\n\n### Risks\n\nProposed solution will have consequences for current implementation of IoC containers. Each implementation would need to be able to work with ServiceDescriptors that have (ServiceType != null \u0026\u0026 ServiceTypes == null) and (ServiceType == null \u0026\u0026 ServiceTypes != null) and somehow implement the new scenario.\r\n\r\nProposed alternative solution will mean no changes in API interface, but would specify different behavior for container implementation. The risk for existing projects could be mitigated by new option in ServiceProviderOptions class that would enable this new behavior on request. Problem with this could be perhaps non-intuitive behavior when bindings do not have the same ServiceLifetime set.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eFooRider\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-31T08:32:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kVGTq",
                                           "createdAt":  "2023-08-18T02:38:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Carsillas",
                                           "body":  "I agree with this proposal but I just want to mention the multiple IDisposable calls *should* be a nonissue as I think it seems to be the standard pattern that multiple calls to Dispose should do nothing.\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose (3rd paragraph)",
                                           "updatedAt":  "2023-08-18T02:38:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58gUpU",
                                           "createdAt":  "2024-05-01T17:58:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "XavierCL",
                                           "body":  "\u003e I agree with this proposal but I just want to mention the multiple IDisposable calls _should_ be a nonissue as I think it seems to be the standard pattern that multiple calls to Dispose should do nothing.\r\n\r\nNote that the dispose order is also affected, not only the number of calls.\r\n\r\nE.g.\r\n```cs\r\nclass ExampleNameRunner\r\n{\r\n  private readonly INameGenerator nameGenerator;\r\n\r\n  public ExampleNameRunner(INameGenerator nameGenerator)\r\n  {\r\n    this.nameGenerator = nameGenerator;\r\n  }\r\n\r\n  public string GenerateName()\r\n    =\u003e nameGenerator.GenerateName();\r\n}\r\n\r\nclass ExampleGreetingRunner\r\n{\r\n  private readonly IGreetingGenerator greetingGenerator;\r\n\r\n  public ExampleGreetingRunner(IGreetingGenerator greetingGenerator)\r\n  {\r\n    this.greetingGenerator = greetingGenerator;\r\n  }\r\n\r\n  public string GenerateGreeting()\r\n    =\u003e greetingGenerator.GenerateGreeting();\r\n}\r\n```\r\n\r\nIf you instanciate ExampleNameRunner then ExampleGreetingRunner, the creation order will be the following:\r\n1. INameGenerator (Singleton)\r\n2. ExampleNameRunner\r\n3. IGreetingGenerator (Singleton)\r\n4. ExampleGreetingRunner\r\n\r\nSince the services are disposed in the reverse order (as they should), IGreetingGenerator will be disposed before ExampleNameRunner, which means ExampleNameRunner will hold a reference to a disposed singleton without itself having been disposed.",
                                           "updatedAt":  "2024-05-16T20:18:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GIFMw",
                                           "createdAt":  "2024-07-25T13:00:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wvpm",
                                           "body":  "This is a very relatable issue. I sometimes run into it with configuration classes (1 config implementation implementing several config interfaces).\r\n\r\nI think the array of service types is not the right way to go. I\u0027d rather have some helper method create multiple servicedescriptors as you now manually do.\r\n\r\nAs for validation, I recommend adding a unit test just for DI that verifies you can resolve the services you want to expose.",
                                           "updatedAt":  "2024-07-25T13:00:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GJeAO",
                                           "createdAt":  "2024-07-25T15:10:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "Proposal makes sense to me and I\u0027ve needed this many times in the past. However, I see zero reason why this is being limited to singletons.\r\n\r\nThe new API should be implemented to work with all lifetimes.\r\n\r\n@wvpm \r\n\u003e I think the array of service types is not the right way to go. I\u0027d rather have some helper method create multiple servicedescriptors as you now manually do.\r\n\r\nWhy would you rather have N service descriptors registered? IMHO, the most \"native\" approach to this would be to have _one_ descriptor and expand the current `ServiceDescriptor.Type` property into a `Types` array.",
                                           "updatedAt":  "2024-07-25T15:10:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GKCQ7",
                                           "createdAt":  "2024-07-25T15:55:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wvpm",
                                           "body":  "\u003e Why would you rather have N service descriptors registered? IMHO, the most \"native\" approach to this would be to have _one_ descriptor and expand the current `ServiceDescriptor.Type` property into a `Types` array.\r\n\r\nThe Microsoft DI package is meant to be compatible with all implementations. Expanding the ServiceDescriptor requires all implementations to also expand. Creating multiple ServiceDescriptors is something that already works. It just looks and feels weird. I previously ran into a similar issue, see https://github.com/dotnet/runtime/issues/41050#issuecomment-677785224 .",
                                           "updatedAt":  "2024-07-25T15:57:48Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal]: Dependency Injection - Add explicit way of binding multiple interfaces to the same singleton instance",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70235",
        "createdAt":  "2022-06-04T06:28:18Z",
        "number":  70235,
        "author":  "burtonrodman",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5Sd1g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xor-el",
                                            "createdAt":  "2022-06-18T20:33:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dresel",
                                            "createdAt":  "2022-08-03T13:13:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "elringus",
                                            "createdAt":  "2022-08-03T19:13:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ziaulhasanhamim",
                                            "createdAt":  "2022-08-26T02:29:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ghost4Man",
                                            "createdAt":  "2022-09-27T08:15:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nicjay",
                                            "createdAt":  "2022-10-22T03:36:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "samuelfernandez",
                                            "createdAt":  "2022-11-10T07:41:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DavidZaludek",
                                            "createdAt":  "2022-11-10T08:25:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BreadTh",
                                            "createdAt":  "2022-11-10T14:55:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AbbieMcCatty",
                                            "createdAt":  "2022-11-10T15:14:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YouKnowThem",
                                            "createdAt":  "2022-11-15T06:16:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "denis-nikolayev-warby",
                                            "createdAt":  "2022-11-16T12:31:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ramonsmits",
                                            "createdAt":  "2022-11-23T07:53:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xymanek",
                                            "createdAt":  "2022-12-13T16:49:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mdschweda",
                                            "createdAt":  "2023-01-13T17:42:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "allantargino",
                                            "createdAt":  "2023-01-21T16:21:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ecoliat",
                                            "createdAt":  "2023-02-11T09:43:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pikausp",
                                            "createdAt":  "2023-04-18T11:41:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "connellsharp",
                                            "createdAt":  "2023-04-20T11:04:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2023-06-17T14:47:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kpietraszko",
                                            "createdAt":  "2023-06-29T11:49:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Helco",
                                            "createdAt":  "2023-07-15T09:17:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "avsorokin",
                                            "createdAt":  "2023-08-20T21:26:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Degravef",
                                            "createdAt":  "2023-09-07T13:44:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ECrownofFire",
                                            "createdAt":  "2024-05-08T17:43:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Micke3rd",
                                            "createdAt":  "2024-07-11T07:21:42Z"
                                        }
                                    ],
                          "totalCount":  26
                      },
        "updatedAt":  "2022-11-15T22:16:03Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nadding a service to be injected in a constructor adds no less than 3 lines of very repetitive code.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nwhen constructing a class from the service provider that lacks a non-default constructor and contains one or more properties marked \"required\", initialize the target\u0027s required properties as if there was a constructor requiring all the same types.\r\n\r\n### Additional context\r\n\r\n```\r\npublic class InternalPageModel : PageModel\r\n{\r\n  private readonly IHttpContextAccessor _accessor;\r\n  private readonly IFranchiseRepository _franchiseRepository;\r\n  private readonly IPageContentService _pageContentService;\r\n  private readonly FrontEnd.Common.Services.IPageTypeRepository _pageTypeRepository;\r\n  private readonly IMenuRepository _menuRepository;\r\n  private readonly IMenuGeneratorFactory _menuGeneratorFactory;\r\n  private readonly IDefaultMenuService _defaultMenuService;\r\n  private readonly IPreviewTokenValidationService _previewTokenValidationService;\r\n\r\n  public InternalPageModel(\r\n    IHttpContextAccessor accessor,\r\n    IFranchiseRepository franchiseRepository,\r\n    IPageContentService pageContentService,\r\n    FrontEnd.Common.Services.IPageTypeRepository pageTypeRepository,\r\n    IMenuRepository menuRepository,\r\n    IMenuGeneratorFactory menuGeneratorFactory,\r\n    IDefaultMenuService defaultMenuService,\r\n    IPreviewTokenValidationService previewTokenValidationService)\r\n  {\r\n    _accessor = accessor;\r\n    _franchiseRepository = franchiseRepository;\r\n    _pageContentService = pageContentService;\r\n    _pageTypeRepository = pageTypeRepository;\r\n    _menuRepository = menuRepository;\r\n    _menuGeneratorFactory = menuGeneratorFactory;\r\n    _defaultMenuService = defaultMenuService;\r\n    _previewTokenValidationService = previewTokenValidationService;\r\n  }\r\n```\r\n\r\nbecomes\r\n\r\n```\r\npublic class InternalPageModel : PageModel\r\n{\r\n  public required IHttpContextAccessor Accessor { get; init; };\r\n  public required IFranchiseRepository FranchiseRepository { get; init; };\r\n  public required IPageContentService PageContentService { get; init; };\r\n  public required FrontEnd.Common.Services.IPageTypeRepository PageTypeRepository { get; init; };\r\n  public required IMenuRepository MenuRepository { get; init; };\r\n  public required IMenuGeneratorFactory MenuGeneratorFactory { get; init; };\r\n  public required IDefaultMenuService DefaultMenuService { get; init; };\r\n  public required IPreviewTokenValidationService PreviewTokenValidationService { get; init; };\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTm-IYA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5EVweu",
                                           "createdAt":  "2022-06-04T06:41:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "burtonrodman",
                                           "body":  "not exactly a fan of making these public properties -- if you can think of a way around that, by all means...",
                                           "updatedAt":  "2022-06-04T06:41:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EVwew",
                                           "createdAt":  "2022-06-04T07:04:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This isn\u0027t something that we have plans on doing in the default DI container. At least not for .NET 7.",
                                           "updatedAt":  "2022-06-04T07:04:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EVwfK",
                                           "createdAt":  "2022-06-04T07:05:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nadding a service to be injected in a constructor adds no less than 3 lines of very repetitive code.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nwhen constructing a class from the service provider that lacks a non-default constructor and contains one or more properties marked \"required\", initialize the target\u0027s required properties as if there was a constructor requiring all the same types.\r\n\r\n### Additional context\r\n\r\n```\r\npublic class InternalPageModel : PageModel\r\n{\r\n  private readonly IHttpContextAccessor _accessor;\r\n  private readonly IFranchiseRepository _franchiseRepository;\r\n  private readonly IPageContentService _pageContentService;\r\n  private readonly FrontEnd.Common.Services.IPageTypeRepository _pageTypeRepository;\r\n  private readonly IMenuRepository _menuRepository;\r\n  private readonly IMenuGeneratorFactory _menuGeneratorFactory;\r\n  private readonly IDefaultMenuService _defaultMenuService;\r\n  private readonly IPreviewTokenValidationService _previewTokenValidationService;\r\n\r\n  public InternalPageModel(\r\n    IHttpContextAccessor accessor,\r\n    IFranchiseRepository franchiseRepository,\r\n    IPageContentService pageContentService,\r\n    FrontEnd.Common.Services.IPageTypeRepository pageTypeRepository,\r\n    IMenuRepository menuRepository,\r\n    IMenuGeneratorFactory menuGeneratorFactory,\r\n    IDefaultMenuService defaultMenuService,\r\n    IPreviewTokenValidationService previewTokenValidationService)\r\n  {\r\n    _accessor = accessor;\r\n    _franchiseRepository = franchiseRepository;\r\n    _pageContentService = pageContentService;\r\n    _pageTypeRepository = pageTypeRepository;\r\n    _menuRepository = menuRepository;\r\n    _menuGeneratorFactory = menuGeneratorFactory;\r\n    _defaultMenuService = defaultMenuService;\r\n    _previewTokenValidationService = previewTokenValidationService;\r\n  }\r\n```\r\n\r\nbecomes\r\n\r\n```\r\npublic class InternalPageModel : PageModel\r\n{\r\n  public required IHttpContextAccessor Accessor { get; init; };\r\n  public required IFranchiseRepository FranchiseRepository { get; init; };\r\n  public required IPageContentService PageContentService { get; init; };\r\n  public required FrontEnd.Common.Services.IPageTypeRepository PageTypeRepository { get; init; };\r\n  public required IMenuRepository MenuRepository { get; init; };\r\n  public required IMenuGeneratorFactory MenuGeneratorFactory { get; init; };\r\n  public required IDefaultMenuService DefaultMenuService { get; init; };\r\n  public required IPreviewTokenValidationService PreviewTokenValidationService { get; init; };\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eburtonrodman\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-04T07:05:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HyWmJ",
                                           "createdAt":  "2022-08-03T19:25:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODGCQgQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ziaulhasanhamim",
                                                                               "createdAt":  "2022-08-26T02:30:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "DavidZaludek",
                                                                               "createdAt":  "2022-11-10T08:25:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BreadTh",
                                                                               "createdAt":  "2022-11-10T14:55:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "YouKnowThem",
                                                                               "createdAt":  "2022-11-15T06:16:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ramonsmits",
                                                                               "createdAt":  "2022-11-23T07:54:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Degravef",
                                                                               "createdAt":  "2023-09-07T13:45:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "elringus",
                                           "body":  "\u003e not exactly a fan of making these public properties -- if you can think of a way around that, by all means...\r\n\r\nWe can use a private getter here, eg:\r\n\r\n```csharp\r\npublic class Foo\r\n{\r\n    public required IBar Bar { private get; init; }\r\n}\r\n```\r\n\r\n```csharp\r\nvar foo = new Foo { Bar = new Bar() }; // OK\r\nvar bar = foo.Bar; // Error, \u0027get\u0027 accessor of \u0027Bar\u0027 is inaccessible\r\n```\r\n\r\nI was actually hoping DI will ship support for this with `required` introduction.",
                                           "updatedAt":  "2022-08-03T19:25:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hyc9j",
                                           "createdAt":  "2022-08-03T19:51:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCp-m-Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elringus",
                                                                               "createdAt":  "2022-08-03T20:38:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "burtonrodman",
                                           "body":  "@Elringus very interesting...  i had not thought of that pattern of property definition.\r\n\r\nin the meantime, I have started a Source Generator that generates a constructor for all `private readonly` fields.\r\nhttps://github.com/burtonrodman/ServiceConstructorGenerator\r\n\r\ni\u0027ve already ran into a few cases where it crashes and I haven\u0027t had time to debug, but it\u0027s a start.",
                                           "updatedAt":  "2022-08-03T19:53:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ob1RH",
                                           "createdAt":  "2022-11-15T22:04:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StrangeWill",
                                           "body":  "I _love_ the idea of cleaning up constructor injection boilerplate, there still are some annoyances for things like `IOptions\u003cT\u003e` where we have to do work on the object (though... I guess another layer of DI configuration could handle that).\r\n\r\nAnd +1 on not having to make everything `public`, we default to `protected` most of the time, however without it public I\u0027d have no clue how we\u0027d expect to set up/mock things up for testing if I can\u0027t set up mocks...\r\n\r\nA shorthand for constructor mapping would probably be a better solution, but that would be a whole other request.\r\n",
                                           "updatedAt":  "2022-11-15T22:04:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ob4Fu",
                                           "createdAt":  "2022-11-15T22:14:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "burtonrodman",
                                           "body":  "@StrangeWill check out my source generator referenced above where i deal with IOptions injection.  haven’t updated for .Net 7 yet, but may work on that tonight 😉",
                                           "updatedAt":  "2022-11-15T22:14:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ob4hg",
                                           "createdAt":  "2022-11-15T22:16:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "burtonrodman",
                                           "body":  "and btw, it generates the constructor so testing should still be easy",
                                           "updatedAt":  "2022-11-15T22:16:03Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "inject services for properties marked with the new C# 11 required keyword",
        "labels":  [
                       "enhancement",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70505",
        "createdAt":  "2022-06-09T18:17:03Z",
        "number":  70505,
        "author":  "bakerhillpins",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-24T20:52:08Z",
        "body":  "### Description\n\nI\u0027m working with the Dependency Injection within MAUI and trying to register different services. At the same time I\u0027m trying to also determine if an implementation has been registered.  Specifically, I\u0027m using `IServiceCollection.Contains` and the `IServiceCollection` extension methods `TryAdd{LIFETIME}\u003cTService, TImplementation\u003e()`. Both of which don\u0027t seem to work the way that I was expecting. \r\n\r\n1.  TryAdd simply looks for the TService being registered and isn\u0027t concerned with the TImplementation.\r\n2. Contains doesn\u0027t work at all.\r\n\r\nLooking through the source it would seem that the `IServiceCollection` interface pulls the Contains method in from `ICollection\u003cT\u003e.Contains(T item)`. According to the [Contains() docs](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.icollection-1.contains?view=net-6.0) this suggests ServiceDescriptor should implement `IComparer\u003cT\u003e` [which it currently doesn\u0027t.](https://github.com/dotnet/runtime/blob/3d74b00659fec817506e2888f87936518556e01c/src/libraries/Microsoft.Extensions.DependencyInjection.Abstractions/src/ServiceDescriptor.cs#L14)  If you dig down into the code however, it seems that the Contains method ends up resolving to `List\u003cT\u003e.Contains` and then down to `Array.IndexOf` which resolves to reference equals. \r\n\r\nLooking at the tests I see that this passes because the [Contains method is passed the same `ServiceDescriptor` object](https://github.com/dotnet/runtime/blob/3d74b00659fec817506e2888f87936518556e01c/src/libraries/Microsoft.Extensions.DependencyInjection/tests/DI.Tests/ServiceCollectionTests.cs#L38) that was used to Add the service to the collection. This ties in with `Array.IndexOf` using reference equals.\r\n\r\nIt would seem that Contains isn\u0027t really useful as in all cases you\u0027ll never have the original `ServiceDescriptor` object.\r\n\r\n\n\n### Reproduction Steps\n\nAdd the following class and code to an OOB MAUI application.\r\n\r\n```\r\n    public class MyImplementation : IMauiInitializeService\r\n    {\r\n#region Implementation of IMauiInitializeService\r\n\r\n        /// \u003cinheritdoc /\u003e\r\n        public void Initialize( IServiceProvider services )\r\n        {\r\n        }\r\n\r\n#endregion\r\n    }\r\n\r\n        public static MauiApp CreateMauiApp()\r\n        {\r\n...\r\n            IServiceCollection sc = builder.Services;\r\n\r\n            var x = sc.Where( sd =\u003e sd.ServiceType == typeof(IMauiInitializeService) );\r\n\r\n            bool y = sc.Contains(\r\n                ServiceDescriptor.Singleton\u003cIMauiInitializeService, MyImplementation\u003e() );\r\n\r\n            sc.TryAddSingleton\u003cIMauiInitializeService, MyImplementation\u003e();\r\n\r\n            var x1 = sc.Where( sd =\u003e sd.ServiceType == typeof(IMauiInitializeService) ).ToArray();\r\n\r\n            bool y1 = sc.Contains(\r\n                ServiceDescriptor.Singleton\u003cIMauiInitializeService, MyImplementation\u003e() );\r\n\r\n            sc.AddSingleton\u003cIMauiInitializeService, MyImplementation\u003e();\r\n\r\n            var x2 = sc.Where( sd =\u003e sd.ServiceType == typeof(IMauiInitializeService) ).ToArray();\r\n\r\n            bool y2 = sc.Contains( ServiceDescriptor.Singleton\u003cIMauiInitializeService, MyImplementation\u003e() );\r\n\r\n...\r\n}\r\n```\r\n[MauiAppDiTest.zip](https://github.com/dotnet/runtime/files/8872886/MauiAppDiTest.zip)\r\n\r\n\n\n### Expected behavior\n\n- `IServiceCollection.Contains` works with a new instance of `ServiceDescriptor` and it compares both the Service **and** Implementation Type.\r\n-  `TryAdd{LIFETIME}\u003cTService, TImplementation\u003e()` tests both the Service **and** Implementation Type.\r\n\r\nThe TryAdd function docs suggest that it\u0027s only interested in the TService being registered to abort, but it\u0027s odd that it behaves differently than the basic Add where you [can add multiple implementations as long as you use the \u003cTService, TImplementation\u003e variants.](https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#service-registration-methods)\n\n### Actual behavior\n\n`IServiceCollection.Contains` only returns true when presented with the same `ServiceDescriptor` object that was added to the IServiceCollection.\r\n\r\n `TryAdd{LIFETIME}\u003cTService, TImplementation\u003e()` tests the Service type and will not register if one is already included.\n\n### Regression?\n\nI have no idea if this worked before but I suspect it\u0027s always been this way.\n\n### Known Workarounds\n\nUse LINQ to perform a search of the IServiceCollection and test each individual ServiceDescriptor for what you want.\r\n\r\n```\r\nServiceCollection.Any( sd =\u003e sd.ServiceType == typeof(IMyService) \u0026\u0026 sd.ImplementationType == typeof(MyImplementation) );\r\n```\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhgsl-A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Eobgt",
                                           "createdAt":  "2022-06-09T18:17:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI\u0027m working with the Dependency Injection within MAUI and trying to register different services. At the same time I\u0027m trying to also determine if an implementation has been registered.  Specifically, I\u0027m using `IServiceCollection.Contains` and the `IServiceCollection` extension methods `TryAdd{LIFETIME}\u003cTService, TImplementation\u003e()`. Both of which don\u0027t seem to work the way that I was expecting. \r\n\r\n1.  TryAdd simply looks for the TService being registered and isn\u0027t concerned with the TImplementation.\r\n2. Contains doesn\u0027t work at all.\r\n\r\nLooking through the source it would seem that the `IServiceCollection` interface pulls the Contains method in from `ICollection\u003cT\u003e.Contains(T item)`. According to the [Contains() docs](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.icollection-1.contains?view=net-6.0) this suggests ServiceDescriptor should implement `IComparer\u003cT\u003e` [which it currently doesn\u0027t.](https://github.com/dotnet/runtime/blob/3d74b00659fec817506e2888f87936518556e01c/src/libraries/Microsoft.Extensions.DependencyInjection.Abstractions/src/ServiceDescriptor.cs#L14)  If you dig down into the code however, it seems that the Contains method ends up resolving to `List\u003cT\u003e.Contains` and then down to `Array.IndexOf` which resolves to reference equals. \r\n\r\nLooking at the tests I see that this passes because the [Contains method is passed the same `ServiceDescriptor` object](https://github.com/dotnet/runtime/blob/3d74b00659fec817506e2888f87936518556e01c/src/libraries/Microsoft.Extensions.DependencyInjection/tests/DI.Tests/ServiceCollectionTests.cs#L38) that was used to Add the service to the collection. This ties in with `Array.IndexOf` using reference equals.\r\n\r\nIt would seem that Contains isn\u0027t really useful as in all cases you\u0027ll never have the original `ServiceDescriptor` object.\r\n\r\n\n\n### Reproduction Steps\n\nAdd the following class and code to an OOB MAUI application.\r\n\r\n```\r\n    public class MyImplementation : IMauiInitializeService\r\n    {\r\n#region Implementation of IMauiInitializeService\r\n\r\n        /// \u003cinheritdoc /\u003e\r\n        public void Initialize( IServiceProvider services )\r\n        {\r\n        }\r\n\r\n#endregion\r\n    }\r\n\r\n        public static MauiApp CreateMauiApp()\r\n        {\r\n...\r\n            IServiceCollection sc = builder.Services;\r\n\r\n            var x = sc.Where( sd =\u003e sd.ServiceType == typeof(IMauiInitializeService) );\r\n\r\n            bool y = sc.Contains(\r\n                ServiceDescriptor.Singleton\u003cIMauiInitializeService, MyImplementation\u003e() );\r\n\r\n            sc.TryAddSingleton\u003cIMauiInitializeService, MyImplementation\u003e();\r\n\r\n            var x1 = sc.Where( sd =\u003e sd.ServiceType == typeof(IMauiInitializeService) ).ToArray();\r\n\r\n            bool y1 = sc.Contains(\r\n                ServiceDescriptor.Singleton\u003cIMauiInitializeService, MyImplementation\u003e() );\r\n\r\n            sc.AddSingleton\u003cIMauiInitializeService, MyImplementation\u003e();\r\n\r\n            var x2 = sc.Where( sd =\u003e sd.ServiceType == typeof(IMauiInitializeService) ).ToArray();\r\n\r\n            bool y2 = sc.Contains( ServiceDescriptor.Singleton\u003cIMauiInitializeService, MyImplementation\u003e() );\r\n\r\n...\r\n}\r\n```\r\n[MauiAppDiTest.zip](https://github.com/dotnet/runtime/files/8872886/MauiAppDiTest.zip)\r\n\r\n\n\n### Expected behavior\n\n- `IServiceCollection.Contains` works with a new instance of `ServiceDescriptor` and it compares both the Service **and** Implementation Type.\r\n-  `TryAdd{LIFETIME}\u003cTService, TImplementation\u003e()` tests both the Service **and** Implementation Type.\r\n\r\nThe TryAdd function docs suggest that it\u0027s only interested in the TService being registered to abort, but it\u0027s odd that it behaves differently than the basic Add where you [can add multiple implementations as long as you use the \u003cTService, TImplementation\u003e variants.](https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#service-registration-methods)\n\n### Actual behavior\n\n`IServiceCollection.Contains` only returns true when presented with the same `ServiceDescriptor` object that was added to the IServiceCollection.\r\n\r\n `TryAdd{LIFETIME}\u003cTService, TImplementation\u003e()` tests the Service type and will not register if one is already included.\n\n### Regression?\n\nI have no idea if this worked before but I suspect it\u0027s always been this way.\n\n### Known Workarounds\n\nUse LINQ to perform a search of the IServiceCollection and test each individual ServiceDescriptor for what you want.\r\n\r\n```\r\nServiceCollection.Any( sd =\u003e sd.ServiceType == typeof(IMyService) \u0026\u0026 sd.ImplementationType == typeof(MyImplementation) );\r\n```\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebakerhillpins\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-09T18:17:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nW6kX",
                                           "createdAt":  "2023-09-25T16:10:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lionvictor4",
                                           "body":  "Any update here?  This is still an issue.",
                                           "updatedAt":  "2023-09-25T16:10:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GCxXr",
                                           "createdAt":  "2024-07-24T20:49:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Since ServiceDescriptor is not sealed, I don\u0027t know how assuming or checking for `IComparer\u003cT\u003e` could work.",
                                           "updatedAt":  "2024-07-24T20:49:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GCx2g",
                                           "createdAt":  "2024-07-24T20:50:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "It seems like an extension method could be written to support the mentioned workaround:\r\n```\r\nServiceCollection.Any( sd =\u003e sd.ServiceType == typeof(IMyService) \u0026\u0026 sd.ImplementationType == typeof(MyImplementation) );\r\n```\r\nalthough probably not with LINQ.",
                                           "updatedAt":  "2024-07-24T20:50:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GCyX4",
                                           "createdAt":  "2024-07-24T20:52:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to future; we need an API proposal along with a proposed implementation.",
                                           "updatedAt":  "2024-07-24T20:52:03Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "IServiceCollection.Contains not finding ServiceDescriptor",
        "labels":  [
                       "bug",
                       "area-Extensions-DependencyInjection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76854",
        "createdAt":  "2022-10-10T14:00:37Z",
        "number":  76854,
        "author":  "NetherGranite",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0swyQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ECrownofFire",
                                            "createdAt":  "2022-11-10T16:23:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TonyValenti",
                                            "createdAt":  "2022-11-27T14:05:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Orace",
                                            "createdAt":  "2022-12-16T14:07:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AntMaster7",
                                            "createdAt":  "2023-10-22T12:31:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StringEpsilon",
                                            "createdAt":  "2023-10-26T22:45:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "doominator42",
                                            "createdAt":  "2023-12-17T23:51:36Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2024-03-13T17:57:17Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nProperty injection is not supported in the default service container, but now required members are coming with C# 11.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nProperty injection like in legacy ASP.NET via something like an `InjectAttribute` could be valuable. Maybe required members should even be automatically detected.\r\n\r\n### Additional context\r\n\r\nI was not able to find any reasoning as to why property injection was omitted in ASP.NET Core\u0027s default service container, so I don\u0027t know if the fact that property injection was considered a design issue since it makes dependencies optional was a factor.\r\n\r\nIf it was a factor, a lot of ASP.NET Core boilerplate could be massively reduced via property injection the way required members will now reduce constructor boilerplate.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOduwt0w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5L8FR7",
                                           "createdAt":  "2022-10-11T03:32:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nProperty injection is not supported in the default service container, but now required members are coming with C# 11.\n\n### Describe the solution you\u0027d like\n\nProperty injection like in legacy ASP.NET via something like an `InjectAttribute` could be valuable.\n\n### Additional context\n\nI was not able to find any reasoning as to why property injection was omitted in ASP.NET Core\u0027s default service container, so I don\u0027t know if the fact that property injection was considered a design issue since it makes dependencies optional was a factor.\r\n\r\nIf it was a factor, a lot of ASP.NET Core boilerplate could be massively reduced via property injection the way required members will now reduce constructor boilerplate.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNetherGranite\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-11T03:32:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PLDkG",
                                           "createdAt":  "2022-11-27T17:17:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCx6b_w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alistairjevans",
                                                                               "createdAt":  "2022-12-29T17:47:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tillig",
                                           "body":  "This will be interesting for other container owners to follow since the conforming container may require it. If anything changes, there should be some container compatibility tests added for it.",
                                           "updatedAt":  "2022-11-27T17:17:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rgilj",
                                           "createdAt":  "2022-12-29T17:36:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TonyValenti",
                                           "body":  "@tannergooding @SingleAccretion @jkotas @VSadov @stephentoub \r\nHi all - Do you have any insight into future plans regarding dependency injection and ```required``` properties?  AutoFac DI is considering adding support for injecting into ```required``` properties but would like to do so in a way that is compatible with any plans for Microsoft\u0027s DI.  I\u0027m an AutoFac user and would really love this feature.",
                                           "updatedAt":  "2022-12-29T17:36:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TZbUv",
                                           "createdAt":  "2023-01-21T04:21:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "There\u0027s currently no plan to add it, but I\u0027d be interested in what the other DI container plan to do here (if anything). ",
                                           "updatedAt":  "2023-01-21T04:21:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UaX20",
                                           "createdAt":  "2023-02-03T17:46:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnetjunkie",
                                           "body":  "Simple Injector is not going to support this OOTB, but we allow users to plug this in via already existing extension points.",
                                           "updatedAt":  "2023-02-03T17:46:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UbmWc",
                                           "createdAt":  "2023-02-03T23:23:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tillig",
                                           "body":  "Autofac [is adding it](https://github.com/autofac/Autofac/pull/1364) but there\u0027s some [thought going into](https://github.com/autofac/Autofac/issues/1365) whether or not a property marked `required` yet _also_ has nullable reference type markings indicating it can be nullable should thus be considered optional (\"resolve it if you can, set null if you can\u0027t\").",
                                           "updatedAt":  "2023-02-03T23:23:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5W4qGv",
                                           "createdAt":  "2023-03-07T07:38:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC3acPw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "NetherGranite",
                                                                               "createdAt":  "2023-03-08T10:36:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alistairjevans",
                                           "body":  "Just to note that we just shipped v7 of Autofac with required property support; our [documentation for required properties](https://autofac.readthedocs.io/en/latest/register/prop-method-injection.html#required-properties) goes into the caveats and approach taken for handling various cases (e.g. where constructors and properties are mixed).",
                                           "updatedAt":  "2023-03-07T07:38:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc527C3T",
                                           "createdAt":  "2024-03-13T17:57:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODac-jw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NetherGranite",
                                                                               "createdAt":  "2024-03-13T18:10:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "TonyValenti",
                                           "body":  "Just wanted to bump this issue as work on .NET 9.0 has started. \n\nRequired property injection is an awesome feature in Autofac as it eliminates tons of boilerplate code, especially where an inheritance hierarchy exists. ",
                                           "updatedAt":  "2024-03-13T17:57:16Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Will property injection be revisited with the upcoming addition of required members?",
        "labels":  [
                       "question",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78009",
        "createdAt":  "2022-11-08T07:56:05Z",
        "number":  78009,
        "author":  "ken801122",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-08T22:14:25Z",
        "body":  "C#9 supports init accessors, and now dependency injection components (Microsoft.Extensions.DependencyInjection) can implement the injection of properties that have init accessors based on this feature.\r\n\r\n```csharp\r\nusing Microsoft.Extensions.Logging;\r\n\r\nnamespace Demo.Services\r\n{\r\n    public class CustomerService\r\n    {\r\n        public ILogger\u003cCustomerService\u003e? Logger { get; init; }\r\n\r\n\r\n        public void Delete(int id)\r\n        {\r\n            // do ...\r\n\r\n            Logger?.LogInformation($\"Customer:{id} Removed.\");\r\n        }\r\n    }\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTfTsxg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5N480L",
                                           "createdAt":  "2022-11-08T07:56:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-11-08T07:56:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N5Isz",
                                           "createdAt":  "2022-11-08T08:30:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nC#9 supports init accessors, and now dependency injection components (Microsoft.Extensions.DependencyInjection) can implement the injection of properties that have init accessors based on this feature.\r\n\r\n```csharp\r\nusing Microsoft.Extensions.Logging;\r\n\r\nnamespace Demo.Services\r\n{\r\n    public class CustomerService\r\n    {\r\n        public ILogger\u003cCustomerService\u003e? Logger { get; init; }\r\n\r\n\r\n        public void Delete(int id)\r\n        {\r\n            // do ...\r\n\r\n            Logger?.LogInformation($\"Customer:{id} Removed.\");\r\n        }\r\n    }\r\n}\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eken801122\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-08T08:30:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N9OzG",
                                           "createdAt":  "2022-11-08T22:14:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "@ken801122 can you please share a complete sample showcasing what is not working exactly?",
                                           "updatedAt":  "2022-11-08T22:14:13Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Property injection based on init accessors",
        "labels":  [
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79458",
        "createdAt":  "2022-12-09T15:49:33Z",
        "number":  79458,
        "author":  "jez9999",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCsGRQQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2023-01-03T23:44:48Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-12-21T20:51:25Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nWith ASP.NET\u0027s dependency injection, I have to specify my dependencies in the constructor.  This is not possible when I\u0027m injecting a dependency some of whose constructor arguments I only know during a class\u0027s method call.  For example, I might have a `GameTurnManager` class that takes `gameState` to determine the state of the game\u0027s play field to use when performing various operations on the game\u0027s state.  However, my API call might specify the game ID to use as part of the API call:\r\n\r\n```\r\npublic async Task EndTurn(int gameId, int playerId) {\r\n    var gameState = getGameState(gameId);\r\n    var turnManager = new GameTurnManager(...ILogger\u003cGameTurnManager\u003e..., gameState, playerId);\r\n    turnManager.ValidateTurn();\r\n    turnManager.EndTurn();\r\n    var serializedState = turnManager.SerializeState();\r\n    // ...\r\n}\r\n```\r\n\r\nBecause some of the arguments to the constructor are only known during the method call, it\u0027s not possible to specify them in the parent class\u0027s constructor and therefore not possible to pull in `GameTurnManager` through constructor DI.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\n`ActivatorUtilities.CreateInstance\u003cGameTurnManager\u003e(IServiceProvider, gameState, playerId)` can be used during the method to get the `GameTurnManager` from DI whilst providing certain arguments at the time of instance creation.  However, this does hide the `GameTurnManager` dependency that the parent class has.  It would be nice to expose that dependency without having to instantiate the dependency until it\u0027s needed and the extra arguments are known.\r\n\r\nWhy not introduce an interface `IServiceActivator\u003cT\u003e` which can be used for precisely that?  When a constructor took `IServiceActivator\u003cT\u003e`, the `IServiceProvider` would provide an instance of a class that can be used to activate `T` and provide extra paramaters not provided by the `IServiceProvider`.  This would give the benefit that the dependency on `GameTurnManager` would be exposed:\r\n\r\n```\r\npublic class MyApi {\r\n    private readonly IServiceActivator\u003cGameTurnManager\u003e _gtmActivator;\r\n\r\n    public MyApi(IServiceActivator\u003cGameTurnManager\u003e gtmActivator) {\r\n        _gtmActivator = gtmActivator;\r\n    }\r\n\r\n    public async Task EndTurn(int gameId, int playerId) {\r\n        var gameState = getGameState(gameId);\r\n        var turnManager = _gtmActivator.CreateInstance(gameState, playerId);\r\n        turnManager.ValidateTurn();\r\n        turnManager.EndTurn();\r\n        var serializedState = turnManager.SerializeState();\r\n        // ...\r\n    }\r\n}\r\n```\r\n\r\nIt would also allow unit tests to create an `IServiceActivator\u003cIGameTurnManager\u003e` which could provide a mock `GameTurnManager` if needed.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUDUKKw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5QI0o3",
                                           "createdAt":  "2022-12-09T16:10:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nWith ASP.NET\u0027s dependency injection, I have to specify my dependencies in the constructor.  This is not possible when I\u0027m injecting a dependency some of whose constructor arguments I only know during a class\u0027s method call.  For example, I might have a `GameTurnManager` class that takes `gameState` to determine the state of the game\u0027s play field to use when performing various operations on the game\u0027s state.  However, my API call might specify the game ID to use as part of the API call:\r\n\r\n```\r\npublic async Task EndTurn(int gameId, int playerId) {\r\n    var gameState = getGameState(gameId);\r\n    var turnManager = new GameTurnManager(...ILogger\u003cGameTurnManager\u003e..., gameState, playerId);\r\n    turnManager.ValidateTurn();\r\n    turnManager.EndTurn();\r\n    var serializedState = turnManager.SerializeState();\r\n    // ...\r\n}\r\n```\r\n\r\nBecause some of the arguments to the constructor are only known during the method call, it\u0027s not possible to specify them in the parent class\u0027s constructor and therefore not possible to pull in `GameTurnManager` through constructor DI.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\n`ActivatorUtilities.CreateInstance\u003cGameTurnManager\u003e(IServiceProvider, gameState, playerId)` can be used during the method to get the `GameTurnManager` from DI whilst providing certain arguments at the time of instance creation.  However, this does hide the `GameTurnManager` dependency that the parent class has.  It would be nice to expose that dependency without having to instantiate the dependency until it\u0027s needed and the extra arguments are known.\r\n\r\nWhy not introduce an interface `IServiceActivator\u003cT\u003e` which can be used for precisely that?  When a constructor took `IServiceActivator\u003cT\u003e`, the `IServiceProvider` would provide an instance of a class that can be used to activate `T` and provide extra paramaters not provided by the `IServiceProvider`.  This would give the benefit that the dependency on `GameTurnManager` would be exposed:\r\n\r\n```\r\npublic class MyApi {\r\n    private readonly IServiceActivator\u003cGameTurnManager\u003e _gtmActivator;\r\n\r\n    public MyApi(IServiceActivator\u003cGameTurnManager\u003e gtmActivator) {\r\n        _gtmActivator = gtmActivator;\r\n    }\r\n\r\n    public async Task EndTurn(int gameId, int playerId) {\r\n        var gameState = getGameState(gameId);\r\n        var turnManager = _gtmActivator.CreateInstance(gameState, playerId);\r\n        turnManager.ValidateTurn();\r\n        turnManager.EndTurn();\r\n        var serializedState = turnManager.SerializeState();\r\n        // ...\r\n    }\r\n}\r\n```\r\n\r\nIt would also allow unit tests to create an `IServiceActivator\u003cIGameTurnManager\u003e` which could provide a mock `GameTurnManager` if needed.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejez9999\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-09T16:10:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QI2le",
                                           "createdAt":  "2022-12-09T16:17:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This isn\u0027t an API proposal, so I don\u0027t know the shape of `IServiceActivator\u003cT\u003e`, can you elaborate? This sounds like generic `Func\u003c..., TService\u003e` support in the container.\r\n\r\n",
                                           "updatedAt":  "2022-12-09T16:17:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QI5Ab",
                                           "createdAt":  "2022-12-09T16:25:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jez9999",
                                           "body":  "Yes, I suppose it would be `Func\u003c..., TService\u003e` support (if the `...` means you can pass certain constructor params that are not provided by the DI framework) - does that exist currently?\r\n\r\nThe other thing is that using the `Func\u003c..., TService\u003e` syntax would mean you\u0027d need to specify the all \"in\" types.  You couldn\u0027t just have the equivalent of `params object[] parameters` at the end of a method to allow a varying number of parameters to be supplied to the constructor, could you?",
                                           "updatedAt":  "2022-12-09T16:30:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QI_JG",
                                           "createdAt":  "2022-12-09T16:52:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jez9999",
                                           "body":  "Maybe a better name would be `IServiceFactory\u003cT\u003e`?",
                                           "updatedAt":  "2022-12-09T16:52:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QM38z",
                                           "createdAt":  "2022-12-11T13:16:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JanEggers",
                                           "body":  "have you tried ActivatorUtilities ?",
                                           "updatedAt":  "2022-12-11T13:16:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QM4Qu",
                                           "createdAt":  "2022-12-11T13:21:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jez9999",
                                           "body":  "My original post talks about ActivatorUtilities.",
                                           "updatedAt":  "2022-12-11T13:21:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QNQor",
                                           "createdAt":  "2022-12-11T20:51:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JanEggers",
                                           "body":  "a sorry missed that.  ",
                                           "updatedAt":  "2022-12-11T20:51:01Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Introduce IServiceActivator\u003cT\u003e",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80697",
        "createdAt":  "2023-01-16T13:54:37Z",
        "number":  80697,
        "author":  "JWilh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-10-29T09:07:16Z",
        "body":  "### Description\n\nHi,\r\n\r\nthe service provider locks itself when recursively resolving a scoped service from another thread inside a constructor of a scoped service.\r\nPlease check the code example for more details. I\u0027m not able to describe the problem better in plain English :-).\r\n\r\nThanks in advance. \n\n### Reproduction Steps\n\n```\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nvar provider = new ServiceCollection()\r\n    .AddScoped\u003cTaskRunType\u003e()\r\n    .AddScoped\u003cSecondType\u003e().BuildServiceProvider();\r\n\r\nusing (var scope = provider.CreateScope())\r\n    scope.ServiceProvider.GetRequiredService\u003cTaskRunType\u003e();\r\n\r\nclass TaskRunType\r\n{\r\n    public TaskRunType(IServiceProvider provider)\r\n    {\r\n        Task.Run(() =\u003e\r\n        {\r\n            provider.GetRequiredService\u003cSecondType\u003e();\r\n        }).GetAwaiter().GetResult();\r\n    }\r\n}\r\n\r\nclass SecondType\r\n{ }\r\n```\n\n### Expected behavior\n\nThe services should be resolved successfully.\n\n### Actual behavior\n\nResolving the SecondType ends in a deadlock.\n\n### Regression?\n\nNo, doesn\u0027t seems to be a regression, at least not lately, this also fails with .net 5.0.\n\n### Known Workarounds\n\nAdd a second sync code path to the problematic code section to avoid resolving the second service on another thread.\n\n### Configuration\n\n.Net 7.0.101\r\nWindows 10 21H2\r\nx64\n\n### Other information\n\nI\u0027m aware that this code is very ugly and it\u0027s wrong in the first place, it\u0027s just the easiest way to trigger this problem.\r\n\r\nIn our case we normally use a cached value, there is only a very specific scenario where this isn\u0027t the case.\r\nWe changed the affected code to use async/await and because of that we are now encounter that deadlock.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkab5_g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Sf522",
                                           "createdAt":  "2023-01-16T13:54:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nHi,\r\n\r\nthe service provider locks itself when recursively resolving a scoped service from another thread inside a constructor of a scoped service.\r\nPlease check the code example for more details. I\u0027m not able to describe the problem better in plain English :-).\r\n\r\nThanks in advance. \n\n### Reproduction Steps\n\n```\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nvar provider = new ServiceCollection()\r\n    .AddScoped\u003cTaskRunType\u003e()\r\n    .AddScoped\u003cSecondType\u003e().BuildServiceProvider();\r\n\r\nusing (var scope = provider.CreateScope())\r\n    scope.ServiceProvider.GetRequiredService\u003cTaskRunType\u003e();\r\n\r\nclass TaskRunType\r\n{\r\n    public TaskRunType(IServiceProvider provider)\r\n    {\r\n        Task.Run(() =\u003e\r\n        {\r\n            provider.GetRequiredService\u003cSecondType\u003e();\r\n        }).GetAwaiter().GetResult();\r\n    }\r\n}\r\n\r\nclass SecondType\r\n{ }\r\n```\n\n### Expected behavior\n\nThe services should be resolved successfully.\n\n### Actual behavior\n\nResolving the SecondType ends in a deadlock.\n\n### Regression?\n\nNo, doesn\u0027t seems to be a regression, at least not lately, this also fails with .net 5.0.\n\n### Known Workarounds\n\nAdd a second sync code path to the problematic code section to avoid resolving the second service on another thread.\n\n### Configuration\n\n.Net 7.0.101\r\nWindows 10 21H2\r\nx64\n\n### Other information\n\nI\u0027m aware that this code is very ugly and it\u0027s wrong in the first place, it\u0027s just the easiest way to trigger this problem.\r\n\r\nIn our case we normally use a cached value, there is only a very specific scenario where this isn\u0027t the case.\r\nWe changed the affected code to use async/await and because of that we are now encounter that deadlock.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJWilh\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-16T13:54:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Tx5jY",
                                           "createdAt":  "2023-01-26T20:09:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Thanks for this issue. It looks like it is a duplicate of https://github.com/dotnet/runtime/issues/36458.\r\n\r\nClosing as a duplicate.\r\n",
                                           "updatedAt":  "2023-01-26T20:09:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UI2Fe",
                                           "createdAt":  "2023-02-01T07:53:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JWilh",
                                           "body":  "Hi @steveharter, \r\nthanks for looking into this.\r\nI saw the referenced thread before, but IMHO these are are different issues.\r\nCan you please reopen this issue?\r\n\r\nMy example doesn\u0027t include circular references, \r\nit works with singletons, it only deadlocks when used with scoped services \r\nand the callstacks are different than from https://github.com/dotnet/runtime/issues/36458:\r\n![image](https://user-images.githubusercontent.com/54053197/215982898-021769d5-8165-4e4a-9c08-c94be33ce78a.png)\r\n\r\n",
                                           "updatedAt":  "2023-02-01T07:57:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5V9wHz",
                                           "createdAt":  "2023-02-23T18:37:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003eHi @steveharter,\r\nthanks for looking into this.\r\nI saw the referenced thread before, but IMHO these are are different issues.\r\nCan you please reopen this issue?\r\n\r\nSorry I didn\u0027t see that. I was able to repro this on 7.0 but unable to repro on 8.0 preview. Can you please verify? Thanks",
                                           "updatedAt":  "2023-02-23T18:37:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WjMV7",
                                           "createdAt":  "2023-03-02T15:33:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JWilh",
                                           "body":  "Hi @steveharter, \r\nI\u0027m able to reproduce this using .net v8.0.100-preview.1 with the package reference:\r\nPackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"8.0.0-preview.1.23110.8\".\r\n\r\nDid I missed something?\r\n\r\nDebugoutput from Rider shows that .net 8.0 dlls are loaded:\r\nLoaded Assembly \u0027C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\8.0.0-preview.1.23110.8\\System.Runtime.dll\u0027\r\n\r\n\r\nLoaded Assembly \u0027C:\\Users\\JWilhelm\\temp\\ConsoleApp1\\ConsoleApp1\\bin\\Debug\\net8.0\\Microsoft.Extensions.DependencyInjection.dll\u0027\r\n![image](https://user-images.githubusercontent.com/54053197/222468380-0cbd5c68-d3a2-498f-9283-0f18effee219.png)\r\n8.0.0-preview.1.23110.8+7deac7d6da3ce4e96d51d5f61a27ee85b7c42f60\r\n![image](https://user-images.githubusercontent.com/54053197/222468565-a651d642-2de6-4843-bed0-88209bb19c3a.png)\r\n\r\nThanks in advance!\r\n",
                                           "updatedAt":  "2023-03-02T15:34:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XZPpj",
                                           "createdAt":  "2023-03-13T14:21:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC33ujA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JWilh",
                                                                               "createdAt":  "2023-03-15T11:32:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e I\u0027m able to reproduce this using .net v8.0.100-preview.1 with the package reference:\r\n\r\nThanks. I was also able to repro it on 8; not sure why I couldn\u0027t repro it earlier.",
                                           "updatedAt":  "2023-03-13T14:21:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5btuIB",
                                           "createdAt":  "2023-05-08T16:46:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD4kWug==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-10-29T15:41:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I\u0027m not sure this is worth fixing... We did work here for singletons because it seemed reasonable to lock on a per service basis since singletons are global. Scopes (while not always) are usually short lived, so the code would need to be doing something crazy like the above (sync over async in the constructor of a scoped service) to reproduce this. \r\n\r\nWe can leave it open, but I\u0027d not convinced we should do anything here.",
                                           "updatedAt":  "2023-05-08T16:46:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5buCcE",
                                           "createdAt":  "2023-05-08T17:56:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JWilh",
                                           "body":  "You can close this issue if you like, as I said in the opening post, it\u0027s crazy to do it in the first place 😅.\r\n\r\nI was just hoping it\u0027s an \"easy\" fix, as it was already fixed for singletons.",
                                           "updatedAt":  "2023-05-08T17:56:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bucKz",
                                           "createdAt":  "2023-05-08T19:09:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDXPvw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JWilh",
                                                                               "createdAt":  "2023-05-09T05:46:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2023-08-11T05:29:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "introducing a per scope per type lock would introduce lots of overhead. Today we cheat for singletons and store it on an existing object that was already created per type. For scopes, its less obvious how we\u0027d reduce the overhead.",
                                           "updatedAt":  "2023-05-08T19:09:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Rpvn-",
                                           "createdAt":  "2024-10-29T09:07:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wvpm",
                                           "body":  "Instead of creating a deadlock and freezing the application, it could time out.\n\nAlso note that the DI guidelines explicitly state _\"async/await and Task based service resolution isn\u0027t supported. Because C# doesn\u0027t support asynchronous constructors, use asynchronous methods after synchronously resolving the service.\"_\nSource: https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection-guidelines",
                                           "updatedAt":  "2024-10-29T09:07:14Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Deadlock when recursive resolving scoped services from another thread",
        "labels":  [
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82372",
        "createdAt":  "2023-02-19T19:09:09Z",
        "number":  82372,
        "author":  "tvardero",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0nSRg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Danthar",
                                            "createdAt":  "2023-12-13T14:23:58Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-02-22T18:47:32Z",
        "body":  "### Description\n\n_Related: https://github.com/aspnet/DependencyInjection/issues/453 (resolution: wont fix)_\r\n_Related: https://github.com/jbogard/MediatR/issues/819_\r\n\r\nContravariant handler (see reproduction) is not resolved from MS.Ext.DI container. \r\nIf would be really usefull for CQRS applications that use mediator pattern. \r\n\r\nFor example, my project has a ton of inheritence for some models, and each model has CreateXXXCommand and UpdateXXXCommand. Currently, a workaround (see workaround) is required to register handlers for each concrete type of CreateXXXCommand and UpdateXXXCommand.\n\n### Reproduction Steps\n\n```csharp\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nvar serviceCollection = new ServiceCollection();\r\n\r\nserviceCollection.AddTransient\u003cICommandHandler\u003cPaintCarCommand\u003e, PaintCarCommandHandler\u003e();\r\n\r\nusing var serviceProvider = serviceCollection.BuildServiceProvider();\r\n\r\nvar anyColorHandler = serviceProvider.GetRequiredService\u003cICommandHandler\u003cPaintCarCommand\u003e\u003e(); // Does not throw\r\nvar redHandler = serviceProvider.GetRequiredService\u003cICommandHandler\u003cPaintCarRedCommand\u003e\u003e(); // Throws\r\nvar greenHandler = serviceProvider.GetRequiredService\u003cICommandHandler\u003cPaintCarGreenCommand\u003e\u003e(); // Throws\r\n\r\nabstract record PaintCarCommand;\r\n\r\nrecord PaintCarRedCommand : PaintCarCommand;\r\n\r\nrecord PaintCarGreenCommand : PaintCarCommand;\r\n\r\ninterface ICommandHandler\u003cin TCommand\u003e\r\n{\r\n    void Handle(TCommand command);\r\n}\r\n\r\nclass PaintCarCommandHandler : ICommandHandler\u003cPaintCarCommand\u003e\r\n{\r\n    public void Handle(PaintCarCommand command)\r\n    {\r\n        Console.WriteLine($\"Command type: {command.GetType().Name}\");\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\nRed paint command is handled by `PaintCarCommandHandler`, as well as green command.\n\n### Actual behavior\n\nHandler was not resolved for both red and green commands. \n\n### Regression?\n\nNo, it was never working for MS.Ext.DI.\n\n### Known Workarounds\n\nManual handler resolution is required. That means that handler should be resolved for base class of the command, recursively (if for example concrete command is grandchild of the base class, or even further).\r\nSometimes it might not be possible, if service resolution goes inside of 3rd party library (for example, [MediatR](https://github.com/jbogard/MediatR/blob/09dbb3e8c5c58b6e949e06e57755211571efda48/src/MediatR/Wrappers/NotificationHandlerWrapper.cs#L26)) and you don\u0027t have a chance to resolute handler manually there. \r\n\r\nEither way, for each concrete command, `PaintCarCommandHandler` should be registered as implementation of `ICommandHandler\u003cConcretePaintCarCommand\u003e`. This either requires registering them by hand, or using reflection ([Scrutor?](https://github.com/khellang/Scrutor)) to register them automatically.\r\n\r\nJust look at this beauty: \r\n```csharp\r\n    private static void Workaround(IServiceCollection services)\r\n    {\r\n        RegisterFor\u003cCreateFlowActionCommandHandler\u003e(typeof(CreateDelayFlowActionCommand),\r\n            typeof(CreateActivateWebhookFlowActionCommand),\r\n            typeof(CreateChangeCheckinStatusFlowActionCommand),\r\n            typeof(CreateChangeReservationStatusFlowActionCommand),\r\n            typeof(CreateExecuteFlowFlowActionCommand),\r\n            typeof(CreateSendChatMessageFlowActionCommand));\r\n\r\n        RegisterFor\u003cUpdateFlowActionCommandHandler\u003e(typeof(UpdateDelayFlowActionCommand),\r\n            typeof(UpdateActivateWebhookFlowActionCommand),\r\n            typeof(UpdateChangeCheckinStatusFlowActionCommand),\r\n            typeof(UpdateChangeReservationStatusFlowActionCommand),\r\n            typeof(UpdateExecuteFlowFlowActionCommand),\r\n            typeof(UpdateSendChatMessageFlowActionCommand));\r\n\r\n        RegisterFor\u003cCreateFlowConditionCommandHandler\u003e(typeof(CreateWithConstantComparisonFlowConditionCommand),\r\n            typeof(CreateWithVariableComparisonFlowConditionCommand),\r\n            typeof(CreateCronExpressionFlowConditionCommand),\r\n            typeof(CreateDateRangeFlowConditionCommand),\r\n            typeof(CreateDayOfWeekFilterFlowConditionCommand),\r\n            typeof(CreateTimeRangeFlowConditionCommand));\r\n\r\n        RegisterFor\u003cUpdateFlowConditionCommandHandler\u003e(typeof(UpdateWithConstantComparisonFlowConditionCommand),\r\n            typeof(UpdateWithVariableComparisonFlowConditionCommand),\r\n            typeof(UpdateCronExpressionFlowConditionCommand),\r\n            typeof(UpdateDateRangeFlowConditionCommand),\r\n            typeof(UpdateDayOfWeekFilterFlowConditionCommand),\r\n            typeof(UpdateTimeRangeFlowConditionCommand));\r\n\r\n        RegisterFor\u003cCreateFlowTriggerCommandHandler\u003e(typeof(CreateNamedEventFlowTriggerCommand));\r\n\r\n        RegisterFor\u003cUpdateFlowTriggerCommandHandler\u003e(typeof(UpdateNamedEventFlowTriggerCommand));\r\n\r\n        void RegisterFor\u003cTCommandHandler\u003e(params Type[] commands)\r\n        {\r\n            foreach (var iHandler in commands.Select(command =\u003e typeof(INotificationHandler\u003c\u003e).MakeGenericType(command)))\r\n                services.AddScoped(iHandler, typeof(TCommandHandler));\r\n        }\r\n    }\r\n```\n\n### Configuration\n\n.Net 7\r\nMS.Ext.DI 7.0.*\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVd3fxA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5VmKwl",
                                           "createdAt":  "2023-02-19T19:13:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tvardero",
                                           "body":  "Reposted from https://github.com/aspnet/DependencyInjection/issues/453 because if it is a breaking change, then it could happen on .Net 8 release",
                                           "updatedAt":  "2023-02-19T19:14:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VmLbw",
                                           "createdAt":  "2023-02-19T19:28:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tvardero",
                                           "body":  "Current:\r\nhttps://github.com/dotnet/runtime/blob/7908e8ef62c7d5ebdcd6459faccd755b9b10d369/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceProvider.cs#L135\r\n\r\nProposed:\r\n```csharp\r\nFunc\u003cServiceProviderEngineScope, object?\u003e? realizedService;\r\nif (!_realizedServices.TryGetValue(serviceType, out realizedService)\r\n{\r\n    realizedService = _realizedServices\r\n        .Where(kv =\u003e kv.Key.IsAssignableTo(serviceType))\r\n        .Select(kv =\u003e kv.Value)\r\n        .FirstOrDefault();\r\n\r\n    realizedService ??= _createServiceAccessor;\r\n    _realizedServices.TryAdd(serviceType, realizedService);\r\n}\r\n```",
                                           "updatedAt":  "2023-02-19T19:55:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VmPcl",
                                           "createdAt":  "2023-02-19T20:41:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\n_Related: https://github.com/aspnet/DependencyInjection/issues/453 (resolution: wont fix)_\r\n_Related: https://github.com/jbogard/MediatR/issues/819_\r\n\r\nContravariant handler (see reproduction) is not resolved from MS.Ext.DI container. \r\nIf would be really usefull for CQRS applications that use mediator pattern. \r\n\r\nFor example, my project has a ton of inheritence for some models, and each model has CreateXXXCommand and UpdateXXXCommand. Currently, a workaround (see workaround) is required to register handlers for each concrete type of CreateXXXCommand and UpdateXXXCommand.\n\n### Reproduction Steps\n\n```csharp\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nvar serviceCollection = new ServiceCollection();\r\n\r\nserviceCollection.AddTransient\u003cICommandHandler\u003cPaintCarCommand\u003e, PaintCarCommandHandler\u003e();\r\n\r\nusing var serviceProvider = serviceCollection.BuildServiceProvider();\r\n\r\nvar anyColorHandler = serviceProvider.GetRequiredService\u003cICommandHandler\u003cPaintCarCommand\u003e\u003e(); // Does not throw\r\nvar redHandler = serviceProvider.GetRequiredService\u003cICommandHandler\u003cPaintCarRedCommand\u003e\u003e(); // Throws\r\nvar greenHandler = serviceProvider.GetRequiredService\u003cICommandHandler\u003cPaintCarGreenCommand\u003e\u003e(); // Throws\r\n\r\nabstract record PaintCarCommand;\r\n\r\nrecord PaintCarRedCommand : PaintCarCommand;\r\n\r\nrecord PaintCarGreenCommand : PaintCarCommand;\r\n\r\ninterface ICommandHandler\u003cin TCommand\u003e\r\n{\r\n    void Handle(TCommand command);\r\n}\r\n\r\nclass PaintCarCommandHandler : ICommandHandler\u003cPaintCarCommand\u003e\r\n{\r\n    public void Handle(PaintCarCommand command)\r\n    {\r\n        Console.WriteLine($\"Command type: {command.GetType().Name}\");\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\nRed paint command is handled by `PaintCarCommandHandler`, as well as green command.\n\n### Actual behavior\n\nHandler was not resolved for both red and green commands. \n\n### Regression?\n\nNo, it was never working for MS.Ext.DI.\n\n### Known Workarounds\n\nManual handler resolution is required. That means that handler should be resolved for base class of the command, recursively (if for example concrete command is grandchild of the base class, or even further).\r\nSometimes it might not be possible, if service resolution goes inside of 3rd party library (for example, [MediatR](https://github.com/jbogard/MediatR/blob/09dbb3e8c5c58b6e949e06e57755211571efda48/src/MediatR/Wrappers/NotificationHandlerWrapper.cs#L26)) and you don\u0027t have a chance to resolute handler manually there. \r\n\r\nEither way, for each concrete command, `PaintCarCommandHandler` should be registered as implementation of `ICommandHandler\u003cConcretePaintCarCommand\u003e`. This either requires registering them by hand, or using reflection ([Scrutor?](https://github.com/khellang/Scrutor)) to register them automatically.\r\n\r\nJust look at this beauty: \r\n```csharp\r\n    private static void Workaround(IServiceCollection services)\r\n    {\r\n        RegisterFor\u003cCreateFlowActionCommandHandler\u003e(typeof(CreateDelayFlowActionCommand),\r\n            typeof(CreateActivateWebhookFlowActionCommand),\r\n            typeof(CreateChangeCheckinStatusFlowActionCommand),\r\n            typeof(CreateChangeReservationStatusFlowActionCommand),\r\n            typeof(CreateExecuteFlowFlowActionCommand),\r\n            typeof(CreateSendChatMessageFlowActionCommand));\r\n\r\n        RegisterFor\u003cUpdateFlowActionCommandHandler\u003e(typeof(UpdateDelayFlowActionCommand),\r\n            typeof(UpdateActivateWebhookFlowActionCommand),\r\n            typeof(UpdateChangeCheckinStatusFlowActionCommand),\r\n            typeof(UpdateChangeReservationStatusFlowActionCommand),\r\n            typeof(UpdateExecuteFlowFlowActionCommand),\r\n            typeof(UpdateSendChatMessageFlowActionCommand));\r\n\r\n        RegisterFor\u003cCreateFlowConditionCommandHandler\u003e(typeof(CreateWithConstantComparisonFlowConditionCommand),\r\n            typeof(CreateWithVariableComparisonFlowConditionCommand),\r\n            typeof(CreateCronExpressionFlowConditionCommand),\r\n            typeof(CreateDateRangeFlowConditionCommand),\r\n            typeof(CreateDayOfWeekFilterFlowConditionCommand),\r\n            typeof(CreateTimeRangeFlowConditionCommand));\r\n\r\n        RegisterFor\u003cUpdateFlowConditionCommandHandler\u003e(typeof(UpdateWithConstantComparisonFlowConditionCommand),\r\n            typeof(UpdateWithVariableComparisonFlowConditionCommand),\r\n            typeof(UpdateCronExpressionFlowConditionCommand),\r\n            typeof(UpdateDateRangeFlowConditionCommand),\r\n            typeof(UpdateDayOfWeekFilterFlowConditionCommand),\r\n            typeof(UpdateTimeRangeFlowConditionCommand));\r\n\r\n        RegisterFor\u003cCreateFlowTriggerCommandHandler\u003e(typeof(CreateNamedEventFlowTriggerCommand));\r\n\r\n        RegisterFor\u003cUpdateFlowTriggerCommandHandler\u003e(typeof(UpdateNamedEventFlowTriggerCommand));\r\n\r\n        void RegisterFor\u003cTCommandHandler\u003e(params Type[] commands)\r\n        {\r\n            foreach (var iHandler in commands.Select(command =\u003e typeof(INotificationHandler\u003c\u003e).MakeGenericType(command)))\r\n                services.AddScoped(iHandler, typeof(TCommandHandler));\r\n        }\r\n    }\r\n```\n\n### Configuration\n\n.Net 7\r\nMS.Ext.DI 7.0.*\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etvardero\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-19T20:41:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5V3P8z",
                                           "createdAt":  "2023-02-22T18:13:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "How is this different than the proposal in https://github.com/aspnet/DependencyInjection/issues/453 that was rejected?",
                                           "updatedAt":  "2023-02-22T18:13:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5V3d_E",
                                           "createdAt":  "2023-02-22T18:43:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tvardero",
                                           "body":  "\u003e How is this different than the proposal in [aspnet/DependencyInjection#453](https://github.com/aspnet/DependencyInjection/issues/453) that was rejected?\r\n\r\nProbably not any different.\r\nBut it was back 2016, a lot of things changed, probably now it might be possible to implement the feature.\r\n\r\nThe feature to me seems not so hard to implement, and would probably be nice-to-have to every current CQRS project.\r\n\r\nAlso, AFAIU, it _should_ [not break other containers](https://github.com/aspnet/DependencyInjection/issues/453#issuecomment-289607290), since they are build on DependencyInjection.Abstractions nuget nowadays, not the DependencyInjection nuget itself. (Or I don\u0027t get what Eilon ment by saying that)",
                                           "updatedAt":  "2023-02-22T18:47:32Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Microsoft.Extensions.DependencyInjection does not support co- and contravariance",
        "labels":  [
                       "enhancement",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84847",
        "createdAt":  "2023-04-14T16:57:30Z",
        "number":  84847,
        "author":  "thomhurst",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODGpc0Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2023-04-15T04:19:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kwaazaar",
                                            "createdAt":  "2023-06-13T09:50:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "h3rmanj",
                                            "createdAt":  "2025-03-20T11:39:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Sergey-Terekhin",
                                            "createdAt":  "2025-04-17T11:25:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "2Xpro-pop",
                                            "createdAt":  "2025-07-11T12:43:32Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-01-06T16:37:08Z",
        "body":  "### Background and motivation\n\nWhile the Microsoft Dependency Injection container works extremely well for most use cases, it has a couple of weaknesses compared to some other containers.\r\n\r\nOne area where I\u0027ve specifically found that it is weak in, is supporting Decorator classes.\r\n\r\nWhile it is currently possible to support decorators, it is dependent on the ordering of registrations. Meaning you can\u0027t register a decorator class before registering the original implementation. This means that if someone is unaware of this order, they could start refactoring the Dependency Injection setup, moving certain registrations into different locations, and this could end up breaking your application. Therefore this means this is delicate, flaky code.\r\n\r\nA Dependency Injection container shouldn\u0027t really concern itself with the ordering of registrations in my opinion.\r\n\r\nBy exposing a delegate on the IServiceCollection, called something like `OnBeforeBuild`, we can add hooks that will be invoked just before building the ServiceProvider.\r\nThis means that regardless of when we called (for example) an extension method called `.AddDecorator\u003cIInterface, TDecorator\u003e()`, which under the hood used this hook, it wouldn\u0027t break, because it would end up always being invoked at the latest stage possible.\r\n\r\nThis hook could also enable more advanced use-cases, such as scanning the collection before building, and utilising that data in any custom logic.\r\n\r\nMy proposed API would look like this:\r\n\r\n```diff\r\n+   public delegate void OnBeforeBuild(IServiceCollection serviceCollection);\r\n\r\n    public interface IServiceCollection : IList\u003cServiceDescriptor\u003e\r\n    {\r\n+        OnBeforeBuild OnBeforeBuild { get; set; }\r\n    }\r\n```\r\n\r\nThen where we are given a ServiceCollection, we can use this hook. We can then implement extension methods to abstract away logic like\r\n\r\n```csharp\r\n    public static class DependencyInjectionExtensions\r\n    {\r\n        public static IServiceCollection AddSingletonDecorator\u003cTService, TDecorator\u003e(this IServiceCollection services) \r\n            where TService : class\r\n            where TDecorator : class, TService\r\n        {\r\n            services.OnBeforeBuild += collection =\u003e collection.AddSingleton\u003cTService, TDecorator\u003e();\r\n            return services;\r\n        }\r\n    }\r\n```\n\n### API Proposal\n\n```diff\r\n+   public delegate void OnBeforeBuild(IServiceCollection serviceCollection);\r\n\r\n    public interface IServiceCollection : IList\u003cServiceDescriptor\u003e\r\n    {\r\n+        OnBeforeBuild OnBeforeBuild { get; set; }\r\n    }\r\n```\n\n### API Usage\n\n```csharp\r\nservices.OnBeforeBuild += collection =\u003e collection.AddSingleton\u003cTService, TDecorator\u003e();\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nBuilding the ServiceProvider would be marginally slower. But this is a one-time process for most applications.\r\n\r\nThis shouldn\u0027t cause any breaking changes, as it just exposes a new delegate, and doesn\u0027t change any existing behaviour.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmWQUBg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Z8OBj",
                                           "createdAt":  "2023-04-14T16:57:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nWhile the Microsoft Dependency Injection container works extremely well for most use cases, it has a couple of weaknesses compared to some other containers.\r\n\r\nOne area where I\u0027ve specifically found that it is weak in, is supporting Decorator classes.\r\n\r\nWhile it is currently possible to support decorators, it is dependent on the ordering of registrations. Meaning you can\u0027t register a decorator class before registering the original implementation. This means that if someone is unaware of this order, they could start refactoring the Dependency Injection setup, moving certain registrations into different locations, and this could end up breaking your application. Therefore this means this is delicate, flaky code.\r\n\r\nA Dependency Injection container shouldn\u0027t really concern itself with the ordering of registrations in my opinion.\r\n\r\nBy exposing a delegate on the IServiceCollection, called something like `OnBeforeBuild`, we can add hooks that will be invoked just before building the ServiceProvider.\r\nThis means that regardless of when we called (for example) an extension method called `.AddDecorator\u003cIInterface, TDecorator\u003e()`, which under the hood used this hook, it wouldn\u0027t break, because it would end up always being invoked at the latest stage possible.\r\n\r\nThis hook could also enable more advanced use-cases, such as scanning the collection before building, and utilising that data in any custom logic.\r\n\r\nMy proposed API would look like this:\r\n\r\n```diff\r\n+   public delegate void OnBeforeBuild(IServiceCollection serviceCollection);\r\n\r\n    public interface IServiceCollection : IList\u003cServiceDescriptor\u003e\r\n    {\r\n+        OnBeforeBuild OnBeforeBuild { get; set; }\r\n    }\r\n```\r\n\r\nThen where we are given a ServiceCollection, we can use this hook. We can then implement extension methods to abstract away logic like\r\n\r\n```csharp\r\n    public static class DependencyInjectionExtensions\r\n    {\r\n        public static IServiceCollection AddSingletonDecorator\u003cTService, TDecorator\u003e(this IServiceCollection services) \r\n            where TService : class\r\n            where TDecorator : class, TService\r\n        {\r\n            services.OnBeforeBuild += collection =\u003e collection.AddSingleton\u003cTService, TDecorator\u003e();\r\n            return services;\r\n        }\r\n    }\r\n```\n\n### API Proposal\n\n```diff\r\n+   public delegate void OnBeforeBuild(IServiceCollection serviceCollection);\r\n\r\n    public interface IServiceCollection : IList\u003cServiceDescriptor\u003e\r\n    {\r\n+        OnBeforeBuild OnBeforeBuild { get; set; }\r\n    }\r\n```\n\n### API Usage\n\n```csharp\r\nservices.OnBeforeBuild += collection =\u003e collection.AddSingleton\u003cTService, TDecorator\u003e();\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nBuilding the ServiceProvider would be marginally slower. But this is a one-time process for most applications.\r\n\r\nThis shouldn\u0027t cause any breaking changes, as it just exposes a new delegate, and doesn\u0027t change any existing behaviour.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ethomhurst\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-14T16:57:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c9GJr",
                                           "createdAt":  "2023-05-23T14:25:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e , it is dependent on the ordering of registrations. Meaning you can\u0027t register a decorator class before registering the original implementation.\r\n\r\nCan you provide an example or pseudo-code of the implementation of the event -- does the decorator class in your case need to enumerate existing services and then add a decorator for some of them and then perhaps remove the original?",
                                           "updatedAt":  "2023-05-23T14:25:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c9wzE",
                                           "createdAt":  "2023-05-23T15:41:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thomhurst",
                                           "body":  "\u003e \u003e , it is dependent on the ordering of registrations. Meaning you can\u0027t register a decorator class before registering the original implementation.\r\n\u003e \r\n\u003e Can you provide an example or pseudo-code of the implementation of the event -- does the decorator class in your case need to enumerate existing services and then add a decorator for some of them and then perhaps remove the original?\r\n\r\nYeah exactly. Apologies I\u0027m on mobile but it\u0027d be something like\r\n\r\n```\r\nservices.OnBeforeBuild += collection =\u003e \r\n{\r\nvar myService = collection.First(x =\u003e x.ServiceType == typeof(IMyInterface));\r\n\r\ncollection.Remove(myService);\r\n\r\ncollection.AddTransient\u003cIMyInterface\u003e(sp =\u003e new MyDecorator(ActivatorUtilities.CreateInstance(myService.ImplementationType, sp)));\r\n}\r\n```",
                                           "updatedAt":  "2023-05-23T18:12:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jch4B",
                                           "createdAt":  "2023-08-07T18:57:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODC7v_w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "thomhurst",
                                                                               "createdAt":  "2023-08-07T19:03:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "steveharter",
                                           "body":  "I do think this feature has merit; moving to future based on schedule.",
                                           "updatedAt":  "2023-08-07T18:57:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Yw7Nc",
                                           "createdAt":  "2024-12-26T17:12:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e This shouldn\u0027t cause any breaking changes\n\nAdding a property to the existing IServiceCollection interface is a breaking change.\n",
                                           "updatedAt":  "2024-12-26T17:12:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Yw9aZ",
                                           "createdAt":  "2024-12-26T17:26:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thomhurst",
                                           "body":  "Oh will it? If it wasn\u0027t referenced before how does it break stuff?",
                                           "updatedAt":  "2024-12-26T17:26:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YxJ67",
                                           "createdAt":  "2024-12-26T18:48:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "This is \"DISALLOWED: Adding a member to an interface\" in [.NET API changes that affect compatibility](https://learn.microsoft.com/en-us/dotnet/core/compatibility/library-change-rules).\n\nIServiceCollection is implemented by at least the following classes, and the new property would need to be added to each of them:\n\n* [Microsoft.Extensions.DependencyInjection.ServiceCollection](https://github.com/dotnet/runtime/blob/2b60d82ef3e87876128b7f71922a1b72908b6fcf/src/libraries/Microsoft.Extensions.DependencyInjection.Abstractions/src/ServiceCollection.cs#L16)\n* [Microsoft.Maui.Hosting.Internal.MauiServiceCollection](https://github.com/dotnet/maui/blob/76e5cd097169c41c1c8e8b1a39dc406a3ea418b4/src/Core/src/Hosting/Internal/MauiServiceCollection.cs#L9) (via Microsoft.Maui.Hosting.IMauiServiceCollection)\n* [Microsoft.Extensions.DependencyInjection.DefaultHttpClientBuilderServiceCollection ](https://github.com/dotnet/runtime/blob/2b60d82ef3e87876128b7f71922a1b72908b6fcf/src/libraries/Microsoft.Extensions.Http/src/DependencyInjection/DefaultHttpClientBuilderServiceCollection.cs#L12)\n* [Lamar.ServiceRegistry](https://github.com/JasperFx/lamar/blob/29bc351c566b35da80dd723604c83ca7157a66ce/src/Lamar/ServiceRegistry.cs#L53)\n* [AutoDI.AutoDIServiceCollection](https://github.com/Keboo/AutoDI/blob/a9cb11d641f434d59c4c384ae9be57c21af234de/AutoDI/AutoDIServiceCollection.cs#L5)\n* [Prism.Ioc.ServiceCollection](https://github.com/dansiegel/Prism.Container.Extensions/blob/82d64498fd8fd3e48041ccc774433e7e8120d7e5/src/Prism.Container.Extensions/IServiceCollectionExtensions.cs#L36)\n* [Microsoft.KernelMemory.AppBuilders.ServiceCollectionPool](https://github.com/microsoft/Document-Knowledge-Mining-Solution-Accelerator/blob/20b58941bcb2a6cf98ea0a028a687c5d195bdfd1/App/kernel-memory/service/Abstractions/AppBuilders/ServiceCollectionPool.cs#L23)\n\nAn interface default method is not feasible in IServiceCollection because the Microsoft.Extensions.DependencyInjection.Abstractions package targets .NET Framework too and is supported there for use with ASP.NET Core 2.1.",
                                           "updatedAt":  "2024-12-26T18:48:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YxMIW",
                                           "createdAt":  "2024-12-26T19:03:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "If you instead did\n\n```diff\n namespace Microsoft.Extensions.DependencyInjection\n {\n     // Keep the existing interface as is.\n     public interface IServiceCollection : IList\u003cServiceDescriptor\u003e\n     {\n     }\n\n+    public delegate void OnBeforeBuild(IServiceCollection serviceCollection);\n\n+    // It doesn\u0027t seem useful to be able to implement IServiceCollectionBeforeBuild\n+    // without IServiceCollection, because the IServiceCollection is passed as\n+    // a parameter to the delegate anyway.\n+    public interface IServiceCollectionBeforeBuild : IServiceCollection\n+    {\n+        OnBeforeBuild OnBeforeBuild { get; set; }\n+    }\n\n-    public partial class ServiceCollection : IServiceCollection\n+    public partial class ServiceCollection : IServiceCollection, IServiceCollectionBeforeBuild\n     {\n+        public OnBeforeBuild OnBeforeBuild { get; set; }\n     }\n}\n```\n\nthen this would not be a breaking change according to those rules, but there could still be compatibility problems if a component attempts to register its delegate in IServiceCollectionBeforeBuild but the application uses a DI container library that does not support this feature.",
                                           "updatedAt":  "2024-12-26T19:03:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YxPSV",
                                           "createdAt":  "2024-12-26T19:24:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thomhurst",
                                           "body":  "The thing is, a major version gets released each year anyway. By versioning standards, breaking changes are to be expected in new major versions",
                                           "updatedAt":  "2024-12-26T19:24:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YxPqD",
                                           "createdAt":  "2024-12-26T19:27:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This would be on the options instead of on the service collection (if we decided to do anything here)",
                                           "updatedAt":  "2024-12-26T19:27:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YxQz6",
                                           "createdAt":  "2024-12-26T19:35:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thomhurst",
                                           "body":  "\u003e This would be on the options instead of on the service collection (if we decided to do anything here)\n\nAllowing delegates? That\u0027d limit libraries which wouldn\u0027t really solve registering decorators. Extensions are usually on the collection so libraries don\u0027t have access to the options",
                                           "updatedAt":  "2024-12-26T19:35:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YxbJq",
                                           "createdAt":  "2024-12-26T20:52:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Feature that change the core interfaces are a much bigger scope as all of the existing implementers of IServiceCollection need to buy into this new primitive. It requires getting buy in and sign off from those parties. Features of the built-in container are smaller in scope and can be executed on without that level of buy in (if the core team agrees though).\n\nIf you want it to be in the first category then you need to do the work to get the [DI council](https://github.com/dotnet/runtime/issues/35999) to buy into your feature and agree to implement it everywhere.\n\nPS: I\u0027m not convinced this feature has reached that level of significance, but I am just one person 😄 ",
                                           "updatedAt":  "2024-12-26T20:52:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YxbpM",
                                           "createdAt":  "2024-12-26T20:56:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thomhurst",
                                           "body":  "Fair. I\u0027m not saying its a huge feature, but it definitely helps enable the decorator pattern which COULD have big implications.\n\nAnd it basically enables a new feature that isn\u0027t possible right now.\n\nAlso, I understand the interface implementation problem, but I\u0027d argue how often those interfaces are used outside of the MEDI types. I guarantee minimally. \n\nAlso sorry if that came across argumentatively, I don\u0027t mean that, but just trying to convey that I don\u0027t think it\u0027s affect many people",
                                           "updatedAt":  "2024-12-26T20:56:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YxtId",
                                           "createdAt":  "2024-12-26T23:25:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e Also, I understand the interface implementation problem, but I\u0027d argue how often those interfaces are used outside of the MEDI types. I guarantee minimally.\n\nDoesn’t change the stance on how we approach DI features.\n\n\u003e but it definitely helps enable the decorator pattern which COULD have big implications.\n\nhttps://github.com/dotnet/runtime/issues/36021",
                                           "updatedAt":  "2024-12-26T23:25:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZZBQG",
                                           "createdAt":  "2025-01-06T16:33:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rjgotten",
                                           "body":  "\u003e @thomhurst \n\u003e Fair. I\u0027m not saying its a huge feature, but it definitely helps enable the decorator pattern which COULD have big implications.\n\nA decorator pattern based on an `OnBeforeBuild` phase would be nice when wanting to decorate many types in the container with some kind of generic behavior; where most of those types are actually third-party to you and wired up inside other extension methods and builders. They might even be implementation details you really shouldn\u0027t be messing with unless you strictly know what you\u0027re doing. (E.g. Application Insights and similar telemetry solutions hooking themselves into everything all over the place, is this kind of thing.)\n\nBut that\u0027s not the type of decoration you are discussing here, I think.\n\nWhat you\u0027re talking about is just composing a service from layers of decorators.\n\nYou can already register decorated types in `IServiceCollection` like that in a nice and declarative way with some elbow grease.\nAll it requires is a set of extension methods that internally register a factory delegate which constructs the concrete implementation types in order and injects them into the constructor of the next type using an `ObjectFactory` from `ActivatorUtilities.CreateFactory`.\n\nThe end result of that can be a fluent API like:\n\n```cs\nservices\n  .AddDecoratedScoped\u003cIFooService, BaseFoo\u003e()\n  .DecorateWith\u003cFooLoggingDecorator\u003e()\n  .DecorateWith\u003cFooCachingDecorator\u003e()\n  .DecorateWith\u003cFooEtcEtcDecorator\u003e();\n```",
                                           "updatedAt":  "2025-01-06T16:37:08Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "[API Proposal]: OnBeforeBuild Delegate - Add a hook into the ServiceCollection, allowing execution of code just before building the ServiceProvider",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85361",
        "createdAt":  "2023-04-25T21:20:20Z",
        "number":  85361,
        "author":  "TechnoBerry",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-05-23T14:10:19Z",
        "body":  "### Background and motivation\r\n\r\nIn most of the cases in which I had to use `ActivatorUtilities.CreateFactory`, all the passed types were known. It seems to me that the method generation using expression trees used under the hood of the `ActivatorUtilities.CreateFactory` method is redundant in my case and can be replaced with a method created using source generator. I also saw that the `AddHttpClient` method from `Microsoft.Extensions.Http` [has an overload](https://github.com/dotnet/runtime/blob/v7.0.5/src/libraries/Microsoft.Extensions.Http/src/DependencyInjection/HttpClientFactoryServiceCollectionExtensions.cs#L716-L729), in combination with which the source generator will look appropriate.\r\n\r\n### API Proposal\r\n\r\nI suggest adding an attribute (e.g. `CreateInstanceAttribute`) to mark methods for which source should be generated and a source generator that will generate an implementation of the factory method using the passed parameters and dependencies obtained from IServiceProvider\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.DependencyInjection;\r\n\r\n[AttributeUsage(AttributeTargets.Method)]\r\npublic class CreateInstanceAttribute : Attribute\r\n{\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\nBelow is an example of using with AddHttpClient. \r\n\r\n```csharp\r\npublic interface IMyClient {}\r\n\r\npublic class MyClient : IMyClient\r\n{\r\n    private readonly IMemoryCache _memoryCache;\r\n    private readonly HttpClient _httpClient;\r\n    private readonly ILogger\u003cMyClient\u003e _logger;\r\n\r\n    public MyClient(IMemoryCache memoryCache, HttpClient httpClient, ILogger\u003cMyClient\u003e logger)\r\n    {\r\n        _memoryCache = memoryCache;\r\n        _httpClient = httpClient;\r\n        _logger = logger;\r\n    }\r\n}\r\n\r\n\r\npublic static partial class MyClientFactory\r\n{\r\n    // The generated implementation of this method should get IMemoryCache and ILogger\u003cMyClient\u003e from serviceProvider\r\n    // and pass them along with given httpClient as constructor parameters\r\n    [CreateInstance]\r\n    public static partial MyClient Create(HttpClient httpClient, IServiceProvider serviceProvider);\r\n\r\n    public static void AddMyClient(this IServiceCollection services)\r\n    {\r\n        services.AddHttpClient\u003cIMyClient, MyClient\u003e(Create); // Uses generated method\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWtYReg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5avnqh",
                                           "createdAt":  "2023-04-25T21:20:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nIn most of the cases in which I had to use `ActivatorUtilities.CreateFactory`, all the passed types were known. It seems to me that the method generation using expression trees used under the hood of the `ActivatorUtilities.CreateFactory` method is redundant in my case and can be replaced with a method created using source generator. I also saw that the `AddHttpClient` method from `Microsoft.Extensions.Http` [has an overload](https://github.com/dotnet/runtime/blob/v7.0.5/src/libraries/Microsoft.Extensions.Http/src/DependencyInjection/HttpClientFactoryServiceCollectionExtensions.cs#L716-L729), in combination with which the source generator will look appropriate.\n\n### API Proposal\n\nI suggest adding an attribute (e.g. `CreateInstanceAttribute`) to mark methods for which source should be generatoed and a source generator that will generate an implementation of the factory method using the passed parameters and dependencies obtained from IServiceProvider\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.DependencyInjection;\r\n\r\n[AttributeUsage(AttributeTargets.Method)]\r\npublic class CreateInstanceAttribute : Attribute\r\n{\r\n}\r\n```\r\n\n\n### API Usage\n\nBelow is an example of using with AddHttpClient. \r\n\r\n```csharp\r\npublic interface IMyClient {}\r\n\r\npublic class MyClient : IMyClient\r\n{\r\n    private readonly IMemoryCache _memoryCache;\r\n    private readonly HttpClient _httpClient;\r\n    private readonly ILogger\u003cMyClient\u003e _logger;\r\n\r\n    public MyClient(IMemoryCache memoryCache, HttpClient httpClient, ILogger\u003cMyClient\u003e logger)\r\n    {\r\n        _memoryCache = memoryCache;\r\n        _httpClient = httpClient;\r\n        _logger = logger;\r\n    }\r\n}\r\n\r\n\r\npublic static partial class MyClientFactory\r\n{\r\n    // The generated implementation of this method should get IMemoryCache and ILogger\u003cMyClient\u003e from serviceProvider\r\n    // and pass them along with given httpClient as constructor parameters\r\n    [CreateInstance]\r\n    public static partial MyClient Create(HttpClient httpClient, IServiceProvider serviceProvider);\r\n\r\n    public static void AddMyClient(this IServiceCollection services)\r\n    {\r\n        services.AddHttpClient\u003cIMyClient, MyClient\u003e(Create); // Uses generated method\r\n    }\r\n}\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAMalininHere\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-HttpClientFactory`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-25T21:20:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5avo-_",
                                           "createdAt":  "2023-04-25T21:25:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nIn most of the cases in which I had to use `ActivatorUtilities.CreateFactory`, all the passed types were known. It seems to me that the method generation using expression trees used under the hood of the `ActivatorUtilities.CreateFactory` method is redundant in my case and can be replaced with a method created using source generator. I also saw that the `AddHttpClient` method from `Microsoft.Extensions.Http` [has an overload](https://github.com/dotnet/runtime/blob/v7.0.5/src/libraries/Microsoft.Extensions.Http/src/DependencyInjection/HttpClientFactoryServiceCollectionExtensions.cs#L716-L729), in combination with which the source generator will look appropriate.\r\n\r\n### API Proposal\r\n\r\nI suggest adding an attribute (e.g. `CreateInstanceAttribute`) to mark methods for which source should be generated and a source generator that will generate an implementation of the factory method using the passed parameters and dependencies obtained from IServiceProvider\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.DependencyInjection;\r\n\r\n[AttributeUsage(AttributeTargets.Method)]\r\npublic class CreateInstanceAttribute : Attribute\r\n{\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\nBelow is an example of using with AddHttpClient. \r\n\r\n```csharp\r\npublic interface IMyClient {}\r\n\r\npublic class MyClient : IMyClient\r\n{\r\n    private readonly IMemoryCache _memoryCache;\r\n    private readonly HttpClient _httpClient;\r\n    private readonly ILogger\u003cMyClient\u003e _logger;\r\n\r\n    public MyClient(IMemoryCache memoryCache, HttpClient httpClient, ILogger\u003cMyClient\u003e logger)\r\n    {\r\n        _memoryCache = memoryCache;\r\n        _httpClient = httpClient;\r\n        _logger = logger;\r\n    }\r\n}\r\n\r\n\r\npublic static partial class MyClientFactory\r\n{\r\n    // The generated implementation of this method should get IMemoryCache and ILogger\u003cMyClient\u003e from serviceProvider\r\n    // and pass them along with given httpClient as constructor parameters\r\n    [CreateInstance]\r\n    public static partial MyClient Create(HttpClient httpClient, IServiceProvider serviceProvider);\r\n\r\n    public static void AddMyClient(this IServiceCollection services)\r\n    {\r\n        services.AddHttpClient\u003cIMyClient, MyClient\u003e(Create); // Uses generated method\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAMalininHere\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-25T21:25:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a1hF6",
                                           "createdAt":  "2023-04-26T20:04:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "See also\r\nhttps://github.com/dotnet/runtime/issues/44432\r\nhttps://github.com/dotnet/runtime/issues/82679",
                                           "updatedAt":  "2023-04-26T20:04:32Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Source generator to replace some use cases of ActivatorUtilities.CreateFactory",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86426",
        "createdAt":  "2023-05-18T06:28:20Z",
        "number":  86426,
        "author":  "swsyn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_SHzg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FStolte",
                                            "createdAt":  "2025-02-17T09:23:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cx-dbr",
                                            "createdAt":  "2025-02-20T12:51:46Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-26T10:40:39Z",
        "body":  "I understand that there is [CA1065](https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1065) rule\r\n\r\nbut\r\n\r\nWe run into errors during disposing some services in our Blazor Server App. We can wrap all our code in Dispose with try/catch but there can be third party services. It comes quite difficult to find the reason of some services were not disposed (also because Blazor\u0027s CircuitHost logs _disposeFailed with Debug level).\r\n\r\nIt seems difficult to assume that Dispose() will never throw an exception somewhere.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi38YgQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ciZe0",
                                           "createdAt":  "2023-05-18T06:28:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI understand that there is [CA1065](https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1065) rule\r\n\r\nbut\r\n\r\nWe run into errors during disposing some services in our Blazor Server App. We can wrap all our code in Dispose with try/catch but there can be third party services. It comes quite difficult to find the reason of some services were not disposed (also because Blazor\u0027s CircuitHost logs _disposeFailed with Debug level).\r\n\r\nIt seems difficult to assume that Dispose() will never throw an exception somewhere.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eswsyn\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-18T06:28:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c_oS2",
                                           "createdAt":  "2023-05-23T22:01:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I don\u0027t think we\u0027ll want framework components to swallow exceptions here.  Is this an ask to try to capture an exception and rethrow as `AggregateException` when disposing all services in https://github.com/dotnet/runtime/blob/1e421670a6456d9c5b924b7ffea14cab8559a2e9/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceLookup/ServiceProviderEngineScope.cs#L94-L171?\r\n\r\nOf is this an ask to make the Blazor CircuitHost to make the dispose exception more visible: https://github.com/dotnet/aspnetcore/blob/39564d529f84f7a3bbac5b28ba11060e8ac30375/src/Components/Server/src/Circuits/CircuitHost.cs#L199",
                                           "updatedAt":  "2023-05-23T22:01:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dBGqZ",
                                           "createdAt":  "2023-05-24T07:11:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swsyn",
                                           "body":  "Yes, it was about both aforementioned variants:\r\n1. We expected that the scope would try to dispose all disposable services and then throw an exception. But the scope just stop disposing.\r\n\r\nIt is important for us because we have some services which start timers and we need to stop them when the services are disposed. But they are not disposed because of broken service.\r\n```\r\npublic class Service: IDisposable\r\n{\r\n\tprivate readonly ITimerService timerService;\r\n\tprivate ITimer timer;\r\n\tpublic TimeSpan UpdateInterval { get; set; } = TimeSpan.FromMinutes(2);\r\n\r\n\tpublic Task SetupAsync()\r\n\t{\r\n\t\ttimer = timerService.Create();\r\n\t\ttimer.Interval = UpdateInterval;\r\n\t\ttimer.Tick += TimerOnTick;\r\n\t\ttimer.IsEnabled = true;\r\n\r\n\t\treturn Task.CompletedTask;\r\n\t}\r\n\t\r\n\tprivate void TimerOnTick(object sender, EventArgs e) { }\r\n\r\n\tpublic void Dispose()\r\n\t{\r\n\t\tif (timer!=null) {\r\n\t\t\ttimer.IsEnabled = false;\r\n\t\t\ttimer.Tick -= TimerOnTick;\r\n\t\t\ttimer = null;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nWe have modular app structure and some services can be written by other developers.\r\n\r\n2. Yes, we also expected that Blazor CircuitHost dispose exception would be more visible.",
                                           "updatedAt":  "2023-05-24T07:11:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dGLUA",
                                           "createdAt":  "2023-05-24T20:43:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@swsyn can you open a separate issue in https://github.com/dotnet/aspnetcore with an ask for Blazor CircuitHost to stop hiding these exceptions?\r\n\r\nLet this issue track a request to change the behavior of ServiceProviderEngineScope to not halt on the first Dispose exception, but to instead proceed and aggregate exceptions that might occur.\r\n",
                                           "updatedAt":  "2023-05-24T20:43:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dHcpI",
                                           "createdAt":  "2023-05-25T04:09:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "swsyn",
                                           "body":  "[https://github.com/dotnet/aspnetcore/issues/48418](https://github.com/dotnet/aspnetcore/issues/48418)",
                                           "updatedAt":  "2023-05-25T04:10:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jckK_",
                                           "createdAt":  "2023-08-07T19:06:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to 9.0; ServiceProviderEngineScope should try to run Dispose() on all services.",
                                           "updatedAt":  "2023-08-07T19:06:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LfxiB",
                                           "createdAt":  "2024-09-10T11:08:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noxe",
                                           "body":  "we had the same problem today - if one service throws an exception - all other services do not call Dispose any more!",
                                           "updatedAt":  "2024-09-10T11:08:06Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "ServiceProviderEngineScope should aggregate exceptions in Dispose rather than throwing on the first.",
        "labels":  [
                       "feature-request",
                       "area-Extensions-DependencyInjection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88390",
        "createdAt":  "2023-06-28T08:47:16Z",
        "number":  88390,
        "author":  "jonathan-vogel-siemens",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:40:41Z",
        "body":  "### Description\r\n\r\nWhen adding ApplicationInsights to an ASP.NET core web app\u0027s `IServiceCollection` via `AddApplicationInsightsTelemetry()` and adding a call to `ConfigureOptions\u003cConfigureApplicationInsightsServiceOptions\u003e()` to configure `ApplicationInsightsServiceOptions`, we are experiencing a deadlock.\r\n\r\n**Sample code**\r\n\r\nProgram.cs:\r\n```csharp\r\nservices.ConfigureOptions\u003cConfigureApplicationInsightsServiceOptions\u003e();\r\nservices.AddApplicationInsightsTelemetry();\r\n```\r\n\r\nConfigureApplicationInsightsServiceOptions.cs:\r\n```csharp\r\npublic class ConfigureApplicationInsightsServiceOptions : IConfigureOptions\u003cApplicationInsightsServiceOptions\u003e\r\n    {\r\n        public ConfigureApplicationInsightsServiceOptions(\r\n            SecretClient secretClient)\r\n        {\r\n            SecretClient = secretClient;\r\n        }\r\n\r\n        public SecretClient SecretClient { get; }\r\n\r\n        public void Configure(ApplicationInsightsServiceOptions options)\r\n        {\r\n            KeyVaultSecret secret = SecretClient.GetSecret(\"appinsights\");\r\n            options.ConnectionString = secret.Value;\r\n        }\r\n    }\r\n```\r\n\r\n### Reproduction Steps\r\n\r\n1. Call `ConfigureOptions\u003cConfigureApplicationInsightsServiceOptions\u003e()` on the `IServiceCollection` as shown in the description\r\n2. Call `AddApplicationInsightsTelemetry()` on the `IServiceCollection` as shown in the description\r\n\r\nOr see here: https://github.com/jonathan-vogel-siemens/IssueRepro88390\r\n\r\n### Expected behavior\r\n\r\nConfigureApplicationInsightsServiceOptions.Configure should be invoked when the `WebApplicationBuilder` is building\r\n\r\n### Actual behavior\r\n\r\nDeadlock. See running tasks here:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/64040537/b67af042-7d33-4933-93fa-80bf4a19e5e3)\r\n\r\nSomehow it is blocking at https://github.com/dotnet/runtime/blob/7575716bfdcfa82dfd47de1b11f59a4b12dac969/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceLookup/CallSiteRuntimeResolver.cs#L84\r\n\r\n### Regression?\r\n\r\nSeems like it is a regression. A similar method (yielding the same deadlock) is documented here, from 2021: https://www.uveta.io/categories/blog/unclutter-startup-cs/#Application-Insights\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n- .NET 6.0\r\n- Windows\r\n- x64\r\n- Plain ASP.NET Razor Web App\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY9To_g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5gmDN8",
                                           "createdAt":  "2023-06-28T08:47:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen adding ApplicationInsights to an ASP.NET core web app\u0027s `IServiceCollection` via `AddApplicationInsightsTelemetry()` and adding a call to `ConfigureOptions\u003cConfigureApplicationInsightsServiceOptions\u003e()`, we are experiencing a deadlock.\r\n\r\n**Sample code**\r\n\r\nProgram.cs:\r\n```csharp\r\nservices.ConfigureOptions\u003cConfigureApplicationInsightsServiceOptions\u003e();\r\nservices.AddApplicationInsightsTelemetry();\r\n```\r\n\r\nConfigureApplicationInsightsServiceOptions.cs:\r\n```csharp\r\npublic class ConfigureApplicationInsightsServiceOptions : IConfigureOptions\u003cApplicationInsightsServiceOptions\u003e\r\n    {\r\n        public ConfigureApplicationInsightsServiceOptions(\r\n            SecretClient secretClient)\r\n        {\r\n            SecretClient = secretClient;\r\n        }\r\n\r\n        public SecretClient SecretClient { get; }\r\n\r\n        public void Configure(ApplicationInsightsServiceOptions options)\r\n        {\r\n            KeyVaultSecret secret = SecretClient.GetSecret(\"appinsights\");\r\n            options.ConnectionString = secret.Value;\r\n        }\r\n    }\r\n```\n\n### Reproduction Steps\n\n1. Call `ConfigureOptions\u003cConfigureApplicationInsightsServiceOptions\u003e()` on the `IServiceCollection` as shown in the description\r\n2. Call `AddApplicationInsightsTelemetry()` on the `IServiceCollection` as shown in the description\n\n### Expected behavior\n\nConfigureApplicationInsightsServiceOptions.Configure should be invoked when the `WebApplicationBuilder` is building\n\n### Actual behavior\n\nDeadlock. See running tasks here:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/64040537/b67af042-7d33-4933-93fa-80bf4a19e5e3)\r\n\r\nSomehow it is blocking at https://github.com/dotnet/runtime/blob/7575716bfdcfa82dfd47de1b11f59a4b12dac969/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceLookup/CallSiteRuntimeResolver.cs#L84\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n- .NET 6.0\r\n- Windows\r\n- x64\r\n- Plain ASP.NET Razor Web App\r\n- not sure about other configurations\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejonathan-vogel-siemens\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Options`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-28T08:47:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gmDOC",
                                           "createdAt":  "2023-06-29T23:50:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Moved it to aspnet side as looks it is not a runtime issue. The stack showing hot reload usage. \r\n\r\nCC @reyang as app insights is part of this issue. ",
                                           "updatedAt":  "2023-06-29T23:50:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gmDOG",
                                           "createdAt":  "2023-06-30T07:58:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathan-vogel-siemens",
                                           "body":  "Just checked and it is the same even without any debugger attached\r\n",
                                           "updatedAt":  "2023-06-30T07:58:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gmDOK",
                                           "createdAt":  "2023-07-03T13:02:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@tarekgh I’m not sure this is an asp.net problem. I’m guessing there’s some sync over async happening resulting in the deadlock. It’s easy to make this sorta thing happen if you try to use async with DI",
                                           "updatedAt":  "2023-07-03T13:02:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gmDON",
                                           "createdAt":  "2023-07-03T16:23:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@davidfowl this doesn\u0027t seem to be the runtime problem either. I am just seeing the hot reload in the deadlock stack so I thought would be good if aspnet can do the initial investigation. Also, this involves app insights which might be contributing to the issue. This is why I tagged @reyang just in case I have some thoughts. ",
                                           "updatedAt":  "2023-07-03T16:23:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gmDOT",
                                           "createdAt":  "2023-07-03T18:04:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e @davidfowl this doesn\u0027t seem to be the runtime problem either. \r\n\r\nPretty sure it\u0027s not a problem at all, more of a misuse/misunderstanding of DI.\r\n\r\n\u003e  I am just seeing the hot reload in the deadlock stack so I thought would be good if aspnet can do the initial investigation.\r\n\r\nThat image isn\u0027t showing a stack, it\u0027s the task window in visual studio. \r\n\r\n@jonathan-vogel-siemens Can you show the parallel stacks window?",
                                           "updatedAt":  "2023-07-03T18:04:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gmDOX",
                                           "createdAt":  "2023-07-04T06:28:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathan-vogel-siemens",
                                           "body":  "@davidfowl see below.\r\n\r\nThing is, we are using the same approach to configure `MicrosoftIdentityOptions`, i.e. consuming `SecretClient` to fetch the app registration\u0027s client secret, which works seamlessly. Sample code:\r\n\r\n```csharp\r\npublic class ConfigureMicrosoftIdentityOptions : IConfigureNamedOptions\u003cMicrosoftIdentityOptions\u003e\r\n{\r\n    public ConfigureMicrosoftIdentityOptions(\r\n        SecretClient secretClient,\r\n        CloudHubConfiguration config)\r\n    {\r\n        SecretClient = secretClient;\r\n        Config = config;\r\n    }\r\n\r\n    public SecretClient SecretClient { get; }\r\n    public CloudHubConfiguration Config { get; }\r\n\r\n    public void Configure(MicrosoftIdentityOptions options)\r\n    {\r\n        KeyVaultSecret secret = SecretClient.GetSecret(Config.ApplicationClientId);\r\n        options.Instance = Config.AzureADInstance;\r\n        options.TenantId = Config.TenantId;\r\n        options.ClientId = Config.ApplicationClientId;\r\n        options.ClientSecret = secret.Value;\r\n\r\n        options.ResponseType = \"id_token\";\r\n    }\r\n\r\n    public void Configure(string name, MicrosoftIdentityOptions options) =\u003e Configure(options);\r\n}\r\n```\r\n\r\n![ParallelStacks_49099](https://github.com/dotnet/aspnetcore/assets/64040537/0c2fb214-1f5d-415d-b4f6-341d2c60e7ad)",
                                           "updatedAt":  "2023-07-04T06:28:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gmDOc",
                                           "createdAt":  "2023-07-04T16:01:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Options are resolved on first use not on startup. @tarekgh this is a dependency injection issue, I’m going to move it back to runtime.\r\n\r\n@jonathan-vogel-siemens can you also show parallel tasks (switch threads to tasks in the parallel stacks window)",
                                           "updatedAt":  "2023-07-04T16:01:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gmDPE",
                                           "createdAt":  "2023-07-04T17:59:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen adding ApplicationInsights to an ASP.NET core web app\u0027s `IServiceCollection` via `AddApplicationInsightsTelemetry()` and adding a call to `ConfigureOptions\u003cConfigureApplicationInsightsServiceOptions\u003e()` to configure `ApplicationInsightsServiceOptions`, we are experiencing a deadlock.\r\n\r\n**Sample code**\r\n\r\nProgram.cs:\r\n```csharp\r\nservices.ConfigureOptions\u003cConfigureApplicationInsightsServiceOptions\u003e();\r\nservices.AddApplicationInsightsTelemetry();\r\n```\r\n\r\nConfigureApplicationInsightsServiceOptions.cs:\r\n```csharp\r\npublic class ConfigureApplicationInsightsServiceOptions : IConfigureOptions\u003cApplicationInsightsServiceOptions\u003e\r\n    {\r\n        public ConfigureApplicationInsightsServiceOptions(\r\n            SecretClient secretClient)\r\n        {\r\n            SecretClient = secretClient;\r\n        }\r\n\r\n        public SecretClient SecretClient { get; }\r\n\r\n        public void Configure(ApplicationInsightsServiceOptions options)\r\n        {\r\n            KeyVaultSecret secret = SecretClient.GetSecret(\"appinsights\");\r\n            options.ConnectionString = secret.Value;\r\n        }\r\n    }\r\n```\r\n\r\n### Reproduction Steps\r\n\r\n1. Call `ConfigureOptions\u003cConfigureApplicationInsightsServiceOptions\u003e()` on the `IServiceCollection` as shown in the description\r\n2. Call `AddApplicationInsightsTelemetry()` on the `IServiceCollection` as shown in the description\r\n\r\n### Expected behavior\r\n\r\nConfigureApplicationInsightsServiceOptions.Configure should be invoked when the `WebApplicationBuilder` is building\r\n\r\n### Actual behavior\r\n\r\nDeadlock. See running tasks here:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/64040537/b67af042-7d33-4933-93fa-80bf4a19e5e3)\r\n\r\nSomehow it is blocking at https://github.com/dotnet/runtime/blob/7575716bfdcfa82dfd47de1b11f59a4b12dac969/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceLookup/CallSiteRuntimeResolver.cs#L84\r\n\r\n### Regression?\r\n\r\nSeems like it is a regression. A similar method (yielding the same deadlock) is documented here, from 2021: https://www.uveta.io/categories/blog/unclutter-startup-cs/#Application-Insights\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n- .NET 6.0\r\n- Windows\r\n- x64\r\n- Plain ASP.NET Razor Web App\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejonathan-vogel-siemens\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Options`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-04T17:59:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gmDXK",
                                           "createdAt":  "2023-07-04T17:59:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@davidfowl I moved it back to the runtime repo. ",
                                           "updatedAt":  "2023-07-04T17:59:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gmDav",
                                           "createdAt":  "2023-07-04T18:00:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen adding ApplicationInsights to an ASP.NET core web app\u0027s `IServiceCollection` via `AddApplicationInsightsTelemetry()` and adding a call to `ConfigureOptions\u003cConfigureApplicationInsightsServiceOptions\u003e()` to configure `ApplicationInsightsServiceOptions`, we are experiencing a deadlock.\r\n\r\n**Sample code**\r\n\r\nProgram.cs:\r\n```csharp\r\nservices.ConfigureOptions\u003cConfigureApplicationInsightsServiceOptions\u003e();\r\nservices.AddApplicationInsightsTelemetry();\r\n```\r\n\r\nConfigureApplicationInsightsServiceOptions.cs:\r\n```csharp\r\npublic class ConfigureApplicationInsightsServiceOptions : IConfigureOptions\u003cApplicationInsightsServiceOptions\u003e\r\n    {\r\n        public ConfigureApplicationInsightsServiceOptions(\r\n            SecretClient secretClient)\r\n        {\r\n            SecretClient = secretClient;\r\n        }\r\n\r\n        public SecretClient SecretClient { get; }\r\n\r\n        public void Configure(ApplicationInsightsServiceOptions options)\r\n        {\r\n            KeyVaultSecret secret = SecretClient.GetSecret(\"appinsights\");\r\n            options.ConnectionString = secret.Value;\r\n        }\r\n    }\r\n```\r\n\r\n### Reproduction Steps\r\n\r\n1. Call `ConfigureOptions\u003cConfigureApplicationInsightsServiceOptions\u003e()` on the `IServiceCollection` as shown in the description\r\n2. Call `AddApplicationInsightsTelemetry()` on the `IServiceCollection` as shown in the description\r\n\r\n### Expected behavior\r\n\r\nConfigureApplicationInsightsServiceOptions.Configure should be invoked when the `WebApplicationBuilder` is building\r\n\r\n### Actual behavior\r\n\r\nDeadlock. See running tasks here:\r\n\r\n![image](https://github.com/dotnet/runtime/assets/64040537/b67af042-7d33-4933-93fa-80bf4a19e5e3)\r\n\r\nSomehow it is blocking at https://github.com/dotnet/runtime/blob/7575716bfdcfa82dfd47de1b11f59a4b12dac969/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceLookup/CallSiteRuntimeResolver.cs#L84\r\n\r\n### Regression?\r\n\r\nSeems like it is a regression. A similar method (yielding the same deadlock) is documented here, from 2021: https://www.uveta.io/categories/blog/unclutter-startup-cs/#Application-Insights\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n- .NET 6.0\r\n- Windows\r\n- x64\r\n- Plain ASP.NET Razor Web App\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejonathan-vogel-siemens\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-04T18:00:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gnWKl",
                                           "createdAt":  "2023-07-05T02:25:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Maybe related https://github.com/dotnet/runtime/issues/36458 (not sure yet), need to see a dump or get a clean repro of the problem. ",
                                           "updatedAt":  "2023-07-05T02:25:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gp9kh",
                                           "createdAt":  "2023-07-05T11:57:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathan-vogel-siemens",
                                           "body":  "@davidfowl see attached.\r\nI also created a minimal example to showcase the problem. Interestingly, it seems to be related to Microsoft.Extensions.Azure. When adding the SecretClient e.g. via AddSingleton(), the deadlock vanishes. See here: https://github.com/jonathan-vogel-siemens/IssueRepro88390\r\n\r\nUse `WANTS_DEADLOCK` to enable/disable provoking the Deadlock.\r\n\r\n\r\n![ParallelTasks_88390](https://github.com/dotnet/runtime/assets/64040537/e26f5e8f-7261-4d9c-8f8c-0b2b0ed98d2f)",
                                           "updatedAt":  "2023-07-05T11:58:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hHBBj",
                                           "createdAt":  "2023-07-10T15:47:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "@jonathan-vogel-siemens\r\n\r\n\u003e Interestingly, it seems to be related to Microsoft.Extensions.Azure.\r\n\r\nSo there isn\u0027t a repro for the default host?\r\n\r\nThe Azure code is at\r\nhttps://github.com/Azure/azure-sdk-for-net/blob/8f4b156254d9ac26b8de03cf120b5be49e370f0c/sdk/keyvault/Azure.Security.KeyVault.Secrets/src/SecretClientBuilderExtensions.cs\r\n\r\nhttps://github.com/Azure/azure-sdk-for-net/blob/8f4b156254d9ac26b8de03cf120b5be49e370f0c/sdk/extensions/Microsoft.Extensions.Azure/src/AzureClientFactoryBuilder.cs\r\n\r\n\r\n",
                                           "updatedAt":  "2023-07-10T15:47:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hHqTD",
                                           "createdAt":  "2023-07-10T17:23:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathan-vogel-siemens",
                                           "body":  "@steveharter\r\n\r\n\u003e So there isn\u0027t a repro for the default host?\r\n\r\nSorry, i don\u0027t get what you mean, could you please elaborate? The repository shows precisely how to repro, in my opinion.",
                                           "updatedAt":  "2023-07-10T17:23:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hr1Nj",
                                           "createdAt":  "2023-07-17T21:04:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e Sorry, i don\u0027t get what you mean, could you please elaborate? The repository shows precisely how to repro, in my opinion.\r\n\r\nThe repro shown in the description uses ASP.NET types.",
                                           "updatedAt":  "2023-07-17T21:04:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hu0YP",
                                           "createdAt":  "2023-07-18T07:33:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathan-vogel-siemens",
                                           "body":  "Okay, are you suggesting the behavior could be different when using `Host.CreateDefaultBuilder`?",
                                           "updatedAt":  "2023-07-18T07:33:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jFU6e",
                                           "createdAt":  "2023-08-02T14:42:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e Okay, are you suggesting the behavior could be different when using Host.CreateDefaultBuilder?\r\n\r\nTrying to determine if this issue lives in the runtime, ASP.NET or Azure repos.",
                                           "updatedAt":  "2023-08-02T14:42:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jKvHW",
                                           "createdAt":  "2023-08-03T10:46:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathan-vogel-siemens",
                                           "body":  "Hi @steveharter, we cannot apply this issue to the generic host as it depends on AspNet packages like `Microsoft.ApplicationInsights.AspNetCore`.\r\n\r\nI guess somehow there is a circular dependency when configuring `Microsoft.ApplicationInsights.AspNetCore.Extensions.ApplicationInsightsServiceOptions` and consuming certain other services in the process. As you can see in the repro, the deadlock only happens when using Azure Client Factory. My assumption is that the factory is trying to log when creating Azure services and therefore needs to consume `ILogger`, which in turn is dependent on the configuration of `ApplicationInsightsServiceOptions`. If that behavior is by design, I was not able to find that documented anywhere.",
                                           "updatedAt":  "2023-08-03T10:46:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jyqRT",
                                           "createdAt":  "2023-08-11T05:21:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "\u003e Seems like it is a regression. A similar method (yielding the same deadlock) is documented here, from 2021\r\n\r\nNot seeing any indication this is a regression.  This repro is on net6.0, that blog is on 6.0 as well.  I think we\u0027re just observing a problem when combining components.\r\n\r\n\u003e When adding the SecretClient e.g. via AddSingleton(), the deadlock vanishes. \r\n\r\nThat\u0027s interesting.  Definitely seems like it could be some sort of cycle.  CC @JoshLove-msft \r\n\r\nI ran the repro under the debugger and see this: https://gist.githubusercontent.com/ericstj/fbdae90f000634801a9f62251bd49972/raw/465d08a5f5d87e77ec0d563188201f10f6a98e26/gistfile1.txt\r\n\r\nThat one giant stack looks to me like a cycle.  @davidfowl what causes this type of problem in DI?  Is this a problem with the services registered?",
                                           "updatedAt":  "2023-08-11T05:21:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j1Oj-",
                                           "createdAt":  "2023-08-11T14:36:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to v9; does not appear to be a v8 regression.",
                                           "updatedAt":  "2023-08-11T14:36:49Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "Deadlock when configuring ApplicationInsightsServiceOptions",
        "labels":  [
                       "area-Extensions-DependencyInjection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90158",
        "createdAt":  "2023-08-08T12:57:21Z",
        "number":  90158,
        "author":  "sake402",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5tOVg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-07-25T21:33:50Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-26T10:40:45Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nGiven interfaces\r\n```C#\r\npublic interface IDataListFilterBuilder\u003cT\u003e\r\n{\r\n}\r\n\r\n public interface ICommunitySchoolDataModel \r\n {\r\n\r\n }\r\n```\r\n\r\nImplemented as\r\n\r\n```C#\r\npublic class CommunitySchoolDataFilterBuilder\u003cT\u003e : IDataListFilterBuilder\u003cT\u003e\r\n\twhere T : class, ICommunitySchoolDataModel\r\n{\r\n}\r\n\r\n\r\nclass I1:ICommunitySchoolDataModel\r\n{\r\n}\r\n\r\nclass I2\r\n{\r\n}\r\n```\r\n\r\nAnd open generic registration\r\n\r\n```C#\r\nservices.AddScoped(typeof(IDataListFilterBuilder\u003c\u003e), typeof(CommunitySchoolDataFilterBuilder\u003c\u003e));\r\n```\r\n\r\nService resolutions\r\n\r\n```C#\r\nServiceProvider.GetService\u003cIDataListFilterBuilder\u003cI1\u003e\u003e();\r\nServiceProvider.GetService\u003cIDataListFilterBuilder\u003cI2\u003e\u003e();\r\n```\r\n\r\nResolving ``IDataListFilterBuilder\u003cI1\u003e`` is ok as I1 implements ``ICommunitySchoolDataModel``\r\n\r\nBut resolving ``IDataListFilterBuilder\u003cI2\u003e`` should have returnd a null as I2 doesnt implement ``ICommunitySchoolDataModel`` but thows exception\r\n```\r\nSystem.ArgumentException: Invalid generic arguments Arg_ParamName_Name, typeArguments\r\n   at System.RuntimeType.MakeGenericType(Type[] )\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateOpenGeneric(ServiceDescriptor , Type , CallSiteChain , Int32 , Boolean )\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateOpenGeneric(Type , CallSiteChain )\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateCallSite(Type serviceType, CallSiteChain callSiteChain)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.GetCallSite(Type , CallSiteChain )\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.CreateServiceAccessor(Type serviceType)\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2[[System.Type, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Func`2[[Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope, Microsoft.Extensions.DependencyInjection, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetOrAdd(Type , Func`2 )\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type , ServiceProviderEngineScope )\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope.GetService(Type )\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService[IDataListFilterBuilder`1](IServiceProvider )\r\n\r\n```\r\n\r\n### Expected Behavior\r\n\r\nResolving a service that doesnt meet the generic constraint on an open generic registration should return null and not try to create the generic type that doesnt meet the generic constraint.\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoYXkkQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jh36I",
                                           "createdAt":  "2023-08-08T13:06:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "martincostello",
                                           "body":  "This looks like an issue for the dotnet/runtime repo.",
                                           "updatedAt":  "2023-08-08T13:06:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jh3-A",
                                           "createdAt":  "2023-08-08T15:19:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nGiven interfaces\r\n```C#\r\npublic interface IDataListFilterBuilder\u003cT\u003e\r\n{\r\n}\r\n\r\n public interface ICommunitySchoolDataModel \r\n {\r\n\r\n }\r\n```\r\n\r\nImplemented as\r\n\r\n```C#\r\npublic class CommunitySchoolDataFilterBuilder\u003cT\u003e : IDataListFilterBuilder\u003cT\u003e\r\n\twhere T : class, ICommunitySchoolDataModel\r\n{\r\n}\r\n\r\n\r\nclass I1:ICommunitySchoolDataModel\r\n{\r\n}\r\n\r\nclass I2\r\n{\r\n}\r\n```\r\n\r\nAnd open generic registration\r\n\r\n```C#\r\nservices.AddScoped(typeof(IDataListFilterBuilder\u003c\u003e), typeof(CommunitySchoolDataFilterBuilder\u003c\u003e));\r\n```\r\n\r\nService resolutions\r\n\r\n```C#\r\nServiceProvider.GetService\u003cIDataListFilterBuilder\u003cI1\u003e\u003e();\r\nServiceProvider.GetService\u003cIDataListFilterBuilder\u003cI2\u003e\u003e();\r\n```\r\n\r\nResolving ``IDataListFilterBuilder\u003cI1\u003e`` is ok as I1 implements ``ICommunitySchoolDataModel``\r\n\r\nBut resolving ``IDataListFilterBuilder\u003cI2\u003e`` should have returnd a null as I2 doesnt implement ``ICommunitySchoolDataModel`` but thows exception\r\n```\r\nSystem.ArgumentException: Invalid generic arguments Arg_ParamName_Name, typeArguments\r\n   at System.RuntimeType.MakeGenericType(Type[] )\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateOpenGeneric(ServiceDescriptor , Type , CallSiteChain , Int32 , Boolean )\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateOpenGeneric(Type , CallSiteChain )\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateCallSite(Type serviceType, CallSiteChain callSiteChain)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.GetCallSite(Type , CallSiteChain )\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.CreateServiceAccessor(Type serviceType)\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2[[System.Type, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Func`2[[Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope, Microsoft.Extensions.DependencyInjection, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetOrAdd(Type , Func`2 )\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type , ServiceProviderEngineScope )\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope.GetService(Type )\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService[IDataListFilterBuilder`1](IServiceProvider )\r\n\r\n```\r\n\r\n### Expected Behavior\r\n\r\nResolving a service that doesnt meet the generic constraint on an open generic registration should return null and not try to create the generic type that doesnt meet the generic constraint.\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esake402\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-08T15:19:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jiKoZ",
                                           "createdAt":  "2023-08-08T16:06:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "triage: existing issue - investigate for vNext.",
                                           "updatedAt":  "2023-08-08T16:06:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GLA8N",
                                           "createdAt":  "2024-07-25T17:26:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "We need to ensure we have benchmarks for this for any potential perf regression.",
                                           "updatedAt":  "2024-07-25T17:26:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hheSR",
                                           "createdAt":  "2025-03-10T09:17:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "manfred-brands",
                                           "body":  "The `CallSiteFactory.TryCreateOpenGeneric` explicitly passes `throwOnConstraintViolation: true`.\nWouldn\u0027t changing that solve the issue?",
                                           "updatedAt":  "2025-03-10T09:17:56Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Microsoft.Extensions.DependencyInjection ServiceProvider doesn\u0027t validate generic constraint.",
        "labels":  [
                       "bug",
                       "area-Extensions-DependencyInjection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91163",
        "createdAt":  "2023-08-26T21:37:35Z",
        "number":  91163,
        "author":  "dansiegel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCzJSeA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GalaxiaGuy",
                                            "createdAt":  "2023-08-27T16:00:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "berhir",
                                            "createdAt":  "2023-08-28T06:53:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Divi-0",
                                            "createdAt":  "2023-09-18T18:40:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nickrandolph",
                                            "createdAt":  "2023-10-09T12:25:48Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2023-10-27T16:30:43Z",
        "body":  "# Description\r\n\r\nCurrently the container provided by Microsoft.Extensions.DependencyInjection provides an immutable container. By design this makes sense for Web Applications where this was originally designed for. However for desktop and mobile apps there needs to be a way to configure the container to support mutability. This is a blocker for Prism which depends on registering core services, adding modules and then being able to dynamically load those modules after the container has been initialized. For instance the way Prism works we initially register the core services like so:\r\n\r\n```cs\r\nc.RegisterSingleton\u003cIModuleManager, ModuleManager\u003e();\r\nc.RegisterSingleton\u003cIModuleCatalog, ModuleCatalog\u003e();\r\nc.RegisterSingleton\u003cIModuleInitializer, ModuleInitializer\u003e();\r\n```\r\n\r\nThen once the initial services are registered as the application is initializing the bootstrapper will provide a callback for the developer to configure the ModuleCatalog like:\r\n\r\n```cs\r\n// Prism Code:\r\n// RegisterRequiredTypes: See above sample\r\nRegisterRequiredTypes(_containerExtension); \r\n\r\n// Developer can register their core services and override Prism default services\r\nRegisterTypes(_containerExtension); \r\n\r\n// Effectively where we would go from IServiceCollection to IServiceProvider\r\n_containerExtension.FinalizeExtension();\r\n\r\n// Resolves either the default Prism implementation or developers implementation\r\n_moduleCatalog = Container.Resolve\u003cIModuleCatalog\u003e();\r\n\r\n// See below\r\nConfigureModuleCatalog(_moduleCatalog);\r\n\r\n// This is where it blows up due to immutability\r\nInitializeModules();\r\n\r\n// Developer Code:\r\nprotected override void ConfigureModuleCatalog(IModuleCatalog catalog)\r\n{\r\n    catalog.AddModule\u003cModuleA\u003e();\r\n}\r\n```\r\n\r\nIn the case of Microsoft.Extensions.DependencyInjection this causes a failure in the InitializeModules step as each module will be first resolved and then have the opportunity to add additional dependencies. We would really like to add support to Prism for Microsoft.Extensions.DependencyInjection however this is one of 2 significant blockers for us.\r\n\r\n- blocks PrismLibrary/Prism#2922",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaklmdg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5lAB2e",
                                           "createdAt":  "2023-08-26T21:37:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n# Description\r\n\r\nCurrently the container provided by Microsoft.Extensions.DependencyInjection provides an immutable container. By design this makes sense for Web Applications where this was originally designed for. However for desktop and mobile apps there needs to be a way to configure the container to support mutability. This is a blocker for Prism which depends on registering core services, adding modules and then being able to dynamically load those modules after the container has been initialized. For instance the way Prism works we initially register the core services like so:\r\n\r\n```cs\r\nc.RegisterSingleton\u003cIModuleManager, ModuleManager\u003e();\r\nc.RegisterSingleton\u003cIModuleCatalog, ModuleCatalog\u003e();\r\nc.RegisterSingleton\u003cIModuleInitializer, ModuleInitializer\u003e();\r\n```\r\n\r\nThen once the initial services are registered as the application is initializing the bootstrapper will provide a callback for the developer to configure the ModuleCatalog like:\r\n\r\n```cs\r\n// Prism Code:\r\n// RegisterRequiredTypes: See above sample\r\nRegisterRequiredTypes(_containerExtension); \r\n\r\n// Developer can register their core services and override Prism default services\r\nRegisterTypes(_containerExtension); \r\n\r\n// Effectively where we would go from IServiceCollection to IServiceProvider\r\n_containerExtension.FinalizeExtension();\r\n\r\n// Resolves either the default Prism implementation or developers implementation\r\n_moduleCatalog = Container.Resolve\u003cIModuleCatalog\u003e();\r\n\r\n// See below\r\nConfigureModuleCatalog(_moduleCatalog);\r\n\r\n// This is where it blows up due to immutability\r\nInitializeModules();\r\n\r\n// Developer Code:\r\nprotected override void ConfigureModuleCatalog(IModuleCatalog catalog)\r\n{\r\n    catalog.AddModule\u003cModuleA\u003e();\r\n}\r\n```\r\n\r\nIn the case of Microsoft.Extensions.DependencyInjection this causes a failure in the InitializeModules step as each module will be first resolved and then have the opportunity to add additional dependencies. We would really like to add support to Prism for Microsoft.Extensions.DependencyInjection however this is one of 2 significant blockers for us.\r\n\r\n- blocks PrismLibrary/Prism#2922\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edansiegel\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-26T21:37:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lA49x",
                                           "createdAt":  "2023-08-27T18:30:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLKiVw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "berhir",
                                                                               "createdAt":  "2023-08-28T06:54:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dansiegel",
                                                                               "createdAt":  "2023-10-27T16:44:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "rogihee",
                                           "body":  "Another good scenario would be Blazor WebAssembly with Lazy Loading. With Lazy Loading you can dynamically load a dll that may not necessarily have services for the DI container but most of the time will. ",
                                           "updatedAt":  "2023-08-27T18:30:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qSWZ2",
                                           "createdAt":  "2023-10-27T16:30:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e Another good scenario would be Blazor WebAssembly with Lazy Loading.\r\n\r\nYes see https://github.com/dotnet/runtime/issues/85907:\r\n\r\n_To keep initial download time down, Blazor WASM allows us to modularize our applications and then have those modules downloaded when the user needs something within them. Unfortunately, there is currently no way for IServiceProvider to do the same. So when an app\u0027s modules are loaded (Blazor or otherwise), none of the injected dependencies they hold can be registered._\r\n\r\nwhich was closed as a duplicate for this issue",
                                           "updatedAt":  "2023-10-27T16:30:42Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Support DI Container mutability",
        "labels":  [
                       "feature-request",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91466",
        "createdAt":  "2023-09-01T15:37:00Z",
        "number":  91466,
        "author":  "luizfbicalho",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAjz6A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xor-el",
                                            "createdAt":  "2023-09-02T11:43:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Cassinotte",
                                            "createdAt":  "2023-09-04T16:57:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "QianMoXi",
                                            "createdAt":  "2023-10-25T08:10:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AdamJachocki",
                                            "createdAt":  "2024-07-03T19:05:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "M3mbrillo",
                                            "createdAt":  "2024-10-23T19:00:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrearossiavanade",
                                            "createdAt":  "2025-03-27T11:12:15Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2024-10-29T18:36:31Z",
        "body":  "### Background and motivation\n\nI have some configurations in my process that I create for each step one service and store it in a EF class\r\n\r\n```C#\r\n\r\n    public class Step\r\n    {\r\n        public int Id { get; set; }\r\n        public string StepName { get; set; }\r\n        public string StepKeyService { get; set; }\r\n\r\n        public IService1 GetService(IServiceProvider provider) {\r\n\r\n            return provider.GetRequiredKeyedService\u003cIService\u003e(StepKeyService);\r\n        }\r\n    }\r\n```\r\n\r\nBut to make the Editor for the steps I need to list all of the Keys that are registered in the ServiceProvider\r\n\r\n\r\nOne second utility would be to Make the Service Type and Key marked as unique\r\n```c#\r\ncol.SetKeyedServiceUnique\u003cIService\u003e()\r\n\r\n```\r\n\r\nthis way if I add two services I would get a validation exeption\r\n\r\n```C#\r\n            col.AddKeyedTransient\u003cIService, ServiceA\u003e(KeyedService.AnyKey);\r\n            col.AddKeyedTransient\u003cIService, ServiceB\u003e(KeyedService.AnyKey);\r\n```\r\n\r\nand the third question is to have a method provider.GetAllServices\u003cT\u003e() that return all services from all keys\r\nthat could be a keyed dictionary if it would help organize\r\n\r\n\r\n\r\n\n\n### API Proposal\n\n```csharp\r\n\r\n\r\npublic static class  ServiceProviderExtensions\r\n{\r\n     // prevent this keyed service to have more than one implementation\r\n     public void SetKeyedServiceUnique\u003cT\u003e(this IServiceCollection collection);\r\n     // get all services from all keys\r\n     public IEnumerable\u003cT\u003e GetAllServices\u003cT\u003e(this IKeyedServiceProvider provider);\r\n     // get all services and all keys\r\n     public IDictionary\u003cobject?,IEnumerable\u003cT\u003e\u003e GetAllServicesDictionary\u003cT\u003e(this IKeyedServiceProvider provider);\r\n     // get all keys\r\n     public IEnumerable\u003cobject?\u003e GetAllKeys\u003cT\u003e(this IKeyedServiceProvider provider);\r\n     \r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n     [ApiController]\r\n    public class StepController : ControllerBase\r\n\r\n    {\r\n        public StepController(IServiceProvider provider)\r\n        {\r\n            Provider = provider;\r\n        }\r\n\r\n        public IServiceProvider Provider { get; }\r\n\r\n        public ActionResult\u003cIEnumerable\u003cobject?\u003e\u003e GetStepKeys()\r\n        {\r\n            return Ok(Provider.GetAllKeys\u003cIService\u003e();\r\n        }\r\n    }   \r\n```\r\n\n\n### Alternative Designs\n\nI\u0027m open to any alternative that could result in this functionalities\n\n### Risks\n\nI can\u0027t imagine risks because there are new methods to implement this.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkbyVFg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5lgOIC",
                                           "createdAt":  "2023-09-01T15:37:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODFsjtg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Cassinotte",
                                                                               "createdAt":  "2023-09-04T16:57:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "Cassinotte",
                                                                               "createdAt":  "2023-09-04T16:57:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nI have some configurations in my process that I create for each step one service and store it in a EF class\r\n\r\n```C#\r\n\r\n    public class Step\r\n    {\r\n        public int Id { get; set; }\r\n        public string StepName { get; set; }\r\n        public string StepKeyService { get; set; }\r\n\r\n        public IService1 GetService(IServiceProvider provider) {\r\n\r\n            return provider.GetRequiredKeyedService\u003cIService\u003e(StepKeyService);\r\n        }\r\n    }\r\n```\r\n\r\nBut to make the Editor for the steps I need to list all of the Keys that are registered in the ServiceProvider\r\n\r\n\r\nOne second utility would be to Make the Service Type and Key marked as unique\r\n```c#\r\ncol.SetKeyedServiceUnique\u003cIService\u003e()\r\n\r\n```\r\n\r\nthis way if I add two services I would get a validation exeption\r\n\r\n```C#\r\n            col.AddKeyedTransient\u003cIService, ServiceA\u003e(KeyedService.AnyKey);\r\n            col.AddKeyedTransient\u003cIService, ServiceB\u003e(KeyedService.AnyKey);\r\n```\r\n\r\nand the third question is to have a method provider.GetAllServices\u003cT\u003e() that return all services from all keys\r\nthat could be a keyed dictionary if it would help organize\r\n\r\n\r\n\r\n\n\n### API Proposal\n\n```csharp\r\n\r\n\r\npublic static class  ServiceProviderExtensions\r\n{\r\n     // prevent this keyed service to have more than one implementation\r\n     public void SetKeyedServiceUnique\u003cT\u003e(this IServiceCollection collection);\r\n     // get all services from all keys\r\n     public IEnumerable\u003cT\u003e GetAllServices\u003cT\u003e(this IKeyedServiceProvider provider);\r\n     // get all services and all keys\r\n     public IDictionary\u003cobject?,IEnumerable\u003cT\u003e\u003e GetAllServicesDictionary\u003cT\u003e(this IKeyedServiceProvider provider);\r\n     // get all keys\r\n     public IEnumerable\u003cobject?\u003e GetAllKeys\u003cT\u003e(this IKeyedServiceProvider provider);\r\n     \r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n     [ApiController]\r\n    public class StepController : ControllerBase\r\n\r\n    {\r\n        public StepController(IServiceProvider provider)\r\n        {\r\n            Provider = provider;\r\n        }\r\n\r\n        public IServiceProvider Provider { get; }\r\n\r\n        public ActionResult\u003cIEnumerable\u003cobject?\u003e\u003e GetStepKeys()\r\n        {\r\n            return Ok(Provider.GetAllKeys\u003cIService\u003e();\r\n        }\r\n    }   \r\n```\r\n\n\n### Alternative Designs\n\nI\u0027m open to any alternative that could result in this functionalities\n\n### Risks\n\nI can\u0027t imagine risks because there are new methods to implement this.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eluizfbicalho\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-01T15:37:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lqHY0",
                                           "createdAt":  "2023-09-04T16:58:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODFskVQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "luizfbicalho",
                                                                               "createdAt":  "2023-09-04T17:01:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Cassinotte",
                                           "body":  "I would also like an alternative to the question",
                                           "updatedAt":  "2023-09-04T16:58:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mgRYw",
                                           "createdAt":  "2023-09-14T16:03:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "@benjaminpetit any thoughts on the keyed-service ask for make the Service Type and Key unique along with validation?",
                                           "updatedAt":  "2023-09-14T16:03:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mgdvF",
                                           "createdAt":  "2023-09-14T16:37:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e But to make the Editor for the steps I need to list all of the Keys that are registered in the ServiceProvider\r\n\r\nFor this scenario, is it possible to enumerate the ServiceCollection instead which can return the ServiceDescriptors?\r\n\r\nAlso since there can be several implementations of IServiceProvider\\IKeyedServiceProvider, that has to be accounted for in any extension methods -- i.e. they need to be implemented in terms of types exposed in the `Microsoft.Extensions.DependencyInjection.Abstractions` assembly, not the types in `Microsoft.Extensions.DependencyInjection` for example. This likely means we\u0027d have to add new interfaces as well to expose the keys.",
                                           "updatedAt":  "2023-09-14T16:37:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mgfTN",
                                           "createdAt":  "2023-09-14T16:42:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luizfbicalho",
                                           "body":  "\u003e \u003e But to make the Editor for the steps I need to list all of the Keys that are registered in the ServiceProvider\r\n\u003e \r\n\u003e For this scenario, is it possible to enumerate the ServiceCollection instead which can return the ServiceDescriptors?\r\n\u003e \r\n\u003e Also since there can be several implementations of IServiceProvider\\IKeyedServiceProvider, that has to be accounted for in any extension methods -- i.e. they need to be implemented in terms of types exposed in the `Microsoft.Extensions.DependencyInjection.Abstractions` assembly, not the types in `Microsoft.Extensions.DependencyInjection` for example. This likely means we\u0027d have to add new interfaces as well to expose the keys.\r\n\r\nHow can i get the service colector from the service provider?",
                                           "updatedAt":  "2023-09-14T16:42:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mhn7r",
                                           "createdAt":  "2023-09-14T20:21:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benjaminpetit",
                                           "body":  "\u003e @benjaminpetit any thoughts on the keyed-service ask for make the Service Type and Key unique along with validation?\r\n\r\nIf we add this, then we should add the same method for non-keyed DI in my opinion.\r\n\r\nI think for this and the listing of all registered key, you could implement your own `IServiceProviderFactory` that will validate that you don\u0027t have two or more services registered with the same key, and build a list of available keys. You can then insert this list as a new service to the `IServiceCollection` before passing it to the \"real\" IServiceProviderFactory` implementation.\r\n\r\nDoes that make sense?",
                                           "updatedAt":  "2023-09-14T20:23:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mmztY",
                                           "createdAt":  "2023-09-15T15:17:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luizfbicalho",
                                           "body":  "\u003e If we add this, then we should add the same method for non-keyed DI in my opinion.\r\n\r\nWould it be useful to add something like this\r\n\r\n`serviceCollection.AddScoped\u003cIBar, Bar\u003e().AsUnique();`\r\n\r\n\r\nOr add some more validation with a func\r\n\r\n`serviceCollection.AddScoped\u003cIBar, Bar\u003e().WithValidation(collection=\u003eVerifySomething(collection));\r\n`\r\nOr even mark some types as required, this could be even used with GetRequiredService to validate.\r\n\r\n\r\n`serviceCollection.Mark\u003cIBar\u003e().AsRequired();`\r\n",
                                           "updatedAt":  "2023-09-15T15:42:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5msNsZ",
                                           "createdAt":  "2023-09-18T07:16:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benjaminpetit",
                                           "body":  "`ServiceProviderOptions.ValidateOnBuild` should already allow you to check that your services are instantiable.\r\n\r\nOtherwise, I think everything you want to do is doable with some kind of decorator around `IServiceProviderFactory`",
                                           "updatedAt":  "2023-09-18T07:16:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mt_e_",
                                           "createdAt":  "2023-09-18T12:43:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luizfbicalho",
                                           "body":  "Can you provide any example like this? How to validate with the factory\r\n\r\nI\u0027m interested in the @steveharter idea of get the service collection from the service provider\r\n\r\n",
                                           "updatedAt":  "2023-09-18T12:43:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mukab",
                                           "createdAt":  "2023-09-18T13:59:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benjaminpetit",
                                           "body":  "Here is what I have in mind: https://gist.github.com/benjaminpetit/ba60099a99f6cb315074c373b06d9d32\r\n\r\nI implemented a custom service provider factory in `CustomServiceProviderFactory`. I tell the `HostBuilder` to use it instead of the default one.\r\n\r\n`AsUnique()` extension change the service type of the descriptor to a type that implement `IServiceMarker`. When the host will build the service provider, it will call `CustomServiceProviderFactory.CreateServiceProvider` that can iterate through all the service descriptors. When it sees a service that implement `IServiceMarker`, it will call the method `Validate`, then \"unwrap\" the descriptor to use the correct service type.\r\n\r\nWhen iterating though the descriptors, you could build a dictionary of keyed services too, for example.\r\n\r\nWith the same logic you could implement anything you wanted; I think.\r\n\r\nEDIT: I think we could do much simpler without this generic descriptor wrapping/unwrapping thing.",
                                           "updatedAt":  "2023-09-18T14:22:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5muwNA",
                                           "createdAt":  "2023-09-18T14:23:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benjaminpetit",
                                           "body":  "Here is an example on how to generate a dictionary of all keyed services: https://gist.github.com/benjaminpetit/468741882f1ad6e4ec8dad761103a87d",
                                           "updatedAt":  "2023-09-18T14:23:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mu419",
                                           "createdAt":  "2023-09-18T14:35:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luizfbicalho",
                                           "body":  "Thanks a lot @benjaminpetit , I\u0027ll try to transform this in a usefull library\r\n\r\nMaybe some of it can go into this future projetc",
                                           "updatedAt":  "2023-09-18T14:36:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5s88q6",
                                           "createdAt":  "2023-11-27T14:15:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEPkyXg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "luizfbicalho",
                                                                               "createdAt":  "2023-11-27T14:22:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "thomaslevesque",
                                                                               "createdAt":  "2023-12-06T16:06:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nuzolx",
                                                                               "createdAt":  "2024-01-08T23:11:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "b-straub",
                                                                               "createdAt":  "2024-01-13T18:00:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Peter-Juhasz",
                                                                               "createdAt":  "2024-02-22T09:28:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xced",
                                                                               "createdAt":  "2024-06-23T22:42:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "utsavsahaa",
                                                                               "createdAt":  "2025-04-24T19:40:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I just hit this hard as well. I needed to be able to get all of the instances for a particular service type, regardless of key (I didn\u0027t actually need the keys), and I thought `GetKeyedServices(KeyedService.AnyKey)` would work, but it doesn\u0027t, as the key matching doesn\u0027t factor AnyKey in for the key being searched.  This is an unfortunate gap.",
                                           "updatedAt":  "2023-11-27T14:15:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5t3SKW",
                                           "createdAt":  "2023-12-06T16:07:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thomaslevesque",
                                           "body":  "I was going to use keyed services for the first time, and also hit this limitation. I can work around it, but this gap should be closed IMO.",
                                           "updatedAt":  "2023-12-06T16:07:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ueBzs",
                                           "createdAt":  "2023-12-13T06:58:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD4gmCg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "michael-hawker",
                                                                               "createdAt":  "2024-10-29T09:13:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davhdavh",
                                           "body":  "IMHO, this is more of a bug. Documentation for `KeyedService.AnyKey` specifically says:\r\n```\r\nRepresents a key that matches any key.\r\n```\r\nSo `GetKeyedServices\u003cT\u003e(KeyedService.AnyKey)` should most definitely return an enumeration of all `T` implementations.\r\nSimilar, `col.AddKeyedTransient\u003cIService, ServiceA\u003e(KeyedService.AnyKey);` should give an error. If you want to have a fallback, `null` should be used.",
                                           "updatedAt":  "2023-12-13T06:58:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DAtUN",
                                           "createdAt":  "2024-06-29T06:17:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "robertmclaws",
                                           "body":  "Hey folks! Just wanted to find out is this was planning on getting fixed at all? There shouldn\u0027t need to be hacks to make this work, since `KeyedService.AnyKey` exists and should be implemented. Thanks!",
                                           "updatedAt":  "2024-06-29T06:17:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DA2NZ",
                                           "createdAt":  "2024-06-29T08:01:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "0xced",
                                           "body":  "There\u0027s a discussion going on at #100105 (which is a duplicate of this issue).",
                                           "updatedAt":  "2024-06-29T08:01:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DCOP_",
                                           "createdAt":  "2024-06-30T01:39:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "luizfbicalho",
                                           "body":  "\u003e There\u0027s a discussion going on at #100105 (which is a duplicate of this issue).\r\n\r\nI don\u0027t think that all of the features here are in the #100105 issue",
                                           "updatedAt":  "2024-06-30T01:39:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Rp0zI",
                                           "createdAt":  "2024-10-29T09:16:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michael-hawker",
                                           "body":  "Yeah, I have a scenario where I need to register services to get pulled specifically for different use cases to load specific types of data, but also need to gather them all (thus the common interface) to initialize them beforehand.\n\n~~I got excited by the new keyed services as it seemed built for this scenario, but then got stuck in the last step after changing my code in trying to get all the services. I was hoping I could just call `GetKeyServices\u003cT\u003e()` to get them all, I didn\u0027t even find the docs on `KeyedService.AnyKey`, but then that seemed great too (as called out above)... but then that also didn\u0027t work. So, I think I\u0027m back to being stuck without hacky workarounds...~~\n\nEdit: Oh, just saw the `KeyedService.AnyKey` was fixed in .NET 9 https://github.com/dotnet/runtime/issues/109016 🎉🎉🎉, hopefully it\u0027ll get backported too. (Just a note for anyone here, you have to ensure to update your NuGet package to the latest .NET 9 version too, not just your TFM.)",
                                           "updatedAt":  "2024-10-29T09:41:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RtlsV",
                                           "createdAt":  "2024-10-29T15:38:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD4l_mQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "michael-hawker",
                                                                               "createdAt":  "2024-10-29T18:34:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@michael-hawker \n\u003e Edit: Oh, just saw the `KeyedService.AnyKey` was fixed in .NET 9 [#109016](https://github.com/dotnet/runtime/issues/109016) 🎉🎉🎉, hopefully it\u0027ll get backported too. (Just a note for anyone here, you have to ensure to update your NuGet package to the latest .NET 9 version too, **not just your TFM**.)\n\nI don\u0027t think you even _need_ to update your TFM. Isn\u0027t this a behavior of the library itself, `Microsoft.Extensions.DependencyInjection`? Upgrading the library to v9 will be enough even if you are still using .NET 8, since the fix doesn\u0027t rely on any `#if` checks against a specific TFM.",
                                           "updatedAt":  "2024-10-29T15:38:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RvJUW",
                                           "createdAt":  "2024-10-29T18:36:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD4m6NA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-10-29T20:31:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "michael-hawker",
                                           "body":  "@julealgon indeed, thanks! It was late at night, so I had bumped the TFM first before realizing it was just a package dependency. 😅 Worked like a charm!",
                                           "updatedAt":  "2024-10-29T18:36:29Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "[API Proposal]: IKeyedServiceProvider Have a method to get all keys for a ServiceType, an option to make the keys services unique and the option to getservices return all keyed services",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94323",
        "createdAt":  "2023-11-02T21:00:02Z",
        "number":  94323,
        "author":  "AntMaster7",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCrt9g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "chrisoverzero",
                                            "createdAt":  "2023-11-03T12:35:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adaris-it",
                                            "createdAt":  "2023-11-10T15:05:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "robertcoltheart",
                                            "createdAt":  "2023-11-29T03:27:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "doominator42",
                                            "createdAt":  "2023-12-17T23:41:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TonyValenti",
                                            "createdAt":  "2024-03-17T17:19:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-06-24T22:34:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mikernet",
                                            "createdAt":  "2024-10-11T18:25:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aromaa",
                                            "createdAt":  "2024-10-11T23:14:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lxymahatma",
                                            "createdAt":  "2025-04-26T07:12:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "artem-dudarev",
                                            "createdAt":  "2025-05-22T11:15:57Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2025-08-01T18:10:19Z",
        "body":  "Feature requests for property injection have been made several times in the past and they were always closed. However, now that we have support for required properties in C# I think it would make perfect sense to support them through the default DI container in dotnet core.\r\n\r\nIf thats definitely not gonna be supported it would be nice to have the default DI container designed such that it could be extended by inheriting from it to add this functionailty in customer projects. The current implementation of the DI container registers itself as the implementation for the IServiceProvider making it impossible to extended the default service provider.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOj4Y8mA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5qyxeP",
                                           "createdAt":  "2023-11-02T23:21:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFeature requests for property injection have been made several times in the past and they were always closed. However, now that we have support for required properties in C# I think it would make perfect sense to support them through the default DI container in dotnet core.\r\n\r\nIf thats definitely not gonna be supported it would be nice to have the default DI container designed such that it could be extended by inheriting from it to add this functionailty in customer projects. The current implementation of the DI container registers itself as the implementation for the IServiceProvider making it impossible to extended the default service provider.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAntMaster7\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-02T23:21:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q4ABB",
                                           "createdAt":  "2023-11-03T20:37:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Can you provide a proposed API?\r\n\r\nI assume by adding protected members to [DefaultServiceProviderFactory](https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.defaultserviceproviderfactory).",
                                           "updatedAt":  "2023-11-03T20:37:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q4AEW",
                                           "createdAt":  "2023-11-03T20:37:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-11-03T20:37:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q43AE",
                                           "createdAt":  "2023-11-04T01:39:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntMaster7",
                                           "body":  "@steveharter My idea would be to have a protected virtual OnRealize method on the ServiceProvider (removing the sealed modifier) that gets called whenever a service is actually \"realized\" but not when its loaded from the cache (scope). This would then allow one to create a decorated service provider like so:\r\n\r\n```C#\r\npublic class DecoratedServiceProvider : ServiceProvider\r\n{\r\n    public DecoratedServiceProvider(ICollection\u003cServiceDescriptor\u003e serviceDescriptors, ServiceProviderOptions options) : base(serviceDescriptors, options)\r\n    {\r\n    }\r\n\r\n    protected override void OnRealize(Type serviceType, object service)\r\n    {\r\n        // Decorate with for example property injection\r\n    }\r\n}\r\n```\r\nA simple implementation of the IServiceProviderFactory\u003cIServiceCollection\u003e can then return this custom service provider instance.\r\n\r\nTo make this work in a local demo I have changed the constructor of the ServiceProvider such that it uses the actual instance type as implementation for the internal IServiceProvider registration:\r\n\r\n```C#\r\n[RequiresDynamicCode(RequiresDynamicCodeMessage)]\r\nprotected internal ServiceProvider(ICollection\u003cServiceDescriptor\u003e serviceDescriptors, ServiceProviderOptions options)\r\n{\r\n    // ...\r\n    CallSiteFactory = new CallSiteFactory(serviceDescriptors);\r\n    // The list of built in services that aren\u0027t part of the list of service descriptors\r\n    // keep this in sync with CallSiteFactory.IsService\r\n    CallSiteFactory.Add(typeof(IServiceProvider), new ServiceProviderCallSite(GetType())); // CHANGE HERE\r\n    CallSiteFactory.Add(typeof(IServiceScopeFactory), new ConstantCallSite(typeof(IServiceScopeFactory), Root));\r\n    CallSiteFactory.Add(typeof(IServiceProviderIsService), new ConstantCallSite(typeof(IServiceProviderIsService), CallSiteFactory));\r\n    // ...\r\n}\r\n``` \r\nI have the modified the internal CreateServiceAccessor method like this:\r\n\r\n```C#\r\nprotected virtual void OnRealize(Type serviceType, object service) { }\r\n\r\n// ....\r\n\r\n[RequiresDynamicCode(RequiresDynamicCodeMessage)]\r\nprivate Func\u003cServiceProviderEngineScope, object?\u003e CreateServiceAccessor(Type serviceType)\r\n{\r\n    ServiceCallSite? callSite = CallSiteFactory.GetCallSite(serviceType, new CallSiteChain());\r\n    if (callSite != null)\r\n    {\r\n        DependencyInjectionEventSource.Log.CallSiteBuilt(this, serviceType, callSite);\r\n        OnCreate(callSite);\r\n\r\n        // Optimize singleton case\r\n        if (callSite.Cache.Location == CallSiteResultCacheLocation.Root)\r\n        {\r\n            object? value = CallSiteRuntimeResolver.Instance.Resolve(callSite, Root);\r\n\r\n            if(value is not null)\r\n            {\r\n                OnRealize(serviceType, value);\r\n            }\r\n\r\n            return scope =\u003e value;\r\n        }\r\n\r\n        return (ServiceProviderEngineScope engineScope) =\u003e\r\n        {\r\n            var previousValue = callSite.Value;\r\n            var service = _engine.RealizeService(callSite)(engineScope);\r\n\r\n            if (service is not null \u0026\u0026 service != callSite.Value)\r\n            {\r\n                OnRealize(serviceType, service);\r\n            }\r\n\r\n            return service;\r\n        };\r\n    }\r\n\r\n    return _ =\u003e null;\r\n}      \r\n```\r\n\r\nThe ReplaceServiceAccessor method would have to be changed accordingly.\r\n\r\nThe only use case I see for this proposed change is to allow users to implement property injection on top of the existing infrastructure with minimal effort. This could be documented and would in a way add indirect support for property injection. However, most people will probably not use this \"extended api\" and this begs the question whether wrapping the RealizeService call into a closure is a performance issue. Although it could probably be made conditional by having an additional constructor thats protected instead of the \"main\" constructor and setting some flag when the class is inherited and only then wrap the RealizeService call into a closure.",
                                           "updatedAt":  "2023-11-04T01:39:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q48la",
                                           "createdAt":  "2023-11-04T02:44:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I don’t think this should be an extensibility point. We either do this feature or we don’t. I’d like to understand if other container authors are headed down this route before we do anything.",
                                           "updatedAt":  "2023-11-04T02:44:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ro8dI",
                                           "createdAt":  "2023-11-10T15:00:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntMaster7",
                                           "body":  "@dotnetjunkie @tillig What do you think about whether dotnet should support property injection or not with required properties? Both of your containers support this and you\u0027re experts on the area of DI containers.",
                                           "updatedAt":  "2023-11-10T15:00:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ro-2d",
                                           "createdAt":  "2023-11-10T15:07:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMVRCw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AntMaster7",
                                                                               "createdAt":  "2023-11-10T15:08:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@z4kn4fein\r\n@dadhi\r\n@ipjohnson \r\n@alexmg \r\n@tillig \r\n@pakrym \r\n@ENikS \r\n@seesharper \r\n@jeremydmiller \r\n@alistairjevans\r\n@halter73 \r\n@steveharter\r\n\r\n",
                                           "updatedAt":  "2023-11-10T15:07:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ro--a",
                                           "createdAt":  "2023-11-10T15:07:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adaris-it",
                                           "body":  "Supporting property injection is already a common use case in Blazor. I don\u0027t see a single reason why this shouldn\u0027t be supported as a general feature of the default DI. ",
                                           "updatedAt":  "2023-11-10T15:07:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rpC7H",
                                           "createdAt":  "2023-11-10T15:19:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMVfYQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AntMaster7",
                                                                               "createdAt":  "2023-11-10T15:47:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dadhi",
                                           "body":  "@davidfowl In the current DryIoc version (v5) it is the opt-in via the configuration Rule.\r\n",
                                           "updatedAt":  "2023-11-10T15:19:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rpF2O",
                                           "createdAt":  "2023-11-10T15:22:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@dadhi required properties? or properties in general?",
                                           "updatedAt":  "2023-11-10T15:22:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rpGHu",
                                           "createdAt":  "2023-11-10T15:23:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1yToQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dotnetjunkie",
                                                                               "createdAt":  "2023-11-10T15:37:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tillig",
                                                                               "createdAt":  "2023-11-10T15:56:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikernet",
                                                                               "createdAt":  "2024-10-11T18:27:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "alistairjevans",
                                           "body":  "As @AntMaster7 has noted, Autofac has supported required properties since .NET7 (I implemented the support, see https://autofac.readthedocs.io/en/latest/register/prop-method-injection.html#required-properties).\r\n\r\nRequired properties are treated as \"another mandatory constructor parameter\" from the perspective of instance creation. Effectively guaranteeing Autofac won\u0027t return the new object without successfully resolving the object.\r\n\r\nI broadly like the feature for .NET DI providers, as to whether the default MSDI container should support required properties...I\u0027d rather keep the conforming container _simple_ and not add more requirements to it; if users want to mandate required properties, third party options exist, i.e. Autofac, DryIoc, and others.",
                                           "updatedAt":  "2023-11-10T15:23:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rpG4-",
                                           "createdAt":  "2023-11-10T15:25:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntMaster7",
                                           "body":  "@alistairjevans I think with keyed dependecies added in .NET 8 the default DI container is no longer just a simple container.",
                                           "updatedAt":  "2023-11-10T15:25:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rpHhL",
                                           "createdAt":  "2023-11-10T15:27:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alistairjevans",
                                           "body":  "@AntMaster7, I agree with that statement, and that has downsides for conforming containers. AnyKey, for example, is a challenge for a variety of reasons due to the behaviour it implies.",
                                           "updatedAt":  "2023-11-10T15:28:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rpH_6",
                                           "createdAt":  "2023-11-10T15:28:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntMaster7",
                                           "body":  "PropertyInjection comes especially in handy when implementing / using application frameworks. They usually have some sort of a service base class like an ApplicationService for example. As a user of the framework, I want to inherit from these base services / components without having to forward all sorts of constructor parameters to the parent.",
                                           "updatedAt":  "2023-11-10T15:28:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rpIZJ",
                                           "createdAt":  "2023-11-10T15:29:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alistairjevans",
                                           "body":  "@AntMaster7, out of curiosity, if you want property injection, why _not_ use one of the third party containers that support it?",
                                           "updatedAt":  "2023-11-10T15:29:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rpLuV",
                                           "createdAt":  "2023-11-10T15:38:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntMaster7",
                                           "body":  "@alistairjevans Right now we use AutoFac. But I of course prefer to have as little dependencies as possible and stick with the basic tools. This also adds the requirement for any user of our framework to also hook up AutoFac in any \"customer project\". And as far as I know performance of the default container is amazing. ABP (popular asp.net core framework) seems to have a similar requirement. They also use AutoFac. I don\u0027t know what other DI features they use. But property injection is one of them. This allows to have clean service implementations like [this](https://github.com/abpframework/eShopOnAbp/blob/main/services/catalog/src/EShopOnAbp.CatalogService.Application/Products/PublicProductAppService.cs). The service only has to care about its own dependencies (the actual repository). The [ApplicationService class](https://github.com/abpframework/abp/blob/7f7bed0fbc1031243f2cfd4c75446c488a313276/framework/src/Volo.Abp.Ddd.Application/Volo/Abp/Application/Services/ApplicationService.cs) has lots of dependencies and it would be horrible to forward all them in every service implementation.\r\n\r\n@hikalkan\r\n\r\n",
                                           "updatedAt":  "2023-11-10T15:41:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rpUTD",
                                           "createdAt":  "2023-11-10T15:56:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dadhi",
                                           "body":  "@davidfowl Required and the rest via the different opt-in rules for the DryIoc",
                                           "updatedAt":  "2023-11-10T15:56:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tfROh",
                                           "createdAt":  "2023-12-01T23:21:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pakrym",
                                           "body":  "In my opinion, adding requirements for conforming containers should be done based on the ASP.NET Core/Extension features they unlock. For example, `IsService` unlocked fast controller activation; if we had named services at the time of `Options` design we would\u0027ve done those differently, etc.\r\n\r\nPure DI features that don\u0027t have cross-cutting framework impact should be left to third-party containers.\r\n\r\n\r\nUnfortunately, this makes MEDI feel limited and outdated because MEDI == conforming container and must have the minimal required features set.\r\n\r\nMEDI, being the minimal container, solves two goals:\r\n1. Ensures the framework doesn\u0027t use features that are not part of the conforming container.\r\n2. Ensures easy migration from MEDI to 3rd party containers.\r\n\r\nIt\u0027s feasible to make MEDI the superset of the conforming container (similar to other 3rd party DI implementations) and add features that only users can access (and do additional testing to ensure that the framework doesn\u0027t rely on them).\r\n\r\nThis makes it harder for established users of MEDI to migrate to 3rd party containers but allows MEDI to feel modern and add pure DI features without expanding conforming container rules.",
                                           "updatedAt":  "2023-12-01T23:21:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xxlxk",
                                           "createdAt":  "2024-01-24T19:59:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODa3vYA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AntMaster7",
                                                                               "createdAt":  "2024-01-24T21:00:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TonyValenti",
                                                                               "createdAt":  "2024-03-17T18:12:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "robertcoltheart",
                                           "body":  "I\u0027d love to see this added. A great use case would be for a required ILogger\u003cT\u003e property, which allows the class to access logging and simplifies unit testing, meaning unit tests don\u0027t have to pass in the null logger in constructors everywhere.",
                                           "updatedAt":  "2024-01-24T19:59:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53XK0C",
                                           "createdAt":  "2024-03-17T18:13:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODa3yhA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AntMaster7",
                                                                               "createdAt":  "2024-03-17T18:34:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "TonyValenti",
                                           "body":  "Just posting here to say I\u0027d love to see this added. I\u0027ve been using this in AutoFac ever since it was added and I can definitely say this is a huge benefit that massively reduces a large amount of boilerplate constructors. ",
                                           "updatedAt":  "2024-03-17T18:13:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-Iyb9",
                                           "createdAt":  "2024-05-16T21:37:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "I do think the property injection is more palatable now with required properties. However, it is unlikely to be implemented in the 9.0 timeframe so moving to future.",
                                           "updatedAt":  "2024-05-16T21:37:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CYnr_",
                                           "createdAt":  "2024-06-24T22:06:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntMaster7",
                                           "body":  "I came up with the idea of doing the property injection manually as a workaround by using the service locator pattern inside the constructor of the class and resolve the \"dependent properties\". In order to do that I need to reference the root service provider in a static variable somewhere. But I\u0027m not sure if thats a really bad idea or if thats fine?",
                                           "updatedAt":  "2024-06-24T22:06:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CYzP-",
                                           "createdAt":  "2024-06-24T22:38:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@robertcoltheart \r\n\u003e I\u0027d love to see this added. A great use case would be for a required ILogger property, which allows the class to access logging and simplifies unit testing, meaning unit tests don\u0027t have to pass in the null logger in constructors everywhere.\r\n\r\nCan you elaborate how this would simplify unit tests? Don\u0027t you still need to provide the same null logger during initialization, but as a property instead of a ctor parameter?",
                                           "updatedAt":  "2024-06-24T22:38:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CYzvV",
                                           "createdAt":  "2024-06-24T22:40:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@TonyValenti \r\n\u003e Just posting here to say I\u0027d love to see this added. I\u0027ve been using this in AutoFac ever since it was added and I can definitely say this is a huge benefit that massively reduces a large amount of boilerplate constructors.\r\n\r\nWould you mind sharing an example of such massive reduction in boilerplate code?",
                                           "updatedAt":  "2024-06-24T22:40:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CY623",
                                           "createdAt":  "2024-06-24T22:59:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnEuhA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AntMaster7",
                                                                               "createdAt":  "2024-06-25T16:54:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "TonyValenti",
                                           "body":  "Yes. In the \"traditional\" method, you create properties, then a constructor that accepts values and assigns them to the properties. If you have inheritance, then you have to duplicate tons of constructor code. \n\nWith required properties in Autofac, it is awesome because I just put \"required\" in front of my properties and never have to deal with duplicating all the boilerplate constructor code. ",
                                           "updatedAt":  "2024-06-24T22:59:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CY9c4",
                                           "createdAt":  "2024-06-24T23:11:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "Ok @TonyValenti so you are talking exclusively about boilerplate code _in an inheritance scenario where the base class requires dependencies_, is that it?\r\n\r\nThat dramatically dimishes the usefulness of this feature IMHO as that\u0027s a very specific use case.\r\n\r\nI also wanna say one should actively try to avoid that scenario in the first place and prefer decorators and composition in general. If you have deep inheritance hierarchies with dependencies that usually signals a problem with the design IMHO.",
                                           "updatedAt":  "2024-06-24T23:11:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CZAce",
                                           "createdAt":  "2024-06-24T23:22:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "robertcoltheart",
                                           "body":  "\u003e @robertcoltheart\r\n\u003e \r\n\u003e \u003e I\u0027d love to see this added. A great use case would be for a required ILogger property, which allows the class to access logging and simplifies unit testing, meaning unit tests don\u0027t have to pass in the null logger in constructors everywhere.\r\n\u003e \r\n\u003e Can you elaborate how this would simplify unit tests? Don\u0027t you still need to provide the same null logger during initialization, but as a property instead of a ctor parameter?\r\n\r\nThis is how I would structure a service that requires logging and also simplifies unit testing. It means that I don\u0027t need to pass in a null logger via the constructor for every unit test.\r\n\r\n```c#\r\npublic class Service\r\n{\r\n    // Defaults to the null logger (for unit tests) but injects a real logger when using ME.DI\r\n    public required ILogger\u003cService\u003e Logger { get; set; } = NullLogger\u003cService\u003e.Instance;\r\n\r\n    public void DoSomething()\r\n    {\r\n        Logger.LogInformation(\"my code\");\r\n    }\r\n}\r\n\r\npublic class Test\r\n{\r\n    [Fact]\r\n    public void TestThatItWorks()\r\n    {\r\n        var service = new Service();\r\n        service.DoSomething();\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2024-06-24T23:22:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CZVsA",
                                           "createdAt":  "2024-06-25T00:27:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnE1Og==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AntMaster7",
                                                                               "createdAt":  "2024-06-25T17:07:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "TonyValenti",
                                           "body":  "To piggy back on the above example from @julealgon -\nImagine if you had a \"ServiceBase\"  class that required only a logger and db context.  Every derived class would need to recapture those and pass them to a base constructor.  Not so with required properties.\n\nFive minutes of using required properties via AutoFac is enough to make just about anyone a supporter of this feature. ",
                                           "updatedAt":  "2024-06-25T00:27:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CegOn",
                                           "createdAt":  "2024-06-25T13:57:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnC7FQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dotnetjunkie",
                                                                               "createdAt":  "2024-06-25T14:00:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "dotnetjunkie",
                                                                               "createdAt":  "2024-06-25T14:00:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@robertcoltheart\r\n\u003e ```cs\r\n\u003e public class Service\r\n\u003e {\r\n\u003e     // Defaults to the null logger (for unit tests) but injects a real logger when using ME.DI\r\n\u003e     public required ILogger\u003cService\u003e Logger { get; set; } = NullLogger\u003cService\u003e.Instance;\r\n\u003e \r\n\u003e     public void DoSomething()\r\n\u003e     {\r\n\u003e         Logger.LogInformation(\"my code\");\r\n\u003e     }\r\n\u003e }\r\n\u003e \r\n\u003e public class Test\r\n\u003e {\r\n\u003e     [Fact]\r\n\u003e     public void TestThatItWorks()\r\n\u003e     {\r\n\u003e         var service = new Service();\r\n\u003e         service.DoSomething();\r\n\u003e     }\r\n\u003e }\r\n\u003e ```\r\n\r\nOh I see... you are defaulting it to the null logger in the implementation, that makes sense.\r\n\r\nNow... personally, I think this is really bad. First, because I absolutely hate seeing \"for unit test\" things in real code. And second, because it shouldn\u0027t be up to the class to define a default for the logger (IMHO).\r\n\r\nThis approach you are using also treats the logger as a \"second class citizen\", \"optional dependency\", which I\u0027m usually very opposed to: to me, logging calls are behavior that should be validated/mocked/etc, not ignored like what you are doing. If the logging behavior is \"secondary\" on your implementation, then it should probably be moved into a decorator implementation where it becomes primary behavior.\r\n\r\nBesides, you are not saving _that_ much code by just not passing the null logger (or a mocked logger) in the `new Service()` call there... it is just a few extra characters.\r\n\r\n--- \r\n\r\n@TonyValenti \r\n\u003e To piggy back on the above example from @julealgon - Imagine if you had a \"ServiceBase\" class that required only a logger and db context. Every derived class would need to recapture those and pass them to a base constructor. Not so with required properties.\r\n\u003e \r\n\u003e Five minutes of using required properties via AutoFac is enough to make just about anyone a supporter of this feature.\r\n\r\nWhy do you have a design where all services inherit from a `ServiceBase` though? That is usually _really_ nasty design IMHO. Perhaps you are using inheritance as a means to share helper code of some sort, or using a base class to implement a template pattern? I\u0027d again suggest reconsidering your design if you rely on this so much: switch to some form of composition (like decorators) and you completely eliminate the issue.",
                                           "updatedAt":  "2024-06-25T13:57:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CgMkF",
                                           "createdAt":  "2024-06-25T17:03:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntMaster7",
                                           "body":  "@julealgon \r\n\r\n\u003e Ok @TonyValenti so you are talking exclusively about boilerplate code _in an inheritance scenario where the base class requires dependencies_, is that it?\r\n\u003e \r\n\u003e That dramatically dimishes the usefulness of this feature IMHO as that\u0027s a very specific use case.\r\n\u003e \r\n\u003e I also wanna say one should actively try to avoid that scenario in the first place and prefer decorators and composition in general. If you have deep inheritance hierarchies with dependencies that usually signals a problem with the design IMHO.\r\n\r\nFor me thats a major reason for property injection as well. Often you have something like a ServiceBase class or something similar thats specific to your application framework (see abp.io for example). We use a common base class for request handlers in our own application framework. This doesn\u0027t mean a big inheritance hierarchy. Each controller in ASP.NET Core has to inherit from ControllerBase. Thats perfectly fine. Anyway, there are some services that almost every service or request handler needs like dto mappers, logger, unit of work, permission service, user service and whatever you can think of. Its a burden if you always have to forward all these dependencies to the base constructor. And this is composition =).\r\n\r\nC# or ASP.NET Core contain a lot of features with limited use. But these features are still important. Keyed services for example. I personally have no use for them but that doesn\u0027t mean they are useless because their use is limited to a special case.\r\n\r\nAnother aspect is that it would simply be incorrect if MEDI ignores required properties because required means the instance can be sure that these properties are not null. But if MEDI ignores required properties we basically have an instance in an invalid state. But thats more of an academic reasoning.",
                                           "updatedAt":  "2024-06-25T17:10:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CgmMV",
                                           "createdAt":  "2024-06-25T17:37:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@AntMaster7 \r\n\u003e @julealgon\r\n\u003e \r\n\u003e \u003e Ok @TonyValenti so you are talking exclusively about boilerplate code _in an inheritance scenario where the base class requires dependencies_, is that it?\r\n\u003e \u003e That dramatically dimishes the usefulness of this feature IMHO as that\u0027s a very specific use case.\r\n\u003e \u003e I also wanna say one should actively try to avoid that scenario in the first place and prefer decorators and composition in general. If you have deep inheritance hierarchies with dependencies that usually signals a problem with the design IMHO.\r\n\u003e \r\n\u003e For me thats a major reason for property injection as well. Often you have something like a ServiceBase class or something similar thats specific to your application framework (see abp.io for example). We use a common base class for request handlers in our own application framework. This doesn\u0027t mean a big inheritance hierarchy. Each controller in ASP.NET Core has to inherit from ControllerBase. Thats perfectly fine. Anyway, there are some services that almost every service or request handler needs like dto mappers, logger, unit of work, permission service, user service and whatever you can think of. Its a burden if you always have to forward all these dependencies to the base constructor. And this is composition =).\r\n\r\nWell AspNetCore has controllers, but most of the capabilities that require special services and hooks rely on external pipelines with the filters mechanism, so not everything is built into the base. If you rely on so many different services in your base class, it doesn\u0027t really matter whether or not it is a \"deep\" inheritance chain, it\u0027s still bad IMHO. I\u0027d suggest reconsidering your design to avoid this strong of a dependency in a base class doing all the work, but alas.\r\n\r\n\u003e C# or ASP.NET Core contain a lot of features with limited use. But these features are still important. Keyed services for example. I personally have no use for them but that doesn\u0027t mean they are useless because their use is limited to a special case.\r\n\r\nKeyed services have much broader applicability, and they don\u0027t push you into bad practices like \"property injection\" does. While `required` properties do alleviate the \"bad practice\" aspect of property injection, I still don\u0027t think it is worth pursuing just for corner cases related to (IMHO poorly-designed) base classes.\r\n\r\n\u003e Another aspect is that it would simply be incorrect if MEDI ignores required properties because required means the instance can be sure that these properties are not null. But if MEDI ignores required properties we basically have an instance in an invalid state. But thats more of an academic reasoning.\r\n\r\nI\u0027d say MEDI should just throw something like `InvalidOperationException` if a `required` property is detected in an injected service. As you well put, if it just ignores it, it can lead to an invalid object; invariants are broken and consuming code can start to misbehave because of uninitialized members.",
                                           "updatedAt":  "2024-06-25T17:37:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cg5tS",
                                           "createdAt":  "2024-06-25T18:15:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntMaster7",
                                           "body":  "@julealgon I wouldn\u0027t call the dependence on multiple dependencies bad in general. There are various approaches to build applications. We took the approach that best serves our need. You might have different needs and requirements. Many of the IoC containers out there support property injection out of the box.\r\n\r\nLet me give you a concrete example and let me know how you would solve this. I\u0027m always open to learn better ways to do something:\r\n\r\nWe use the mediator pattern after we realised that the service approach get messy real quick. That is, we have a handler for each business case. The goal is to have as little boilerplate code as possible because we need to create many of these handlers. A handler then might look like the following:\r\n\r\n```csharp\r\npublic class UpdateContactHandler : RequestHandlerBase\u003cCreateUpdateContact, ContactDto\u003e\r\n{\r\n    public override async Task\u003cContactDto\u003e Handle(CreateUpdateContact request, CancellationToken cancellationToken)\r\n    {\r\n        // common dependencies: permission service, repository, mapper\r\n\r\n        ArgumentNullException.ThrowIfNull(request.Contact.Id);\r\n\r\n        Contact contact = Repo.GetById\u003cContact\u003e(request.Contact.Id.Value);\r\n\r\n        PermissionService.RequirePermission(contact, DomainOperation.Update);\r\n\r\n        // ... property mapping\r\n\r\n        await Repo.CommitAsync(false);\r\n\r\n        return await DtoMapper.ToDynamicDto\u003cContactDto\u003e(contact, ContactDto.FieldSet);\r\n    }\r\n}\r\n```\r\n\r\nIts a simplification of things. But the actual handlers are pretty much like this. In this simple example it would be possible to put the permission check into a middleware. But there are more complex cases that would require the duplication of a lot of business logic in the middleware and thats not something we want. We decided that it\u0027s the handlers responsibility to only execute requests its allowed to.",
                                           "updatedAt":  "2024-06-25T18:15:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ChM4E",
                                           "createdAt":  "2024-06-25T18:54:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@AntMaster7 \r\n\u003e @julealgon I wouldn\u0027t call the dependence on multiple dependencies bad in general. There are various approaches to build applications. We took the approach that best serves our need. You might have different needs and requirements.\r\n\r\nFair enough, this is fairly subjective. I will say that relying on a base class with dependencies as a central mechanism is not something I personally like, I\u0027ll put it that way. I try to reduce the need for base classes in my applications to the bare minimum, particularly when they need injected services.\r\n\r\n\u003e Many of the IoC containers out there support property injection out of the box.\r\n\r\nThis is true, and unfortunate in my opinion. If I had to guess why this ended up being the case, I\u0027d assume it is because of older frameworks such as AspNet WebForms which had _no_ way to perform constructor-level injection as no abstraction was exposed to intercept the object construction step, so containers at the time were basically forced to support property injection workarounds to be able to inject services after pages/controls were created.\r\n\r\nThis was also the case with WCF classes I\u0027m pretty sure and other similarly old frameworks.\r\n\r\nI\u0027d hope if the ecosystem was like it is today, where mostly everything is created in a DI-friendly manner, that most if not all containers did not have any need to support property injection.\r\n\r\n\u003e Let me give you a concrete example and let me know how you would solve this. I\u0027m always open to learn better ways to do something:\r\n\u003e \r\n\u003e We use the mediator pattern after we realised that the service approach get messy real quick. That is, we have a handler for each business case. The goal is to have as little boilerplate code as possible because we need to create many of these handlers. A handler then might look like the following:\r\n\u003e \r\n\u003e ```cs\r\n\u003e public class UpdateContactHandler : RequestHandlerBase\u003cCreateUpdateContact, ContactDto\u003e\r\n\u003e {\r\n\u003e     public override async Task\u003cContactDto\u003e Handle(CreateUpdateContact request, CancellationToken cancellationToken)\r\n\u003e     {\r\n\u003e         // common dependencies: permission service, repository, mapper\r\n\u003e \r\n\u003e         ArgumentNullException.ThrowIfNull(request.Contact.Id);\r\n\u003e \r\n\u003e         Contact contact = Repo.GetById\u003cContact\u003e(request.Contact.Id.Value);\r\n\u003e \r\n\u003e         PermissionService.RequirePermission(contact, DomainOperation.Update);\r\n\u003e \r\n\u003e         // ... property mapping\r\n\u003e \r\n\u003e         await Repo.CommitAsync(false);\r\n\u003e \r\n\u003e         return await DtoMapper.ToDynamicDto\u003cContactDto\u003e(contact, ContactDto.FieldSet);\r\n\u003e     }\r\n\u003e }\r\n\u003e ```\r\n\u003e \r\n\u003e Its a simplification of things. But the actual handlers are pretty much like this. In this simple example it would be possible to put the permission check into a middleware. But there are more complex cases that would require the duplication of a lot of business logic in the middleware and thats not something we want. We decided that it\u0027s the handlers responsibility to only execute requests its allowed to.\r\n\r\nSo immediately when looking at the code, I don\u0027t see a particular reason why `Repo` and `DtoMapper` are base class members instead of just being injected abstractions. That\u0027s the type of \"code sharing\" that I really dislike when used with inheritance that can be _easily_ refactored into composition. It also appears like you are doing [\"resource-based authorization\"](https://learn.microsoft.com/en-us/aspnet/core/security/authorization/resourcebased?view=aspnetcore-8.0), which has [a native abstraction you can also use](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authorization.iauthorizationservice?view=aspnetcore-8.0). If this was me, the code would look maybe something like this:\r\n\r\n```cs\r\npublic class UpdateContactHandler : RequestHandler\u003cCreateUpdateContact, ContactDto\u003e\r\n{\r\n    private readonly IRepository\u003cContact\u003e contactRepository;\r\n    private readonly IMapper\u003cContact, ContactDto\u003e contactMapper;\r\n    private readonly IAuthorizationService authorizationService;\r\n\r\n    public UpdateContactHandler(\r\n        IRepository\u003cContact\u003e contactRepository,\r\n        IMapper\u003cContact, ContactDto\u003e contactMapper,\r\n        IAuthorizationService authorizationService)\r\n    {\r\n        this.contactRepository = contactRepository;\r\n        this.contactMapper = contactMapper;\r\n        this.authorizationService = authorizationService;\r\n    }\r\n\t\r\n    public override async Task\u003cContactDto\u003e Handle(CreateUpdateContact request, CancellationToken cancellationToken)\r\n    {\r\n        ArgumentNullException.ThrowIfNull(request.Contact.Id);\r\n\r\n        Contact contact = await this.contactRepository.GetByIdAsync(request.Contact.Id.Value);\r\n\r\n        var authorizationResult = await _authorizationService.AuthorizeAsync(request.User, contact, Operations.Update);\r\n\r\n        // Handle authorization result here\r\n\r\n        await this.contactRepository.CommitAsync(false);\r\n\r\n        return await this.contactMapper.ToDynamicDto(contact, ContactDto.FieldSet);\r\n    }\r\n}\r\n```\r\n\r\nNo base classes needed at all.",
                                           "updatedAt":  "2024-06-25T18:54:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ChezK",
                                           "createdAt":  "2024-06-25T19:29:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnIYvQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AntMaster7",
                                                                               "createdAt":  "2024-06-25T19:55:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-06-25T23:07:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tillig",
                                           "body":  "I don\u0027t have a horse in this race, but I thought I\u0027d respond to this:\r\n\r\n\u003e If I had to guess why this ended up being the case, I\u0027d assume it is because of older frameworks such as AspNet WebForms which had no way to perform constructor-level injection\r\n\r\nThere were largely three use cases I recall:\r\n\r\n1. What you mentioned - that some frameworks didn\u0027t support constructor injection.\r\n2. Required vs. optional dependencies - constructor dependencies would be considered required, while properties may or may not be available. (This is less interesting once the concept of \"required properties\" comes about, but from a historical perspective it\u0027s interesting to know.)\r\n3. Circular dependencies - for cases where a dependency gets created and, say, needs to link to its owner, you can break the circle a little by having the owner be injected as a property rather than as a constructor dependency.\r\n\r\nAgain, no horse in this race - I\u0027m not saying these are _good use cases_, just saying these are things that historically needed to be addressed.",
                                           "updatedAt":  "2024-06-25T19:29:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Churs",
                                           "createdAt":  "2024-06-25T20:09:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnIZAA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-06-25T23:07:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AntMaster7",
                                           "body":  "@julealgon Thank you for the detailed answer. The updated example does have the benefit of really only requiring the dependencies that are needed. But this comes with the trade-off of more boilerplate code. And its the latter that I try to avoid. I believe it comes down to personal preference like iOS vs. Android. Thats an endless discussion.",
                                           "updatedAt":  "2024-06-25T20:09:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PhjyY",
                                           "createdAt":  "2024-10-11T18:35:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOETLAPg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "teo-tsirpanis",
                                                                               "createdAt":  "2024-10-11T21:42:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AntMaster7",
                                                                               "createdAt":  "2024-10-12T17:03:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "artem-dudarev",
                                                                               "createdAt":  "2025-05-22T11:14:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "mikernet",
                                           "body":  "The fact of the matter is that constructing objects with required properties without setting the required properties creates objects in an invalid state and that should never be allowed to happen. There is a reason the language errors out if you try to do it, not just warns you with a suppressible warning. It should be effectively as mandatory as a constructor parameter. The language feature is literally there to guarantee that the property gets set as part of the object creation process, and subverting that expectation is about as logical as a library skipping all constructors on arbitrary objects by using `GetUninitializedObject()` and returning that object as a valid object ready to be used.\n\nThat seems entirely unacceptable for a general-use first-party DI container that is supposed to be aligned with the language and runtime it is designed to be used with. I don\u0027t know how this is even debatable.\n\nIf you really don\u0027t want to support required properties then you should throw an exception when attempting to register such a type and indicate that it is not supported,. Bypassing language safety features and returning objects in an invalid state should never be acceptable silent behavior.",
                                           "updatedAt":  "2024-10-11T18:47:53Z"
                                       }
                                   ],
                         "totalCount":  36
                     },
        "title":  "Reconsider property injection with required properties",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94374",
        "createdAt":  "2023-11-04T17:50:44Z",
        "number":  94374,
        "author":  "WeihanLi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-15T22:28:17Z",
        "body":  "Currently, the API return value type is `IEnumerable\u003cobject?\u003e` while the API implementation is returning `IEnumerable\u003cobject\u003e`\r\n\r\nsee \r\n\r\nhttps://github.com/dotnet/runtime/blob/b4823d05c38d7eb44de0db41ba9ba6c6a2df4e46/src/libraries/Microsoft.Extensions.DependencyInjection.Abstractions/src/ServiceProviderServiceExtensions.cs#L88-L95\r\n\r\nso should we update the API return value type to `IEnumerable\u003cobject\u003e` to align with the method return value type?\r\n\r\n\r\n``` diff\r\nnamespace Microsoft.Extensions.DependencyInjection;\r\n\r\npublic static class ServiceProviderServiceExtensions\r\n{\r\n-    public static IEnumerable\u003cobject?\u003e GetServices(this IServiceProvider provider, Type serviceType);\r\n+    public static IEnumerable\u003cobject\u003e GetServices(this IServiceProvider provider, Type serviceType);\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOa5T-4Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5q5r4h",
                                           "createdAt":  "2023-11-04T17:50:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCurrently, the API return value type is `IEnumerable\u003cobject?\u003e` while the API implementation is returning `IEnumerable\u003cobject\u003e`\r\n\r\nsee \r\n\r\nhttps://github.com/dotnet/runtime/blob/b4823d05c38d7eb44de0db41ba9ba6c6a2df4e46/src/libraries/Microsoft.Extensions.DependencyInjection.Abstractions/src/ServiceProviderServiceExtensions.cs#L88-L95\r\n\r\nso should we update the API return value type to `IEnumerable\u003cobject\u003e` to align with the method return value type?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eWeihanLi\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-04T17:50:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q5s4b",
                                           "createdAt":  "2023-11-04T18:09:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I don\u0027t see anything in the implementation\r\nguaranteeing the objects aren\u0027t null. Non-nullability isn\u0027t part of the runtime type identity. It\u0027d be ok to change the cast to `IEnumerable\u003cobject?\u003e`, but I don\u0027t see anything here that would allow us to change the method return type to `IEnumerable\u003cobject\u003e`. ",
                                           "updatedAt":  "2023-11-04T18:10:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q6Nl7",
                                           "createdAt":  "2023-11-05T05:45:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "WeihanLi",
                                           "body":  "Then should `public static System.Collections.Generic.IEnumerable\u003cT\u003e GetServices\u003cT\u003e(this System.IServiceProvider provider)` return `IEnumerable\u003cT?\u003e`?\r\n\r\nhttps://github.com/dotnet/runtime/blob/b4823d05c38d7eb44de0db41ba9ba6c6a2df4e46/src/libraries/Microsoft.Extensions.DependencyInjection.Abstractions/ref/Microsoft.Extensions.DependencyInjection.Abstractions.cs#L233\r\n\r\nGenerally, think we would not register a `null` for the service, but indeed, it could be injected now\r\n\r\n```c#\r\nvar services = new ServiceCollection();\r\nservices.AddSingleton\u003cIService\u003e(sp =\u003e null!);\r\n```\r\n",
                                           "updatedAt":  "2023-11-05T05:55:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q6dFC",
                                           "createdAt":  "2023-11-05T11:21:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@halter73, is there anything preventing a null instance from being registered / returned? If not, should there be?",
                                           "updatedAt":  "2023-11-05T11:21:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q691B",
                                           "createdAt":  "2023-11-05T20:52:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODL4ZxQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2023-11-05T23:34:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "lilinus",
                                                                               "createdAt":  "2023-11-06T12:36:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "halter73",
                                           "body":  "As @WeihanLi pointed out, you can register a factory that returns null. I don\u0027t think it\u0027s very common, but I\u0027m sure people have done it. I\u0027m sure it\u0027s even less common to both register null-returning factory and also call `GetServices(Type)` with the corresponding service type. I\u0027ve never seen it, but it is possible.\r\n\r\nI definitely prefer `IEnumerable\u003cobject\u003e` over `IEnumerable\u003cobject?\u003e` for the `GetServices()` return type, but I understand not wanting to do that if `null` could ever end up there even in the rarest circumstances. I see two options for making this non-nullable without lying.\r\n\r\n1. We do a null check every time we ever call a factory and add `notnull` constraints as appropriate on `TImplementation` and/or `TService` for methods that register factories (or perhaps all the service registrations). This would be how I\u0027d do it if I were starting from scratch, but it would definitely be the most breaking option.\r\n2. Filter out null from the `IEnumerable\u003cobject\u003e` if it is present. This is definitely the weirder behavior, but it\u0027s less unlikely anyone would ever hit this case which makes it less likely to break people.",
                                           "updatedAt":  "2023-11-05T20:52:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rlP7h",
                                           "createdAt":  "2023-11-10T01:20:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMRyXw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "WeihanLi",
                                                                               "createdAt":  "2023-11-10T01:47:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "Added `api-suggestion` label as it is about public API shape, feel free to mark as `api-ready-for-review` and/or update the mileston as needed. ",
                                           "updatedAt":  "2023-11-10T01:20:15Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "IServiceProvider.GetServices return value nullability",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95476",
        "createdAt":  "2023-11-30T19:46:25Z",
        "number":  95476,
        "author":  "MikeAlhayek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODEoJuQ==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "KalleOlaviNiemitalo",
                                            "createdAt":  "2024-03-17T13:35:50Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "JobaDiniz",
                                            "createdAt":  "2025-06-24T13:46:53Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-26T10:46:58Z",
        "body":  ".NET 8 introduced a way to register keyed services which is great addition. However, what if one wants to get a list of registered services along with their key. For example, during run time, I want to present the user a menu of some sort with all available services. The user will select the default service to use for the app. Without a way to expose the registered key, there is no real easy way to identify the keyed service and its key.\r\n\r\nI think the missing piece here is the ability to be able to inject `IReadOnlyDictionary\u003cobject?, object\u003e` which it\u0027ll be resolved by the IoC container. Alternatively, we can have a service with something like this \n\n```\npublic interface IKeyedServiceProvider\n{\n    IReadOnlyDictionary\u003cobject?, T\u003e GetServices\u003cT\u003e();\n}\n```\nAlong with extensions similar to the following \n\n```\nIReadOnlyDictionary\u003cTKey, T\u003e GetServices\u003cTKey, T\u003e()\n```\r\n\r\nOr add an extension on IServiceProvider that allows the above 2 methods. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuFTFTQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5tV1_q",
                                           "createdAt":  "2023-11-30T19:46:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n.net 8 introduced a way to register keyed services which is great. However, what if one wants to get a list of services along with it\u0027s key. For example, during run time, I want to present the user a menu of available services. The user will select the default service to use. Without a way to expose the registration key, there is no real easy way to identify the keyed service.\r\n\r\nI think the missing piece here is the ability to be able to inject `IDictionary\u003cobject, object\u003e` which it\u0027ll be resolved by the IoC container.\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMikeAlhayek\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-30T19:46:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tgj2y",
                                           "createdAt":  "2023-12-02T20:58:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXu6gQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephentoub",
                                                                               "createdAt":  "2023-12-02T21:55:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JobaDiniz",
                                                                               "createdAt":  "2025-06-24T13:47:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I don’t think we’d do it that way but I agree with the sentiment that this feature is missing.",
                                           "updatedAt":  "2023-12-02T20:58:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tgqZ8",
                                           "createdAt":  "2023-12-02T23:23:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MikeAlhayek",
                                           "body":  "@davidfowl thanks for your comment. Other using a dictionary, how would you do it?\n\nI updated my Issue by providing alternative solution using a provider.  ",
                                           "updatedAt":  "2025-07-19T19:55:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5th_FT",
                                           "createdAt":  "2023-12-03T22:46:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtkech",
                                           "body":  "@MikeAlhayek\r\n\r\nYour dictionary may need to take into account that for the same service key and service type multiple services may have been registered, with different implementation types, instances or factories but with the same service type.\r\n",
                                           "updatedAt":  "2023-12-03T22:46:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wKvAs",
                                           "createdAt":  "2024-01-08T21:38:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "The proposal here adds to the existing interface `IKeyedServiceProvider` which we can\u0027t really do. Although it is possible now to add to an existing interface by leveraging DIMs or Default Interface Methods, but since DI supports .NET Framework I don\u0027t think that is available. So we\u0027d need another interface so a provider can opt-in.",
                                           "updatedAt":  "2024-01-08T21:38:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wKvG0",
                                           "createdAt":  "2024-01-08T21:38:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "@benjaminpetit thoughts?",
                                           "updatedAt":  "2024-01-08T21:38:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54KINF",
                                           "createdAt":  "2024-03-22T21:07:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hishamco",
                                           "body":  "Any update on this?",
                                           "updatedAt":  "2024-03-22T21:07:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6y2UMD",
                                           "createdAt":  "2025-06-24T13:50:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JobaDiniz",
                                           "body":  "Is there a workaround to get this working on dotnet 8?",
                                           "updatedAt":  "2025-06-24T13:50:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64VHHq",
                                           "createdAt":  "2025-07-19T19:56:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MikeAlhayek",
                                           "body":  "@davidfowl any progress on this? ",
                                           "updatedAt":  "2025-07-19T19:56:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64VMVN",
                                           "createdAt":  "2025-07-19T20:46:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Re \u003chttps://github.com/dotnet/runtime/issues/95476#issuecomment-1837625683\u003e about multiple registrations for the same service type, perhaps the method could be `IEnumerable\u003cobject?\u003e GetServiceKeys(Type)` (in a new interface).  The result would only depend on what was in the IServiceCollection, not on whether services with those keys have already been resolved from the IKeyedServiceProvider.  Unkeyed services would be represented as `null`.  The caller could then enumerate the result and query for the services that have those keys, likely special-casing `KeyedService.AnyKey` somehow.\n\n```diff\n namespace Microsoft.Extensions.DependencyInjection\n {\n+    public interface IServiceProviderGetServiceKeys\n+    {\n+        IEnumerable\u003cobject?\u003e GetServiceKeys(Type serviceType);\n+    }\n\n     public interface IServiceProviderIsKeyedService : IServiceProviderIsService\n     {\n         bool IsKeyedService(Type serviceType, object? serviceKey);\n     }\n \n+    // Don\u0027t implement IServiceProviderGetServiceKeys.\n     public sealed partial class ServiceProvider : IServiceProvider, IKeyedServiceProvider, IDisposable, IAsyncDisposable\n     {\n     }\n\n     public static partial class ServiceProviderKeyedServiceExtensions\n     {\n+        // Don\u0027t add these methods:\n+        // public static IEnumerable\u003cobject?\u003e GetServiceKeys(this IServiceProvider provider, Type serviceType);\n+        // public static IEnumerable\u003cobject?\u003e GetServiceKeys\u003cT\u003e(this IServiceProvider provider);\n     }\n }\n```\n\nLike IServiceProviderIsKeyedService, IServiceProviderGetServiceKeys would be resolved via IServiceProvider.GetService(typeof(IServiceProviderIsKeyedService)) rather than implemented by ServiceProvider itself.  A `public static IEnumerable\u003cobject?\u003e GetServiceKeys\u003cTService\u003e(this IServiceProvider)` extension method would **not** be added to ServiceProviderServiceExtensions, because if IServiceProviderIsKeyedService is not available from GetService, then the error handling is easier to understand if the GetService call is in the application rather than hidden in such an extension.",
                                           "updatedAt":  "2025-07-21T07:15:13Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Add a way to get IReadOnlyDictionary\u003c,\u003e of keyed services",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97489",
        "createdAt":  "2024-01-25T03:18:43Z",
        "number":  97489,
        "author":  "pengweiqhca",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJYpEg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2024-01-31T12:56:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wvpm",
                                            "createdAt":  "2025-07-31T17:26:24Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-07-26T18:29:27Z",
        "body":  "### Description\n\nInjecting into a keyed service should prioritize keyed service.\n\n### Reproduction Steps\n\n``` C#\r\nvar services = new ServiceCollection();\r\n\r\nservices.AddSingleton(_ =\u003e new A(\"Default\"))\r\n    .AddKeyedSingleton(KeyedService.AnyKey, (_, _) =\u003e new A(\"AnyKey\"))\r\n    .AddKeyedSingleton(\"Keyed\", (_, _) =\u003e new A(\"Keyed\"))\r\n    .AddSingleton\u003cB\u003e().AddKeyedSingleton\u003cB\u003e(KeyedService.AnyKey);\r\n\r\nvar provider = services.BuildServiceProvider();\r\n\r\nprovider.GetRequiredService\u003cB\u003e().A.Write();\r\nprovider.GetRequiredKeyedService\u003cB\u003e(\"Keyed\").A.Write();\r\nprovider.GetRequiredKeyedService\u003cB\u003e(new()).A.Write();\r\n\r\nclass A(object a)\r\n{\r\n    public void Write() =\u003e Console.WriteLine(a);\r\n}\r\n\r\nclass B(A a)\r\n{\r\n    public A A { get; } = a;\r\n}\r\n```\n\n### Expected behavior\n\n```\r\nDefault\r\nKeyed\r\nAnyKey\r\n```\n\n### Actual behavior\n\n```\r\nDefault\r\nDefault\r\nDefault\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOclaRrQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5xzUPC",
                                           "createdAt":  "2024-01-25T03:18:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nInjecting into a keyed service should prioritize keyed service.\n\n### Reproduction Steps\n\n``` C#\r\nvar services = new ServiceCollection();\r\n\r\nservices.AddSingleton(_ =\u003e new A(\"Default\"))\r\n    .AddKeyedSingleton(KeyedService.AnyKey, (_, _) =\u003e new A(\"AnyKey\"))\r\n    .AddKeyedSingleton(\"Keyed\", (_, _) =\u003e new A(\"Keyed\"))\r\n    .AddSingleton\u003cB\u003e().AddKeyedSingleton\u003cB\u003e(KeyedService.AnyKey);\r\n\r\nvar provider = services.BuildServiceProvider();\r\n\r\nprovider.GetRequiredService\u003cB\u003e().A.Write();\r\nprovider.GetRequiredKeyedService\u003cB\u003e(\"Keyed\").A.Write();\r\nprovider.GetRequiredKeyedService\u003cB\u003e(new()).A.Write();\r\n\r\nclass A(object a)\r\n{\r\n    public void Write() =\u003e Console.WriteLine(a);\r\n}\r\n\r\nclass B(A a)\r\n{\r\n    public A A { get; } = a;\r\n}\r\n```\n\n### Expected behavior\n\n```\r\nDefault\r\nKeyed\r\nAnyKey\r\n```\n\n### Actual behavior\n\n```\r\nDefault\r\nDefault\r\nDefault\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epengweiqhca\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-25T03:18:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5x53bw",
                                           "createdAt":  "2024-01-25T21:06:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "@benjaminpetit PTAL",
                                           "updatedAt":  "2024-01-25T21:06:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yTgtm",
                                           "createdAt":  "2024-01-30T19:13:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benjaminpetit",
                                           "body":  "Keys are not \"transitives\", it would be super hard to understand the flow otherwise IMO.\r\n\r\nWhat you could do is something like this when registering `B`: \r\n\r\n```csharp\r\nservices.AddSingleton(_ =\u003e new A(\"Default\"))\r\n    .AddKeyedSingleton(KeyedService.AnyKey, (_, _) =\u003e new A(\"AnyKey\"))\r\n    .AddKeyedSingleton(\"Keyed\", (_, _) =\u003e new A(\"Keyed\"))\r\n    .AddSingleton\u003cB\u003e().AddKeyedSingleton\u003cB\u003e(KeyedService.AnyKey, (sp, key) =\u003e new B(sp.GetRequiredKeyedService\u003cA\u003e(key));\r\n```",
                                           "updatedAt":  "2024-01-30T19:13:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yVpGt",
                                           "createdAt":  "2024-01-31T02:50:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pengweiqhca",
                                           "body":  "\u003e Keys are not \"transitives\", it would be super hard to understand the flow otherwise IMO.\r\n\u003e \r\n\u003e What you could do is something like this when registering `B`:\r\n\u003e \r\n\u003e ```cs\r\n\u003e services.AddSingleton(_ =\u003e new A(\"Default\"))\r\n\u003e     .AddKeyedSingleton(KeyedService.AnyKey, (_, _) =\u003e new A(\"AnyKey\"))\r\n\u003e     .AddKeyedSingleton(\"Keyed\", (_, _) =\u003e new A(\"Keyed\"))\r\n\u003e     .AddSingleton\u003cB\u003e().AddKeyedSingleton\u003cB\u003e(KeyedService.AnyKey, (sp, key) =\u003e new B(sp.GetRequiredKeyedService\u003cA\u003e(key));\r\n\u003e ```\r\n\r\nIf I have C, D, E ... , it is a hell! And It will lose the convenience of DI.",
                                           "updatedAt":  "2024-01-31T02:50:40Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Transitive KeydService",
        "labels":  [
                       "area-Extensions-DependencyInjection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98959",
        "createdAt":  "2024-02-26T23:51:41Z",
        "number":  98959,
        "author":  "ktyl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T18:10:20Z",
        "body":  "### Description\r\n\r\nSelecting the preferred constructor by `ActivatorUtilitiesConstructor` attribute works differently depending on the order of constructors.\r\n\r\n### Reproduction Steps\r\n\r\nLet\u0027s consider the following class:\r\n```\r\npublic class Foo \r\n{\r\n    public Foo(Bar bar)\r\n    {\r\n        this.Bar = bar;\r\n    }\r\n\r\n    public Foo(Baz bar)\r\n    {\r\n        this.Baz = bar;\r\n    } \r\n \r\n    public Bar Bar { get; }\r\n    public Baz Baz { get; }\r\n}\r\n\r\npublic class Bar {}\r\npublic class Baz {}\r\n```\r\n\r\nLet\u0027s assume that I want to instantiate this class using the Dependency Injection container:\r\n```\r\nvar serviceCollection = new ServiceCollection();\r\nserviceCollection.AddTransient\u003cFoo\u003e();\r\nserviceCollection.AddTransient\u003cBar\u003e();\r\nserviceCollection.AddTransient\u003cBaz\u003e();\r\n\r\nvar serviceProvider = serviceCollection.BuildServiceProvider();\r\n\r\nvar foo = serviceProvider.GetService\u003cFoo\u003e();\r\n```\r\n\r\nThis obviously fails because `ActivatorUtilities` class finds two matching constructors.\r\nFortunately there is a `[ActivatorUtilitiesConstructorAttribute](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.DependencyInjection.Abstractions/src/ActivatorUtilitiesConstructorAttribute.cs)` so let\u0027s adjust the class `Foo`:\r\n\r\n```\r\npublic class Foo \r\n{\r\n    [ActivatorUtilitiesConstructor]\r\n    public Foo(Bar bar)\r\n    {\r\n        this.Bar = bar;\r\n    }\r\n\r\n    public Foo(Baz bar)\r\n    {\r\n        this.Baz = bar;\r\n    } \r\n \r\n    public Bar Bar { get; }\r\n    public Baz Baz { get; }\r\n}\r\n\r\n// the same wiring as before\r\nvar foo = serviceProvider.GetService\u003cFoo\u003e();\r\n```\r\nThis still throws the same error.\r\n\r\n### Expected behavior\r\n\r\nIf `[ActivatorUtilitiesConstructor]` is used the constructor should be prioritized above all other constructors if all its dependencies are satisfied, regardless of the order of the constructors in the source code.\r\n\r\n\r\n### Actual behavior\r\n\r\nI have digged in the source code and I think the reason is a mistake in `ActivatorUtilities` class.\r\nThe following snippet of code (https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.DependencyInjection.Abstractions/src/ActivatorUtilities.cs#L95)\r\n```\r\nif (isPreferred)\r\n{\r\n    if (seenPreferred)\r\n    {\r\n        ThrowMultipleCtorsMarkedWithAttributeException();\r\n    }\r\n\r\n    if (length == -1)\r\n    {\r\n        ThrowMarkedCtorDoesNotTakeAllProvidedArguments();\r\n    }\r\n}\r\n\r\nif (isPreferred || bestLength \u003c length)\r\n{\r\n    bestLength = length;\r\n    bestMatcher = matcher;\r\n    multipleBestLengthFound = false;\r\n}\r\nelse if (bestLength == length)\r\n{\r\n    multipleBestLengthFound = true;\r\n}\r\n```\r\n\r\n`isPreferred` is properly set to true based on the existance of the attribute on the first constructor. But when the second constructor (`public Foo(Baz baz)`) is analyzed the condition in line 108 (`if (isPreferred || bestLength \u003c length)`) is `false`, but the else statement in line 114 (`else if (bestLength == length)`) is evaluated to `true` and therefore the constructor is also considered to be the best candidate.\r\n\r\nIf the constructors appeared in an opposite order the condition in line `108` would be true and the code would have worked properly.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nAdd the constructor decorated with `ActivatorUtilitiesConstructorAttribute` after all other constructors in your class.\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnKFGxw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc51J6-u",
                                           "createdAt":  "2024-02-26T23:51:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nSelecting the preferred constructor by `ActivatorUtilitiesConstructor` attribute works differently depending on the order of constructors.\n\n### Reproduction Steps\n\nLet\u0027s consider the following class:\r\n```\r\npublic class Foo \r\n{\r\n    public Foo(Bar bar)\r\n    {\r\n        this.Bar = bar;\r\n    }\r\n\r\n    public Foo(Baz bar)\r\n    {\r\n        this.Baz = bar;\r\n    } \r\n \r\n    public Bar Bar { get; }\r\n    public Baz Baz { get; }\r\n}\r\n\r\npublic class Bar {}\r\npublic class Baz {}\r\n```\r\n\r\nLet\u0027s assume that I want to instantiate this class using the Dependency Injection container:\r\n```\r\nvar serviceCollection = new ServiceCollection();\r\nserviceCollection.AddTransient\u003cFoo\u003e();\r\nserviceCollection.AddTransient\u003cBar\u003e();\r\nserviceCollection.AddTransient\u003cBaz\u003e();\r\n\r\nvar serviceProvider = serviceCollection.BuildServiceProvider();\r\n\r\nvar foo = serviceProvider.GetService\u003cFoo\u003e();\r\n```\r\n\r\nThis obviously fails because `ActivatorUtilities` class finds two matching constructor.\r\nFortunately there is a `[ActivatorUtilitiesConstructorAttribute](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.DependencyInjection.Abstractions/src/ActivatorUtilitiesConstructorAttribute.cs)` so let\u0027s adjust the class `Foo`:\r\n\r\n```\r\npublic class Foo \r\n{\r\n    [ActivatorUtilitiesConstructor]\r\n    public Foo(Bar bar)\r\n    {\r\n        this.Bar = bar;\r\n    }\r\n\r\n    public Foo(Baz bar)\r\n    {\r\n        this.Baz = bar;\r\n    } \r\n \r\n    public Bar Bar { get; }\r\n    public Baz Baz { get; }\r\n}\r\n\r\n// the same wiring as before\r\nvar foo = serviceProvider.GetService\u003cFoo\u003e();\r\n```\r\nThis still throws the same error.\n\n### Expected behavior\n\nIf `[ActivatorUtilitiesConstructor]` is used the constructor should be prioritized above all other constructors if all its dependencies are satisfied, regardless of the order of the constructors in the source code.\r\n\n\n### Actual behavior\n\nI have digged in the source code and I think the reason is a mistake in `ActivatorUtilities` class.\r\nThe following snippet of code (https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.DependencyInjection.Abstractions/src/ActivatorUtilities.cs#L95)\r\n```\r\nif (isPreferred)\r\n{\r\n    if (seenPreferred)\r\n    {\r\n        ThrowMultipleCtorsMarkedWithAttributeException();\r\n    }\r\n\r\n    if (length == -1)\r\n    {\r\n        ThrowMarkedCtorDoesNotTakeAllProvidedArguments();\r\n    }\r\n}\r\n\r\nif (isPreferred || bestLength \u003c length)\r\n{\r\n    bestLength = length;\r\n    bestMatcher = matcher;\r\n    multipleBestLengthFound = false;\r\n}\r\nelse if (bestLength == length)\r\n{\r\n    multipleBestLengthFound = true;\r\n}\r\n```\r\n\r\n`isPreferred` is properly set to true based on the existance of the attribute on the first constructor. But when the second constructor (`public Foo(Baz baz)`) is analyzed the condition in line 108 (`if (isPreferred || bestLength \u003c length)`) is `false`, but the else statement in line 114 (`else if (bestLength == length)`) is evaluated to `true` and therefore the constructor is also considered to be the best candidate.\r\n\r\nIf the constructors appeared in an opposite order the condition in line `108` would be true and the code would have worked properly.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nAdd the constructor decorated with `ActivatorUtilitiesConstructorAttribute` after all other constructors in your class.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ektyl\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-DependencyInjection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-26T23:51:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51iJxZ",
                                           "createdAt":  "2024-02-29T20:17:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Verified repro on v7 - v9P1.",
                                           "updatedAt":  "2024-02-29T20:17:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51iwM5",
                                           "createdAt":  "2024-02-29T22:02:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ktyl",
                                           "body":  "Thanks @steveharter for verifying. Is there a chance that it can get fixed in the future releases of v8 as well? On the other side I can imagine that as this would change the behavior of the runtime it could be considered to be a breaking change in some cases...",
                                           "updatedAt":  "2024-02-29T22:02:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51oZ3m",
                                           "createdAt":  "2024-03-01T16:47:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "I looked at this in greater detail: Calling `GetService()` does not check for `[ActivatorUtilitiesConstructor]`. It goes through code on [CreateConstructorCallSite()](https://github.com/dotnet/runtime/blob/f135699310bccfa83b3b441d2f4f1571fe8df480/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceLookup/CallSiteFactory.cs#L499).\r\n\r\nOnly [ActivatorUtilities.CreateInstance()](https://github.com/dotnet/runtime/blob/f135699310bccfa83b3b441d2f4f1571fe8df480/src/libraries/Microsoft.Extensions.DependencyInjection.Abstractions/src/ActivatorUtilities.cs#L88) checks for `[ActivatorUtilitiesConstructor]`.\r\n\r\nHowever, changing your repro to use\r\n```\r\nvar foo = ActivatorUtilities.CreateInstance\u003cFoo\u003e(serviceProvider);\r\n```\r\ninstead of\r\n```\r\nvar foo = serviceProvider.GetService\u003cFoo\u003e();\r\n```\r\n\r\nstill results in the same issue - the ordering of the constructors affects the check for `[ActivatorUtilitiesConstructor]` which it should not.",
                                           "updatedAt":  "2024-03-01T16:47:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51ocXU",
                                           "createdAt":  "2024-03-01T16:53:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "I assume the semantics of `ActivatorUtilities.CreateInstance()` should be:\r\n- We always pick the constructor with the most matched parameters first.\r\n- If there is more than one such constructor (with the most matched parameters), we select the one with `[ActivatorUtilitiesConstructor]` (if there is one), otherwise we throw.\r\n\r\n@tarekgh does this sound correct? I may push a PR soon that does this.",
                                           "updatedAt":  "2024-03-01T16:53:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51omwD",
                                           "createdAt":  "2024-03-01T17:17:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@steveharter \r\n\r\nMostly correct. The following comment describing it:\r\n\r\nhttps://source.dot.net/#Microsoft.Extensions.DependencyInjection.Abstractions/ActivatorUtilities.cs,75\r\n\r\nThe only difference is, when seeing a constructor with `[ActivatorUtilitiesConstructor]`, this will be selected even if we encountered a constructor with longer parameters. But after encountering `[ActivatorUtilitiesConstructor]` and then getting a constructor with longer parameters, the one with the longer parameters will be selected. I am not sure if the reflection always enumerate constructors according to the parameters count or this is not guaranteed? If reflection guarantee that, then what you wrote is accurate. if not, then it is not. \r\n\r\nCC @eerhardt ",
                                           "updatedAt":  "2024-03-01T17:17:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51pb-G",
                                           "createdAt":  "2024-03-01T19:32:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e I am not sure if the reflection always enumerate constructors according to the parameters count or this is not guaranteed? I\r\n\r\nReflection will return the constructors in the order they are defined.\r\n\r\nHowever it looks like ctor lookup from GetService() [does order the constructors](https://github.com/dotnet/runtime/blob/91008723d1f2c2daa29d69e1bd641ef651e39dc8/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceLookup/CallSiteFactory.cs#L519-L520).\r\n\r\n\u003e But after encountering [ActivatorUtilitiesConstructor] and then getting a constructor with longer parameters, the one with the longer parameters will be selected. \r\n\r\nSo reflection ordering does matter then. That doesn\u0027t seem like a good thing IMO. In either case, I will still put up a PR to address the case where ordering with the same number of parameters doesn\u0027t always respect  `[ActivatorUtilitiesConstructor]`.\r\n\r\nAside, ideally, it seems like `provider.GetService()` should use `ActivatorUtilities.CreateInstance(provider)` when it is time to find and call the constructor for a service. That would also support `[ActivatorUtilitiesConstructor]` for both cases; today they have different semantics.\r\n",
                                           "updatedAt":  "2024-03-01T19:32:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GAncz",
                                           "createdAt":  "2024-07-24T15:29:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZ0f6Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2024-07-24T20:03:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jcracknell",
                                                                               "createdAt":  "2025-07-08T19:00:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to V10; this area is still broke and\\or confusing. The DI GetService() does not use the attribute - see https://github.com/dotnet/runtime/issues/98959#issuecomment-1973525990.",
                                           "updatedAt":  "2024-07-24T15:29:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GCQ4_",
                                           "createdAt":  "2024-07-24T19:21:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "Does anybody know why the semantics between `services.GetService\u003cT\u003e` and `ActivatorUtilities.CreateInstance\u003cT\u003e` are different like this?\r\n\r\nWe have a few places in our application that rely on `ActivatorUtilities` for adding DI support to some custom frameworks and we got bit by the breaking changes in behavior back when .NET 8 version launched, yet the same breaking change didn\u0027t impact normal service resolution.\r\n\r\nThis always felt like a poor design to me. Feels like there shouldn\u0027t be any difference in activating a registered type, vs constructing an unregistered one as long as you didn\u0027t register a construction lambda in the registration. Both operations are semantically identical.",
                                           "updatedAt":  "2024-07-24T19:21:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GCg2-",
                                           "createdAt":  "2024-07-24T20:05:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODrZtZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-24T20:44:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Does anybody know why the semantics between services.GetService\u003cT\u003e and ActivatorUtilities.CreateInstance\u003cT\u003e are different like this?\r\n\r\nThat is what @steveharter tracking to fix. We are keeping this issue open to address that. ",
                                           "updatedAt":  "2024-07-24T20:05:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6coUbH",
                                           "createdAt":  "2025-01-31T17:00:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "This was previously refined in https://github.com/dotnet/runtime/issues/46132\n\nWe should make sure we understand the goals and build upon what happened before and don\u0027t just churn behavior.",
                                           "updatedAt":  "2025-01-31T17:00:46Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "ActivatorUtilities - matching preferred constructor depends on the constructors order",
        "labels":  [
                       "bug",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100105",
        "createdAt":  "2024-03-21T20:37:39Z",
        "number":  100105,
        "author":  "captainsafia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODNE-Jw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2024-03-22T14:25:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xor-el",
                                            "createdAt":  "2024-03-22T21:18:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "0xced",
                                            "createdAt":  "2024-05-29T20:47:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-05-29T20:56:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "odyvangelis",
                                            "createdAt":  "2024-08-26T10:26:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FriedLychees",
                                            "createdAt":  "2024-09-19T04:06:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "godunko-mikhail",
                                            "createdAt":  "2024-09-26T12:06:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "frankbuckley",
                                            "createdAt":  "2024-10-09T13:28:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "michael-hawker",
                                            "createdAt":  "2024-10-29T09:11:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stamminator",
                                            "createdAt":  "2024-10-30T15:52:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EmperorArthur",
                                            "createdAt":  "2024-11-05T16:49:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kgerasimov-st",
                                            "createdAt":  "2025-01-31T00:22:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DKorablin2",
                                            "createdAt":  "2025-03-12T20:16:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VladislavRudakoff",
                                            "createdAt":  "2025-08-28T14:42:08Z"
                                        }
                                    ],
                          "totalCount":  14
                      },
        "updatedAt":  "2025-05-09T17:20:46Z",
        "body":  "### Background and motivation\r\n\r\nI\u0027m using keyed DI to manage multiple versions of a document in a DI-based store. As part of this work, I need to implement a API that provides information to the end-user about allt the version names (aka service keys) that are associated with a give document.\r\n\r\nI can use the `GetKeyedServices\u003cMyType\u003e(KeyedService.AnyKey)` API to retrieve all instances associated with my service type but there is no way to resolve the service key associated with each type as a result of it.\r\n\r\ncc: @benjaminpetit \r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.DependencyInjection;\r\n\r\npublic static class ServiceProviderKeyedServiceExtensions\r\n{\r\n    public static IEnumerable\u003cobject\u003e GetKeyedServiceKeys\u003cT\u003e(this IServiceProvider provider)\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\npublic IEnumerable\u003cstring\u003e GetDocumentName()\r\n{\r\n\treturn services.GetKeyedServiceKeys\u003cDocumentType\u003e();\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nThe existing `GetKeyedServices` extension method can be updated to return a tuple capturing the service key.\r\n\r\n```diff\r\n- public static IEnumerable\u003cT\u003e GetKeyedServices\u003cT\u003e(this IServiceProvider provider, object? serviceKey)\r\n+ public static IEnumerable\u003c(object, T)\u003e GetKeyedServices\u003cT\u003e(this IServiceProvider provider, object? serviceKey)\r\n```\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqugzAw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc54BmUJ",
                                           "createdAt":  "2024-03-21T20:38:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-21T20:38:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54ogRC",
                                           "createdAt":  "2024-03-27T20:14:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Thoughts @benjaminpetit ?",
                                           "updatedAt":  "2024-03-27T20:14:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54vBPs",
                                           "createdAt":  "2024-03-28T16:11:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "benjaminpetit",
                                           "body":  "I talked with @captainsafia offline, and I think it makes sense.\r\n\r\nBut we need to decide what to do with `AnyKey` registration.",
                                           "updatedAt":  "2024-03-28T16:11:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_cuiY",
                                           "createdAt":  "2024-05-29T20:47:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXpwyQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "JobaDiniz",
                                                                               "createdAt":  "2025-06-24T00:32:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "0xced",
                                           "body":  "How about supporting resolving `IReadOnlyDictionary\u003cTKey,TService\u003e` instead? @dotnetjunkie shows how to do it on Stack Overflow: [How to get a dictionary of keyed services in ASP.NET Core 8](https://stackoverflow.com/questions/77559201/how-to-get-a-dictionary-of-keyed-services-in-asp-net-core-8/77559901#77559901).\r\n\r\nIt would be nice if this feature was supported out of the box. It is more intuitive than an extension on `IServiceProvider` in my opinion.",
                                           "updatedAt":  "2024-05-29T20:47:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_cypn",
                                           "createdAt":  "2024-05-29T20:59:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@0xced \r\n\u003e How about supporting resolving `IReadOnlyDictionary\u003cTKey,TService\u003e` instead? @dotnetjunkie shows how to do it on Stack Overflow: [How to get a dictionary of keyed services in ASP.NET Core 8](https://stackoverflow.com/questions/77559201/how-to-get-a-dictionary-of-keyed-services-in-asp-net-core-8/77559901#77559901).\r\n\u003e \r\n\u003e It would be nice if this feature was supported out of the box. It is more intuitive than an extension on `IServiceProvider` in my opinion.\r\n\r\nReturning a dictionary like this is not good because the services are already resolved, which can be incredibly wasteful if all you wanted were just the existing keys.\r\n\r\nUnless you make it so that the instantiation only happens when actually accessing a specific key on the dictionary, which would likely require a custom dictionary implementation behind the scenes. The way Stephen does it, forces the creation of the services when the dictionary is created.",
                                           "updatedAt":  "2024-05-29T20:59:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_dAaM",
                                           "createdAt":  "2024-05-29T21:42:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODjySBQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-05-29T22:28:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "0xced",
                                           "body":  "\u003e Unless you make it so that the instantiation only happens when actually accessing a specific key on the dictionary, which would likely require a custom dictionary implementation behind the scenes.\r\n\r\nMaybe what you just proposed is actually a good idea? I\u0027m not sure, happy to hear other people\u0027s opinion too.",
                                           "updatedAt":  "2024-05-29T21:42:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_dOYi",
                                           "createdAt":  "2024-05-29T22:35:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e \u003e Unless you make it so that the instantiation only happens when actually accessing a specific key on the dictionary, which would likely require a custom dictionary implementation behind the scenes.\r\n\u003e \r\n\u003e Maybe what you just proposed is actually a good idea? I\u0027m not sure, happy to hear other people\u0027s opinion too.\r\n\r\nYeah, I\u0027m not opposed to that myself. Just wanted to make sure to bring that aspect to the discussion, as a lot of flows are _only_ interested in the keys and constructing all the actual concrete services upfront is wasteful in those scenarios.\r\n\r\nTo be clear, I\u0027ve done this myself before the keyed service support was in place by using `Lazy\u003cT, TMetadata\u003e` objects and creating a custom `AddTransientLazy\u003cTService, TImplementation, TMetadata\u003e` extension that would behind the scenes also register the metadata itself with a custom container object so we could also resolve just the metadata later. In our particular case, we need to expose all existing keys for a given set of registrations so the user can pick an option in a dropdown list in the UI.\r\n\r\nWe resolved only the metadata for a given interface by requesting `IEnumerable\u003cTMetadata\u003e` after calling `AddTransientLazy` multiple times by implementing a custom adapter from `IEnumerable\u003cLazy\u003cTService, TMetadata\u003e\u003e` to `IEnumerable\u003cTMetadata\u003e`.",
                                           "updatedAt":  "2024-05-29T22:35:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CQcDt",
                                           "createdAt":  "2024-06-23T22:47:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "0xced",
                                           "body":  "This API proposal looks like a subset of another older API proposal: #91466",
                                           "updatedAt":  "2024-06-24T05:45:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CQv8e",
                                           "createdAt":  "2024-06-24T01:36:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "captainsafia",
                                           "body":  "@terrajobst @benjaminpetit Looks like there\u0027s some interest in this API and a similar API proposal from earlier. What can we do to get moving on API review for this proposal?",
                                           "updatedAt":  "2024-06-24T01:36:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CYem2",
                                           "createdAt":  "2024-06-24T21:39:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "It\u0027s up to the area owners to mark it as api-ready-for-review:\r\n\r\n@buyaa-n @ericstj @jeffhandley @steveharter",
                                           "updatedAt":  "2024-06-24T21:39:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CbxWc",
                                           "createdAt":  "2024-06-25T08:39:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdFhcw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-06-25T13:44:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stamminator",
                                                                               "createdAt":  "2024-10-30T15:56:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cliffchapmanrbx",
                                                                               "createdAt":  "2025-08-05T00:58:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "dotnetjunkie",
                                           "body":  "As @0xced noted above, on Stack Overflow I described a dictionary registration approach. @julealgon rightly pointed out that my implementation isn\u0027t suited as a framework implementation; optimizations are required. It could be useful to make a possible framework implementation lazy loading. But do note that in that case, it will become to get a bit tricky.\r\n\r\nWhen resolving lazy-loading dictionaries, the framework should make special care of making sure that its validation mechanism on detecting Captive Dependencies still works. Consider a singleton component depending on a dictionary which lazily resolves scoped components. That should certainly raise an error in case the user calls `services.BuildServiceProvider(true)`, rather than throwing the exception *only* when the scoped dependency is first resolved by accessing the dictionary.\r\n\r\nFramework designers should also analyze whether lazy loading is conform the expectations of its users. Currently, there are no places in built-in DI container where lazy loading is implicitly applied. An injected `IEnumerable\u003cT\u003e`, for instance, is pre-populated. So why should a dictionary behave differently and would it confuse users or not? That\u0027s not a question I can answer, but surely is something that requires thought.\r\n\r\nAnother point of consideration is whether resolving keyed services as dictionaries by default impacts DI adapters such as Autofac. Conforming third-party DI containers are expected to behave identically (i.e. be a superset) of MS.DI. In other words, people like @tillig, @jeremydmiller, @seesharper, @dadhi, @ipjohnson, @alexmg and others might be able to say more on what impact this has on their adapter and DI Container. I expect that an lazy-loaded implementation with deep framework support has more impact, but that\u0027s one for the adapter maintainers to answer.",
                                           "updatedAt":  "2024-06-27T10:44:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CrO8Y",
                                           "createdAt":  "2024-06-26T18:21:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODrlywg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "falvarez1",
                                                                               "createdAt":  "2024-07-25T18:06:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tillig",
                                           "body":  "From an Autofac standpoint: Autofac does have an `IIndex\u003cK, V\u003e` [relationship](https://autofac.readthedocs.io/en/latest/resolve/relationships.html) that effectively becomes a lazy dictionary. It won\u0027t resolve the keyed instance until you ask for it.\r\n\r\n```c#\r\npublic class A\r\n{\r\n  IIndex\u003cstring, B\u003e _b;\r\n\r\n  public A(IIndex\u003cstring, B\u003e b) { _b = b; }\r\n\r\n  public void M()\r\n  {\r\n    var b = this._b[\"first\"];\r\n    b.DoSomething();\r\n  }\r\n}\r\n```\r\n\r\nThat said, it doesn\u0027t support \"get me all the keys.\" It isn\u0027t pre-loading that list; instead it\u0027s just wrapping `scope.ResolveKeyed(\"key\")` for you, [basically](https://github.com/autofac/Autofac/blob/develop/src/Autofac/Features/Indexed/KeyedServiceIndex.cs).\r\n\r\nWe don\u0027t track the list of all the keys and expose that anywhere. There are challenges with doing something like that, including but not limited to...\r\n\r\n- What do we do with `AnyKey`? The whole `AnyKey` thing really jacked up the implementation/integration of keyed services mapping from MEDI to Autofac, making it far, far more complex than it needed to be. It\u0027s \"layered in\" kinda, but we don\u0027t have an Autofac-specific concept of `AnyKey` so wouldn\u0027t have that really trackable.\r\n- Nested lifetime scope registrations. You can add/change services as you fork lifetime scopes. It\u0027s not like MEDI where all scopes are flat and don\u0027t allow new registrations. We\u0027d need to make sure we walk the tree to get all of the keys.\r\n- Dynamic registrations. You can use modules and registration sources to dynamically provide components into the container. You don\u0027t have to know up front all the types you want. That includes the ability to generate - on the fly - keyed service registrations, and we\u0027d only know about them when we query the stack to ask, \"Do you provide a keyed registration for type X with the key Y?\" How would that work into a list of keys? Would we need to add an \"enumerate literally everything you can provide up front\" sort of mechanism? That could get expensive.\r\n\r\nI get this is a proposal for MEDI, not Autofac, but to @dotnetjunkie \u0027s point, these things do affect the downstream conforming containers. I\u0027ve always been of the opinion that the MEDI container should be the absolute simplest, most minimal viable product possible _because_ there was an intent to allow for conforming containers. As good as some of these features and ideas are, there\u0027s a definite \"tail wags the dog\" effect that happens. I mean, if MS literally just doesn\u0027t care about that conforming container use case anymore, it\u0027d be nice to hear that officially stated. Otherwise, I\u0027d vote to limit updates to MEDI to only the absolute minimum of what\u0027s required to get ASP.NET Core running, and if folks want additional functionality (decorators, interceptors, list all the keyed services, `Lazy\u003cT\u003e` support, whatever else) - that\u0027s literally what the point of having the conforming containers was for.",
                                           "updatedAt":  "2024-06-26T18:21:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CrhM_",
                                           "createdAt":  "2024-06-26T19:07:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@tillig \r\n\u003e From an Autofac standpoint: Autofac does have an `IIndex\u003cK, V\u003e` [relationship](https://autofac.readthedocs.io/en/latest/resolve/relationships.html) that effectively becomes a lazy dictionary. It won\u0027t resolve the keyed instance until you ask for it.\r\n\r\nIs there any reason Autofac opted for a custom type there instead of using one of the existing dictionary abstractions? I always disliked using `IIndex` on our code because of how intrusive that ends up being: we are basically introducing unnecessary lock-in to Autofac.\r\n\r\n\u003e I get this is a proposal for MEDI, not Autofac, but to @dotnetjunkie \u0027s point, these things do affect the downstream conforming containers. I\u0027ve always been of the opinion that the MEDI container should be the absolute simplest, most minimal viable product possible _because_ there was an intent to allow for conforming containers.\r\n\r\nWell, I can see how container suppliers would actively _want_ for MEDI to be as simple as it can get, as that would basically force mildly advanced cases to have to move to your library...\r\n\r\nFrom a consumer perspective, I want to be able to do as much as possible with the standard container without having to introduce extra dependencies on my codebase. I don\u0027t necessarily think MEDI should have an easy-to-use API for every particular scenario, but it should provide the necessary building blocks to create those APIs IMHO if one wants to.\r\n\r\n\u003e ... I\u0027d vote to limit updates to MEDI to only the absolute minimum of what\u0027s required to get ASP.NET Core running...\r\n\r\nNot sure why you\u0027d single out ASP.NET Core there since the container is used in all sorts of applications today due in most part to the new generic hosting model.\r\n\r\nAlso, keep in mind some stuff in the core extension libraries were created due to _lack_ of support from MEDI, namely:\r\n- \"named `IOptions`\" (which could be modeled using keyed services now)\r\n- \"named HttpClient registrations\" (similar to the above)\r\n- targeted dependent registrations `.AddHttpClient\u003cTService, TImplementation\u003e` overloads: still not possible using MEDI features\r\n- target-typed-based registrations such as `ILogger\u003cT\u003e` using `T` to grab the category name for the target injection parent, also not possible using MEDI features\r\n\r\nSo if you want for MEDI to \"have the minimum to support ASP.NET Core\u0027s capabilities\", we\u0027d actually need to _add_ keyed registrations to it (already done), add dependent registrations, and add target-type context access to registrations.\r\n\r\n\u003e ... and if folks want additional functionality (decorators, interceptors, list all the keyed services, `Lazy\u003cT\u003e` support, whatever else) - that\u0027s literally what the point of having the conforming containers was for.\r\n\r\nNot necessarily, if they can be built around the standard interface using extensions. Take `Scrutor` for instance, which adds some level of support for decorators and registration by convention. Again, as a consumer, I\u0027d rather use extensions like that than replace the entire container and make my entire registration pipeline library-specific.",
                                           "updatedAt":  "2024-06-26T19:48:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CrmZq",
                                           "createdAt":  "2024-06-26T19:21:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdFiJg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-06-26T19:41:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cliffchapmanrbx",
                                                                               "createdAt":  "2025-08-05T01:00:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tillig",
                                           "body":  "@julealgon \r\n\r\n\u003e Is there any reason Autofac opted for a custom type there instead of using one of the existing dictionary abstractions? I always disliked using IIndex on our code because of how intrusive that ends up being: we are basically introducing unnecessary vendor lock-in to Autofac.\r\n\r\nAutofac\u0027s been around since before even NuGet. I believe that got added before there _were_ dictionary abstractions. Plus, again, we can\u0027t offer the list of keys, so anything where you can get an `IEnumerable\u003cKeyValuePair\u003cK, V\u003e\u003e` or `IDictionary.Keys` or similar - we can\u0027t fulfill that.\r\n\r\n\u003e Well, I can see how container vendors\r\n\r\nYou may want to be more selective with your wording. I\u0027m not a _vendor_. I make _zero money_ supporting Autofac. I don\u0027t know if any other folks maintaining conforming containers are _vendors_ either. I get nothing from \"vendor lock-in.\" What I do know is that MEDI doesn\u0027t support everything and, at least up front, _wasn\u0027t intended to_, so advanced features were left to all the various containers that already existed in the ecosystem long before ASP.NET Core ever existed.\r\n\r\nIf MEDI wants to assume ownership for all of the use cases, super. I can save a lot of unpaid development and support time by just cutting off Autofac and letting the chips fall where they may. But, like, there\u0027s not just five or six downloads out there and I\u0027m guessing there\u0027d be a non-zero portion of the community left disappointed by the gaps.\r\n\r\nAnyway, the benefit to me, as an _unpaid maintainer_ of a container for MEDI to keep it small is that every time that expands it is a lot of effort to try to mimic not only the _interface_ provided but also, in a lot of cases, the _undocumented weird implementation details_ because people want to swap containers out yet still have identical behavior, even when using advanced features MEDI doesn\u0027t support. So that\u0027s my angle: Less in MEDI means less work for every container maintainer out here but without loss of general functionality for end consumers - you want the extra functionality, choose a more robust container rather than assuming it\u0027ll be baked in.\r\n\r\nI\u0027ve already explained this in many, many, _many_ API proposals for MEDI before. I\u0027m not super interested in engaging about it again. Microsoft will do what Microsoft wants to do, largely regardless of the downstream container maintainers. I felt it was potentially interesting to some folks if I explained the Autofac side of things here, but I\u0027m going to duck back out and go to lurking because, again, I\u0027m super not interested in re-hashing all this, arguing whether MEDI should be the One Container to Rule Them All, or sort of being punished/attacked for chiming in. I respect your view that MEDI should have this; it feels fair to at least respect my view as to why I think it might not be the greatest idea in the bigger picture of things.",
                                           "updatedAt":  "2024-06-26T19:21:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CrqKQ",
                                           "createdAt":  "2024-06-26T19:31:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kasperk81",
                                           "body":  "duplicate of https://github.com/dotnet/runtime/issues/100105?",
                                           "updatedAt":  "2024-06-26T19:31:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Cr9CJ",
                                           "createdAt":  "2024-06-26T20:22:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@tillig \r\n\u003e @julealgon\r\n\u003e \r\n\u003e \u003e Is there any reason Autofac opted for a custom type there instead of using one of the existing dictionary abstractions? I always disliked using IIndex on our code because of how intrusive that ends up being: we are basically introducing unnecessary vendor lock-in to Autofac.\r\n\u003e \r\n\u003e Autofac\u0027s been around since before even NuGet. I believe that got added before there _were_ dictionary abstractions. Plus, again, we can\u0027t offer the list of keys, so anything where you can get an `IEnumerable\u003cKeyValuePair\u003cK, V\u003e\u003e` or `IDictionary.Keys` or similar - we can\u0027t fulfill that.\r\n\r\nFair enough. Having to throw `NotSupportedException` on some of those APIs would end up in a Liskov Substitution Principle violation so I can see now at least one reason why.\r\n\r\n\u003e \r\n\u003e \u003e Well, I can see how container vendors\r\n\u003e \r\n\u003e You may want to be more selective with your wording. I\u0027m not a _vendor_.\r\n\r\nPoint taken. I changed the wording in the original post to avoid the use of \"vendor\". You are correct: vendor implies a sale, which was not what I meant originally. I meant more in the sense of being locked into using a non-standard implementation when a standard one is in place.\r\n\r\n\u003e I make _zero money_ supporting Autofac. I don\u0027t know if any other folks maintaining conforming containers are _vendors_ either. I get nothing from \"vendor lock-in.\"\r\n\r\nSure, you might not get _money_ directly, but implying there is no benefit for you of people using your library is disingenuous.\r\n\r\n\u003e What I do know is that MEDI doesn\u0027t support everything and, at least up front, _wasn\u0027t intended to_, so advanced features were left to all the various containers that already existed in the ecosystem long before ASP.NET Core ever existed.\r\n\r\nSure, I was just pointing out that some of those \"advanced\" features that you are against _do_ get used by standard ASP.NET Core types. If the container needs everything that ASP.NET Core need to run, then we need to expand its capabilities further, not simplify them more.\r\n\r\nContainer simplification in MEDI has led to _many_ nasty workarounds such as the ones I described: implementations that are specific, not orthogonal and rely on convoluted mechanisms because the container doesn\u0027t expose what would be needed to implement them cleanly.\r\n\r\n\u003e If MEDI wants to assume ownership for all of the use cases, super. I can save a lot of unpaid development and support time by just cutting off Autofac and letting the chips fall where they may. But, like, there\u0027s not just five or six downloads out there and I\u0027m guessing there\u0027d be a non-zero portion of the community left disappointed by the gaps.\r\n\r\nAgain, I think you are being disingenuous here by implying that your work on Autofac is for nothing/doesn\u0027t matter/etc. If that was the case, you would just stop working on it and put a deprecation notice redirecting to some other equally-featured container implementation. But that\u0027s not the case of course. Everyone wants their library to be as successful and have as much market share as possible.\r\n\r\n\u003e I felt it was potentially interesting to some folks if I explained the Autofac side of things here...\r\n\r\nI personally appreciate the explanation and thank you for that. I did not know about the dynamic aspect of the implementation even though I use Autofac myself in our current project, so I learned something myself even if I\u0027m still not going to use `IIndex` for other reasons.\r\n\r\n\u003e ... or sort of being punished/attacked for chiming in. I respect your view that MEDI should have this; it feels fair to at least respect my view as to why I think it might not be the greatest idea in the bigger picture of things.\r\n\r\nIt was not my intention to attack or punish you in any way, I was just pointing out that your view, as the provider/contributor of a competitor solution to the standard container, is inheritly biased like it or not. Even if unconsciously, you will prefer for the solution that gives your library the biggest chance of being adopted to win out, and that\u0027s honestly expected... it\u0027s fair enough. I absolutely respect your view regarless of all that.",
                                           "updatedAt":  "2024-06-26T20:22:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CsE5x",
                                           "createdAt":  "2024-06-26T20:40:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdFibg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-06-26T21:03:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cliffchapmanrbx",
                                                                               "createdAt":  "2025-08-05T01:01:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tillig",
                                           "body":  "\u003e  I think you are being disingenuous here by implying that your work on Autofac is for nothing/doesn\u0027t matter/etc. If that was the case, you would just stop working on it and put a deprecation notice redirecting to some other equally-featured container implementation. But that\u0027s not the case of course. Everyone wants their library to be as successful and have as much market share as possible.\r\n\r\nI\u0027m not sure what the benefit is. I work on Autofac because I use it in my own projects and I\u0027m interested in being a good community member. Sometimes it\u0027s a nice change of pace to do something there and not work on the same thing all day. It\u0027s not as transactional or disingenuous as you may think, and it comes with a lot of burnout. If folks decided spontaneously to stop using Autofac, it\u0027d actually probably be easier on me. There\u0027s no small amount of feeling obligated to the community after something like 12-ish years of being a maintainer over there. And simply redirecting to some other container would leave quite a few people stuck in a rut, which is a not-very-nice thing.\r\n\r\nI prefer the solution that won\u0027t generate work for myself and a lot of maintainers out there as well as going against the (what I understood to be) original design principle of the MEDI container - which was to be a lowest-common-denominator conforming container mechanism, not unlike how `ILogger` is pretty lowest common denominator and can be swapped in by Serilog or others. I\u0027m not convinced MEDI has outgrown that original goal despite some folks\u0027 desire to continue increasing the footprint of what, again, I thought was originally supposed to be a pretty simple abstraction.\r\n\r\nBut I\u0027m not sure it\u0027s valuable to pursue this particular line of discussion - that is, whether or not there\u0027s some \"benefit\" to me if people adopt Autofac. I\u0027m fine agreeing to disagree, but assuming/assigning my intent here is maybe not so cool.",
                                           "updatedAt":  "2024-06-26T20:40:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DA6tO",
                                           "createdAt":  "2024-06-29T09:04:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "robertmclaws",
                                           "body":  "**I\u0027m just going to throw this out there:** \r\n\r\nCouldn\u0027t the `AddKeyed***` implementations simply be adjusted so that when Keyed services are registered, under the covers the Key and the Type are added to a `public class KeyedRegistrations : Lookup\u003cType, Key\u003e` that is then injected to the DI container when it is built?\r\n\r\nThen the proposed API above would just call `IServiceProvider.GetService\u003cKeyedRegistrations\u003e()[typeof(TImplementation)]` under the covers and get you a List\u003cKey\u003e for the given Type. Or people can get the KeyedRegistrations themselves and do whatever they want with it.\r\n\r\nMEDI downstream implementations could hook into that their own way, and it shouldn\u0027t cause a buttload of extra work for people like @tillig (👋) who slave away trying to keep things simple for people.\r\n\r\nI think all people are really looking for here is a Table of Contents for what is in the container. This would help give it to them.\r\n\r\nTo be clear, you wouldn\u0027t get actual instances this way, the type definition passed in the lookup would have to match what was registered.",
                                           "updatedAt":  "2024-06-29T09:04:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DBjTd",
                                           "createdAt":  "2024-06-29T14:59:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tillig",
                                           "body":  "\u003e Dynamic registrations. You can use modules and registration sources to dynamically provide components into the container. You don\u0027t have to know up front all the types you want. That includes the ability to generate - on the fly - keyed service registrations, and we\u0027d only know about them when we query the stack to ask, \"Do you provide a keyed registration for type X with the key Y?\" (This dynamic nature is kind of how we mangle AnyKey into working. AnyKey is a nightmare.)\r\n\r\nThis is why even a simple implementation wouldn\u0027t really work for Autofac. There is no guaranteed concrete enumeration for all the keys. Don\u0027t forget folks are registering things _not only_ using the MEDI methods but _also_ through the native underlying container methods and they expect it all to work together. \r\n\r\nIt\u0027s why asking Autofac for the \"list of all registered types\" is not the way to find out what all is registered. We can only enumerate explicit registrations, and even then it gets sort of tricky when you get to nested lifetime scopes.\r\n\r\nThis is also one of the reasons `IServiceProvider.IsService` tells you if a thing is _registered_ not if it can be _resolved_ (ie, you can try to resolve it but there may be missing dependencies in the chain).\r\n\r\nWe could maybe offer, at best, the list of explicitly registered keys in a given scope, but, as with listing types, it would omit anything dynamically registered and be incomplete. \"I can resolve it but it doesn\u0027t show up in the list! Why not?\"",
                                           "updatedAt":  "2024-06-29T14:59:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FYdwh",
                                           "createdAt":  "2024-07-18T23:46:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEXeaA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "michael-hawker",
                                                                               "createdAt":  "2024-10-29T09:12:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "GiorgioG",
                                                                               "createdAt":  "2025-01-28T22:32:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "adityamandaleeka",
                                           "body":  "We\u0027re not going to be able to get this into .NET 9 at this point. I\u0027ll move it to Future and we can re-evaluate this in the future if consensus emerges.",
                                           "updatedAt":  "2024-07-18T23:46:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6q6DMD",
                                           "createdAt":  "2025-05-09T17:20:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmulkern",
                                           "body":  "Hi All, a little bit late to the conversation, but I think I may have a proposed solution. The gist is [here](https://gist.github.com/tmulkern/1efba15ab25c4b221ceb5cd58721eb3f)\n\n\u003e How about supporting resolving `IReadOnlyDictionary\u003cTKey,TService\u003e` instead? [@dotnetjunkie](https://github.com/dotnetjunkie) shows how to do it on Stack Overflow: [How to get a dictionary of keyed services in ASP.NET Core 8](https://stackoverflow.com/questions/77559201/how-to-get-a-dictionary-of-keyed-services-in-asp-net-core-8/77559901#77559901).\n\u003e \n\u003e It would be nice if this feature was supported out of the box. It is more intuitive than an extension on `IServiceProvider` in my opinion.\n\nTaking inspiration from the Stackoverflow mentioned above (in have in fact added this answer to the Stackoverflow). \n\nI have created an implementation using `IReadOnlyDictionary\u003cTKey,TService\u003e`, solving some of the issues mentioned in this conversation, please correct me if I have missed anything\n\n- The `IReadOnlyDictionary\u003cTKey, TService\u003e` Lazy Loads the `TService `Values and then caches them in backing Dictionary\n- All the Keys can be iterated through without resolving the `TService `Values\n- Supports Captive Dependencies by filtering out Scoped Keys, this is done by checking if the injected `IServiceProvider` is of type `IServiceScopeFactory`",
                                           "updatedAt":  "2025-05-09T17:20:45Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "[API Proposal]: Support resolving all service keys associated with keyed DI instances",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100238",
        "createdAt":  "2024-03-22T13:02:11Z",
        "number":  100238,
        "author":  "dotnetjunkie",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCrkTQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OSL-GDWR",
                                            "createdAt":  "2025-05-22T10:11:07Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-01T18:09:44Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nSince the release of .NET Core and the introduction of Microsoft.Extensions.DependencyInjection, StackOverflow is flooded with questions where the developer reports getting the following exception:\r\n\r\n\u003e Unable to resolve service for type \u0027...\u0027\r\n\r\nWhile the reason almost always is that the dependency hasn\u0027t been added to the `IServiceCollection`, it truck me that regularly the exception occurs because the developer didn\u0027t add the proper framework dependencies using one of the `.AddXXX` overloads. Take a look, for instance, as this recent StackOverflow [question](https://stackoverflow.com/questions/78206142/net-8-console-app-di-error-unable-to-resolve-service-for-type-microsoft-exten). In that case the following message is thrown:\r\n\r\n\u003e Unable to resolve service for type \u0027Microsoft.Extensions.Logging.ILoggerFactory\u0027 while attempting to activate \u0027Microsoft.Extensions.Localization.ResourceManagerStringLocalizerFactory\u0027.\r\n\r\nWhile we could respond to these kinds of problems with RTFM, because this is what it basically always comes down to, it doesn\u0027t help developers that are starting out with this new technology.\r\n\r\nI\u0027m, therefore, hoping that the experience can be improved for starting developers, especially around common framework types.\n\n### Describe the solution you\u0027d like\n\nA possible solution is to mark those common framework types, such as the above `ILoggerFactory` with an attribute that gives a short explanation on what the typical solution is when a registration for that service type is missing, and a link to some basic documentation showing how to set up that part of the framework. The DI Container could than, append the exception message with that information.\r\n\r\nFor instance:\r\n\r\n``` c#\r\nnamespace Microsoft.Extensions.Logging\r\n{\r\n    [ServiceMissingDocumentation(\r\n        message: \"You might be missing a call to .AddLogger() on your IServiceCollection.\",\r\n        url: \"https://doc.ms/84FDKv9\")]\r\n    public interface ILoggerFactory : IDisposable\r\n    {\r\n        ...\r\n    }\r\n}\r\n```\r\nThis could than result in the following exception message:\r\n\r\n\u003e Unable to resolve service for type \u0027Microsoft.Extensions.Logging.ILoggerFactory\u0027 while attempting to activate \u0027Microsoft.Extensions.Localization.ResourceManagerStringLocalizerFactory\u0027. You might be missing a call to .AddLogger() on your IServiceCollection. For more information, go to https://doc.ms/84FDKv9.\r\n\n\n### Additional context\n\nWhile I realize that this doesn\u0027t  solve all issues, and certainly isn\u0027t argument for developers to not RTFM, I believe such feature (independent to how you choose to implement it) could really improve the whole experience around DI for developers who are either new to the principles, or are just new to working with MS.DI.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeExfmQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc54TFv2",
                                           "createdAt":  "2024-03-22T13:07:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbyglg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mkArtakMSFT",
                                                                               "createdAt":  "2024-03-25T15:24:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "martincostello",
                                           "body":  "This looks like an issue that should be transferred to the [dotnet/runtime](https://github.com/dotnet/runtime) repo.",
                                           "updatedAt":  "2024-03-22T13:07:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54TF-Z",
                                           "createdAt":  "2024-03-25T15:25:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-25T15:25:31Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Provide better developer experience when for missing dependencies",
        "labels":  [
                       "area-Extensions-DependencyInjection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102016",
        "createdAt":  "2024-05-08T13:26:55Z",
        "number":  102016,
        "author":  "quixoticaxis",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T18:09:45Z",
        "body":  "### Description\n\nDI does not respect `unmanaged` constraint and enables instantiation of invalid types.\n\n### Reproduction Steps\n\nRun the code.\r\n\r\n```csahrp\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nusing var provider = new ServiceCollection()\r\n    .AddSingleton(typeof(IGeneralInterface\u003c\u003e), typeof(UnmanagedConstrainedImplementation\u003c\u003e))\r\n    .BuildServiceProvider();\r\n\r\nvar invalid = provider.GetRequiredService\u003cIGeneralInterface\u003cManaged\u003e\u003e();\r\ninvalid.Call(new());\r\n\r\npublic interface IGeneralInterface\u003cT\u003e\r\n{\r\n    void Call(T value);\r\n}\r\n\r\npublic class UnmanagedConstrainedImplementation\u003cT\u003e\r\n    : IGeneralInterface\u003cT\u003e\r\nwhere T : unmanaged\r\n{\r\n    public void Call(T value)\r\n    {\r\n    }\r\n}\r\n\r\npublic record struct Managed(object One, object Other);\r\n```\n\n### Expected behavior\n\nException is thrown.\n\n### Actual behavior\n\nThe program successfully completes.\n\n### Regression?\n\nNo, as far as I know.\n\n### Known Workarounds\n\nWrap instantiation in a factory, get `modreq` modifications by reflection and check by hand.\n\n### Configuration\n\nNot specific to configuration.\n\n### Other information\n\nIMHO, it is up to debate whether `System.RuntimeType.MakeGenericType` should respect the constraint, and I tend to believe it should, but the DI is meant to be used by C# end-users and definitely should not instantiate types which are invalid for the language.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfTQ_Kg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc59ND8q",
                                           "createdAt":  "2024-05-08T13:27:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-08T13:27:14Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Dependency injection does not respect unmanaged constraint",
        "labels":  [
                       "feature-request",
                       "area-Extensions-DependencyInjection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102651",
        "createdAt":  "2024-05-24T10:09:14Z",
        "number":  102651,
        "author":  "alistairjevans",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4tjag==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-06-18T13:03:39Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-01T18:14:48Z",
        "body":  "In the MS DI implementation, it is stated in [docs](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-8.0#services-not-created-by-the-service-container) that services not created by the service container are **not** disposed of when the application instance stops.\r\n\r\nHowever, this is not the default Autofac behaviour, where services registered from instances *are* disposed of when the root container/service provider is disposed, unless explicitly switched off using `.ExternallyOwned()` on the registration.\r\n\r\nOur Autofac MS DI integration currently follows Autofac defaults rather than the assumed behaviour of MS DI, leading to user confusion/frustration: https://github.com/autofac/Autofac.Extensions.DependencyInjection/issues/15.\r\n\r\nThe reason for the deviation from the assumed behaviour is simply that this default \"provided instance\" handling is not present in the conforming container tests.\r\n\r\nThis hypothetical test, specifically, **passes** on the MS DI container, but **fails** on our Autofac container:\r\n\r\n```csharp\r\n[Fact]\r\npublic void ServiceInstancesRegisteredAreNotDisposedWhenTheProviderIsDisposed()\r\n{\r\n    // Issue 15: M.E.DI documents that provided instances are not disposed when the service provider is disposed,\r\n    //            but there is no conformance test.\r\n    var externalService = new DisposeTracker();\r\n    var services = new ServiceCollection().AddSingleton(externalService);\r\n    var rootProvider = CreateServiceProvider(services);\r\n    ((IDisposable)rootProvider).Dispose();\r\n\r\n    Assert.False(externalService.Disposed);\r\n}\r\n```\r\n\r\nWe\u0027ve come to the decision to amend the Autofac behaviour to **match** the assumed behaviour of MS DI, but it would be great if this could be added to the formal conforming container specification via the additional test, to reduce user confusion when switching to an alternative container.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgaQhww==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5-6GY7",
                                           "createdAt":  "2024-05-24T10:09:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-24T10:09:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Bnt0V",
                                           "createdAt":  "2024-06-18T00:19:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@alistairjevans would you be willing to create a PR to add this?",
                                           "updatedAt":  "2024-06-18T00:19:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BpCHD",
                                           "createdAt":  "2024-06-18T05:12:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODmF8dw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-06-18T13:05:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alistairjevans",
                                           "body":  "Yep, happy to; I\u0027m on leave right now, but I can raise it in a couple of weeks.",
                                           "updatedAt":  "2024-06-18T05:12:03Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Dependency Injection: Conforming container tests missing a test for assumed provided instance disposal behaviour",
        "labels":  [
                       "test-enhancement",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102970",
        "createdAt":  "2024-06-02T20:15:15Z",
        "number":  102970,
        "author":  "thomhurst",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDS4Hg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexeyshockov",
                                            "createdAt":  "2024-06-10T10:18:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jomaxso",
                                            "createdAt":  "2024-06-13T17:36:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wvpm",
                                            "createdAt":  "2024-07-25T07:34:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aradalvand",
                                            "createdAt":  "2025-06-05T02:04:37Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-08-01T18:09:45Z",
        "body":  "### Background and motivation\r\n\r\nIf we register an open generic within the Microsoft Dependency Injection library, we have to also register the implementation as on open-generic type too:\r\ne.g.:\r\n```services.AddSingleton(typeof(ILogger\u003c\u003e), typeof(MyLogger\u003c\u003e));```\r\n\r\nIf we try and new up an object using the `Func\u003c\u003e` overload, we get an exception. \r\nE.g:\r\n```services.AddSingleton(typeof(ILogger\u003c\u003e), sp =\u003e new MyLogger(stringBuilder));```\r\n\r\n```\r\nOpen generic service type \u0027Microsoft.Extensions.Logging.ILogger`1[TCategoryName]\u0027 requires registering an open generic implementation type. (Parameter \u0027descriptors\u0027)\r\n```\r\n\r\nThis means we\u0027re limited by how this object is created. We can\u0027t pass custom arguments to the constructor.\r\n\r\nI propose an overload where the `Func\u003c\u003e` also passes the `Type` information to the delegate, therefore we could interrogate it and use that to create objects.\r\n\r\nThis allows for greater control over objects and more flexibility within the dependency injection setup of an application.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\npublic ServiceDescriptor(\r\n    Type serviceType,\r\n    Func\u003cIServiceProvider, Type, object\u003e factory,\r\n    ServiceLifetime lifetime)\r\n    : this(serviceType, serviceKey: null, lifetime)\r\n{\r\n    // Internal Microsoft DI code\r\n}\r\n\r\npublic static IServiceCollection AddSingleton(\r\n    this IServiceCollection services,\r\n    Type serviceType,\r\n    Func\u003cIServiceProvider, Type, object\u003e implementationFactory)\r\n{\r\n    // Internal Microsoft DI code\r\n}\r\n\r\npublic static IServiceCollection AddScoped(\r\n    this IServiceCollection services,\r\n    Type serviceType,\r\n    Func\u003cIServiceProvider, Type, object\u003e implementationFactory)\r\n{\r\n    // Internal Microsoft DI code\r\n}\r\n\r\npublic static IServiceCollection AddTransient(\r\n    this IServiceCollection services,\r\n    Type serviceType,\r\n    Func\u003cIServiceProvider, Type, object\u003e implementationFactory)\r\n{\r\n    // Internal Microsoft DI code\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar stringBuilder = new StringBuilder();\r\n\r\nservices.AddSingleton(typeof(ILogger\u003c\u003e), (sp, type) =\u003e \r\n{\r\n    // When requested `ILogger\u003c\u003e` is `ILogger\u003cMyClass\u003e` then `type` will be `typeof(ILogger\u003cMyClass\u003e)`\r\n    var genericLoggerType = typeof(MyLogger\u003c\u003e).MakeGenericType(type.GenericTypeArguments[0]);\r\n    return ActivatorUtilities.CreateInstance(sp, genericLoggerType, stringBuilder)\r\n});\r\n```\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOr2MZkg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5_yvcd",
                                           "createdAt":  "2024-06-02T20:15:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-02T20:15:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BnnCz",
                                           "createdAt":  "2024-06-17T23:53:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003chttps://github.com/dotnet/runtime/issues/41050\u003e is similar.",
                                           "updatedAt":  "2024-06-17T23:53:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GCotP",
                                           "createdAt":  "2024-07-24T20:24:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to Future since we have reached the v9 \"feature complete\" milestone; API suggestion also needs to be finalized and marked ready-for-review.\r\n\r\nAlso verify whether this is a full or partial duplicate of https://github.com/dotnet/runtime/issues/41050.",
                                           "updatedAt":  "2024-07-24T20:24:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GFwAj",
                                           "createdAt":  "2024-07-25T07:34:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wvpm",
                                           "body":  "It is a duplicate of #41050 \r\nBoth the problem and the solution are the same.",
                                           "updatedAt":  "2024-07-25T07:34:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6o7Cr_",
                                           "createdAt":  "2025-04-28T05:50:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CoreDX9",
                                           "body":  "I have a derivative version that implements this feature. If interested, I can organize it into a PR.\n[CoreDX.Extensions.DependencyInjection](https://github.com/CoreDX9/CoreDX.Extensions.DependencyInjection)",
                                           "updatedAt":  "2025-04-28T05:51:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vYxmS",
                                           "createdAt":  "2025-06-05T02:05:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aradalvand",
                                           "body":  "Hopefully the 10.0 label means this is soon considered. ",
                                           "updatedAt":  "2025-06-05T02:05:34Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal]: Add `Type` parameter overload to Microsoft.Extensions.DependencyInjection resolver delegate method",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104041",
        "createdAt":  "2024-06-26T14:55:31Z",
        "number":  104041,
        "author":  "steveharter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T03:01:40Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=719926\r\nBuild error leg or test failing: Microsoft.Extensions.DependencyInjection.Tests.ServiceProviderILEmitContainerTests.GetAsyncService_DisposeAsyncOnSameThread_ThrowsAndDoesNotHangAndDisposeAsyncGetsCalled\r\nPull request: https://github.com/dotnet/runtime/pull/103968\r\n\r\n```\r\n  Starting:    Microsoft.Extensions.DependencyInjection.Tests (parallel test collections = on [2 threads], stop on fail = off)\r\n    Microsoft.Extensions.DependencyInjection.Tests.ServiceProviderILEmitContainerTests.GetAsyncService_DisposeAsyncOnSameThread_ThrowsAndDoesNotHangAndDisposeAsyncGetsCalled [FAIL]\r\n      Assert.True() Failure\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /_/src/libraries/Microsoft.Extensions.DependencyInjection/tests/DI.Tests/ServiceProviderContainerTests.cs(398,0): at Microsoft.Extensions.DependencyInjection.Tests.ServiceProviderContainerTests.GetAsyncService_DisposeAsyncOnSameThread_ThrowsAndDoesNotHangAndDisposeAsyncGetsCalled()\r\n```\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"Microsoft.Extensions.DependencyInjection.Tests.ServiceProviderILEmitContainerTests.GetAsyncService_DisposeAsyncOnSameThread_ThrowsAndDoesNotHangAndDisposeAsyncGetsCalled [FAIL]\",\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=719926\r\n**Error message validated:** `[Microsoft.Extensions.DependencyInjection.Tests.ServiceProviderILEmitContainerTests.GetAsyncService_DisposeAsyncOnSameThread_ThrowsAndDoesNotHangAndDisposeAsyncGetsCalled [FAIL]`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 6/26/2024 2:56:25 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOixlzEQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6CphCz",
                                           "createdAt":  "2024-06-26T14:55:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-26T14:55:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GpYYJ",
                                           "createdAt":  "2024-07-30T18:50:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Perhaps this is a case where the IL Emit version of the implementation is created after a certain number of calls (e.g. 3), and there is a concurrency issue with the switch to IL?",
                                           "updatedAt":  "2024-07-30T18:50:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HL1bK",
                                           "createdAt":  "2024-08-05T01:53:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-pgo 20240804.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=765477\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19491988\u0026resultId=140391\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-x86-jitosr_stress-Windows.10.Amd64.Open\r\n    - Microsoft.Extensions.DependencyInjection.Tests.ServiceProviderILEmitContainerTests.GetAsyncService_DisposeAsyncOnSameThread_ThrowsAndDoesNotHangAndDisposeAsyncGetsCalled\r\n```\r\n\r\n**Error message:**\r\n```\r\n Assert.True() Failure\r\nExpected: True\r\nActual:   False\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at Microsoft.Extensions.DependencyInjection.Tests.ServiceProviderContainerTests.GetAsyncService_DisposeAsyncOnSameThread_ThrowsAndDoesNotHangAndDisposeAsyncGetsCalled() in /_/src/libraries/Microsoft.Extensions.DependencyInjection/tests/DI.Tests/ServiceProviderContainerTests.cs:line 384\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```",
                                           "updatedAt":  "2024-08-05T01:53:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HZdzN",
                                           "createdAt":  "2024-08-06T15:42:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@steveharter does your theory imply a regression or an existing issue in either DI or reflection?",
                                           "updatedAt":  "2024-08-06T15:42:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ICHV7",
                                           "createdAt":  "2024-08-10T19:34:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e @steveharter does your theory imply a regression or an existing issue in either DI or reflection?\r\n\r\nI don\u0027t think that theory is valid after looking at this more.\r\n\r\nThe [PR that added the test](https://github.com/dotnet/runtime/pull/45116) and it uses the problematic [sync-over-async approach](https://github.com/dotnet/runtime/blob/8fee24fbde0882fd83b68042747b210001c8ab33/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceLookup/ServiceProviderEngineScope.cs#L109-L111) to avoid deadlocks.\r\n\r\nAlso, there is a timeout of 10 seconds, but that seems plenty - my machine runs that in a millisecond or so I don\u0027t think it\u0027s a timeout issue. It\u0027s more likely related to sync-over-async.\r\n\r\nI ran the tests locally 2,000 times without issues.\r\n\r\nStill investigating; not sure if this occurred in the more distant past but no issue created for it.",
                                           "updatedAt":  "2024-08-10T19:34:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IJrE0",
                                           "createdAt":  "2024-08-12T15:08:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "The most recent change that directly modified this code is https://github.com/dotnet/runtime/pull/53325/files which was in v6.0.",
                                           "updatedAt":  "2024-08-12T17:56:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ISJjH",
                                           "createdAt":  "2024-08-13T14:54:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to v10; this may be a test-only issue. If not, the workaround is to add a synchronous `Dispose()`.",
                                           "updatedAt":  "2024-08-13T14:54:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LGXMR",
                                           "createdAt":  "2024-09-06T09:55:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "koenigst",
                                           "body":  "@steveharter \r\nI did some digging. The main take away is that the tests in this assembly are susceptible to thread pool starvation. The reason being the many \"sync over async\" uses in the tests **AND** the implementation.\r\n\r\n### Reasoning\r\n* The agent running the tests has only 2 cores as seen from the log: `Starting:    Microsoft.Extensions.DependencyInjection.Tests (parallel test collections = on [2 threads], stop on fail = off)`\r\n* I was able to reproduce the test failure by artificially constraining the thread pool.\r\n* This test is particularly susceptible as it consumes three thread pool threads by itself.\r\n  * A blocking `Wait` inside of the test method ([source](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.DependencyInjection/tests/DI.Tests/ServiceProviderContainerTests.cs#L422))\r\n  * `SingleThreadedSynchronizationContext.Run` inside `Task.Run` ([source](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.DependencyInjection/tests/DI.Tests/ServiceProviderContainerTests.cs#L413))\r\n  * `DisposeAsync` inside `Task.Run` blocking `SingleThreadedSynchronizationContext.Run` ([source](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceLookup/ServiceProviderEngineScope.cs#L111))\r\n* This test has a timeout. This means that if it takes too long for the thread pool to spool up threads to replace the blocked threads it fails. Other tests with similar issues have no timeouts meaning they just run much slower than necessary but do not fail.\r\n\r\n### Options:\r\n1. Remove the timeout. It will complete ... eventually.\r\n2. Manually resize the thread pool to ensure enough threads are readily available even on resource constrained systems. This might degrade performance due to unnecessary context switches.\r\n3. Change the test by providing a `Dispose` method. This degrades test coverage.\r\n4. Reduce the \"sync over async\" uses in the tests. This is quite a bit of effort.",
                                           "updatedAt":  "2024-09-06T09:55:19Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Test failing: ServiceProviderILEmitContainerTests.GetAsyncService_DisposeAsyncOnSameThread_ThrowsAndDoesNotHangAndDisposeAsyncGetsCalled",
        "labels":  [
                       "investigate",
                       "area-Extensions-DependencyInjection",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104472",
        "createdAt":  "2024-07-05T13:18:22Z",
        "number":  104472,
        "author":  "lonix1",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9z_5Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RyanTimin",
                                            "createdAt":  "2025-01-01T10:13:23Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-07-17T17:02:12Z",
        "body":  "The API docs for [`IServiceScopeFactory.CreateScope`](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.DependencyInjection.Abstractions/src/IServiceScopeFactory.cs) state:\r\n\r\n\u003e Returns: An IServiceScope controlling the lifetime of the scope. Once this is disposed, **any scoped services** that have been resolved from the IServiceScope.ServiceProvider will also be disposed.\r\n\r\nThis was a [source of confusion](https://stackoverflow.com/q/78711405/9971404) for me as I always believed that anything created by a child scope is disposed by that child scope. Meaning it would also dispose transient services.\r\n\r\nAnd elsewhere, [the docs](https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection-guidelines#disposable-transient-services-captured-by-container) state:\r\n\r\n\u003e When you register Transient services that implement IDisposable, by default the DI container will hold onto these references, and not Dispose() of them until the container is disposed when application stops if they were resolved from the container, **or until the scope is disposed if they were resolved from a scope.** This can turn into a memory leak if resolved from container level.\r\n\r\nSo the API wording should be changed to include \"or transient services\".",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhSTBow==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6DxyMn",
                                           "createdAt":  "2024-07-05T13:18:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-05T13:18:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FJMGj",
                                           "createdAt":  "2024-07-17T17:02:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@lonix1 would you like to propose a PR that clarifies this?",
                                           "updatedAt":  "2024-07-17T17:02:11Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[Docs] Update API docs for IServiceScopeFactory.CreateScope",
        "labels":  [
                       "documentation",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104900",
        "createdAt":  "2024-07-15T15:10:54Z",
        "number":  104900,
        "author":  "FrankBakkerNl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODIS6wQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-07-15T21:10:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kaleidocore",
                                            "createdAt":  "2024-08-20T19:59:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aradalvand",
                                            "createdAt":  "2025-03-02T13:19:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ctwo-andreas-tapper",
                                            "createdAt":  "2025-03-20T13:06:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LokiMidgard",
                                            "createdAt":  "2025-07-24T06:54:58Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-07-26T10:50:36Z",
        "body":  "Sometimes a scoped service needs to be injected into a depending class that is sometimes used inside a scope and sometimes outside a scope. An example would be a Log Enrichter that wants to access data that is only available within a Scope.\r\n\r\nWhen used inside a scope it wants to receive the instance of that specific scope. If the depending class is created from the root scope it is illegal to resolve a scoped service. One way resolve the service from a \u0027root\u0027 IServiceProvider` is to create a new scope on the fly and resolve teh scoped service from that. However the depending class then needs a way of knowing if it needs to create a new scope or not. If it would always create a new scope, it will not receive the correct instance if it was already in a scope.\r\n\r\nAs far as I can tell, there is currenlty no public API that allowes a consumer of an IServiceProvider to dertermine if it is scoped or not, Except for trying to create the scoped service and catch an exception if it fails, which seems unreliable.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhieRGg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6E19hG",
                                           "createdAt":  "2024-07-15T15:11:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-15T15:11:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E2CIq",
                                           "createdAt":  "2024-07-15T15:18:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "Scopes can be arbitrarily nested... how would you know which scope is \"correct\"?\r\n\r\nI know this is not what you asked here, but I think it should also be taken into consideration. Knowing whether or not \"you are in a scope\" only answers part of the possible questions a consumer could have.\r\n\r\nAlso, can you provide a more concrete example of why you need this? Usually, the class creating the scope is responsible for creating the dependent object using that scope, and all dependencies are then resolved from the container at that moment in time. If you need to pass along the `IServiceProvider` to further resolve other services, maybe you could change your implementation to avoid that need and resolve the services upfront?",
                                           "updatedAt":  "2024-07-15T15:18:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E2S26",
                                           "createdAt":  "2024-07-15T15:46:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FrankBakkerNl",
                                           "body":  "The way I understand it is that scopes are not really, \u0027nested\u0027. Yes you can create a new scope from an exisisting one, but that does not have anything in common with its \u0027parent\u0027 it is really just a new blank scope with a separated lifetime. The real distiction made by the DI framework is between the root and scopes. Where for the root it is not allowed to resolve scoped services while for a scope it is allowed.\r\n\r\nSome services are sometimes created inside a scope and sometimes from the root without my own code controlling it. An example is Serilog, which I do not control but while logging, it creates Enrichers or LogSinks that I do implement myself and configure serilog to use. Inside my own Enricher I want to access scoped services that belong to the same scope which created the ILogger in the first place. So that it can provide information related to objects in that scope, if available. This all works fine, as long as I use the logger that is created from a scope, all of itys dependencies are also created from that scope. It fails with an exception however when the logger is used outside of a scope because the Scoped service is not allowed to be resolved.\r\n\r\n",
                                           "updatedAt":  "2024-07-15T15:46:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E3jMH",
                                           "createdAt":  "2024-07-15T18:44:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODrjdVg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wvpm",
                                                                               "createdAt":  "2024-07-25T15:45:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@FrankBakkerNl ok, fair enough.\r\n\r\nThe only suggestion I have for this situation you describe is to _avoid_ scoped registrations and use ambient data with `AsyncLocal` to store the data, like how `IHttpContextAccessor` works: it is a singleton instance, that provides the current request.\r\n\r\nI\u0027ve had a similar situation as yours recently and went with that approach with good success. When outside of a request, this abstraction would return `null` (instead of crashing) and I can conditionally skip the logic.\r\n\r\nI believe this is actually why `IHttpContextAccessor` was coded this way, so that it could work seamlessly regardless of the container lifetime.",
                                           "updatedAt":  "2024-07-15T18:44:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E333z",
                                           "createdAt":  "2024-07-15T19:34:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FrankBakkerNl",
                                           "body":  "Unfortunately there is no async excution context directly related to the scope in our scenario. It is not asp.net  handling webrequests.\r\n\r\nOut platform is NetDaemon We built it so that users of the platform can create classes we will load as \u0027apps\u0027 . For each such app we create a ServiceScope and then use that to instantiate the app and all its dependencies. Each app then gets its own version of any scoped services. When the app is stopped, we dispose the service scope so all injected scoped services will then also be disposed. This model looks a bit like ASP.NET actually, an app works a bit like a controller in ASP.NET, it is just that there will not be a single logical execution context associated with it.\r\n\r\nWe might be able to create a new execution context and then within that execution context create the app and the scope etc. The app can however also respond to other external events which might then not run in the same context.",
                                           "updatedAt":  "2024-07-15T19:34:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E4RwJ",
                                           "createdAt":  "2024-07-15T20:29:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODu-MDw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-15T20:44:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kaleidocore",
                                                                               "createdAt":  "2024-08-20T20:02:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "FrankBakkerNl",
                                           "body":  "Aside from the specific scenario, to me it is like having a Parse() method without a TryParse(). The only way to find out if resolving a service is allowed is by doing it and catching the exception if it fails. It would be usefull to be able to avoid that by eg making `IsRootScope` available via a public interface",
                                           "updatedAt":  "2024-07-15T20:29:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GFqRp",
                                           "createdAt":  "2024-07-25T07:20:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wvpm",
                                           "body":  "First of all, try not to depend on dependency injection. Request desired services in your constructor instead of requesting IServiceProvider to resolve them on the fly. The first approach makes code clearer, easier to test and usable in a context without DI.\r\n\r\nAs for a TryResolve, you can call IServiceProvider.GetService\u003cT\u003e(). It returns your service if registered or null if not. (It can be confusing when you registered null as the service.)\r\n\r\nAs for your original post, I don\u0027t understand why you would create a new scope. You can resolve scoped registrations even via the root serviceprovider. Note only the most recent registration is used to resolve an instance. Singleton/Scoped/Transient does not play a role in this. See this example.\r\n```cs\r\nusing Microsoft.Extensions.DependencyInjection; //.NET 8\r\n\r\nint i = 0;\r\nServiceCollection serviceCollection = new();\r\nserviceCollection.AddSingleton(\"Singleton\"); //only resolvable via GetServices\r\nserviceCollection.AddScoped(_ =\u003e i++.ToString());\r\nusing ServiceProvider serviceProvider = serviceCollection.BuildServiceProvider();\r\nstring? rootString = serviceProvider.GetService\u003cstring\u003e(); //not allowed to resolve scoped services in root when building service provider with validate scopes\r\nConsole.WriteLine(rootString); //0\r\nusing IServiceScope scope = serviceProvider.CreateScope();\r\nstring? scopedString = scope.ServiceProvider.GetService\u003cstring\u003e();\r\nConsole.WriteLine(scopedString); //1\r\n```\r\n\r\nI understand you want to provide context data to a logger. You could register a scoped context (ConcurrentDictionary?) and add data into it for your log enricher to resolve. To ensure you get the log context and not just any ConcurrentDictionary, you can use key scoped services or better a custom type.\r\n\r\nEdit:\r\nThere is a dirty way to access an internal bool IsRootScope.\r\n```cs\r\nusing System.Reflection;\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nType serviceProviderEngineScope = typeof(ServiceProvider).Assembly.GetType(\"Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope\")!;\r\nPropertyInfo propertyInfo = serviceProviderEngineScope.GetProperty(\"IsRootScope\")!;\r\n\r\nstring key = \"root\";\r\nint i = 0;\r\nServiceCollection serviceCollection = new();\r\nserviceCollection.AddTransient\u003cobject\u003e(p =\u003e ((bool)propertyInfo.GetValue(p)! ? p.GetKeyedService\u003cstring\u003e(key) : p.GetService\u003cstring\u003e()) ?? \"Nope\");\r\nserviceCollection.AddScoped(_ =\u003e i++.ToString());\r\nserviceCollection.AddKeyedSingleton(key, \"singleton\");\r\nusing ServiceProvider serviceProvider = serviceCollection.BuildServiceProvider(true);\r\nstring? rootString = serviceProvider.GetRequiredService\u003cobject\u003e().ToString();\r\nConsole.WriteLine(rootString); //singleton\r\nusing IServiceScope scope = serviceProvider.CreateScope();\r\nstring? scopedString = scope.ServiceProvider.GetRequiredService\u003cobject\u003e().ToString();\r\nConsole.WriteLine(scopedString); //0\r\nConsole.WriteLine(scope.ServiceProvider.GetRequiredService\u003cobject\u003e().ToString()); //0\r\n```",
                                           "updatedAt":  "2024-07-25T08:30:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GJDpB",
                                           "createdAt":  "2024-07-25T14:45:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e As for your original post, I don\u0027t understand why you would create a new scope. You can resolve scoped registrations even via the root serviceprovider. Note only the most recent registration is used to resolve an instance. Singleton/Scoped/Transient does not play a role in this. See this example.\r\n\r\n@wvpm you are only partially correct here.\r\n\r\nYour example is too simplistic. When the container is used with `Microsoft.Extensions.Hosting`, the `validateScopes` setting is set to `true` by default, which in turn causes an exception when attempting to resolve a scoped service from the root container:\r\n\r\n```csharp\r\nServiceCollection services = new();\r\nservices.AddScoped\u003cMyClass\u003e();\r\nvar provider = services.BuildServiceProvider(validateScopes: true);\r\n\r\nvar service = provider.GetService\u003cMyClass\u003e();\r\n```\r\n\r\n![image](https://github.com/user-attachments/assets/3a291c14-e8b9-46aa-b599-6c5e67c7d118)\r\n",
                                           "updatedAt":  "2024-07-25T14:45:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GJ5Ea",
                                           "createdAt":  "2024-07-25T15:45:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODrleEg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-25T17:24:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wvpm",
                                           "body":  "@julealgon I am aware of this limitation. That\u0027s why I added this comment.\r\n```cs\r\nstring? rootString = serviceProvider.GetService\u003cstring\u003e(); //not allowed to resolve scoped services in root when building service provider with validate scopes\r\n```\r\n\r\nYou can specify your service provider to not validate the scopes.\r\nFor aspnetcore, see [UseDefaultServiceProvider](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.hosting.webhostbuilderextensions.usedefaultserviceprovider?view=aspnetcore-8.0).\r\nFor Microsoft.Extensions.Hosting, see [UseDefaultServiceProvider](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.hostinghostbuilderextensions.usedefaultserviceprovider?view=net-8.0#microsoft-extensions-hosting-hostinghostbuilderextensions-usedefaultserviceprovider(microsoft-extensions-hosting-ihostbuilder-system-action((microsoft-extensions-dependencyinjection-serviceprovideroptions)))).\r\n\r\nNote this is a workaround, just like the reflection of internals.\r\nI much prefer (and normally use) the AsyncLocal approach.",
                                           "updatedAt":  "2024-07-25T15:50:18Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "How can a depending class know if IServiceProvider is Scoped, in order to safely resolve a scoped service if available?",
        "labels":  [
                       "question",
                       "area-Extensions-DependencyInjection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108024",
        "createdAt":  "2024-09-19T15:28:24Z",
        "number":  108024,
        "author":  "ericstj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:50:41Z",
        "body":  "### Description\n\nI heard feedback that folks felt the docs for `AddSingleton` lacked good information about when it would fail and why.\r\n\r\nI took a look and I agree.  It seems that whenever we have a method with a corresponding `Try` method, we should be sure to include the exception docs.  That will help folks if they need to use the `Try` method always, or if they would prefer to just use the non-try method for simpler code and treat the exception case as an invalid configuration.\r\n\n\n### Reproduction Steps\n\nHave a look at docs https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionserviceextensions.addsingleton?view=net-8.0\n\n### Expected behavior\n\nInformation about meaningful thrown exceptions exists.\n\n### Actual behavior\n\nNo information exists\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjNvaaA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Mv5ul",
                                           "createdAt":  "2024-09-19T15:38:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-19T15:38:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6M29po",
                                           "createdAt":  "2024-09-20T08:58:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "The difference between [AddSingleton](https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectionserviceextensions.addsingleton?view=net-8.0) and [TryAddSingleton](https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.extensions.servicecollectiondescriptorextensions.tryaddsingleton?view=net-8.0) is not like the difference between Int32.Parse and Int32.TryParse.\r\n\r\nTryAddSingleton is not a way to avoid exceptions that AddSingleton would throw.  Rather, the difference is in what happens if an implementation has already been added for the service.  In that case, TryAddSingleton returns false and does not add the new implementation.  In contrast, AddSingleton adds the new implementation regardless, so the service will then have two implementations; GetService(typeof(TService)) will return the last one registered, but GetService(typeof(IEnumerable\\\u003cTService\\\u003e)) will return both.\r\n",
                                           "updatedAt":  "2024-09-20T08:58:23Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Docs for members in DependencyInjection.Abstractions lack exception information.",
        "labels":  [
                       "documentation",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108132",
        "createdAt":  "2024-09-23T08:33:57Z",
        "number":  108132,
        "author":  "Danielku15",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7Yyng==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2024-09-23T10:46:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2024-09-23T15:16:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-09-27T22:47:13Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-09-28T10:43:37Z",
        "body":  "### Background and motivation\r\n\r\nArchitectures and principles can differ from project to project and when it comes to centralizing some aspects of your services the DI container is often a first point to handle these aspects. \r\n\r\nWhile I can understand that the extensions team doesn\u0027t want to add a central abstraction and implementation for systems like property injection [^1][^2][^3][^4], I cannot fully support this decision. Microsoft libraries often rather try to be not \"opinionated\" but it seems in this case we are lacking the right extension point for developers to add support for such a mechanism without bloating the core. It seems like an extreme measure to fully swap out the DI container because some additional customization aspects are needed.\r\n\r\nSo I was thinking of an alternative approach to tackle this topic: What if the default DI container would provide an extension point where developers or library authors can hook into the service creation? Such a callback would open the door for a nice range of extensions: \r\n\r\n* Injecting dependencies via properties.\r\n* Calling initialization methods after the constructor if certain interfaces are implemented (similar to Angulars OnInit)\r\n* Providing interceptors/decorators to services  [^6].\r\n\r\nThis is a similar strategy like EF Core[^5] follows. With interceptors the main library can be augmented and extended with new aspects without fully exchanging central bits (like the requiring to exchange the  provider). \r\n\r\n[^1]: https://github.com/dotnet/extensions/issues/3019\r\n[^2]: https://github.com/dotnet/extensions/issues/3136\r\n[^3]: https://github.com/dotnet/extensions/issues/3898\r\n[^4]: https://github.com/dotnet/extensions/issues/3136\r\n[^5]: https://learn.microsoft.com/en-us/ef/core/logging-events-diagnostics/interceptors\r\n[^6]: https://github.com/dotnet/runtime/issues/36021\r\n\r\n### API Proposal\r\n\r\nI am not fully sure about the API design itself, I\u0027m open for any alternative approach providing the same result.  \r\n\r\nAs main API proposal I would see: Add an option for a callback which the DI container calls [when a service was realized](https://github.com/dotnet/runtime/blob/b5833d2cd22f474485f74696609f6a6c3617cd15/src/libraries/Microsoft.Extensions.DependencyInjection/src/ServiceProvider.cs#L207-L226). \r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.DependencyInjection;\r\n\r\npublic delegate object? ServiceRealizedCallback(IServiceProvider serviceProvider, ServiceDescriptor \r\n serviceDescriptor, object? realizedService);\r\n\r\npublic class ServiceProviderOptions\r\n{\r\n    public ServiceRealizedCallback? OnServiceRealized { get; set; }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\ninterface IServiceInit { void OnInit(); }\r\nclass MyServiceWithPropertyDependencies : IServiceInit \r\n{\r\n    public required IOtherService OtherService {get;set;}\r\n    public IOptionalService? OptionalService {get;set;}\r\n    void OnInit() { OptionalService ??= OtherService?.OptionalService; }\r\n}\r\n\r\nvar services = new ServiceCollection();\r\nservices.AddSingleton\u003cMyServiceWithPropertyDependencies\u003e();\r\nservices.AddSingleton\u003cIOtherService, OtherService\u003e();\r\n\r\nvar serviceProvider = services.BuildServiceProvider(new ServiceProviderOptions\r\n{\r\n    OnServiceRealized = (sp, desc, obj)\r\n    {\r\n        if (obj != null)\r\n        {\r\n            obj = ApplyPropertyDependencyInjection(sp, desc, obj);\r\n        }\r\n        if (obj is IServiceInit init)\r\n        {\r\n            init.OnInit(); \r\n        }\r\n        return obj;\r\n    };\r\n});\r\nvar instance = serviceProviderFactory.GetRequiredService\u003cMyServiceWithPropertyDependencies\u003e();\r\n// instance.OtherService != null\r\n// instance.OptionalService == null\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nAd 1: The `ServiceProviderEngine` and default implementation could be made public or be exposed with another abstraction. I don\u0027t like this approach so much as it pulls quite many internals but its still a legit one. It might make it more complicated for others to extend the default behavior as the whole engine needs to be substituted. \r\n\r\nAd 2: Instead of a simple delegate we could also define an interface and allow multiple \"interceptors\" to be registered. This would allow an easier extension through extension methods and external libraries:\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.DependencyInjection;\r\n\r\npublic interface IServiceRealizationInterceptor\r\n{\r\n   object? OnServiceRealized(IServiceProvider serviceProvider, ServiceDescriptor \r\n serviceDescriptor, object? realizedService);\r\n}\r\n\r\npublic class ServiceProviderOptions\r\n{\r\n    public IList\u003cIServiceRealizationInterceptor\u003e Interceptors { get; } = new List\u003cIServiceRealizationInterceptor\u003e();\r\n}\r\n```\r\n\r\nWhile from an API design it might be better for extension, it has more performance and complexity implications (order of interceptors, performance with looping and interface calls, chicken-egg problem if people want to use DI already in the interceptors).\r\n\r\n\r\n### Risks\r\n\r\nThe DI container is a perfromance sensitive aspect in most applications. Poorly written interceptors could result in a performance degredation which is percieved as bad performance of the DI framework itself. \r\n\r\nUnexperienced users might not understand that misbehaviors might be caused by interceptors resulting in additional issues being raised against the core library while 3rd party extensions are to blame. With the .net hostbuilders its easy to hide things behind the scenes. \r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjeUPig==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6NHgFS",
                                           "createdAt":  "2024-09-23T08:34:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-23T08:34:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6N37Jd",
                                           "createdAt":  "2024-09-27T22:50:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODz6ejA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Danielku15",
                                                                               "createdAt":  "2024-09-28T00:46:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "julealgon",
                                           "body":  "Very strongly against this proposal as it just pushes people into the pit of failure. Property injection is an abomination that should never be used unless one is dealing with a super legacy framework that does not support proper constructor injection (even WebForms supports ctor-based injection now, so I don\u0027t even have an example anymore).\r\n\r\nThe example\u0027s `IServiceInit` interface is _especially_ egregious as it goes against the correctness-by-construction principle and introduces temporal/sequential coupling to whoever uses it.\r\n\r\nI hope this does not move forward.",
                                           "updatedAt":  "2024-09-27T22:50:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6N5Q-K",
                                           "createdAt":  "2024-09-28T10:43:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD0F97g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "chrisoverzero",
                                                                               "createdAt":  "2024-09-28T16:32:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-09-30T13:28:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Danielku15",
                                           "body":  "@julealgon I\u0027m hiding this reply behind an expander as it is rather a direct counter-statement to your opinion than adding much value to the general proposal discussion. I\u0027d like to emphasize some values of the .net foundation [code of conduct](https://dotnetfoundation.org/about/policies/code-of-conduct):\r\n\r\n* Being respectful of differing opinions, viewpoints, and experiences\r\n* Giving and gracefully accepting constructive feedback\r\n\r\nDifferent opinions count, same as yours. I think an API proposal like this is not the right forum to discuss architectural design opinions. There is a good reason this proposal aims to open for extension and not extend the main library. If somebody decides to allow aspects in their architectures its their choice. I see this from an \"open-closed priniciple\" standpoint and this proposal aims to allow easier extension without exchanging the whole DI container. The extensions are the legit choice of developers authoring their software. \r\n\r\n\u003cdetails\u003e\r\n\r\n\u003csummary\u003eExpand to see\u003c/summary\u003e\r\n\r\n## On your reply and this proposal\r\n\r\nIt seems you only heard \"property injection\" and completely ignored the nature of this proposal. Its fine if you don\u0027t want to use property injection. I am not proposing that property injection is added to the core of the framework or enabled by default. This proposal enables others, who want to go this path, to inject custom logic as per their needs. A \"my way or no way\" mentality is the death of any innovation. If you don\u0027t like it, don\u0027t use it and go alternative solution paths. It\u0027s fine.  \r\n\r\n## On property injection\r\n\r\nEven though I don\u0027t want to push for property injection in the base library, I want to have some words on this topic: \r\n\r\nIMO the Microsoft dependency injection framework is violating the `required` modified which was introduced in C# 11. A DI framework should construct services (or any objects) following its contract of construction. While this contract might be defined within a project specifically, the required modified is a contract built into the language. Still I\u0027m fine if the default DI container doesn\u0027t support and respect this contract. But not giving people a way of adding their needs sounds wrong to me. \r\n\r\nLooking at the market property injection is widely supported:\r\n\r\n* .net: [AutoFac](https://autofac.readthedocs.io/en/latest/register/prop-method-injection.html)\r\n* .net [Dryloc](https://github.com/dadhi/DryIoc/blob/master/docs/DryIoc.Docs/RegisterResolve.md#dryioc-glossary)\r\n* .net [lamar](https://jasperfx.github.io/lamar/guide/ioc/setter-injection.html#setter-injection)\r\n* .net [stashbox](https://z4kn4fein.github.io/stashbox/docs/configuration/registration-configuration#property--field-injection)\r\n* ASP.net Controllers core [fakes it](https://github.com/dotnet/aspnetcore/blob/6b9bba1472da66a9f02ae3cd0f564ad6e2bb5fff/src/Mvc/Mvc.Core/src/ControllerBase.cs#L143) via Service Locator Anti-Pattern \r\n* Angular [inject](https://angular.io/api/core/inject) - Here it is even hyped.\r\n\r\nIMO with nullable reference types and the required modifier in the language having property injection is perfectly fine. These mechanisms define the contract of constructing an object and no matter if you create an object with `new` or via DI container they should be filled. Whether it _should_ be used and in what cases it should be allowed is an architectural decision. It must not be dictated by a building block or a general purist mindset.\r\n\r\n## `IServiceInit`\r\n\r\n\u003e The example\u0027s IServiceInit interface is especially egregious as it goes against the correctness-by-construction principle and introduces temporal/sequential coupling to whoever uses it.\r\n\r\nYou are assuming too much here due to the simplistic nature of the example. \r\n\r\nWith constructor injection + property injection (assuming required) the object is correctly **constructed**. But depending on the nature of your object and your application architecture you still might want to run some code **after** your object is constructed. This logic is again depending on the nature of the object/service. The service can describe a contract on how to use it. Such hooks simply make the users life easier. e.g. there is also a big debate on having the possibility of async code in your constructor and rather making async initializers. \r\n\r\nIMO it is a bad practice to run too much logic inside the constuctor. But the DI container can still serve some as some central place for initialization aspects. e.g. For resilient systems DI container could centrally retry certain initializations depending on errors or even fallback to an alternative service implementation if the initialization of the standard service is currently not possible. Some people might prefer the OOP approach of encapsulating this logic into a special service implementation delegating to others through composition, and others might prefer the AOP approach of augmenting/decorating the implementation. Neither apporach is \"wrong\" by-design. \r\n\r\n* Angular: [OnInit](https://v17.angular.io/api/core/OnInit)\r\n* WinForms: [Load](https://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.form.load?view=windowsdesktop-8.0)\r\n* Wpf: [Loaded](https://learn.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.loaded?view=windowsdesktop-8.0\u0026redirectedfrom=MSDN) and [Initialized](https://learn.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.initialized?view=windowsdesktop-8.0#system-windows-frameworkelement-initialized)\r\n\r\n\u003c/details\u003e",
                                           "updatedAt":  "2024-09-28T10:43:36Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Hooking into service construction in default DI implementation",
        "labels":  [
                       "api-suggestion",
                       "discussion",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108874",
        "createdAt":  "2024-10-15T06:31:49Z",
        "number":  108874,
        "author":  "voroninp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T18:09:47Z",
        "body":  "### Background and motivation\n\nI expected that [this merge](https://www.jimmybogard.com/constrained-open-generics-support-merged-in-net-core-di-container/) would support resolving not only collections of constructed generic types but also a single instance.\n\nWhile `C` class can be resolved without any issue, I get exception when resolving an instance of class `D`:\n\n```\nvoid Main()\n{\n\tvar sc = new ServiceCollection();\n\tsc.AddSingleton(typeof(IFoo\u003c\u003e), typeof(Foo1\u003c\u003e));\n\tsc.AddSingleton(typeof(IFoo\u003c\u003e), typeof(Foo2\u003c\u003e));\n\tsc.AddSingleton\u003cC\u003e();\n        sc.AddSingleton\u003cD\u003e();\t\n\tvar sp = sc.BuildServiceProvider();\n\t\n\tvar c = sp.GetRequiredService\u003cC\u003e();\n\tvar d = sp.GetRequiredService\u003cD\u003e();\n}\n\npublic class C\n{\n\tpublic IFoo\u003cBar\u003e[] Foos {get;}\n\t\n\tpublic C(IEnumerable\u003cIFoo\u003cBar\u003e\u003e foos)\n\t{\n\t\tFoos = foos.ToArray();\n\t}\n}\n\npublic class D\n{\n\tpublic IFoo\u003cBar\u003e Foo { get; }\n\n\tpublic D(IFoo\u003cBar\u003e foo)\n\t{\n\t\tFoo = foo;\n\t}\n}\n\npublic class Bar\n{\n\tpublic Bar(int i)\n\t{\t\t\n\t}\n}\n\npublic interface IFoo\u003cT\u003e\n{\n\tvoid Throw();\n}\n\npublic sealed class Foo1\u003cT\u003e : IFoo\u003cT\u003e\n{\n\tpublic void Throw()\n\t{\n\t\tthrow new NotImplementedException();\n\t}\n}\n\npublic sealed class Foo2\u003cT\u003e : IFoo\u003cT\u003e\n\twhere T : IEquatable\u003cT\u003e\n{\n\tpublic void Throw()\n\t{\n\t\tthrow new InvalidOperationException();\n\t}\n}\n```\n\n### API Proposal\n\nMy expectation is that for a single instance the semantics should be equivalent to injecting a collection of valid instances and then taking the last one. But apparently this is not how container works currently.\n\n\n\n\n### API Usage\n\nNothing should change for api, only behavior.\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkBGRpg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6P36CW",
                                           "createdAt":  "2024-10-15T12:37:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-15T12:37:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6P4Viy",
                                           "createdAt":  "2024-10-15T13:24:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "Please post the exception you are getting for completeness and context.",
                                           "updatedAt":  "2024-10-15T13:24:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6P4918",
                                           "createdAt":  "2024-10-15T14:24:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "voroninp",
                                           "body":  "But why? First registration doesn\u0027t have constraint, so it can be provided to `D`",
                                           "updatedAt":  "2024-10-15T14:24:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6P5FzK",
                                           "createdAt":  "2024-10-15T14:33:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DrkWzrd",
                                           "body":  "\u003e But why? First registration doesn\u0027t have constraint, so it can be provided to `D`\n\nOh, now I understand what are you saying! Sorry, I understood that you were trying to get a `Foo` with a `Bar` built. My bad.",
                                           "updatedAt":  "2024-10-15T14:33:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6P6TPc",
                                           "createdAt":  "2024-10-15T16:00:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD2Suww==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-10-15T16:04:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "voroninp",
                                           "body":  "@julealgon , hm... weird. Looks like it was some glitch of Linqpad. I cannot reproduce. It just returns `Foo1\u003cBar\u003e` for `D`.\nI\u0027ll play a bit more with it. ",
                                           "updatedAt":  "2024-10-15T16:00:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QEEkR",
                                           "createdAt":  "2024-10-16T14:19:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD2j__g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "KalleOlaviNiemitalo",
                                                                               "createdAt":  "2024-10-16T14:20:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "voroninp",
                                           "body":  "@julealgon Heh, I was going to close it, but found a way how to reproduce. For me it looks like a bug, TBH.\n\nHere\u0027s the exception I got: \n\u003e ArgumentException: GenericArguments[0], \u0027UserQuery+Bar\u0027, on \u0027UserQuery+Foo2`1[T]\u0027 violates the constraint of type \u0027T\u0027.\n\nYou just need to comment out the line which resolves `C`:\n```\n//var c = sp.GetRequiredService\u003cC\u003e();\n```\n\nIt looks like when `C` gets resolved the collection of `IFoo\u003cT\u003e` is cached and then reused for resolving `D`.\nBut without it container tries the last registration `sc.AddSingleton(typeof(IFoo\u003c\u003e), typeof(Foo2\u003c\u003e));`  that cannot be used for `Bar` because violates constraint.\n",
                                           "updatedAt":  "2024-10-16T14:19:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QEX_6",
                                           "createdAt":  "2024-10-16T14:49:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD2kU_A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "voroninp",
                                                                               "createdAt":  "2024-10-16T14:51:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e It looks like when `C` gets resolved the collection of `IFoo\u003cT\u003e` is cached and then reused for resolving `D`.\n\u003e But without it container tries the last registration `sc.AddSingleton(typeof(IFoo\u003c\u003e), typeof(Foo2\u003c\u003e));` that cannot be used for `Bar` because violates constraint.\n\nYep... I can repro it just the way you said @voroninp . \n\nAdditionally, if you switch the registration order and register `Foo2` _before_ `Foo1`, the problem goes away.\n\nI\u0027m pretty convinced there is an actual bug here now, and this is not even a feature gap anymore. The behavior should _not_ change like that based on previous service resolutions: this is super unintuitive.",
                                           "updatedAt":  "2024-10-16T14:49:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QEZGm",
                                           "createdAt":  "2024-10-16T14:51:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD2kXZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-10-16T14:53:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "voroninp",
                                           "body":  "Well, I understand why changing the order works. The last always wins when a single instance is resolved.",
                                           "updatedAt":  "2024-10-16T14:51:31Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[API Proposal]: DI container should respect generic constraints when resolving single instance.",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109017",
        "createdAt":  "2024-10-18T15:03:46Z",
        "number":  109017,
        "author":  "mgravell",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_ymiA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Hofersa",
                                            "createdAt":  "2025-03-06T19:57:14Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-10-22T22:54:27Z",
        "body":  "### Background and motivation\n\nA lot of services exist that do not support keyed DI - they use `TryAddSingleton` etc internally, without any notion of keyed DI. Migrating those services to keyed-DI often requires the library-author to add additional keyed DI APIs for the purpose. This can also be a problem when we have a need for 2 instances of the same service to interact, such as decorator APIs - as discussed in [this \"extensions\" topic](https://github.com/dotnet/extensions/issues/5539)\n\nThis is a proposal for an alternative API that works around this problem.\n\n### API Proposal\n\nConsider an existing API of the form:\n\n``` c#\nservices.AddStackExchangeRedisCache(...);\n```\n\nThis adds SE.Redis as an `IDistributedCache` implementation on the default key. There is no current API to add SE.Redis as a keyed service, and the relevant type is not directly exposed, making it impossible to register as a keyed service manually.\n\nNow consider something along the lines of:\n\n``` c#\nservices.WithServiceKey(\"some key\").AddStackExchangeRedisCache(...);\n```\n\nor\n\n``` c#\nservices.WithServiceKey(\"some key\", keyed =\u003e keyed.AddStackExchangeRedisCache(...));\n```\n\nThe key point here is that a decorator implementation of `IServiceCollection` is created which changes the `Add` method to add the specified key on non-keyed services. The 2 alternative suggestions have different ways of expressing the lifetime of the decorator; arguably the second version is clearer as to \"here\u0027s the bits that are keyed\", but I don\u0027t care to die on any hills.\n\nA rough proposed implementation of the idea is shown below and kind-of works. There is a complication, however: if we take the `AddStackExchangeRedisCache` as an example, this may use multiple *other* services, and if done naively, they\u0027d all end up \"keyed\". I genuinely don\u0027t know whether keyed services work transitively, i.e. if a service `Foo` is keyed \"some key\", and requires sub-service `Bar` without specifying a key, does it look for a keyed-service (\"some key\") `Bar` and *then* fall back to the non-keyed service `Bar`, or does it only look for the non-keyed `Bar`? I wonder whether it might be necessary to say \"I want to configure a specific type with a key\", i.e.\n\n``` diff\n- services.WithServiceKey(\"some key\", keyed =\u003e keyed.AddStackExchangeRedisCache(...));\n+ services.WithServiceKey\u003cIDistributedCache\u003e(\"some key\", keyed =\u003e keyed.AddStackExchangeRedisCache(...));\n```\n\n\nIn this case, the decorator would only magically add the key *for matching service types* (presumably with an API to allow multiple types to be specified if required)\n\n---\n\nRough implementation, for reference only, doesn\u0027t consider the \"which service\" complication:\n\n``` c#\npublic static class ServiceCollectionExtensions\n{\n    public static IServiceCollection WithServiceKey(this IServiceCollection services, object key)\n        =\u003e new KeyedServiceCollection(services, key);\n}\ninternal sealed class KeyedServiceCollection(IServiceCollection services, object serviceKey) : IServiceCollection\n{\n    void ICollection\u003cServiceDescriptor\u003e.Add(ServiceDescriptor item) =\u003e services.Add(WithKey(item));\n    private ServiceDescriptor WithKey(ServiceDescriptor item)\n    {\n        if (!item.IsKeyedService)\n        {\n            if (item.ImplementationInstance is not null)\n            {\n                item = new(item.ServiceType, serviceKey, item.ImplementationInstance);\n            }\n            else if (item.ImplementationFactory is { } factory)\n            {\n                item = new(item.ServiceType, serviceKey, (provider, _) =\u003e factory(provider), item.Lifetime);\n            }\n            else if (item.ImplementationType is not null)\n            {\n                item = new(item.ServiceType, serviceKey, item.ImplementationType, item.Lifetime);\n            }\n            else\n            {\n                throw new NotSupportedException(\"Unable to map service to key\");\n            }\n        }\n        return item;\n    }\n    // other methods not shown, but simply forward via \"services\"\n}\n```\n\n\n### API Usage\n\n(shown above)\n\n### Alternative Designs\n\nThe alternative is to lean on library authors to add keyed-DI methods to all of their registration methods.\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkN3pig==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6QZzs0",
                                           "createdAt":  "2024-10-18T15:04:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-18T15:04:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QpP2k",
                                           "createdAt":  "2024-10-21T13:45:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "I would support this if this was also employed for other \"concerns\", such as lifetime itself.\n\n```csharp\nservices.WithLifetime(Singleton).WithKey(\"some key\").AddStackExchangeRedisCache(...);\n```\n\nIf this is _only_ implemented for changing the registration key, I believe it would just lead to a super inconsistent public API, where some things are done one way, while others are done a different way, even though they are similar concerns.\n\nThis raises the question on the standard `AddX` methods, which I would _also_ switch to this new style which is vastly more composable:\n```csharp\nservices.WithLifetime(Singleton).Add\u003cIMyService, MyService\u003e();\n```\n\nInstead of \n```csharp\nservices.AddSingleton\u003cIMyService, MyService\u003e();\n```\n\nIn this \"new API\", `Add` would use `Transient` by default if not overridden.\n\n`AddTransient`, `AddScoped` and `AddSingleton` would then be marked as deprecated.\n\nYes, this is a bit outside the scope of this proposal here, but I strongly believe they are super correlated to a point where the team should either do it all, or not do it.",
                                           "updatedAt":  "2024-10-21T13:45:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Qpap2",
                                           "createdAt":  "2024-10-21T14:01:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgravell",
                                           "body":  "@julealgon not sure I entirely agree on the correlation aspect; keyed-DI is a (relatively) new concept; adding the ability to migrate an existing pre-keyed-DI configuration API to operate against a key, seems (IMO) a desirable scenario; however, overriding the actual lifetime scopes of configured services feels much more dangerous. I also don\u0027t see a world where `AddSingleton` et al would be marked as deprecated - that would cause too much build noise? But: not my area; these aren\u0027t strong views - just my views as a DI consumer/publisher.",
                                           "updatedAt":  "2024-10-21T14:01:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QqCdP",
                                           "createdAt":  "2024-10-21T15:00:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "cc @benjaminpetit @halter73. Alternative registration that can work with both keyed- and unkeyed- services.\n\nMoving to future for now.",
                                           "updatedAt":  "2024-10-21T15:00:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Q3emK",
                                           "createdAt":  "2024-10-22T22:54:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEI1Urw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KalleOlaviNiemitalo",
                                                                               "createdAt":  "2025-01-25T09:30:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CarnaViire",
                                                                               "createdAt":  "2025-02-13T19:45:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Hofersa",
                                                                               "createdAt":  "2025-03-06T19:58:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "halter73",
                                           "body":  "I like this idea a lot. It seems immediately useful and would negate the need to duplicate a lot of `IServiceCollection` extension methods that don\u0027t really need to be explicitly aware of keyed services. I also agree that it\u0027s generally safer to override a service key than a service lifetime.\n\nHowever, I think the fact that keyed services aren\u0027t viral (meaning service constructors have to use `[FromKeyedService(...)]` explicitly to get keyed service even if they are being resolved as a keyed service themselves) makes this a lot less useful than it could be, and a potential footgun.\n\nIf a key oblivious `IServiceCollection` extension methods adds multiple required services that are interdependent, service resolution might fail because a keyless dependency won\u0027t be found. Worst case is that you have a lot more shared state than you intended which could have disastrous security implications.\n\nIt\u0027s also unfortunate that there\u0027s no way that I\u0027m aware of for a service that\u0027s aware it might be registered with a key to opt into resolving dependencies with the same key other than using `[ServiceKey]` with `GetRequiredKeyedService`. When looking around to see how common this pattern is, I found [GetRequiredOrKeyedRequiredService](https://github.com/dotnet/extensions/blob/424e9748b0a4815fd291f8a7e6a4fbfb76418bbd/src/Libraries/Microsoft.Extensions.Http.Diagnostics/Logging/Internal/ServiceProviderExtensions.cs#L19). It\u0027d be nice if there were a declarative way to ask for this.\n \nIf we could develop this idea to make resolving dependent keyed services viral, it would be more interesting. In the meantime, if you want that kind of functionality, you\u0027re probably best of creating a service provider per key with `BuildServiceProvider()`.",
                                           "updatedAt":  "2024-10-22T22:54:25Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[API Proposal]: Keyed services; alternative registration API for existing non-keyed services",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109480",
        "createdAt":  "2024-11-02T13:51:18Z",
        "number":  109480,
        "author":  "danzuep",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCLtKg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stefanpavlov",
                                            "createdAt":  "2025-05-08T20:50:51Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-04-28T14:09:53Z",
        "body":  "### Background and motivation\n\nThere are two features I would like to see added to `Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions`, both that can be added with a couple of extension methods.\n\nThe first is to be able to specify the lifetime when adding services to the collection. As a library maintainer, people have asked me to add a one line \"services.AddLibrary()\" extension method, but currently the easiest way to implement Transient, Singleton, or Scoped service lifetimes is to copy and paste registrations then rename. The service collection has a way to do this, but it is not exposed for external usage.\n\nThe other feature I\u0027d like to use is to be able to register classes that implent more than one interface. These limitations have been highlighted multiple times before, e.g. https://github.com/aspnet/DependencyInjection/issues/360.\n\nBoth of these limitations can be solved relatively easily, so why not make it accessible to everyone else? The usage is: `services.Add\u003cI1, I2, Concrete\u003e(serviceLifetime);`. I\u0027ve put a more comprehensive solution on [GitHub](https://github.com/danzuep/DependencyInjection.ServiceCollectionExtensions).\n\n### API Proposal\n\n```csharp\nnamespace Microsoft.Extensions.DependencyInjection.Extensions;\n\npublic static class ServiceCollectionExtensions\n{\n    public static IServiceCollection Add\u003cTService, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] TImplementation\u003e(\n        this IServiceCollection services,\n        ServiceLifetime serviceLifetime)\n        where TService : class\n        where TImplementation : class, TService =\u003e\n        services.Add\u003cTImplementation\u003e(serviceLifetime, typeof(TService));\n\n    public static IServiceCollection Add\u003cT1, T2, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] TImplementation\u003e(\n        this IServiceCollection services,\n        ServiceLifetime serviceLifetime)\n        where T1 : class\n        where T2 : class\n        where TImplementation : class, T1, T2 =\u003e\n        services.Add\u003cTImplementation\u003e(serviceLifetime, typeof(T1), typeof(T2));\n\n    private static IServiceCollection AddInheritedTypes(\n        IServiceCollection collection,\n        ServiceLifetime lifetime,\n        Type implementationType,\n        params Type[] inheritedTypes)\n    {\n        // Add a ServiceDescriptors for each service type the implemented type inherits from\n        if (inheritedTypes?.Length \u003e 0)\n        {\n            foreach (var serviceType in inheritedTypes)\n            {\n                // Ensure each implementationType is assignable to the serviceType\n                if (!serviceType.IsAssignableFrom(implementationType))\n                {\n                    throw new ArgumentException($\"{serviceType.Name} must be assignable from {implementationType.Name}.\");\n                }\n\n                // Add a new ServiceDescriptor for each interface of the service type using the previously registered concrete service\n                var serviceDescriptor = new ServiceDescriptor(serviceType, provider =\u003e provider.GetRequiredService(implementationType), lifetime);\n                collection.Add(serviceDescriptor);\n            }\n        }\n        return collection;\n    }\n\n    public static IServiceCollection Add\u003cTImplementation\u003e(\n        this IServiceCollection collection,\n        ServiceLifetime serviceLifetime,\n        Func\u003cIServiceProvider, TImplementation\u003e implementationFactory,\n        params Type[] inheritedTypes)\n        where TImplementation : class\n    {\n        ArgumentNullException.ThrowIfNull(implementationFactory);\n        var implementationType = typeof(TImplementation);\n        // Transient lifestyle breaks this pattern by definition, so use scoped instead\n        var concreteLifetime = serviceLifetime == ServiceLifetime.Transient ? ServiceLifetime.Scoped : serviceLifetime;\n        // Add the implemented service type ServiceDescriptor\n        collection.Add(new ServiceDescriptor(implementationType, implementationFactory, concreteLifetime));\n        // Add a ServiceDescriptor for each inherited service type\n        AddInheritedTypes(collection, serviceLifetime, implementationType, inheritedTypes);\n        return collection;\n    }\n\n    public static IServiceCollection Add\u003c[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] TImplementation\u003e(\n        this IServiceCollection serviceCollection,\n        ServiceLifetime serviceLifetime,\n        params Type[] inheritedTypes)\n    {\n        var implementationType = typeof(TImplementation);\n        // Transient lifestyle breaks this pattern by definition, so use scoped instead\n        var concreteLifetime = serviceLifetime == ServiceLifetime.Transient ? ServiceLifetime.Scoped : serviceLifetime;\n        // Add the implemented service type ServiceDescriptor\n        serviceCollection.Add(new ServiceDescriptor(implementationType, implementationType, concreteLifetime));\n        // Add a ServiceDescriptor for each inherited service type\n        AddInheritedTypes(serviceCollection, serviceLifetime, implementationType, inheritedTypes);\n        return serviceCollection;\n    }\n}\n```\n\n\n### API Usage\n\n```csharp\npublic static class Example\n{\n    public interface I1 { }\n    public interface I2 : I1 { }\n\n    public class Concrete : I2 { }\n\n    public static void RegisterConcrete(this IServiceCollection services, ServiceLifetime serviceLifetime) =\u003e\n        services.Add\u003cI1, I2, Concrete\u003e(serviceLifetime);\n}\n```\n\n\n### Alternative Designs\n\nAlternative options could include using a different method name, not including the overloads, not including ServiceLifetime etc.\n\nOne alternative could be to using a type of builder for fluent composability:\n```cs\nservices.Add\u003cConcrete\u003e().As\u003cI1\u003e().As\u003cI2\u003e().As\u003cI3\u003e().Singleton();\nservices.Add\u003cService\u003e().As\u003cI4\u003e().As\u003cI5\u003e().Scoped();\nservices.Add\u003cApi\u003e().As\u003cI6\u003e().As\u003cI7\u003e().Scoped();\n```\n\nAt that point you start to question why you wouldn\u0027t just use Autofac though, so let\u0027s just keep it simple.\n\n\n### Risks\n\nNo breaking changes, slight performance hit for people who use it but most people would be happy to at least have this as an option.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqP9Vlg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6SPha4",
                                           "createdAt":  "2024-11-03T19:03:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wvpm",
                                           "body":  "`Add\u003cTService, TImplementation\u003e` already exists in the form of [Add(IServiceCollection, ServiceDescriptor) ](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.extensions.servicecollectiondescriptorextensions.add?view=net-8.0#microsoft-extensions-dependencyinjection-extensions-servicecollectiondescriptorextensions-add(microsoft-extensions-dependencyinjection-iservicecollection-microsoft-extensions-dependencyinjection-servicedescriptor)). Note it does not have a default ServiceLifetime and it should not have one. Registering services Scopes by default is a very opinionated implementation.\n\nAs for registering one implementation type (or one instance) as multiple service types, in my personal experience this signals an implementation type that does too much and breaks the single responsibility principle. I doubt it\u0027s wise to encourage that by adding additional extension methods.\n\nIf you do find yourself in a situation where you often use this, you can already include said extension methods in your project. To me, it doesn\u0027t feel as something the dotnet framework should include.",
                                           "updatedAt":  "2024-11-03T19:03:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SQQhz",
                                           "createdAt":  "2024-11-04T02:47:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "Is your proposal that a class with `n` interface implementations be registered all at once on one line instead of `n` lines?\n\n```csharp\nConcrete impl = new();\n// before\nbuilder.RegisterX\u003cIFace1\u003e(impl);\nbuilder.RegisterX\u003cIFace2\u003e(impl);\nbuilder.RegisterX\u003cIFace3\u003e(impl);\n// after\nbuilder.RegisterX\u003cIFace1, IFace2, IFace3\u003e(impl);\n```",
                                           "updatedAt":  "2024-11-04T02:53:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SU5Kb",
                                           "createdAt":  "2024-11-04T15:02:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD5ZChA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wvpm",
                                                                               "createdAt":  "2024-11-04T21:12:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "julealgon",
                                           "body":  "I just don\u0027t see how such a proposal can scale using the current API of MEDI.\n\nFor something like this to be feasible, I think the entire API surface would have to be reconsidered to be more composable. The existing patterns are _extremely_ unflexible and these types of additions only add confusion to how it should be used.\n\nIt would be a nice addition though, conceptually. I\u0027ve needed it multiple times myself and it is a PITA to register it when using lambdas.\n\n---\n\n@colejohnson66 \n\u003e Is your proposal that a class with `n` interface implementations be registered all at once on one line instead of `n` lines?\n\u003e \n\u003e Concrete impl = new();\n\u003e // before\n\u003e builder.RegisterX\u003cIFace1\u003e(impl);\n\u003e builder.RegisterX\u003cIFace2\u003e(impl);\n\u003e builder.RegisterX\u003cIFace3\u003e(impl);\n\u003e // after\n\u003e builder.RegisterX\u003cIFace1, IFace2, IFace3\u003e(impl);\n\nThat looks simple enough because you are providing an instance (which is usually to be avoided). If you don\u0027t, this starts to become a mess and you are basically forced to register the concrete type itself:\n\n```csharp\n// before\nbuilder.RegisterX\u003cConcrete\u003e();\nbuilder.RegisterX\u003cIFace1\u003e(p =\u003e p.GetRequiredService\u003cConcrete\u003e());\nbuilder.RegisterX\u003cIFace2\u003e(p =\u003e p.GetRequiredService\u003cConcrete\u003e());\nbuilder.RegisterX\u003cIFace3\u003e(p =\u003e p.GetRequiredService\u003cConcrete\u003e());\n\n// after\nbuilder.RegisterX\u003cIFace1, IFace2, IFace3, Concrete\u003e();\n```\n\nThis is \"delegation\" is especially important when using scoped and singleton objects to ensure the lifetimes are honored.",
                                           "updatedAt":  "2024-11-04T15:02:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SY0J8",
                                           "createdAt":  "2024-11-05T00:30:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD5eaCw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wvpm",
                                                                               "createdAt":  "2024-11-05T10:24:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danzuep",
                                           "body":  "\u003e Registering services Scopes by default is a very opinionated implementation.\n\nYou\u0027re right, I\u0027ve removed the default as that was uncalled for.\n \n\u003e As for registering one implementation type (or one instance) as multiple service types, in my personal experience this signals an implementation type that does too much and breaks the single responsibility principle.\n\nIn my own software I agree, but recently I\u0027ve wanted this functionality when migrating client software and that part of the cleanup would come later. Also, it\u0027s not that rare for I2 to implement I1, then some services depend on I1 and others on I2.",
                                           "updatedAt":  "2024-11-05T02:16:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SY2hQ",
                                           "createdAt":  "2024-11-05T00:40:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danzuep",
                                           "body":  "\u003e Is your proposal that a class with `n` interface implementations be registered all at once on one line instead of `n` lines?\n\nAt the essense of the proposal, yes. The example you gave and the others in the [sample code](https://github.com/danzuep/DependencyInjection.ServiceCollectionExtensions) are trivial, but you can imagine with that if the Concrete implementation had ten dependencies which each had ten of their own dependencies etc. you end up with a **lot** of dependencies. Registering it this way for that scenario could save a lot of hassle (this is the scenario I faced in someone\u0027s code last week - bad I know).\n",
                                           "updatedAt":  "2024-11-05T00:40:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SY5-g",
                                           "createdAt":  "2024-11-05T00:55:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danzuep",
                                           "body":  "\u003e I think the entire API surface would have to be reconsidered to be more composable. The existing patterns are _extremely_ unflexible and these types of additions only add confusion to how it should be used.\n\nI think that\u0027s the bigger picture here, composablility. A builder pattern would do wonders.\n\n\u003e It would be a nice addition though, conceptually. I\u0027ve needed it multiple times myself and it is a PITA to register it when using lambdas.\n\nThis is the type of use case I\u0027m thinking of:\n```cs\nservices.AddTransient\u003cI1, I2, I3, Concrete\u003e((_) =\u003e new Concrete());\nservices.AddTransient\u003cI4, I5, Service\u003e(provider =\u003e new Service(provider.GetRequiredService\u003cI2\u003e()));\nservices.AddTransient\u003cI6, I7, Api\u003e(provider =\u003e new Api(provider.GetRequiredService\u003cI5\u003e()));\n```\n\nEven better if we could do this:\n```cs\nservices.AddTransient\u003cI1, I2, I3, Concrete\u003e();\nservices.AddTransient\u003cI4, I5, Service\u003e();\nservices.AddTransient\u003cI6, I7, Api\u003e();\n```\n\nOr this (cudos to Autofac for \u0027As\u0027):\n```cs\nservices.Add\u003cConcrete\u003e().As\u003cI1\u003e().As\u003cI2\u003e().As\u003cI3\u003e().Transient();\nservices.Add\u003cService\u003e().As\u003cI4\u003e().As\u003cI5\u003e().Transient();\nservices.Add\u003cApi\u003e().As\u003cI6\u003e().As\u003cI7\u003e().Transient();\n```\n\nAll of them are much simpler than the current ways!",
                                           "updatedAt":  "2024-11-05T01:57:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SZPd6",
                                           "createdAt":  "2024-11-05T02:23:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danzuep",
                                           "body":  "I actually really like that last one, but composability is a separate topic. \"Add\" would return a service builder object, then \"Singleton\", \"Scoped\" etc. would build and add the service to the collection.\n```cs\nservices.Add\u003cConcrete\u003e().As\u003cI1\u003e().As\u003cI2\u003e().As\u003cI3\u003e().Singleton();\nservices.Add\u003cService\u003e().As\u003cI4\u003e().As\u003cI5\u003e().Scoped();\nservices.Add\u003cApi\u003e().As\u003cI6\u003e().As\u003cI7\u003e().Scoped();\n```",
                                           "updatedAt":  "2024-11-20T00:46:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UEeC8",
                                           "createdAt":  "2024-11-18T21:47:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "[danzuep](https://github.com/danzuep) thanks for the issue; please update it to what you think is the preferred API - e.g. adding `As\u003cT\u003e`. ",
                                           "updatedAt":  "2024-11-18T21:47:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UPdix",
                                           "createdAt":  "2024-11-20T00:57:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danzuep",
                                           "body":  "@steveharter I\u0027ve updated the proposal to be just two new public methods added to the existing extensions library. More could be added on top of that that aid with usage (e.g. `services.AddSingleton\u003cI1, I2, Concrete\u003e();`), but I\u0027ll leave that up to the team to decide.",
                                           "updatedAt":  "2024-11-20T00:57:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6o46kx",
                                           "createdAt":  "2025-04-27T14:42:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "XmmShp",
                                           "body":  "This is exactly what has been troubling me recently, and I\u0027m glad to see people in the .NET community who are also working on solving this issue. For me, the main problem arises with objects that have Singleton or Scoped lifetimes. If we use the following code:\n\n```csharp\nservices.AddSingleton\u003cI1, Class\u003e();\nservices.AddSingleton\u003cI2, Class\u003e();\n```\n\nClearly, when we try to retrieve objects of `I1` or `I2` from the dependency injection container, they don\u0027t actually point to the same instance. This can cause a lot of trouble in scenarios where data sharing is required.\n\nI\u0027ve read through all your discussions, and personally, I think `services.AddTransient\u003cI1, I2, I3, Concrete\u003e();` would be sufficient. So, I vote for this design. (Though I believe that if it becomes part of the standard library, we\u0027ll probably end up creating 9 or 10 overloads filled with type parameters like T1, T2, T3... just kidding ;) ).",
                                           "updatedAt":  "2025-04-27T14:42:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6o_1WW",
                                           "createdAt":  "2025-04-28T13:46:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "You can use `services.AddSingleton(provider =\u003e (I2)provider.GetRequiredService\u003cI1\u003e())` — maybe even wrapping that in an extension method, but a built-in could be nice.",
                                           "updatedAt":  "2025-04-28T14:09:53Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "[API Proposal]: Allow Dependency Injection registration of classes that implent more than one interface",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110926",
        "createdAt":  "2024-12-24T08:30:33Z",
        "number":  110926,
        "author":  "Li7ye",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-30T15:07:38Z",
        "body":  "### Background and motivation\n\nI\u0027m a framework programmer. Usually, I often add extension method for `IServiceCollection`. But sometimes, my extension method is required to know `IServiceCollection` state. \n\nFor instance,  `services.AddUnitOfWork()` need to know all `DbContextOptions` in services and update `DbContextOptions`. if `services.AddUnitOfWork()` is added after registration of all dbcontexts, it can work properly. Otherwise, can get side effect(unexpected behavior). Some users maybe call `services.AddUnitOfWork` before or between dbcontexts registration by accident, because `AddUnitOfWork` is built on `IServiceCollection` and there is no restriction.\n``` csharp\n// work properly\nservices.AddDbContext\u003cDB1\u003e();\nservices.AddDbContext\u003cDB2\u003e();\nservices.AddUnitOfWork();\n\n// side effect\nservices.AddDbContext\u003cDB1\u003e();\nservices.AddUnitOfWork();\nservices.AddDbContext\u003cDB2\u003e();\n\n// can\u0027t work\nservices.AddUnitOfWork();\nservices.AddDbContext\u003cDB1\u003e();\nservices.AddDbContext\u003cDB2\u003e();\n\n```\n\n### API Proposal\n\nI suggest has an interface can be invoked after all services registered but before build to provider. \n\n```csharp\n\npublic interface IPostServiceRegistration\n{\n      void AddService(IServiceCollection services);\n}\n```\n\n### API Usage\n\n```csharp\nservices.AddPostRegistration\u003cMyPostRegistration\u003e()\n```\nHence `services.AddUnitOfWork` can use the new feature to register own services or add validation, and can be added out of order by user. User only know I need to call this method without other knowledge.\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmMN5_Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6YsGWY",
                                           "createdAt":  "2024-12-25T07:59:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e For instance, services.AddUnitOfWork() need to know all DbContextOptions in services and update DbContextOptions.\n\nCan you update the options by registering a generic service for `typeof(IDbContextOptionsConfiguration\u003c\u003e)`?",
                                           "updatedAt":  "2024-12-25T07:59:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YsReu",
                                           "createdAt":  "2024-12-25T09:15:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Li7ye",
                                           "body":  "\u003e This sounds like an abuse of the service locator?\n\n@colejohnson66 Understand. To be honest, this feature is not for most developers. If package author can follow the convention, the issue would go away. For example,   `service.AddMvc()` return `IMvcBuilder`, if someone want to extend MVC feature, he can add extension method on `IMvcBuilder` rather than `IServiceCollection`.  But in real world, most return type is `IServiceCollection` after calling `service.AddXXX()`.",
                                           "updatedAt":  "2024-12-25T09:15:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YsTDF",
                                           "createdAt":  "2024-12-25T09:28:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Li7ye",
                                           "body":  "\u003e \u003e For instance, services.AddUnitOfWork() need to know all DbContextOptions in services and update DbContextOptions.\n\u003e \n\u003e Can you update the options by registering a generic service for `typeof(IDbContextOptionsConfiguration\u003c\u003e)`?\n\nIf my understand is correct, you means [Options Pattern](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-9.0)? \nIf yes, `DbContextOptions` is not generic options. EF Core need to register [DbContextOptions\u003cTDbcontext\u003e](https://github.com/dotnet/efcore/blob/85c1c352f59270a99cf2ab6caab68ed99551547b/src/EFCore/Extensions/EntityFrameworkServiceCollectionExtensions.cs#L1130-L1134) in DI.\n\n",
                                           "updatedAt":  "2024-12-25T09:28:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YsWmY",
                                           "createdAt":  "2024-12-25T09:58:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "@Li7ye, [IDbContextOptionsConfiguration\\\u003cTContext\\\u003e](https://learn.microsoft.com/dotnet/api/microsoft.entityframeworkcore.infrastructure.idbcontextoptionsconfiguration-1?view=efcore-9.0) was added in \u003chttps://github.com/dotnet/efcore/pull/32518\u003e and shipped in Entity Framework Core 9.0.0.\n\nIn [EntityFrameworkServiceCollectionExtensions](https://github.com/dotnet/efcore/blob/v9.0.0/src/EFCore/Extensions/EntityFrameworkServiceCollectionExtensions.cs), all AddDbContext methods eventually call AddCoreServices, which registers DbContextOptions\\\u003cTContextImplementation\\\u003e as a service with a factory delegate that calls CreateDbContextOptions\\\u003cTContextImplementation\\\u003e, which gets all IDbContextOptionsConfiguration\\\u003cTContext\\\u003e services from the IServiceProvider and calls their Configure methods.  Typically, the IDbContextOptionsConfiguration\\\u003cTContext\\\u003e service is registered by ConfigureDbContext\\\u003cTContext\\\u003e, and this registration applies only to the specific TContext type; but I think you could bypass that and register a service for the IDbContextOptionsConfiguration\\\u003c\\\u003e open generic type instead, so that it would apply to every TContext.",
                                           "updatedAt":  "2024-12-25T10:11:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YsoHi",
                                           "createdAt":  "2024-12-25T10:55:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEAMwPA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Li7ye",
                                                                               "createdAt":  "2024-12-26T01:52:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e ```csharp\n\u003e public interface IPostServiceRegistration\n\u003e {\n\u003e       void AddService(IServiceCollection services);\n\u003e }\n\u003e ```\n\nIt looks like this API proposal is not complete and one would also need to add at least the following:\n\n```csharp\nnamespace Microsoft.Extensions.DependencyInjection\n{\n    public partial class ServiceCollectionServiceExtensions\n    {\n        public static IServiceCollection AddPostRegistration\u003cT\u003e(\n            this IServiceCollection services)\n            where T : IPostServiceRegistration, new();\n    }\n}\n```\n\nAnd perhaps also:\n\n```csharp\nnamespace Microsoft.Extensions.DependencyInjection\n{\n    public partial class ServiceCollectionServiceExtensions\n    {\n        public static IServiceCollection AddPostRegistration(\n            this IServiceCollection services,\n            IPostServiceRegistration registration);\n    }\n}\n```\n\nAnd designs for:\n\n- How would the IPostServiceRegistration implementations be stored in the IServiceCollection?  Possibilities:\n  - a ServiceDescriptor even though the IPostServiceRegistration is not intended to be queried from IServiceProvider\n  - a new interface implemented by the same class as IServiceCollection; if that interface is not implemented, then AddPostRegistration throws\n  - ConditionalWeakTable\\\u003cIServiceCollection, some new type\\\u003e\n- How does this work when a third-party DI container is used?  What calls the IPostServiceRegistration.AddService methods?\n  - the third-party DI library calls them; then M.E.DI must define API for locating them\n  - M.E.DI calls them before third-party DI takes control; may be difficult\n- Are the IPostServiceRegistration.AddService methods given the original IServiceCollection, or a copy of it?  This affects what happens if multiple IServiceProvider instances are built from the same IServiceCollection.",
                                           "updatedAt":  "2024-12-25T10:56:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Yspgh",
                                           "createdAt":  "2024-12-25T11:09:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEAMwOA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Li7ye",
                                                                               "createdAt":  "2024-12-26T01:52:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "The new IPostServiceRegistration interface feels a bit unnecessary; Action\\\u003cIServiceCollection\\\u003e could be used instead.  This change would result in shorter C# code in the AddPostRegistration call.  Interfaces make sense in IConfigureOptions\\\u003cTOptions\\\u003e etc. because they allow other services to be injected to the constructor of the class that implements the interface; but IPostServiceRegistration would be used before the service provider is built, so the services are not yet available for injection.",
                                           "updatedAt":  "2024-12-25T11:09:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ytg7a",
                                           "createdAt":  "2024-12-26T01:51:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Li7ye",
                                           "body":  "\u003e this registration applies only to the specific TContext type; but I think you could bypass that and register a service for the IDbContextOptionsConfiguration\u003c\u003e open generic type instead, so that it would apply to every TContext.\n\nThanks for you feedback, because of some restrictions, I can\u0027t upgrade EF Core to 9.0. And, EF Core is one of the examples.\nCurrently, the workaround is that use code analyzer to relieve this issue and it brings more maintenance cost :( ",
                                           "updatedAt":  "2024-12-26T01:55:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Yw3n9",
                                           "createdAt":  "2024-12-26T16:51:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "This is similar to: [[API Proposal]: OnBeforeBuild Delegate - Add a hook into the ServiceCollection, allowing execution of code just before building the ServiceProvider #84847]( https://github.com/dotnet/runtime/issues/84847) and should be reconciled.",
                                           "updatedAt":  "2024-12-26T16:51:31Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[API Proposal]: ServiceCollection support post service registration",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111228",
        "createdAt":  "2025-01-09T09:49:13Z",
        "number":  111228,
        "author":  "alrz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_0Ujw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aromaa",
                                            "createdAt":  "2025-01-09T10:57:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tecAmoRaller",
                                            "createdAt":  "2025-03-07T13:09:41Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-01-13T15:21:37Z",
        "body":  "### Background and motivation\n\nAs an alternative to https://github.com/dotnet/runtime/issues/101889 this API would be only exposed as a single method taking the delegate as a type arg. This will avoid array allocation and boxing for the args, and also typechecks that the callsite matches the factory.\n\n### API Proposal\n\n```csharp\nnamespace Microsoft.Extensions.DependencyInjection\n{\n  public static class ActivatorUtilities\n  {\n+    public static T CreateFactoryOf\u003cT\u003e() where T : Delegate;\n  }\n}\n```\n\n\n### API Usage\n\n```csharp\n// IServiceProvider is specially recognized\nvar f1 = ActivatorUtilities.CreateFactoryOf\u003cFunc\u003cIServiceProvider, TArg, TResult\u003e\u003e();\n// but it\u0027s optional when not using DI\nvar f2 = ActivatorUtilities.CreateFactoryOf\u003cFunc\u003cTArg, TResult\u003e\u003e(); \n// Just like Lambda\u003cT\u003e you could choose to use a custom delegate type\nvar f3 = ActivatorUtilities.CreateFactoryOf\u003cCustomDelegate\u003e();\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmjizpA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Z2QTV",
                                           "createdAt":  "2025-01-09T19:55:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "I assume this will be rejected for same reasons as #36194.",
                                           "updatedAt":  "2025-01-09T19:55:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aODv9",
                                           "createdAt":  "2025-01-13T15:12:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "@alrz can you provide a prototype of this to verify the expected perf gains? I assume no boxing and no array allocation would be needed.\n",
                                           "updatedAt":  "2025-01-13T15:12:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aOLOk",
                                           "createdAt":  "2025-01-13T15:21:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alrz",
                                           "body":  "\u003e @alrz can you provide a prototype of this to verify the expected perf gains? I assume no boxing and no array allocation would be needed.\n\u003e \n\nTo be clear that\u0027s not the main goal here, it\u0027s the typechecking between construction and the callsite.",
                                           "updatedAt":  "2025-01-13T15:21:20Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: `ActivatorUtilities.CreateFactoryOf\u003cTDelegate\u003e`",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113563",
        "createdAt":  "2025-03-15T05:36:36Z",
        "number":  113563,
        "author":  "mohammadKhalafi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODArEzw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "julealgon",
                                            "createdAt":  "2025-03-17T19:15:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "poizan42",
                                            "createdAt":  "2025-03-17T20:57:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2025-03-31T10:11:57Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-08-01T18:09:50Z",
        "body":  "Currently, in .NET, when using IServiceScope, if multiple services registered in the scope implement IDisposable or IAsyncDisposable, an exception in Dispose() or DisposeAsync() prevents the remaining services from being disposed when the scope is being disposed.\n\nThis can lead to memory leaks and unreleased resources",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOo-ilTw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ify2v",
                                           "createdAt":  "2025-03-15T05:37:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-15T05:37:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ij224",
                                           "createdAt":  "2025-03-16T10:02:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "IDisposable.Dispose() should not throw exceptions, according to [CA1065: Do not raise exceptions in unexpected locations](https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1065).  Windows Communication Foundation (WCF) is known to violate this, though.\n\nIf service A depends on service B, and A.Dispose() throws but B.Dispose() is then called, it might cause problems later if A continues to use B.  For example, B rents memory from a pool, A starts an asynchronous operation that writes to the memory, A.Dispose() fails to abort the operation, B.Dispose() returns the memory to the pool, and C rents the same memory while the operation started by A is still writing to it.  For that reason, I think M.E.DI should not be changed to continue disposal of services after the first exception, by default; but an opt-in feature would be possible.  If the opt-in were in [ServiceProviderOptions](https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.serviceprovideroptions?view=net-9.0-pp), it would not need to be supported in other IServiceProvider implementations.",
                                           "updatedAt":  "2025-03-16T10:02:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iwWBa",
                                           "createdAt":  "2025-03-17T19:15:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@mohammadKhalafi can\u0027t you create a decorator for your problematic type that wraps `Dispose` in a try/catch block?\n\nI would hate to see a framework/extensions class be updated to accomodate such a bad practice, as it would basically indirectly encourage its use.",
                                           "updatedAt":  "2025-03-17T19:15:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j0RuL",
                                           "createdAt":  "2025-03-24T14:48:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "I think an opt-in option makes sense, however it is low-priority at this time since it has not been requested in the past, at least based on some simple searches.\n\nMoving to future to gauge interest \\ feasibility.",
                                           "updatedAt":  "2025-03-24T14:48:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j3Ewl",
                                           "createdAt":  "2025-03-24T18:58:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mohammadKhalafi",
                                           "body":  "@julealgon \n@steveharter \n\nI think it\u0027s actually a good thing for the framework to provide an escape hatch for cases where a bad practice exists in an application—especially when it might come from an external library.\n\nAt the very least, when creating a scope, there could be an option that gives full control over disposal to the user. This way, disposal of the scope wouldn’t automatically dispose of all the disposables resolved from it, allowing users to manage disposal as they see fit.",
                                           "updatedAt":  "2025-03-24T18:58:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j6KVP",
                                           "createdAt":  "2025-03-25T03:02:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I imagine M.E.DI would define some interface IDisposableTracker : IDisposable { void Add(IDisposable); } and let the application provide an instance of that; then the container would add disposable services to that as it creates them.  Disposing the IServiceScope would dispose the IDisposeTracker, and that would be responsible of disposing the services and handling exceptions.\n\nUnclear about this scheme:\n\n- How does the application provide the IDisposableTracker: is it a parameter of CreateScope or a property of ServiceProviderOptions, or can it be registered as a service itself?  In the latter case, can other services be injected to it?\n- If one later wants to extend this so that the IDisposableTracker is also given some information from the ServiceDescriptor (especially ServiceType and ServiceKey), how does one do that without breaking the API?\n- What happens if IDisposableTracker.Add calls back to the IServiceProvider, requesting another service from there?\n- If IDisposableTracker.Add throws an exception, how is that handled?  Does it cause M.E.DI to immediately dispose the service that could not be added?",
                                           "updatedAt":  "2025-03-25T03:02:12Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "IServiceScope.Dispose() and DisposeAsync() should not stop disposing other services if one throws an exception",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116285",
        "createdAt":  "2025-06-04T00:24:42Z",
        "number":  116285,
        "author":  "dombrovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-14T18:09:45Z",
        "body":  "### Background and motivation\n\nCurrently, `IServiceScope` exposes `IServiceProvider`, which encourages retrieving arbitrary services by type — a form of the [service locator antipattern](https://martinfowler.com/articles/injection.html#ServiceLocator). This makes testing, reasoning about dependencies, and composition harder.\n\nBy introducing `IServiceScope\u003cTDependency\u003e`, we can:\n- Narrow the scope to a single, expected dependency.\n- Encourage better dependency design and inversion of control.\n- Improve discoverability and safety (e.g., GetRequiredService() will always return a TDependency).\n- Maintain compatibility with existing IServiceScope.\n\nThis API may provide a simple, opt-in mechanism to move away from open-ended service resolution and guide developers toward cleaner, more maintainable DI practice.\n\n### API Proposal\n\n```csharp\npublic interface IServiceProvider\u003cout TDependency\u003e\n    where TDependency : class\n{\n    TDependency GetRequiredService();\n    TDependency? GetService();\n    IEnumerable\u003cTDependency\u003e GetServices();\n}\n\npublic interface IServiceScope\u003cout TDependency\u003e : IServiceProvider\u003cTDependency\u003e, IDisposable\n    where TDependency : class\n{\n}\n\npublic interface IAsyncServiceScope\u003cout TDependency\u003e : IServiceProvider\u003cTDependency\u003e, IAsyncDisposable\n    where TDependency : class\n{\n}\n\npublic interface IServiceScopeFactory\u003cout TDependency\u003e\n    where TDependency : class\n{\n    IServiceScope\u003cTDependency\u003e CreateScope();\n    IAsyncServiceScope\u003cTDependency\u003e CreateAsyncScope();\n}\n```\nOptional extension methods:\n```csharp\npublic static class ServiceProviderTypedServiceScopeExtensions\n{\n    public static IServiceScope\u003cT\u003e CreateScope\u003cT\u003e(this IServiceProvider serviceProvider)\n        where T : class =\u003e\n        serviceProvider.GetRequiredService\u003cIServiceScopeFactory\u003cT\u003e\u003e().CreateScope();\n\n    public static IAsyncServiceScope\u003cT\u003e CreateAsyncScope\u003cT\u003e(this IServiceProvider serviceProvider)\n        where T : class =\u003e\n        serviceProvider.GetRequiredService\u003cIServiceScopeFactory\u003cT\u003e\u003e().CreateAsyncScope();\n}\n```\n\n### API Usage\n\n```csharp\npublic class FooWorker : BackgroundService\n{\n    private readonly IServiceScopeFactory\u003cFooService\u003e _fooServiceScopeFactory;\n\n    // Inject IServiceScopeFactory\u003cFooService\u003e instead of IServiceScopeFactory\n    public FooWorker(IServiceScopeFactory\u003cFooService\u003e fooServiceScopeFactory)\n    {\n        _fooServiceScopeFactory = fooServiceScopeFactory;\n    }\n\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        while (!stoppingToken.IsCancellationRequested)\n        {\n            using var scope = _fooServiceScopeFactory.CreateScope();\n\n            var fooService = scope.GetRequiredService();  // only instance of FooService is possible to resolve from created scope.\n\n            await fooService.DoWorkAsync(stoppingToken);\n\n            await Task.Delay(TimeSpan.FromMinutes(1), stoppingToken);\n        }\n    }\n}\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n1. Redundancy and API Duplication\n`IServiceScope\u003cT\u003e` introduces a parallel abstraction to `IServiceScope`, potentially confusing developers with multiple similar-sounding scope APIs.\nRisk: Developers may not understand when to use one over the other, leading to inconsistent codebases.\n\n2. Fragmented Dependency Resolution\nThe existing `IServiceScope` provides access to all services; IServiceScope\u003cT\u003e restricts access to only one type (or service graph rooted at one type).\nHarder to resolve additional services in the same scope if needed, possibly leading to multiple overlapping scopes and duplicated lifetimes.\n\n3. Potential ambiguity in Scope Ownership.\nDevelopers might assume `IServiceScope\u003cT\u003e` only disposes T, but in reality it also disposes all scoped dependencies created during resolution of T. Could lead to incorrect assumptions about object lifetimes and side effects.\n\n4. Discoverability and Learning Curve\n`IServiceScope` is widely documented and familiar in ASP.NET Core and .NET applications.\nAdding `IServiceScope\u003cT\u003e` increases the surface area and learning burden, especially for new developers.\n\n5. Reduced Flexibility\nTyped scopes enforce a compile-time contract on what can be resolved, improving safety—but potentially reducing adaptability in dynamic scenarios.\nDevelopers might find it harder to support conditional logic or resolve supporting services that weren’t originally anticipated in the scope design.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtwQrag==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6vHBsP",
                                           "createdAt":  "2025-06-04T00:25:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-04T00:25:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63BCtq",
                                           "createdAt":  "2025-07-14T18:09:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@halter73 can chime in here as I think he initially implemented this, but I don\u0027t believe `IServiceScope` was meant for resolving services, but instead for managing lifetime of resolved services.  I suspect it includes the `ServiceProvider` for use by DI itself to resolve services - not the end user.",
                                           "updatedAt":  "2025-07-14T18:09:30Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal] Add IServiceScope\u003cT\u003e to promote type-safe scoped resolution and reduce service locator usage",
        "labels":  [
                       "question",
                       "api-suggestion",
                       "feature-request",
                       "area-Extensions-DependencyInjection"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118429",
        "createdAt":  "2025-08-06T06:54:45Z",
        "number":  118429,
        "author":  "voroninp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-31T17:20:33Z",
        "body":  "### Background and motivation\n\nWhen we inject logger `ILogger\u003cFoo\u003e` into `Foo` we are effectively using `typeof(Foo)` as a key. (With the difference that the key is not statically defined, as is the case with the keyed service.)\nWe can have the similar behavior using `[FromKeyedServicesAttribute(typeof(Foo))] ISomeDependency keyedDependency`\n\n### API Proposal\n\nI suggest introducing a generic version of `FromKeyedServices` attribute for the convenience:\n```\npublic class FromKeyedServicesAttribute\u003cTTypeAsKey\u003e() : FromKeyedServices(typeof(TTypeAsKey));\n```\n\n\n### API Usage\n\n```\npublic class Foo([FromKeyedServices\u003cFoo\u003e] IBar bar)\n{\n...\n}\n```\n\n### Alternative Designs\n\nAs `FromKeyedServicesAttribute` is not sealed, I can introduce it in my codebase or as a separate NuGet package.\n\n### Risks\n\nWell, it\u0027s obviously more code to maintain, and then probably we need more utility methods for registration:\n```\nservices.ForKey\u003cFoo\u003e().AddScoped\u003cIBar, Bar\u003e();\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvKMdHA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc68O3h7",
                                           "createdAt":  "2025-08-06T08:05:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "Possible related and/or duplicate issues:\n- https://github.com/dotnet/runtime/issues/99084\n- https://github.com/dotnet/runtime/issues/113585\n- https://github.com/dotnet/runtime/pull/114929",
                                           "updatedAt":  "2025-08-06T08:05:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68WH16",
                                           "createdAt":  "2025-08-06T12:13:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-06T12:13:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68m29O",
                                           "createdAt":  "2025-08-07T13:53:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Because Microsoft.Extensions.DependencyInjection.Abstractions targets .NET Standard and .NET Framework too, and .NET Framework does not support generic attributes, there would have to be some sort of `#if` around the definition.  There is precedent for that in Microsoft.Extensions.Http.\n\nA generic JsonDerivedTypeAttribute\\\u003cT\\\u003e was rejected in \u003chttps://github.com/dotnet/runtime/issues/71712#issuecomment-1176445889\u003e.  The same rationale may apply to FromKeyedServicesAttribute\\\u003cTKey\\\u003e as well.  Although the .NET Runtime doesn\u0027t currently provide any source generators that recognize FromKeyedServicesAttribute and would have to recognize FromKeyedServicesAttribute\\\u003cTKey\\\u003e, there are third-party source generators listed in \u003chttps://github.com/dotnet/runtime/issues/82679#issue-1599860333\u003e.  On the other hand, I don\u0027t know whether they support Type objects as keys anyway; [Jab doesn\u0027t](https://github.com/pakrym/jab/blob/89b21bd61955f92f8af5dcd35309c9707d9d28e5/src/Jab/DiagnosticDescriptors.cs#L73-L75).",
                                           "updatedAt":  "2025-08-07T13:53:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68nGsu",
                                           "createdAt":  "2025-08-07T14:10:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "voroninp",
                                           "body":  "\u003e  .NET Framework does not support generic attributes\n\nDoesn\u0027t it? I thought CLR supported them from the introduction of generics. But C# could not work with the generic attributes.",
                                           "updatedAt":  "2025-08-07T14:10:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68ox0c",
                                           "createdAt":  "2025-08-07T15:52:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgSjxg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2025-08-31T17:02:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "GenericAttributeOnNetFx.csproj (but C# 11 is not supported on .NET Framework):\n\n```XML\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\n\n  \u003cPropertyGroup\u003e\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\n    \u003cTargetFramework\u003enet48\u003c/TargetFramework\u003e\n    \u003cLangVersion\u003e11\u003c/LangVersion\u003e\n  \u003c/PropertyGroup\u003e\n\n\u003c/Project\u003e\n```\n\nProgram.cs:\n\n```csharp\nusing System;\nusing System.Reflection;\n\nnamespace GenericAttributeOnNetFx\n{\n    internal class G\u003cT\u003e : Attribute\n    {\n    }\n\n    [G\u003cint\u003e]\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            foreach (Attribute attr in typeof(Program).GetCustomAttributes())\n            {\n                Console.WriteLine(attr.GetType());\n            }\n        }\n    }\n}\n```\n\nIt throws NotSupportedException from System.RuntimeTypeHandle.CreateCaInstance, which seems to be a native method declared at \u003chttps://github.com/microsoft/referencesource/blob/f7df9e2399ecd273e90908ac11caf1433e142448/mscorlib/system/runtimehandles.cs#L244-L247\u003e and called from \u003chttps://github.com/microsoft/referencesource/blob/f7df9e2399ecd273e90908ac11caf1433e142448/mscorlib/system/reflection/customattribute.cs#L1730\u003e.",
                                           "updatedAt":  "2025-08-07T21:06:13Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[API Proposal]: Generic version of FromKeyedServices attribute.",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-DependencyInjection",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119646",
        "createdAt":  "2025-09-12T14:59:45Z",
        "number":  119646,
        "author":  "iatsuta",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-12T15:00:32Z",
        "body":  "### Background and motivation\n\nThe default .NET DI container (Microsoft.Extensions.DependencyInjection) provides minimal validation during BuildServiceProvider, such as ValidateScopes and ValidateOnBuild. However, it lacks a standardized, extensible mechanism for developers to validate service registrations at build time.\n\nCurrently, developers must implement custom validation and invoke it manually after configuring services. This approach is error-prone and easy to forget, leading to runtime errors from misconfigured dependencies, such as:\n\nDuplicate singleton services used in constructors expecting a single instance.\n\nMissing required services for dependent constructors.\n\nOther potential DI misconfigurations.\n\nBy introducing a standard IServiceCollectionValidator interface, the container could optionally:\n\nAggregate all validation errors during BuildServiceProvider.\n\nSupport multiple custom validators.\n\nMaintain full backward compatibility: projects that do not use validators remain unaffected.\n\nThis would provide early feedback on misconfigurations, reduce runtime errors, and align with the existing philosophy of optional validation in the DI container.\n\n### API Proposal\n\n```csharp\n\nnamespace Microsoft.Extensions.DependencyInjection;\n\npublic interface IServiceCollectionValidator\n{\n    ValidationResult Validate(IServiceCollection services, object? options);\n}\n\npublic static class ServiceCollectionValidationExtensions\n{\n    public static IServiceCollection AddValidator\u003cTValidator\u003e(this IServiceCollection services)\n        where TValidator : IServiceCollectionValidator, new();\n\n    public static IServiceCollection AddValidator(this IServiceCollection services, IServiceCollectionValidator validator);\n}\n\npublic record ValidationResult(IReadOnlyList\u003cstring\u003e Errors)\n{\n    bool IsSuccess { get; }\n    static ValidationResult Success { get; }\n    static ValidationResult operator +(ValidationResult left, ValidationResult right);\n}\n\n```\n\n\n### API Usage\n\n```csharp\nvar services = new ServiceCollection();\n\n// Register services\nservices.AddSingleton\u003cIService, ServiceImpl\u003e();\nservices.AddSingleton\u003cConsumer\u003e();\n\n// Register validators\nservices.AddValidator\u003cDuplicateServiceUsageValidator\u003e();\n\n// Build the provider — validators run automatically\nvar provider = services.BuildServiceProvider();\n\n// If validation fails, BuildServiceProvider throws with aggregated errors\n```\n\n\n### Alternative Designs\n\n```csharp\nusing Xunit;\nusing FluentAssertions;\nusing Microsoft.Extensions.DependencyInjection;\nusing System;\n\nnamespace CommonFramework.DependencyInjection.Tests\n{\n    public interface IService { }\n    public class ServiceImpl : IService { }\n\n    public class Consumer\n    {\n        public Consumer(IService service) { }\n    }\n\n    public class DuplicateServiceUsageValidatorTests\n    {\n        [Fact]\n        public void BuildServiceProvider_ShouldThrow_WhenDuplicateSingletonUsedInConstructor()\n        {\n            // Arrange\n            var services = new ServiceCollection();\n\n            // Duplicate singleton\n            services.AddSingleton\u003cIService, ServiceImpl\u003e();\n            services.AddSingleton\u003cIService, ServiceImpl\u003e();\n\n            // Consumer depends on single IService\n            services.AddSingleton\u003cConsumer\u003e();\n\n            // Register validator\n            services.AddValidator\u003cDuplicateServiceUsageValidator\u003e();\n\n            // Act\n            Action act = () =\u003e \n            {\n                // Instead of manually calling Validate, we simulate \n                // a \"BuildServiceProvider\" step that internally calls Validate\n                services.Validate();\n                var provider = services.BuildServiceProvider();\n            };\n\n            // Assert\n            act.Should().Throw\u003cInvalidOperationException\u003e()\n            .Where(ex =\u003e ex.Message.Contains(\"has been registered many times\"));\n        }\n    }\n}\n```\n\nCurrently, developers must manually implement and invoke custom validators after configuring services, which is error-prone and scattered. A reference implementation with unit tests is available here: [DuplicateServiceUsageValidatorTests](https://github.com/iatsuta/CommonFramework/blob/main/src/CommonFramework.DependencyInjection.Tests/DuplicateServiceUsageValidatorTests.cs)\n\n### Risks\n\nBackward compatibility: Fully preserved. Projects that do not register any IServiceCollectionValidator continue to work exactly as before.\n\nBreaking changes: None. No existing APIs are modified.\n\nPerformance: Minimal impact. Validators are only invoked if explicitly registered, before BuildServiceProvider.\n\nError reporting: Any exceptions are limited to scenarios where custom validators detect misconfigurations. They do not affect projects that do not use validators.\n\nThis ensures that the proposal introduces optional, safe, and isolated functionality without breaking existing applications.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw9a6_A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7D1rr8",
                                           "createdAt":  "2025-09-12T15:00:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-dependencyinjection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-12T15:00:32Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Add IServiceCollectionValidator for optional DI validation at BuildServiceProvider",
        "labels":  [
                       "api-suggestion",
                       "untriaged",
                       "area-Extensions-DependencyInjection"
                   ]
    }
]
