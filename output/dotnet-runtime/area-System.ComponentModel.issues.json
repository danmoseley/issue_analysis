[
    {
        "url":  "https://github.com/dotnet/runtime/issues/27489",
        "createdAt":  "2018-09-27T07:45:44Z",
        "number":  27489,
        "author":  "0xced",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-05-25T15:29:00Z",
        "body":  "## Rationale and Usage\r\n\r\nConverting between `System.Text.Encoding` and `string` or `int` is currently not supported using a `System.ComponentModel.TypeConverter`. Many system types are supported out of the box (System.DateTimeOffset, System.Guid, System.TimeSpan, System.Uri, System.Version etc.) so I think System.Text.Encoding would be a welcome addition.\r\n\r\nI was expecting this to work, but converting from string or int actually throws a `NotSupportedException`.\r\n\r\n```csharp\r\nusing System.ComponentModel;\r\nusing System.Diagnostics;\r\nusing System.Text;\r\nTypeConverter encodingConverter = TypeDescriptor.GetConverter(typeof(Encoding));\r\nEncoding utf8EncodingFromString = encodingConverter.ConvertFromString(\"utf-8\") as Encoding;\r\nEncoding utf8EncodingFromInt = encodingConverter.ConvertFrom(65001) as Encoding;\r\n```\r\n\r\n## Proposed API\r\n\r\n```csharp\r\npublic partial class EncodingConverter : System.ComponentModel.TypeConverter\r\n{\r\n    public EncodingConverter();\r\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType);\r\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType);\r\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);\r\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType);\r\n}\r\n```\r\n\r\n## Details\r\n\r\nConverting from `string` or `int` to `System.Text.Encoding` is straightforward using [`Encoding.GetEncoding`](https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding.getencoding), implementation would be very similar to the `VersionConverter` pull request (https://github.com/dotnet/corefx/pull/28516) merged about one month ago.\r\n\r\n## Open Questions\r\n\r\n* Should converting from `int` (interpreted as a code page) be supported ? I started writing unit tests and noticed a lot of edge cases:\r\n    * If supporting conversion from `int`, should we also support conversion from all types [implicitly convertible to `int`](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/implicit-numeric-conversions-table), i.e. `sbyte`, `byte`, `short`, `ushort` and `char` ? (Yes in my opinion)\r\n    * If supporting conversion from `int`, should we support conversion from larger types, such as `long` when the value fits an int, e.g. `long codePage = 1200`. (Yes in my opinion)\r\n    * If supporting conversion from `int`, should we support conversion *int as string*, e.g. `string codePage = \"1200\"` ? (This is where I started to wonder if supporting conversion from `int` was a good idea at all)\r\n\r\n\r\n\r\n## Pull Request\r\n\r\nA pull request with the proposed changes is available: dotnet/corefx#32527\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJuciyw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MjY4MTkzMQ==",
                                           "createdAt":  "2020-07-01T22:44:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "There\u0027s nothing blocking you from creating this yourself today outside the framework.  We\u0027d need to see some significant use cases our community demand to add this to the framework.",
                                           "updatedAt":  "2020-07-01T22:44:29Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Proposal: new System.ComponentModel.EncodingConverter class",
        "labels":  [
                       "api-suggestion",
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/27890",
        "createdAt":  "2018-11-12T21:15:25Z",
        "number":  27890,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOA3pcTg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yowl",
                                            "createdAt":  "2018-11-23T23:42:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tauheedul",
                                            "createdAt":  "2019-01-27T12:32:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "saint4eva",
                                            "createdAt":  "2019-12-19T11:12:43Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2022-07-19T19:48:56Z",
        "body":  "ML.NET has recently started using `System.ComponentModel.Composition` to enable some extensiblity scenarios. However, using that is now breaking ML.NET on UWP apps.  See: https://github.com/dotnet/machinelearning/issues/1595.\r\n\r\nI looked into this and it appears that https://www.nuget.org/packages/System.ComponentModel.Composition/ has a placholder (`_._`) for `lib/uap10.0.16299`.  However, that assembly doesn\u0027t appear to ship inbox on UWP.\r\n\r\nSo something should change here. Either we should ship that assembly inbox in UWP, or we should remove the placeholder in the package.\r\n\r\n/cc @ericstj @joperezr @danmosemsft ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHUSYFg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzODAzMjc3NA==",
                                           "createdAt":  "2018-11-12T21:21:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "What happened here is that if you take a look at older versions of the UWP metapackage you will find that it indeed have System.ComponentModel.Composition.dll in it. The difference is that this was only a shim, because we were not building a contract for it yet in corefx, so it was only intended to be a shim (similar to System.dll or mscorlib.dll). After that, we decided to add this contract into corefx, so we removed the build of this shim, but never really added it inbox again to UAP which is what broke this.",
                                           "updatedAt":  "2018-11-12T21:21:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzODAzNjQ0OA==",
                                           "createdAt":  "2018-11-12T21:35:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "FWIW, this is when we added the contract for this assembly https://github.com/dotnet/corefx/pull/24921 and it is also when we stopped building the shim.\r\n\r\n@zamont I think that in order to fix this, we need to add a `\u003cIsUAP\u003eTrue\u003c/IsUAP\u003e` to release/uwp6.2 branch of corefx here: https://github.com/dotnet/corefx/blob/release/uwp6.2/src/System.ComponentModel.Composition/dir.props",
                                           "updatedAt":  "2018-11-27T18:30:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjEzNTQ5MQ==",
                                           "createdAt":  "2018-11-27T16:59:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JRAlexander",
                                           "body":  "Is there a resolution for this? ",
                                           "updatedAt":  "2018-11-27T16:59:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjE2NjEyNQ==",
                                           "createdAt":  "2018-11-27T18:29:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "@zamont do you mind taking a look at this?",
                                           "updatedAt":  "2018-11-27T18:29:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MzgwMTU1OA==",
                                           "createdAt":  "2018-12-03T17:46:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zacharycmontoya",
                                           "body":  "Yep I\u0027ll take a look at this today.",
                                           "updatedAt":  "2018-12-03T17:46:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NjAyMTI4Mg==",
                                           "createdAt":  "2019-01-21T10:18:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "@zamont can this be closed?",
                                           "updatedAt":  "2019-01-21T10:18:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NjE5ODIyMQ==",
                                           "createdAt":  "2019-01-21T21:03:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JRAlexander",
                                           "body":  "@eerhardt - fyi",
                                           "updatedAt":  "2019-01-21T21:03:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NjU4ODA0Mg==",
                                           "createdAt":  "2019-01-22T22:28:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zacharycmontoya",
                                           "body":  "The required CoreFx change was made but we haven\u0027t shipped the fix yet. We intend to release a UWP update this month.",
                                           "updatedAt":  "2019-01-22T22:28:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1ODc1ODYzNg==",
                                           "createdAt":  "2019-01-30T00:08:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "This hasn\u0027t been fixed, re-opening.",
                                           "updatedAt":  "2019-01-30T00:08:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1ODg3NzIwOA==",
                                           "createdAt":  "2019-01-30T09:39:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e This hasn\u0027t been fixed, re-opening.\r\n\r\n@eerhardt Could you clarify what you mean? Are you using a pre-release build that has Zach\u0027s change and see the issue is still present?",
                                           "updatedAt":  "2019-01-30T09:39:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1OTAwNjY1NA==",
                                           "createdAt":  "2019-01-30T16:19:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@MichalStrehovsky - ~can you point me to Zach\u0027s change?~ Nevermind, I see it linked above.\r\n\r\nThe reason this isn\u0027t fixed is because it requires a new TFM, which didn\u0027t happen for 6.2 from my understanding.",
                                           "updatedAt":  "2019-01-30T16:23:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1OTAwNzc2NA==",
                                           "createdAt":  "2019-01-30T16:22:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "It\u0027s linked to the bug above in one of the entries above: dotnet/corefx#33980\r\n\r\nGitHub would have autoclosed this when it got merged, but it\u0027s waiting for the change to reach master. It won\u0027t reach master because it\u0027s a servicing only change.",
                                           "updatedAt":  "2019-01-30T16:22:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1OTA0NzM5NA==",
                                           "createdAt":  "2019-01-30T18:06:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zacharycmontoya",
                                           "body":  "Eric is correct that shipping this change would change the CoreFx surface area, which is a breaking change and requires a new TFM, which is work we have not done for the 6.2 update. Taking this change will have to wait.",
                                           "updatedAt":  "2019-01-30T18:06:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MTA0NjczOQ==",
                                           "createdAt":  "2019-04-08T23:39:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "zacharycmontoya",
                                           "body":  "@tommcdon can you self-assign / re-assign this particular issue?",
                                           "updatedAt":  "2019-04-08T23:39:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MTAzNDY0Ng==",
                                           "createdAt":  "2019-05-09T19:27:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBeUxAQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mfe-",
                                                                               "createdAt":  "2020-08-29T11:37:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "smaillet",
                                                                               "createdAt":  "2021-02-01T01:26:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "JRAlexander",
                                           "body":  "Is there a resolution for this?",
                                           "updatedAt":  "2019-05-09T19:27:29Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "System.ComponentModel.Composition doesn\u0027t work on UWP",
        "labels":  [
                       "bug",
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/29867",
        "createdAt":  "2019-06-13T12:59:31Z",
        "number":  29867,
        "author":  "HermanEldering",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCxlmaQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yahorsi",
                                            "createdAt":  "2019-09-30T11:54:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tomaszmalik",
                                            "createdAt":  "2020-02-08T00:14:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ejcoyle88",
                                            "createdAt":  "2020-03-19T14:52:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "om3n07",
                                            "createdAt":  "2020-03-30T17:51:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "uttamukkoji",
                                            "createdAt":  "2020-06-24T15:05:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2021-03-23T12:50:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bugnuker",
                                            "createdAt":  "2021-06-22T14:21:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielchalmers",
                                            "createdAt":  "2022-04-12T08:03:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hexawyz",
                                            "createdAt":  "2023-07-27T22:38:45Z"
                                        }
                                    ],
                          "totalCount":  9
                      },
        "updatedAt":  "2024-07-23T17:04:52Z",
        "body":  "DisplayNameAttribute currently only has the UsageAttribute targets shown below. This limits how the DisplayNameAttribute can be used. The targets should be extended to allow specifying display names for enums and structs.\r\n\r\n`[AttributeUsage(AttributeTargets.Property | AttributeTargets.Event | AttributeTargets.Class | AttributeTargets.Method)]`\r\n\r\n### Rationale and usage\r\nIt can be useful to define DisplayNames for enum elements, like this:\r\n\r\n    public enum FriendlyColorsEnum\r\n    {\r\n        [DisplayName(\"Blanched Almond Color\")]\r\n        BlanchedAlmond = 1,\r\n        [DisplayName(\"Dark Sea Green Color\")]\r\n        DarkSeaGreen = 2,\r\n        [DisplayName(\"Deep Sky Blue Color\")]\r\n        DeepSkyBlue = 3,\r\n        [DisplayName(\"Rosy Brown Color\")]\r\n        RosyBrown = 4\r\n    }\r\n\r\nThe example was taken from [someone else who used the DescriptionAttribute](https://www.codingame.com/playgrounds/2487/c---how-to-display-friendly-names-for-enumerations) instead.\r\n\r\nWhile it is possible to use the DescriptionAttribute it has a different meaning, and it could make sense to use both the DisplayNameAttribute and the DescriptionAttribute on the same elements.\r\n\r\nThe benefit of using an attribute is that the display name is not limited by the naming rules of the programming language. For instance it can include spaces, special characters, start with a number. It is possible to implement a custom attribute, but that makes the code more complex.\r\n\r\nIn addition to enabling the use of DisplayNameAttribute on enums it seems sensible to also enable it for structs.\r\n\r\n### Proposed change\r\n\r\nMy proposal is to change the targets to All, since that is what is used for DescriptionAttribute. It might not make sense to apply the DisplayName on every target, but I am also not aware of drawbacks to allowing it for all targets.\r\n\r\n`[AttributeUsage(AttributeTargets.All)]`\r\n\r\nA more limited target could suffice but that would need a more detailed look at the trade-offs for each target.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUS-WAQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNDU4NTU1OQ==",
                                           "createdAt":  "2019-09-24T14:29:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC3OoUw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yahorsi",
                                                                               "createdAt":  "2019-09-30T11:51:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Jon-Murray",
                                                                               "createdAt":  "2019-11-26T20:21:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ndevine",
                                                                               "createdAt":  "2020-01-30T20:50:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "OpenSpacesAndPlaces",
                                                                               "createdAt":  "2020-02-12T21:49:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wimombelets",
                                                                               "createdAt":  "2020-02-25T10:09:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lngr",
                                                                               "createdAt":  "2020-03-03T19:11:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AmrAlSayed0",
                                                                               "createdAt":  "2020-08-25T11:05:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zuyuz",
                                                                               "createdAt":  "2020-09-24T11:08:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danielchalmers",
                                                                               "createdAt":  "2023-03-06T05:33:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "cunningham74",
                                           "body":  "It looks like this might have been broken in .net core 3.0.  I\u0027m trying to upgrade a project from .net core 2.2 to 3.0 and I\u0027m getting the following error Attribute \u0027DisplayName\u0027 is not valid on this declaration type. It is only valid on \u0027class, method, property, indexer, event\u0027 declarations.  Here is my enum declaration for reference.\r\n\r\npublic enum ComparisonType\r\n    {\r\n        Undefined = 0,\r\n        National = 1,\r\n        [DisplayName(\"Peer Group\")]\r\n        PeerGroup = 2,\r\n    }",
                                           "updatedAt":  "2019-09-24T14:29:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzNjUyNzAzMQ==",
                                           "createdAt":  "2019-09-30T11:51:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yahorsi",
                                           "body":  "We\u0027ve got that issue as well.",
                                           "updatedAt":  "2019-09-30T11:51:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NTQzNTU0MA==",
                                           "createdAt":  "2020-02-12T21:50:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "OpenSpacesAndPlaces",
                                           "body":  "Seeing the same on a migration from 2.2 to 3.1.1",
                                           "updatedAt":  "2020-02-12T21:50:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNjE0NzQ2MQ==",
                                           "createdAt":  "2020-03-30T17:51:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "om3n07",
                                           "body":  "Also encountering this issue when migrating from 2.1 to 3.1.1. ",
                                           "updatedAt":  "2020-03-30T17:51:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMjA4NDQ4MA==",
                                           "createdAt":  "2020-04-30T20:13:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HermanEldering",
                                           "body":  "For those interested, a possible workaround might be using the [DisplayAttribute](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.displayattribute?view=netcore-3.1) instead of DisplayNameAttribute.",
                                           "updatedAt":  "2020-04-30T20:13:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NTkzNjg4NQ==",
                                           "createdAt":  "2020-07-29T21:25:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Looks like DisplayNameAttribute inadvertently omitted its AttributeUsageAttribute in the reference assembly prior to 3.x.\r\nhttps://github.com/dotnet/corefx/blob/4681a68852b4e790c1d743ec7d1825bcd5ff9260/src/System.ComponentModel.Primitives/ref/System.ComponentModel.Primitives.cs#L139\r\n\r\nThe attribute was missing in .NETCoreApp, but present in .NETStandard, https://github.com/dotnet/standard/blob/52777e1506d39f64d12550e0703c4bd5e7e9f218/netstandard/ref/System.cs#L1638\r\n\r\nI brought this back with https://github.com/dotnet/runtime/commit/a58e4fb6481228b02e2c44f3acd54efa578a81de#diff-66eed886fd01ffb17d8e43424a30a0d3R145 which made 3.x consistent with .NETFramework, .NETStandard, and the .NETCore implementation. \r\n\r\nIt seems reasonable for us to bring this back.\r\n\r\nWhat\u0027s the consuming scenario that will read the attribute from enum values?  TypeDescriptor?  I want to make sure the end-to-end is considered and tested (to avoid future regressions and ensure a complete solution).\r\n\r\n",
                                           "updatedAt":  "2020-07-29T21:27:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NTkzNzAwOA==",
                                           "createdAt":  "2020-07-29T21:26:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @safern\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-07-29T21:26:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NjQyNTI5Ng==",
                                           "createdAt":  "2020-07-30T14:55:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "OpenSpacesAndPlaces",
                                           "body":  "`What\u0027s the consuming scenario that will read the attribute from enum values? TypeDescriptor? I want to make sure the end-to-end is considered and tested (to avoid future regressions and ensure a complete solution).`\r\n\r\nFor me the most common use case would be scenarios where an enum makes the most sense for code flow, but then also needing \"user friendly\" text. Granted this could be handled in a mapping object, but the syntax sugar here allows for cleaner field management (IMO). \r\n\r\n@ericstj ",
                                           "updatedAt":  "2020-07-30T14:56:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NjQ0ODg0Ng==",
                                           "createdAt":  "2020-07-30T15:19:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HermanEldering",
                                           "body":  "\u003e What\u0027s the consuming scenario that will read the attribute from enum values?\r\n\r\nMy use case is that I have a custom generic type converter to convert enums that I use in data binding. My code uses reflection (`GetCustomAttributes\u003c\u003e`) to look for the attribute and convert to/from other data types (in this case strings).\r\n\r\nUsing the existing DisplayName attribute makes it easier to work with compared to implementing a third party attribute, mostly because the programmer only has to learn a single attribute and it can be shared between different projects/libraries instead of each rolling their own.",
                                           "updatedAt":  "2020-07-30T15:19:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MTA5NTYzNw==",
                                           "createdAt":  "2020-08-26T20:05:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "To be clear, no-one here is expecting the runtime (EG: TypeDescriptor) to read this attribute in the new scenarios?",
                                           "updatedAt":  "2020-08-26T20:05:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNjE5OTU2Nw==",
                                           "createdAt":  "2020-11-12T16:49:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "It\u0027s not a regression from \"last\" release anymore",
                                           "updatedAt":  "2020-11-12T16:49:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GjALz",
                                           "createdAt":  "2022-07-13T19:09:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCmmTcQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "tomaszmalik",
                                                                               "createdAt":  "2022-07-14T00:56:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Moving to 8.0 as this issue has been around for a long time and is not critical to fix in 7.0.",
                                           "updatedAt":  "2022-07-13T19:09:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5P8_iF",
                                           "createdAt":  "2022-12-07T18:24:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "We need to investigate the work involved here to make this work for enum and structs. I don\u0027t think just adding the `AttributeTargets` for enum and struct make much sense without a default implementation.",
                                           "updatedAt":  "2022-12-07T18:24:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QLcQ9",
                                           "createdAt":  "2022-12-10T07:51:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HermanEldering",
                                           "body":  "@steveharter what is the rationale for having both DisplayAttribute and DisplayNameAttribute in the framework?\n\nAre there places where only one is used and not the other? Shouldn\u0027t all places that look for DisplayNameAttribute also look for DisplayAttribute?\n\nIf that is the case wouldn\u0027t it be better to deprecate DisplayNameAttribute?",
                                           "updatedAt":  "2022-12-10T07:51:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RL23e",
                                           "createdAt":  "2022-12-21T20:34:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e @steveharter what is the rationale for having both DisplayAttribute and DisplayNameAttribute in the framework?\r\n\r\nThe attributes in the `S.ComponentModel` (`[DisplayName]`, `[Description]`) work with `TypeDescriptor` but the ones in `S.ComponenentMode.DataAnnotations` (`[Display]`) do not. DataAnnotations is also a bit newer and used in more places including ASP.NET and Entity Framework for binding, validation and views.\r\n\r\nIt is interesting that the two areas also have different targets. [DisplayAttribute](https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.displaynameattribute) targets\r\n`Class + Event + Method + Property` (`Class` was added in .NET Core 2.1)\r\nwhile [DisplayNameAttribute](https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.displayattribute) targets\r\n`Class + Field + Method + Parameter + Property`\r\n\r\nNeither supports events.\r\n\r\n\u003e Are there places where only one is used and not the other? Shouldn\u0027t all places that look for DisplayNameAttribute also look for DisplayAttribute?\r\n\r\nThe framework doesn\u0027t expose a way to do this automatically, so it would be up to the app.\r\n\r\n\u003e If that is the case wouldn\u0027t it be better to deprecate DisplayNameAttribute?\r\n\r\nSince DisplayNameAttribute is tied to classes like TypeDescriptor and works with other other attributes in that S.ComponentModel namespace it would mean deprecating entire sets of classes which is not normally done.\r\n\r\n",
                                           "updatedAt":  "2022-12-21T20:34:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RL5YB",
                                           "createdAt":  "2022-12-21T20:46:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "The attribute [`System.ComponenentModel.DataAnnotations.DisplayAttribute`](https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.displayattribute) has a different set of targets. Someone could ask the same questions about extending those attributes. Those various attributes, and the ones in System.ComponentModel as well, were designed for specific scenarios and existing tooling was geared towards supporting the known targets. So if we expand the targets, there may be \"downstream\" feature requests and will be various inconsistencies for those tools.\r\n\r\nSimilarly, the framework may have \"downstream\" work -- if using `TypeDescriptor` instead of reflection to obtain attributes, what additional work (if any) is necessary (if any). Sample:\r\n```cs\r\ninternal class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        PropertyDescriptorCollection pdc = TypeDescriptor.GetProperties(new MyClass());\r\n        Console.WriteLine($\"DisplayName:{pdc[0].DisplayName}\"); // DisplayName:DESC1\r\n\r\n        // Below should be DisplayName: DESC2 once enums allow [DisplayName]\r\n        Console.WriteLine($\"DisplayName:{pdc[1].DisplayName}\"); // DisplayName: foo\r\n    }\r\n}\r\n\r\npublic class MyClass\r\n{\r\n    public MyClass2 myClass2 { get; set; } = new MyClass2();\r\n    public MyEnum foo { get; set; } = MyEnum.Green;\r\n}\r\n\r\n[DisplayName(\"DESC1\")]\r\npublic class MyClass2 { }\r\n\r\n\r\n// Not allowed today: CS0592\r\n// [DisplayName(\"DESC2\")]\r\npublic enum MyEnum\r\n{\r\n    Red = 1,\r\n    Green = 2\r\n}\r\n```\r\n\r\n",
                                           "updatedAt":  "2022-12-21T20:46:30Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "Extend usage of DisplayNameAttribute",
        "labels":  [
                       "investigate",
                       "bug",
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/30656",
        "createdAt":  "2019-08-22T11:52:14Z",
        "number":  30656,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_f-Yg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ollhax",
                                            "createdAt":  "2025-02-26T15:41:27Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-09-16T10:28:48Z",
        "body":  "The implementation of `TypeDescription` and `TypeConverter` uses internal caches which hold strong references to the `Type` object. These remain even after the descriptors and converters are released by the user code.\r\n\r\nIf these types come from collectible assemblies (either dynamic types, or custom unloadable AssemblyLoadContext), this prevents unloading of such assembly.\r\n\r\nThis is exaggerated by the fact that `TypeConverter` is used by `Newtonsoft.Json` during serilization or deserialization of JSON. This is VERY common in user code. This effectively means that any app which uses plugins and wants to be able to unload the plugins successfully would have to prevent all such plugins from using Newtonsoft.Json serialization on objects from the plugin.\r\n\r\nThis is basically a feature ask to modify all the internal caches in `TypeDescriptor`/`TypeConverter` implementation to be based on weak references, so that it\u0027s possible to collect the types.\r\n\r\nCustomer issue which ran into this, with detailed analysis of what happens: https://github.com/dotnet/coreclr/issues/26271\r\n\r\nIt was possible to workaround in this case by loading the `ComponentModel` assemblies many times into separate ALCs, but that comes with large performance penalty and is not an obvious solution to the problem.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxIx1OA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyMzg3MjE5Mg==",
                                           "createdAt":  "2019-08-22T11:52:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "/cc @janvorli ",
                                           "updatedAt":  "2019-08-22T11:52:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyMzg3MzM1MA==",
                                           "createdAt":  "2019-08-22T11:56:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "Would it make sense to make the caches ALC specific so that converters caches in each context don\u0027t leak and wait for collection to occur? [edit] I\u0027ve just realised that they\u0027ve internal to a third party assembly so that might not be the best solution but it might still be possible.",
                                           "updatedAt":  "2019-08-22T12:01:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyMzg3NjI2OQ==",
                                           "createdAt":  "2019-08-22T12:05:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "That could also work - not sure which solution is best for perf...\r\nCurrently there\u0027s no framework-wide mechanism to attach something to ALC, so it would have to be a custom solution (basically a weak hash table of all ALCs). It\u0027s kind of interesting because the `TypeDescriptor.s_providerTable` is already a `WeakHashtable` and couple of others are as well, but not all. I don\u0027t know the history of this code, why it was done this way.",
                                           "updatedAt":  "2019-08-22T12:05:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNDQxODIyNQ==",
                                           "createdAt":  "2019-08-23T18:32:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@vitek-karas I assume this issue is not meeting the 3.0 bar so I marked it as for 5.0 release. Let me know if this is not the case.",
                                           "updatedAt":  "2019-08-23T18:32:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNDQzNjI0OQ==",
                                           "createdAt":  "2019-08-23T19:33:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBNdMIQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "russlank",
                                                                               "createdAt":  "2020-08-15T01:27:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I agree it does not meet 3.0, but I think we should at least consider it for 3.1 - it blocks lot of unloadability scenarios - with no good workaround.",
                                           "updatedAt":  "2019-08-23T19:33:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNDQ1Nzc4OA==",
                                           "createdAt":  "2019-08-23T20:50:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "Just having a look through the code this change might be as simple as changing some `Hashtable` to `WeakHashtable` but it\u0027s going to have some performance degradations under load. There are also a number of places where `WeakReference.IsAlive` is used which I know is now suggested against so could be changed at the same time.",
                                           "updatedAt":  "2019-08-23T20:50:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NTE0ODA0Nw==",
                                           "createdAt":  "2019-10-22T20:48:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Talked offline with @vitek-karas and here is a possible action plan forward for this issue:\r\n\r\n- Possibly a simple fix is to replace one of the strong references with a weak reference. But we also want to check for perf regressions and another concern is for cases when GC after the fix clears the cache.\r\n\r\n- Also note, a sample repro for this issue is in description of https://github.com/dotnet/coreclr/issues/26271",
                                           "updatedAt":  "2019-10-22T20:48:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MTEwMjI4Ng==",
                                           "createdAt":  "2020-08-26T20:19:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Not seeing this meet the bar for 5.0 at this point either.  We haven\u0027t seen a ton of interest in this outside of this report.  The risk here is substantial as this code has been around for decades now and is a critical piece of windows App models like Winforms and WPF.  We\u0027d need to be very careful when touching this not to change behavior nor impact perf substantially.  We\u0027re not prepared to take that amount of risk at this point in the product. ",
                                           "updatedAt":  "2020-08-26T20:19:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MTYyMjUzNA==",
                                           "createdAt":  "2020-08-27T06:34:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "raffaeler",
                                           "body":  "@ericstj Correlating the issues between LoadContexts and the TypeDescriptor is definitely too hard to have some feedback after such a short amount of time.\r\nAlso, many companies are just planning the migration of old apps to .NET Core and didn\u0027t happen yet.\r\nI suspect this issue can be a blocker for those who will try to migrate and will immediately surrender to the fact that LoadContext «are not working» just because diagnosing the unloading is super-hard and there are \u0027bugs\u0027 like this issue.\r\n\r\nAlso, considering that .NET 5 is not a LTS, it is probably the best time to make the changes required from this issue. Any later changes would bring just more risks, even if someone had a ton of patience in understanding that the failure reason is the TypeDescriptor.\r\n\r\nHTH",
                                           "updatedAt":  "2020-08-27T06:34:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MTY2ODkzMg==",
                                           "createdAt":  "2020-08-27T07:15:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQE7Cw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "alexey-zakharov",
                                                                               "createdAt":  "2025-04-29T08:04:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "We\u0027re at the RC stage in 5.0., unfortunately it\u0027s too late to jam in a change like this.  We still have a year for 6.0, we can put a change in early in 6.0 and let it bake to ensure it\u0027s solid before release.\r\n\r\nDid anyone identify the specific tables impacted?  Some tables cannot be made completely weak as they back static API that needs to behave predictably.  Others can be made weak easily like `s_defaultProviders` which only contains Types and could likely be switched to use the string-fully-qualified-type-name.  Also the `WeakHashTable` used here is only weak on the key, value is still rooted AFAICT.  The values are scavenged only when a new key is added, which is less likely to happen at steady-state.",
                                           "updatedAt":  "2020-08-27T07:15:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MTY3MzYwNw==",
                                           "createdAt":  "2020-08-27T07:18:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "raffaeler",
                                           "body":  "@ericstj I am not aware of other tables.\r\n\r\nIs it also too late to expose a \"free\" like method to avoid nasty reflection workarounds?",
                                           "updatedAt":  "2020-08-27T07:18:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GjENg",
                                           "createdAt":  "2022-07-13T19:29:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Moving to Future as this issue has been around and is not critical to fix in 7.0.",
                                           "updatedAt":  "2022-07-13T19:29:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pJnFS",
                                           "createdAt":  "2025-04-29T08:04:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexey-zakharov",
                                           "body":  "\u003e Some tables cannot be made completely weak as they back static API that needs to behave predictably.\n\n@ericstj sorry to resurrect the old thread 😄 \nDo you recall which tables cannot be made weak and why? I had to touch quite a few of those in https://github.com/dotnet/runtime/pull/114619 to ensure assembly can be unloaded, and now I would like to know if this can break functionality (or which tests should be checked/added). And you were right the value should be made weak as well in some cases",
                                           "updatedAt":  "2025-04-29T08:04:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pO_Ai",
                                           "createdAt":  "2025-04-29T15:07:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "cc @steveharter \nI was worried about TypeDescriptor and TypeConverter API behaving unpredictably.  It\u0027s been 5 years since making that comment, but I bet I was thinking of cases where folks register a provider through static API and expect it to work, and not get collected due to weak reference backing.",
                                           "updatedAt":  "2025-04-29T15:07:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pVqy6",
                                           "createdAt":  "2025-04-30T07:11:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexey-zakharov",
                                           "body":  "\u003e cases where folks register a provider through static API and expect it to work\n\nthanks for the comment @ericstj! this is a good point, I think using `WeakReference` for the Type itself is ok in the context of the assembly unloadability as `LoaderAllocator` would keep the Type alive, however the registered provider could be collected if wrapped in the `WeakReference`. 🤔 \nIf we use `DependentHandle` with dependency on the Type, do you think that would provide a good binding to keep registered providers alive?",
                                           "updatedAt":  "2025-04-30T07:11:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pc3zc",
                                           "createdAt":  "2025-04-30T18:26:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I\u0027ve never used that before, but it seems like it should.  Can we guarantee the Type object will stay alive so long as the assembly is not unloaded?  Is the unloading something that needs to be done explicitly, and not just something that will happen on its own when no strong references remain?",
                                           "updatedAt":  "2025-04-30T18:26:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6psQPH",
                                           "createdAt":  "2025-05-02T11:04:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexey-zakharov",
                                           "body":  "\u003e Can we guarantee the Type object will stay alive so long as the assembly is not unloaded?\n\nI believe so. As far as I understand the design, the [type instance](https://github.com/dotnet/runtime/blob/27604b57bd2e9c9aa46d005db7c4e387d461b5b6/src/coreclr/vm/methodtable.h#L363) for collectible types is allocated by LoaderAllocator and stored in its m_slots table. So it will be alive until MethodTable is alive and it is alive until the LoaderAllocator is alive.\n\n\n\n\u003e Is the unloading something that needs to be done explicitly, and not just something that will happen on its own when no strong references remain?\n\nunloading of the AssemblyLoadContext is explicit, yes - the AssemblyLoadContect.Unload api should be called, before that all assemblies, their code and type will remain in memory",
                                           "updatedAt":  "2025-05-02T11:04:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tFRoH",
                                           "createdAt":  "2025-05-23T09:28:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Flohack74",
                                           "body":  "Mabe I am a bit segwaying here but there is a general question: If an assembly that is loaded into an ALC has internal static variables that are populated with new() objects on load, how the ALC is supposed to behave? Currently we have an issue that the 3rd parties log4net and DevExpress seem to block unloading of an ALC since they presumably use public static namespace/class variables that are initialized and of course no one ever assumed they need to code a mechanism to clear them again.",
                                           "updatedAt":  "2025-05-23T09:28:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tFsFN",
                                           "createdAt":  "2025-05-23T10:10:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@Flohack74 - I don\u0027t know the specifics... but the way this works is that it\u0027s OK if the assembly creates a static variable reference to something in that assembly. That can be collected. What is a problem if something outside of the ALC holds a reference to something from the ALC - that blocks it. That\u0027s why caches in the BCL are problematic, as they create exactly this situation.",
                                           "updatedAt":  "2025-05-23T10:10:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tZCjb",
                                           "createdAt":  "2025-05-26T09:08:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Flohack74",
                                           "body":  "@vitek-karas Thanks! I already found part of the problem: For communication with the code in the context we use an \"APIObjects\" DLL that is loaded from the default context. This is because otherwise it seems we cannot use the return types from our internal API in the main assembly code.\nVery abstract question is therefore: How can we facilitate to exchange complex (DTO) data between an ALC and the main applicatoon? Any people doing this without serializing everything to JSON :) ?",
                                           "updatedAt":  "2025-05-26T09:08:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6taN4J",
                                           "createdAt":  "2025-05-26T11:03:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "I sounds like the same behaviour that used to occur with remoting back in netfx. The way to deal with it was to have simple dto\u0027s in an interface assembly that used only primitive types. Serializing to json would also work but I don\u0027t think you have to go that far.",
                                           "updatedAt":  "2025-05-26T11:03:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6taxtF",
                                           "createdAt":  "2025-05-26T11:56:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Flohack74",
                                           "body":  "Okay but there is the catch. I have an example hosted here: https://github.com/Flohack74/ALCwithLog4Net that will just use log4net logging library, initialize it, and then shut down whatever possible to get the context to unload. Still no luck. For some reason it seems that log4net hangs on to smth in default context. This makes a lot of 3rd party tooling unusable in ALCs or am I missing the point? (Note for intereted individuals, for some reason you need to run the publish profile in the solution to get log4net copied to the output dir...)",
                                           "updatedAt":  "2025-05-26T11:56:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tcoBn",
                                           "createdAt":  "2025-05-26T14:36:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Flohack74",
                                           "body":  "Noting that log4net does this in its implementation - can it cause blocking of unloading as described in this ticket here? \n\n`private readonly static Type ThisDeclaringType = typeof(LogImpl);`\n",
                                           "updatedAt":  "2025-05-26T14:36:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tcqB9",
                                           "createdAt":  "2025-05-26T14:39:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "That should not be a problem.\nYou can try these steps to figure out the underlying problem: https://learn.microsoft.com/en-us/dotnet/standard/assembly/unloadability#debug-unloading-issues",
                                           "updatedAt":  "2025-05-26T14:39:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tlHCM",
                                           "createdAt":  "2025-05-27T11:36:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Flohack74",
                                           "body":  "I did that, and in case of the namespace from the log4net Assembly it all points to some objects that are not public to me:\n\n```\nHandleTable:\n    0000012895d013e8 (strong handle)\n          -\u003e 012897c00028     System.Object[] \n          -\u003e 01289f002b10     System.EventHandler (static variable: Unknown.FirstChanceException)\n          -\u003e 012899df0270     System.Object[] \n          -\u003e 01289f002ad0     System.EventHandler \n          -\u003e 01289f0011c8     System.Reflection.LoaderAllocator \n          -\u003e 01289f00dab8     System.Object[] \n          -\u003e 01289f0029f0     System.Object[] \n          -\u003e 01289f00da50     log4net.Core.DefaultRepositorySelector \n          -\u003e 01289f00dd88     System.Collections.Generic.Dictionary\u003cSystem.String, log4net.Repository.ILoggerRepository\u003e \n          -\u003e 01289f011080     System.Collections.Generic.Dictionary\u003cSystem.String, log4net.Repository.ILoggerRepository\u003e+Entry[] \n          -\u003e 01289f00e9f0     log4net.Repository.Hierarchy.Hierarchy \n          -\u003e 01289f011b90     log4net.Repository.LoggerRepositoryConfigurationChangedEventHandler \n          -\u003e 01289f011b50     log4net.Core.LogImpl \n\nFound 1 unique roots.\n```\nSo it seems that LogImpl subscribes to this event handler and never unsubscribes it, also not on shutdown, so far so good. But I cannot get an idea of what references it could use from outside of the ALC here. Plus there is no way to clean that up manually, its all happening inside the library.\n",
                                           "updatedAt":  "2025-05-27T11:36:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tlbm3",
                                           "createdAt":  "2025-05-27T12:08:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Flohack74",
                                           "body":  "So how much influence can it have if system libraries are loaded / used in / from the default ALC? What puzzles me is that there is on one hand type isolation between ALCs and then on the other hand it seems that types from the default ALC can be used anytime.",
                                           "updatedAt":  "2025-05-27T12:08:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tmYU1",
                                           "createdAt":  "2025-05-27T13:28:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "raffaeler",
                                           "body":  "@Flohack74 \nIt\u0027s been a while that I don\u0027t update my tool [PowerDiagnostics](https://github.com/raffaeler/powerdiagnostics), but it shows the loadcontexts and everything is loaded inside them.\nIn theory, it should help in understanding who is responsible for preventing the unloading.\nHTH",
                                           "updatedAt":  "2025-05-27T13:28:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tnr-a",
                                           "createdAt":  "2025-05-27T15:02:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Flohack74",
                                           "body":  "@raffaeler seems to work :) (I got a nullref exception with the allocator name column and will send you this separately, can I reach out to you outside of this thread?)\n\n![Image](https://github.com/user-attachments/assets/78fddef3-00b0-444e-b49c-1da458274d67)",
                                           "updatedAt":  "2025-05-27T15:02:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6toOIy",
                                           "createdAt":  "2025-05-27T15:24:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "raffaeler",
                                           "body":  "Great, happy to see that :-)\nCould you please open an issue with the details so that I can track the problem?\n\nThis tool was intended to experiment and be run in a sidecar process monitoring an app and capturing a snapshot of an app where certain \"bad\" conditions happen.\nIt is not production-ready and the long-term plans is to get rid of WPF in favor of a react-based web-app.\n\nFeel free to reach me out. You can use my GH handle + @ + \"vevy\" + \".com\"",
                                           "updatedAt":  "2025-05-27T15:24:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CBq8q",
                                           "createdAt":  "2025-09-04T19:11:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Reopening this one to consider for backport into 10.0 - no decision on this yet - it\u0027s pretty late and we need to understand the risk of this change.",
                                           "updatedAt":  "2025-09-04T19:12:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7D69GK",
                                           "createdAt":  "2025-09-12T22:33:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiHqlw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "raffaeler",
                                                                               "createdAt":  "2025-09-13T06:44:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "zgabi",
                                           "body":  "Similar issue exists in System.Text.Json... it puts someting to the JsonSerializationOptions.s_defaultOptions._cachingContext._cache dictionary even when I create a new JsonSerializationOptions object for the serialization.\nCreation stacktrace:\n\n\u003cimg width=\"1135\" height=\"415\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/a3b52eed-5a19-4742-949f-b1e9cf7be12f\" /\u003e\n\nWhen I call the System.Text.Json.JsonSerializerOptionsUpdateHandler.ClearCache method with reflection, I can unload the assembly.",
                                           "updatedAt":  "2025-09-12T22:33:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EJ45F",
                                           "createdAt":  "2025-09-15T08:00:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEib6OQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "raffaeler",
                                                                               "createdAt":  "2025-09-16T10:34:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@zgabi The System.Text.Json problem is tracked by https://github.com/dotnet/runtime/issues/65323.",
                                           "updatedAt":  "2025-09-15T08:00:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EjHU4",
                                           "createdAt":  "2025-09-16T10:28:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexey-zakharov",
                                           "body":  "\u003e When I call the System.Text.Json.JsonSerializerOptionsUpdateHandler.ClearCache method with reflection, I can unload the assembly.\n\nwe\u0027ve used the same workaround for now. I\u0027 assume this can be fixed using the similar ConditionalWeakTable approach, however checking the IsCollectible property has currently performance overhead",
                                           "updatedAt":  "2025-09-16T10:28:48Z"
                                       }
                                   ],
                         "totalCount":  33
                     },
        "title":  "TypeDescriptor caching blocks unloading of code which uses it from unloadable load context",
        "labels":  [
                       "design-discussion",
                       "area-System.ComponentModel",
                       "feature-request",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/31441",
        "createdAt":  "2019-11-08T15:31:44Z",
        "number":  31441,
        "author":  "iSazonov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-01-14T21:41:38Z",
        "body":  "https://github.com/dotnet/corefx/blob/3843042d560549baa492f2c99441fd4571655422/src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ReflectTypeDescriptionProvider.ReflectedTypeData.cs#L204-L216\r\n\r\nIn line 206 typeAttr is never null because GetAttributes() returns always an empty collection. Also indexer returns \"empty\" TypeConverter if the item does not present in the AttributeCollection.\r\nPerhaps code above (for instance) is broken too.\r\n\r\nDiscovered in PowerShell repo.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKKhHDA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MzI3OTY1OA==",
                                           "createdAt":  "2019-11-13T07:43:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "@ericstj Could you please look the issue?",
                                           "updatedAt":  "2019-11-13T07:43:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDEzOTE4NA==",
                                           "createdAt":  "2019-11-14T23:49:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Can you let us know what issue you\u0027re facing because of this?  I don\u0027t see any obvious bug here, perhaps some overly defensive code, but that\u0027s not a problem in and of itself.\r\n\r\nPlease rephrase this issue describing:\r\nrepro-steps\r\nexpected behavior\r\nactual behavior\r\n\r\nThanks!\r\nEric",
                                           "updatedAt":  "2019-11-14T23:49:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDIyOTQ1Ng==",
                                           "createdAt":  "2019-11-15T06:18:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "@ericstj I can not say that it is \"bug\" but obviously the code is not full correct. It is a _bad pattern_. I caught this while I played with TypeDescripter.GetConverter in PowerShell Core repo. I copy-pasted line 206 of the code and it did not work as expected.\r\nMy report is that typeAttr  is never null and it is better to remove the bad pattern because it _confuses_ code readers.",
                                           "updatedAt":  "2019-11-15T06:19:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDQ1NTcwMw==",
                                           "createdAt":  "2019-11-15T17:36:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I see what you mean.  That\u0027s true for the normal case, however I see the call to TypeDescriptor.GetAttributes can be extended with a custom TypeDescriptor which can provide a derived AttributeCollection with indexer implementation that returns null.  We have also supported AOT platforms in the past that strip metadata which would make the reflection call to TypeConverterAttribute.Default in GetDefaultValue fail even though we define that property.  This is enough to give me pause.  One could say that this is an unlikely combination of circumstances, but what should this code do if that API does return null?  Certainly not null-ref: throw or just handle the null as it does now?  The current behavior seems most correct.\r\n\r\nHow about we tackle this type of issue when we add nullable annotations to this assembly?  We\u0027re going through all of the libraries and doing this now (/cc @buyaa-n).  That should uncover through compile-time analysis the cases where things can and cannot be null and we will naturally clean up cases where we were doing unnecessary null checks.",
                                           "updatedAt":  "2019-11-15T20:07:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDQ2NjI0MA==",
                                           "createdAt":  "2019-11-15T18:03:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "@ericstj Thanks for clarify! I think nullable annotations will resolve the issue. Although I don\u0027t know whether they work well for interfaces. ",
                                           "updatedAt":  "2019-11-15T18:03:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDQ2NzIxNw==",
                                           "createdAt":  "2019-11-15T18:06:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "\u003e How about we tackle this type of issue when we add nullable annotations to this assembly?\r\n\r\nSure we can evaluate this case during nullabliity analysis, might be not in near future as  this assembly is in the group 9 of dependency list https://github.com/dotnet/corefx/issues/40623. \r\n\r\n\u003e That should uncover through compile-time analysis the cases where things can and cannot be null and we will naturally clean up cases where we were doing unnecessary null checks.\r\n\r\nCompiler wouldn\u0027t really warn for such `unnessesary null check` cases, as you mentioned it is not errornous case. Compiler analysis more devoted to detect possible null references errors, but of course we can do this kind of clean up adding our `human` analysis to the compiler analysis CC @stephentoub @safern ",
                                           "updatedAt":  "2019-11-15T18:06:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NDUwOTY1OQ==",
                                           "createdAt":  "2019-11-15T20:08:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA1Lptw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "buyaa-n",
                                                                               "createdAt":  "2019-11-15T21:38:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Curious: the compiler won\u0027t warn if you check a non-nullable reference type for null?  That seems like an opportunity for an analyzer (or compiler improvement).",
                                           "updatedAt":  "2019-11-15T20:08:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzEwMjAwNg==",
                                           "createdAt":  "2020-07-02T16:18:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Plan to revisit once this codebase is annotated for nullable.  cc @buyaa-n ",
                                           "updatedAt":  "2020-07-02T16:18:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzEzMjE1Nw==",
                                           "createdAt":  "2020-07-02T17:25:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "Sure will check when `System.ComponentModel.TypeConverter` annotated",
                                           "updatedAt":  "2020-07-02T17:25:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MjExNjg3Ng==",
                                           "createdAt":  "2020-08-27T18:27:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@safern is currently working on TypeConverter annotations and should be able to consider this as part of that work.",
                                           "updatedAt":  "2020-08-27T18:27:43Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "An issue in TypeDescriptor.GetConverter()",
        "labels":  [
                       "enhancement",
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/31792",
        "createdAt":  "2020-02-05T10:19:18Z",
        "number":  31792,
        "author":  "MaximLipnin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-01-14T21:31:43Z",
        "body":  "`System.ComponentModel.Composition.ExportCollectionTests.ImportCollectionsFromContainerOnly` fails on mono. It will be skipped with ActiveIssue in #2087.\r\n\r\n```   System.ComponentModel.Composition.ExportCollectionTests.ImportCollectionsFromContainerOnly [FAIL]\r\n        System.ArgumentException : Type passed in must be derived from System.Attribute or System.Attribute itself. System.ComponentModel.Composition.IAttributedImport\r\n        Stack Trace:\r\n             at System.Reflection.CustomAttribute.IsDefined(ICustomAttributeProvider obj, Type attributeType, Boolean inherit)\r\n             at System.Reflection.RuntimeFieldInfo.IsDefined(Type attributeType, Boolean inherit)\r\n             at Microsoft.Internal.AttributeServices.IsAttributeDefined[IAttributedImport](ICustomAttributeProvider attributeProvider, Boolean inherit)\r\n             at System.ComponentModel.Composition.AttributedModel.AttributedPartCreationInfo.IsImport(ICustomAttributeProvider attributeProvider)\r\n             at System.ComponentModel.Composition.AttributedModel.AttributedPartCreationInfo.GetDeclaredOnlyImportMembers(Type type)+MoveNext()\r\n             at System.ComponentModel.Composition.AttributedModel.AttributedPartCreationInfo.GetImportMembers(Type type)+MoveNext()\r\n             at System.ComponentModel.Composition.AttributedModel.AttributedPartCreationInfo.GetImportDefinitions()\r\n             at System.ComponentModel.Composition.AttributedModel.AttributedPartCreationInfo.DiscoverExportsAndImports()\r\n             at System.ComponentModel.Composition.AttributedModel.AttributedPartCreationInfo.GetExports()\r\n             at System.ComponentModel.Composition.ReflectionModel.ReflectionComposablePartDefinition.get_ExportDefinitionsInternal()\r\n             at System.ComponentModel.Composition.ReflectionModel.ReflectionComposablePartDefinition.get_ExportDefinitions()\r\n             at System.ComponentModel.Composition.ReflectionModel.ReflectionComposablePart.get_ExportDefinitions()\r\n             at System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.\u003c\u003ec.\u003cRecompose\u003eb__21_0(ComposablePart part)\r\n             at System.Linq.Enumerable.SelectManySingleSelectorIterator`2[[System.ComponentModel.Composition.Primitives.ComposablePart, System.ComponentModel.Composition, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.ComponentModel.Composition.Primitives.ExportDefinition, System.ComponentModel.Composition, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ToArray()\r\n             at System.Linq.Enumerable.ToArray[ExportDefinition](IEnumerable`1 source)\r\n             at System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Recompose(CompositionBatch batch, AtomicComposition atomicComposition)\r\n             at System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Compose(CompositionBatch batch)\r\n             at System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(CompositionBatch batch)\r\n             at System.ComponentModel.Composition.ExportCollectionTests.ImportCollectionsFromContainerOnly()\r\n             at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[mono] Test failed: System.ComponentModel.Composition.ExportCollectionTests.ImportCollectionsFromContainerOnly",
        "labels":  [
                       "area-System.ComponentModel",
                       "disabled-test",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/32030",
        "createdAt":  "2020-02-10T15:51:42Z",
        "number":  32030,
        "author":  "MaximLipnin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-29T15:00:14Z",
        "body":  "I have no repro for this test locally, but it fails on `runtime (Libraries Test Run release mono OSX x64 Debug)` lane in https://github.com/dotnet/runtime/pull/2087.\r\n\r\n```\r\n      System.NotSupportedException : Interface \u0027System.ComponentModel.Composition.ITrans_StronglyTypedStructure\u0027 is not a valid MetadataView; MetadataViews do not support non-public interfaces, and interfaces that contain members that are not properties.\r\n      ---- System.TypeLoadException : Could not load type \u0027_proxy_System.ComponentModel.Composition.ITrans_StronglyTypedStructure_193e0f9f-5ac0-45e4-859f-299ce861709f\u0027 from assembly \u0027\u0027.\r\n      Stack Trace:\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/MetadataViewProvider.cs(45,0): at System.ComponentModel.Composition.MetadataViewProvider.GetMetadataView[ITrans_StronglyTypedStructure](IDictionary`2 metadata)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/AttributedModelServices.cs(24,0): at System.ComponentModel.Composition.AttributedModelServices.GetMetadataView[ITrans_StronglyTypedStructure](IDictionary`2 metadata)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/ExportServices.cs(98,0): at System.ComponentModel.Composition.ExportServices.CreateStronglyTypedLazyOfTM[BasicTestComponent,ITrans_StronglyTypedStructure](Export export)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/ExportProvider.GetExportOverrides.cs(769,0): at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportCore[BasicTestComponent,ITrans_StronglyTypedStructure](String contractName)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/ExportProvider.GetExportOverrides.cs(214,0): at System.ComponentModel.Composition.Hosting.ExportProvider.GetExport[BasicTestComponent,ITrans_StronglyTypedStructure](String contractName)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/ExportProvider.GetExportOverrides.cs(163,0): at System.ComponentModel.Composition.Hosting.ExportProvider.GetExport[BasicTestComponent,ITrans_StronglyTypedStructure]()\r\n        /_/src/libraries/System.ComponentModel.Composition/tests/System/ComponentModel/Composition/ExportableAttributeTests.cs(67,0): at System.ComponentModel.Composition.MetadataAttributeTests.StronglyTypedStructureTestWithTransparentViews()\r\n        /_/src/mono/netcore/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.cs(339,0): at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n        ----- Inner Stack Trace -----\r\n        /_/src/mono/netcore/System.Private.CoreLib/src/System/RuntimeType.Mono.cs(2292,0): at System.RuntimeType.GetMethodsByName(String name, BindingFlags bindingAttr, MemberListType listType, RuntimeType reflectedType)\r\n        /_/src/mono/netcore/System.Private.CoreLib/src/System/RuntimeType.Mono.cs(592,0): at System.RuntimeType.GetMethodCandidates(String name, BindingFlags bindingAttr, CallingConventions callConv, Type[] types, Int32 genericParamCount, Boolean allowPrefixLookup)\r\n        /_/src/mono/netcore/System.Private.CoreLib/src/System/RuntimeType.Mono.cs(813,0): at System.RuntimeType.GetMethodImpl(String name, Int32 genericParamCount, BindingFlags bindingAttr, Binder binder, CallingConventions callConv, Type[] types, ParameterModifier[] modifiers)\r\n        /_/src/mono/netcore/System.Private.CoreLib/src/System/RuntimeType.Mono.cs(806,0): at System.RuntimeType.GetMethodImpl(String name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Type.cs(166,0): at System.Type.GetMethod(String name, BindingFlags bindingAttr)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/MetadataViewGenerator.cs(122,0): at System.ComponentModel.Composition.MetadataViewGenerator.GetMetadataViewFactory(Type viewType)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/MetadataViewProvider.cs(41,0): at System.ComponentModel.Composition.MetadataViewProvider.GetMetadataView[ITrans_StronglyTypedStructure](IDictionary`2 metadata)\r\n```\r\n\u003c!-- runfo report start --\u003e\r\nRunfo Tracking Issue: [system.componentmodel.composition tests failing](https://runfo.azurewebsites.net/tracking/issue/62)\r\n|Build|Definition|Kind|Run Name|\r\n|---|---|---|---|\r\n\r\n\r\n\r\nBuild Result Summary\r\n|Day Hit Count|Week Hit Count|Month Hit Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\r\n\u003c!-- runfo report end --\u003e\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONQSO6Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMjIwNTMzMA==",
                                           "createdAt":  "2020-04-10T20:34:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "#32295\r\nhttps://github.com/mono/mono/issues/16417",
                                           "updatedAt":  "2020-04-10T20:34:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjQ2NjAyMA==",
                                           "createdAt":  "2021-01-08T00:16:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "I hit this again on two different legs of my PR here:\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=941614\u0026view=logs\u0026j=c6f8dc49-92a1-5760-c098-ba97b8142bfb\u0026t=22b0078b-0469-5ba6-8725-2121fdbae049\u0026l=71\r\n\r\nhttps://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-46687-merge-eaad8ef0e0164fb1a5/System.ComponentModel.Composition.Tests/console.5b5b0056.log?sv=2019-07-07\u0026se=2021-01-27T18%3A42%3A33Z\u0026sr=c\u0026sp=rl\u0026sig=0hGXpKBmBk%2BxtlgMoG%2BMNxv66tG8kK5dYUViM4G34jA%3D\r\n\r\n```\r\n===========================================================================================================\r\n/private/tmp/helix/working/C0BC09C3/w/9AB30851/e /private/tmp/helix/working/C0BC09C3/w/9AB30851/e\r\n  Discovering: System.ComponentModel.Composition.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.ComponentModel.Composition.Tests (found 1423 of 1588 test cases)\r\n  Starting:    System.ComponentModel.Composition.Tests (parallel test collections = on, max threads = 12)\r\n/Users/runner/work/1/s/src/mono/mono/eglib/ghashtable.c:334: assertion \u0027hash != NULL\u0027 failed\r\n\r\n/Users/runner/work/1/s/src/mono/mono/eglib/ghashtable.c:238: assertion \u0027hash != NULL\u0027 failed\r\n\r\n    Tests.Integration.ExportFactoryTests.ExportFactoryStandardImports_ShouldWorkProperly [FAIL]\r\n      System.NotSupportedException : Interface \u0027Tests.Integration.ExportFactoryTests+IIdTypeMetadata\u0027 is not a valid MetadataView; MetadataViews do not support non-public interfaces, and interfaces that contain members that are not properties.\r\n      ---- System.TypeLoadException : Could not load type \u0027_proxy_Tests.Integration.ExportFactoryTests+IIdTypeMetadata_fd7e9c79-c5a5-4130-bc52-0e379f05ff35\u0027 from assembly \u0027\u0027.\r\n      Stack Trace:\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/MetadataViewProvider.cs(44,0): at System.ComponentModel.Composition.MetadataViewProvider.GetMetadataView[IIdTypeMetadata](IDictionary`2 metadata)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/AttributedModelServices.cs(23,0): at System.ComponentModel.Composition.AttributedModelServices.GetMetadataView[IIdTypeMetadata](IDictionary`2 metadata)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/ReflectionModel/ExportfactoryCreator.cs(70,0): at System.ComponentModel.Composition.ReflectionModel.ExportFactoryCreator.CreateStronglyTypedExportFactoryOfTM[IId,IIdTypeMetadata](Export export)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/ReflectionModel/ExportfactoryCreator.cs(44,0): at System.ComponentModel.Composition.ReflectionModel.ExportFactoryCreator.\u003c\u003ec__DisplayClass4_0.\u003cCreateStronglyTypedExportFactoryFactory\u003eb__0(Export e)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/ReflectionModel/ImportingItem.cs(95,0): at System.ComponentModel.Composition.ReflectionModel.ImportingItem.CastSingleExportToImportType(Type type, Export export)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/ReflectionModel/ImportingItem.cs(88,0): at System.ComponentModel.Composition.ReflectionModel.ImportingItem.CastExportsToSingleImportType(Export[] exports)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/ReflectionModel/ImportingItem.cs(44,0): at System.ComponentModel.Composition.ReflectionModel.ImportingItem.CastExportsToImportType(Export[] exports)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/ReflectionModel/ReflectionComposablePart.cs(242,0): at System.ComponentModel.Composition.ReflectionModel.ReflectionComposablePart.SetImport(ImportingItem item, Export[] exports)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/ReflectionModel/ReflectionComposablePart.cs(204,0): at System.ComponentModel.Composition.ReflectionModel.ReflectionComposablePart.SetImport(ImportDefinition definition, IEnumerable`1 exports)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/ImportEngine.PartManager.cs(79,0): at System.ComponentModel.Composition.Hosting.ImportEngine.PartManager.TrySetImport(ImportDefinition import, Export[] exports)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/ImportEngine.cs(477,0): at System.ComponentModel.Composition.Hosting.ImportEngine.TrySatisfyImportSubset(PartManager partManager, IEnumerable`1 imports, AtomicComposition atomicComposition)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/ImportEngine.cs(345,0): at System.ComponentModel.Composition.Hosting.ImportEngine.TrySatisfyImportsStateMachine(PartManager partManager, ComposablePart part)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/ImportEngine.cs(436,0): at System.ComponentModel.Composition.Hosting.ImportEngine.TrySatisfyImports(PartManager partManager, ComposablePart part, Boolean shouldTrackImports)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/ImportEngine.cs(171,0): at System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImports(ComposablePart part)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/CompositionServices.cs(550,0): at System.ComponentModel.Composition.Hosting.CompositionServices.GetExportedValueFromComposedPart(ImportEngine engine, ComposablePart part, ExportDefinition definition)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/CatalogExportProvider.cs(542,0): at System.ComponentModel.Composition.Hosting.CatalogExportProvider.GetExportedValue(CatalogPart part, ExportDefinition export, Boolean isSharedPart)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/CatalogExportProvider.CatalogExport.cs(59,0): at System.ComponentModel.Composition.Hosting.CatalogExportProvider.CatalogExport.GetExportedValueCore()\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Primitives/Export.cs(204,0): at System.ComponentModel.Composition.Primitives.Export.get_Value()\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/ExportServices.cs(140,0): at System.ComponentModel.Composition.ExportServices.GetCastedExportedValue[ExportFactoryImporter](Export export)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/ExportProvider.GetExportOverrides.cs(732,0): at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueCore[ExportFactoryImporter](String contractName, ImportCardinality cardinality)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/ExportProvider.GetExportOverrides.cs(528,0): at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[ExportFactoryImporter](String contractName)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/ExportProvider.GetExportOverrides.cs(478,0): at System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue[ExportFactoryImporter]()\r\n        /_/src/libraries/System.ComponentModel.Composition/tests/System/ComponentModel/Composition/ExportFactoryTests.cs(133,0): at Tests.Integration.ExportFactoryTests.ExportFactoryStandardImports_ShouldWorkProperly()\r\n        /_/src/mono/netcore/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.cs(378,0): at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n        ----- Inner Stack Trace -----\r\n        /_/src/mono/netcore/System.Private.CoreLib/src/System/RuntimeType.Mono.cs(1858,0): at System.RuntimeType.GetMethodsByName(String name, BindingFlags bindingAttr, MemberListType listType, RuntimeType reflectedType)\r\n        /_/src/mono/netcore/System.Private.CoreLib/src/System/RuntimeType.Mono.cs(564,0): at System.RuntimeType.GetMethodCandidates(String name, BindingFlags bindingAttr, CallingConventions callConv, Type[] types, Int32 genericParamCount, Boolean allowPrefixLookup)\r\n        /_/src/mono/netcore/System.Private.CoreLib/src/System/RuntimeType.Mono.cs(794,0): at System.RuntimeType.GetMethodImpl(String name, Int32 genericParamCount, BindingFlags bindingAttr, Binder binder, CallingConventions callConv, Type[] types, ParameterModifier[] modifiers)\r\n        /_/src/mono/netcore/System.Private.CoreLib/src/System/RuntimeType.Mono.cs(786,0): at System.RuntimeType.GetMethodImpl(String name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Type.cs(242,0): at System.Type.GetMethod(String name, BindingFlags bindingAttr)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/MetadataViewGenerator.cs(121,0): at System.ComponentModel.Composition.MetadataViewGenerator.GetMetadataViewFactory(Type viewType)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/MetadataViewProvider.cs(40,0): at System.ComponentModel.Composition.MetadataViewProvider.GetMetadataView[IIdTypeMetadata](IDictionary`2 metadata)\r\n  Finished:    System.ComponentModel.Composition.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.ComponentModel.Composition.Tests  Total: 1423, Errors: 0, Failed: 1, Skipped: 0, Time: 0.911s\r\n```\r\n\r\nhttps://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-46687-merge-880c3358457c412b96/System.ComponentModel.Composition.Tests/console.01731f34.log?sv=2019-07-07\u0026se=2021-01-27T19%3A27%3A50Z\u0026sr=c\u0026sp=rl\u0026sig=QOPUaD8l%2BNhnCgQav%2B4lQACpAbUDq0ulvXzK%2F38x%2BBc%3D\r\n\r\n```\r\n===========================================================================================================\r\n/root/helix/work/workitem /root/helix/work/workitem\r\n  Discovering: System.ComponentModel.Composition.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.ComponentModel.Composition.Tests (found 1423 of 1588 test cases)\r\n  Starting:    System.ComponentModel.Composition.Tests (parallel test collections = on, max threads = 6)\r\n/__w/1/s/src/mono/mono/eglib/ghashtable.c:334: assertion \u0027hash != NULL\u0027 failed\r\n\r\n/__w/1/s/src/mono/mono/eglib/ghashtable.c:238: assertion \u0027hash != NULL\u0027 failed\r\n\r\n    Tests.Integration.RecompositionTests.Recomposition_IntegrationTest [FAIL]\r\n      System.NotSupportedException : Interface \u0027Tests.Integration.RecompositionTests+IRelationshipView\u0027 is not a valid MetadataView; MetadataViews do not support non-public interfaces, and interfaces that contain members that are not properties.\r\n      ---- System.TypeLoadException : Could not load type \u0027_proxy_Tests.Integration.RecompositionTests+IRelationshipView_830d7dc0-89c8-42b4-8d3f-686962821a7f\u0027 from assembly \u0027\u0027.\r\n      Stack Trace:\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/MetadataViewProvider.cs(44,0): at System.ComponentModel.Composition.MetadataViewProvider.GetMetadataView[IRelationshipView](IDictionary`2 metadata)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/AttributedModelServices.cs(23,0): at System.ComponentModel.Composition.AttributedModelServices.GetMetadataView[IRelationshipView](IDictionary`2 metadata)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/ExportServices.cs(97,0): at System.ComponentModel.Composition.ExportServices.CreateStronglyTypedLazyOfTM[String,IRelationshipView](Export export)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/ReflectionModel/ImportingItem.cs(95,0): at System.ComponentModel.Composition.ReflectionModel.ImportingItem.CastSingleExportToImportType(Type type, Export export)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/ReflectionModel/ImportingItem.cs(63,0): at System.ComponentModel.Composition.ReflectionModel.ImportingItem.CastExportsToCollectionImportType(Export[] exports)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/ReflectionModel/ImportingItem.cs(40,0): at System.ComponentModel.Composition.ReflectionModel.ImportingItem.CastExportsToImportType(Export[] exports)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/ReflectionModel/ReflectionComposablePart.cs(242,0): at System.ComponentModel.Composition.ReflectionModel.ReflectionComposablePart.SetImport(ImportingItem item, Export[] exports)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/ReflectionModel/ReflectionComposablePart.cs(204,0): at System.ComponentModel.Composition.ReflectionModel.ReflectionComposablePart.SetImport(ImportDefinition definition, IEnumerable`1 exports)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/ImportEngine.PartManager.cs(79,0): at System.ComponentModel.Composition.Hosting.ImportEngine.PartManager.TrySetImport(ImportDefinition import, Export[] exports)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/ImportEngine.cs(477,0): at System.ComponentModel.Composition.Hosting.ImportEngine.TrySatisfyImportSubset(PartManager partManager, IEnumerable`1 imports, AtomicComposition atomicComposition)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/ImportEngine.cs(357,0): at System.ComponentModel.Composition.Hosting.ImportEngine.TrySatisfyImportsStateMachine(PartManager partManager, ComposablePart part)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/ImportEngine.cs(436,0): at System.ComponentModel.Composition.Hosting.ImportEngine.TrySatisfyImports(PartManager partManager, ComposablePart part, Boolean shouldTrackImports)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/ImportEngine.cs(171,0): at System.ComponentModel.Composition.Hosting.ImportEngine.SatisfyImports(ComposablePart part)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/ComposablePartExportProvider.cs(314,0): at System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.\u003c\u003ec__DisplayClass19_0.\u003cCompose\u003eb__0()\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/CompositionServices.cs(577,0): at System.ComponentModel.Composition.Hosting.CompositionServices.TryInvoke(Action action)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/ComposablePartExportProvider.cs(313,0): at System.ComponentModel.Composition.Hosting.ComposablePartExportProvider.Compose(CompositionBatch batch)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/CompositionContainer.cs(396,0): at System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(CompositionBatch batch)\r\n        /_/src/libraries/System.ComponentModel.Composition/tests/System/Integration/RecompositionTests.cs(297,0): at Tests.Integration.RecompositionTests.Recomposition_IntegrationTest()\r\n        /_/src/mono/netcore/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.cs(378,0): at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n        ----- Inner Stack Trace -----\r\n        /_/src/mono/netcore/System.Private.CoreLib/src/System/RuntimeType.Mono.cs(1858,0): at System.RuntimeType.GetMethodsByName(String name, BindingFlags bindingAttr, MemberListType listType, RuntimeType reflectedType)\r\n        /_/src/mono/netcore/System.Private.CoreLib/src/System/RuntimeType.Mono.cs(564,0): at System.RuntimeType.GetMethodCandidates(String name, BindingFlags bindingAttr, CallingConventions callConv, Type[] types, Int32 genericParamCount, Boolean allowPrefixLookup)\r\n        /_/src/mono/netcore/System.Private.CoreLib/src/System/RuntimeType.Mono.cs(794,0): at System.RuntimeType.GetMethodImpl(String name, Int32 genericParamCount, BindingFlags bindingAttr, Binder binder, CallingConventions callConv, Type[] types, ParameterModifier[] modifiers)\r\n        /_/src/mono/netcore/System.Private.CoreLib/src/System/RuntimeType.Mono.cs(786,0): at System.RuntimeType.GetMethodImpl(String name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Type.cs(242,0): at System.Type.GetMethod(String name, BindingFlags bindingAttr)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/MetadataViewGenerator.cs(121,0): at System.ComponentModel.Composition.MetadataViewGenerator.GetMetadataViewFactory(Type viewType)\r\n        /_/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/MetadataViewProvider.cs(40,0): at System.ComponentModel.Composition.MetadataViewProvider.GetMetadataView[IRelationshipView](IDictionary`2 metadata)\r\n  Finished:    System.ComponentModel.Composition.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.ComponentModel.Composition.Tests  Total: 1423, Errors: 0, Failed: 1, Skipped: 0, Time: 2.189s\r\n```",
                                           "updatedAt":  "2021-01-08T00:16:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjQ4NzUzNg==",
                                           "createdAt":  "2021-01-08T01:24:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safern",
                                           "body":  "Accidentally closed it from runfo. ",
                                           "updatedAt":  "2021-01-08T01:24:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjUyNDM4OA==",
                                           "createdAt":  "2021-01-08T03:29:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I hit it just now too.",
                                           "updatedAt":  "2021-01-08T03:29:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjUyNDY5NA==",
                                           "createdAt":  "2021-01-08T03:30:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Either I’m looking at the wrong test or this issue should not have the disabled test label on it",
                                           "updatedAt":  "2021-01-08T03:30:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjUzMTI3MQ==",
                                           "createdAt":  "2021-01-08T03:57:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safern",
                                           "body":  "\u003e Either I’m looking at the wrong test or this issue should not have the disabled test label on it\r\n\r\nMaybe your build checked out before the PR to disable it was merged? https://github.com/dotnet/runtime/pull/46699",
                                           "updatedAt":  "2021-01-08T03:57:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjUzMjcyOA==",
                                           "createdAt":  "2021-01-08T04:03:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "That\u0027s it. I was confused because this issue got a disabled test label months ago. I guess now it\u0027s true :)",
                                           "updatedAt":  "2021-01-08T04:03:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41BI7p",
                                           "createdAt":  "2021-07-29T22:06:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safern",
                                           "body":  "Test is disabled, moving to Future. ",
                                           "updatedAt":  "2021-07-29T22:06:24Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[mono] Flaky tests: System.ComponentModel.Composition.Tests",
        "labels":  [
                       "area-System.ComponentModel",
                       "disabled-test",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/32295",
        "createdAt":  "2020-02-14T14:44:40Z",
        "number":  32295,
        "author":  "MaximLipnin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-01-14T21:32:22Z",
        "body":  "`System.ComponentModel.Composition.MetadataAttributeTests.StronglyTypedStructureTest` is flaky on mono.\r\nIt\u0027s disabled in rsp file and I\u0027ll move it into its respective xunit test and add `ActiveIssue`(see https://github.com/dotnet/runtime/pull/2087).\r\n\r\n`System.ComponentModel.Composition.CompositionContainerTests.GetExportOfTTMetadataView1_TypeAsMetadataViewTypeArgument_IsUsedAsMetadataConstraint` fails with the same symptoms.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJH3b2w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NjUyNDgwOA==",
                                           "createdAt":  "2020-02-14T23:58:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "There\u0027s already https://github.com/mono/mono/issues/16417 (mentioned in the .rsp) for the asme issue, we should probably close one of them.",
                                           "updatedAt":  "2020-02-14T23:58:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMjIwNTIzOA==",
                                           "createdAt":  "2020-04-10T20:34:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e we should probably close one of them.\r\n\r\n@akoeplinger @marek-safar where an issue is in the Mono runtime, do we track it here or there? Presumably here?",
                                           "updatedAt":  "2020-04-10T20:34:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMjIyODA1OQ==",
                                           "createdAt":  "2020-04-10T21:34:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "Tracking here is fine.",
                                           "updatedAt":  "2020-04-10T21:34:41Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[mono] Flaky test: System.ComponentModel.Composition.MetadataAttributeTests.StronglyTypedStructureTest",
        "labels":  [
                       "area-System.ComponentModel",
                       "disabled-test",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/33119",
        "createdAt":  "2020-03-03T19:24:41Z",
        "number":  33119,
        "author":  "kouvel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-19T21:34:34Z",
        "body":  "When a non-repeating timer ticks, the `_enabled` field is set instead of the `Enabled` property here, which does not null out the internal timer:\r\nhttps://github.com/dotnet/runtime/blob/db5dd993c29d47c128b2aeb2bba036637963bd08/src/libraries/System.ComponentModel.TypeConverter/src/System/Timers/Timer.cs#L289-L292\r\n\r\nThen, when the `Interval` or `AutoReset` properties are set, the timer is reactivated because it does not check whether the timer is enabled:\r\nhttps://github.com/dotnet/runtime/blob/db5dd993c29d47c128b2aeb2bba036637963bd08/src/libraries/System.ComponentModel.TypeConverter/src/System/Timers/Timer.cs#L163-L167\r\nhttps://github.com/dotnet/runtime/blob/db5dd993c29d47c128b2aeb2bba036637963bd08/src/libraries/System.ComponentModel.TypeConverter/src/System/Timers/Timer.cs#L78-L82\r\n\r\nAlso, along with reactivating the timer the `_enabled` field is not set even though the timer is now enabled, and `Stop()` would not stop the timer because it\u0027s already not enabled.\r\n\r\nMaybe the original intention was to set the `Enabled` property to false upon tick, such that `timer != null` would also imply that the timer is enabled. It would be a breaking change to fix that part, but probably at least when the timer is activated the `_enabled` field can also be updated such that it reflects the correct state.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJudTjw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MjY5NDQxNQ==",
                                           "createdAt":  "2020-07-01T23:29:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Good bug.  Seems like something that we could fix but would want to do so earlier in a release since this has been this way since .NETFramework.  Moving this to 6.0.0.",
                                           "updatedAt":  "2020-07-01T23:29:32Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "System.Timers.Timer may activate repeating timer in a way in which Stop() would not stop it",
        "labels":  [
                       "bug",
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/39375",
        "createdAt":  "2020-07-15T18:20:40Z",
        "number":  39375,
        "author":  "KlausLoeffelmann",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-01-14T22:07:22Z",
        "body":  "### Description\r\n\r\nSeveral Attributes providing Designer support for the `FileSystemWatcher` and `BackgroundWorker` components are missing for the class itself but also for some of its properties and events which results in missing Designer support.\r\n\r\n### Configuration\r\n\r\n*These affects all .NET Core versions on all OS.\r\n\r\n### Regression?\r\n\r\nThis is a regression from NetFx.\r\n\r\n### Other information\r\n\r\nFrom `FileSystemWatcher`\r\n* The `DescriptionAttribute` is missing for the class definition.\r\n* The `DefaultEventAttribute` (`\"Changed\"`) is missing for the class definition.\r\n* The `BrowsableAttribute` (`false`) is missing for the `Site` property.\r\n* The `BrowsableAttribute` (`false`) is missing for the `Error` property.\r\n* The `BrowsableAttribute` (`false`) is missing for the `SynchronizingObject` property.\r\n* The `DefaultValueAttribute` is missing for the `SynchronizingObject` property.\r\n* The `DescriptionAttribute` is missing for the `SynchronizingObject` property.\r\n* The `BrowsableAttribute` (`false`) is missing for the `InternalBufferSize` property.\r\n* The `DefaultValueAttribute` is missing for the for the `InternalBufferSize` property.\r\n* The `DescriptionAttribute` is missing for the for the `Path` property.\r\n* The `DefaultValueAttribute` is missing for the for the `Path` property.\r\n* The `EditorAttribute` is missing for the for the `Path` property.\r\n* The `TypeConverterAttribute` is missing for the for the `Path` property.\r\n* The `SettingBindableAttribute` is missing for the for the `Path` property.\r\n* The `DescriptionAttribute` is missing for the `Changed` event.\r\n* The `DescriptionAttribute` is missing for the `Created` event.\r\n* The `DesciptionAttribute` is missing for the `Deleted` event.\r\n* The `DesciptionAttribute` is missing for the `Renamed` event.\r\n* The `DescriptionAttribute` is missing for the for the `Filter` property.\r\n* The `DefaultValueAttribute` is missing for the for the `Filter` property.\r\n* The `SettingsBindableAttribute` is missing for the for the `Filter` property.\r\n* The `DescriptionAttribute` is missing for the `EnableRaisingEvents` property.\r\n* The `DefaultValueAttribute` is missing for the for the `EnableRaisingEvents` property.\r\n* The `DescriptionAttribute` is missing for the for the `NotifyFilter` property.\r\n* The `DefaultValueAttribute` is missing for the for the `NotifyFilter` property.\r\n* The `DescriptionAttribute` is missing for the `IncludeSubdirectories` property.\r\n* The `DefaultValueAttribute` is missing for the for the `IncludeSubdirectories` property.\r\n\r\nFrom `BackgroundWorker`\r\n* The `DescriptionAttribute` is missing for the class definition.\r\n* The `DefaultEventAttribute` (`\"DoWork\"`) is missing for the class definition.\r\n* The `BrowsableAttribute` (`false`) is missing for the `CancellationPending` property.\r\n* The `DescriptionAttribute` is missing for the for the `CancellationPending` property.\r\n* The `CategoryAttribute` is missing for `DoWork` event.\r\n* The `DescriptionAttribute` is missing for the `DoWork` event.\r\n* The `BrowsableAttribute` (`false`) is missing for the `IsBusy` property.\r\n* The `DescriptionAttribute` is missing for the for the `IsBusy` property.\r\n* The `CategoryAttribute` is missing for `ProgressChanged` event.\r\n* The `DescriptionAttribute` is missing for the `ProgressChanged` event.\r\n* The `CategoryAttribute` is missing for `RunWorkerCompleted` event.\r\n* The `DescriptionAttribute` is missing for the `RunWorkerCompleted` event.\r\n* The `CategoryProperty` is missing for the `WorkerReportsProgress` property.\r\n* The `DescriptionAttribute` is missing for the for the `WorkerReportsProgress` property.\r\n* The `DefaultValue` is missing for the for the `WorkerReportsProgress` property.\r\n* The `CategoryProperty` is missing for the `WorkerSupportsCancellation` property.\r\n* The `DescriptionAttribute` is missing for the for the `WorkerSupportsCancellation` property.\r\n* The `DefaultValue` is missing for the for the `WorkerSupportsCancellation` property.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKMOKeg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1OTE3OTY3MA==",
                                           "createdAt":  "2020-07-16T06:04:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "Do we want/need to enable designer support for non-visual components? AFAIK these attributes will cause a dependency on System.ComponentModel which might be overkill. I\u0027m not sure we care about File System Watcher in particular, but I\u0027m more curious where we draw the line and why.",
                                           "updatedAt":  "2020-07-16T06:04:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NTI1MTc2OA==",
                                           "createdAt":  "2020-07-28T20:05:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@danmosemsft brought up the same things are missing from BackgroundWorker.\r\n\r\n@safern has been looking at similar things missing in https://github.com/dotnet/runtime/issues/31428\r\n\r\n\u003e Do we want/need to enable designer support for non-visual components? AFAIK these attributes will cause a dependency on System.ComponentModel which might be overkill.\r\n\r\nMost of these attributes have already been pushed down low enough to avoid unnecessary dependencies.  So it\u0027s more a question of bloating runtime metadata for the designer time only scenario.\r\n\r\n",
                                           "updatedAt":  "2020-07-28T20:05:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NTI1MjAwNg==",
                                           "createdAt":  "2020-07-28T20:05:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @safern\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-07-28T20:05:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NTc4MDk2OQ==",
                                           "createdAt":  "2020-07-29T16:54:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBL3gmQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2020-07-29T22:24:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KlausLoeffelmann",
                                           "body":  "\u003e So it\u0027s more a question of bloating runtime metadata for the designer time only scenario.\r\n\r\nFor [`EventLog`](https://github.com/dotnet/runtime/blob/329f0dbfa3a164ee2e3bf9f75b7641165995c799/src/libraries/System.Diagnostics.EventLog/src/System/Diagnostics/EventLog.cs), the attributes are already included. So, I think being consistent would be the right think to do?",
                                           "updatedAt":  "2020-07-29T16:54:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NTc5ODU4Ng==",
                                           "createdAt":  "2020-07-29T17:29:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBL-L7g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2020-07-29T22:23:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "safern",
                                                                               "createdAt":  "2020-07-30T17:38:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "DustinCampbell",
                                           "body":  "\u003e bloating runtime metadata for the designer time only scenario\r\n\r\nDoes this really add much more runtime metadata bloat over, say, nullability attributes? :smile:",
                                           "updatedAt":  "2020-07-29T17:29:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MDcxMTEzNw==",
                                           "createdAt":  "2020-08-07T21:00:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@KlausLoeffelmann @DustinCampbell is the impact only visual (description/titles in property grid)? If so I think this is not a must have for 5.0 so I will move to Future (although we\u0027d accept a PR if offered))..?",
                                           "updatedAt":  "2020-08-07T21:00:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MTA5OTExMQ==",
                                           "createdAt":  "2020-08-26T20:12:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Editor attribute was fixed by @safern with https://github.com/dotnet/runtime/commit/3130ac980c97c0664eddb04411f8f765a9f908d8\r\n\r\n@KlausLoeffelmann @DustinCampbell can you address @danmosemsft\u0027s question?\r\n\r\n",
                                           "updatedAt":  "2020-08-26T20:12:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MzkwMzYxMA==",
                                           "createdAt":  "2020-08-31T16:57:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBO-L5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "safern",
                                                                               "createdAt":  "2020-08-31T18:02:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Moving to 6.0.0.  If you feel this can meet the 5.0.0 bar please fill in detail as requested.",
                                           "updatedAt":  "2020-08-31T16:57:41Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Add missing Designer support attributes to the FileSystemWatcher  and BackgroundWorker component",
        "labels":  [
                       "enhancement",
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/39872",
        "createdAt":  "2020-07-22T03:18:54Z",
        "number":  39872,
        "author":  "Lydia-Shi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-24T12:33:48Z",
        "body":  "\u003c!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md --\u003e\r\n\r\n* .NET Core Version: \r\n5.1.100.rc.1.20371.1\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nExtra \u0027(Name)\u0027 property appears in Property Browser window for \u0027splitContainer.panel\u0027\r\n![image](https://user-images.githubusercontent.com/54019172/88128699-165a2580-cc09-11ea-8042-f0763a8d277c.png)\r\n\r\n**Expected behavior:**\r\nNo (Name) property appears in Property Browser window.\r\n![image](https://user-images.githubusercontent.com/54019172/88128670-0b9f9080-cc09-11ea-94e3-fb2037b04ce9.png)\r\n\r\n**Minimal repro:**\r\n\r\n1. Create a Winforms .NET Core project\r\n2. Drag and drop a SplitContainer control to Form Designer\r\n3. Select the splitContainer1.Panel1, observe its Property Browser window\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONI5agw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzI2MTg5OA==",
                                           "createdAt":  "2020-07-23T22:24:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "merriemcgaw",
                                           "body":  "As described by @DustinCampbell \r\n\r\n\u003e The symptom that is appearing in the WinForms Designer is small, but the real issue is significant. The problem is that every extender property does not get a [DesignOnly] attribute in .NET Core, when it does in .NET Framework. In .NET Framework, there is a specific code path to make sure this attribute is added specially, so it\u0027s a clear .NET regression. This is a fundamental bug that needs to be fixed because it can affect any tools that process extender properties and rely on this attribute being present. The WinForms designer is not the only consumer of the TypeDescriptor/PropertyDescriptor API.\r\n\r\nHence migrating this to the dotnet core runtime repo",
                                           "updatedAt":  "2020-07-23T22:24:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzI2MTk4OA==",
                                           "createdAt":  "2020-07-23T22:25:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-07-23T22:25:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzI3MTEwNA==",
                                           "createdAt":  "2020-07-23T22:55:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DustinCampbell",
                                           "body":  "The problem is a bit of code missing on .NET Core here:\r\n\r\nhttps://github.com/dotnet/runtime/blob/746fbba9711ae05e39d515fa60ca4ac0ec72ba80/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/ReflectTypeDescriptionProvider.cs#L1105-L1114\r\n\r\nOn [NetFx](https://referencesource.microsoft.com/#System/compmod/system/componentmodel/ReflectTypeDescriptionProvider.cs,1174), that looks like so:\r\n\r\n```C#\r\n            // Now that we have our extended properties we can build up a list of callable properties.  These can be \r\n            // returned to the user.\r\n            //\r\n            properties = new PropertyDescriptor[extendedProperties.Length];\r\n            for (int idx = 0; idx \u003c extendedProperties.Length; idx++)\r\n            {\r\n                Attribute[] attrs = null;\r\n                IComponent comp = provider as IComponent;\r\n                if (comp == null || comp.Site == null)\r\n                {\r\n                    attrs = new Attribute[] {DesignOnlyAttribute.Yes};\r\n                }\r\n \r\n                ReflectPropertyDescriptor  rpd = extendedProperties[idx];\r\n                ExtendedPropertyDescriptor epd = new ExtendedPropertyDescriptor(rpd, rpd.ExtenderGetReceiverType(), provider, attrs);\r\n                properties[idx] = epd;\r\n            }\r\n```\r\n\r\nEssentially, in should be adding an extra property for sited components, but it doesn\u0027t.\r\n\r\nI can make this fix if that helps.",
                                           "updatedAt":  "2020-07-23T22:59:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzI3NDA1Mw==",
                                           "createdAt":  "2020-07-23T23:05:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @safern\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-07-23T23:05:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzI3NDE1Mw==",
                                           "createdAt":  "2020-07-23T23:06:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "We welcome PR\u0027s 😊",
                                           "updatedAt":  "2020-07-23T23:06:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzI3NDY1Ng==",
                                           "createdAt":  "2020-07-23T23:08:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safern",
                                           "body":  "This has been the behavior since 3.1 so marking as future for now given the timeframe, but a PR is welcome if we want to get this in earlier 😄 ",
                                           "updatedAt":  "2020-07-23T23:08:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NDcwMjM4NQ==",
                                           "createdAt":  "2021-02-24T02:29:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Lydia-Shi",
                                           "body":  "Verified this issue with Dev16 16.10.0 Preview 2.0 [31023.296.main], this issue is fixed that no (Name) property appears in Property Browser window for \u0027splitContainer.panel\u0027, results as below:\r\n![image](https://user-images.githubusercontent.com/54019172/108938466-16347380-768b-11eb-8c87-a3418f646d7a.png)\r\n",
                                           "updatedAt":  "2021-02-24T02:29:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40jlqD",
                                           "createdAt":  "2021-07-16T22:09:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DustinCampbell",
                                           "body":  "Re-opening this. It is still a runtime bug that we should consider addressing. We ended up writing code in the WinForms designer to work around it, which is why it was closed.",
                                           "updatedAt":  "2021-07-16T22:09:09Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[DesignOnly] attribute not supported for extender properties",
        "labels":  [
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/40771",
        "createdAt":  "2020-08-13T12:09:27Z",
        "number":  40771,
        "author":  "lindexi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBNbIPQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "strangeman375",
                                            "createdAt":  "2020-08-14T17:01:37Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-07-29T22:08:33Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nThe System.ComponentModel.Component will lock self when enter Dispose. Maybe there will be dead locks in this approach.\r\n\r\n        protected virtual void Dispose(bool disposing)\r\n        {\r\n            if (disposing)\r\n            {\r\n                lock (this)\r\n                {\r\n                    _site?.Container?.Remove(this);\r\n                    if (_events != null)\r\n                    {\r\n                        ((EventHandler?)_events[s_eventDisposed])?.Invoke(this, EventArgs.Empty);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n### Other information\r\n\r\n\u003c!--\r\n* Please include any relevant stack traces or error messages. If possible please include text as text rather than images (so it shows up in searches).\r\n* If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.\r\n* Do you know of any workarounds?\r\n  --\u003e\r\n\r\n\r\nThe mini demo: https://github.com/lindexi/lindexi_gd/tree/5219a17e96a3577639d0b486c57bc699941c585b/HearwhejiyehallyiheFubaduwheefu\r\n\r\n            var component = new Component();\r\n            lock (component)\r\n            {\r\n                Task.Run(() =\u003e component.Dispose()).Wait(); // dead lock\r\n            }\r\n\r\nRun the code, and then you will find that the thread never exits",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKLjY_g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzQzOTY3Mg==",
                                           "createdAt":  "2020-08-13T12:09:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-08-13T12:09:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MzU0OTMxMQ==",
                                           "createdAt":  "2020-08-13T15:34:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @safern\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-13T15:34:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MjczODAxNg==",
                                           "createdAt":  "2020-08-28T15:43:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Not a regression: Same behavior in desktop.  Certainly it\u0027s not best practice to lock on public objects but given this behavior has been around for decade+ I\u0027m reluctant to change it as it may be part of the design to have a shared lock object between this type and implementers (for example in WinForms). \r\n\r\nWRT to the repro: it hangs when you lock on it; don\u0027t do that :)  Do you have any real world scenario that\u0027s blocked by this behavior?",
                                           "updatedAt":  "2020-08-28T15:43:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MzIwMjgxNA==",
                                           "createdAt":  "2020-08-29T00:31:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lindexi",
                                           "body":  "\u003e Do you have any real world scenario that\u0027s blocked by this behavior?\r\n@ericstj No\r\n\r\nAlthough this question may be used as a feature, should we add some comments or documentation to tell future developers?\r\n",
                                           "updatedAt":  "2020-08-29T00:31:58Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "The Component Dispose is not safe in lock",
        "labels":  [
                       "bug",
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50821",
        "createdAt":  "2021-04-06T23:49:14Z",
        "number":  50821,
        "author":  "tlakollo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-19T21:36:22Z",
        "body":  "### Description\r\n\r\nFile [DesigntimeLicenseContext](https://github.com/dotnet/runtime/blob/main/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/Design/DesigntimeLicenseContext.cs)  makes use of a single file dangerous pattern inside function `GetSavedLicenseKey `. The result of this code is that no license key will be found. This bug tracks the progress to understand the following:\r\n- If the warning can be suppressed because the code will never be used in a published application\r\n- How the license gets published for a single-file application. Would using AppContext.BaseDirectory is the right thing to do?\r\n\r\nIn the meantime, the warning will be suppressed in code with a reference to this issue until this gets fixed",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONLX0yA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNDUwNDE5Nw==",
                                           "createdAt":  "2021-04-06T23:49:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @vitek-karas, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nFile [DesigntimeLicenseContext](https://github.com/dotnet/runtime/blob/main/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/Design/DesigntimeLicenseContext.cs)  makes use of a single file dangerous pattern inside function `GetSavedLicenseKey `. The result of this code is that no license key will be found. This bug tracks the progress to understand the following:\r\n- If the warning can be suppressed because the code will never be used in a published application\r\n- How the license gets published for a single-file application. Would using AppContext.BaseDirectory is the right thing to do?\r\n\r\nIn the meantime, the warning will be suppressed in code with a reference to this issue until this gets fixed\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etlakollo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-06T23:49:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40tfTI",
                                           "createdAt":  "2021-07-21T16:53:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nFile [DesigntimeLicenseContext](https://github.com/dotnet/runtime/blob/main/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/Design/DesigntimeLicenseContext.cs)  makes use of a single file dangerous pattern inside function `GetSavedLicenseKey `. The result of this code is that no license key will be found. This bug tracks the progress to understand the following:\r\n- If the warning can be suppressed because the code will never be used in a published application\r\n- How the license gets published for a single-file application. Would using AppContext.BaseDirectory is the right thing to do?\r\n\r\nIn the meantime, the warning will be suppressed in code with a reference to this issue until this gets fixed\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etlakollo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Single-File`, `area-System.ComponentModel`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-21T16:53:27Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "GetSavedLicenseKey uses single file dangerous patterns",
        "labels":  [
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/52578",
        "createdAt":  "2021-04-27T08:15:44Z",
        "number":  52578,
        "author":  "azarevichvl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-01-17T19:58:27Z",
        "body":  "Hello Team,\r\n\r\nI am trying to port an application to .NET 5.0. I noticed that LicenseProvider class behaves differently than in .Net Framework. Method GetLicense is never called in \"designtime\" usage mode so I can not call method \"SetSavedLicenseKey\" of license context and save license key during build.\r\n\r\nI didn\u0027t find any information about behavior changes in LicenseProvider class so I expect it can work in .NET 5 in the same way as in .NET framework.\r\n\r\nI created simple example to demonstrate how it works in both frameworks. May be I am doing something wrong or build time determination API was changed.\r\n\r\nIs this framework bug or am I doing something wrong? Is there any workarounds to make the same licensing behavior in .NET 5? \r\n\r\nDownload sample project: [CoreLicBug.zip](https://github.com/dotnet/core/files/6382906/CoreLicBug-main.zip)\r\n\r\nLink to the same project in my github: https://github.com/azarevichvl/CoreLicBug\r\n\r\n\r\nBest regards.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPH1dXQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNzU2MzMxMg==",
                                           "createdAt":  "2021-05-11T00:43:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-05-11T00:43:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNzU2MzQzMA==",
                                           "createdAt":  "2021-05-11T00:43:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHello Team,\r\n\r\nI am trying to port an application to .NET 5.0. I noticed that LicenseProvider class behaves differently than in .Net Framework. Method GetLicense is never called in \"designtime\" usage mode so I can not call method \"SetSavedLicenseKey\" of license context and save license key during build.\r\n\r\nI didn\u0027t find any information about behavior changes in LicenseProvider class so I expect it can work in .NET 5 in the same way as in .NET framework.\r\n\r\nI created simple example to demonstrate how it works in both frameworks. May be I am doing something wrong or build time determination API was changed.\r\n\r\nIs this framework bug or am I doing something wrong? Is there any workarounds to make the same licensing behavior in .NET 5? \r\n\r\nDownload sample project: [CoreLicBug.zip](https://github.com/dotnet/core/files/6382906/CoreLicBug-main.zip)\r\n\r\nLink to the same project in my github: https://github.com/azarevichvl/CoreLicBug\r\n\r\n\r\nBest regards.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eazarevichvl\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-11T00:43:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNzU2Mzc4Ng==",
                                           "createdAt":  "2021-05-11T00:43:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "/cc @maryamariyan @michaelgsharp @tarekgh as well",
                                           "updatedAt":  "2021-05-11T00:43:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41RvhJ",
                                           "createdAt":  "2021-08-05T22:12:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "cc @rladuca ",
                                           "updatedAt":  "2021-08-05T22:12:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41Rxf4",
                                           "createdAt":  "2021-08-05T22:15:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "This does not seem like a regression happening in 6.0 (moved to 7.0 milestone)\r\n\r\n@rladuca if you think this needs to be taken care of in 6.0 please let us know.",
                                           "updatedAt":  "2021-08-05T22:15:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41R0Q6",
                                           "createdAt":  "2021-08-05T22:30:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rladuca",
                                           "body":  "@maryamariyan I don\u0027t work on WPF anymore, so I\u0027m not the right person to tag here.\r\n\r\n@ryalanms Potentially there is some designer difference here, you might want to circle back with VS (@chabiss?)",
                                           "updatedAt":  "2021-08-05T22:30:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48aELE",
                                           "createdAt":  "2022-01-14T20:52:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "cc @dotnet/wpf-developers ",
                                           "updatedAt":  "2022-01-14T20:52:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48ekY-",
                                           "createdAt":  "2022-01-17T15:10:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vishalmsft",
                                           "body":  "@maryamariyan Thank you for tagging WPF Developers. \r\nWPF has been moved to IDC. Please help with the context on how WPF team can help or what was discussed. \r\n",
                                           "updatedAt":  "2022-01-17T15:10:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48fV1d",
                                           "createdAt":  "2022-01-17T19:58:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@maryamariyan should we transfer this issue to WPF repo?",
                                           "updatedAt":  "2022-01-17T19:58:27Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "The LicenseProvider class method GetLicense in .NET 5 is never called in design time",
        "labels":  [
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54737",
        "createdAt":  "2021-06-25T10:48:53Z",
        "number":  54737,
        "author":  "jez9999",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-8Xkg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2021-06-25T14:28:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "GSPP",
                                            "createdAt":  "2021-08-31T11:52:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ajruckman",
                                            "createdAt":  "2023-01-20T18:21:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dotnetjunkie",
                                            "createdAt":  "2023-12-07T14:56:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AndrewCutler",
                                            "createdAt":  "2024-10-16T15:36:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "enstit",
                                            "createdAt":  "2025-02-10T15:36:31Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2021-08-31T11:53:00Z",
        "body":  "## Background and Motivation\r\n\r\nAt the moment, `System.Timers.Timer` (which uses a `System.Threading.Timer` internally) has no way to set `dueTime`.  `dueTime` allows the caller to decide how long the initial delay before the first callback should be.  For some reason, `System.Timers.Timer` doesn\u0027t provide the option to configure this, and instead, always sets the value to the interval:\r\n\r\nhttps://github.com/dotnet/runtime/blob/0416c3469b7bccff087b89db3d9967dfd36070a3/src/libraries/System.ComponentModel.TypeConverter/src/System/Timers/Timer.cs#L131\r\n\r\nAs users will frequently want to be able to trigger the timer immediately upon start, `dueTime` could be configurable on `System.Timers.Timer`; however, I propose a simpler `TickImmediately` bool on the class, which defaults to false (current behaviour), and can be set to true to set the underlying `System.Threading.Timer`\u0027s `dueTime` to 0, giving an immediate tick upon starting the timer.\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace System.Timers\r\n{\r\n    public partial class Timer : Component, ISupportInitialize\r\n    {\r\n+        [TimersDescription(nameof(SR.TimerTickImmediately), null), DefaultValue(false)]\r\n+        public bool TickImmediately\r\n+        {\r\n+            get;\r\n+            set;\r\n+        }\r\n    }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\n``` C#\r\nvar timer = new System.Timers.Timer();\r\ntimer.Interval = 60000; // Tick every minute\r\ntimer.Elapsed += async (sender, ea) =\u003e await doSomeWork(sender, ea);\r\ntimer.AutoReset = true; // Keep ticking automatically\r\ntimer.TickImmediately = true; // First tick is immediate\r\ntimer.Start();\r\n```\r\n\r\n## Alternative Designs\r\n\r\nThe `dueTime` integer could also be exposed directly.  This is a bit more complicated to implement, and I consider that it\u0027s not really necessary as generally the reason for this requirement is that the calling code will want the code to tick immediately, rather than after a different period than the interval.\r\n\r\n## Risks\r\n\r\nNone as far as I can see.  Default behaviour of the Timer would remain the same.  Usage is clear and changed behaviour should be pretty obvious.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONjDCzA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2ODQxMjM5NQ==",
                                           "createdAt":  "2021-06-25T10:48:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-06-25T10:48:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2ODUwNTc1MQ==",
                                           "createdAt":  "2021-06-25T13:37:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\nAt the moment, `System.Timers.Timer` (which uses a `System.Threading.Timer` internally) has no way to set `dueTime`.  `dueTime` allows the caller to decide how long the initial delay before the first callback should be.  For some reason, `System.Timers.Timer` doesn\u0027t provide the option to configure this, and instead, always sets the value to the interval:\r\n\r\nhttps://github.com/dotnet/runtime/blob/0416c3469b7bccff087b89db3d9967dfd36070a3/src/libraries/System.ComponentModel.TypeConverter/src/System/Timers/Timer.cs#L131\r\n\r\nAs users will frequently want to be able to trigger the timer immediately upon start, `dueTime` could be configurable on `System.Timers.Timer`; however, I propose a simpler `TickImmediately` bool on the class, which defaults to false (current behaviour), and can be set to true to set the underlying `System.Threading.Timer`\u0027s `dueTime` to 0, giving an immediate tick upon starting the timer.\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace System.Timers\r\n{\r\n    public partial class Timer : Component, ISupportInitialize\r\n    {\r\n+        [TimersDescription(nameof(SR.TimerTickImmediately), null), DefaultValue(false)]\r\n+        public bool TickImmediately\r\n+        {\r\n+            get;\r\n+            set;\r\n+        }\r\n    }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\n``` C#\r\nvar timer = new System.Timers.Timer();\r\ntimer.Interval = 60000; // Tick every minute\r\ntimer.Elapsed += async (sender, ea) =\u003e await doSomeWork(sender, ea);\r\ntimer.AutoReset = true; // Keep ticking automatically\r\ntimer.TickImmediately = true; // First tick is immediate\r\ntimer.Start();\r\n```\r\n\r\n## Alternative Designs\r\n\r\nThe `dueTime` integer could also be exposed directly.  This is a bit more complicated to implement, and I consider that it\u0027s not really necessary as generally the reason for this requirement is that the calling code will want the code to tick immediately, rather than after a different period than the interval.\r\n\r\n## Risks\r\n\r\nNone as far as I can see.  Default behaviour of the Timer would remain the same.  Usage is clear and changed behaviour should be pretty obvious.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejez9999\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.ComponentModel`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-25T13:37:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2ODU1MDAyNA==",
                                           "createdAt":  "2021-06-25T14:42:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AmrAlSayed0",
                                           "body":  "I think this would be better as a parameter to `.Start()` method since this an option that\u0027s only used at the start. No need to keep it around for the whole lifetime of the `Timer`, It would be like so:\r\n```csharp\r\nvar timer = new System.Timers.Timer();\r\ntimer.Interval = 60000; // Tick every minute\r\ntimer.Elapsed += async (sender, ea) =\u003e await doSomeWork(sender, ea);\r\ntimer.AutoReset = true; // Keep ticking automatically\r\ntimer.Start(tickImmediately: true); // First tick is immediate\r\n```\r\nAlso, another overload can be provided that takes a `TimeSpan` for the initial delay.\r\n```csharp\r\nvar timer = new System.Timers.Timer();\r\ntimer.Interval = 60000; // Tick every minute\r\ntimer.Elapsed += async (sender, ea) =\u003e await doSomeWork(sender, ea);\r\ntimer.AutoReset = true; // Keep ticking automatically\r\nvar initialDelay = System.TimeSpan.FromSeconds(1);\r\ntimer.Start(initialDelay: initialDelay); // First tick is after 1 second\r\n```",
                                           "updatedAt":  "2021-06-25T14:42:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2ODY1OTMyMQ==",
                                           "createdAt":  "2021-06-25T15:50:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jez9999",
                                           "body":  "@AmrAlSayed0 It would be appropriate for the lifetime of the timer if you wanted to stop and start the timer, immediately ticking each time.  Although, that way would also work fine.  I don\u0027t mind.",
                                           "updatedAt":  "2021-06-25T15:51:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2ODY2OTYyOA==",
                                           "createdAt":  "2021-06-25T16:04:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AmrAlSayed0",
                                           "body":  "@jez9999 Good point. I usually never restart a `Timer` so it never occured to me so I take back my mini proposal. 😅",
                                           "updatedAt":  "2021-06-25T16:04:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40qDpP",
                                           "createdAt":  "2021-07-20T14:28:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jez9999",
                                           "body":  "@AmrAlSayed0 So do you have any idea how to get these ideas reviewed?  This issue has been here a while without much comment.",
                                           "updatedAt":  "2021-07-20T14:28:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42MMLM",
                                           "createdAt":  "2021-08-31T11:53:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Alternatively, users could call the callback immediately.",
                                           "updatedAt":  "2021-08-31T11:53:00Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "System.Timers.Timer.TickImmediately",
        "labels":  [
                       "api-suggestion",
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/55176",
        "createdAt":  "2021-07-05T13:51:16Z",
        "number":  55176,
        "author":  "krwq",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-22T21:32:02Z",
        "body":  "Found during adding nullable annotations to TypeConverter (https://github.com/dotnet/runtime/pull/54961)\r\n\r\nCurrently TypeDescriptor.GetTypeDescriptor returns null when instance is null.\r\n\r\nConsider changing that logic to return EmptyCustomTypeDescriptor and changing nullability of return type.\r\n\r\nCurrent logic causes that GetTypeDescriptor needs to return nullable ICustomTypeDescriptor which causes that base class needs to be annotated the same which adds lots of unnecessary `!`. Returning EmptyCustomTypeDescriptor seems more consistent with other implementations though and also seems no code in the framework expects that API to return null.\r\n\r\nPlease make sure to track usages and remove unnecessary `!` along the way when fixing this",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONBoqsw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NDEzMDA5OQ==",
                                           "createdAt":  "2021-07-05T13:51:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFound during adding nullable annotations to TypeConverter (https://github.com/dotnet/runtime/pull/54961)\r\n\r\nCurrently TypeDescriptor.GetTypeDescriptor returns null when instance is null.\r\n\r\nConsider changing that logic to return EmptyCustomTypeDescriptor and changing nullability of return type.\r\n\r\nCurrent logic causes that GetTypeDescriptor needs to return nullable ICustomTypeDescriptor which causes that base class needs to be annotated the same which adds lots of unnecessary `!`. Returning EmptyCustomTypeDescriptor seems more consistent with other implementations though and also seems no code in the framework expects that API to return null.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekrwq\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-05T13:51:19Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Consider changing TypeDescriptor.GetTypeDescriptor to return EmptyCustomTypeDescriptor instead of null",
        "labels":  [
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/55177",
        "createdAt":  "2021-07-05T14:11:24Z",
        "number":  55177,
        "author":  "krwq",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-19T21:34:12Z",
        "body":  "Found during adding nullable annotations to TypeConverter (https://github.com/dotnet/runtime/pull/54961)\r\n\r\nCurrent logic of PropertyDescriptorCollection is inconsistent about allowing null PropertyDescriptor, i.e.:\r\n- constructors taking `PropertyDescriptor[]` do not guard against null values\r\n- `Add`, `Insert`, `Remove` doesn\u0027t have a null check\r\n- `Find` if it encounters null property when searching will in many cases throw NRE as it accesses `Name` without any null checks\r\n- anything triggering sorting (`InternalSort`) for non empty collection will most likely throw NRE because it accesses `Name` without null checks\r\n\r\nI\u0027ve conservatively marked them as non-accepting the null as that will provide most intuitive experience. The solution here is to do one of the following:\r\n- add null checks and throw on null\r\n- allow for nulls everywhere",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONBpi_w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NDE0NDUxMQ==",
                                           "createdAt":  "2021-07-05T14:11:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFound during adding nullable annotations to TypeConverter (https://github.com/dotnet/runtime/pull/54961)\r\n\r\nCurrent logic of PropertyDescriptorCollection is inconsistent about allowing null PropertyDescriptor, i.e.:\r\n- constructors taking `PropertyDescriptor[]` do not guard against null values\r\n- `Add`, `Insert`, `Remove` doesn\u0027t have a null check\r\n- `Find` if it encounters null property when searching will in many cases throw NRE as it accesses `Name` without any null checks\r\n- anything triggering sorting (`InternalSort`) for non empty collection will most likely throw NRE because it accesses `Name` without null checks\r\n\r\nI\u0027ve conservatively marked them as non-accepting the null as that will provide most intuitive experience. The solution here is to do one of the following:\r\n- add null checks and throw on null\r\n- allow for nulls everywhere\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekrwq\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-05T14:11:27Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "System.ComponentModel.PropertyDescriptorCollection logic should be consistent about null PropertyDescriptor",
        "labels":  [
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58331",
        "createdAt":  "2021-08-29T17:26:20Z",
        "number":  58331,
        "author":  "koszeggy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-01-14T22:24:35Z",
        "body":  "### Description\r\n\r\nWhen I accidentally used the `System.ComponentModel.VersionConverter` class in my [unit tests](https://github.com/koszeggy/KGySoft.CoreLibraries/blob/85b80b4f101fceac09207d9e5ad093f4456c311b/KGySoft.CoreLibraries.UnitTest/UnitTests/ComponentModel/TypeConvertersTest.cs#L94) instead of [my `VersionConverter`](https://github.com/koszeggy/KGySoft.CoreLibraries/blob/85b80b4f101fceac09207d9e5ad093f4456c311b/KGySoft.CoreLibraries/ComponentModel/_TypeConverters/VersionConverter.cs#L34) it turned out that the System implementation may fail in some cases.\r\n\r\n### Reproduction\r\n\r\n* Call `VersionConverter.ConvertTo` with a `Version` instance that has only two or three version number elements and use `destinationType: typeof(Version)`. The [instantiation](https://github.com/dotnet/runtime/blob/ab56a06ce4c09c1f923cc55a8a29b40bbf2fdc4a/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/VersionConverter.cs#L88) will fail because `Version(int,int,int,int)` constructor does not accept -1 values.\r\n* Call `VersionConverter.ConvertFrom` with an `InstanceDescriptor` returned by the `VersionConverter.ConvertTo` method from a similar `Version` instance.\r\n\r\n### Suggested fix\r\n\r\n* To convert to a `Version` use `Version.Clone` instead\r\n* To create an `InstanceDescriptor` use the string constructor or the `Parse` method instead.\r\n\r\n### Other information\r\n\r\nI looked at the runtime [unit tests](https://github.com/dotnet/runtime/blob/ab56a06ce4c09c1f923cc55a8a29b40bbf2fdc4a/src/libraries/System.ComponentModel.TypeConverter/tests/VersionConverterTests.cs#L9) and it seems that `Version` and `InstanceDescriptor` target types are not tested for actual conversions but only for the `CanConvertTo`/`CanConvertFrom` methods.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONhxsEQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42HGwR",
                                           "createdAt":  "2021-08-29T17:26:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen I accidentally used the `System.ComponentModel.VersionConverter` class in my [unit tests](https://github.com/koszeggy/KGySoft.CoreLibraries/blob/85b80b4f101fceac09207d9e5ad093f4456c311b/KGySoft.CoreLibraries.UnitTest/UnitTests/ComponentModel/TypeConvertersTest.cs#L94) instead of [my `VersionConverter`](https://github.com/koszeggy/KGySoft.CoreLibraries/blob/85b80b4f101fceac09207d9e5ad093f4456c311b/KGySoft.CoreLibraries/ComponentModel/_TypeConverters/VersionConverter.cs#L34) it turned out that the System implementation may fail in some cases.\r\n\r\n### Reproduction\r\n\r\n* Call `VersionConverter.ConvertTo` with a `Version` instance that has only two or three version number elements and use `destinationType: typeof(Version)`. The [instantiation](https://github.com/dotnet/runtime/blob/ab56a06ce4c09c1f923cc55a8a29b40bbf2fdc4a/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/VersionConverter.cs#L88) will fail because `Version(int,int,int,int)` constructor does not accept -1 values.\r\n* Call `VersionConverter.ConvertFrom` with an `InstanceDescriptor` returned by the `VersionConverter.ConvertTo` method from a similar `Version` instance.\r\n\r\n### Suggested fix\r\n\r\n* To convert to a `Version` use `Version.Clone` instead\r\n* To create an `InstanceDescriptor` use the string constructor or the `Parse` method instead.\r\n\r\n### Other information\r\n\r\nI looked at the runtime [unit tests](https://github.com/dotnet/runtime/blob/ab56a06ce4c09c1f923cc55a8a29b40bbf2fdc4a/src/libraries/System.ComponentModel.TypeConverter/tests/VersionConverterTests.cs#L9) and it seems that `Version` and `InstanceDescriptor` target types are not tested for actual conversions but only for the `CanConvertTo`/`CanConvertFrom` methods.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekoszeggy\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-29T17:26:26Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "VersionConverter.ConvertTo/From may fail with Version and InstanceDescriptor types",
        "labels":  [
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59729",
        "createdAt":  "2021-09-28T22:37:06Z",
        "number":  59729,
        "author":  "msedi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-09-30T08:14:50Z",
        "body":  "### Background and motivation\r\n\r\nWhen looking at the `PropertyGrid `(WinForms), you have the ability to set multiple objects of the same or of different types as `SelectedObjects`. What the grid does internally is a union or an intersection of the properties and display the list of \"surviving\" properties in a list. It is of course depending on the implementation (telerik for example has a bit more features on it). \r\n\r\nAdditionally the values of the properties are also shown. Thereby each property value is taken from each of the SelectedObjects\u0027 property value. If all values for each property value match, the value is displayed, if it doesn\u0027t match it is left empty.\r\n\r\nWhile this is only a UI thing, many times I have the need to mimic this in code. For example, in my situation I have many windows displaying different content, with tools. There can be many tools on each display (e.g. drawing a circle). Then there is another window that groups all tools together (currently each tool group is a MockObject). This must be a dynamic behavior because tools can be added or removed, some displays support a tool, some not. What is necessary that if you want to activate a tool or if you want to modify properties of the tool (e.g. the circle color) you should need to walk through every display and set the properties for each and every tool (sometimes also this is neceessary). In almost 99% you want to select the properties for all displays, and this is where the MockObject come in.\r\n\r\nCurrently, if I have an object that I want to mimic I have to create a for loop for each property that distributes the values to all `SelectedObjects`. On the other side, I have to run through all of this when a value of a single object has been changed.\r\n\r\nMy currently implementation look like this:\r\n\r\n```cs\r\nclass MockObject : INotifyPropertyChanged, ICustomTypeDescriptor\r\n{\r\n  public ObservableCollection\u003cobject\u003eObjects {get;} = new();\r\n}\r\n\r\n```\r\n\r\nI have hidden the inner logic because its to long to be displayed here.\r\nThis only work currently for the `PropertyGrid `because this one does the reflection by using the `ICustomTypeDescriptor`.\r\nThere is one thing that doesn\u0027t work though - there is no way the PropertyGrid detects changes in the Objects, because there is obviously no way a `ICustomTypeDescriptor` can inform a listener that its `PropertyCollection `has changed (?) - as least I haven\u0027t found a way, so that anytime the PropertyCollection changes, one need to unassign and reassign the same object(s) to the `SelectedObjects`. I assume this is a missing link to work better (dynamically) with the `PropertyGrid`.\r\n\r\nOne of the bigger problems with my solution is that it is not working in code, because the properties are only accessible and visible in the code editor when either using dynamic or when using reflection, writing directly into the `PropertyCollection` which is error prone since you only get runtime exceptions.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace System.ComponentModel\r\n{\r\n    public sealed class MockObject : DynamicObject, INotifyPropertyChanged, ICustomTypeDescriptor, \r\n    {\r\n      public ObservableCollection\u003cobject\u003e Items {get;} = new();\r\n    }\r\n\r\n    public sealed class MockObject\u003cT\u003e : DynamicObject, INotifyPropertyChanged, ICustomTypeDescriptor, \r\n    {\r\n      public ObservableCollection\u003cT\u003e Items {get;} = new();\r\n    }\r\n}\r\n\r\n// Typeless implementation creates a MockObject from a set of objects (which can be of course also other mockobjects)\r\nDateTime A, B, C;\r\nBigInteger D;\r\nvar mock1 = MockObject.Create(A,B,C);\r\nvar mock2 = MockObject.Create(A,D);\r\n\r\n// Typed Versions where the result is explicitly given\r\nTInterface mock3 = MockObject.Create\u003cTInterface\u003e(A,D);\r\n\r\nAdditionally, the type of merge (intersect and union) can be given as a parameter.\r\n```     \r\n\r\n\r\n\r\n### API Usage\r\n\r\n```C#\r\n  interface IPoint\r\n  {\r\n    int X {get; set;}\r\n    int Y {get; set;}\r\n  }\r\n  \r\n  class Point : IPoint\r\n  {\r\n    public int X {get; set;}\r\n    public int Y {get; set;}\r\n  }\r\n  \r\n  Point A = new(1,1), B new(2,2), C=new(3,3);\r\n  \r\n  TInterface mock = MockObject.Create\u003cT, TInterface\u003e(A,B,C);\r\n  mock.X = 10;\r\n  mock.Y = 100;\r\n\r\n  // Would print 10 | 10 | 10\r\n  Console.WriteLine($\"{A.X} | {B.X} | {C.X}\");\r\n\r\n  // Would print 100 | 100 | 100\r\n  Console.WriteLine($\"{A.Y} | {B.Y} | {C.Y}\");\r\n\r\n```     \r\n\r\n\r\n### Risks\r\n\r\nThere are of course a few open questions:\r\n\r\n- How shall the MockObject be generated (SourceGenerator, Expression Trees, Roslyn Runtime Code generation)?\r\n- Can the dynamic behavior of the MockObject work with the PropertyGrid?\r\n- Is it necessary to do it with a factory method or can objects be added dynamically.\r\n- Performance ?\r\n- Which entity would be responsible for this, I assume the runtime has nothing to do here?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHON33ztw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43abYc",
                                           "createdAt":  "2021-09-28T22:37:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-09-28T22:37:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43cdsy",
                                           "createdAt":  "2021-09-29T14:03:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nWhen looking at the `PropertyGrid `(WinForms), you have the ability to set multiple objects of the same or of different types as `SelectedObjects`. What the grid does internally is a union or an intersection of the properties and display the list of \"surviving\" properties in a list. It is of course depending on the implementation (telerik for example has a bit more features on it). \r\n\r\nAdditionally the values of the properties are also shown. Thereby each property value is taken from each of the SelectedObjects\u0027 property value. If all values for each property value match, the value is displayed, if it doesn\u0027t match it is left empty.\r\n\r\nWhile this is only a UI thing, many times I have the need to mimic this in code. For example, in my situation I have many windows displaying different content, with tools. There can be many tools on each display (e.g. drawing a circle). Then there is another window that groups all tools together (currently each tool group is a MockObject). This must be a dynamic behavior because tools can be added or removed, some displays support a tool, some not. What is necessary that if you want to activate a tool or if you want to modify properties of the tool (e.g. the circle color) you should need to walk through every display and set the properties for each and every tool (sometimes also this is neceessary). In almost 99% you want to select the properties for all displays, and this is where the MockObject come in.\r\n\r\nCurrently, if I have an object that I want to mimic I have to create a for loop for each property that distributes the values to all `SelectedObjects`. On the other side, I have to run through all of this when a value of a single object has been changed.\r\n\r\nMy currently implementation look like this:\r\n\r\n```cs\r\nclass MockObject : INotifyPropertyChanged, ICustomTypeDescriptor\r\n{\r\n  public ObservableCollection\u003cobject\u003eObjects {get;} = new();\r\n}\r\n\r\n```\r\n\r\nI have hidden the inner logic because its to long to be displayed here.\r\nThis only work currently for the `PropertyGrid `because this one does the reflection by using the `ICustomTypeDescriptor`.\r\nThere is one thing that doesn\u0027t work though - there is no way the PropertyGrid detects changes in the Objects, because there is obviously no way a `ICustomTypeDescriptor` can inform a listener that its `PropertyCollection `has changed (?) - as least I haven\u0027t found a way, so that anytime the PropertyCollection changes, one need to unassign and reassign the same object(s) to the `SelectedObjects`. I assume this is a missing link to work better (dynamically) with the `PropertyGrid`.\r\n\r\nOne of the bigger problems with my solution is that it is not working in code, because the properties are only accessible and visible in the code editor when either using dynamic or when using reflection, writing directly into the `PropertyCollection` which is error prone since you only get runtime exceptions.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace System.ComponentModel\r\n{\r\n    public sealed class MockObject : DynamicObject, INotifyPropertyChanged, ICustomTypeDescriptor, \r\n    {\r\n      public ObservableCollection\u003cobject\u003e Items {get;} = new();\r\n    }\r\n\r\n    public sealed class MockObject\u003cT\u003e : DynamicObject, INotifyPropertyChanged, ICustomTypeDescriptor, \r\n    {\r\n      public ObservableCollection\u003cT\u003e Items {get;} = new();\r\n    }\r\n}\r\n\r\n// Typeless implementation creates a MockObject from a set of objects (which can be of course also other mockobjects)\r\nDateTime A, B, C;\r\nBigInteger D;\r\nvar mock1 = MockObject.Create(A,B,C);\r\nvar mock2 = MockObject.Create(A,D);\r\n\r\n// Typed Versions where the result is explicitly given\r\nTInterface mock3 = MockObject.Create\u003cTInterface\u003e(A,D);\r\n\r\nAdditionally, the type of merge (intersect and union) can be given as a parameter.\r\n```     \r\n\r\n\r\n\r\n### API Usage\r\n\r\n```C#\r\n  interface IPoint\r\n  {\r\n    int X {get; set;}\r\n    int Y {get; set;}\r\n  }\r\n  \r\n  class Point : IPoint\r\n  {\r\n    public int X {get; set;}\r\n    public int Y {get; set;}\r\n  }\r\n  \r\n  Point A = new(1,1), B new(2,2), C=new(3,3);\r\n  \r\n  TInterface mock = MockObject.Create\u003cT, TInterface\u003e(A,B,C);\r\n  mock.X = 10;\r\n  mock.Y = 100;\r\n\r\n  // Would print 10 | 10 | 10\r\n  Console.WriteLine($\"{A.X} | {B.X} | {C.X}\");\r\n\r\n  // Would print 100 | 100 | 100\r\n  Console.WriteLine($\"{A.Y} | {B.Y} | {C.Y}\");\r\n\r\n```     \r\n\r\n\r\n### Risks\r\n\r\nThere are of course a few open questions:\r\n\r\n- How shall the MockObject be generated (SourceGenerator, Expression Trees, Roslyn Runtime Code generation)?\r\n- Can the dynamic behavior of the MockObject work with the PropertyGrid?\r\n- Is it necessary to do it with a factory method or can objects be added dynamically.\r\n- Performance ?\r\n- Which entity would be responsible for this, I assume the runtime has nothing to do here?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emsedi\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.ComponentModel`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-29T14:03:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43dW9G",
                                           "createdAt":  "2021-09-29T18:37:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safern",
                                           "body":  "@JeremyKuhne @RussKie @DustinCampbell for thoughts as this is tight to winforms designer. ",
                                           "updatedAt":  "2021-09-29T18:37:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43do5b",
                                           "createdAt":  "2021-09-29T20:24:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "msedi",
                                           "body":  "Just to make sure, I took the behavior of the PropertyGrid as an example of what I\u0027m thinking of: An object that mimics the access to a collection of objects of the same or of different types. I already have a running example that I can show and share here (but I\u0027m not fully satisfied) which can be discussed.",
                                           "updatedAt":  "2021-09-29T21:39:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43erm_",
                                           "createdAt":  "2021-09-30T05:13:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RussKie",
                                           "body":  "I\u0027m not quite sure I understand the ask here, e.g. why does `MockObject` object need to be part of the .NET runtime (or Windows Forms for that matter) API, and how it would help.\r\nIf there is some extensibility endpoint is missing in `ICustomTypeDescriptor` then we can certainly discuss this.",
                                           "updatedAt":  "2021-09-30T05:13:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43es5x",
                                           "createdAt":  "2021-09-30T05:25:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Couldn\u0027t you build your own dynamic object that accomplishes this? Why does it need to be in the runtime?",
                                           "updatedAt":  "2021-09-30T05:25:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43fZJ-",
                                           "createdAt":  "2021-09-30T08:02:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "msedi",
                                           "body":  "@davidfowl: Of course you are right, I could do it myself. I was just thinking if this is something that could be useful for others too.\r\nWhat do you think would be the right repository? Just in case: What would be the right repository, where to you keep System.ComponentModel for example or where would you put it?",
                                           "updatedAt":  "2021-09-30T08:02:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43ffO3",
                                           "createdAt":  "2021-09-30T08:14:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "msedi",
                                           "body":  "@RussKie: Yes, the runtime is for sure the wrong place. I was just curious if this component would be something that could be useful for others too. \r\n\r\nI think my only problem is (because I can build the rest myself), that there is no event on the ICustomTypeDescriptor that makes it \"dynamic\". So when you add or remove items from the MockObject that enforces the MockObjects to reevaluate its properties, attributes and events I cannot inform the outside to reevaluate. The same is true for the DynamicObject. \r\n\r\nIt can be seen again as an example in the PropertyGrid. If I attach a MockObject on the PropertyGrid as SelectedObject it gets is items evaluated and displayed. Once I add an item it does not get reevaluated automatically. I need to unassign (setting SelectedObject to null) and assign it again. \r\n\r\nFor the PropertyGrid this is not problem, because I can do it myself, but I don\u0027t know that something has changed.\r\n\r\nI hope my explanation is somehow clear and understandable?\r\n\r\n",
                                           "updatedAt":  "2021-09-30T08:14:50Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[API Proposal]: Create an dynamic MockObject",
        "labels":  [
                       "api-suggestion",
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65015",
        "createdAt":  "2022-02-08T20:46:14Z",
        "number":  65015,
        "author":  "Clockwork-Muse",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-02-08T22:22:31Z",
        "body":  "### Description\r\n\r\nDuring the enablement of the regex generator for `System.ComponentModel.TypeConverter` in #62325 , it was discovered that the one instance of regex use was potentially erroneously crafted, and/or may not be required.\r\n\r\nIf, as the conversation discussed, the regex was supposed to be stripping out the accelerator delimiter but leaving the actual accelerator character behind, it fails because:\r\n - It also expects enclosing parenthesis (which were not listed as part of the accelerator delimiter in the conversation).\r\n - It strips out the actual accelerator character.\r\n\r\nThe documentation for the type is singularly unhelpful, and doesn\u0027t even mention the replacement behavior.\r\nThis behavior is present in other types in other repositories ([one example]()), so the behavior may require changes in other locations\r\n\r\ncc @DustinCampbell \r\n\r\n### Reproduction Steps\r\n\r\n[See tests](https://github.com/dotnet/runtime/blob/871438f86dd47c87445d740ed694c25bc78aaa9c/src/libraries/System.ComponentModel.TypeConverter/tests/Design/DesignerVerbTests.cs#L41-L66):\r\n```csharp\r\nnew DesignerVerb(\"(\u0026.)Text\", null);\r\n```\r\n\r\n### Expected behavior\r\n\r\nUnknown\r\n\r\n### Actual behavior\r\n\r\nStrips out the entire delimited accelerator\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPZMHQQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49kwdB",
                                           "createdAt":  "2022-02-08T20:46:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nDuring the enablement of the regex generator for `System.ComponentModel.TypeConverter` in #62325 , it was discovered that the one instance of regex use was potentially erroneously crafted, and/or may not be required.\r\n\r\nIf, as the conversation discussed, the regex was supposed to be stripping out the accelerator delimiter but leaving the actual accelerator character behind, it fails because:\r\n - It also expects enclosing parenthesis (which were not listed as part of the accelerator delimiter in the conversation).\r\n - It strips out the actual accelerator character.\r\n\r\nThe documentation for the type is singularly unhelpful, and doesn\u0027t even mention the replacement behavior.\r\nThis behavior is present in other types in other repositories ([one example]()), so the behavior may require changes in other locations\r\n\r\ncc @DustinCampbell \n\n### Reproduction Steps\n\n[See tests](https://github.com/dotnet/runtime/blob/871438f86dd47c87445d740ed694c25bc78aaa9c/src/libraries/System.ComponentModel.TypeConverter/tests/Design/DesignerVerbTests.cs#L41-L66):\r\n```csharp\r\nnew DesignerVerb(\"(\u0026.)Text\", null);\r\n```\n\n### Expected behavior\n\nUnknown\n\n### Actual behavior\n\nStrips out the entire delimited accelerator\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eClockwork-Muse\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-08T20:46:18Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "System.ComponentModel.TypeConverter.DesignerVerb text replacement potentially erroneous",
        "labels":  [
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68520",
        "createdAt":  "2022-04-25T21:15:35Z",
        "number":  68520,
        "author":  "AndreyTretyak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_fpWg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kl1mm",
                                            "createdAt":  "2024-11-25T10:18:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ollhax",
                                            "createdAt":  "2025-02-26T13:50:07Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-02-26T15:45:26Z",
        "body":  "### Description\r\n\r\nFrom the assembly loaded into Custom AssemblyLoadContext we are calling `TypeDescriptor.GetConverter(Type)` method. This method is defined in `System.ComponentModel.TypeConverter.dll` that is part of .NET 6 runtime, so it’s loaded into  AssemblyLoadContext.Default. \r\nInside of the the `TypeDescriptor.GetConverter(Type)` there is a call to `Type.GetType(string)` for the type from the assembly that is loaded in Custom AssemblyLoadContext. So, unfortunately, it fails to get this type.\r\nCalling `Type.GetType(string)` without `TypeDescriptor.GetConverter(Type)`  in the same place from the assembly loaded in from the Custom AssemblyLoadContext returns type properly.\r\n\r\n### Reproduction Steps\r\n\r\nTo simplify repro I\u0027ll also add [link to zip file](https://1drv.ms/u/s!AuPG-tgckNl7n9EWHE0gNkjE0AMZfw?e=9bM2Gg) with the sample solution. \r\n\r\nBelow is the description of the process to create this solution:\r\n\r\nYou need two projects to reproduce the issue. The first one will create an assembly (the `TestAssembly`) and the second one will run it in the Custom AssemblyLoadContext (the `AssemblyLoadContextRepro`).\r\n\r\n`TestAssembly` code:\r\n```CSharp\r\nusing System;\r\nusing System.ComponentModel;\r\n\r\nnamespace TestAssembly\r\n{\r\n  public class Test\r\n  {\r\n    public static void Run()\r\n    {\r\n      // Returns type from the Current AssemblyLoadContext properly.\r\n      var type = Type.GetType(\"TestAssembly.MyClassConverter, TestAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\");\r\n\r\n      // Tries to get type from AssemblyLoadContext.Default and fails because of it.\r\n      var fromConverter = TypeDescriptor.GetConverter(typeof(MyClass));\r\n    }\r\n  }\r\n\r\n  [TypeConverter(typeof(MyClassConverter))]\r\n  public class MyClass { }\r\n\r\n  public class MyClassConverter : TypeConverter { }\r\n}\r\n```\r\n`AssemblyLoadContextRepro` that would load assembly:\r\n```CSharp\r\nusing System.Runtime.Loader;\r\nusing System.Reflection;\r\nusing System;\r\nusing System.IO;\r\n\r\nnamespace AssemblyLoadContextRepro\r\n{\r\n  internal class Program\r\n  {\r\n    static void Main(string[] args)\r\n    {\r\n      var context = new TestAssemblyLoadContext();\r\n      var assembly = context.LoadFromAssemblyName(new AssemblyName(\"TestAssembly\"));\r\n      var type = assembly.GetType(\"TestAssembly.Test\");\r\n      var method = type.GetMethod(\"Run\");\r\n      method.Invoke(null, Array.Empty\u003cobject\u003e());\r\n    }\r\n  }\r\n\r\n  internal class TestAssemblyLoadContext : AssemblyLoadContext\r\n  {\r\n    private string assembliesLocation;\r\n\r\n    public TestAssemblyLoadContext() : base(\"Custom\")\r\n    {\r\n      // path to binaries of TestAssembly project.\r\n      assembliesLocation = Path.Combine(Directory.GetCurrentDirectory(), @\"..\\..\\..\\..\\TestAssembly\\bin\\Debug\\net6.0\\\");\r\n    }\r\n\r\n    protected override Assembly Load(AssemblyName assemblyName)\r\n    {\r\n      var path = Path.Combine(assembliesLocation, assemblyName.Name + \".dll\");\r\n      if (File.Exists(path))\r\n      {\r\n        var assembly = this.LoadFromAssemblyPath(path);\r\n        return assembly;\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\nI would prefer `TypeDescriptor.GetConverter(Type)` to behave in the same way as `Type.GetType(string)` and use `AssemblyLoadContext` of the code that calling it if possible. Because `System.ComponentModel.TypeConverter.dll` is distributed with .NET runtime and would be always loaded in `AssemblyLoadContext.Default` that makes it unusable for custom contexts.\r\n\r\n### Actual behavior\r\n\r\n `TypeDescriptor.GetConverter(Type)` always use `AssemblyLoadContext.Default` and as a result unable to load converters from assemblies in Custom AssemblyLoadContext.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nWrapping call to into `EnterContextualReflection` allows it to work correctly:\r\n ```CSHarp\r\n using (AssemblyLoadContext.EnterContextualReflection(Assembly.GetExecutingAssembly())) \r\n{\r\n  TypeDescriptor.GetConverter(type);\r\n}\r\n```\r\n\r\n**Not working workarounds:**\r\n- Loading assemblies into AssemblyLoadContext.Default defeats the purpose of having separate contexts.\r\n- Loading `System.ComponentModel.TypeConverter.dll` into Custom AssemblyLoadContext allows `Type.GetType(string)` to get converter type, but we end up with the same assembly loaded into both contexts that make it unusable, for example, resulted type could not be assigned to `ITypeConverter`, because `typeof(ITypeConverter)` returns type from the `System.ComponentModel.TypeConverter.dll` in `AssemblyLoadContext.Default`. So `TypeDescriptor.GetConverter(Type)` fails to return converter in this case also.\r\n\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoBDaWQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5CGrtP",
                                           "createdAt":  "2022-04-25T21:15:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nFrom the assembly loaded into Custom AssemblyLoadContext we are calling `TypeConverter.GetConverter(Type)` method. This method is defined in `System.ComponentModel.TypeConverter.dll` that is part of .NET 6 runtime, so it’s loaded into  AssemblyLoadContext.Default. \r\nInside of the the `TypeConverter.GetConverter(Type)` there is a call to `Type.GetType(string)` for the type from the assembly that is loaded in Custom AssemblyLoadContext. So, unfortunately, it fails to get this type.\r\nCalling `Type.GetType(string)` without `TypeConverter.GetConverter(Type)`  in the same place from the assembly loaded in from the Custom AssemblyLoadContext returns type properly.\n\n### Reproduction Steps\n\nTo simplify repro I\u0027ll also add [link to zip file](https://1drv.ms/u/s!AuPG-tgckNl7n9EVvq0Fw2TJSTaoZA?e=m79VuM ) with the sample solution. \r\n\r\nBelow is the description of the process to create this solution:\r\n\r\nYou need two projects to reproduce the issue. The first one will create an assembly (the `TestAssembly`) and the second one will run it in the Custom AssemblyLoadContext (the `AssemblyLoadContextRepro`).\r\n\r\n`TestAssembly` code:\r\n```CSharp\r\nusing System;\r\nusing System.ComponentModel;\r\nusing Microsoft.VisualStudio.Services.Identity;\r\n\r\nnamespace TestAssembly\r\n{\r\n  public class Test\r\n  {\r\n    public static void Run()\r\n    {\r\n      // Returns type from the Current AssemblyLoadContext properly.\r\n      var type = Type.GetType(\"Microsoft.VisualStudio.Services.Identity.IdentityDescriptorConverter, Microsoft.VisualStudio.Services.WebApi, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\");\r\n\r\n      // Tries to get type from AssemblyLoadContext.Default and fails because of it.\r\n      var fromConverter = TypeDescriptor.GetConverter(typeof(IdentityDescriptor));\r\n    }\r\n  }\r\n}\r\n```\r\n`TestAssembly.csproj`:\r\n```Xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet6.0\u003c/TargetFramework\u003e\r\n    \u003cCopyLocalLockFileAssemblies\u003etrue\u003c/CopyLocalLockFileAssemblies\u003e \u003c!-- we need depdency dlls in bin folder to simplify loading --\u003e\r\n  \u003c/PropertyGroup\u003e\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.VisualStudio.Services.InteractiveClient\" Version=\"16.201.0-preview\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n`AssemblyLoadContextRepro` that would load assembly:\r\n```CSharp\r\nusing System.Runtime.Loader;\r\nusing System.Reflection;\r\nusing System;\r\nusing System.IO;\r\n\r\nnamespace AssemblyLoadContextRepro\r\n{\r\n  internal class Program\r\n  {\r\n    static void Main(string[] args)\r\n    {\r\n      var context = new TestAssemblyLoadContext();\r\n      var assembly = context.LoadFromAssemblyName(new AssemblyName(\"TestAssembly\"));\r\n      var type = assembly.GetType(\"TestAssembly.Test\");\r\n      var method = type.GetMethod(\"Run\");\r\n      method.Invoke(null, Array.Empty\u003cobject\u003e());\r\n    }\r\n  }\r\n\r\n  internal class TestAssemblyLoadContext : AssemblyLoadContext\r\n  {\r\n    private string assembliesLocation;\r\n\r\n    public TestAssemblyLoadContext() : base(\"Custom\")\r\n    {\r\n      // path to binaries of TestAssembly project.\r\n      assembliesLocation = Path.Combine(Directory.GetCurrentDirectory(), @\"..\\..\\..\\..\\TestAssembly\\bin\\Debug\\net6.0\\\");\r\n    }\r\n\r\n    protected override Assembly Load(AssemblyName assemblyName)\r\n    {\r\n      var path = Path.Combine(assembliesLocation, assemblyName.Name + \".dll\");\r\n      if (File.Exists(path))\r\n      {\r\n        var assembly = this.LoadFromAssemblyPath(path);\r\n        return assembly;\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\n\n### Expected behavior\n\nI would prefer `TypeConverter.GetConverter(Type)` to behave in the same way as `Type.GetType(string)` and use `AssemblyLoadContext` of the code that calling it if possible. Because `System.ComponentModel.TypeConverter.dll` is distributed with .NET runtime and would be always loaded in `AssemblyLoadContext.Default` that makes it unusable for custom contexts.\n\n### Actual behavior\n\n `TypeConverter.GetConverter(Type)` always use `AssemblyLoadContext.Default` and as a result unable to load converters from assemblies in Custom AssemblyLoadContext.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nWrapping call to into `EnterContextualReflection` allows it to work correctly:\r\n ```CSHarp\r\n using (AssemblyLoadContext.EnterContextualReflection(Assembly.GetExecutingAssembly())) \r\n{\r\n  TypeConverter.GetConverter(type);\r\n}\r\n```\r\n\r\n**Not working workarounds:**\r\n- Loading assemblies into AssemblyLoadContext.Default defeats the purpose of having separate contexts.\r\n- Loading `System.ComponentModel.TypeConverter.dll` into Custom AssemblyLoadContext allows `Type.GetType(string)` to get converter type, but we end up with the same assembly loaded into both contexts that make it unusable, for example, resulted type could not be assigned to `ITypeConverter`, because `typeof(ITypeConverter)` returns type from the `System.ComponentModel.TypeConverter.dll` in `AssemblyLoadContext.Default`. So `TypeConverter.GetConverter(Type)` fails to return converter in this case also.\r\n\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAndreyTretyak\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-AssemblyLoader-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-25T21:15:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CHUzg",
                                           "createdAt":  "2022-04-26T01:57:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Vitek and I discussed this briefly. I\u0027ll try to summarize, Vitek can correct me. :)\r\n\r\nThere are two changes that could happen here. The first is to make `TypeDescriptor.GetConverter` essentially \"ALC-aware\" and try to 1) find the ALC that the target type lives in and 2) load the converter into a target ALC.\r\n\r\nThe second change is more of a work-around, that I think may deserve more attention as a broader design pattern. [AssemblyLoadContext.EnterContextualReflection](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.loader.assemblyloadcontext.entercontextualreflection?view=net-6.0) allows you to change the current contextual load context to a new one, and change the existing resolvers to resolve in the new load context. This would effectively cause `Type.GetType` to use the scoped ALC instead of the default one. This might be \"safer\" than relying on the framework fix. I don\u0027t think here\u0027s anything wrong with the framework fix, but this could present an alternative for \"non-ALC-aware codepaths.\"",
                                           "updatedAt":  "2022-04-26T01:57:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CIqbk",
                                           "createdAt":  "2022-04-26T09:27:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODOEhAA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KalleOlaviNiemitalo",
                                                                               "createdAt":  "2022-04-26T10:33:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AndreyTretyak",
                                                                               "createdAt":  "2022-04-26T17:18:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SteffenSchwaiger",
                                                                               "createdAt":  "2023-11-30T15:22:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The core of the issue is that the [`TypeConverterAttribute`](https://github.com/dotnet/runtime/blob/main/src/libraries/System.ObjectModel/src/System/ComponentModel/TypeConverterAttribute.cs) even if called with a `System.Type` stores the type name by immediately calling `Type.AssemblyQualifiedName` on it.\r\nThis means that:\r\n* We lost the information where the type came from - in theory it can be from any ACL, not just Default or the one from where the type in question is.\r\n* We\u0027re loosing perf, since we\u0027re forcing a creation of fully qualified name and later on we will be calling `Type.GetType` with that name again - effectively expecting to get back the exact same type as we started with - which is not guaranteed by any means.\r\n\r\nNote that the same problem applies to the `TypeDescriptorProviderAttribute` as well, since it uses the exact same mechanism.\r\n\r\nI think we should make two changes here:\r\n* When resolving the type name into a type ([here](https://github.com/dotnet/runtime/blob/6387a2dc3de16e2f22c8e49678bee33506260c46/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/ReflectTypeDescriptionProvider.ReflectedTypeData.cs#L191)), use the ALC for the type of the object we\u0027re reflecting on (in the above method that would be `_type.Assembly`).\r\n  * This can be done either by wrapping the call to `Type.GetType` with the `EnterContextualReflection` or by using the overload of `Type.GetType` which takes an assembly resolver callback and in it call the respective `ALC.LoadFromAssemblyName`. The latter is probably a bit cleaner as it\u0027s not relying on \"context\" and is very explicit. (although perf is unknown right now)\r\n  * Note that this is technically a breaking change as the behavioral difference is observable - but I would argue the current behavior with regard to ALCs is just plain broken.\r\n* The `TypeConverterAttribute` (as well as `TypeDescriptorProviderAttribute`) should add a private field which stores the `Type` passed in (if any), while still offering the full type name via the `ConverterTypeName` property (should be changed to be backed by a field and computed lazily to avoid the unnecessary full name creation). Then in the `ReflectTypeDescriptionProvider` use the `Type` field if available over the full name to completely avoid type resolution.\r\n  * This is probably doable in a non-breaking way",
                                           "updatedAt":  "2022-04-26T09:27:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CIqqR",
                                           "createdAt":  "2022-04-26T09:28:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nFrom the assembly loaded into Custom AssemblyLoadContext we are calling `TypeDescriptor.GetConverter(Type)` method. This method is defined in `System.ComponentModel.TypeConverter.dll` that is part of .NET 6 runtime, so it’s loaded into  AssemblyLoadContext.Default. \r\nInside of the the `TypeDescriptor.GetConverter(Type)` there is a call to `Type.GetType(string)` for the type from the assembly that is loaded in Custom AssemblyLoadContext. So, unfortunately, it fails to get this type.\r\nCalling `Type.GetType(string)` without `TypeDescriptor.GetConverter(Type)`  in the same place from the assembly loaded in from the Custom AssemblyLoadContext returns type properly.\r\n\r\n### Reproduction Steps\r\n\r\nTo simplify repro I\u0027ll also add [link to zip file](https://1drv.ms/u/s!AuPG-tgckNl7n9EWHE0gNkjE0AMZfw?e=9bM2Gg) with the sample solution. \r\n\r\nBelow is the description of the process to create this solution:\r\n\r\nYou need two projects to reproduce the issue. The first one will create an assembly (the `TestAssembly`) and the second one will run it in the Custom AssemblyLoadContext (the `AssemblyLoadContextRepro`).\r\n\r\n`TestAssembly` code:\r\n```CSharp\r\nusing System;\r\nusing System.ComponentModel;\r\n\r\nnamespace TestAssembly\r\n{\r\n  public class Test\r\n  {\r\n    public static void Run()\r\n    {\r\n      // Returns type from the Current AssemblyLoadContext properly.\r\n      var type = Type.GetType(\"TestAssembly.MyClassConverter, TestAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\");\r\n\r\n      // Tries to get type from AssemblyLoadContext.Default and fails because of it.\r\n      var fromConverter = TypeDescriptor.GetConverter(typeof(MyClass));\r\n    }\r\n  }\r\n\r\n  [TypeConverter(typeof(MyClassConverter))]\r\n  public class MyClass { }\r\n\r\n  public class MyClassConverter : TypeConverter { }\r\n}\r\n```\r\n`AssemblyLoadContextRepro` that would load assembly:\r\n```CSharp\r\nusing System.Runtime.Loader;\r\nusing System.Reflection;\r\nusing System;\r\nusing System.IO;\r\n\r\nnamespace AssemblyLoadContextRepro\r\n{\r\n  internal class Program\r\n  {\r\n    static void Main(string[] args)\r\n    {\r\n      var context = new TestAssemblyLoadContext();\r\n      var assembly = context.LoadFromAssemblyName(new AssemblyName(\"TestAssembly\"));\r\n      var type = assembly.GetType(\"TestAssembly.Test\");\r\n      var method = type.GetMethod(\"Run\");\r\n      method.Invoke(null, Array.Empty\u003cobject\u003e());\r\n    }\r\n  }\r\n\r\n  internal class TestAssemblyLoadContext : AssemblyLoadContext\r\n  {\r\n    private string assembliesLocation;\r\n\r\n    public TestAssemblyLoadContext() : base(\"Custom\")\r\n    {\r\n      // path to binaries of TestAssembly project.\r\n      assembliesLocation = Path.Combine(Directory.GetCurrentDirectory(), @\"..\\..\\..\\..\\TestAssembly\\bin\\Debug\\net6.0\\\");\r\n    }\r\n\r\n    protected override Assembly Load(AssemblyName assemblyName)\r\n    {\r\n      var path = Path.Combine(assembliesLocation, assemblyName.Name + \".dll\");\r\n      if (File.Exists(path))\r\n      {\r\n        var assembly = this.LoadFromAssemblyPath(path);\r\n        return assembly;\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\nI would prefer `TypeDescriptor.GetConverter(Type)` to behave in the same way as `Type.GetType(string)` and use `AssemblyLoadContext` of the code that calling it if possible. Because `System.ComponentModel.TypeConverter.dll` is distributed with .NET runtime and would be always loaded in `AssemblyLoadContext.Default` that makes it unusable for custom contexts.\r\n\r\n### Actual behavior\r\n\r\n `TypeDescriptor.GetConverter(Type)` always use `AssemblyLoadContext.Default` and as a result unable to load converters from assemblies in Custom AssemblyLoadContext.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nWrapping call to into `EnterContextualReflection` allows it to work correctly:\r\n ```CSHarp\r\n using (AssemblyLoadContext.EnterContextualReflection(Assembly.GetExecutingAssembly())) \r\n{\r\n  TypeDescriptor.GetConverter(type);\r\n}\r\n```\r\n\r\n**Not working workarounds:**\r\n- Loading assemblies into AssemblyLoadContext.Default defeats the purpose of having separate contexts.\r\n- Loading `System.ComponentModel.TypeConverter.dll` into Custom AssemblyLoadContext allows `Type.GetType(string)` to get converter type, but we end up with the same assembly loaded into both contexts that make it unusable, for example, resulted type could not be assigned to `ITypeConverter`, because `typeof(ITypeConverter)` returns type from the `System.ComponentModel.TypeConverter.dll` in `AssemblyLoadContext.Default`. So `TypeDescriptor.GetConverter(Type)` fails to return converter in this case also.\r\n\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAndreyTretyak\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel`, `area-AssemblyLoader-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-26T09:28:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ovNb4",
                                           "createdAt":  "2023-10-11T09:05:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Floge123",
                                           "body":  "I tried the Workaround and while in one section it works by retrieving the converter from the correct ALC, in another section it does not:\r\n![image](https://github.com/dotnet/runtime/assets/80892353/f506132c-0e66-4491-a77e-e4da7ae35570)\r\n\r\nIt manages to load it from the Default ALC, because the Assembly containing the converter was loaded into the Default ALC, because it is referenced as a project in the project that creates the custom ALC and executes this code.\r\n",
                                           "updatedAt":  "2023-10-11T09:17:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ta4R2",
                                           "createdAt":  "2023-12-01T09:31:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SteffenSchwaiger",
                                           "body":  "Is there a workaround for using an existing `TypeConverter` implementation without using the broken `TypeConverterAttribute` when using an `AssemblyLoadContext` that is not `AssemblyLoadContext.Default`?\r\n\r\nI only got my PropertyGrid to work after removing the `TypeConverterAttribute` and implementing the `ICustomTypeDescriptor` on each class that previously used the `[TypeConverter(typeof(CustomTypeConverter))]`. This can\u0027t be the best approach, can it?",
                                           "updatedAt":  "2023-12-01T09:32:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JhjSh",
                                           "createdAt":  "2024-08-23T15:01:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "myth384",
                                           "body":  "We believe this issue is the root cause of an exception we\u0027re encountering with our plug-in type application for a third-party host application. Due to assembly conflicts with the third-party application, we opted to place as many of our dependencies as possible into a custom `AssemblyLoadContext`. This includes DevExpress WinForms assemblies, as we use a higher version than that of the host application.\r\n\r\nWhile most of the application functions correctly, we are experiencing an exception in a small DevExpress control. The issue arises from the `System.Resources.Extensions.DeserializingResourceReader.DeserializeObject` method, which outputs an object of a DevExpress type from the default ALC, whereas the requested DevExpress type resides in the custom ALC. This discrepancy leads to a type mismatch at a later point, resulting in the aforementioned exception.\r\n\r\nIdeally, making the `TypeConverter` ALC-aware would resolve this issue. Alternatively, a potential workaround could involve implementing `AssemblyLoadContext.EnterContextualReflection` within the `System.Resources.Extensions.DeserializingResourceReader.DeserializeObject` method.",
                                           "updatedAt":  "2024-08-23T15:01:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gENpZ",
                                           "createdAt":  "2025-02-26T15:45:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ollhax",
                                           "body":  "I just wanted to pitch in that I also got hit by this today, and had to spend a lot of time to work around it. This and https://github.com/dotnet/runtime/issues/30656 makes it difficult to use TypeDescriptors in plugin architectures.",
                                           "updatedAt":  "2025-02-26T15:45:25Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "TypeDescriptor.GetConverter call always uses AssemblyLoadContext.Default",
        "labels":  [
                       "area-System.ComponentModel",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/72008",
        "createdAt":  "2022-07-12T09:40:42Z",
        "number":  72008,
        "author":  "Tanya-Solyanik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-19T21:28:35Z",
        "body":  "### Description\n\nTypes that implement ITypeResolutionService interface should be able to find \"known\" types and report \"unknown\" types as missing, this interface is not compatible with assembly trimming. \r\n\r\n\n\n### Reproduction Steps\n\nThis prevents derived types in winforms from consuming the latest Arcade - https://github.com/dotnet/winforms/pull/7376\n\n### Expected behavior\n\n```\r\n        [RequiresUnreferencedCode(\"ITypeResolutionService uses Reflection which might not function correctly when trimming application code.\")]\r\n        [return: DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)]\r\n        Type? GetType([DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)] string name, bool throwOnError, bool ignoreCase);\r\n```\n\n### Actual behavior\n\nCurrent code:\r\n```\r\n       [return: DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)]\r\n        Type? GetType([DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)] string name, bool throwOnError, bool ignoreCase);\r\n\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n```\r\n        [UnconditionalSuppressMessage(\r\n            \"AssemblyLoadTrimming\",\r\n            \"IL2046\",\r\n            Justification = \"Will remove this suppression when ITypeResolutionService adds RequiresUnreferencedCode attribute to theits corresponding method.\")]\r\n        [RequiresUnreferencedCode(TrimmingConstants.ResxUnrecognizedTypeNameWarning)]\r\n        public Type GetType(string name, bool throwOnError, bool ignoreCase)\r\n        {\r\n\r\n```\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORnKS9w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5GbPrM",
                                           "createdAt":  "2022-07-12T09:40:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-07-12T09:40:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GbP2W",
                                           "createdAt":  "2022-07-12T09:41:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nTypes that implement ITypeResolutionService interface should be able to find \"known\" types and report \"unknown\" types as missing, this interface is not compatible with assembly trimming. \r\n\r\n\n\n### Reproduction Steps\n\nThis prevents derived types in winforms from consuming the latest Arcade - https://github.com/dotnet/winforms/pull/7376\n\n### Expected behavior\n\n```\r\n        [RequiresUnreferencedCode(\"ITypeResolutionService uses Reflection which might not function correctly when trimming application code.\")]\r\n        [return: DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)]\r\n        Type? GetType([DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)] string name, bool throwOnError, bool ignoreCase);\r\n```\n\n### Actual behavior\n\nCurrent code:\r\n```\r\n       [return: DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)]\r\n        Type? GetType([DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)] string name, bool throwOnError, bool ignoreCase);\r\n\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n```\r\n        [UnconditionalSuppressMessage(\r\n            \"AssemblyLoadTrimming\",\r\n            \"IL2046\",\r\n            Justification = \"Will remove this suppression when ITypeResolutionService adds RequiresUnreferencedCode attribute to theits corresponding method.\")]\r\n        [RequiresUnreferencedCode(TrimmingConstants.ResxUnrecognizedTypeNameWarning)]\r\n        public Type GetType(string name, bool throwOnError, bool ignoreCase)\r\n        {\r\n\r\n```\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTanya-Solyanik\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-12T09:41:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gb66o",
                                           "createdAt":  "2022-07-12T12:52:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027linkable-framework\u0027: @eerhardt, @vitek-karas, @LakshanF, @sbomer, @joperezr\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nTypes that implement ITypeResolutionService interface should be able to find \"known\" types and report \"unknown\" types as missing, this interface is not compatible with assembly trimming. \r\n\r\n\n\n### Reproduction Steps\n\nThis prevents derived types in winforms from consuming the latest Arcade - https://github.com/dotnet/winforms/pull/7376\n\n### Expected behavior\n\n```\r\n        [RequiresUnreferencedCode(\"ITypeResolutionService uses Reflection which might not function correctly when trimming application code.\")]\r\n        [return: DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)]\r\n        Type? GetType([DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)] string name, bool throwOnError, bool ignoreCase);\r\n```\n\n### Actual behavior\n\nCurrent code:\r\n```\r\n       [return: DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)]\r\n        Type? GetType([DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)] string name, bool throwOnError, bool ignoreCase);\r\n\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n```\r\n        [UnconditionalSuppressMessage(\r\n            \"AssemblyLoadTrimming\",\r\n            \"IL2046\",\r\n            Justification = \"Will remove this suppression when ITypeResolutionService adds RequiresUnreferencedCode attribute to theits corresponding method.\")]\r\n        [RequiresUnreferencedCode(TrimmingConstants.ResxUnrecognizedTypeNameWarning)]\r\n        public Type GetType(string name, bool throwOnError, bool ignoreCase)\r\n        {\r\n\r\n```\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTanya-Solyanik\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel`, `untriaged`, `linkable-framework`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-12T12:52:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gci3W",
                                           "createdAt":  "2022-07-12T15:13:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "As mentioned in https://github.com/dotnet/runtime/issues/72006 we are very careful about annotating virtual methods (on class or interface) as trim-incompatible. Annotating the interface method this way basically makes a statement that all implementations of the interface are trim-incompatible - which we can\u0027t know.\r\n\r\nI can envision an implementation of the GetType method which has a switch over couple of well-known types and returns null for the rest. There\u0027s nothing trim-incompatible about it.\r\n\r\nThe typical solution to this problem is to \"transfer the blame to the constructor\". The problem is not the GetType method, but this one specific implementation of it. Since it\u0027s impossible to distinguish between various overrides, what is possible is to mark the type with that implementation as problematic. Thus, annotated the .ctor of that type as trim-incompatible.",
                                           "updatedAt":  "2022-07-12T15:13:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GclaD",
                                           "createdAt":  "2022-07-12T15:20:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "`ITypeResolutionService` might be an exception here. I could imagine it being marked as `RequiresUnreferencedCode`.\r\n\r\nhttps://github.com/dotnet/runtime/blob/c9feedf55ea613a2b9220fe6b9e8feda2aa72287/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/Design/ITypeResolutionService.cs#L7-L12\r\n\r\n1. It is in the \"Design\" namespace\r\n2. It\u0027s summary says \"load types at design time\".\r\n3. It isn\u0027t used very often (that I know of) outside of Visual Studio\r\n\r\n",
                                           "updatedAt":  "2022-07-12T15:20:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GcpL3",
                                           "createdAt":  "2022-07-12T15:30:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I would still be careful (but maybe it makes sense). For example, we had to mark virtual methods on `System.Type` as problematic because often they are, but there are cases where they\u0027re not - for example the `Type` you get from `MetadataLoadContext` is perfectly trim compatible - but there\u0027s no way to tell the user that, since the base methods are annotated as dangerous.\r\nIt\u0027s a tradeoff though - it\u0027s possible that for this specific case it would make sense.",
                                           "updatedAt":  "2022-07-12T15:30:55Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "ITypeResolutionService.GetType is not decorated with RequiresUnreferencedCode attribute",
        "labels":  [
                       "area-System.ComponentModel",
                       "linkable-framework"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83474",
        "createdAt":  "2023-03-15T19:11:00Z",
        "number":  83474,
        "author":  null,
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCzF64w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "d2phap",
                                            "createdAt":  "2023-10-06T13:18:11Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-03-29T16:09:39Z",
        "body":  "### Background and motivation\n\nThe option to also add the  `DesignerSerializationVisibilityAttribute` on a class should be implemented to avoid having to type it multiple times where that class is used as a property. Simply by adding in the `AttributeUsage`  to also include  `AttributeTargets.Class` enum.\n\n### API Proposal\n\n```csharp\r\nnamespace System.ComponentModel\r\n{\r\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event)]\r\n    public sealed class DesignerSerializationVisibilityAttribute : Attribute\r\n    {\r\n        public static readonly DesignerSerializationVisibilityAttribute Content = new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content);\r\n\r\n        public static readonly DesignerSerializationVisibilityAttribute Hidden = new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden);\r\n\r\n        public static readonly DesignerSerializationVisibilityAttribute Visible = new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Visible);\r\n\r\n        public static readonly DesignerSerializationVisibilityAttribute Default = Visible;\r\n\r\n        private DesignerSerializationVisibility visibility;\r\n\r\n        public DesignerSerializationVisibility Visibility =\u003e visibility;\r\n\r\n        public DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility visibility)\r\n        {\r\n            this.visibility = visibility;\r\n        }\r\n\r\n        public override bool Equals(object obj)\r\n        {\r\n            if (obj == this)\r\n            {\r\n                return true;\r\n            }\r\n\r\n            DesignerSerializationVisibilityAttribute designerSerializationVisibilityAttribute = obj as DesignerSerializationVisibilityAttribute;\r\n            if (designerSerializationVisibilityAttribute != null)\r\n            {\r\n                return designerSerializationVisibilityAttribute.Visibility == visibility;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        public override int GetHashCode()\r\n        {\r\n            return base.GetHashCode();\r\n        }\r\n\r\n        public override bool IsDefaultAttribute()\r\n        {\r\n            return Equals(Default);\r\n        }\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]\r\npublic class Foo\r\n{\r\n}\r\n\r\npublic class Bar\r\n{\r\n     // The attribute is already being used here.\r\n     public Foo Example { get; set; }\r\n}\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOV6puIw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5XqDH2",
                                           "createdAt":  "2023-03-15T19:11:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-03-15T19:11:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Xqm4j",
                                           "createdAt":  "2023-03-15T20:21:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nThe option to also add the  `DesignerSerializationVisibilityAttribute` on a class should be implemented to avoid having to type it multiple times where that class is used as a property. Simply by adding in the `AttributeUsage`  to also include  `AttributeTargets.Class` enum.\n\n### API Proposal\n\n```csharp\r\nnamespace System.ComponentModel\r\n{\r\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event)]\r\n    public sealed class DesignerSerializationVisibilityAttribute : Attribute\r\n    {\r\n        public static readonly DesignerSerializationVisibilityAttribute Content = new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content);\r\n\r\n        public static readonly DesignerSerializationVisibilityAttribute Hidden = new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden);\r\n\r\n        public static readonly DesignerSerializationVisibilityAttribute Visible = new DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Visible);\r\n\r\n        public static readonly DesignerSerializationVisibilityAttribute Default = Visible;\r\n\r\n        private DesignerSerializationVisibility visibility;\r\n\r\n        public DesignerSerializationVisibility Visibility =\u003e visibility;\r\n\r\n        public DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility visibility)\r\n        {\r\n            this.visibility = visibility;\r\n        }\r\n\r\n        public override bool Equals(object obj)\r\n        {\r\n            if (obj == this)\r\n            {\r\n                return true;\r\n            }\r\n\r\n            DesignerSerializationVisibilityAttribute designerSerializationVisibilityAttribute = obj as DesignerSerializationVisibilityAttribute;\r\n            if (designerSerializationVisibilityAttribute != null)\r\n            {\r\n                return designerSerializationVisibilityAttribute.Visibility == visibility;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        public override int GetHashCode()\r\n        {\r\n            return base.GetHashCode();\r\n        }\r\n\r\n        public override bool IsDefaultAttribute()\r\n        {\r\n            return Equals(Default);\r\n        }\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]\r\npublic class Foo\r\n{\r\n}\r\n\r\npublic class Bar\r\n{\r\n     // The attribute is already being used here.\r\n     public Foo Example { get; set; }\r\n}\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDivineBytes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.ComponentModel`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-15T20:21:59Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: Allow the DesignerSerializationVisibilityAttribute to be used on a class?",
        "labels":  [
                       "api-suggestion",
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89313",
        "createdAt":  "2023-07-21T16:39:44Z",
        "number":  89313,
        "author":  "ericstj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-07T18:35:49Z",
        "body":  "### Description\n\nTypeDesciptor.AddAttributes is a static registration API and each time it\u0027s called it adds a new AttributeProvider for the instance or type specified.  If this provider is not removed it will remain for the lifetime of the AppDomain/Process.  If an application calls this API multiple times for the same instance/type - as may be the case if the call to AddAttributes is in an instance type/method - the providers will accumulate.  That accumulation will cause issues wherever CustomTypeDescriptor walks the provider chain.\r\n\r\nFor example: \r\nhttps://github.com/dotnet/runtime/blob/03acd23bc8c209282c0a2e9664de81e962999da4/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/CustomTypeDescriptor.cs#L44-L173\r\n\r\nThese methods recursively walk the _parent chain on the stack - which will eventually lead to StackOverflowException when that chain is too long.\n\n### Reproduction Steps\n\n``` c#\r\nusing System.ComponentModel;\r\n\r\nfor (int i = 0; i \u003c 30000; i++)\r\n    TypeDescriptor.AddAttributes(typeof(int), new TypeConverterAttribute(typeof(MyCoverter)));\r\n\r\n// any of the following will overflow\r\nTypeDescriptor.GetAttributes(typeof(int));\r\nTypeDescriptor.GetConverter(typeof(int));\r\nTypeDescriptor.GetProperties(typeof(int));\r\nTypeDescriptor.GetEvents(typeof(int));\r\n\r\npublic class MyCoverter : TypeConverter\r\n{ }\r\n```\n\n### Expected behavior\n\nThe behavior is expected, but it could be better.\r\n\r\nSeems like we could capture how many times we recurse and throw a better exception before hitting stack overflow.\r\n\r\nWe could also consider an analyzer to catch this problem.  If someone calls TypeDescriptor.AddProvider without doing anything with the return value - raise a diagnostic.  The user might decide to suppress that if they could garuntee the code would only ever run once.\n\n### Actual behavior\n\n```\r\nStack overflow.\r\n   at System.ComponentModel.TypeDescriptor+AttributeProvider.GetTypeDescriptor(System.Type, System.Object)\r\n   at System.ComponentModel.TypeDescriptor+DefaultTypeDescriptor.GetAttributes()\r\n   at System.ComponentModel.TypeDescriptor+AttributeProvider+AttributeTypeDescriptor.GetAttributes()\r\n   at System.ComponentModel.TypeDescriptor+DefaultTypeDescriptor.GetAttributes()\r\n   at System.ComponentModel.TypeDescriptor+AttributeProvider+AttributeTypeDescriptor.GetAttributes()\r\n   at System.ComponentModel.TypeDescriptor+DefaultTypeDescriptor.GetAttributes()\r\n   at System.ComponentModel.TypeDescriptor+AttributeProvider+AttributeTypeDescriptor.GetAttributes()\r\n...\r\n```\r\n\r\nDepending on which method is called it may also overflow at any of the following:\r\n```\r\nSystem.ComponentModel.TypeDescriptor+DefaultTypeDescriptor.GetAttributes()\r\nSystem.ComponentModel.TypeDescriptor+DefaultTypeDescriptor.GetConverter()\r\nSystem.ComponentModel.TypeDescriptor+DefaultTypeDescriptor.GetProperties()\r\nSystem.ComponentModel.TypeDescriptor+DefaultTypeDescriptor.GetEvents()\r\n```\n\n### Regression?\n\nNo, behavior exists in .NETFramework as well.\n\n### Known Workarounds\n\nMake sure you remove any provider added with AddAttributes, either in a finally block if it\u0027s only needed for the method, or in the Dispose method if it\u0027s needed for the lifetime of the type.  Alternatively you can add attributes with a singleton like the following:\r\n```C#\r\n// register\r\nMyConverterRegistration\u003cint\u003e.EnsureRegistered();\r\n\r\npublic static class MyConverterRegistration\u003cT\u003e\r\n{\r\n    static MyConverterRegistration() =\u003e \r\n        TypeDescriptor.AddAttributes(typeof(T), new TypeConverterAttribute(typeof(MyCoverter)));\r\n    public static void EnsureRegistered() { /* intentionally empty -- call to register coverter */}\r\n}\r\n```\r\n\r\n\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYhuASg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5iG4BK",
                                           "createdAt":  "2023-07-21T16:39:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nTypeDesciptor.AddAttributes is a static registration API and each time it\u0027s called it adds a new AttributeProvider for the instance or type specified.  If this provider is not removed it will remain for the lifetime of the AppDomain/Process.  If an application calls this API multiple times for the same instance/type - as may be the case if the call to AddAttributes is in an instance type/method - the providers will accumulate.  That accumulation will cause issues wherever CustomTypeDescriptor walks the provider chain.\r\n\r\nFor example: \r\nhttps://github.com/dotnet/runtime/blob/03acd23bc8c209282c0a2e9664de81e962999da4/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/CustomTypeDescriptor.cs#L44-L173\r\n\r\nThese methods recursively walk the _parent chain on the stack - which will eventually lead to StackOverflowException when that chain is too long.\n\n### Reproduction Steps\n\n``` c#\r\nusing System.ComponentModel;\r\n\r\nfor (int i = 0; i \u003c 30000; i++)\r\n    TypeDescriptor.AddAttributes(typeof(int), new TypeConverterAttribute(typeof(MyCoverter)));\r\n\r\n// any of the following will overflow\r\nTypeDescriptor.GetAttributes(typeof(int));\r\nTypeDescriptor.GetConverter(typeof(int));\r\nTypeDescriptor.GetProperties(typeof(int));\r\nTypeDescriptor.GetEvents(typeof(int));\r\n\r\npublic class MyCoverter : TypeConverter\r\n{ }\r\n```\n\n### Expected behavior\n\nThe behavior is expected, but it could be better.\r\n\r\nSeems like we could capture how many times we recurse and throw a better exception before hitting stack overflow.\r\n\r\nWe could also consider an analyzer to catch this problem.  If someone calls TypeDescriptor.AddProvider without doing anything with the return value - raise a diagnostic.  The user might decide to suppress that if they could garuntee the code would only ever run once.\n\n### Actual behavior\n\n```\r\nStack overflow.\r\n   at System.ComponentModel.TypeDescriptor+AttributeProvider.GetTypeDescriptor(System.Type, System.Object)\r\n   at System.ComponentModel.TypeDescriptor+DefaultTypeDescriptor.GetAttributes()\r\n   at System.ComponentModel.TypeDescriptor+AttributeProvider+AttributeTypeDescriptor.GetAttributes()\r\n   at System.ComponentModel.TypeDescriptor+DefaultTypeDescriptor.GetAttributes()\r\n   at System.ComponentModel.TypeDescriptor+AttributeProvider+AttributeTypeDescriptor.GetAttributes()\r\n   at System.ComponentModel.TypeDescriptor+DefaultTypeDescriptor.GetAttributes()\r\n   at System.ComponentModel.TypeDescriptor+AttributeProvider+AttributeTypeDescriptor.GetAttributes()\r\n...\r\n```\r\n\r\nDepending on which method is called it may also overflow at any of the following:\r\n```\r\nSystem.ComponentModel.TypeDescriptor+DefaultTypeDescriptor.GetAttributes()\r\nSystem.ComponentModel.TypeDescriptor+DefaultTypeDescriptor.GetConverter()\r\nSystem.ComponentModel.TypeDescriptor+DefaultTypeDescriptor.GetProperties()\r\nSystem.ComponentModel.TypeDescriptor+DefaultTypeDescriptor.GetEvents()\r\n```\n\n### Regression?\n\nNo, behavior exists in .NETFramework as well.\n\n### Known Workarounds\n\nMake sure you remove any provider added with AddAttributes, either in a finally block if it\u0027s only needed for the method, or in the Dispose method if it\u0027s needed for the lifetime of the type.  Alternatively you can add attributes with a singleton like the following:\r\n```C#\r\n// register\r\nMyConverterRegistration\u003cint\u003e.EnsureRegistered();\r\n\r\npublic static class MyConverterRegistration\u003cT\u003e\r\n{\r\n    static MyConverterRegistration() =\u003e \r\n        TypeDescriptor.AddAttributes(typeof(T), new TypeConverterAttribute(typeof(MyCoverter)));\r\n    public static void EnsureRegistered() { /* intentionally empty -- call to register coverter */}\r\n}\r\n```\r\n\r\n\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eericstj\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-21T16:39:50Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Calling TypeDescriptor.AddAttributes too many times leads to StackOverflowException",
        "labels":  [
                       "bug",
                       "area-System.ComponentModel",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119529",
        "createdAt":  "2023-10-24T14:49:22Z",
        "number":  119529,
        "author":  "tipoman9",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-11T07:51:57Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nIt was stated that extending classes attributes would be supported by associating the metadata type to class in runtime like this.\r\n`TypeDescriptor.AddProviderTransparent(new AssociatedMetadataTypeTypeDescriptionProvider(typeof(Vehicle), typeof(VehicleRequirementsMetaData)), typeof(Vehicle));`\r\nhttps://github.com/dotnet/aspnetcore/issues/39938#issuecomment-1097368085\r\nThe sample provided seems to work only for [Required] attribute.\r\nWhen adding a different attribute , the latter gets ignored.\r\n\r\n### Expected Behavior\r\n\r\n    \"VehileName\": \"My Truck\",\r\n    \"ManufID\": \"Cool Hybrids Inc\"\r\n\r\n### Steps To Reproduce\r\n\r\n```\r\n\t\tpublic void TestExtendingMetadata() {\r\n\r\n\t\t\t// Associate the metadata type VehicleRequirementsMetaData to the Vehicle class\r\n\t\t\tTypeDescriptor.AddProviderTransparent(new AssociatedMetadataTypeTypeDescriptionProvider(typeof(Vehicle), typeof(VehicleRequirementsMetaData)), typeof(Vehicle));\r\n\r\n\t\t\t// Create a valid vehicle object with both properties populated\r\n\t\t\tvar newTruck = new Vehicle {\r\n\t\t\t\tName = \"My Truck\",\r\n\t\t\t\tManufacturer = \"Cool Hybrids Inc\"\r\n\t\t\t};\r\n\r\n\t\t\tstring jsonString = JsonSerializer.Serialize(newTruck);\r\n\r\n\t\t\tConsole.WriteLine(jsonString);\r\n\t\t\t/*\r\n\t\t\t{\r\n    \"VehileName\": \"My Truck\",\r\n    \"Manufacturer\": \"Cool Hybrids Inc\"\r\n} \r\n\t\t\t */\r\n\t\t}\r\n\r\n\t\tpublic class Vehicle {\r\n\t\t\t[JsonPropertyName(\"VehileName\")]\r\n\t\t\tpublic string Name { get; set; }\r\n\r\n\t\t\tpublic string Manufacturer { get; set; }\r\n\t\t}\r\n\r\n\t\tpublic class VehicleRequirementsMetaData {\r\n\r\n\t\t\t[JsonPropertyName(\"ManufID\")]\r\n\t\t\tpublic string Manufacturer { get; set; }\r\n\t\t}\r\n```\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7.0.400-preview.23330.10\r\n\r\n### Anything else?\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw0-SVQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7DLnTJ",
                                           "createdAt":  "2023-10-25T16:44:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-10-25T16:44:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DLnTb",
                                           "createdAt":  "2025-09-10T11:49:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javiercn",
                                           "body":  "As per the comment https://github.com/dotnet/aspnetcore/issues/39938#issuecomment-1097368085 this doesn\u0027t seem to be Blazor specific.",
                                           "updatedAt":  "2025-09-10T11:49:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DT5JV",
                                           "createdAt":  "2025-09-10T22:50:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-10T22:50:39Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "MetadataTypeAttribute still not supported in wasm, workaround dotnet/aspnetcore/39938 is not working",
        "labels":  [
                       "arch-wasm",
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98280",
        "createdAt":  "2024-02-11T17:52:36Z",
        "number":  98280,
        "author":  "DoctorMarvin21",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-13T22:49:05Z",
        "body":  "### Description\r\n\r\nI\u0027ve found interesting behavior of [System.Timers.Timer](https://github.com/dotnet/runtime/blob/main/src/libraries/System.ComponentModel.TypeConverter/src/System/Timers/Timer.cs) when `AutoReset = false`. Looks like it\u0027s there for a while.\r\n\r\nWhen Timer elapsed at least once, it starts automatically when setting any new `Interval` value even though `Enabled` is `false`\r\n\r\n### Reproduction Steps\r\n\r\n```csharp\r\nconst int TimerInterval = 100;\r\nint elapsedTimes = 0;\r\n\r\nusing var timer = new System.Timers.Timer { AutoReset = false, Interval = TimerInterval };\r\n\r\ntimer.Elapsed += (s, e) =\u003e\r\n{\r\n    elapsedTimes++;\r\n    Console.WriteLine($\"I\u0027m elapsed {elapsedTimes} time(s)\");\r\n};\r\n\r\nConsole.WriteLine($\"Starting timer normally\");\r\ntimer.Start();\r\nThread.Sleep(TimerInterval * 2);\r\n\r\nConsole.WriteLine($\"Setting timer interval when timer elapsed\");\r\ntimer.Interval = TimerInterval;\r\nThread.Sleep(TimerInterval * 2);\r\n```\r\n\r\n### Expected behavior\r\n\r\nOutput of the code snippet is:\r\n**Starting timer normally\r\nI\u0027m elapsed 1 time(s)\r\nSetting timer interval when timer elapsed**\r\n\r\n### Actual behavior\r\n\r\nOutput of the code snippet is:\r\n**Starting timer normally\r\nI\u0027m elapsed 1 time(s)\r\nSetting timer interval when timer elapsed\r\nI\u0027m elapsed 2 time(s)**\r\n\r\n### Regression?\r\n\r\nI tracked code to the early .NET Framework versions. Looks like it has always been an issue.\r\n\r\n### Known Workarounds\r\n\r\nUse `System.Threading.Timer` instead of `System.Timers.Timer`.\r\n\r\n### Configuration\r\n\r\nTested on .NET 8 and Windows 10.\r\n\r\n### Other information\r\n\r\nThere are inconsistent checks for current timer state. Property `Enabled` setter checks for `_enabled` field state and if `_timer` is not `null`, but `Interval` property only checks if `_timer` is not `null`. Then`MyTimerCallback(object? state)` sets `_enabled` to `false` without disposing and/or setting `_timer` to `null`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOc8xCmA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5zgNFg",
                                           "createdAt":  "2024-02-11T17:52:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI\u0027ve found interesting behavior of [System.Timers.Timer](https://github.com/dotnet/runtime/blob/main/src/libraries/System.ComponentModel.TypeConverter/src/System/Timers/Timer.cs) when `AutoReset = false`. Looks like it\u0027s there for a while.\r\n\r\n1. When Timer elapsed at least once, it starts automatically when setting any new `Interval` value even though `Enabled` is `false`\r\n2. Memory leak when starting timer over after it\u0027s elapsed (Elapsed =\u003e Start =\u003e Elapsed =\u003e Start, etc...)\r\n\r\nI attached code for the first case as memory leak is incredibly slow. Please, check _Other Information_ section below.\n\n### Reproduction Steps\n\n```csharp\r\nconst int TimerInterval = 100;\r\nint elapsedTimes = 0;\r\n\r\nusing var timer = new System.Timers.Timer { AutoReset = false, Interval = TimerInterval };\r\n\r\ntimer.Elapsed += (s, e) =\u003e\r\n{\r\n    elapsedTimes++;\r\n    Console.WriteLine($\"I\u0027m elapsed {elapsedTimes} time(s)\");\r\n};\r\n\r\nConsole.WriteLine($\"Starting timer normally\");\r\ntimer.Start();\r\nThread.Sleep(TimerInterval * 2);\r\n\r\nConsole.WriteLine($\"Setting timer interval when timer elapsed\");\r\ntimer.Interval = TimerInterval;\r\nThread.Sleep(TimerInterval * 2);\r\n```\n\n### Expected behavior\n\nOutput of the code snippet is:\r\n**Starting timer normally\r\nI\u0027m elapsed 1 time(s)\r\nSetting timer interval when timer elapsed**\n\n### Actual behavior\n\nOutput of the code snippet is:\r\n**Starting timer normally\r\nI\u0027m elapsed 1 time(s)\r\nSetting timer interval when timer elapsed\r\nI\u0027m elapsed 2 time(s)**\n\n### Regression?\n\nI tracked code to the early .NET Framework versions. Looks like it has always been an issue.\n\n### Known Workarounds\n\nUse `System.Threading.Timer` instead of `System.Timers.Timer`.\n\n### Configuration\n\nTested on .NET 8 and Windows 10.\n\n### Other information\n\nThere are inconsistent checks for current timer state. Property `Enabled` setter checks for `_enabled` field state, but `Interval` property checks if `_timer` is not `null`.\r\n\r\nActual problem comes in `MyTimerCallback(object? state)` when it sets `_enabled` to `false` **without disposing and setting  `_timer` to `null`** (if `_autoReset` is `false`).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDoctorMarvin21\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Threading`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-11T17:52:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zioxh",
                                           "createdAt":  "2024-02-12T11:02:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DoctorMarvin21",
                                           "body":  "After exploring Timer code a little longer...\r\n1. Same bug can be reproduced with changing `AutoReset` property as it\u0027s implementation is almost the same as in `Interval` property\r\n2. You can\u0027t \"fix\" the timer by stopping it as `Enabled` property setter coded well and checks for current `_enabled` field value\r\n\r\nHere\u0027s the updated reproduction scenario:\r\n```csharp\r\nconst int TimerInterval = 100;\r\nint elapsedTimes = 0;\r\n\r\nusing var timer = new System.Timers.Timer { AutoReset = false, Interval = TimerInterval };\r\n\r\ntimer.Elapsed += (s, e) =\u003e\r\n{\r\n    elapsedTimes++;\r\n    Console.WriteLine($\"I\u0027m elapsed {elapsedTimes} time(s)\");\r\n};\r\n\r\nConsole.WriteLine(\"Starting timer normally\");\r\ntimer.Start();\r\nThread.Sleep(TimerInterval * 2);\r\n\r\nConsole.WriteLine($\"Timer Enabled state is {timer.Enabled}\");\r\n\r\nConsole.WriteLine(\"Forcibly setting stop even though timer is disabled\");\r\ntimer.Stop();\r\n\r\nConsole.WriteLine(\"Setting timer interval when timer elapsed\");\r\ntimer.Interval = TimerInterval;\r\nThread.Sleep(TimerInterval * 2);\r\n\r\nConsole.WriteLine(\"Resetting Auto-Reset property value\");\r\ntimer.AutoReset = true;\r\ntimer.AutoReset = false;\r\nThread.Sleep(TimerInterval * 2);\r\n```\r\n\r\nOutput is:\r\n_Starting timer normally\r\nI\u0027m elapsed 1 time(s)\r\nTimer Enabled state is False\r\nForcibly setting stop even though timer is disabled\r\nSetting timer interval when timer elapsed\r\nI\u0027m elapsed 2 time(s)\r\nResetting Auto-Reset property value\r\nI\u0027m elapsed 3 time(s)_",
                                           "updatedAt":  "2024-02-12T11:02:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zj5q7",
                                           "createdAt":  "2024-02-12T14:32:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODWbmrA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2024-02-12T16:55:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "DoctorMarvin21",
                                           "body":  "Also, I think it\u0027s `System.ComponentModel` rather than `System.Threading`. @ericstj, am I right?",
                                           "updatedAt":  "2024-02-12T14:34:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zlPWW",
                                           "createdAt":  "2024-02-12T16:55:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI\u0027ve found interesting behavior of [System.Timers.Timer](https://github.com/dotnet/runtime/blob/main/src/libraries/System.ComponentModel.TypeConverter/src/System/Timers/Timer.cs) when `AutoReset = false`. Looks like it\u0027s there for a while.\r\n\r\nWhen Timer elapsed at least once, it starts automatically when setting any new `Interval` value even though `Enabled` is `false`\r\n\r\n### Reproduction Steps\r\n\r\n```csharp\r\nconst int TimerInterval = 100;\r\nint elapsedTimes = 0;\r\n\r\nusing var timer = new System.Timers.Timer { AutoReset = false, Interval = TimerInterval };\r\n\r\ntimer.Elapsed += (s, e) =\u003e\r\n{\r\n    elapsedTimes++;\r\n    Console.WriteLine($\"I\u0027m elapsed {elapsedTimes} time(s)\");\r\n};\r\n\r\nConsole.WriteLine($\"Starting timer normally\");\r\ntimer.Start();\r\nThread.Sleep(TimerInterval * 2);\r\n\r\nConsole.WriteLine($\"Setting timer interval when timer elapsed\");\r\ntimer.Interval = TimerInterval;\r\nThread.Sleep(TimerInterval * 2);\r\n```\r\n\r\n### Expected behavior\r\n\r\nOutput of the code snippet is:\r\n**Starting timer normally\r\nI\u0027m elapsed 1 time(s)\r\nSetting timer interval when timer elapsed**\r\n\r\n### Actual behavior\r\n\r\nOutput of the code snippet is:\r\n**Starting timer normally\r\nI\u0027m elapsed 1 time(s)\r\nSetting timer interval when timer elapsed\r\nI\u0027m elapsed 2 time(s)**\r\n\r\n### Regression?\r\n\r\nI tracked code to the early .NET Framework versions. Looks like it has always been an issue.\r\n\r\n### Known Workarounds\r\n\r\nUse `System.Threading.Timer` instead of `System.Timers.Timer`.\r\n\r\n### Configuration\r\n\r\nTested on .NET 8 and Windows 10.\r\n\r\n### Other information\r\n\r\nThere are inconsistent checks for current timer state. Property `Enabled` setter checks for `_enabled` field state and if `_timer` is not `null`, but `Interval` property only checks if `_timer` is not `null`. Then`MyTimerCallback(object? state)` sets `_enabled` to `false` without disposing and/or setting `_timer` to `null`.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDoctorMarvin21\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-12T16:55:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zlSma",
                                           "createdAt":  "2024-02-12T17:02:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I agree with @DoctorMarvin21 that the behavior appears to have been there a while.  This isn\u0027t the sort of behavior we\u0027re likely to change since it\u0027s very observable - but we would welcome improvements to the documentation.\r\n\r\n@DoctorMarvin21 can you have a look at https://learn.microsoft.com/en-us/dotnet/api/system.timers.timer.interval?view=net-8.0 and see if you think it could be improved?  One thing I noticed was:\r\n\u003e If the interval is set after the [Timer](https://learn.microsoft.com/en-us/dotnet/api/system.timers.timer?view=net-8.0) has started, the count is reset. For example, if you set the interval to 5 seconds and then set the [Enabled](https://learn.microsoft.com/en-us/dotnet/api/system.timers.timer.enabled?view=net-8.0) property to true, the count starts at the time [Enabled](https://learn.microsoft.com/en-us/dotnet/api/system.timers.timer.enabled?view=net-8.0) is set. If you reset the interval to 10 seconds when count is 3 seconds, the [Elapsed](https://learn.microsoft.com/en-us/dotnet/api/system.timers.timer.elapsed?view=net-8.0#system-timers-timer-elapsed) event is raised for the first time 13 seconds after [Enabled](https://learn.microsoft.com/en-us/dotnet/api/system.timers.timer.enabled?view=net-8.0) was set to true.\r\n\r\nThat seems to cover this scenario.  If you\u0027d like to improve the docs, have a look in https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System.Timers/Timer.xml",
                                           "updatedAt":  "2024-02-12T17:02:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zlbDu",
                                           "createdAt":  "2024-02-12T17:21:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DoctorMarvin21",
                                           "body":  "@ericstj, thanks for pointing out that Interval property has detailed documentation. And this documentation desribes this scenario and suggest to apply workaround:\r\n\u003e If [Enabled](https://learn.microsoft.com/en-us/dotnet/api/system.timers.timer.enabled?view=net-8.0) and [AutoReset](https://learn.microsoft.com/en-us/dotnet/api/system.timers.timer.autoreset?view=net-8.0) are both set to false, and the timer has previously been enabled, setting the [Interval](https://learn.microsoft.com/en-us/dotnet/api/system.timers.timer.interval?view=net-8.0) property causes the [Elapsed](https://learn.microsoft.com/en-us/dotnet/api/system.timers.timer.elapsed?view=net-8.0#system-timers-timer-elapsed) event to be raised once, as if the [Enabled](https://learn.microsoft.com/en-us/dotnet/api/system.timers.timer.enabled?view=net-8.0) property had been set to true. To set the interval without raising the event, you can temporarily set the [Enabled](https://learn.microsoft.com/en-us/dotnet/api/system.timers.timer.enabled?view=net-8.0) property to true, set the [Interval](https://learn.microsoft.com/en-us/dotnet/api/system.timers.timer.interval?view=net-8.0) property to the desired time interval, and then immediately set the [Enabled](https://learn.microsoft.com/en-us/dotnet/api/system.timers.timer.enabled?view=net-8.0) property back to false.\r\n\r\nI surely agree that changing so old code is a bad idea. On the other hand, that is so obvious a bug that it\u0027s extremely confusing.",
                                           "updatedAt":  "2024-02-12T17:21:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zlyLi",
                                           "createdAt":  "2024-02-12T18:15:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DoctorMarvin21",
                                           "body":  "On the other hand, I\u0027m not sure that I agree with statement that it\u0027s very observable. Even though I have over 10 years of experience with .NET and faced some controversial behaviors, I never saw such an obvious bug and didn\u0027t expect it to be in Microsoft code, so I first needed to recheck all other possible cases. Finally, this bug caused false-negative results in hardware test scenarios with a low reproduction rate.\r\nI understand that Microsoft tries to keep .NET Framework code as it is to make migrations flawless, but before I\u0027ll close this (as this bug is obviously documented well at least for `Interval`). @ericstj, what do you think about creating proposal for breaking change to fix this?",
                                           "updatedAt":  "2024-02-12T18:16:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zzEKY",
                                           "createdAt":  "2024-02-13T22:49:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "It depends on how breaking - I agree that behavior described seems really unusual.  If it can be fixed with minor side effects it might be worth fixing.  I\u0027d want @dotnet/dotnet-winforms and @dotnet/area-system-componentmodel to weigh in on that.",
                                           "updatedAt":  "2024-02-13T22:49:04Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "`System.Timers.Timer` starts when in disabled state after setting interval value",
        "labels":  [
                       "documentation",
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99178",
        "createdAt":  "2024-03-01T22:02:41Z",
        "number":  99178,
        "author":  "seanhalliday",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T18:09:42Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n\u003c!--\r\n* We have multiple threads getting properties and attributes on multiple objects.  I noticed that asking for DisplayName, IsBrowsable, etc on a PropertyDescriptor ends up in AttributeCollection[type] which has a global static lock around the entire code so only one thread can read at a time.  I think a non-static lock would work unless you access the dictionary of default attributes, which ideally would be a ConcurrentDictionary instead.\r\n  --\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdn4iUw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc51qaRs",
                                           "createdAt":  "2024-03-01T23:07:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n\u003c!--\r\n* We have multiple threads getting properties and attributes on multiple objects.  I noticed that asking for DisplayName, IsBrowsable, etc on a PropertyDescriptor ends up in AttributeCollection[type] which has a global static lock around the entire code so only one thread can read at a time.  I think a non-static lock would work unless you access the dictionary of default attributes, which ideally would be a ConcurrentDictionary instead.\r\n  --\u003e\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eseanhalliday\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-03-01T23:07:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc516guT",
                                           "createdAt":  "2024-03-05T09:06:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "The only static state to protect is `s_defaultAttributes`, which is already protected in `GetDefaultAttribute`. It should really be a `ConditionalWeakTable` in order to support collectible types.",
                                           "updatedAt":  "2024-03-05T09:06:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52SVYR",
                                           "createdAt":  "2024-03-07T21:20:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Code: https://github.com/dotnet/runtime/blob/49a8bb7eb31f2aea9c895f4e9f6c2f6567281bdd/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeCollection.cs#L27",
                                           "updatedAt":  "2024-03-07T21:20:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52SXkk",
                                           "createdAt":  "2024-03-07T21:23:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e The only static state to protect is s_defaultAttributes, which is already protected in GetDefaultAttribute\r\n\r\nYes `s_internalSyncObject` is used in part to protect `s_defaultAttributes` so using a static makes sense.\r\n\r\n\u003e It should really be a ConditionalWeakTable in order to support collectible types.\r\n\r\nIs the underlying concern\\issue around unloadable types?",
                                           "updatedAt":  "2024-03-07T21:23:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52fiJT",
                                           "createdAt":  "2024-03-11T09:33:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e Is the underlying concern\\issue around unloadable types?\r\n\r\nThe `Type` and attribute instance will permanently stay in the `s_defaultAttributes` dictionary. This prevents the type and the assembly to be collected.",
                                           "updatedAt":  "2024-03-11T09:33:43Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "AttributeCollection[Type type] uses a static lock; prevents Type from being unloaded",
        "labels":  [
                       "area-System.ComponentModel",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106849",
        "createdAt":  "2024-08-23T01:27:33Z",
        "number":  106849,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-18T02:35:44Z",
        "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20240822.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=785250\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=20167938\u0026resultId=102768\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-x64-jitstress_random_2-Windows.10.Amd64.Open\r\n    - System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync\r\n```\r\n\r\n**Error message:**\r\n```\r\n Cancellation in Main thread\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync() in /_/src/libraries/System.ComponentModel.EventBasedAsync/tests/BackgroundWorkerTests.cs:line 126\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvm5-Ww==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6JcuUi",
                                           "createdAt":  "2024-08-23T01:27:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-23T01:27:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VoYFO",
                                           "createdAt":  "2024-12-02T01:40:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-pgo 20241130.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=882807\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=23080410\u0026resultId=103470\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-x64-jitosr_stress_random-Windows.10.Amd64.Open\n    - System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync\n```\n\n**Error message:**\n```\n Cancellation in Main thread\n```\n\n**Stack trace:**\n```\n   at System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync() in /_/src/libraries/System.ComponentModel.EventBasedAsync/tests/BackgroundWorkerTests.cs:line 126\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2024-12-02T01:40:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aI5lP",
                                           "createdAt":  "2025-01-13T01:27:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20250111.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=914448\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24138908\u0026resultId=104394\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-arm64-jitstress_random_2-(Ubuntu.2004.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-20.04-helix-arm64v8\n    - System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync\n```\n\n**Error message:**\n```\n Cancellation in Main thread\n```\n\n**Stack trace:**\n```\n   at System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync() in /_/src/libraries/System.ComponentModel.EventBasedAsync/tests/BackgroundWorkerTests.cs:line 126\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2025-01-13T01:27:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aSk7m",
                                           "createdAt":  "2025-01-14T01:25:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20250113.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=915376\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24176138\u0026resultId=113288\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-arm64-jitstress_random_2-Windows.11.Arm64.Open\n    - System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync\n```\n\n**Error message:**\n```\n Cancellation in Main thread\n```\n\n**Stack trace:**\n```\n   at System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync() in /_/src/libraries/System.ComponentModel.EventBasedAsync/tests/BackgroundWorkerTests.cs:line 126\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2025-01-14T01:25:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dF31J",
                                           "createdAt":  "2025-02-05T02:27:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20250201.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=937193\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=24847880\u0026resultId=103286\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-arm-jitstress_random_1-(Debian.12.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-12-helix-arm32v7\n    - System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync\n```\n\n**Error message:**\n```\n Cancellation in Main thread\n```\n\n**Stack trace:**\n```\n   at System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync() in /_/src/libraries/System.ComponentModel.EventBasedAsync/tests/BackgroundWorkerTests.cs:line 126\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2025-02-05T02:27:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dwpvO",
                                           "createdAt":  "2025-02-10T02:20:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20250208.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=945482\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25102024\u0026resultId=105360\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-arm-jitstress_random_1-(Debian.12.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-12-helix-arm32v7\n    - System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync\n```\n\n**Error message:**\n```\n Cancellation in Main thread\n```\n\n**Stack trace:**\n```\n   at System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync() in /_/src/libraries/System.ComponentModel.EventBasedAsync/tests/BackgroundWorkerTests.cs:line 126\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2025-02-10T02:20:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fmYR3",
                                           "createdAt":  "2025-02-24T07:42:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20250222.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=959891\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25554498\u0026resultId=103545\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-x64-jitstress_random_2-Windows.10.Amd64.Open\n    - System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync\n```\n\n**Error message:**\n```\n Cancellation in Main thread\n```\n\n**Stack trace:**\n```\n   at System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync() in /_/src/libraries/System.ComponentModel.EventBasedAsync/tests/BackgroundWorkerTests.cs:line 126\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2025-02-24T07:42:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jtpI6",
                                           "createdAt":  "2025-03-24T01:28:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20250322.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=989990\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=26420526\u0026resultId=104974\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-x64-jitstress_random_2-Windows.10.Amd64.Open\n    - System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync\n```\n\n**Error message:**\n```\n Cancellation in Main thread\n```\n\n**Stack trace:**\n```\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2025-03-24T01:28:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kzL_v",
                                           "createdAt":  "2025-03-31T01:23:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20250329.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=998314\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=26641020\u0026resultId=118853\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-arm64-jitstress_random_2-(Ubuntu.2404.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-24.04-helix-arm64v8\n    - System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync\n```\n\n**Error message:**\n```\n Cancellation in Main thread\n```\n\n**Stack trace:**\n```\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2025-03-31T01:23:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6z2o9Y",
                                           "createdAt":  "2025-06-30T01:25:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20250628.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1081064\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=29388968\u0026resultId=103407\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-arm64-jitstress_random_2-Windows.11.Arm64.Open\n    - System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync\n```\n\n**Error message:**\n```\n Cancellation in Main thread\n```\n\n**Stack trace:**\n```\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2025-06-30T01:25:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-bn5b",
                                           "createdAt":  "2025-08-18T02:35:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20250816.1](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1124589)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-arm-jitstress_random_1-(Debian.13.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-13-helix-arm32v7\n    - System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync\n```\n\n**Error message:**\n```\nCancellation in Main thread\n```\n\n**Stack trace:**\n```\n   at System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync() in /_/src/libraries/System.ComponentModel.EventBasedAsync/tests/BackgroundWorkerTests.cs:line 126\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```\n\n",
                                           "updatedAt":  "2025-08-18T02:35:44Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Test failure: System.ComponentModel.EventBasedAsync.Tests.BackgroundWorkerTests.TestCancelAsync",
        "labels":  [
                       "area-System.ComponentModel",
                       "os-windows",
                       "JitStress",
                       "arch-x64",
                       "blocking-clean-ci-optional"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107435",
        "createdAt":  "2024-09-05T23:39:28Z",
        "number":  107435,
        "author":  "terrajobst",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC60PUw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "paulomorgado",
                                            "createdAt":  "2024-09-06T08:07:02Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-26T10:50:40Z",
        "body":  "### Background and motivation\r\n\r\nFor abstractions like `ICommand` it\u0027s useful to have a standard implementation that does nothing. We have some of them already, such as `Stream.Null` and `TextWriter.Null`.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Windows.Input;\r\n\r\npublic partial interface ICommand\r\n{\r\n    public static ICommand Null { get; } = new NullCommand();\r\n\r\n    private sealed class NullCommand : ICommand\r\n    {\r\n        public event EventHandler? CanExecuteChanged\r\n        {\r\n            add {}\r\n            remove {}\r\n        }\r\n    \r\n        public bool CanExecute(object? parameter)\r\n        {\r\n            return true;\r\n        }\r\n    \r\n        public void Execute(object? parameter)\r\n        {\r\n            // Do nothing\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nprivate ICommand _command = ICommand.Null; // Might be set to something meaningful later\r\n```\r\n\r\n### Alternative Designs\r\n\r\nWe could put it on a class instead, but we don\u0027t have a built-in implementation of `ICommand` in `System.ObjectModel.dll`, so I don\u0027t believe there is a good candidate. We could, of course, create one.\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi7w3Kg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6LDsQ2",
                                           "createdAt":  "2024-09-06T01:25:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxSdyQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maikschott",
                                                                               "createdAt":  "2024-09-06T14:27:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "What about `NullCommand.Instance`? I personally don’t like the look of static properties on instances.",
                                           "updatedAt":  "2024-09-06T01:25:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LE9O-",
                                           "createdAt":  "2024-09-06T06:23:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxpq4w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "terrajobst",
                                                                               "createdAt":  "2024-09-06T15:38:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "saint4eva",
                                                                               "createdAt":  "2024-09-07T06:45:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2024-09-10T09:46:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "Small note to consider: this will break with trimming/AOT when using CsWinRT. The experience won\u0027t be great because right now, this would produce no warnings, but it will just crash at runtime (because `ICommand.Null` wouldn\u0027t have CCW vtable information on it). If we do want to add an API like this, it might be a good idea to also consider support in CsWinRT as part of the design to make sure that using it would work as expected on NativeAOT. cc. @manodasanW\r\n\r\nSide note, in the long run, this would also tie into CsWinRT using extension interfaces to provide CCW descriptions.",
                                           "updatedAt":  "2024-09-06T06:23:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LIyvN",
                                           "createdAt":  "2024-09-06T15:41:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxprHg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2024-09-10T09:47:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "@Sergio0694 \r\n\r\nBreaking the WinRT projections would certainly be a good argument for avoiding a static interface member.\r\n\r\n@colejohnson66\u0027s argument (\"I don\u0027t like what it looks like\") isn\u0027t good enough for me. Partially because I think that\u0027s just the nature of a new feature (it looks foreign because it\u0027s new) and partially because we know from UX studies that types add more concept count which members generally do not (except for special cases like `IEnumerable\u003cT\u003e` extension methods showing up elsewhere).\r\n\r\nThe primary reason for using statics here is because we don\u0027t ship a default implementation in the base layer, which might be worth changing.",
                                           "updatedAt":  "2024-09-06T15:42:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LR9HQ",
                                           "createdAt":  "2024-09-08T16:10:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "`System.IO.Stream.Null` has each of `CanRead`, `CanWrite`, and `CanSeek` returning true; but implements methods as no-ops.\r\n`Microsoft.Extensions.Logging.Abstractions.NullLogger` has `IsEnabled(LogLevel)` returning false, and implements `BeginScope` and `Log\u003cTState\u003e` as no-ops.\r\n\r\nIn this respect, it is surprising that `NullCommand.Execute(object?)` would throw InvalidOperationException.  Is there any precedent for \"Null\" implementations doing so?",
                                           "updatedAt":  "2024-09-08T16:10:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LaIJd",
                                           "createdAt":  "2024-09-09T19:10:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "That\u0027s a fair question.\r\n\r\nThe way I think about this:\r\n\r\n* `System.IO.Stream.Null` is meant as a stream you can pass to anyone without anything bad happening. That means you can read/write but you don\u0027t get data. It\u0027s odd that it supports seeking, but hey.\r\n\r\n* Is a dummy command a command that is disabled or a command that is enabled but does nothing? I don\u0027t care too much either way, but I can buy that enabled with no-op is more natural.",
                                           "updatedAt":  "2024-09-09T19:10:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LcNLe",
                                           "createdAt":  "2024-09-10T01:22:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxwRvg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "terrajobst",
                                                                               "createdAt":  "2024-09-11T00:23:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "My $0.02: When writing the view for a UI, I like buttons to appear normally, but do nothing. However, in Avalonia, if the command in bound command can’t execute, the button acts disabled (style- and interaction-wise). So, when writing the skeleton view model, I have to use a “dummy command” the *can* execute, but does nothing. I personally would expect a “null” command to do the same.\r\n\r\nAlternatively, two could be provided: one that can execute (but does nothing), and one that can’t (but throws).",
                                           "updatedAt":  "2024-09-10T01:24:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LnfGA",
                                           "createdAt":  "2024-09-11T00:23:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "\u003e When writing the view for a UI, I like buttons to appear normally, but do nothing.\r\n\r\nThat makes sense to me. I\u0027ll update the proposal accordingly.",
                                           "updatedAt":  "2024-09-11T00:23:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Lngev",
                                           "createdAt":  "2024-09-11T00:30:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxykOQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2024-09-11T07:52:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "\u003e \"For abstractions like `ICommand` it\u0027s useful to have a standard implementation that does nothing.\"\r\n\r\nPerhaps we should include some examples? The issue just says \"it\u0027s useful\", but I personally can\u0027t think of a single time I\u0027ve ever used something like this in any apps I\u0027ve ever made or worked on or saw the source code for, nor can I really think of a scenario where I\u0027d imagine myself needing this either, to be completely honest 😅",
                                           "updatedAt":  "2024-09-11T00:30:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LoOM5",
                                           "createdAt":  "2024-09-11T04:06:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "The customer I got the request from has code of the following nature:\r\n\r\n```C#\r\npublic ICommand ClickCommand { get; set; } = ICommand.Null;\r\n```\r\n\r\nThe `ClickCommand` can be set to something useful by users of the view model, but they don\u0027t have to.",
                                           "updatedAt":  "2024-09-11T04:06:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Lp0Lp",
                                           "createdAt":  "2024-09-11T08:29:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD4eJlg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2024-09-12T08:32:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "huoyaoyuan",
                                                                               "createdAt":  "2024-10-29T05:25:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "Right, no I get that that\u0027s the intended use, but what I don\u0027t understand is... Why? What\u0027s the point of doing that? Literally all XAML frameworks out there already handle commands being `null`, and they will just (correctly) show buttons as disabled, which is the expected default state for a buttons that doesn\u0027t do anything and hence can\u0027t be used. The only reason why you\u0027d want to use `ICommand.Null` instead of that is specifically if you instead wanted to have a button that is enabled, but doesn\u0027t do anything at all when clicked. And I don\u0027t understand why you\u0027d ever want that, nor have I ever seen this used in any apps before.",
                                           "updatedAt":  "2024-09-11T18:34:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LvDcq",
                                           "createdAt":  "2024-09-11T18:16:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "I suppose that\u0027s fair",
                                           "updatedAt":  "2024-09-11T18:16:21Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "[API Proposal]: ICommand.Null",
        "labels":  [
                       "api-suggestion",
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108422",
        "createdAt":  "2024-09-06T06:23:13Z",
        "number":  108422,
        "author":  "Zheng-Li01",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:50:42Z",
        "body":  "### .NET version\n\n.NET 9.0.100-rc2.24455.8\n\n### Did it work in .NET Framework?\n\nNo\n\n### Did it work in any of the earlier releases of .NET Core or .NET 5+?\n\nNo, the issue also can reproduce from .NET Core 3.1\n\n### Issue description\n\nThe **on** is not translated for **Error on errorProvider** property on all 13 local languages: CHS, CHT, CSY, DEU, ESN, FRA, ITA, JPN, KOR, PLK, PTB, RUS, TRK.\r\n![image](https://github.com/user-attachments/assets/ec71af7b-73bf-4bd0-899d-9251444f217d)\n\n### Steps to reproduce\n\n1. Create .NET Winforms project with ErrorProvide \u0026 Button controls.\r\n2. Observer the \"on\" in **Error on errorProvider** property.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjnsdrQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6OJfqE",
                                           "createdAt":  "2024-09-10T19:06:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "Presumably this is in the designer",
                                           "updatedAt":  "2024-09-10T19:06:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OJfqL",
                                           "createdAt":  "2024-09-24T19:47:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD0MKeQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LeafShi1",
                                                                               "createdAt":  "2024-09-25T00:20:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Tanya-Solyanik",
                                           "body":  "@LeafShi1   - I think this name is coming from the `PropertyGrid` in the Framework, but I\u0027m not sure, could you please investigate. This property is coming from IExtenderProvider",
                                           "updatedAt":  "2024-09-24T19:47:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OJfqS",
                                           "createdAt":  "2024-09-26T08:07:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LeafShi1",
                                           "body":  "The call stack in .netcore:\r\n\r\n```\r\nSystem.ComponentModel.TypeConverter.dll!System.ComponentModel.ExtendedPropertyDescriptor.DisplayName.get() Line 105\tC#\r\nSystem.Windows.Forms.dll!System.Windows.Forms.PropertyGridInternal.GridEntry.DisplayNameSortComparer.Compare(object left, object right) Line 16\tC#\r\nSystem.Private.CoreLib.dll!System.Array.SorterObjectArray.PickPivotAndPartition(int lo, int hi) Line 2394\tC#\r\nSystem.Private.CoreLib.dll!System.Array.SorterObjectArray.IntroSort(int lo, int hi, int depthLimit) Line 2369\tC#\r\nSystem.Private.CoreLib.dll!System.Array.SorterObjectArray.IntrospectiveSort(int left, int length) Line 2317\tC#\r\nSystem.Private.CoreLib.dll!System.Array.Sort(System.Array keys, System.Array items, int index, int length, System.Collections.IComparer comparer) Line 2044\tC#\r\nSystem.Private.CoreLib.dll!System.Array.Sort(System.Array array, System.Collections.IComparer comparer) Line 1978\tC#\r\nSystem.ComponentModel.TypeConverter.dll!System.ComponentModel.PropertyDescriptorCollection.InternalSort(string[] names) Line 328\tC#\r\nSystem.ComponentModel.TypeConverter.dll!System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array array, int index) Line 126\tC#\r\nSystem.Windows.Forms.dll!System.Windows.Forms.PropertyGridInternal.GridEntry.GetChildEntries() Line 1325\tC#\r\nSystem.Windows.Forms.dll!System.Windows.Forms.PropertyGridInternal.GridEntry.CreateChildren(bool useExistingChildren) Line 947\tC#\r\nSystem.Windows.Forms.dll!System.Windows.Forms.PropertyGridInternal.SingleSelectRootGridEntry.CreateChildren(bool diffOldChildren) Line 193\tC#\r\nSystem.Windows.Forms.dll!System.Windows.Forms.PropertyGridInternal.GridEntry.InternalExpanded.set(bool value) Line 329\tC#\r\nSystem.Windows.Forms.dll!System.Windows.Forms.PropertyGridInternal.SingleSelectRootGridEntry.SingleSelectRootGridEntry(System.Windows.Forms.PropertyGridInternal.PropertyGridView ownerGridView, object target, System.IServiceProvider baseProvider, System.ComponentModel.Design.IDesignerHost host, System.Windows.Forms.Design.PropertyTab ownerTab, System.Windows.Forms.PropertySort sortType) Line 47\tC#\r\nSystem.Windows.Forms.dll!System.Windows.Forms.PropertyGridInternal.GridEntry.CreateRootGridEntry(System.Windows.Forms.PropertyGridInternal.PropertyGridView view, object[] objects, System.IServiceProvider baseProvider, System.ComponentModel.Design.IDesignerHost currentHost, System.Windows.Forms.Design.PropertyTab tab, System.Windows.Forms.PropertySort initialSortType) Line 899\tC#\r\nSystem.Windows.Forms.dll!System.Windows.Forms.PropertyGrid.UpdateSelection() Line 4165\tC#\r\nSystem.Windows.Forms.dll!System.Windows.Forms.PropertyGrid.RefreshProperties(bool clearCached) Line 3410\tC#\r\nSystem.Windows.Forms.dll!System.Windows.Forms.PropertyGrid.Refresh(bool clearCached) Line 3386\tC#\r\nSystem.Windows.Forms.dll!System.Windows.Forms.PropertyGrid.SelectedObjects.set(object[] value) Line 1115\tC#\r\nSystem.Windows.Forms.dll!System.Windows.Forms.PropertyGrid.SelectedObject.set(object value) Line 891\tC#\r\n\r\n```\r\n\r\nThe root of the problem is that the resource is not localized when getting the DisplayName\r\n![image](https://github.com/user-attachments/assets/ec830891-63d9-4e9d-aa6e-556c1958f077)\r\n\r\n@Tanya-Solyanik  So the changes should be made to the file `System.ComponentModel.ExtendedPropertyDescriptor` , where do we change that file and can we change it at all?\r\n\r\nThis issue doesn\u0027t reproduce in .NetFramwork project, cause the [DisplayName](https://devdiv.visualstudio.com/DevDiv/_git/VS?path=/src/vsip/Framework/Design/VsTargetFrameworkPropertyDescriptor.cs\u0026version=GBmain\u0026line=83\u0026lineEnd=96\u0026lineStartColumn=1\u0026lineEndColumn=1\u0026lineStyle=plain\u0026_a=contents) was override in [VsTargetFrameworkPropertyDescriptor.cs](https://devdiv.visualstudio.com/DevDiv/_git/VS?path=/src/vsip/Framework/Design/VsTargetFrameworkPropertyDescriptor.cs\u0026_a=contents\u0026version=GBmain)\r\n\r\n",
                                           "updatedAt":  "2024-09-29T07:23:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OJfqX",
                                           "createdAt":  "2024-10-01T05:46:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tanya-Solyanik",
                                           "body":  "@LeafShi1  - great investigation.\r\n\r\nWe don\u0027t own Systerm.ComponentModel in .NET",
                                           "updatedAt":  "2024-10-01T05:46:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OJg_e",
                                           "createdAt":  "2024-10-01T05:51:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tanya-Solyanik",
                                           "body":  "How do we opt into localization in this string - https://github.com/dotnet/runtime/blob/7b1e788c34ee9a44f6dc548c170c153dd7eab559/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/ExtendedPropertyDescriptor.cs#L102",
                                           "updatedAt":  "2024-10-01T05:51:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OSLV0",
                                           "createdAt":  "2024-10-01T21:43:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-01T21:43:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OblVn",
                                           "createdAt":  "2024-10-02T20:13:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "The LOC is here: https://github.com/dotnet/runtime/blob/81efcade9e543a2c03457b3bc87a2bc76b36057e/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/ExtendedPropertyDescriptor.cs#L102\r\n\r\nThis needs to move to a new resource string like \"{0} on {1}\".",
                                           "updatedAt":  "2024-10-02T20:13:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Oex2t",
                                           "createdAt":  "2024-10-03T03:27:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tanya-Solyanik",
                                           "body":  "@steveharter  - shouldn\u0027t we set \"System.Resources.UseSystemResourceKeys\" app context switch on the designer process?",
                                           "updatedAt":  "2024-10-03T03:27:31Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[LOC]The \"on\" is not translated for Error on errorProvider property on all local languages",
        "labels":  [
                       "area-System.ComponentModel",
                       "good first issue",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111181",
        "createdAt":  "2025-01-08T01:13:08Z",
        "number":  111181,
        "author":  "JoshLove-msft",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T18:09:49Z",
        "body":  "### Description\n\nThis [method](https://github.com/dotnet/runtime/blob/main/src/libraries/System.ComponentModel.Composition/src/System/ComponentModel/Composition/Hosting/DirectoryCatalog.cs#L727-L737) will call ToUpperInvariant on the file paths for Windows. This causes issues if case-sensitivity has been enabled for a directory. The check where we return early should likely be updated to account for whether the directory has case-sensitivity enabled.\n\n### Reproduction Steps\n\nRepro steps can be found here https://github.com/microsoft/typespec/issues/5518\n\n\n### Expected behavior\n\nThe file paths should respect case-sensitivity if enabled.\n\n### Actual behavior\n\nFile paths do not respect case-sensitivity.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmZLOmg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Zks6a",
                                           "createdAt":  "2025-01-08T01:35:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-08T01:35:16Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "DirectoryCatalog should not do ToUpper if case sensitivity is enabled",
        "labels":  [
                       "bug",
                       "area-System.ComponentModel"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116341",
        "createdAt":  "2025-06-05T16:07:20Z",
        "number":  116341,
        "author":  "mikekistler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDeuHg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FedeArre",
                                            "createdAt":  "2025-06-05T17:00:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nerkmind1337",
                                            "createdAt":  "2025-06-09T17:06:19Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-15T15:58:00Z",
        "body":  "### Background and motivation\n\n## Introduction\n\nThis proposal introduces a new attribute, `ExampleValueAttribute`, to the `System.ComponentModel` namespace. It is designed to mirror the API surface of `DefaultValueAttribute`, but with the purpose of specifying example values for documentation and tooling scenarios.\n\n## Motivation\n\nWhile `DefaultValueAttribute` is commonly used to indicate the default value of a property or parameter, there is currently no built-in attribute to indicate an example value. Example values are useful for:\n\n- API documentation generation\n- Design-time tooling\n- Testing and validation scenarios\n- Enhancing developer understanding of expected inputs\n\nAdding `ExampleValueAttribute` provides a standardized way to annotate members with example values without overloading the semantics of `DefaultValueAttribute`.\n\n## Remarks\n\n- This attribute is intended for use in documentation and tooling contexts.\n- It does not affect runtime behavior or serialization.\n- Consumers of this attribute (e.g., OpenAPI generators, UI scaffolding tools) can use the `Value` property to display or infer example inputs.\n\n\n### API Proposal\n\n```csharp\nnamespace System.ComponentModel\n{\n    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Parameter)]\n    public sealed class ExampleValueAttribute : Attribute\n    {\n        public ExampleValueAttribute(object value)\n        {\n            Value = value;\n        }\n\n        public object Value { get; }\n    }\n}\n```\n\n\n### API Usage\n\n### Example 1: Property\n\n```csharp\npublic class Product\n{\n    [ExampleValue(\"Widget-123\")]\n    public string SKU { get; set; }\n}\n```\n\n### Example 2: Parameter\n\n```csharp\npublic void Configure([ExampleValue(true)] bool enableFeature)\n{\n    // ...\n}\n```\n\n### Alternative Designs\n\nExamples can be provided using XML documentation, but providing an attribute gives users that are already familiar with similar attributes like `DefaultValueAttribute` an alternative that does not require enabling XML doc comments, which is an opt-in feature.\n\n\n\n### Risks\n\n- Minimal risk, as this is a non-breaking addition.\n- Tooling must opt-in to support this attribute.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtz1JMw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6vi2Yr",
                                           "createdAt":  "2025-06-05T16:19:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-05T16:19:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63A3eq",
                                           "createdAt":  "2025-07-14T17:55:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "cc @JeremyKuhne @dotnet/area-system-componentmodel-dataannotations \n\nTypically we don\u0027t add new API because it \"might be useful\".  We need a compelling end-to-end that\u0027s blocked by API not being in the framework.  DataAnnotations does cover some of this in that it supports attributes that are meant to validate possible values.",
                                           "updatedAt":  "2025-07-14T17:55:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63I63U",
                                           "createdAt":  "2025-07-15T08:07:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "The attribute should probably be left unsealed so that values not directly supported by attribute annotations can be introduced via subclassing.",
                                           "updatedAt":  "2025-07-15T08:07:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63M_2N",
                                           "createdAt":  "2025-07-15T13:37:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikekistler",
                                           "body":  "@ericstj Here\u0027s a concrete example of how example values in OpenAPI, and by extension the ExampleValueAttribute, are useful / valuable.\n\nThe [URSA Web Scanner](https://eng.ms/docs/microsoft-security/digital-security-and-resilience/azure-security/security-health-analytics/unified-remote-scanning-ursa/ursa-web-scanner) is a dynamic application security testing (DAST) tool that onboards and orchestrates scanning of Microsoft 1st party endpoints for known web app / web API vulnerabilities and posts the results to S360, Kusto, and downloadable reports.\n\nThis tool uses the OpenAPI description for WebAPIs to guide it\u0027s testing and\n\n\u003e the Open API V3.0.X JSON must contain ... any examples necessary for good responses from the API.\n\nAs Microsoft has many services, both 1P and external, that are implemented in ASP.NET, support for good example values in generated OpenAPI documents enhances Microsoft security.",
                                           "updatedAt":  "2025-07-15T13:37:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63PUkz",
                                           "createdAt":  "2025-07-15T15:57:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Why wouldn\u0027t we put such information in docs instead of metadata?  Is it for design time or runtime?  \n\nIs there any reason to have a strongly typed attribute here, or could users just define it themselves as needed and have tools consume that by name?  This is often what we do for design-time (and sometimes even runtime) consumed attributes.  We put them in the framework once we see broad usage and adoption and we can save folks a couple bytes by doing so + improve usability.\n\n\u003e public ExampleValueAttribute(object value)\n\nAttributes cannot support arbitrary objects.  ECMA only permits definition of primitive types, strings, and types (see II.23.3).  Object is permitted but it must be one of these.  DefaultValueAttribute deals with this by having primitive overloads and then having a [string based overload with a target type](https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.defaultvalueattribute.-ctor?view=net-9.0#system-componentmodel-defaultvalueattribute-ctor(system-type-system-string)) that it uses with typeconverter infrastructure.  Note that this is not well supported for linked applications due to use of `RequiresUnreferencedCode` and may not be a pattern we want to repeat.\nhttps://github.com/dotnet/runtime/blob/c7b0e49e54f3f199494ee438d474f9b1c413122c/src/libraries/System.Private.CoreLib/src/System/ComponentModel/DefaultValueAttribute.cs#L55-L99\n\nI am not sure how a _validation_ tool would use _example values_ since those do not provide a closed set of allowed values.   A better fit might be [AllowedValuesAttribute](https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.allowedvaluesattribute?view=net-9.0) or other attributes in DataAnnotations.  \n\nKeep in mind anything attribute based would have constraints on the values as I mentioned above.  I guess ASP.NET supports complex types through JSON serialization, so  perhaps there would need to be some integration with that?  @eiriktsarpalis how does this ask relate to JSON schema?",
                                           "updatedAt":  "2025-07-15T15:58:00Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[API Proposal]: ExampleValueAttribute",
        "labels":  [
                       "api-suggestion",
                       "area-System.ComponentModel",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118724",
        "createdAt":  "2025-08-14T11:25:54Z",
        "number":  118724,
        "author":  "znakeeye",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-01T13:04:35Z",
        "body":  "### Description\n\nTargeting `.NET 8`. When trying out some built-in `TypeConverter` classes, we got some unexpected results. E.g. [StringConverter](https://github.com/dotnet/runtime/blob/main/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/StringConverter.cs) and [Int32Converter](https://github.com/dotnet/runtime/blob/main/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/Int32Converter.cs) _can_ convert to their **own types**, but the same is **not** true for e.g. [NullableConverter](https://github.com/dotnet/runtime/blob/main/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs) and [DateTimeConverter](https://github.com/dotnet/runtime/blob/main/src/libraries/System.ComponentModel.TypeConverter/src/System/ComponentModel/DateTimeConverter.cs).\n\n\nHow come the contract differs for built-in type converters? Is this intended behavior or some undocumented feature?\n\n**Example**\n```cs\nusing System.ComponentModel;\n\nnamespace TypeConverterTest;\n\ninternal class Program\n{\n    static void Main(string[] args)\n    {\n        var types = new Type[]\n        {\n            typeof(string),\n            typeof(CultureInfo),\n            typeof(int),\n            typeof(int?),\n            typeof(DateTime),\n            typeof(DateTime?),\n        };\n        \n        foreach (var type in types)\n        {\n            string typeName = GetFriendlyName(type);\n\n            var conv = TypeDescriptor.GetConverter(type);\n            bool result = conv.CanConvertTo(null, type);\n\n            Console.WriteLine($\"{typeName,-20} CanConvertTo() == {result}\");\n        }\n    }\n\n    private static string GetFriendlyName(Type type)\n    {\n        if (type.IsGenericType)\n        {\n            var namePrefix = type.Name.Split([\u0027`\u0027], StringSplitOptions.RemoveEmptyEntries)[0];\n            var genericParameters = type.GetGenericArguments().Select(GetFriendlyName);\n            return namePrefix + \"\u003c\" + string.Join(\", \", genericParameters) + \"\u003e\";\n        }\n        return type.Name;\n    }\n}\n```\n**Output**\n```\nString               CanConvertTo() == True\nCultureInfo          CanConvertTo() == False\nInt32                CanConvertTo() == True\nNullable\u003cInt32\u003e      CanConvertTo() == False\nDateTime             CanConvertTo() == False\nNullable\u003cDateTime\u003e   CanConvertTo() == False\n```\n\n### Reproduction Steps\n\nSee sample code.\n\n### Expected behavior\n\nSome additional documentation needed? Or should all TypeConverters be capable of converting to/from their own types?\n\n### Actual behavior\n\nInconsistent return values for `CanConvertTo()`.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwUGD8w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6-Bx94",
                                           "createdAt":  "2025-08-14T11:37:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-14T11:37:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BQYPz",
                                           "createdAt":  "2025-09-01T13:04:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ANahr",
                                           "body":  "Most of the built-in TypeConverters only support Conversion From/To String and InstanceDescriptor (Which makes sense as they are primarily intended for serialization/editors etc.).\nBasically only the ones that inherit from BaseNumberConverter also do conversion between other Types and its own type.\nI also fail to see the use-case for \"converting\" into itself (which would just be the original value).",
                                           "updatedAt":  "2025-09-01T13:04:35Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "TypeConverter inconsistencies",
        "labels":  [
                       "area-System.ComponentModel",
                       "needs-further-triage"
                   ]
    }
]
