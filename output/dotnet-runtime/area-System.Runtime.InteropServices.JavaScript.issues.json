[
    {
        "url":  "https://github.com/dotnet/runtime/issues/69836",
        "createdAt":  "2022-05-26T02:11:43Z",
        "number":  69836,
        "author":  "kg",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCewOgw==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "pavelsavara",
                                            "createdAt":  "2022-05-26T07:01:35Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-05-26T07:01:24Z",
        "body":  "We need to overhaul the way we do assertions and error handling in the bindings. Right now we have a mix of manual if-\u003ethrow and the new ```mono_assert``` TS function, along with some parts where C will assert or C# will throw exceptions, and there isn\u0027t a ton of consistency in message formats, etc. It can also be awkward to properly format messages without performance issues.\r\n\r\n@pavelsavara recently wired up a mechanism in the build tooling so that uses of ```mono_assert``` will have the exception message inlined, preventing the normal performance overhead, so that\u0027s a start. There are still some other criteria we want to satisfy with any final design:\r\n\r\n- It should be possible to localize error messages\r\n- Each distinct type of error should have a consistent identifier (ERRnnnn etc) that people can use in web searches\r\n- Error messages should be informative: if an argument is out of range, specify the argument name, etc\r\n- Errors should indicate where they\u0027re coming from and whether the problem is under the user\u0027s direct control - i.e. did I pass bad data into blazor/wasm, or did the heap get corrupted?\r\n- Having plentiful assertions and detailed error messages should not cause performance overhead\r\n\r\nI believe the solution is to define a new ```errors.ts``` file that exports a function for each unique error message, and you invoke the function to throw that error, passing in any relevant values. This puts all the error messages in one place if we decide to localize them later, and it makes it easy to assign them unique identifiers at a glance. The messages having unique identifiers also means that you can search the whole codebase for a given error using that ID instead of merely hoping that every scenario used the same error text.\r\n\r\nI haven\u0027t had a chance to prototype it yet, but it would look something like this:\r\n\r\n```typescript\r\nexport var errors = {\r\n  // ...\r\n  assembly_not_found: (assembly_name) =\u003e throw new Error(`WASM003: Could not find an assembly named \u0027{assembly_name}\u0027.`),\r\n  // ...\r\n};\r\n```\r\n\r\nand then a call site would look like:\r\n```typescript\r\n    const asm = cwraps.mono_wasm_assembly_load(assembly);\r\n    if (!asm)\r\n        errors.assembly_not_found(assembly);\r\n```\r\n\r\nThis approach would also allow us to customize error handling on a per-error basis (for example, updating a specific error to write a log message before throwing).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQ9f8Ew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5D1YrO",
                                           "createdAt":  "2022-05-26T02:11:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe need to overhaul the way we do assertions and error handling in the bindings. Right now we have a mix of manual if-\u003ethrow and the new ```mono_assert``` TS function, along with some parts where C will assert or C# will throw exceptions, and there isn\u0027t a ton of consistency in message formats, etc. It can also be awkward to properly format messages without performance issues.\r\n\r\n@pavelsavara recently wired up a mechanism in the build tooling so that uses of ```mono_assert``` will have the exception message inlined, preventing the normal performance overhead, so that\u0027s a start. There are still some other criteria we want to satisfy with any final design:\r\n\r\n- It should be possible to localize error messages\r\n- Each distinct type of error should have a consistent identifier (ERRnnnn etc) that people can use in web searches\r\n- Error messages should be informative: if an argument is out of range, specify the argument name, etc\r\n- Errors should indicate where they\u0027re coming from and whether the problem is under the user\u0027s direct control - i.e. did I pass bad data into blazor/wasm, or did the heap get corrupted?\r\n- Having plentiful assertions and detailed error messages should not cause performance overhead\r\n\r\nI believe the solution is to define a new ```errors.ts``` file that exports a function for each unique error message, and you invoke the function to throw that error, passing in any relevant values. This puts all the error messages in one place if we decide to localize them later, and it makes it easy to assign them unique identifiers at a glance. The messages having unique identifiers also means that you can search the whole codebase for a given error using that ID instead of merely hoping that every scenario used the same error text.\r\n\r\nI haven\u0027t had a chance to prototype it yet, but it would look something like this:\r\n\r\n```typescript\r\nexport var errors = {\r\n  // ...\r\n  assembly_not_found: (assembly_name) =\u003e throw new Error(`WASM003: Could not find an assembly named \u0027{assembly_name}\u0027.`),\r\n  // ...\r\n};\r\n```\r\n\r\nand then a call site would look like:\r\n```typescript\r\n    const asm = cwraps.mono_wasm_assembly_load(assembly);\r\n    if (!asm)\r\n        errors.assembly_not_found(assembly);\r\n```\r\n\r\nThis approach would also allow us to customize error handling on a per-error basis (for example, updating a specific error to write a log message before throwing).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekg\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`design-discussion`, `arch-wasm`, `area-System.Runtime.InteropServices.JavaScript`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-26T02:11:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5D1_wT",
                                           "createdAt":  "2022-05-26T07:01:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I prefer `mono_assert` form in source code, because it explains it\u0027s unexpected in normal flow. \r\nIt\u0027s also only one line, so it doesn\u0027t distract my reading of normal-flow branching of the method below.\r\n\r\n```\r\n    const asm = cwraps.mono_wasm_assembly_load(assembly);\r\n    mono_assert(asm, () =\u003e errors.assembly_not_found(assembly));\r\n```\r\nThat will need one more inlining regexp.",
                                           "updatedAt":  "2022-05-26T07:01:24Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Wasm bindings need an error handling overhaul",
        "labels":  [
                       "design-discussion",
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/74233",
        "createdAt":  "2022-08-19T11:02:40Z",
        "number":  74233,
        "author":  "yamachu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-KR6A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GerardSmit",
                                            "createdAt":  "2022-09-19T18:23:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rogihee",
                                            "createdAt":  "2022-10-28T05:57:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hojmark",
                                            "createdAt":  "2023-10-04T12:15:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlaJaber97",
                                            "createdAt":  "2025-01-15T11:56:53Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-01-30T03:01:38Z",
        "body":  "### Background and motivation\n\nJSExport Attribute can make .NET static methods accessible to JavaScript side.\r\n\r\nHowever, access to such methods requires the correct namespace, class name, and method name, and may result in access to invalid objects.\r\n\r\nBy outputting d.ts when [generating JavaScript Interop source](https://github.com/dotnet/runtime/tree/main/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator), it is possible to type exported objects, which will improve the development experience.\r\n\n\n### API Proposal\n\ndotnet.d.ts\r\n\r\n```diff\r\ndeclare type APIType = {\r\n    runMain: (mainAssemblyName: string, args: string[]) =\u003e Promise\u003cnumber\u003e;\r\n    runMainAndExit: (mainAssemblyName: string, args: string[]) =\u003e Promise\u003cnumber\u003e;\r\n    setEnvironmentVariable: (name: string, value: string) =\u003e void;\r\n-   getAssemblyExports(assemblyName: string): Promise\u003cany\u003e;\r\n+   getAssemblyExports\u003cT = any\u003e(assemblyName: string): Promise\u003cT\u003e;\r\n```\r\n\r\ndotnet.g.d.ts\r\n\r\n```ts\r\nimport \"@microsoft/dotnet-runtime\";\r\n\r\ndeclare module \"@microsoft/dotnet-runtime\" {\r\n    interface AssemblyExports {\r\n        MyClass: {\r\n            Greeting: () =\u003e void;\r\n        }\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\nmain.mts\r\n\r\n```ts\r\nimport { dotnet, AssemblyExports } from \"@microsoft/dotnet-runtime\";\r\n\r\nconst { getAssemblyExports } = await dotnet\r\n    .withDiagnosticTracing(false)\r\n    .create();\r\n\r\nconst config = getConfig();\r\nconst exports = await getAssemblyExports\u003cAssemblyExports\u003e(config.mainAssemblyName);\r\nconst text = exports.MyClass.Greeting();\r\nconsole.log(text);\r\n```\r\n\r\nwasmconsole.csproj\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet7.0\u003c/TargetFramework\u003e\r\n    \u003cRuntimeIdentifier\u003ebrowser-wasm\u003c/RuntimeIdentifier\u003e\r\n    \u003cWasmMainJSPath\u003emain.mjs\u003c/WasmMainJSPath\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cAllowUnsafeBlocks\u003etrue\u003c/AllowUnsafeBlocks\u003e\r\n    \u003cJSInteropTypeDefinitionOutputDir\u003e./types\u003c/JSInteropTypeDefinitionOutputDir\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cCompilerVisibleProperty Include=\"JSInteropTypeDefinitionOutputDir\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n\r\n```\r\n\n\n### Alternative Designs\n\nPoC: https://github.com/yamachu/NetWebAssemblyTSTypeGenerator\n\n### Risks\n\n- It may not work well in JSDoc\r\n- It will not work if the package.json does not contain a runtime dependency\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnF4UmA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Iv_2j",
                                           "createdAt":  "2022-08-19T11:02:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-08-19T11:02:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IwGxy",
                                           "createdAt":  "2022-08-19T11:35:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nJSExport Attribute can make .NET static methods accessible to JavaScript side.\r\n\r\nHowever, access to such methods requires the correct namespace, class name, and method name, and may result in access to invalid objects.\r\n\r\nBy outputting d.ts when [generating JavaScript Interop source](https://github.com/dotnet/runtime/tree/main/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator), it is possible to type exported objects, which will improve the development experience.\r\n\n\n### API Proposal\n\ndotnet.d.ts\r\n\r\n```diff\r\ndeclare type APIType = {\r\n    runMain: (mainAssemblyName: string, args: string[]) =\u003e Promise\u003cnumber\u003e;\r\n    runMainAndExit: (mainAssemblyName: string, args: string[]) =\u003e Promise\u003cnumber\u003e;\r\n    setEnvironmentVariable: (name: string, value: string) =\u003e void;\r\n-   getAssemblyExports(assemblyName: string): Promise\u003cany\u003e;\r\n+   getAssemblyExports\u003cT = any\u003e(assemblyName: string): Promise\u003cT\u003e;\r\n```\r\n\r\ndotnet.g.d.ts\r\n\r\n```ts\r\nimport \"@microsoft/dotnet-runtime\";\r\n\r\ndeclare module \"@microsoft/dotnet-runtime\" {\r\n    interface AssemblyExports {\r\n        MyClass: {\r\n            Greeting: () =\u003e void;\r\n        }\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\nmain.mts\r\n\r\n```ts\r\nimport { dotnet, AssemblyExports } from \"@microsoft/dotnet-runtime\";\r\n\r\nconst { getAssemblyExports } = await dotnet\r\n    .withDiagnosticTracing(false)\r\n    .create();\r\n\r\nconst config = getConfig();\r\nconst exports = await getAssemblyExports\u003cAssemblyExports\u003e(config.mainAssemblyName);\r\nconst text = exports.MyClass.Greeting();\r\nconsole.log(text);\r\n```\r\n\r\nwasmconsole.csproj\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet7.0\u003c/TargetFramework\u003e\r\n    \u003cRuntimeIdentifier\u003ebrowser-wasm\u003c/RuntimeIdentifier\u003e\r\n    \u003cWasmMainJSPath\u003emain.mjs\u003c/WasmMainJSPath\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cAllowUnsafeBlocks\u003etrue\u003c/AllowUnsafeBlocks\u003e\r\n    \u003cJSInteropTypeDefinitionOutputDir\u003e./types\u003c/JSInteropTypeDefinitionOutputDir\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cCompilerVisibleProperty Include=\"JSInteropTypeDefinitionOutputDir\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n\r\n```\r\n\n\n### Alternative Designs\n\nPoC: https://github.com/yamachu/NetWebAssemblyTSTypeGenerator\n\n### Risks\n\n- It may not work well in JSDoc\r\n- It will not work if the package.json does not contain a runtime dependency\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eyamachu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `arch-wasm`, `area-System.Runtime.InteropServices.JavaScript`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-19T11:35:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IyTUg",
                                           "createdAt":  "2022-08-19T22:47:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD6QFAA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "yamachu",
                                                                               "createdAt":  "2022-08-22T02:19:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "ronnieoverby",
                                                                               "createdAt":  "2024-11-10T23:38:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "I/O in a generator is unsupported, so this needs to wait for https://github.com/dotnet/roslyn/issues/57608 to be doable in a supported fashion.",
                                           "updatedAt":  "2022-08-19T22:47:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5I223E",
                                           "createdAt":  "2022-08-22T13:10:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwXnVA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yamachu",
                                                                               "createdAt":  "2022-11-29T15:14:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Does this usage work as is ?\r\n```ts\r\nconst exports:AssemblyExports = await getAssemblyExports(config.mainAssemblyName);\r\n```\r\n\r\nI\u0027m not sure that the TypeScript definitions generator need to be part of the runtime. \r\nI think that 3rd party generator is a good choice.",
                                           "updatedAt":  "2022-08-22T13:10:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NPP_L",
                                           "createdAt":  "2022-10-29T13:53:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thaina",
                                           "body":  "On the flipside. Are there any way or plan to generate C# wrapper over javascript package from its `d.ts` ?\r\n\r\nSo we could write C# wasm with any existing npm package that provide `d.ts`",
                                           "updatedAt":  "2022-10-29T13:53:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NTiZD",
                                           "createdAt":  "2022-10-31T11:42:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "The JS interop only supports static functions and limited set of marshaled argument types. \r\nIt would not be able to automatically wrap any sufficiently complex `.d.ts`",
                                           "updatedAt":  "2022-10-31T11:42:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PB_TY",
                                           "createdAt":  "2022-11-24T03:49:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thaina",
                                           "body":  "@pavelsavara Isn\u0027t all the type of js can be reference in C# as `JSObject` ?\r\n\r\nAnd then we make a class as a wrapper of `JSObject` and make a property for each of field they have. Given that we also able to convert `Promise` to `Task` I don\u0027t see anything we cannot convert\r\n\r\nCould you please give me an example of what impossible to generate right now?",
                                           "updatedAt":  "2022-11-24T03:50:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PDxMl",
                                           "createdAt":  "2022-11-24T12:31:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Yes, you can generate wrapper class around the JSObject. Let\u0027s say you want to have WebSocket instance and you would generate C# class for it. Which part of the interop pipeline would create the instance of WebSocket C# proxy ?\r\n\r\nNow let\u0027s say that we have TypeScript definition of [WebSocket.send()](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send). You can see that there are multiple types of the `data` parameter. This is not easy to do in strongly typed language. It\u0027s doable when there is somebody who would make design decisions about the type mapping. But I believe it\u0027s not practical to do it in automated generator. Especially when there are more than one dynamically typed parameter, it leads to exponential number of strongly typed method signatures.\r\n\r\nEven if somebody would really want to try to do it, I still think that it\u0027s not something we need to do in the runtime repo. \r\nIt could be 3rd party generator, nuget. Ideally FOSS.",
                                           "updatedAt":  "2022-11-24T12:31:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PEjKf",
                                           "createdAt":  "2022-11-24T15:26:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thaina",
                                           "body":  "@pavelsavara I kind of thinking that this feature should be native to wasm and/or blazor build system. And it was not ideal that we could not decouple wasm and blazor from runtime repo\r\n\r\nIt would be very convenient for dotnet wasm compiler to able to import existing package in npm into C# so we could utilize every critical 3rd party package in the web world that will only written as npm package",
                                           "updatedAt":  "2022-11-24T15:26:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PEkN0",
                                           "createdAt":  "2022-11-24T15:30:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thaina",
                                           "body":  "Also while it would impractical for general type in JavaScript. I think we could scope the possibility into only class that have `d.ts` file or jsdoc. Then just handwaving any ambiguous type as `JSObject`",
                                           "updatedAt":  "2022-11-24T15:30:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PG8Ni",
                                           "createdAt":  "2022-11-25T09:40:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thaina",
                                           "body":  "@pavelsavara Should I made separate issue about codegen for C# side or would you consider this feature as the same interoperability system between `cs` and `d.ts` ?",
                                           "updatedAt":  "2022-11-25T09:40:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PHAEC",
                                           "createdAt":  "2022-11-25T09:47:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwL_ng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Thaina",
                                                                               "createdAt":  "2022-11-25T09:48:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Let\u0027s keep the discussion in single place for now.",
                                           "updatedAt":  "2022-11-25T09:47:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PIr8e",
                                           "createdAt":  "2022-11-25T16:26:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwOFmg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Thaina",
                                                                               "createdAt":  "2022-11-26T01:56:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Perhaps making `JSObject` to implement `dynamic` would solve some of the pains. \r\nIt will be slow, with ugly corner cases, but it will lower the barrier.\r\nhttps://github.com/dotnet/runtime/pull/78853",
                                           "updatedAt":  "2022-11-25T16:26:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PJxM_",
                                           "createdAt":  "2022-11-26T02:12:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thaina",
                                           "body":  "It definitely decrease barrier but being `dynamic` still could not give us intelligence",
                                           "updatedAt":  "2022-11-26T02:12:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PS6qx",
                                           "createdAt":  "2022-11-29T09:48:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e I/O in a generator is unsupported, so this needs to wait for [dotnet/roslyn#57608](https://github.com/dotnet/roslyn/issues/57608) to be doable in a supported fashion.\r\n\r\nIs there strong reason why we could not go with the hack described at the top of [dotnet/roslyn#57608](https://github.com/dotnet/roslyn/issues/57608)  until they fix it ? That is for generating `.d.ts`\r\n",
                                           "updatedAt":  "2022-11-29T09:48:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PS8VX",
                                           "createdAt":  "2022-11-29T09:54:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "On topic of generating C# from .d.ts, I assume we are not going to implement TypeScript parser in C# in order to be able to plug it into the Roslyn process, right ? That said, I see one benefit of triggering the C# code gen in Roslyn via attribute. The ability to discover it in the code. What are the other benefits of Roslyn generator based on external metadata ?\r\n\r\nAlternatively I could imagine pre-Build MSBuild target which would run generator based on `tsc` and `nodejs`. When the `wasm-tools` workload is installed, we have NodeJS and adding typescript and generator package should be easy. \r\nThe generator could be written on top of `tcs`\u0027s AST.\r\n\r\nAny other ideas how this could be implemented ?\r\n",
                                           "updatedAt":  "2022-11-29T09:54:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PTJ1C",
                                           "createdAt":  "2022-11-29T10:35:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thaina",
                                           "body":  "I expect that we could just run TS language server in the project, make it like TS/JS normal project. Then communicate with it by some means, the generator will act like another IDE to glean the shallow namespace and class we can import from typescript\r\n\r\nThen when we `using` the namespace, the generator then generate the C# wrapper for each type we can access\r\n\r\nBut that might be later. For the start we might just use `tsc` and generate everything in the package we import",
                                           "updatedAt":  "2022-11-29T10:36:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PUmws",
                                           "createdAt":  "2022-11-29T15:11:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e I expect that we could just run TS language server in the project, make it like TS/JS normal project. Then communicate with it by some means, the generator will act like another IDE to glean the shallow namespace and class we can import from typescript\r\n\r\n\"normal js project\" could be NextJS, ReactApp, Angular, webpack, just plain TS and anything in between. \r\nBesides it\u0027s is not really friends with MSBuild or Visual Studio. We need very narrow scope of tooling effort to make this fly.\r\n\r\n\u003e For the start we might just use `tsc` and generate everything in the package we import\r\n\r\nAre you planning to start working on it @Thaina ? What kind of support do you need ?",
                                           "updatedAt":  "2022-11-29T15:11:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PUv2w",
                                           "createdAt":  "2022-11-29T15:36:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD6QFSA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ronnieoverby",
                                                                               "createdAt":  "2024-11-10T23:40:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Thaina",
                                           "body":  "\u003e \u003e I expect that we could just run TS language server in the project, make it like TS/JS normal project. Then communicate with it by some means, the generator will act like another IDE to glean the shallow namespace and class we can import from typescript\r\n\u003e \r\n\u003e \"normal js project\" could be NextJS, ReactApp, Angular, webpack, just plain TS and anything in between. Besides it\u0027s is not really friends with MSBuild or Visual Studio. We need very narrow scope of tooling effort to make this fly.\r\n\r\nIf possible I think in the end this system would be general ts-\u003ecs generator that don\u0027t really care about framework. The use case is just that, it let us access class, property, and function available in typescript definition, and the framework specific feature might be skipped if it not really in the possible pattern of C#\r\n\r\nBut for the start I think we might focus on pure wasm project that just written in raw html and include javascript, the one that generated from `dotnet new wasm` command. And another main focus might be Blazor\r\n\r\nIMO the one thing that would `make this fly` would be that, this system let us install npm package, then C# will be able to use it. NPM packages would be most likely framework agnostic. My priority would be that, bring a crucial 3rd party library like firebase into C# wasm so we can write C# webapp that connect to firebase\r\n\r\n\u003e \u003e For the start we might just use `tsc` and generate everything in the package we import\r\n\u003e \r\n\u003e Are you planning to start working on it @Thaina ? What kind of support do you need ?\r\n\r\nI have start investigate the language server\u0027s client capability, I try to find the easiest way to have C# communicate with TS. But for now I want solid plan and clear goal of this feature first, so I don\u0027t waste my time race against what other would do. And I would like to wait for complete wrapper of `JSObject` first, because if I would write generator I would like to write the wrapper class over that class, which is far more easy and have clearer pattern than writing direct wrapper with current pattern",
                                           "updatedAt":  "2022-11-29T15:38:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PVHer",
                                           "createdAt":  "2022-11-29T16:39:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwYNoQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2022-11-29T17:10:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "\u003e \u003e I/O in a generator is unsupported, so this needs to wait for [dotnet/roslyn#57608](https://github.com/dotnet/roslyn/issues/57608) to be doable in a supported fashion.\r\n\u003e \r\n\u003e Is there strong reason why we could not go with the hack described at the top of [dotnet/roslyn#57608](https://github.com/dotnet/roslyn/issues/57608) until they fix it ? That is for generating `.d.ts`\r\n\r\n@pavelsavara The hack can fail at any time and might not regenerate the file when you expect. I personally see the workaround for use in a \"we need this for a high-priority business need\", not a nice-to-have feature, especially since if it behaves weirdly, we\u0027ll get bugs about the behavior filed and we won\u0027t be able to fix them as we\u0027re actively doing something the compiler team has told us not to do.",
                                           "updatedAt":  "2022-11-29T16:39:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cXhSY",
                                           "createdAt":  "2025-01-30T03:00:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEuqqw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2025-01-30T11:49:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "maraf",
                                                                               "createdAt":  "2025-01-31T10:34:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ScottNorton",
                                           "body":  "I made a really terrible tool, but it parses C# script to carry comments and exports to a ```dotnetEx.d.ts```. Perhaps it could lend itself to creativity? It was a tool I decided I wanted badly, so 🤷‍♂️\nhttps://github.com/ScottNorton/tsgen\nExample output:\n```\n/** Automatically generated for C# JSExport decorated members. */\nexport module dotnetEx {\n\texport interface VoxelML {\n\t\tEngine: {\n\t\t\tUpdateEngineTime(timeInMs: bigint): void;\n\t\t\tInitialize(): Promise\u003cvoid\u003e;\n\t\t};\n\t\tChatConsole: {\n\t\t\tParseInput(input: string): any;\n\t\t};\n\t\tBinary: {\n\t\t\t\n\t\t/**\n\t\t * \n\t\t * Unpacks binary data to a typed structure.\n\t\t * \n\t\t * @param data Expects structured data, a type must be in the 4 byte header.\n\t\t * @returns true if successfully unpacked to a managed type\n\t\t */\n\t\t\tUnpack(data: any): boolean;\n\t\t};\n\t}\n\n\tconst VoxelML: VoxelML;\n}\n\nexport type dotnetExports = typeof dotnetEx;\n",
                                           "updatedAt":  "2025-01-30T03:01:38Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "[API Proposal]: Generate d.ts file from JSExport attributes",
        "labels":  [
                       "api-suggestion",
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/74815",
        "createdAt":  "2022-08-30T14:28:19Z",
        "number":  74815,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2ew1Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "onionhammer",
                                            "createdAt":  "2024-03-12T20:17:03Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-03-20T11:41:57Z",
        "body":  "Similar to what Blazor does or with file hash in `mono-config.json` applied as query string.\r\n\r\nAlso cache busting for `JSHost.ImportAsync`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOo1M_xg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Javzz",
                                           "createdAt":  "2022-08-30T14:28:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSimilar to what Blazor does or with file hash in `mono-config.json` applied as query string.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Runtime.InteropServices.JavaScript`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-30T14:28:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ackGD",
                                           "createdAt":  "2023-04-21T08:03:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "Fingerprinting is handled by the static web assets. We should probably add modules for `JSHost.ImportAsync` into boot config and pick fingerprinted URL from there",
                                           "updatedAt":  "2023-04-21T08:03:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5adSIR",
                                           "createdAt":  "2023-04-21T10:33:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "JSHost.ImportAsync could be any URL, not just current project. \r\nIt could be some 3rd party CDN.\r\n\r\nUsers could already add `?guid=cb2a5dff-1f74-4d35-b8cf-c6327b2f45b1` or `?etag=whatever-xxx1`. \r\nBut that doesn\u0027t check integrity. I think that is the missing bit there.\r\nCould `\u003cscript type=\"importmap\"\u003e` help somehow ?",
                                           "updatedAt":  "2023-04-21T10:33:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5adpJi",
                                           "createdAt":  "2023-04-21T12:04:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "\u003e JSHost.ImportAsync could be any URL, not just current project.\r\n\u003e It could be some 3rd party CDN.\r\n\r\nDoes it block us from using it through boot config? Just omit the fingerprinting of course, but it could be the place to provide integrity.",
                                           "updatedAt":  "2023-04-21T12:04:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ad96b",
                                           "createdAt":  "2023-04-21T13:02:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "If there was such section in boot config, how would the hashes get there. We are not going to download from CDN in order to calculate the hash, right ? Should we have MSbuild item for adding records there and let user to drive it ?\r\n\r\nThe `JSHost.ImportAsync` is just dynamic JS `import()`. That doesn\u0027t have integrity. Unless we are willing to inject prefetch tags into DOM.\r\nFor cache busting we could append the query string on our own.\r\n\r\nBut I feel this may be overstepping our responsibilities ?",
                                           "updatedAt":  "2023-04-21T13:02:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aeIgK",
                                           "createdAt":  "2023-04-21T13:37:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "That dynamic import doesn\u0027t support integrity is good point. My though was that it would be user job to fill msbuild item with integrity.\n\nFor CDNs I think it\u0027s their job to provide good caching story and I would let user to do it manually if needed (appending query string).\n\nFor local scripts, SWA will put fingerprint into assets with name like `file.[fingerprint].js` and I would use boot config to load such fingerprinted modules.",
                                           "updatedAt":  "2023-04-21T13:38:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hYLLG",
                                           "createdAt":  "2023-07-13T07:38:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "Moving to .NET 9 as the underlaying issue has moved https://github.com/dotnet/aspnetcore/issues/47000",
                                           "updatedAt":  "2023-07-13T07:38:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jJepu",
                                           "createdAt":  "2025-03-19T15:54:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "The way to go is to allow users to identify which of their scripts should have fingerprint and put those to importmap. At the moment users can define items `\u003cStaticWebAssetFingerprintPattern Include=\"JSModule\" Pattern=\"*.mjs\" Expression=\"#[.{fingerprint}]!\" /\u003e` to add a hard fingerprint for all `.mjs` files in their code base. Those files will be put to importmap (hosted + standalone with opt-in). When resolving the import inside of JSInterop, the importmap will be used by the browser resolve to a fingerprinted file.\n\nThe remining question is whether the current gesture to opt-in for files to be fingerprinted is flexible enough.",
                                           "updatedAt":  "2025-03-20T09:46:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jUz_G",
                                           "createdAt":  "2025-03-20T11:41:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKtc1A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maraf",
                                                                               "createdAt":  "2025-03-20T12:08:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "javiercn",
                                           "body":  "@maraf Yep. \n\nFor things that are in your project, that\u0027s correct. For things in a CDN, it\u0027s not our job to do that. The fingerprinting should always be in the path, which is the only thing that guarantees it\u0027s respected.",
                                           "updatedAt":  "2025-03-20T11:41:55Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "[wasm] implement browser cache busting for `JSHost.ImportAsync`",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76710",
        "createdAt":  "2022-10-06T09:48:38Z",
        "number":  76710,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-04T14:01:20Z",
        "body":  "`mono_wasm_trace_logger` and `mono_wasm_stringify_as_error_with_stack`  don\u0027t work well together on FF\r\n\r\nExpected (like in Chrome):\r\n![image](https://user-images.githubusercontent.com/271576/194281730-1a1e2355-ba0e-471a-8d54-c0eb4aa30fa0.png)\r\n\r\nActual (in FF)\r\n![image](https://user-images.githubusercontent.com/271576/194281874-b03d2872-0c16-4f2f-8a66-8da4b1d5a3d0.png)\r\n\r\ncc @radical ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOS641ug==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5LrjW6",
                                           "createdAt":  "2022-10-06T09:48:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n`mono_wasm_trace_logger` and `mono_wasm_stringify_as_error_with_stack`  don\u0027t work well together on FF\r\n\r\nExpected (like in Chrome):\r\n![image](https://user-images.githubusercontent.com/271576/194281730-1a1e2355-ba0e-471a-8d54-c0eb4aa30fa0.png)\r\n\r\nActual (in FF)\r\n![image](https://user-images.githubusercontent.com/271576/194281874-b03d2872-0c16-4f2f-8a66-8da4b1d5a3d0.png)\r\n\r\ncc @radical \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Runtime.InteropServices.JavaScript`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-06T09:48:46Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[wasm] mono_wasm_trace_logger doesn\u0027t display message in FireFox console",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77784",
        "createdAt":  "2022-11-02T14:12:41Z",
        "number":  77784,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODFUJfw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pavelsavara",
                                            "createdAt":  "2022-11-02T14:24:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JakeYallop",
                                            "createdAt":  "2022-11-02T16:20:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iXyles",
                                            "createdAt":  "2023-07-21T14:55:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maxkatz6",
                                            "createdAt":  "2023-08-27T06:32:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nulldg",
                                            "createdAt":  "2023-09-25T07:44:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FabriceAv",
                                            "createdAt":  "2024-04-23T18:41:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bricelam",
                                            "createdAt":  "2024-10-09T17:03:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "henry701",
                                            "createdAt":  "2025-05-11T20:04:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "qwertie",
                                            "createdAt":  "2025-06-17T00:41:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2025-07-01T15:00:07Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2025-02-05T10:58:32Z",
        "body":  "consider some code like this:\r\n\r\n```csharp\r\npublic record Todo(int id, int userId, string title, bool completed);\r\n\r\npublic class SampleApp {\r\n  public static async Task\u003cTodo[]\u003e GetTodos() { ... }\r\n}\r\n```\r\n\r\nRight now to make use of something like that from JavaScript, we have to write some boilerplate:\r\n\r\n```csharp\r\npublic class SampleApp {\r\n  [JSExport]\r\n  public static Task\u003cstring\u003e GetTodosExportWrapper() =\u003e JsonSerializer.SerializeAsync (await GetTodos());\r\n}\r\n```\r\n\r\n```js\r\n   // in main.js\r\n   const exports = await getAssemblyExports(...);\r\n   const json = JSON.parse (await exports.SampleApp.GetTodosExportWrapper());\r\n```\r\n\r\nIt would be nice if we had a convenience marshaler for moving Json blobs around:\r\n\r\n```csharp\r\n  [JSExport]\r\n  [return:JSMarshalAs\u003cJSType.Promise\u003cJSType.Json\u003e\u003e]\r\n  public static Task\u003cTodo[]\u003e GetTodos() { ... }\r\n```\r\n\r\n```js\r\n  // in main.js\r\n  const exports = await getAssemblyExports(...);\r\n  const json = await exports.SampleApp.GetTodos ();\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTfufJA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Ng_HN",
                                           "createdAt":  "2022-11-02T14:12:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-json, @gregsdennis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nconsider some code like this:\r\n\r\n```csharp\r\npublic record Todo(int id, int userId, string title, bool completed);\r\n\r\npublic static async Task\u003cTodo[]\u003e GetTodos() { ... }\r\n```\r\n\r\nRight now to make use of something like that from JavaScript, we have to write some boilerplate:\r\n\r\n```csharp\r\npublic class SampleApp {\r\n  [JSExport]\r\n  public static Task\u003cstring\u003e GetTodosExportWrapper() =\u003e JsonSerializer.SerializeAsync (await GetTodos());\r\n}\r\n```\r\n\r\n```js\r\n   // in main.js\r\n   const exports = await getAssemblyExports(...);\r\n   const json = JSON.parse (await exports.SampleApp.GetTodosExportWrapper());\r\n```\r\n\r\nIt would be nice if we had a convenience marshaler for moving Json blobs around:\r\n\r\n```csharp\r\n  [JSExport]\r\n  [return:JSMarshalAs\u003cJSType.Promise\u003cJSType.Json\u003e\u003e]\r\n  public static Task\u003cTodo[]\u003e GetTodos() { ... }\r\n```\r\n\r\n```js\r\n  // in main.js\r\n  const exports = await getAssemblyExports(...);\r\n  const json = await exports.SampleApp.GetTodos ();\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elambdageek\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Json`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-02T14:12:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ng_0j",
                                           "createdAt":  "2022-11-02T14:14:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "/cc @pavelsavara",
                                           "updatedAt":  "2022-11-02T14:14:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Nhtey",
                                           "createdAt":  "2022-11-02T15:29:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nconsider some code like this:\r\n\r\n```csharp\r\npublic record Todo(int id, int userId, string title, bool completed);\r\n\r\npublic class SampleApp {\r\n  public static async Task\u003cTodo[]\u003e GetTodos() { ... }\r\n}\r\n```\r\n\r\nRight now to make use of something like that from JavaScript, we have to write some boilerplate:\r\n\r\n```csharp\r\npublic class SampleApp {\r\n  [JSExport]\r\n  public static Task\u003cstring\u003e GetTodosExportWrapper() =\u003e JsonSerializer.SerializeAsync (await GetTodos());\r\n}\r\n```\r\n\r\n```js\r\n   // in main.js\r\n   const exports = await getAssemblyExports(...);\r\n   const json = JSON.parse (await exports.SampleApp.GetTodosExportWrapper());\r\n```\r\n\r\nIt would be nice if we had a convenience marshaler for moving Json blobs around:\r\n\r\n```csharp\r\n  [JSExport]\r\n  [return:JSMarshalAs\u003cJSType.Promise\u003cJSType.Json\u003e\u003e]\r\n  public static Task\u003cTodo[]\u003e GetTodos() { ... }\r\n```\r\n\r\n```js\r\n  // in main.js\r\n  const exports = await getAssemblyExports(...);\r\n  const json = await exports.SampleApp.GetTodos ();\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elambdageek\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `arch-wasm`, `area-System.Runtime.InteropServices.JavaScript`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-02T15:29:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NjEQ2",
                                           "createdAt":  "2022-11-02T18:15:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregsdennis",
                                           "body":  "Why not use STJ?  Maybe I don\u0027t understand the use case.",
                                           "updatedAt":  "2022-11-02T18:15:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Nq345",
                                           "createdAt":  "2022-11-04T07:52:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCvRnfg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2022-11-09T07:34:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "FranklinWhale",
                                           "body":  "Not sure how this will work with `\u003cRunAOTCompilation\u003etrue\u003c/RunAOTCompilation\u003e`. Currently, to make AOT work, I have to create a `JsonSerializerContext`. Otherwise, the following warning appears:\r\n\r\nUsing member `System.Text.Json.JsonSerializer.Serialize\u003cTValue\u003e(TValue, JsonSerializerOptions)` which has `RequiresUnreferencedCodeAttribute` can break functionality when trimming application code. JSON serialization and deserialization might require types that cannot be statically analyzed. Use the overload that takes a `JsonTypeInfo` or `JsonSerializerContext`, or make sure all of the required types are preserved.",
                                           "updatedAt":  "2022-11-04T07:52:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N-58k",
                                           "createdAt":  "2022-11-09T07:37:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Yes, we already have json trimming issue on Blazor https://github.com/dotnet/aspnetcore/issues/39839\r\n\r\nSince we have code generator here, we could generate \r\n```cs\r\n[JsonSerializable(typeof(List\u003cItem\u003e))]\r\nprivate partial class ItemListSerializerContext : JsonSerializerContext { }\r\n```",
                                           "updatedAt":  "2022-11-09T07:37:45Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "JSInterop: Consider JSType.Json for conveniently marshaling data",
        "labels":  [
                       "api-suggestion",
                       "arch-wasm",
                       "feature-request",
                       "area-System.Runtime.InteropServices.JavaScript"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78455",
        "createdAt":  "2022-11-16T11:06:38Z",
        "number":  78455,
        "author":  "yugabe",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCz7sYg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SerratedSharp",
                                            "createdAt":  "2023-11-12T05:53:04Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-04-23T02:24:48Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI\u0027m trying to invoke a .NET method via JS interop that passes an array of JavaScript objects back.\r\n\r\n```csharp\r\n[JSImport(\"myFunction\", \"myModule\")]\r\npublic static partial void MyFunction(Action\u003cJSObject[]\u003e callback);\r\n```\r\n\r\nThe above declaration gives a compilation error from the generator specifically for the `callback` symbol: `SYSLIB1072: The type \u0027System.Action\u003cSystem.Runtime.InteropServices.JavaScript.JSObject[]\u003e\u0027 is not supported by source-generated JavaScript interop. The generated source will not handle marshalling of parameter \u0027callback\u0027.`\r\n\r\nI tried variations of `[JSMarshalAs\u003cT\u003e]` attributes on the parameter, but the error seems to indicate this type is not supported by design (other parameters, such as `Action\u003cJSObject\u003e` ask for the parameter to be annotated).\r\n\r\nThe related [documentation page](https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/import-export-interop?view=aspnetcore-7.0) seems to imply a callback that supplies a JavaScript object array should be supported (the below images are edited for clarity):\r\n\r\n\u003e ![image](https://user-images.githubusercontent.com/14803737/202159720-975cd168-74a9-4bcb-bb46-00dbf51a4f59.png)\r\n\u003e \r\n\u003e ![image](https://user-images.githubusercontent.com/14803737/202158777-30d3a54e-aab3-46c9-8c12-a12e52b39ee7.png)\r\n\r\nThe object on the JavaScript side is not straightforward or viable to manually serialize (it contains DOM objects and circular references). I can transform the object on the JavaScript side, but doing so would *still result in an array of objects*, which are not marshalled as per the issue described above.\n\n### Describe the solution you\u0027d like\n\nSeeing as how arrays of objects are already supported (as parameters and return values), this is possibly just a missed use case which should be supported. Currently the workaround is to manually call back from JavaScript to .NET without passing the callback directly to the generated interop method, which is insufficient for code organization.\r\n\r\nThe problem in itself obviously exists because there is no straightforward way to interact with the DOM without custom user code. An alternative (arguably better) solution would be if there was a way to directly interact with the DOM from `browser-wasm` .NET apps (like Blazor). The Blazor-included JavaScript interop supports special `ElementReference` objects that can hold reference to DOM objects either instantiated in Blazor or outside of it, which makes this problem a bit easier to solve with the (slower) alternative interop solution. As the current implementation can use proxy objects, it might be worth considering using proxy objects that support more scenarios (like calling methods on them directly), and JavaScript event handling.\n\n### Additional context\n\n1. I haven\u0027t tried if marshalling as `JSType.Function\u003cJSType.Any\u003e` would work if I used `Action\u003cobject\u003e` as a parameter.\r\n\r\n2. It\u0027s also a bit confusing to annotate `Action` and `Func` types with the `JSType.Function` parameters, because I\u0027m not sure if the type parameters should always match (especially when a function returns JavaScript `void` - `JSType.Void`), but this is most probably a documentation issue instead.\r\n\r\n3. It would also be worth clarifying why some parameters need to be explicitly annotated, like `Action`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOe3VmqQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5OfXER",
                                           "createdAt":  "2022-11-16T11:27:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-11-16T11:27:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OfcHe",
                                           "createdAt":  "2022-11-16T11:41:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yugabe",
                                           "body":  "I hope @pavelsavara won\u0027t mind me pinging. ",
                                           "updatedAt":  "2022-11-16T11:41:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ofj9J",
                                           "createdAt":  "2022-11-16T12:02:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI\u0027m trying to invoke a .NET method via JS interop that passes an array of JavaScript objects back.\r\n\r\n```csharp\r\n[JSImport(\"myFunction\", \"myModule\")]\r\npublic static partial void MyFunction(Action\u003cJSObject[]\u003e callback);\r\n```\r\n\r\nThe above declaration gives a compilation error from the generator specifically for the `callback` symbol: `SYSLIB1072: The type \u0027System.Action\u003cSystem.Runtime.InteropServices.JavaScript.JSObject[]\u003e\u0027 is not supported by source-generated JavaScript interop. The generated source will not handle marshalling of parameter \u0027callback\u0027.`\r\n\r\nI tried variations of `[JSMarshalAs\u003cT\u003e]` attributes on the parameter, but the error seems to indicate this type is not supported by design (other parameters, such as `Action\u003cJSObject\u003e` ask for the parameter to be annotated).\r\n\r\nThe related [documentation page](https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/import-export-interop?view=aspnetcore-7.0) seems to imply a callback that supplies a JavaScript object array should be supported (the below images are edited for clarity):\r\n\r\n\u003e ![image](https://user-images.githubusercontent.com/14803737/202159720-975cd168-74a9-4bcb-bb46-00dbf51a4f59.png)\r\n\u003e \r\n\u003e ![image](https://user-images.githubusercontent.com/14803737/202158777-30d3a54e-aab3-46c9-8c12-a12e52b39ee7.png)\r\n\r\nThe object on the JavaScript side is not straightforward or viable to manually serialize (it contains DOM objects and circular references). I can transform the object on the JavaScript side, but doing so would *still result in an array of objects*, which are not marshalled as per the issue described above.\n\n### Describe the solution you\u0027d like\n\nSeeing as how arrays of objects are already supported (as parameters and return values), this is possibly just a missed use case which should be supported. Currently the workaround is to manually call back from JavaScript to .NET without passing the callback directly to the generated interop method, which is insufficient for code organization.\r\n\r\nThe problem in itself obviously exists because there is no straightforward way to interact with the DOM without custom user code. An alternative (arguably better) solution would be if there was a way to directly interact with the DOM from `browser-wasm` .NET apps (like Blazor). The Blazor-included JavaScript interop supports special `ElementReference` objects that can hold reference to DOM objects either instantiated in Blazor or outside of it, which makes this problem a bit easier to solve with the (slower) alternative interop solution. As the current implementation can use proxy objects, it might be worth considering using proxy objects that support more scenarios (like calling methods on them directly), and JavaScript event handling.\n\n### Additional context\n\n1. I haven\u0027t tried if marshalling as `JSType.Function\u003cJSType.Any\u003e` would work if I used `Action\u003cobject\u003e` as a parameter.\r\n\r\n2. It\u0027s also a bit confusing to annotate `Action` and `Func` types with the `JSType.Function` parameters, because I\u0027m not sure if the type parameters should always match (especially when a function returns JavaScript `void` - `JSType.Void`), but this is most probably a documentation issue instead.\r\n\r\n3. It would also be worth clarifying why some parameters need to be explicitly annotated, like `Action`.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eyugabe\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `untriaged`, `area-System.Runtime.InteropServices.JavaScript`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-16T12:02:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OfoBA",
                                           "createdAt":  "2022-11-16T12:12:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Thanks for the feature request.\r\n\r\nAnswering the questions:\r\n1) That should work I think. Also `JSObject` proxy could be used to proxy for JS array. That is if you don\u0027t need to access the items on C# side.\r\n2) on JS side, there is no difference between void and non-void function.\r\n3) In the complex scenarios the developer intention is expressed and captured for better future compatibility. Since this is new API, we may want to change the default marshaling and that would be breaking change. So we rather enforce explicit expectation. We may be able to relax some if it in the future, but not the other way around.",
                                           "updatedAt":  "2022-11-16T12:12:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OfwWG",
                                           "createdAt":  "2022-11-16T12:32:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yugabe",
                                           "body":  "Thanks for the response and the answers! I see very much potential in the new API, seeing as how I personally saw orders of magnitudes of performance wins in some cases. Getting to and back from the DOM is cumbersome, I hope it will become easier with future improvements.\r\n\r\nSome reactions to the answers:\r\n1. Yeah, I could use the JSObject, but I could only iterate the properties; not the array indexes, as you say. Although, it just occurred to me that *might* work to use the indexes as a string, seeing as how `[\"a\", \"b\", \"c\"][\"1\"]` actually does return `b` as the  item at index 1. It feels hacky though.\r\n\r\n2. The problem isn\u0027t really on the JS side in this case. It\u0027s how the return value is not explicitly described. An `Action\u003cstring\u003e` and a `Func\u003cstring\u003e` both map to `JSType.Function\u003cJSType.String\u003e`? It would be clearer and more explicit if an `Action` was `JSType.Function\u003cJSType.Void\u003e`, so essentially the first parameter if the `Function` was always `TResult`. Now it\u0027s confusing if both map to the same, when in reality one takes a parameter, and the other returns a value and takes none.\r\n\r\n3. I was feeling something like this was the reason and I accept it. It was unclear from the documentation why this was needed (it states `JSMarshalAs` is optional). Could you give an example of what an alternative way to marshal an `Action` would be? With `Func` and `Action` with type arguments, I understand needing to be explicit, but seeing as how `string`\u0027s marshaling is implied, maybe `Action` could be too (if there really is no other way to marshal a callback than as a function proxy).",
                                           "updatedAt":  "2022-11-16T12:32:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OgHGW",
                                           "createdAt":  "2022-11-16T13:39:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCvsd0g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yugabe",
                                                                               "createdAt":  "2022-11-16T14:51:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e     the first parameter if the `Function` was always `TResult`. \r\n\r\nIt maps 1:1 to generic parameters on C# side.\r\n\r\n\u003e     Could you give an example of what an alternative way to marshal an `Action` would be? \r\n\r\nI don\u0027t know yet. Maybe different GC semantics, maybe different type produced on JS side, maybe different implementation of the wrappers.\r\n\r\n\u003e implied, maybe `Action` could be too\r\n\r\nTechnically yes, we have all the type information from the C# signature, if there is no alternative marshaling for it.\r\n\r\n",
                                           "updatedAt":  "2022-11-16T13:39:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Po4Ah",
                                           "createdAt":  "2022-12-03T08:41:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoangdovan",
                                           "body":  "Hello @yugabe,\r\nDo you have any work around for this problem? \r\nI have similar situation and got trouble with this new API. MS deprecated InvokeUnmarshalled() but new API still cannot replaced for the old method in some case.\r\nAnd do you have any guide how to working with JSObject? I searched for this but cannot see any useful info!\r\nThanks!\r\n",
                                           "updatedAt":  "2022-12-03T08:41:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pp6Hh",
                                           "createdAt":  "2022-12-04T11:23:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yugabe",
                                           "body":  "Hi @hoangdovan, I haven\u0027t taken a deeper look at it, but generating the API by using `JSType.Any` and then casting it to the appropriate array type should work, but I haven\u0027t tested it myself.\r\n\r\nYou can always do it by not directly passing a callback, but actually calling a different .NET-published `JSExport`ed method from the client side. It\u0027s not too elegant, but it should work.\r\n\r\n`JSObject`, as far as I can tell, isn\u0027t really anything special. It\u0027s a proxy object you can use to get the properties of the object in JavaScript (you can even use GetPropertyAs*(\"0\") to get the first element in an array, for example). I don\u0027t think it\u0027s well documented, but I assume the method calls are interop boundaries, so communication happens when you call the method. You can pass these objects to, or recieve them as return values from methods annotated with `JSImport`/`JSExport`. I think you should open an issue if you have a specific problem, even if it\u0027s with the documentation. You can go to the bottom of the docs page in question and it\u0027ll help you in opening an issue in the relevant repo.",
                                           "updatedAt":  "2022-12-04T11:23:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PsY9Y",
                                           "createdAt":  "2022-12-05T09:41:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoangdovan",
                                           "body":  "Hi @yugabe , maybe I will try to request for add new feature to support more for this API. Thank you for your information!",
                                           "updatedAt":  "2022-12-05T09:41:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5T8OMl",
                                           "createdAt":  "2023-01-30T09:48:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SeanCapes",
                                           "body":  "Following on from this, what\u0027s the recommended approach to pass and use arrays in C# from JavaScript? As mentioned above, huge overhead on marshalling performance using JSON. We\u0027re also considering MemoryView, but have just started looking at that. Ideal would be the ability to use the JSObject directly. We\u0027re trying to pass and use a multi-dimensional to then create a Dictionary equivalent. \r\nAny advice greatly appreciated. Thanks ",
                                           "updatedAt":  "2023-01-30T09:48:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5T8Urn",
                                           "createdAt":  "2023-01-30T10:04:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e Following on from this, what\u0027s the recommended approach to pass and use arrays in C# from JavaScript? \r\n\r\nIt really depends on arrays of what. There is table with supported combinations here\r\nhttps://learn.microsoft.com/aspnet/core/client-side/dotnet-interop\r\n\r\n\u003e As mentioned above, huge overhead on marshalling performance using JSON. \r\n\r\nThere is request to add convinience wrapper for that, but it would have roughly the same perf as what you could do already with string marshaling. https://github.com/dotnet/runtime/issues/77784\r\n\r\n\u003e Ideal would be the ability to use the JSObject directly. \r\n\r\nThere is another proposal for that https://github.com/dotnet/runtime/issues/78905\r\nNote that there would be interop call (not very cheap) for each get or set operation when this is implemented.\r\n\r\nSome of it is already possible with the current `JSObject` API\r\n\r\n\u003e We\u0027re trying to pass and use a multi-dimensional to then create a Dictionary equivalent. Any advice greatly appreciated. Thanks\r\n\r\nPassing array of keys and array of values and then recombining them on the other side worked well for me.\r\n\r\n\r\n",
                                           "updatedAt":  "2023-01-30T10:08:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5T8YJJ",
                                           "createdAt":  "2023-01-30T10:12:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SeanCapes",
                                           "body":  "Thanks @pavelsavara, we\u0027ll try that. Assume overhead of marshalling arrays of strings due to lack of support in WebAssembly?",
                                           "updatedAt":  "2023-01-30T10:12:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5T8dsR",
                                           "createdAt":  "2023-01-30T10:24:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e Thanks @pavelsavara, we\u0027ll try that. Assume overhead of marshalling arrays of strings due to lack of support in WebAssembly?\r\n\r\nMy comment about perf is to differentiate costs of interop calls vs usual C# to C# calls expectations. Unless you do very large colections or run interop calls in a tight loop, the perf is usually OK.\r\n\r\nEven if WASM had native string, we would need .NET string data structure in wasm memory.\r\nSo, we are marshaling underlying UCS2 bytes when we marshal (non-interned) strings. Allocation and char-by-char copy. \r\nThe array is copy (by value) in this case. So allocation and subsequent GC.\r\n\r\n(In context of this issue, I speak about JSImport interop, not default Blazor interop which could also have network transport costs on top of it in hybrid mode)",
                                           "updatedAt":  "2023-01-30T10:24:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UCnl2",
                                           "createdAt":  "2023-01-31T08:45:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SeanCapes",
                                           "body":  "@pavelsavara Thanks for your support so far. The other thing we\u0027re considering is a MemoryView, are there any available examples of usage? I appreciate that this is work in progress. The primary NFR for us is speed. Once again, thanks for any advice offered. ",
                                           "updatedAt":  "2023-01-31T08:45:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UDneD",
                                           "createdAt":  "2023-01-31T12:06:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "`ArraySegment\u003cbyte\u003e` marshalled as `MemoryView` to JS side and kept as shared buffer for long time is the most performant alternative. Marhaling `ArraySegment` on each call of tight loop is not good idea because it has the overhead of GC on both sides. \r\n\r\nFor `ArraySegment\u003cbyte\u003e` example we had it in the WebSocket implementation temporarily, but I optimized it further exactly because of the GC pressure it could create under heavy load.\r\nhttps://github.com/dotnet/runtime/commit/2a2edc89880ba469e561a7b8ddbfb4f422ddd6a1\r\n\r\nIn that case `Span\u003cbyte\u003e` could be better but has lifetime only for the duration of the call to JS (when it\u0027s on current stack), so it\u0027s not async friendly.\r\n\r\nFor examples, please see [GetResponseBytes](https://github.com/dotnet/runtime/blob/7c4b59ccf2cfc74c54e6c8922ab80cda20c3a55e/src/libraries/System.Net.Http/src/System/Net/Http/BrowserHttpHandler/BrowserHttpInterop.cs#L61-L71).\r\n\r\nIt\u0027s called from async method [here](https://github.com/dotnet/runtime/blob/7c4b59ccf2cfc74c54e6c8922ab80cda20c3a55e/src/libraries/System.Net.Http/src/System/Net/Http/BrowserHttpHandler/BrowserHttpHandler.cs#L364) but the call itself is synchronous.\r\n\r\nAnd the [implementation of http_wasm_get_response_bytes is here](https://github.com/dotnet/runtime/blob/7c4b59ccf2cfc74c54e6c8922ab80cda20c3a55e/src/mono/wasm/runtime/http.ts#L97-L107). \r\n\r\nAnd finally you could pin the memory yourself and marshal `IntPtr`. In that case you need to know even more about what you are doing.\r\n\r\nIt\u0027s complex code, so I\u0027m sure this is not great tutorials. Sorry.\r\n",
                                           "updatedAt":  "2023-01-31T12:06:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UD1iU",
                                           "createdAt":  "2023-01-31T12:53:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SeanCapes",
                                           "body":  "Hey, thanks for any advice and help offered, all appreciated. Understand with nascent pieces this happens, its part of new tech.",
                                           "updatedAt":  "2023-01-31T12:53:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oKp9v",
                                           "createdAt":  "2023-10-04T20:52:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SerratedSharp",
                                           "body":  "Maybe there should be a \"partially\" supported indicator for Arrays of JSObjects in the documentation\u0027s supported types matrix with some footnotes on it not being supported in promise returns or action callback parameters?  And/or clarify that it is only supported via representation as a single JSObject for the array, and thus the function signatures/marshaling cannot specify an array in that case.",
                                           "updatedAt":  "2023-10-04T20:53:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oaj8F",
                                           "createdAt":  "2023-10-07T18:50:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SerratedSharp",
                                           "body":  "My workaround for an action wanting to receive an array of JSObject\u0027s. Unfortunately requires an extra interop call to unpack array references\r\n\r\n```C#\r\n\r\n        [JSImport(baseJSNamespace + \".BindListener\")]\r\n        public static partial JSObject BindListener(JSObject jqObject, string events,\r\n            // action where second function param will be an ArrayObject reference\r\n            [JSMarshalAs\u003cJSType.Function\u003cJSType.String, JSType.Object\u003e\u003e] Action\u003cstring, JSObject\u003e handler);\r\n\r\n        // Used for unpacking an ArrayObject into a JSObject[] array\r\n        [JSImport(baseJSNamespace + \".GetArrayObjectItems\")]\r\n        [return: JSMarshalAs\u003cJSType.Array\u003cJSType.Object\u003e\u003e]\r\n        public static partial JSObject[] GetArrayObjectItems(JSObject jqObject);\r\n```\r\n\r\nJavascript (I probably didn\u0027t need ArrayObject class, but makes the pattern clearer)\r\n```javascript\r\n    JQueryProxy.BindListener = function (jsObject, events, action)\r\n    {\r\n        let handler = function (e) {\r\n            var someArray = [jQuery(\u0027div\u0027),jQuery(\u0027#x\u0027)];\r\n            // pack array into single reference, and call action passing the array\r\n            action(\"blah\", new ArrayObject(someArray));\r\n       }.bind(jsObject);\r\n       \r\n        jsObject.on(events, handler);\r\n        return handler; // return reference to the handler so it can be passed later for .off\r\n    }\r\n\r\nclass ArrayObject {\r\n    constructor(items) {\r\n        this.items = items;\r\n    }\r\n}\r\n```\r\n\r\nThe action listener that will receive the ArrayObject and unpack it into an actual array\r\n```C#\r\n// action that wants to receive an array as a param\r\nAction\u003cstring, JSObject\u003e interopListener = \r\n    (eventEncoded, arrayObject) =\u003e {       \r\n        // unpack the single ArrayObject JSObject reference into its individual elements\r\n        JSObject[] unpackedArray = HelpersProxy.GetArrayObjectItems(arrayObject);    \r\n        // ...        \r\n    };\r\n\r\nJQueryProxy.BindListener(this.jsObject, events, interopListener);\r\n```\r\n",
                                           "updatedAt":  "2023-10-07T18:52:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57dWap",
                                           "createdAt":  "2024-04-23T02:24:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maxkatz6",
                                           "body":  "Supporting JSType.Function with more than 4 parameters is also needed for callbacks. Without that we have to pass a JSObject as a single param and call nested JS interop to fetch each property independently. Which will eventually be unsupported in .NET 9 WT as per https://github.com/dotnet/runtime/issues/85592#issuecomment-2031876112.\r\n",
                                           "updatedAt":  "2024-04-23T02:24:47Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "Improve the JavaScript interop code generators to support additional scenarios",
        "labels":  [
                       "arch-wasm",
                       "feature-request",
                       "area-System.Runtime.InteropServices.JavaScript"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78750",
        "createdAt":  "2022-11-23T08:30:13Z",
        "number":  78750,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-17T12:46:52Z",
        "body":  "The roslyn generated code for JSImported method contain call which binds the interop to JS side. \r\nThis call could be moved to separate method, so that the imported method itself would have smaller IL code and possibly could be inlined.\r\n\r\ncc @kg ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTvVa3w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5O9Vrf",
                                           "createdAt":  "2022-11-23T08:30:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe roslyn generated code for JSImported method contain call which binds the interop to JS side. \r\nThis call could be moved to separate method, so that the imported method itself would have smaller IL code and possibly could be inlined.\r\n\r\ncc @kg \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Runtime.InteropServices.JavaScript`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-23T08:30:20Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[wasm] extract JSImport initialization to separate method",
        "labels":  [
                       "arch-wasm",
                       "tenet-performance",
                       "area-System.Runtime.InteropServices.JavaScript"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78905",
        "createdAt":  "2022-11-28T08:38:23Z",
        "number":  78905,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCroqKw==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "Thaina",
                                            "createdAt":  "2022-11-28T08:38:37Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-05-14T13:08:13Z",
        "body":  "See https://github.com/dotnet/runtime/pull/78853#issuecomment-1327960400",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTzKljw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5PMqWP",
                                           "createdAt":  "2022-11-28T08:38:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSee https://github.com/dotnet/runtime/pull/78853#issuecomment-1327960400\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `feature-request`, `area-System.Runtime.InteropServices.JavaScript`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-28T08:38:29Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[wasm] Make JSObject to implement IDictionary",
        "labels":  [
                       "arch-wasm",
                       "feature-request",
                       "area-System.Runtime.InteropServices.JavaScript"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78906",
        "createdAt":  "2022-11-28T08:42:39Z",
        "number":  78906,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3Bamg==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "Thaina",
                                            "createdAt":  "2022-11-28T08:42:57Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "SantaClaas",
                                            "createdAt":  "2023-01-30T01:04:22Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "SerratedSharp",
                                            "createdAt":  "2023-09-22T04:47:39Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "tma-lawo",
                                            "createdAt":  "2024-04-05T08:38:35Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2024-06-10T09:58:57Z",
        "body":  "See https://github.com/dotnet/runtime/pull/78853#issuecomment-1327960400\r\n\r\n- on JSObject member (probably also bind `this`)\r\n- `function` marshaled as return value\r\n\r\n- will not know the number of parameters nor the types\r\n- will not know the preferred marshaling configuration\r\nTherefore it will be much slower than `JSImport ` and it will always make _best guess_ on which marshaler to use for each parameter.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeYy6hQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5PMrYQ",
                                           "createdAt":  "2022-11-28T08:42:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSee https://github.com/dotnet/runtime/pull/78853#issuecomment-1327960400\r\n\r\n- on JSObject member (probably also bind `this`)\r\n- `function` marshaled as return value\r\n\r\n- will not know the number of parameters nor the types\r\n- will not know the preferred marshaling configuration\r\nTherefore it will be much slower than `JSImport ` and it will always make _best guess_ on which marshaler to use for each parameter.\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `feature-request`, `area-System.Runtime.InteropServices.JavaScript`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-28T08:42:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PMtaN",
                                           "createdAt":  "2022-11-28T08:51:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thaina",
                                           "body":  "Or maybe just return raw unbind function, but reflect the `apply` `bind` `call` from js `function`\u0027s prototype. Then have `invoke` function to call directly like in js?",
                                           "updatedAt":  "2022-11-28T08:51:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55jLqF",
                                           "createdAt":  "2024-04-05T08:56:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tma-lawo",
                                           "body":  "This would essentially allow us to skip code generation by using JSHost.GlobalThis to get a function instead of [JSImport(\"globalThis.whatever\")], right?",
                                           "updatedAt":  "2024-04-05T08:56:36Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[wasm] Implement dynamic calling of any JS function",
        "labels":  [
                       "arch-wasm",
                       "feature-request",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79981",
        "createdAt":  "2022-12-26T20:46:45Z",
        "number":  79981,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1nkag==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jirisykora83",
                                            "createdAt":  "2023-01-28T17:13:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marcusbooyah",
                                            "createdAt":  "2024-02-02T22:42:31Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-06-08T14:59:08Z",
        "body":  "- on nodeJS and v8 we could load DLLs synchronously on-demand\r\n- without need to pre-load them via mono-config.json\r\n- we should respect PATH same way as normal desktop dotnet\r\n\r\ncc @maraf @lewing ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUcjySg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5RYybx",
                                           "createdAt":  "2022-12-26T20:46:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n- on nodeJS and v8 we could load DLLs synchronously on-demand\r\n- without need to pre-load them via mono-config.json\r\n- we should respect PATH same way as normal desktop dotnet\r\n\r\ncc @maraf @lewing \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Runtime.InteropServices.JavaScript`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-26T20:46:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RunH3",
                                           "createdAt":  "2023-01-04T16:50:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "@lambdageek has an idea of creating an abstraction in the runtime that will allow to us to load only parts of the managed assemblies as they are requested by the runtime.",
                                           "updatedAt":  "2023-01-04T16:50:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ru-n5",
                                           "createdAt":  "2023-01-04T18:21:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "\u003e @lambdageek has an idea of creating an abstraction in the runtime that will allow to us to load only parts of the managed assemblies as they are requested by the runtime.\r\n\r\nIt\u0027s kind of a hacky idea that depends on two things:\r\n1. A .NET assembly is basically 3 things: metadata tables, IL code, constant data and resources\r\n2. zeroes compress better than actual data.\r\n\r\nSo what we could do is make 2 copies of the data for each assembly: one that has just the stuff we need at startup, with the other metadata rows and IL code zeroed out.  And a second one that is just the original assembly.  At startup we could bake in the special assembly and then load the normal one asynchronously and overwrite the image data in memory.\r\n\r\nThe only thing I\u0027m not sure about is what we would do if the full assembly isn\u0027t available yet but some code needs it.\r\n\r\n\r\n",
                                           "updatedAt":  "2023-01-04T18:21:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RxuuX",
                                           "createdAt":  "2023-01-05T09:43:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "\u003e zeroes compress better than actual data.\r\n\r\nYou mean compress over the wire, right? The idea I was referring to was about saving max memory needed to load the assemblies. On desktop the runtime uses memory mapped files and we could simulate similar thing manually be loading only parts of the assemblies. Am I right?\r\n\r\n\u003e The only thing I\u0027m not sure about is what we would do if the full assembly isn\u0027t available yet but some code needs it.\r\n\r\nIn the context of nodejs/v8 the loading will be synchronous. So if the runtime will call into the javascript, we could supply the assembly data immediately.",
                                           "updatedAt":  "2023-01-05T09:43:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rx32a",
                                           "createdAt":  "2023-01-05T10:18:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e allow to us to load only parts of the managed assemblies as they are requested by the runtime.\r\n\r\n@maraf could you please elaborate ? I don\u0027t get how is that useful in context of nodejs. \r\n\r\nWe would not be able to use memory mapped files into wasm memory unless we are willing to also implement native plugins into nodejs. At which point whole wasm architecture is kind of pointless and we could have normal x64 dotnet integrated with nodejs.",
                                           "updatedAt":  "2023-01-05T10:18:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RyPJK",
                                           "createdAt":  "2023-01-05T11:55:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "\u003e We would not be able to use memory mapped files into wasm memory unless we are willing to also implement native plugins into nodejs. At which point whole wasm architecture is kind of pointless and we could have normal x64 dotnet integrated with nodejs.\r\n\r\nOkay. The parallel with memory mapped files was probably misleading. I wasn\u0027t suggesting implementing native nodejs plugin. If I remember correctly what we were talking about with @lambdageek, current approach and even the one with loading assemblies on demand from FS, requires loading whole assembly at once, but the runtime might need just piece of it. So I think the idea was to supply only pieces of assemblies as runtime needs them, instead of loading whole assembly at a time.",
                                           "updatedAt":  "2023-01-05T11:57:35Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[wasm][nodejs] implement synchronous DLL loading",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80309",
        "createdAt":  "2023-01-06T19:59:24Z",
        "number":  80309,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-06T20:16:12Z",
        "body":  "From here https://github.com/dotnet/runtime/pull/80257#discussion_r1063586293\r\n\r\n- Would it be useful add a short delay before the Cancel, to give a chance for `ImportAsync` get started?\r\n- Also, would it be useful to have another test that tries to import from an external url?\r\n- What about a test for importing a non-existent file - like `./non-existent.js`, and a url `https://www.foobar.com/non-existent.js`, and canceling for those?\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUebUVA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5R5o1j",
                                           "createdAt":  "2023-01-06T19:59:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFrom here https://github.com/dotnet/runtime/pull/80257#discussion_r1063586293\r\n\r\n- Would it be useful add a short delay before the Cancel, to give a chance for `ImportAsync` get started?\r\n- Also, would it be useful to have another test that tries to import from an external url?\r\n- What about a test for importing a non-existent file - like `./non-existent.js`, and a url `https://www.foobar.com/non-existent.js`, and canceling for those?\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Runtime.InteropServices.JavaScript`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-06T19:59:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5R5tRU",
                                           "createdAt":  "2023-01-06T20:16:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "related to\r\n`src\\libraries\\System.Net.WebSockets.Client\\tests\\CancelTest.cs`\r\n`src\\libraries\\System.Net.WebSockets.Client\\tests\\AbortTest.cs`",
                                           "updatedAt":  "2023-01-06T20:16:12Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[browser] more cancelation tests",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81348",
        "createdAt":  "2023-01-30T10:42:37Z",
        "number":  81348,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8kQ7A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "elringus",
                                            "createdAt":  "2023-10-21T11:34:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SerratedSharp",
                                            "createdAt":  "2024-06-02T21:53:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bricelam",
                                            "createdAt":  "2024-11-11T20:15:34Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-09-17T12:43:19Z",
        "body":  "Ability to marshal complex types is currently limited to 1 nested generic parameter type.\r\nWe could have `JSObject[]` parameter but not `Action\u003cJSObject[]\u003e`.\r\n\r\nSimply said, we are not ready for the item in the collection to be another collection or wrapper.\r\n\r\nThis is because we could only handle 1 level of type parametrization.\r\nAnd that\u0027s because\r\n - the structure in which we pass metadata for the initialization of marshaller is linear to number of parameters.\r\n - because we need to generate the marshaller callback to instantiate and convert the inner data types of generic types. Like items in the collection.\r\n\r\n\r\nWe could improve it by\r\nA) increasing depth of parametrization to 2 or 3 with still linear metadata buffer\r\nB) implement dynamic data structure.\r\n\r\nBoth should have no impact on the public API types. It would only extend what is now rejected by the code analyzer as not supported.\r\n\r\nI think it would address https://github.com/dotnet/runtime/issues/78455",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfmBiXA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5T8k7M",
                                           "createdAt":  "2023-01-30T10:42:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAbility to marshal complex types is currently limited to 1 nested generic parameter type.\r\nWe could have `JSObject[]` parameter but not `Action\u003cJSObject[]\u003e`.\r\n\r\nSimply said, we are not ready for the item in the collection to be another collection or wrapper.\r\n\r\nThis is because we could only handle 1 level of type parametrization.\r\nAnd that\u0027s because\r\n - the structure in which we pass metadata for the initialization of marshaller is linear to number of parameters.\r\n - because we need to generate the marshaller callback to instantiate and convert the inner data types of generic types. Like items in the collection.\r\n\r\n\r\nWe could improve it by\r\nA) increasing depth of parametrization to 2 or 3 with still linear metadata buffer\r\nB) implement dynamic data structure.\r\n\r\nBoth should have no impact on the public API types. It would only extend what is now rejected by the code analyzer as not supported.\r\n\r\nI think it would address https://github.com/dotnet/runtime/issues/78455\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003epavelsavara, maraf\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Runtime.InteropServices.JavaScript`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-30T10:42:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-SlHq",
                                           "createdAt":  "2024-05-18T11:59:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elringus",
                                           "body":  "I\u0027ve noticed that passing an array as `object` under `Task\u003c\u003e` with `JSMarshalAs\u003cJSType.Promise\u003cJSType.Any\u003e\u003e` actually works: on the JS side the resolved promise returns valid JS array, eg:\r\n\r\n```cs\r\n[JSExport] [return: JSMarshalAs\u003cJSType.Promise\u003cJSType.Any\u003e\u003e]\r\nprivate static async Task\u003cobject\u003e GetArrayAsync ()\r\n{\r\n    await Task.Delay(1);\r\n    return new[] { \"foo\", \"bar\", \"baz\" };\r\n}\r\n```\r\n\r\nIs this something we can rely on or it may break in future releases?",
                                           "updatedAt":  "2024-05-18T11:59:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-YGJc",
                                           "createdAt":  "2024-05-20T11:23:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODibxFg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elringus",
                                                                               "createdAt":  "2024-05-20T12:44:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "The marshaling of `System.Object` is \"best effort\" trying to map the type to closest type on the other side, dynamically at runtime.\r\nIn this particular case the mapping could be recognized on both sides and obvious data types exist.\r\nSo I guess it\u0027s unlikely to break for this specific combination.\r\n\r\nIf the collection contained something which we today marshal as untyped proxy and in the future we would have better (more specific) mapping, the \"best effort\" would be different behavior than it is today.",
                                           "updatedAt":  "2024-05-20T11:23:48Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[browser] JSImport multiple generic parameters",
        "labels":  [
                       "arch-wasm",
                       "feature-request",
                       "area-System.Runtime.InteropServices.JavaScript"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82247",
        "createdAt":  "2023-02-08T01:03:46Z",
        "number":  82247,
        "author":  "juepiezhongren",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-09T10:00:33Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nBrowser APIs could be exposed as strongly typed C# API\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOa3-E_w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5VcVk2",
                                           "createdAt":  "2023-02-16T17:58:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-02-16T17:58:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VcZrO",
                                           "createdAt":  "2023-02-16T18:11:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nWe want the experience of calling strongly typed js-binding api, like what we do for ios and android.\n\n### Describe the solution you\u0027d like\n\nseems that wasmAnyref could make it happen.\n\n### Additional context\n\nno\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejuepiezhongren\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `untriaged`, `area-System.Runtime.InteropServices.JavaScript`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-16T18:11:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VcZvj",
                                           "createdAt":  "2023-02-16T18:11:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "cc @pavelsavara ",
                                           "updatedAt":  "2023-02-16T18:11:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rf4T_",
                                           "createdAt":  "2023-11-09T10:00:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I think this could be community driven project, separate NuGet package rather than part of runtime.\r\n\r\nI also think that OOP programing over interop boundary leads to chatty interactions and creation of many proxies which need to be collected by both GCs.\r\nMore specifically I think that manipulating DOM directly from C# is not good idea, it will be slow, heavy and users will be unhappy about it. Blazor team implemented delta protocol, specifically to avoid this pitfall.",
                                           "updatedAt":  "2023-11-09T10:00:32Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[browser] OOP JavaScript interop",
        "labels":  [
                       "arch-wasm",
                       "feature-request",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82880",
        "createdAt":  "2023-03-02T06:59:58Z",
        "number":  82880,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-19T12:52:49Z",
        "body":  "\r\n[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-82865-merge-eed132fb706b4bff95/WasmTestOnNodeJS-System.Net.Http.Functional.Tests/1/console.4e89e456.log?helixlogtype=result) [Build](https://dev.azure.com/dnceng-public/public/_build/results?buildId=190149\u0026view=results)\r\n\r\nThis is NodeJS on linux\r\n\r\n```\r\n[FAIL] System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest.GetAsync_ManyDifferentResponseHeaders_ParsedCorrectly(newline: \"\\n\", fold: \"\", dribble: False)\r\n[00:19:13] info: System.Net.Http.HttpRequestException : FetchError: request to http://127.0.0.1:39305/ failed, reason: Parse Error: Invalid header value char\r\n[00:19:13] info: ---- System.Runtime.InteropServices.JavaScript.JSException : FetchError: request to http://127.0.0.1:39305/ failed, reason: Parse Error: Invalid header value char\r\n[00:19:13] info:    at System.Net.Http.BrowserHttpInterop.\u003cCancelationHelper\u003ed__13`1[[System.Runtime.InteropServices.JavaScript.JSObject, System.Runtime.InteropServices.JavaScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\r\n[00:19:13] info:    at System.Net.Http.BrowserHttpHandler.CallFetch(HttpRequestMessage request, CancellationToken cancellationToken, Nullable`1 allowAutoRedirect)\r\n[00:19:13] info:    at System.Net.Http.BrowserHttpHandler.\u003cSendAsync\u003eg__Impl|55_0(HttpRequestMessage request, CancellationToken cancellationToken, Nullable`1 allowAutoRedirect)\r\n[00:19:13] info:    at System.Net.Http.HttpClient.\u003cSendAsync\u003eg__Core|83_0(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationTokenSource cts, Boolean disposeCts, CancellationTokenSource pendingRequestsCts, CancellationToken originalCancellationToken)\r\n[00:19:13] info:    at System.Net.Http.Functional.Tests.HttpClientHandlerTest.\u003c\u003ec__DisplayClass21_0.\u003c\u003cGetAsync_ManyDifferentResponseHeaders_ParsedCorrectly\u003eb__0\u003ed.MoveNext()\r\n[00:19:13] info: --- End of stack trace from previous location ---\r\n[00:19:13] info:    at System.Threading.Tasks.TaskTimeoutExtensions.GetRealException(Task task)\r\n[00:19:13] info: --- End of stack trace from previous location ---\r\n[00:19:13] info:    at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n[00:19:13] info:    at System.Net.Test.Common.LoopbackServer.\u003c\u003ec__DisplayClass15_0.\u003c\u003cCreateClientAndServerAsync\u003eb__0\u003ed.MoveNext()\r\n[00:19:13] info: --- End of stack trace from previous location ---\r\n[00:19:13] info:    at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options)\r\n[00:19:13] info:    at System.Net.Http.Functional.Tests.HttpClientHandlerTest.GetAsync_ManyDifferentResponseHeaders_ParsedCorrectly(String newline, String fold, Boolean dribble)\r\n[00:19:13] info: --- End of stack trace from previous location ---\r\n[00:19:13] info: ----- Inner Stack Trace -----\r\n[00:19:13] info:    at System.Net.Http.BrowserHttpInterop.\u003cCancelationHelper\u003ed__13`1[[System.Runtime.InteropServices.JavaScript.JSObject, System.Runtime.InteropServices.JavaScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\r\n[00:19:13] info:     at ClientRequest.\u003canonymous\u003e (/root/helix/work/workitem/e/node_modules/node-fetch/lib/index.js:1491:11)\r\n[00:19:13] info:     at ClientRequest.emit (node:events:513:28)\r\n[00:19:13] info:     at Socket.socketOnData (node:_http_client:543:9)\r\n[00:19:13] info:     at Socket.emit (node:events:513:28)\r\n[00:19:13] info:     at addChunk (node:internal/streams/readable:315:12)\r\n[00:19:13] info:     at readableAddChunk (node:internal/streams/readable:289:9)\r\n[00:19:13] info:     at Socket.Readable.push (node:internal/streams/readable:228:10)\r\n[00:19:13] info:     at TCP.onStreamRead (node:internal/stream_base_commons:190:23)\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgq1pLQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Wgm4E",
                                           "createdAt":  "2023-03-02T07:00:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\r\n[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-82865-merge-eed132fb706b4bff95/WasmTestOnNodeJS-System.Net.Http.Functional.Tests/1/console.4e89e456.log?helixlogtype=result) [Build](https://dev.azure.com/dnceng-public/public/_build/results?buildId=190149\u0026view=results)\r\n\r\nThis is NodeJS on linux\r\n\r\n```\r\n[FAIL] System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest.GetAsync_ManyDifferentResponseHeaders_ParsedCorrectly(newline: \"\\n\", fold: \"\", dribble: False)\r\n[00:19:13] info: System.Net.Http.HttpRequestException : FetchError: request to http://127.0.0.1:39305/ failed, reason: Parse Error: Invalid header value char\r\n[00:19:13] info: ---- System.Runtime.InteropServices.JavaScript.JSException : FetchError: request to http://127.0.0.1:39305/ failed, reason: Parse Error: Invalid header value char\r\n[00:19:13] info:    at System.Net.Http.BrowserHttpInterop.\u003cCancelationHelper\u003ed__13`1[[System.Runtime.InteropServices.JavaScript.JSObject, System.Runtime.InteropServices.JavaScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\r\n[00:19:13] info:    at System.Net.Http.BrowserHttpHandler.CallFetch(HttpRequestMessage request, CancellationToken cancellationToken, Nullable`1 allowAutoRedirect)\r\n[00:19:13] info:    at System.Net.Http.BrowserHttpHandler.\u003cSendAsync\u003eg__Impl|55_0(HttpRequestMessage request, CancellationToken cancellationToken, Nullable`1 allowAutoRedirect)\r\n[00:19:13] info:    at System.Net.Http.HttpClient.\u003cSendAsync\u003eg__Core|83_0(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationTokenSource cts, Boolean disposeCts, CancellationTokenSource pendingRequestsCts, CancellationToken originalCancellationToken)\r\n[00:19:13] info:    at System.Net.Http.Functional.Tests.HttpClientHandlerTest.\u003c\u003ec__DisplayClass21_0.\u003c\u003cGetAsync_ManyDifferentResponseHeaders_ParsedCorrectly\u003eb__0\u003ed.MoveNext()\r\n[00:19:13] info: --- End of stack trace from previous location ---\r\n[00:19:13] info:    at System.Threading.Tasks.TaskTimeoutExtensions.GetRealException(Task task)\r\n[00:19:13] info: --- End of stack trace from previous location ---\r\n[00:19:13] info:    at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n[00:19:13] info:    at System.Net.Test.Common.LoopbackServer.\u003c\u003ec__DisplayClass15_0.\u003c\u003cCreateClientAndServerAsync\u003eb__0\u003ed.MoveNext()\r\n[00:19:13] info: --- End of stack trace from previous location ---\r\n[00:19:13] info:    at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options)\r\n[00:19:13] info:    at System.Net.Http.Functional.Tests.HttpClientHandlerTest.GetAsync_ManyDifferentResponseHeaders_ParsedCorrectly(String newline, String fold, Boolean dribble)\r\n[00:19:13] info: --- End of stack trace from previous location ---\r\n[00:19:13] info: ----- Inner Stack Trace -----\r\n[00:19:13] info:    at System.Net.Http.BrowserHttpInterop.\u003cCancelationHelper\u003ed__13`1[[System.Runtime.InteropServices.JavaScript.JSObject, System.Runtime.InteropServices.JavaScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\r\n[00:19:13] info:     at ClientRequest.\u003canonymous\u003e (/root/helix/work/workitem/e/node_modules/node-fetch/lib/index.js:1491:11)\r\n[00:19:13] info:     at ClientRequest.emit (node:events:513:28)\r\n[00:19:13] info:     at Socket.socketOnData (node:_http_client:543:9)\r\n[00:19:13] info:     at Socket.emit (node:events:513:28)\r\n[00:19:13] info:     at addChunk (node:internal/streams/readable:315:12)\r\n[00:19:13] info:     at readableAddChunk (node:internal/streams/readable:289:9)\r\n[00:19:13] info:     at Socket.Readable.push (node:internal/streams/readable:228:10)\r\n[00:19:13] info:     at TCP.onStreamRead (node:internal/stream_base_commons:190:23)\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Runtime.InteropServices.JavaScript`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-02T07:00:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Wgm9B",
                                           "createdAt":  "2023-03-02T07:00:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "cc @maraf ",
                                           "updatedAt":  "2023-03-02T07:00:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WptxI",
                                           "createdAt":  "2023-03-03T16:21:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "It\u0027s Linux specific, reproducible only on v16.19, on v17 it works.",
                                           "updatedAt":  "2023-03-08T17:38:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ibDZ2",
                                           "createdAt":  "2023-07-26T08:50:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "Node v16 is almost EOL https://endoflife.date/nodejs. The error doesn\u0027t reproduce in v17",
                                           "updatedAt":  "2023-07-26T08:50:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5icLZX",
                                           "createdAt":  "2023-07-26T10:59:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "We still have node 16.19, I would like to enable the test when we upgrade",
                                           "updatedAt":  "2023-07-26T10:59:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CdtjW",
                                           "createdAt":  "2024-06-25T12:38:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "Currently we have `v18.17.1` [log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-103804-merge-4c825bd6447d4207b2/Workloads-NoWebcil-ST-Wasm.Build.Tests.NativeBuildTests/1/console.d8e67a05.log?helixlogtype=result), I can\u0027t repro locally, unblocking",
                                           "updatedAt":  "2024-06-25T12:38:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CrWkt",
                                           "createdAt":  "2024-06-26T18:40:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODneBwQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2024-06-27T07:23:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "Reproduced on CI: [log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-103959-merge-284c3841ddbb472590/WasmTestOnNodeJS-ST-System.Net.Http.Functional.Tests/1/console.d3363a16.log?helixlogtype=result)\r\n\r\n```\r\n[15:43:38] info: Using js engine NodeJS from path /usr/bin/node\r\n[15:43:38] info: v18.17.1\r\n```",
                                           "updatedAt":  "2024-06-26T18:40:27Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[browser] FetchError: request failed, reason: Parse Error: Invalid header value char",
        "labels":  [
                       "arch-wasm",
                       "disabled-test",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83517",
        "createdAt":  "2023-03-16T14:35:23Z",
        "number":  83517,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-26T09:11:41Z",
        "body":  "`SendReceiveTest.ReceiveAsync_MultipleOutstandingReceiveOperations_Throws` test would hang on NodeJS and timeout the whole test project.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOV752lg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5XvnaW",
                                           "createdAt":  "2023-03-16T14:35:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n`SendReceiveTest.ReceiveAsync_MultipleOutstandingReceiveOperations_Throws` test would hang on NodeJS and timeout the whole test project.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Runtime.InteropServices.JavaScript`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-16T14:35:27Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[nodejs][websocket] unit tests that hangs whole suite",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83579",
        "createdAt":  "2023-03-17T10:40:01Z",
        "number":  83579,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-09T16:42:52Z",
        "body":  "```\r\n[09:13:52] fail: [FAIL] System.Net.WebSockets.Client.Tests.CancelTest.ConnectAsync_Cancel_ThrowsCancellationException(server: wss://127.0.0.1:45113/WebSocket/EchoWebSocket.ashx)\r\n[09:13:52] info: Assert.Throws() Failure\r\n[09:13:52] info: Expected: typeof(System.OperationCanceledException)\r\n[09:13:52] info: Actual:   (No exception was thrown)\r\n[09:13:52] info:    at System.Net.WebSockets.Client.Tests.CancelTest.ConnectAsync_Cancel_ThrowsCancellationException(Uri server)\r\n[09:13:52] info: --- End of stack trace from previous location ---\r\n[09:14:22] fail: [FAIL] System.Net.WebSockets.Client.Tests.InvokerCancelTest.ConnectAsync_Cancel_ThrowsCancellationException(server: ws://127.0.0.1:33893/WebSocket/EchoWebSocket.ashx)\r\n[09:14:22] info: Assert.Throws() Failure\r\n[09:14:22] info: Expected: typeof(System.OperationCanceledException)\r\n[09:14:22] info: Actual:   (No exception was thrown)\r\n[09:14:22] info:    at System.Net.WebSockets.Client.Tests.CancelTest.ConnectAsync_Cancel_ThrowsCancellationException(Uri server)\r\n[09:14:22] info: --- End of stack trace from previous location ---\r\n[09:14:42] fail: [FAIL] System.Net.WebSockets.Client.Tests.InvokerCancelTest.ConnectAsync_Cancel_ThrowsCancellationException(server: wss://127.0.0.1:45113/WebSocket/EchoWebSocket.ashx)\r\n[09:14:42] info: Assert.Throws() Failure\r\n[09:14:42] info: Expected: typeof(System.OperationCanceledException)\r\n[09:14:42] info: Actual:   (No exception was thrown)\r\n[09:14:42] info:    at System.Net.WebSockets.Client.Tests.CancelTest.ConnectAsync_Cancel_ThrowsCancellationException(Uri server)\r\n[09:14:42] info: --- End of stack trace from previous location ---\r\n```\r\n\r\n[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-83524-merge-89c80b991d4e4513a8/WasmTestOnNodeJS-System.Net.WebSockets.Client.Tests/1/console.a6d8f517.log?helixlogtype=result)\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOV9XsVA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5X1exU",
                                           "createdAt":  "2023-03-17T10:40:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n```\r\n[09:13:52] fail: [FAIL] System.Net.WebSockets.Client.Tests.CancelTest.ConnectAsync_Cancel_ThrowsCancellationException(server: wss://127.0.0.1:45113/WebSocket/EchoWebSocket.ashx)\r\n[09:13:52] info: Assert.Throws() Failure\r\n[09:13:52] info: Expected: typeof(System.OperationCanceledException)\r\n[09:13:52] info: Actual:   (No exception was thrown)\r\n[09:13:52] info:    at System.Net.WebSockets.Client.Tests.CancelTest.ConnectAsync_Cancel_ThrowsCancellationException(Uri server)\r\n[09:13:52] info: --- End of stack trace from previous location ---\r\n[09:14:22] fail: [FAIL] System.Net.WebSockets.Client.Tests.InvokerCancelTest.ConnectAsync_Cancel_ThrowsCancellationException(server: ws://127.0.0.1:33893/WebSocket/EchoWebSocket.ashx)\r\n[09:14:22] info: Assert.Throws() Failure\r\n[09:14:22] info: Expected: typeof(System.OperationCanceledException)\r\n[09:14:22] info: Actual:   (No exception was thrown)\r\n[09:14:22] info:    at System.Net.WebSockets.Client.Tests.CancelTest.ConnectAsync_Cancel_ThrowsCancellationException(Uri server)\r\n[09:14:22] info: --- End of stack trace from previous location ---\r\n[09:14:42] fail: [FAIL] System.Net.WebSockets.Client.Tests.InvokerCancelTest.ConnectAsync_Cancel_ThrowsCancellationException(server: wss://127.0.0.1:45113/WebSocket/EchoWebSocket.ashx)\r\n[09:14:42] info: Assert.Throws() Failure\r\n[09:14:42] info: Expected: typeof(System.OperationCanceledException)\r\n[09:14:42] info: Actual:   (No exception was thrown)\r\n[09:14:42] info:    at System.Net.WebSockets.Client.Tests.CancelTest.ConnectAsync_Cancel_ThrowsCancellationException(Uri server)\r\n[09:14:42] info: --- End of stack trace from previous location ---\r\n```\r\n\r\n[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-83524-merge-89c80b991d4e4513a8/WasmTestOnNodeJS-System.Net.WebSockets.Client.Tests/1/console.a6d8f517.log?helixlogtype=result)\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Runtime.InteropServices.JavaScript`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-17T10:40:07Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[nodejs][ws] CancelTest.ConnectAsync_Cancel_ThrowsCancellationException unit test failure",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88760",
        "createdAt":  "2023-07-12T18:44:06Z",
        "number":  88760,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-04T13:02:24Z",
        "body":  "Possible designs\r\nA) use multiple ` -- ` to separate it\r\n`node --enable-source-maps main.js -- hello.dll --setenv=XXX=1 -- -fromCity=Prague to Ilona`\r\n\r\n`--enable-source-maps` is nodeJS engine flag\r\n`--setenv=XXX=1` is mono engine flag\r\n`-fromCity=Prague` is application argument\r\n`to` is application arg\r\n`Ilona` is application arg\r\n\r\n`dotnet run --engine=node -- --enable-source-maps main.js -- hello.dll --setenv=XXX=1 -- -fromCity=Prague to Ilona`\r\n\r\nthis assumes that `main.js` which is user will call `.withRuntimeOptionsFromArguments()` to consume it.\r\n\r\nB) use well know pass-thru arguments\r\n\r\n`wasmtime run --env MONO_OPTIONS=\"values\" dotnet.wasm`\r\n\r\n`dotnet run --engine=wasmtime --engine-arg=\u0027--env MONO_OPTIONS=\"values\"\u0027 dotnet.wasm`\r\n\r\nescaping becomes nasty.\r\n\r\nAlso, from https://github.com/dotnet/runtime/issues/85674#issuecomment-1602127464\r\n`Perhaps there should be pass-thru argument like `--host:xxx=yyy` and `--runtime:aaa=bbb` before application ` -- ` ? As an alternative to multiple ` -- `.`\r\n\r\nMore details discussed here https://github.com/dotnet/runtime/issues/70892",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObGPfhA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5hViVu",
                                           "createdAt":  "2023-07-12T18:44:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nPossible designs\r\nA) use multiple ` -- ` to separate it\r\n`node --enable-source-maps main.js -- hello.dll --setenv=XXX=1 -- -fromCity=Prague to Ilona`\r\n\r\n`--enable-source-maps` is nodeJS engine flag\r\n`--setenv=XXX=1` is mono engine flag\r\n`-fromCity=Prague` is application argument\r\n`to` is application arg\r\n`Ilona` is application arg\r\n\r\n`dotnet run --engine=node -- --enable-source-maps main.js -- hello.dll --setenv=XXX=1 -- -fromCity=Prague to Ilona`\r\n\r\nthis assumes that `main.js` which is user will call `.withRuntimeOptionsFromArguments()` to consume it.\r\n\r\nB) use well know pass-thru arguments\r\n\r\n`wasmtime run --env MONO_OPTIONS=\"values\" dotnet.wasm`\r\n\r\n`dotnet run --engine=wasmtime --engine-arg=\u0027--env MONO_OPTIONS=\"values\"\u0027 dotnet.wasm`\r\n\r\nescaping becomes nasty.\r\n\r\nMore details discussed here https://github.com/dotnet/runtime/issues/70892\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eradical\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `os-browser`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-12T18:44:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kA04I",
                                           "createdAt":  "2023-08-14T19:29:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "radical",
                                           "body":  "Moving this to 9.0, so we can get an agreement on how this should be done, as it should be consistent with how `dotnet run` handles these kinda cases.",
                                           "updatedAt":  "2023-08-14T19:29:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sY9-E",
                                           "createdAt":  "2023-11-20T08:55:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODXmI-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lewing",
                                                                               "createdAt":  "2024-02-21T05:25:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "cc @richlander ",
                                           "updatedAt":  "2023-11-20T08:55:07Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[wasm] Host should separate arguments for engine, mono and application",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89861",
        "createdAt":  "2023-08-02T16:08:10Z",
        "number":  89861,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-04T15:56:31Z",
        "body":  "At the moment we only download `appsettings.json` and `appsettings.${config.applicationEnvironment}.json`\r\nWe also silently ignore all other files in the `config.appsettings`.\r\n\r\nPerhaps we could download also other files and place them to VFS.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYxeu5A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jF67k",
                                           "createdAt":  "2023-08-02T16:08:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAt the moment we only download `appsettings.json` and `appsettings.${config.applicationEnvironment}.json`\r\nWe also silently ignore all other files in the `config.appsettings`.\r\n\r\nPerhaps we could download also other files.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003emaraf\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Runtime.InteropServices.JavaScript`, `os-browser`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-02T16:08:18Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[browser] Support for other app settings",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92870",
        "createdAt":  "2023-10-02T08:41:58Z",
        "number":  92870,
        "author":  "maraf",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-04T13:21:47Z",
        "body":  "Check that each argument, exception and return value is marshalled max once and only when appropriate\r\n\r\n- Arguments should be unmarshalled always\r\n- Exception should be marshalled only if exception is raised\r\n- Return value should be marshalled only if exception didn\u0027t occur",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZ95PDg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5n3klT",
                                           "createdAt":  "2023-10-02T08:42:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCheck that each argument, exception and return value is marshalled max once and only when appropriate\r\n\r\n- Arguments should be unmarshalled always\r\n- Exception should be marshalled only if exception is raised\r\n- Return value should be marshalled only if exception didn\u0027t occur\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emaraf\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `test-enhancement`, `area-System.Runtime.InteropServices.JavaScript`, `os-browser`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-02T08:42:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5n3k8O",
                                           "createdAt":  "2023-10-02T08:43:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "We could use mock library to mock marshalling classes and check what was called",
                                           "updatedAt":  "2023-10-02T08:43:09Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[browser] Unit tests for generated code in JSInterop",
        "labels":  [
                       "arch-wasm",
                       "test-enhancement",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93941",
        "createdAt":  "2023-10-24T19:44:19Z",
        "number":  93941,
        "author":  "JakeYallop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-Rgdw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hojmark",
                                            "createdAt":  "2025-01-19T19:33:36Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-18T10:38:42Z",
        "body":  "### Background and motivation\r\n\r\nThe WASM runtime can take a while to load for certain kinds of apps. To provide a better experience for the user using the application, it can be useful to show a loading indicator.\r\n\r\nASP.NET Core Blazor did this (at least it did in .NET 7 when I was last investigating this, [although looks like it may not be the case now](https://github.com/dotnet/aspnetcore/issues/49056)), but it had to manually instantiate the web assembly module in order to achieve this.\r\n\r\nCurrently, there is no public API available on the `DotnetHostBuilder` type that enables this scenario. The public, documented approach would require manually looking up the blazor.boot.json file, and then calling `createDotnetRuntime` using that configuration. However, for less advanced scenarios, it would be useful to have this functionality available on the host builder.\r\n\r\nThis is already possible by using the internal [`withModuleConfig API`](https://github.com/dotnet/runtime/blob/a270140281a13ab82a4401dff3da6d27fe499087/src/mono/wasm/runtime/loader/run.ts#L26), and passing in a value to the `onDownloadResourceProgress` callback, however this method is internal and not exposed in the typescript type files for the DotnetHostBuilder, making for a bad IDE experience. This method is mentioned in one of the advanced samples [here](https://github.com/dotnet/runtime/blob/a270140281a13ab82a4401dff3da6d27fe499087/src/mono/sample/wasm/browser-advanced/main.js#L41), which is how I discovered it in the first place.\r\n\r\n### API Proposal\r\n\r\n```typescript\r\ninterface DotnetHostBuilder { \r\n  //exact naming TDB\r\n  //parameters currently match those provided to the `onDownloadResourceProgress` callback available when calling `createDotnetRuntime`   \r\n  withDownloadResourceProgress(callback: (resourcesLoaded: number, totalResources: number) =\u003e void): DotnetHostBuilder;\r\n}\r\n```\r\nCurrently, using `onDownloadResourceProgress`, the `total` parameter does not actually reflect the total number of resources that the runtime needs to load - I suggest that for this user-friendly API we provide that information rather than making the user calculate this number themselves directly from the blazor.boot.json file.\r\n\r\n\r\n### API Usage\r\n\r\n```typescript\r\nconst runtime = await dotnet\r\n  .withDownloadResourceProgress(updateProgress)\r\n  //...other configuration\r\n  .create();\r\n\r\n\r\nfunction updateProgress(loaded: number, total: number) {\r\n  //do something with the information\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n* Expose `withModuleConfig` publicly\r\nThis is a much more advanced API, allowing access to lower-level emscripten and more control over how the WASM module is instantiated.\r\n* Alternative names\r\n  * `withDownloadResourceProgressCallback`\r\n  * `withDownloadProgress`\r\n  * `withInitializationProgress`\r\n  * etc.\r\n\r\n### Risks\r\n\r\nLow - the API already exists, this would just be exposing it for use in a more user friendly manner.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOl3Z8Yw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5qBcPg",
                                           "createdAt":  "2023-10-25T08:24:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nThe WASM runtime can take a while to load for certain kinds of apps. To provide a better experience for the user using the application, it can be useful to show a loading indicator.\r\n\r\nASP.NET Core Blazor did this (at least it did in .NET 7 when I was last investigating this, [although looks like it may not be the case now](https://github.com/dotnet/aspnetcore/issues/49056)), but it had to manually instantiate the web assembly module in order to achieve this.\r\n\r\nCurrently, there is no public API available on the `DotnetHostBuilder` type that enables this scenario. The public, documented approach would require manually looking up the blazor.boot.json file, and then calling `createDotnetRuntime` using that configuration. However, for less advanced scenarios, it would be useful to have this functionality available on the host builder.\r\n\r\nThis is already possible by using the internal [`withModuleConfig API`](https://github.com/dotnet/runtime/blob/a270140281a13ab82a4401dff3da6d27fe499087/src/mono/wasm/runtime/loader/run.ts#L26), and passing in a value to the `onDownloadResourceProgress` callback, however this method is internal and not exposed in the typescript type files for the DotnetHostBuilder, making for a bad IDE experience. This method is mentioned in one of the advanced samples [here](https://github.com/dotnet/runtime/blob/a270140281a13ab82a4401dff3da6d27fe499087/src/mono/sample/wasm/browser-advanced/main.js#L41), which is how I discovered it in the first place.\r\n\r\n### API Proposal\r\n\r\n```typescript\r\ninterface DotnetHostBuilder { \r\n  //exact naming TDB\r\n  //parameters currently match those provided to the `onDownloadResourceProgress` callback available when calling `createDotnetRuntime`   \r\n  withDownloadResourceProgress(loaded: number, total: number): DotnetHostBuilder;\r\n}\r\n```\r\nCurrently, using `onDownloadResourceProgress`, the `total` parameter does not actually reflect the total number of resources that the runtime needs to load - I suggest that for this user-friendly API we provide that information rather than making the user calculate this number themselves directly from the blazor.boot.json file.\r\n\r\n\r\n### API Usage\r\n\r\n```typescript\r\nconst runtime = await dotnet\r\n  .withDownloadResourceProgress(updateProgress)\r\n  //...other configuration\r\n  .create();\r\n\r\n\r\nfunction updateProgress(loaded: number, total: number) {\r\n  //do something with the information\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n* Expose `withModuleConfig` publicly\r\nThis is a much more advanced API, allowing access to lower-level emscripten and more control over how the WASM module is instantiated.\r\n* Alternative names\r\n  * `withDownloadResourceProgressCallback`\r\n  * `withDownloadProgress`\r\n  * `withInitializationProgress`\r\n  * etc.\r\n\r\n### Risks\r\n\r\nLow - the API already exists, this would just be exposing it for use in a more user friendly manner.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJakeYallop\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `arch-wasm`, `area-System.Runtime.InteropServices.JavaScript`, `os-browser`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-25T08:24:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qBdd5",
                                           "createdAt":  "2023-10-25T08:27:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODK4E9A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JakeYallop",
                                                                               "createdAt":  "2023-10-25T10:03:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "maraf",
                                           "body":  "Thank you for the proposal. It is reasonable to expose the callback with public API.\r\n\r\nI have fixed the propsal API typescript definition so the parameter is a callback.",
                                           "updatedAt":  "2023-10-25T08:27:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qBdg9",
                                           "createdAt":  "2023-10-25T08:27:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "cc @pavelsavara ",
                                           "updatedAt":  "2023-10-25T08:27:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qEAsf",
                                           "createdAt":  "2023-10-25T14:41:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JakeYallop",
                                           "body":  "I\u0027d be happy to contribute a PR if it would be accepted, unless this need to go through API review first?",
                                           "updatedAt":  "2023-10-25T14:41:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qEjKq",
                                           "createdAt":  "2023-10-25T15:49:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "PR is welcome! Actually, we don\u0027t need API review for JavaScript changes",
                                           "updatedAt":  "2023-10-25T15:49:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qF7Zd",
                                           "createdAt":  "2023-10-25T19:41:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JakeYallop",
                                           "body":  "I\u0027m thinking it would be much simpler if we had the same behaviour for this method vs the onDownloadResourceProgress callback specified in `withModuleConfig`.\r\n\r\nThe proposal above suggests making `totalResources` actually be the total number of resources that need to be loaded during initialization, however at the moment, it seems these 2 values represent\r\n* `resourcesLoaded` - the number of completed requests for loading resources\r\n* `totalResources` - the number of *started* requests for loading resources\r\n\r\nhttps://github.com/dotnet/runtime/blob/9ad24aec018f8dbb4e5d5f67390f595930b5ea18/src/mono/wasm/runtime/loader/assets.ts#L598-L612\r\n\r\nWhat do we want to do here? Using the `withModuleConfig` callback, its not a big deal to ask the user to compute the number of resources that need to be loaded, as its an advanced API, however, with this new API - I\u0027m not sure that same assumption holds. The developer using this API shouldn\u0027t need to know what the blazor.boot.json looks like, which would be the only way to compute this number. Additionally, the only way to actually get the config _before_ loading the runtime so that this total value can be computed would mean calling `withModuleConfig` anyway - which defeats whole point of the proposal.\r\n\r\nWe have a few options:\r\n1. Unify `onDownloadResourceProgress` and `withDownloadResourceProgress`, and make `totalResources` return the total number of resources the runtime needs to load whilst its initialising. This would be a low-impact breaking change.\r\n2. Maintain 2 separate callbacks that have different behaviour - this seems kind of complicated given how the code looks so far, and would be weird, unexpected thing for the code to do.\r\n3. Some kind of third parameter to the callbacks, representing the total resources being loaded - this would also affect `withModuleConfig` setting.",
                                           "updatedAt":  "2023-10-25T19:41:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qItSb",
                                           "createdAt":  "2023-10-26T08:39:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "Sorry, I missed the part about total number. We should definitely have just one callback, so `withDownloadResourceProgress` should reuse `onDownloadResourceProgress`. Current behavior can be considered as a bug / not ideal. IIRC it\u0027s not straightforward to get total number of resources to download, because not everything from the boot config will be downloaded (pdbs are used only in debug mode, only one icu is downloaded, memory snapshot skip dlls, etc).\r\n\r\nWe\u0027re ok accepting a PR with just the new API and opening an issue for better \"total resources\" computation",
                                           "updatedAt":  "2023-10-26T08:54:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qIvBX",
                                           "createdAt":  "2023-10-26T08:44:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JakeYallop",
                                           "body":  "Ah - I did wonder about the reasoning behind it - makes a bit more sense now. Will leave the existing behaviour as is.",
                                           "updatedAt":  "2023-10-26T08:44:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Xdnxj",
                                           "createdAt":  "2024-12-13T10:33:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JakeYallop",
                                           "body":  "I won\u0027t be working on this any time soon, but I don\u0027t think \"needs author action\" is the right label either - should this just be marked as \"help wanted\"?",
                                           "updatedAt":  "2024-12-13T10:33:28Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "[API Proposal]: WASM DotnetHostBuilder assembly loading progress callback",
        "labels":  [
                       "api-suggestion",
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "needs-further-triage",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95452",
        "createdAt":  "2023-11-30T10:02:47Z",
        "number":  95452,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1iYiw==",
                          "nodes":  [
                                        {
                                            "content":  "HOORAY",
                                            "user":  "hiyelbaz",
                                            "createdAt":  "2023-11-30T19:10:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GerardSmit",
                                            "createdAt":  "2023-12-01T00:32:07Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "romfir",
                                            "createdAt":  "2024-01-16T19:14:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "toxik",
                                            "createdAt":  "2024-01-30T21:04:51Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2024-12-12T16:42:06Z",
        "body":  "For use-cases which don\u0027t need C# to interact with the UI, but they just need to calculate some logic in dotnet.\r\n\r\nIt already worked in Net7 with some fiddling, there is known use in the community since.\r\n\r\nIt works well in Net8.\r\nWe should create demo how to start the single-threaded dotnet on separate WebWorker and how to `postMessage` json messages to it.\r\n\r\nFor now it\u0027s `wasmbrowser` template and people have to figure out the `WebWorker` part themself.\r\n\r\n```\r\ndotnet workload install wasm-tools\r\ndotnet workload install wasm-experimental\r\ndotnet new wasmbrowser\r\n```\r\n\r\n\r\n- [ ] Create another project template / sample.\r\n- [x] Create demo repository for ReactJS app: https://github.com/ilonatommy/reactWithDotnetOnWebWorker\r\n- [x] Create demo repository for Blazor WASM app: https://github.com/ilonatommy/blazorWithDotnetOnWebWorker\r\n- [ ] Write documentation for it or blog article",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfkG1Jg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5tSC01",
                                           "createdAt":  "2023-11-30T10:02:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFor use-cases which don\u0027t need C# to interact with the UI, but they just need to calculate some logic in dotnet.\r\n\r\nIt already worked in Net7 with some fiddling, there is known use in the community since.\r\n\r\nIt works well in Net8.\r\nWe should create demo how to start the single-threaded dotnet on separate WebWorker and how to pass json messages to it.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Runtime.InteropServices.JavaScript`, `os-browser`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-30T10:02:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vG5CX",
                                           "createdAt":  "2023-12-20T08:44:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "https://github.com/Tewr/BlazorWorker",
                                           "updatedAt":  "2023-12-20T08:44:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vPxZY",
                                           "createdAt":  "2023-12-21T14:48:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hiyelbaz",
                                           "body":  "\u003e https://github.com/Tewr/BlazorWorker\r\n\r\nLack of dotnet 8.0 support...",
                                           "updatedAt":  "2023-12-21T14:48:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vbJk_",
                                           "createdAt":  "2023-12-26T09:07:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODQkZ4Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "Tewr",
                                                                               "createdAt":  "2023-12-26T10:26:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hiyelbaz",
                                                                               "createdAt":  "2023-12-26T17:14:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e \u003e https://github.com/Tewr/BlazorWorker\r\n\u003e \r\n\u003e Lack of dotnet 8.0 support...\r\n\r\nNot anymore https://github.com/Tewr/BlazorWorker/releases/tag/v4.0.0-preview2",
                                           "updatedAt":  "2023-12-26T09:07:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-Oof-",
                                           "createdAt":  "2024-05-17T14:44:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODiNdHA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2024-05-17T15:18:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danroth27",
                                           "body":  "@pavelsavara @lewing Where should the docs for this go? We put the [JSImport/JSExport content](https://learn.microsoft.com/aspnet/core/blazor/javascript-interoperability/import-export-interop) in the Blazor docs. Do we want this content to be part of the Blazor docs as well? Are we getting to the point where we really should have a dedicated doc section on .NET runtime capabilities for WebAssembly?",
                                           "updatedAt":  "2024-05-17T14:44:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-QbUm",
                                           "createdAt":  "2024-05-17T19:18:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "\u003e Are we getting to the point where we really should have a dedicated doc section on .NET runtime capabilities for WebAssembly?\r\n\r\nFrom my point of view a lot of things apply to both. In a lot of cases Blazor is really an UI library / application framework on top of runtime capabilities. Projecting such relation into docs seems good to me",
                                           "updatedAt":  "2024-05-17T19:18:15Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[browser][doc] how to start dotnet on WebWorker + demo",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95969",
        "createdAt":  "2023-12-13T17:33:25Z",
        "number":  95969,
        "author":  "kg",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-01-23T12:12:09Z",
        "body":  "https://github.com/dotnet/runtime/pull/95959 is cleaning up code and working towards all JS object handles having an associated \u0027proxy context\u0027 that represents the thread they belong to. This is a good approach, but it occurred to me that we should probably also encode the thread affinity into the JSHandle itself, if only to make debugging much easier.\r\n\r\nIn the current model we have two handle spaces, where some handles are negative numbers and some handles are positive numbers. The meaning of these handles depends on the current thread, since each JS thread has its own JS state and as a result values for each possible handle. i.e. the handles `-7` and `4` can point to different objects depending on the current thread.\r\n\r\nOn the managed side if you have a ProxyContext and numeric handle pair, you can figure out how to get to the correct thread in order to touch the object you care about. But if code incorrectly flows contexts around or something otherwise goes wrong, when you\u0027re in the JS debugger you may only have the JSHandle in front of you, or otherwise be unable to examine the managed state. That will make it unclear whether you\u0027re dealing with a thread confusion issue (right handle, wrong thread), a double free (this was the right handle once, but it isn\u0027t anymore) or memory corruption (this is just not a valid handle).\r\n\r\nMy thinking is that all JSHandles should probably have a new representation, either 32-bit IDs with the shape `0xMMNNNNNN` where `MM` is the tid, or 53-bit IDs where the first 32 bits are the handle and the upper 21 bits are the tid. We could validate the tid explicitly in debug builds, and in release builds for performance we could ignore it while still getting the benefit of having it there in failure cases.\r\n\r\ncc @pavelsavara ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObog9fg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5uiD1-",
                                           "createdAt":  "2023-12-13T17:33:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nhttps://github.com/dotnet/runtime/pull/95959 is cleaning up code and working towards all JS object handles having an associated \u0027proxy context\u0027 that represents the thread they belong to. This is a good approach, but it occurred to me that we should probably also encode the thread affinity into the JSHandle itself, if only to make debugging much easier.\r\n\r\nIn the current model we have two handle spaces, where some handles are negative numbers and some handles are positive numbers. The meaning of these handles depends on the current thread, since each JS thread has its own JS state and as a result values for each possible handle. i.e. the handles `-7` and `4` can point to different objects depending on the current thread.\r\n\r\nOn the managed side if you have a ProxyContext and numeric handle pair, you can figure out how to get to the correct thread in order to touch the object you care about. But if code incorrectly flows contexts around or something otherwise goes wrong, when you\u0027re in the JS debugger you may only have the JSHandle in front of you, or otherwise be unable to examine the managed state. That will make it unclear whether you\u0027re dealing with a thread confusion issue (right handle, wrong thread), a double free (this was the right handle once, but it isn\u0027t anymore) or memory corruption (this is just not a valid handle).\r\n\r\nMy thinking is that all JSHandles should probably have a new representation, either 32-bit IDs with the shape `0xMMNNNNNN` where `MM` is the tid, or 53-bit IDs where the first 32 bits are the handle and the upper 21 bits are the tid. We could validate the tid explicitly in debug builds, and in release builds for performance we could ignore it while still getting the benefit of having it there in failure cases.\r\n\r\ncc @pavelsavara \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekg\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`design-discussion`, `arch-wasm`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-13T17:33:30Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[wasm] encode thread affinity in JSHandle/JSVHandle",
        "labels":  [
                       "design-discussion",
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96112",
        "createdAt":  "2023-12-17T19:24:03Z",
        "number":  96112,
        "author":  "SerratedSharp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-01-23T12:06:55Z",
        "body":  "### Description\r\n\r\nWhen using params keyword in combination with JSImport, generates `Error CS0758  Both partial method declarations must use a params parameter or neither may use a params parameter`\r\n\r\n### Reproduction Steps\r\n\r\nI created a Console app and added Uno.Wasm.Boostrap:\r\n```XML\r\n\t\u003cItemGroup\u003e\r\n\t\t\u003cPackageReference Include=\"Uno.Foundation.Runtime.WebAssembly\" Version=\"5.0.19\" /\u003e\r\n\t\t\u003cPackageReference Include=\"Uno.Wasm.Bootstrap\" Version=\"8.0.3\" /\u003e\r\n\t\t\u003cPackageReference Include=\"Uno.Wasm.Bootstrap.DevServer\" Version=\"8.0.3\" /\u003e\r\n\t\u003c/ItemGroup\u003e\r\n```\r\n\r\nThen added this code in Program.cs which has a successful call using an intermediate function which calls down to a JSImport\u0027d function without `params` keyword, then demonstrates the failure scenario where calling to a JSImport\u0027d function directly with `params` keyword does not work and generates compile time error: \r\n```C#\r\nusing System.Runtime.InteropServices.JavaScript;\r\nnamespace DynamicReturnNoWorkInRelease;\r\n\r\ninternal class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        Console.WriteLine(\"Hello, World!\");\r\n\r\n        object data = JQueryProxy.SomeJSData();\r\n        GlobalJS.Console.Log(\"Data from C#:\", data);// log using JSObject reference\r\n\r\n        // trying to call signature using `params` keyword\r\n        //      Severity Code    Description Project File Line    Suppression State\r\n        //      Error CS0758  Both partial method declarations must use a params parameter or neither may use a params parameter DynamicReturnNoWorkInRelease\r\n        //      ..\\Microsoft.Interop.JavaScript.JSImportGenerator\\Microsoft.Interop.JavaScript.JSImportGenerator\\JSImports.g.cs\t68\r\n        GlobalProxy.Console.LogParams(\"Data from C#:\", data);// log using JSObject reference\r\n    }\r\n}\r\n\r\npublic static class GlobalJS\r\n{\r\n    public static class Console\r\n    {\r\n        // Work around error by using intermediate function with params keyword, then calling JSImport\u0027d func withou params keyword\r\n        public static void Log(params object[] parameters)\r\n        {\r\n            GlobalProxy.Console.Log(parameters);\r\n        }\r\n    }\r\n}\r\n\r\ninternal static partial class GlobalProxy\r\n{\r\n    internal static partial class Console\r\n    {\r\n        // Works successfully, but doesn\u0027t support params keyword\r\n        [JSImport(\"globalThis.console.log\")]\r\n        public static partial void\r\n            Log([JSMarshalAs\u003cJSType.Array\u003cJSType.Any\u003e\u003e] object[] parameters);\r\n\r\n        // Results in error CS0758\r\n        [JSImport(\"globalThis.console.log\")]\r\n        public static partial void\r\n           LogParams([JSMarshalAs\u003cJSType.Array\u003cJSType.Any\u003e\u003e] params object[] parameters);\r\n\r\n    }\r\n}\r\n```\r\n\r\nAttempting to compile results in:\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS0758\tBoth partial method declarations must use a params parameter or neither may use a params parameter\tDynamicReturnNoWorkInRelease\t.\\JSImportWithParams\\Microsoft.Interop.JavaScript.JSImportGenerator\\Microsoft.Interop.JavaScript.JSImportGenerator\\JSImports.g.cs\t68\tActive\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nI would expect this to work as deeper code should just see `params object[]` as a `object[]`\r\n\r\n### Actual behavior\r\n\r\nAttempting to compile results in:\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS0758\tBoth partial method declarations must use a params parameter or neither may use a params parameter\tDynamicReturnNoWorkInRelease\t.\\JSImportWithParams\\Microsoft.Interop.JavaScript.JSImportGenerator\\Microsoft.Interop.JavaScript.JSImportGenerator\\JSImports.g.cs\t68\tActive\r\n```\r\n\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Known Workarounds\r\n\r\nSample code demonstrates workaround of using an additional intermediate call supporting the params type, and calling into the JSImport\u0027d method without the params keyword.\r\n\r\n### Configuration\r\n\r\nRunning in Version 17.9.0 Preview 1.0 with final release of .NET 8 (not preview .NET 8).  Compiled to WASM using Uno.Bootstrap, but as far as I understand it, the JSImport capability is provided by .NET.\r\n\r\n### Other information\r\n\r\nMy guess is this should go to area-System.Runtime.InteropServices.JavaScript",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObvN0bw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5u0goF",
                                           "createdAt":  "2023-12-17T19:29:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SerratedSharp",
                                           "body":  "Attached reproduction (disregard the solution/project name)\r\n[JSImportWithParams.zip](https://github.com/dotnet/runtime/files/13697521/JSImportWithParams.zip)\r\n",
                                           "updatedAt":  "2023-12-17T19:29:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5u1teX",
                                           "createdAt":  "2023-12-18T05:16:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen using params keyword in combination with JSImport, generates `Error CS0758  Both partial method declarations must use a params parameter or neither may use a params parameter`\r\n\r\n### Reproduction Steps\r\n\r\nI created a Console app and added Uno.Wasm.Boostrap:\r\n```XML\r\n\t\u003cItemGroup\u003e\r\n\t\t\u003cPackageReference Include=\"Uno.Foundation.Runtime.WebAssembly\" Version=\"5.0.19\" /\u003e\r\n\t\t\u003cPackageReference Include=\"Uno.Wasm.Bootstrap\" Version=\"8.0.3\" /\u003e\r\n\t\t\u003cPackageReference Include=\"Uno.Wasm.Bootstrap.DevServer\" Version=\"8.0.3\" /\u003e\r\n\t\u003c/ItemGroup\u003e\r\n```\r\n\r\nThen added this code in Program.cs which has a successful call using an intermediate function which calls down to a JSImport\u0027d function without `params` keyword, then demonstrates the failure scenario where calling to a JSImport\u0027d function directly with `params` keyword does not work and generates compile time error: \r\n```C#\r\nusing System.Runtime.InteropServices.JavaScript;\r\nnamespace DynamicReturnNoWorkInRelease;\r\n\r\ninternal class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        Console.WriteLine(\"Hello, World!\");\r\n\r\n        object data = JQueryProxy.SomeJSData();\r\n        GlobalJS.Console.Log(\"Data from C#:\", data);// log using JSObject reference\r\n\r\n        // trying to call signature using `params` keyword\r\n        //      Severity Code    Description Project File Line    Suppression State\r\n        //      Error CS0758  Both partial method declarations must use a params parameter or neither may use a params parameter DynamicReturnNoWorkInRelease\r\n        //      ..\\Microsoft.Interop.JavaScript.JSImportGenerator\\Microsoft.Interop.JavaScript.JSImportGenerator\\JSImports.g.cs\t68\r\n        GlobalProxy.Console.LogParams(\"Data from C#:\", data);// log using JSObject reference\r\n    }\r\n}\r\n\r\npublic static class GlobalJS\r\n{\r\n    public static class Console\r\n    {\r\n        // Work around error by using intermediate function with params keyword, then calling JSImport\u0027d func withou params keyword\r\n        public static void Log(params object[] parameters)\r\n        {\r\n            GlobalProxy.Console.Log(parameters);\r\n        }\r\n    }\r\n}\r\n\r\ninternal static partial class GlobalProxy\r\n{\r\n    internal static partial class Console\r\n    {\r\n        // Works successfully, but doesn\u0027t support params keyword\r\n        [JSImport(\"globalThis.console.log\")]\r\n        public static partial void\r\n            Log([JSMarshalAs\u003cJSType.Array\u003cJSType.Any\u003e\u003e] object[] parameters);\r\n\r\n        // Results in error CS0758\r\n        [JSImport(\"globalThis.console.log\")]\r\n        public static partial void\r\n           LogParams([JSMarshalAs\u003cJSType.Array\u003cJSType.Any\u003e\u003e] params object[] parameters);\r\n\r\n    }\r\n}\r\n```\r\n\r\nAttempting to compile results in:\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS0758\tBoth partial method declarations must use a params parameter or neither may use a params parameter\tDynamicReturnNoWorkInRelease\t.\\JSImportWithParams\\Microsoft.Interop.JavaScript.JSImportGenerator\\Microsoft.Interop.JavaScript.JSImportGenerator\\JSImports.g.cs\t68\tActive\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nI would expect this to work as deeper code should just see `params object[]` as a `object[]`\r\n\r\n### Actual behavior\r\n\r\nAttempting to compile results in:\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS0758\tBoth partial method declarations must use a params parameter or neither may use a params parameter\tDynamicReturnNoWorkInRelease\t.\\JSImportWithParams\\Microsoft.Interop.JavaScript.JSImportGenerator\\Microsoft.Interop.JavaScript.JSImportGenerator\\JSImports.g.cs\t68\tActive\r\n```\r\n\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Known Workarounds\r\n\r\nSample code demonstrates workaround of using an additional intermediate call supporting the params type, and calling into the JSImport\u0027d method without the params keyword.\r\n\r\n### Configuration\r\n\r\nRunning in Version 17.9.0 Preview 1.0 with final release of .NET 8 (not preview .NET 8).  Compiled to WASM using Uno.Bootstrap, but as far as I understand it, the JSImport capability is provided by .NET.\r\n\r\n### Other information\r\n\r\nMy guess is this should go to area-System.Runtime.InteropServices.JavaScript\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eSerratedSharp\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `untriaged`, `area-System.Runtime.InteropServices.JavaScript`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-18T05:16:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5u83Rv",
                                           "createdAt":  "2023-12-18T19:43:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "radical",
                                           "body":  "cc @pavelsavara ",
                                           "updatedAt":  "2023-12-18T19:43:41Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[browser] Params keyword with JSImport",
        "labels":  [
                       "arch-wasm",
                       "feature-request",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97375",
        "createdAt":  "2024-01-23T11:15:08Z",
        "number":  97375,
        "author":  "eeegs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-01-24T11:17:28Z",
        "body":  "### Description\r\n\r\nEnums can\u0027t be formally marshalled across to javascript nor do they marshal when part of an object[] being passed over from c# for function.apply(this, args) to use.\r\n\r\n### Reproduction Steps\r\n\r\nTry and define this proxy stub;\r\n\r\n```\r\n[JSImport(\"getEnumValue\", \"Code\")]\r\ninternal static partial int GetEnumValue([JSMarshalAs\u003cJSType.Number\u003e]NumberTypes number);\r\n```\r\nand you get this error:\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\tDetails\r\nError\tSYSLIB1072\tThe type \u0027TestHost.Pages.Simple.NumberTypes\u0027 is not supported by source-generated JavaScript interop. The generated source will not handle marshalling of parameter \u0027number\u0027. For more information see https://aka.ms/dotnet-wasm-jsinterop\t19\tActive\t\r\n```\r\n\r\nEnums when defining directly or indirectly, should just auto marshal as a number.\r\n\r\n\r\n### Expected behavior\r\n\r\nEnum value turns up in javascript as a number\r\n\r\n### Actual behavior\r\n\r\nCan\u0027t compile, but if passing as an object, a proxy to the enum object is passed in.\r\n\r\n### Regression?\r\n\r\nNope, came with the new feature in .net 7\r\n\r\n### Known Workarounds\r\n\r\nNo exact ones.\r\n\r\n### Configuration\r\n\r\n.net8, blazor, x64\r\n\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcbiNzg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5xuI3O",
                                           "createdAt":  "2024-01-24T11:13:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nEnums can\u0027t be formally marshalled across to javascript nor do they marshal when part of an object[] being passed over from c# for function.apply(this, args) to use.\r\n\r\n### Reproduction Steps\r\n\r\nTry and define this proxy stub;\r\n\r\n```\r\n[JSImport(\"getEnumValue\", \"Code\")]\r\ninternal static partial int GetEnumValue([JSMarshalAs\u003cJSType.Number\u003e]NumberTypes number);\r\n```\r\nand you get this error:\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\tDetails\r\nError\tSYSLIB1072\tThe type \u0027TestHost.Pages.Simple.NumberTypes\u0027 is not supported by source-generated JavaScript interop. The generated source will not handle marshalling of parameter \u0027number\u0027. For more information see https://aka.ms/dotnet-wasm-jsinterop\t19\tActive\t\r\n```\r\n\r\nEnums when defining directly or indirectly, should just auto marshal as a number.\r\n\r\n\r\n### Expected behavior\r\n\r\nEnum value turns up in javascript as a number\r\n\r\n### Actual behavior\r\n\r\nCan\u0027t compile, but if passing as an object, a proxy to the enum object is passed in.\r\n\r\n### Regression?\r\n\r\nNope, came with the new feature in .net 7\r\n\r\n### Known Workarounds\r\n\r\nNo exact ones.\r\n\r\n### Configuration\r\n\r\n.net8, blazor, x64\r\n\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeeegs\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `untriaged`, `area-System.Runtime.InteropServices.JavaScript`, `os-browser`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-24T11:13:41Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[browser] JSImport can\u0027t do Enums",
        "labels":  [
                       "arch-wasm",
                       "feature-request",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97380",
        "createdAt":  "2024-01-23T12:23:38Z",
        "number":  97380,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-14T13:04:48Z",
        "body":  "Support for `float[]`, `Span\u003cSingle\u003e` and `ArraySegment\u003cSingle\u003e` in [JSImport]/[JSExport]\r\n\r\nAs requested in https://github.com/dotnet/runtime/discussions/97268",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcbU90g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5xmoFG",
                                           "createdAt":  "2024-01-23T12:23:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSupport for `Span\u003cSingle\u003e` and `ArraySegment\u003cSingle\u003e` in [JSImport]/[JSExport]\r\n\r\nAs requested in https://github.com/dotnet/runtime/discussions/97268\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `feature-request`, `area-System.Runtime.InteropServices.JavaScript`, `os-browser`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-23T12:23:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xmp5K",
                                           "createdAt":  "2024-01-23T12:28:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODT3Y7w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "eeegs",
                                                                               "createdAt":  "2024-01-24T07:42:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "cc @eeegs",
                                           "updatedAt":  "2024-01-23T12:28:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xsy6R",
                                           "createdAt":  "2024-01-24T07:42:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eeegs",
                                           "body":  "Please include arrays too - float[].\r\n\r\nThankyou for looking at this.  Taking a quick look at the various WASM doco and the WebGPU API, the ability to move data across the .Net/WASM/JavaScript divide with as little ceremony and no transformation is important for performant apps.  If we want C# to be a top contender we have to deal with this.\r\n\r\nWhat is stopping the full range of javascript TypedArrays being supported?  (sans clamped ones)?\r\n\r\nCan we discuss the mechanisms involved?",
                                           "updatedAt":  "2024-01-24T07:42:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xtT3S",
                                           "createdAt":  "2024-01-24T09:13:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e Please include arrays too - float[].\r\n\r\nAdded above.\r\n\r\n\u003e Can we discuss the mechanisms involved?\r\n\r\nMostly, this could be nice copy \u0026 paste PR from contributor (hint hint ..).\r\nYou just follow example of `double`.\r\n\r\nThere is \r\n- [C# public API](https://github.com/dotnet/runtime/blob/d56fad46e213f8eb8d36be8fe7d342700c0a253c/src/libraries/System.Runtime.InteropServices.JavaScript/ref/System.Runtime.InteropServices.JavaScript.cs#L251) of the runtime in `System.Runtime.InteropServices.JavaScript `, this needs to pass [API review process](https://github.com/dotnet/runtime/blob/main/docs/project/api-review-process.md). \r\n    - That\u0027s separate github issue, once you have working draft in a PR.\r\n    - (some of this is for the code generator to use)\r\n- Update the code [generator](https://github.com/dotnet/runtime/tree/main/src/libraries/System.Runtime.InteropServices.JavaScript/gen/JSImportGenerator).\r\n-  C# methods for the generated code [marshaler](https://github.com/dotnet/runtime/blob/d56fad46e213f8eb8d36be8fe7d342700c0a253c/src/libraries/System.Runtime.InteropServices.JavaScript/src/System/Runtime/InteropServices/JavaScript/Marshaling/JSMarshalerArgument.Double.cs#L97-L143)\r\n- Update the JS side of the marshaler for [array](https://github.com/dotnet/runtime/blob/main/src/mono/browser/runtime/marshal-to-js.ts#L523),  [segment](https://github.com/dotnet/runtime/blob/main/src/mono/browser/runtime/marshal-to-js.ts#L567)\r\n- update unit [tests](https://github.com/dotnet/runtime/blob/d56fad46e213f8eb8d36be8fe7d342700c0a253c/src/libraries/System.Runtime.InteropServices.JavaScript/tests/System.Runtime.InteropServices.JavaScript.UnitTests/System/Runtime/InteropServices/JavaScript/JSImportExportTest.cs#L263), [more](https://github.com/dotnet/runtime/blob/d56fad46e213f8eb8d36be8fe7d342700c0a253c/src/libraries/System.Runtime.InteropServices.JavaScript/tests/System.Runtime.InteropServices.JavaScript.UnitTests/System/Runtime/InteropServices/JavaScript/JSImportExportTest.cs#L474)\r\n\r\n- update [docs](https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/import-export-interop?view=aspnetcore-8.0), \r\n\r\nThis is not exhaustive list, but I guess if you understand the pattern you will be able to follow it and find all places.\r\n\r\n\u003e What is stopping the full range of javascript TypedArrays being supported? (sans clamped ones)?\r\n\r\nOther priorities, and also so far nobody asked for it. If you plan to work on it, please start with `float` and see if you can deliver that before you broaden your scope.\r\n\r\nJust to make it clear, what you get for `double` already is `TypedArray`, it\u0027s view or simple wrapper around it.\r\n\r\n",
                                           "updatedAt":  "2024-01-24T09:23:54Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[browser][JSImport] Support for marshaling float memory views",
        "labels":  [
                       "arch-wasm",
                       "help wanted",
                       "feature-request",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97381",
        "createdAt":  "2024-01-23T12:29:46Z",
        "number":  97381,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-01-24T07:45:54Z",
        "body":  "As requested in https://github.com/dotnet/runtime/discussions/97268",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcbM-0Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5xmqcU",
                                           "createdAt":  "2024-01-23T12:29:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAs requested in https://github.com/dotnet/runtime/discussions/97268\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `feature-request`, `area-System.Runtime.InteropServices.JavaScript`, `os-browser`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-23T12:29:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xsz7R",
                                           "createdAt":  "2024-01-24T07:45:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eeegs",
                                           "body":  "The extra types being discussed in #97380 should be included too.",
                                           "updatedAt":  "2024-01-24T07:45:53Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[browser][JSImport] Support for marshaling Memory\u003c\u003e",
        "labels":  [
                       "arch-wasm",
                       "feature-request",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98225",
        "createdAt":  "2024-02-09T14:23:04Z",
        "number":  98225,
        "author":  "guardrex",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-02T17:49:51Z",
        "body":  "In documenting runtime environment variable configuration for the .NET WebAssembly runtime in the Blazor documentation ...\r\n\r\n```javascript\r\nBlazor.start({\r\n  webAssembly: {\r\n    configureRuntime: dotnet =\u003e {\r\n      dotnet.withEnvironmentVariable(\"{NAME}\", \"{VALUE}\");\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n... I don\u0027t think that a documented list of the relevant environment variables (e.g., `MONO_*`, `DOTNET_*`, `COMPlus_*`) with descriptions exists in the https://github.com/dotnet/runtime/tree/main/docs coverage.\r\n\r\nIf such coverage doesn\u0027t exist in one spot (i.e., I\u0027d like to cross-link to it from the Blazor docs), is it possible to place such coverage? ... or is it possible for one of the engineers to provide me a list with brief descriptions that I can publish in the Blazor docs? Alternatively, I\u0027m left having to tell readers that a list isn\u0027t available at this time or say nothing and leave devs searching for such content on their own only to never find it.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOc5Fhdw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5zZeeT",
                                           "createdAt":  "2024-02-09T14:44:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "guardrex",
                                           "body":  "It also occurs to me that if it\u0027s decided that no list will ever exist ... for example due to too much churn in the runtime to make it stable enough to publish ... then I don\u0027t think we should have the public coverage in the Blazor docs. It seems to me that we\u0027d take the section that we have (and that I\u0027m currently updating on https://github.com/dotnet/AspNetCore.Docs/pull/31747/files) out of the Blazor docs and have the guidance over here in the `dotnet/runtime` docs.",
                                           "updatedAt":  "2024-02-09T14:44:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zkWF3",
                                           "createdAt":  "2024-02-12T15:33:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "@guardrex while the most obvious use for `withEnvironmentVariable` is to set variables that affect the runtime, there are also  other uses.  for example if an app is built with a `NativeFileReference` in order to include some C library, the environment variable setting could be used to affect the behavior of that C library.\r\n\r\nThat said, mono envrionment variables were documented in the mono manpage at one point, although we never moved the manpage to the dotnet/runtime repo.  I guess ideally we should turn it into some kind of markdown file. /cc @akoeplinger \r\nhttps://github.com/mono/mono/blob/main/man/mono.1\r\n\r\n`DOTNET_` (aka `COMPlus_`) environment variables are \"documented\" in \r\nhttps://github.com/dotnet/runtime/blob/f582c0b66b2b91b626ccce62ea0e37496446e79f/src/coreclr/inc/clrconfigvalues.h\r\n\r\nalthough nearly all of them do not apply to Mono",
                                           "updatedAt":  "2024-02-12T15:34:16Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Question/request for documentation on .NET WASM runtime env vars",
        "labels":  [
                       "documentation",
                       "area-System.Runtime.InteropServices.JavaScript"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98366",
        "createdAt":  "2024-02-13T16:29:15Z",
        "number":  98366,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6O6qA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maxkatz6",
                                            "createdAt":  "2024-08-15T21:37:35Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-06-05T08:39:53Z",
        "body":  "- no reflection or move reflection to C# of `BindManagedFunctionImpl`\r\n- `Interop.Runtime.BindCSFunction` should be only passing `MethodHandle` to JS\r\n- drop `mono_wasm_assembly_load`, `mono_wasm_assembly_find_class`, `mono_wasm_runtime_run_module_cctor`, `mono_wasm_assembly_find_method`\r\n- don\u0027t breach GC barrier\r\n- Add unit tests to `src\\mono\\wasm\\Wasm.Build.Tests\\MainWithArgsTests.cs` for each combination of `Main` method name, signature and visibility.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOr262fQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5zv9k9",
                                           "createdAt":  "2024-02-13T16:29:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n- no reflection or move reflection to C# of `BindManagedFunctionImpl`\r\n- `Interop.Runtime.BindCSFunction` should be only passing `MethodHandle` to JS\r\n- drop `mono_wasm_assembly_load`, `mono_wasm_assembly_find_class`, `mono_wasm_runtime_run_module_cctor`, `mono_wasm_assembly_find_method`\r\n- don\u0027t breach GC barrier\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Runtime.InteropServices.JavaScript`, `os-browser`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-13T16:29:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Iocj2",
                                           "createdAt":  "2024-08-15T21:38:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maxkatz6",
                                           "body":  "I would assume this is also necessary for NativeAOT-LLVM compatibility https://github.com/dotnet/runtimelab/issues/2626",
                                           "updatedAt":  "2024-08-15T21:38:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vSkZP",
                                           "createdAt":  "2025-06-04T17:47:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "flucas1",
                                           "body":  "@pavelsavara\nDo you think that is there a chance to have this in .NET 10? (In view of Native AOT - LLVM)",
                                           "updatedAt":  "2025-06-04T18:15:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vbrZ9",
                                           "createdAt":  "2025-06-05T08:39:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "no",
                                           "updatedAt":  "2025-06-05T08:39:52Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[browser][MT] use code generator to get JSExport methods/ reduce reflection",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99283",
        "createdAt":  "2024-03-05T11:26:20Z",
        "number":  99283,
        "author":  "maraf",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T17:26:31Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=589152\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=14217066\u0026resultId=100032\u0026paneView=debug\r\nBuild error leg or test failing: Wasm.Build.Tests.MT.Blazor.SimpleMultiThreadedTests.BlazorPublishRunTest\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssues.md#how-to-fill-out-a-known-issue-error-section).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"Actual:   \\u0022Current count: 0\\u0022\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=589152\r\n**Error message validated:** `[Actual:   \"Current count: 0\"`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 3/5/2024 11:26:40 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1114224](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1114224)|dotnet/runtime|[NoWebcil-ST-Wasm.Build.Tests.Blazor.BuildPublishTests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1114224\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=30590140\u0026resultId=100162)|dotnet/runtime#118355|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|1|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOet7iqw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc517izs",
                                           "createdAt":  "2024-03-05T11:26:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=589152\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=14217066\u0026resultId=100032\u0026paneView=debug\r\nBuild error leg or test failing: Wasm.Build.Tests.MT.Blazor.SimpleMultiThreadedTests.BlazorPublishRunTest\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssues.md#how-to-fill-out-a-known-issue-error-section).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"Actual:   \\u0022Current count: 0\\u0022\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emaraf\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `blocking-clean-ci`, `area-System.Runtime.InteropServices.JavaScript`, `Known Build Error`, `os-browser`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-03-05T11:26:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52aAZB",
                                           "createdAt":  "2024-03-08T22:46:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "Looks like this occasionally fails without anything showing up in the console log:\r\n\r\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=594151\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=14361764\u0026resultId=100165\u0026paneView=dotnet-dnceng.dnceng-build-release-tasks.helix-test-information-tab\r\n\r\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=595613\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=14412512\u0026resultId=100165\u0026paneView=dotnet-dnceng.dnceng-build-release-tasks.helix-test-information-tab\r\n\r\nThe console logs are cut off, but the testResults.xml has the matching failure message.",
                                           "updatedAt":  "2024-03-08T22:46:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54BkF3",
                                           "createdAt":  "2024-03-21T20:32:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "something fixed this?",
                                           "updatedAt":  "2024-03-21T20:32:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc563uKr",
                                           "createdAt":  "2024-04-17T14:42:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "They are blocked\r\nhttps://github.com/dotnet/runtime/blob/a9335181346a43b4f3ee14a3a4c4cb25992889d4/src/mono/wasm/Wasm.Build.Tests/Blazor/SimpleMultiThreadedTests.cs#L41",
                                           "updatedAt":  "2024-04-17T14:42:00Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[browser][mt][wbt] `Wasm.Build.Tests.BlazorWasmTestBase.BlazorRunTest` Current count: 0",
        "labels":  [
                       "test-failure",
                       "arch-wasm",
                       "disabled-test",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99539",
        "createdAt":  "2024-03-11T15:15:03Z",
        "number":  99539,
        "author":  "onionhammer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-12T17:17:05Z",
        "body":  "### Description\n\nWhen finding .wasm files in `detect_features_and_polyfill`, the `scriptUrlQuery` variable is derived from the importing module (import.meta.url) instead of where the blazor.boot.json file is, and there does not appear to be any way to configure it to look in a different path.\r\n\r\nThis means that bundlers which generate a module which imports the dotnet runtime will struggle to put the generated module into a _framework folder alongside the rest of the .NET/wasm assets.\n\n### Reproduction Steps\n\nCreate a vite project, import a .NET wasm assembly based project, build the vite project.\n\n### Expected behavior\n\nThe default behavior for loading .wasm files should be that it loads from the same directory as the blazor.boot.json file, or else provide a configuration (ala \".withConfigSource()\") which allows the caller to specify where the .wasm files are stored.\n\n### Actual behavior\n\nthe bundled javascript attempts to load the .wasm from whatever path it\u0027s currently on.\r\n\r\nloader/polyfills.ts:42\r\n\r\n![image](https://github.com/dotnet/runtime/assets/969938/4077c3cf-86e0-48b9-99cc-d084cd688517)\r\n\r\nwithout any possibility to configure where the assemblies actually are; i.e. \"./\" instead of \"./_framework/*\"\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdtsebw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc522x5v",
                                           "createdAt":  "2024-03-13T10:36:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "You have several workarounds at the moment\r\n- You can set `\u003cWasmRuntimeAssetsLocation\u003e./\u003c/WasmRuntimeAssetsLocation\u003e` MSBuild property to skip putting wasm runtime assets to `_framework` folder.\r\n- You can use [withResourceLoader](https://github.com/dotnet/runtime/blob/9843659f88d289ba04cc07af73c297d69fce9c07/src/mono/browser/runtime/dotnet.d.ts#L117) to modify on runtime a location where it loads assets from.\r\n\r\nWe are looking into making the wasm app structure more bundler friendly. Inlining boot config or https://github.com/dotnet/runtime/issues/86162 are one of the things",
                                           "updatedAt":  "2024-03-13T10:36:55Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[browser] Assembly search path should be relative to the blazor.boot.json, not the importing module.",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100411",
        "createdAt":  "2024-03-28T16:33:10Z",
        "number":  100411,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-29T09:35:34Z",
        "body":  "Currently the UI thread is attached Mono thread and can call into Managed code.\r\nThe downside is that it needs to enter GC barrier, which makes it participate in the stop-the-world.\r\n\r\nCurrent blockers are\r\n- reflection in `init_managed_exports`\r\n- `mono_wasm_gc_lock`, `mono_wasm_gc_unlock` used by Blazor\r\n- `monoObjectAsBoolOrNullUnsafe` used by Blazor\r\n- `monoStringToStringUnsafe` used by Blazor\r\n- `mono_wasm_assembly_load`, `mono_wasm_assembly_find_class`, `mono_wasm_assembly_find_method` by looking for entrypoint\r\n- GC roots in hybrid globalization\r\n\r\nAlso emscripten will complain about blocking UI thread when `ASSERTIONS` are enabled.\r\n`Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread`\r\n\r\nSee https://github.com/emscripten-core/emscripten/blob/8c81cac1bbae378bc7dde0c21c99602cbaf452d0/src/library_pthread.js#L910-L922\r\n\r\nIf we are unable to do this, the alternative is https://github.com/dotnet/runtime/issues/76963",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeLzWQQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc54vNZB",
                                           "createdAt":  "2024-03-28T16:33:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-28T16:33:36Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[browser][MT] make UI thread not managed/attached",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101115",
        "createdAt":  "2024-04-16T12:00:43Z",
        "number":  101115,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-02T17:51:13Z",
        "body":  "Because it\u0027s too difficult to setup Firefox to trust dev self signed SSL cert.\r\nSome test also fail on FF because of functional differences.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeriq1g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc56uKrW",
                                           "createdAt":  "2024-04-16T12:00:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-16T12:00:53Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[browser] secure WSS + HTTPS tests are disabled under Firefox",
        "labels":  [
                       "arch-wasm",
                       "disabled-test",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101169",
        "createdAt":  "2024-04-17T08:58:45Z",
        "number":  101169,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-17T12:39:22Z",
        "body":  " - after we know how to inject it via dev server\r\n - chrome driver is probably forwarding enough console to be able to skip it completely\r\n - geckodriver is not forwarding any console logs (maybe this is configuration issue)\r\n    - for that reason, some of the messages need to be duplicated in test-main, only after the proxy was already setup",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOluGJ2w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc561K0X",
                                           "createdAt":  "2024-04-17T09:00:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-17T09:00:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6W374N",
                                           "createdAt":  "2024-12-10T11:01:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "After https://github.com/dotnet/runtime/pull/109069 we don\u0027t use `test-main` anymore. Can we close it?",
                                           "updatedAt":  "2024-12-10T11:01:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6W4Ynb",
                                           "createdAt":  "2024-12-10T11:52:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "We still use test-main to run normal library unit tests. And this issue is about forwarding the console log, which FF doesn\u0027t do with geckodriver. So I think we can\u0027t",
                                           "updatedAt":  "2024-12-10T11:52:40Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[browser] move console proxy from runtime code into test-main",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101421",
        "createdAt":  "2024-04-23T11:10:23Z",
        "number":  101421,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3m7Yw==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "maxkatz6",
                                            "createdAt":  "2024-04-23T20:48:50Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "iSeiryu",
                                            "createdAt":  "2024-05-01T14:10:51Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-12-12T16:19:15Z",
        "body":  "How we could make webGL (and other native scenarios) possible with MT ?\r\n\r\n\u003e I believe that the lack of access to the \"true\" UI thread would completely break WebGL interop.\r\nWebGL doesn\u0027t have a dedicated present/swapBuffers call and instead just presents render results once the user code exits the current event callback. If JS API calls are getting enqueued from a worker thread, that would mean that webgl content will be \"presented\" on every single call, thus making any kind of rendering impossible.\r\n\r\n\u003e Another problem would be WebGL usage with SkiaSharp: Skia uses WebGL internally and expects those calls to happen on the \"true\" UI thread rather than on a web worker.\r\n\r\nFrom https://github.com/dotnet/runtime/issues/85592#issuecomment-2071286522\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjh3ZGw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc57gJzU",
                                           "createdAt":  "2024-04-23T11:11:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Few ideas for start\r\n- The JSImport calls to JS could be synchronous, but not re-entrant. \r\n    - Do you need synchronous callbacks, when/why/how ?\r\n- Note that UI thread is and will stay native/emscripten thread. \r\n    - some of sys calls and VFS POSIX calls are synchronously proxied to the UI thread. \r\n    - Perhaps we could make webGL native calls also proxied ? \r\n    - Search `proxiedFunctionTable` in emscripten codebase.",
                                           "updatedAt":  "2024-04-23T11:11:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57gK91",
                                           "createdAt":  "2024-04-23T11:14:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "cc @kekekeks @maxkatz6",
                                           "updatedAt":  "2024-04-23T11:14:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57g4Db",
                                           "createdAt":  "2024-04-23T12:49:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kekekeks",
                                           "body":  "In general WebGL calls should happen inside of the callback from  `window.requestAnimationFrame` on the browser UI thread. That particular callback timing is required to match the screen update rate.\r\n_All_ WebGL calls related to a single frame should happen inside of a single browser event loop iteration (i. e. inside of said \r\n`window.requestAnimationFrame` callback).\r\n\r\nSo the typical scenario would be:\r\n1) JS code from  `window.requestAnimationFrame` sets up rendering\r\n2) JS code _synchronously_ calls .NET code\r\n3) .NET code _synchronously_  calls WebGL functions either via JSImport or emscripten P/Invokes or Skia code that uses emscripten APIs internally. All of those should happen inside of the same  `window.requestAnimationFrame`  callback\r\n4) frame rendering is finished\r\n5) .NET code exits and returns control back to JS\r\n6) JS returns from `window.requestAnimationFrame` callback\r\n7) Browser assumes that we are done rendering and queues render results for presentation\r\n\r\nSo WebGL rendering requires synchronous JS-\u003e.NET-\u003eJS calls directly on the main browser thread.\r\n\r\nNote that it\u0027s not possible to prepare everything as a \"call list\", since some WebGL calls can read data back from GPU in synchronous manner and we can\u0027t interrupt the call sequence by exiting the event callback since the browser would assume that we are done rendering the frame.\r\n\r\n\r\n",
                                           "updatedAt":  "2024-04-23T13:10:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57hJQg",
                                           "createdAt":  "2024-04-23T13:12:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kekekeks",
                                           "body":  "Note that we don\u0027t _really_ need `lock()`/`.Wait` on the browser thread (there are currently some short-lived locks by those can be replaced with lock-free code), just a way to call into .NET code and call JS back.",
                                           "updatedAt":  "2024-04-23T13:14:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57hOUN",
                                           "createdAt":  "2024-04-23T13:19:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kekekeks",
                                           "body":  "Actually, I haven\u0027t considered locks inside of SkiaSharp. It utilizes locks extensively for its object handle tracking. Those are rather short lived (and won\u0027t even be contended in most apps), so spinlocks should be fine.",
                                           "updatedAt":  "2024-04-23T13:19:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57hupj",
                                           "createdAt":  "2024-04-23T14:18:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e WebGL calls should happen inside of the callback from `window.requestAnimationFrame` on the browser UI thread. \r\n\u003e 3. .NET code _synchronously_  calls WebGL functions\r\n\r\nThis is nasty nested synchronous callback. \r\nThe the UI thread is spin-waiting for the semaphore from the first call to resolve/return, when you want to deliver the message about the nested call.\r\n\r\nThe syscalls in the `proxiedFunctionTable` are exceptions from this rule and will get executed inside of the UI spin-lock.\r\nIt\u0027s in the middle of unrelated business logic, which is on stack, it could arrive from any other thread.\r\nIt\u0027s processed kind of \"out of order\" WRT the current synchronous call.\r\nThis is how emscripten VFS works, not pretty, but it \"works\".\r\n\r\n\u003e Note that we don\u0027t _really_ need `lock()`/`.Wait` on the browser thread.\r\n\r\nYou can try it with \r\n```js\r\n        dotnet.withConfig({\r\n            jsThreadBlockingMode: \"ThrowWhenBlockingWait\",\r\n        });\r\n```\r\n\r\nor with `\"DangerousAllowBlockingWait\"`\r\n\r\nwhich will allow you to make (un-nested) synchronous JSExport calls.\r\n\r\nMy lessons learned from working on this for last 12 months is that you never know.\r\n- you could be lucky and win the race for the lock\r\n- C# spin-wait for while and then win the race for the lock\r\n- actually engage in real wait\r\n    - we will throw PNSE when `ThrowWhenBlockingWait`, but it\u0027s far from 100% covered.\r\n    - this is to let you learn that you are blocking the managed thread and the UI thread as well\r\n    - chance you see this in test is low\r\n        - one of many of CI runs of unit tests on runtime repo, there are many tests\r\n\r\nwhen UI thread is blocked, event loop is blocked, UI doesn\u0027t render, `postMessage` doesn\u0027t work, debugger sucks, new WebWorkers are impossible to spawn.\r\nwhen deputy thread is blocked it can\u0027t receive emscripten messages from other threads.\r\n\r\nIf there is wait/promise chain this could be deadlock. \r\nHow do you know that you are not blocking waiting for HTTP stream in 3rd party code you don\u0027t own. \r\nThat HTTP promise would never resolve.\r\n\r\nAll that said, this is not to say \"I give up\" 😉 \r\n\r\nDoes it have to be managed code, whatever is talking to webGL from `requestAnimationFrame` callback ?\r\nCould all what\u0027s needed be pre-computed on background thread and applied in JS or C ?\r\n\r\nBlazor people have `renderBatch` implemented in just JavaScript. The current problem with that is that they are reading the \"diff\" directly from managed memory. They also have server side diff message that is applied to DOM. They will have to adopt \"diff message\" rather than \"C# memory scan\" to make Blazor MT compatible. More about it [here](https://github.com/dotnet/aspnetcore/issues/54365)",
                                           "updatedAt":  "2024-04-23T14:18:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57h3Cy",
                                           "createdAt":  "2024-04-23T14:29:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Also would this help ?\r\nhttps://github.com/kripken/webgl-worker\r\n\r\nOr this\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/transferControlToOffscreen\r\n\r\nWe have draft of `JSWebWorker` API, which allows your C# to execute managed code on new WebWorker and JS interop with state of that WebWorker. Again this is not public API yet and also has the problem with blocking .Wait vs event loop and resolving promises.\r\n",
                                           "updatedAt":  "2024-04-23T14:41:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57iQvw",
                                           "createdAt":  "2024-04-23T14:55:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kekekeks",
                                           "body":  "\u003eThe the UI thread is spin-waiting for the semaphore from the first call to resolve/return, when you want to deliver the message about the nested call.\r\n\r\nWhy does the runtime need to marshal the call to a web-worker in the first place? Can\u0027t it just execute the code directly on the UI thread? The requirement for WebGL rendering is to specifically run everything rendering-related on the main thread inside of the `requestAnimationFrame` callback and to take minimum possible time, since the code has to run 240 times per second with 240Hz monitors and be synchronized to VSync.\r\n\r\n\u003ewhen UI thread is blocked, event loop is blocked, UI doesn\u0027t render, postMessage doesn\u0027t work, debugger sucks, new WebWorkers are impossible to spawn.\r\n\r\nWe only need the UI thread to run our rendering code. It doesn\u0027t do any IO nor wait on any long-running semaphores (i. e. spin-waits are fine).\r\n\r\nThe need to run all of the rendering code directly inside of `requestAnimationFrame` is a requirement from browsers, not from our architecture.\r\n\r\n\u003eCould all what\u0027s needed be pre-computed on background thread and applied in JS or C ?\r\n\r\nUnfortunately, not really, some of WebGL calls are not fire-and-forget but require actual handling of returned values or are supposed to block on reading back from GPU (i. e. if we want to copy some computed data from GPU to CPU mid-frame). Also, we aren\u0027t doing most of the calls by ourselves, the usual chain is SkiaSharp \u003e Skia (native) -\u003e emscripten opengl layer -\u003e JS, so even if we don\u0027t need readback, we can\u0027t even replay the commands on the UI thread without executing managed code there\r\n\r\n\u003e https://github.com/kripken/webgl-worker\r\n\r\nIt doesn\u0027t allow a huge part of OpenGL calls to work. I. e. it doesn\u0027t support reading back from GPU memory.\r\n\r\n\u003e https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/transferControlToOffscreen\r\n\r\nIIRC OffscreenCanvas doesn\u0027t support WebGL contexts on some browsers (last time we\u0027ve checked it didn\u0027t work with Safari), only 2d drawing.\r\n\r\nIf it does work now, the requirements would be mostly the same: we\u0027ll need to call into .NET from JS running in a web worker and have callbacks executed in the same worker and without costly cross-worker marshalling, since there are potentially thousands of calls per-frame.\r\n\r\n\u003e Again this is not public API yet and also has the problem with blocking .Wait vs event loop and resolving promises.\r\n\r\nThe worker\u0027s event loop shouldn\u0027t be occupied with anything but requestAnimationFrame and gl context loss/restore callbacks, so it should be fine to have blocking waits there as long as those don\u0027t consume CPU time.",
                                           "updatedAt":  "2024-04-23T15:30:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57i9GH",
                                           "createdAt":  "2024-04-23T15:41:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e Why does the runtime need to marshal the call to a web-worker in the first place? \r\n\r\nBecause we are not willing support those deadlock scenarios. \r\nMore explanations in the [design doc](https://github.com/dotnet/designs/pull/301), the problems section.\r\n\r\nDuring the development we made many prototypes trying to make it possible. It randomly deadlocks like 30% of our unit tests.\r\n\r\n\u003e If it does work now, the requirements would be mostly the same: we\u0027ll need to call into .NET from JS running in a web worker and have callbacks executed in the same worker\r\n\r\nThat\u0027s what the `JSWebWorker` does, there is no messaging there, same thread executes JS and managed code. And also can really blocking wait without spinning.\r\n\r\n\r\n",
                                           "updatedAt":  "2024-04-23T16:02:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57jGN5",
                                           "createdAt":  "2024-04-23T15:51:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e IIRC OffscreenCanvas doesn\u0027t support WebGL contexts on some browsers (last time we\u0027ve checked it didn\u0027t work with Safari), only 2d drawing.\r\n\r\nI don\u0027t have any experience with it, but they say \"Safari 16.4 (Released 2023-03-27)\"\r\nhttps://caniuse.com/?search=transferControlToOffscreen",
                                           "updatedAt":  "2024-04-23T15:51:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57jXJ1",
                                           "createdAt":  "2024-04-23T16:25:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kekekeks",
                                           "body":  "Seems to work with macOS 14 and iOS 17.4.\r\n\r\nhttps://bugs.webkit.org/show_bug.cgi?id=183720#c18 states that WebGL is supported for OffscreenCanvas on Sonoma+ (released Sep 2023) and iOS 17+ and isn\u0027t supported with Ventura regardless of Safari version.\r\n\r\nBy the time .NET 9 is out, those should be widespread enough to justify them as a requirement for MT support, I guess.",
                                           "updatedAt":  "2024-04-23T16:25:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57jdHv",
                                           "createdAt":  "2024-04-23T16:38:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I suggest you start with \"demo\" project, rather than the actual codebase.\r\nJust MT dotnet and webGL demo. I\u0027m willing to look over your shoulder and assist with such demo.\r\n\r\nPerhaps we should resurrect [ST](https://github.com/pavelsavara/dotnet-wasm-raytracer) or [MT](https://github.com/lambdageek/dotnet-wasm-raytracer) raytracer demo and bring it to Net9",
                                           "updatedAt":  "2024-04-23T16:38:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57jjIN",
                                           "createdAt":  "2024-04-23T16:52:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kekekeks",
                                           "body":  "Is there some doc on using `JSWebWorker` API from an app when building with `9.0.100-preview.3.24204.13`  SDK?",
                                           "updatedAt":  "2024-04-23T16:52:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57jj2Y",
                                           "createdAt":  "2024-04-23T16:53:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfQ2Wg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2024-04-23T17:06:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kekekeks",
                                           "body":  "Ah, the source suggests to just use reflection, gotcha.",
                                           "updatedAt":  "2024-04-23T16:53:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57jsJk",
                                           "createdAt":  "2024-04-23T17:07:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Also you can use [nightly build](https://aka.ms/dotnet/9.0.1xx/daily/dotnet-sdk-win-x64.zip). There are still good changes since last preview.",
                                           "updatedAt":  "2024-04-23T17:07:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57j5zW",
                                           "createdAt":  "2024-04-23T17:38:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kekekeks",
                                           "body":  "We\u0027ll need to transfer the OffscreenCanvas object created on the UI thread to the worker via [postMessage](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage). \r\nIs there a way to get the [Worker](https://developer.mozilla.org/en-US/docs/Web/API/Worker) JS object for a freshly started `JSWebWorker` instance? Or some API to do such transfer using managed APIs? Run methods just return a `Task`.",
                                           "updatedAt":  "2024-04-23T17:38:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57kcDA",
                                           "createdAt":  "2024-04-23T18:37:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kekekeks",
                                           "body":  "It seems that people are using `PThread.pthreads[id].worker` from emscripten, but I\u0027m not sure if that\u0027s the correct way of accessing the worker object.",
                                           "updatedAt":  "2024-04-23T18:37:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57qMEP",
                                           "createdAt":  "2024-04-24T10:45:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e It seems that people are using `PThread.pthreads[id].worker` from emscripten, but I\u0027m not sure if that\u0027s the correct way of accessing the worker object.\r\n\r\nGood enough for the demo, but not long term. This is quite low level (not an API from our perspective).\r\n\r\nWe also have emscripten C message queue. And also have `postMessage` channels between UI and the worker in the `dotnet.runtime.js`. We consider those internal implementation detail.\r\n\r\nI prefer that the handshake is initiated from the worker side and that users don\u0027t touch emscripten `PThread.pthreads`\r\n\r\nYou can `await JSHost.ImportAsync()` JS script into the worker inside the `JSWebWorker` C# callback. \r\n`self.getDotnetRuntime(0)` is a way how you get the JS API in there. That will allow you to bind JSExport and JSImports in the worker.\r\n\r\nThat will allow you to `self.postMessage` to the UI thread. \r\nBut the handler is emscripten/runtime and we do not expose a way how to add handler on the UI side via our JS API.\r\n\r\nI\u0027m thinking on how to design it in a clean way.",
                                           "updatedAt":  "2024-04-24T10:45:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57qRDY",
                                           "createdAt":  "2024-04-24T10:59:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kekekeks",
                                           "body":  "\u003eI prefer that the handshake is initiated from the worker side and that users don\u0027t touch emscripten PThread.pthreads\r\n\r\nYes, but we need to _transfer_ a transferable JS object _from_ UI thread _to_ the worker thread and that _requires_ it to be passed in the second array argument of `postMessage`. That particular `postMessage`  call has to happen on the Worker instance on the UI thread.",
                                           "updatedAt":  "2024-04-24T10:59:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57qURB",
                                           "createdAt":  "2024-04-24T11:07:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Or dedicated channel which could be somehow located in the JS of the UI thread",
                                           "updatedAt":  "2024-04-24T11:07:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57_Xlb",
                                           "createdAt":  "2024-04-26T22:52:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kekekeks",
                                           "body":  "```\r\n[MONO] JSWebWorker was disposed while running, ManagedThreadId: 3.\r\n at System.Environment.get_StackTrace() at System.Runtime.InteropServices.JavaScript.JSWebWorker.JSWebWorkerInstance`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Dispose(Boolean disposing) \r\nat System.Runtime.InteropServices.JavaScript.JSWebWorker.JSWebWorkerInstance`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Finalize()\r\n```",
                                           "updatedAt":  "2024-04-26T22:52:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57_f6T",
                                           "createdAt":  "2024-04-26T23:53:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kekekeks",
                                           "body":  "I had to use this because of that error:\r\n```cs\r\n\r\n    public static class JSWebWorkerClone\r\n    {\r\n        private static readonly MethodInfo _setExtLoop;\r\n        private static readonly MethodInfo _intallInterop;\r\n\r\n        [DynamicDependency(DynamicallyAccessedMemberTypes.All, \"System.Runtime.InteropServices.JavaScript.JSSynchronizationContext\", \r\n            \"System.Runtime.InteropServices.JavaScript\")]\r\n        [DynamicDependency(DynamicallyAccessedMemberTypes.All, \"System.Runtime.InteropServices.JavaScript.JSHostImplementation\", \r\n            \"System.Runtime.InteropServices.JavaScript\")]\r\n        [UnconditionalSuppressMessage(\"Trimming\", \r\n            \"IL2026:Members annotated with \u0027RequiresUnreferencedCodeAttribute\u0027 require dynamic access otherwise can break functionality when trimming application code\",\r\n            Justification = \"Private runtime API\")]\r\n        static JSWebWorkerClone()\r\n        {\r\n#pragma warning disable IL2075\r\n            var syncContext = typeof(System.Runtime.InteropServices.JavaScript.JSHost)\r\n                .Assembly!.GetType(\"System.Runtime.InteropServices.JavaScript.JSSynchronizationContext\")!;\r\n            var hostImpl = typeof(System.Runtime.InteropServices.JavaScript.JSHost)\r\n                .Assembly!.GetType(\"System.Runtime.InteropServices.JavaScript.JSHostImplementation\")!;\r\n            \r\n            _setExtLoop = hostImpl.GetMethod(\"SetHasExternalEventLoop\")!;\r\n            _intallInterop = syncContext.GetMethod(\"InstallWebWorkerInterop\")!;\r\n#pragma warning restore IL2075\r\n        }\r\n\r\n        public static Task RunAsync(Func\u003cTask\u003e run)\r\n        {\r\n            var tcs = new TaskCompletionSource(TaskCreationOptions.RunContinuationsAsynchronously);\r\n            var th = new Thread(_ =\u003e\r\n            {\r\n                _intallInterop.Invoke(null, [false, CancellationToken.None]);\r\n                try\r\n                {\r\n                    run().ContinueWith(t =\u003e\r\n                    {\r\n                        if (t.IsFaulted)\r\n                            tcs.TrySetException(t.Exception);\r\n                        else if (t.IsCanceled)\r\n                            tcs.TrySetCanceled();\r\n                        else\r\n                            tcs.TrySetResult();\r\n                    });\r\n                }\r\n                catch(Exception e)\r\n                {\r\n                    tcs.TrySetException(e);\r\n                }\r\n            })\r\n            {\r\n                Name = \"Manual JS worker\"\r\n            };\r\n            _setExtLoop.Invoke(null, [th]);\r\n            th.Start();\r\n            return tcs.Task;\r\n        }\r\n        \r\n    }\r\n```\r\n\r\nAlso had to replace your `onmessage` handler in the worker since it was freaking out on unknown command (EMScripten doesn\u0027t do it, BTW) and used pthread_self + PThread.pthreads[] combo.\r\n\r\nA PoC seems to work.",
                                           "updatedAt":  "2024-04-26T23:53:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57_ge8",
                                           "createdAt":  "2024-04-26T23:58:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODhc8iA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fMichaleczek",
                                                                               "createdAt":  "2024-05-10T19:49:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kekekeks",
                                           "body":  "Missing APIs:\r\n\r\n1) JSWorker.postMessage with transfer array (need to transfer OffscreenCanvas, it\u0027s not clonable), that is somehow exposed directly to JS.\r\n2) OnMessage method on the worker that doesn\u0027t conflict with runtime-installed onmessage\r\n\r\n",
                                           "updatedAt":  "2024-04-26T23:58:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59x9JM",
                                           "createdAt":  "2024-05-14T13:27:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "This demo is now MT on Net9 preview 3 https://pavelsavara.github.io/dotnet-wasm-raytracer/\r\nIt doesn\u0027t really do any WebGL tho",
                                           "updatedAt":  "2024-05-14T13:27:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ODsHm",
                                           "createdAt":  "2024-09-30T14:13:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "note to self: sending message to managed code and spin-waiting inside `requestAnimationFrame` would be OK, but we also need to dispatch synchronous calls back from managed to UI thread, while UI is still waiting for \"done\" message. \r\n\r\nI don\u0027t really understand if emscripten\u0027s GL emulator could run on a worker and if it would proxy syscalls back to UI thread.\r\n\r\nPerhaps some tweaks to emscripten\u0027s message queue would do it ?\r\nThere is already queue which is able to run callbacks inside of other unrelated waits.\r\n\r\ncc @jeromelaban ",
                                           "updatedAt":  "2024-09-30T14:13:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ODuan",
                                           "createdAt":  "2024-09-30T14:17:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "The other idea I have is to move all the emscripten\u0027s OS/syscalls emulator to dedicated web worker. That is to move VFS (or use WASMFS) and move thread spawning code and other syscalls.\r\n\r\nThis could possibly free-up the UI thread to be able to run managed code (again). It would block render and spin-wait on anything cross-thread or on GC.\r\n\r\nSee\r\nhttps://github.com/emscripten-core/emscripten/blob/0f13010ecf790c3d08c833167c863731ddb42ed6/system/lib/pthread/emscripten_yield.c#L44-L46\r\n\r\nhttps://github.com/emscripten-core/emscripten/blob/0f13010ecf790c3d08c833167c863731ddb42ed6/system/lib/pthread/proxying.c#L38-L40",
                                           "updatedAt":  "2024-09-30T14:30:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OFcvo",
                                           "createdAt":  "2024-09-30T17:39:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD0NRQA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2024-10-01T08:20:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kekekeks",
                                           "body":  "\u003eI don\u0027t really understand if emscripten\u0027s GL emulator could run on a worker and if it would proxy syscalls back to UI thread\r\n\r\nThe problem is not emscipten, but the way WebGL works in general:\r\n1) once you return from a callback, the browser assumes that you have finished rendering the frame and presents it, so you have to make _all_ of your calls inside of a single callback from the main browser event loop\r\n2) some OpenGL calls are blocking and actually return values, so you can\u0027t just record OpenGL commands for the entire frame and execute those as a batch\r\n\r\nSo any complex OpenGL code that wants to use a UI-thread-bound WebGL context has to run on the UI thread too. \r\n\r\n\r\nIn Avalonia we currently spawn a dedicated web-worker using [a hacked JSWebWorker version](https://github.com/AvaloniaUI/Avalonia/blob/b272283e5057d65617246b9ebf64c4e0e281d88b/src/Browser/Avalonia.Browser/Rendering/RenderWorker.cs#L52-L107), [transfer](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage#transfer) a canvas to said webworker and use a worker-bound WebGL context. `requestAnimationFrame` is also called in this dedicated worker.\r\n\r\nThat approach prevents us from using several advanced features like using `\u003cvideo\u003e` element as a texture, but works fine otherwise. I also believe that a dedicated render worker is the better approach anyway since it allows us to push frames when the UI thread is otherwise blocked by something.\r\n\r\nBTW, Avalonia is currently broken with the latest .NET 9 RC because you\u0027ve bumped emscripten and SkiaSharp wasn\u0027t yet updated to adjust for that change, so you can\u0027t play with it, sorry.\r\n\r\n\r\n\r\n\r\nNote that aside from OpenGL there is a similar problem with event handlers. Some of browser events kinda expect you to answer synchronously (e. g. if you want to run some logic in keyDown event and decide if it should be marked as handled or not), so enforced async isn\u0027t always feasible in general. Some of JS-\u003emanaged callbacks just need to be synchronous and need to support JS-\u003emanaged-\u003eJS roundtrip, one just needs to be really careful to avoid those whenever possible.",
                                           "updatedAt":  "2024-09-30T17:39:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OHdkb",
                                           "createdAt":  "2024-09-30T23:00:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maxkatz6",
                                           "body":  "\u003e Some of browser events kinda expect you to answer synchronously (e. g. if you want to run some logic in keyDown event and decide if it should be marked as handled or not), so enforced async isn\u0027t always feasible in general.\r\n\r\nI would expect this issue to affect Blazor WASM applications too.\r\n\r\n\u003e SkiaSharp wasn\u0027t yet updated to adjust for that change\r\n\r\nNew SkiaSharp nightly was released with new emscripten builds. We need to adjust NativeFileReference to look for a newer version though.",
                                           "updatedAt":  "2024-09-30T23:01:53Z"
                                       }
                                   ],
                         "totalCount":  28
                     },
        "title":  "[browser][MT] WebGL with threads - requestAnimationFrame",
        "labels":  [
                       "arch-wasm",
                       "feature-request",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101913",
        "createdAt":  "2024-05-06T11:22:32Z",
        "number":  101913,
        "author":  "kekekeks",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-12T16:26:51Z",
        "body":  "We actively utilize `JSType.Function` for JS-\u003emanaged callbacks and encountering problems when trying to add support for multithreaded mode: MT requires JS-\u003emanaged calls to be async, however returning `Task` type doesn\u0027t work for `JSType.Function`:\r\n \r\n \u003e Error SYSLIB1072 : The type \u0027System.Func\u003cSystem.Threading.Tasks.Task\u003e\u0027 is not supported by source-generated JavaScript interop.\r\n\u003e The generated source will not handle marshalling of parameter \u0027callback\u0027.\r\n\u003e For more information see https://aka.ms/dotnet-wasm-jsinterop\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjl1JgQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc586y3O",
                                           "createdAt":  "2024-05-06T11:22:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kekekeks",
                                           "body":  "@pavelsavara",
                                           "updatedAt":  "2024-05-06T11:22:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OXUmB",
                                           "createdAt":  "2024-10-02T12:07:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Interesting problem about this is that passing JS function (which has thread affinity) to another thread would force us to also dispatch the callback to different thread/worker.",
                                           "updatedAt":  "2024-10-02T12:07:00Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[browser] JSMarshalAs(JSType.Function) support for Task",
        "labels":  [
                       "arch-wasm",
                       "feature-request",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102011",
        "createdAt":  "2024-05-08T11:22:27Z",
        "number":  102011,
        "author":  "kekekeks",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4BZbQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maxkatz6",
                                            "createdAt":  "2024-05-20T15:20:07Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-05-13T14:13:56Z",
        "body":  "### Background and motivation\r\n\r\n[Certain javascript objects](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Transferable_objects) are intended to be transferred to web worker scope rather than be just copied. Notable examples are OffscreenCanvas, streams, video frames, webrtc, etc.\r\n\r\n\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Runtime.InteropServices.JavaScript;\r\n\r\npublic class JSHost\r\n{\r\n    /// \u003csummary\u003e\r\n    /// Transfers the object from its context into the current scope via postMessage API.\r\n    ///  Passed JSObject instance immediately becomes disposed and is no longer usable after this call.\r\n    ///  Users should await the task and use the transferred object instead.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cparam name=\"object\"\u003eThe object to be transferred into the current context.\u003c/param\u003e\r\n    /// \u003creturns\u003eA task that completes with a reference to the new object in the current context.\u003c/returns\u003e\r\n    public Task\u003cJSObject\u003e TransferToCurrentContextAsync(JSObject object);\r\n}\r\n```\r\n\r\n\r\n\r\n### API Usage\r\n```cs\r\nJSObject offscreenCanvas = JsImportSafeNativeMethods.TransferControlToOffscreen(canvas);\r\nJSWebWorker.RunAsync(() =\u003e\r\n{\r\n     var canvas = await JSHost.TransferToCurrentContextAsync(offscreenCanvas);\r\n     // use canvas\r\n});\r\n```\r\n\r\n### Alternative Designs\r\n\r\nProvide a way to add handlers to custom messages for `message` event and `postMessage` API of  `Worker` /`DedicatedWorkerGlobalScope` objects\r\n\r\n@pavelsavara",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfZ6j-Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc59nqP5",
                                           "createdAt":  "2024-05-13T13:14:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "It would be good to be able to postMessage between UI thread and any `JSWebWorker` in both directions.\r\nAlso to subscribe to event handler. For that I think we would be better off if we modeled the API in the same way as \r\n`postMessage` and `onMessage`. For that we need to somehow pass the identity of the `JSWebWorker` to the main thread. At the moment the draft of the `JSWebWorker` API doesn\u0027t offer such identity or channel.",
                                           "updatedAt":  "2024-05-13T13:14:17Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[browser][MT][API Proposal]: Provide an API to transfer JS objects between main browser thread and JSWebWorker contexts",
        "labels":  [
                       "api-suggestion",
                       "arch-wasm",
                       "feature-request",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104492",
        "createdAt":  "2024-07-05T21:09:17Z",
        "number":  104492,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-26T09:50:42Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=731485\r\nBuild error leg or test failing: WasmTestOnFirefox-MT-System.Runtime.InteropServices.JavaScript.Tests.WorkItemExecution\r\nPull request: https://github.com/dotnet/runtime/pull/104483\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"System.Runtime.InteropServices.JavaScript.Tests\u0027 END OF WORK ITEM LOG: Command timed out\",\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": true,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=731485\r\n**Error message validated:** `[System.Runtime.InteropServices.JavaScript.Tests\u0027 END OF WORK ITEM LOG: Command timed out`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 7/5/2024 11:13:01 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1107614](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1107614)|dotnet/runtime|[WasmTestOnChrome-MT-System.Runtime.InteropServices.JavaScript.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1107614\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=30367054\u0026resultId=100005)|dotnet/runtime#118048|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|1|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[browser][MT] System.Runtime.InteropServices.JavaScript.Tests CI timeouts",
        "labels":  [
                       "arch-wasm",
                       "disabled-test",
                       "area-VM-threading-mono",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104889",
        "createdAt":  "2024-07-15T11:56:04Z",
        "number":  104889,
        "author":  "maraf",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T23:01:59Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=738612\r\nBuild error leg or test failing: build_browser_wasm_linux_Release_LibraryTests_Threading\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"[MONO] ReleaseJSOwnedObjectByGCHandle: Unexpected synchronous failure\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=738612\r\n**Error message validated:** `[[MONO] ReleaseJSOwnedObjectByGCHandle: Unexpected synchronous failure`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 7/15/2024 11:56:32 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhueAAA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6FqivD",
                                           "createdAt":  "2024-07-22T09:37:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "`ArgumentNullException: Value cannot be null. (Parameter \u0027key\u0027)` probably here\r\n\r\nhttps://github.com/dotnet/runtime/blob/7dd68f40ab9ae6f631d79b76f2d9b464f7ecee36/src/libraries/System.Runtime.InteropServices.JavaScript/src/System/Runtime/InteropServices/JavaScript/JSProxyContext.cs#L416C30-L416C50\r\n\r\nI\u0027m not sure why yet\r\n\r\n```\r\n[07:56:30] info: [FAIL] System.Runtime.InteropServices.JavaScript.Tests.JSImportTest.JsImportArraySegmentOfInt32\r\n[07:56:30] info: System.NullReferenceException : Object reference not set to an instance of an object.\r\n[07:56:30] info:    at System.Runtime.InteropServices.JavaScript.JSMarshalerArgument.ToManaged(ArraySegment`1\u0026 )\r\n[07:56:30] info:    at System.Runtime.InteropServices.JavaScript.Tests.JavaScriptTestHelper.echo1_ArraySegmentOfInt32(ArraySegment`1 value, Boolean edit)\r\n[07:56:30] info:    at System.Runtime.InteropServices.JavaScript.Tests.JSImportTest.JsImportArraySegmentOfInt32()\r\n[07:56:30] info:    at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\r\n[07:56:30] info:    at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object , BindingFlags )\r\n\r\n[07:56:47] warn: [0x025e3650--IO- 07:56:47.668] [MONO] Process terminated.\r\n[07:56:47] warn: [0x025e3650--IO- 07:56:47.669] [MONO] ReleaseJSOwnedObjectByGCHandle: Unexpected synchronous failure (ManagedThreadId 4): System.ArgumentNullException: Value cannot be null. (Parameter \u0027key\u0027)\r\n                    at System.Collections.Generic.Dictionary`2[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IntPtr, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Remove(Object key)\r\n                    at System.Runtime.InteropServices.JavaScript.JSProxyContext.ReleaseJSOwnedObjectByGCHandle(IntPtr )\r\n                    at System.Runtime.InteropServices.JavaScript.JavaScriptExports.ReleaseJSOwnedObjectByGCHandle(JSMarshalerArgument* arguments_buffer)\r\n[07:56:47] fail: \r\n[07:56:47] fail: \"\u003cunnamed thread\u003e\" tid=0x25e3650 this=0x2440600 , thread handle : 0x25dedb8, state : not waiting\r\n[07:56:47] fail:   at \u003cunknown\u003e \u003c0xffffffff\u003e\r\n[07:56:47] fail:   at (wrapper managed-to-native) System.Environment.FailFast (string,System.Exception,string) [0x00000] in \u003c5ba192def01b42bbbaf411546e531d7c\u003e:0\r\n[07:56:47] fail:   at System.Environment.FailFast (string) [0x00000] in \u003c5ba192def01b42bbbaf411546e531d7c\u003e:0\r\n[07:56:47] fail:   at System.Runtime.InteropServices.JavaScript.JavaScriptExports.ReleaseJSOwnedObjectByGCHandle (System.Runtime.InteropServices.JavaScript.JSMarshalerArgument*) [0x00055] in \u003c4b51ee87204f4122a4af4672959d537e\u003e:0\r\n[07:56:47] fail:   at (wrapper runtime-invoke) \u003cModule\u003e.runtime_invoke_direct_void_JSMarshalerArgument* (object,intptr,intptr,intptr) [0x0002d] in \u003c4b51ee87204f4122a4af4672959d537e\u003e:0\r\n\r\n```",
                                           "updatedAt":  "2024-07-22T09:37:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G54AA",
                                           "createdAt":  "2024-08-01T15:10:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "maybe GCHandle use-after-free related to https://github.com/dotnet/runtime/issues/104524",
                                           "updatedAt":  "2024-08-01T15:10:36Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[browser][MT] ReleaseJSOwnedObjectByGCHandle: Unexpected synchronous failure",
        "labels":  [
                       "area-VM-threading-mono",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "Known Build Error",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107486",
        "createdAt":  "2024-09-06T20:47:03Z",
        "number":  107486,
        "author":  "kg",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-12T16:14:40Z",
        "body":  "[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-107325-merge-ca01ff94b76041dc9c/WasmTestOnChrome-MT-System.Runtime.InteropServices.JavaScript.Tests/1/console.cef52ad9.log?helixlogtype=result)\r\n```\r\n[19:47:52] info: [FAIL] System.Runtime.InteropServices.JavaScript.Tests.JSImportTest.JsImportArraySegmentOfInt32\r\n[19:47:52] info: System.NullReferenceException : Object reference not set to an instance of an object.\r\n[19:47:52] info:    at System.Runtime.InteropServices.JavaScript.JSMarshalerArgument.ToManaged(ArraySegment`1\u0026 )\r\n[19:47:52] info:    at System.Runtime.InteropServices.JavaScript.Tests.JavaScriptTestHelper.echo1_ArraySegmentOfInt32(ArraySegment`1 value, Boolean edit)\r\n[19:47:52] info:    at System.Runtime.InteropServices.JavaScript.Tests.JSImportTest.JsImportArraySegmentOfInt32()\r\n[19:47:52] info:    at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\r\n[19:47:52] info:    at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object , BindingFlags )\r\n```\r\n\r\n\r\nhttps://github.com/dotnet/runtime/blob/1c4755daf8f25f067a360c1dcae0d19df989e4e7/src/libraries/System.Runtime.InteropServices.JavaScript/src/System/Runtime/InteropServices/JavaScript/JSProxyContext.cs#L408-L416\r\n\r\n`target` can potentially be null, and it appears it was in this case.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOksE8rQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6LKgQ0",
                                           "createdAt":  "2024-09-06T20:47:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-06T20:47:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LKiYT",
                                           "createdAt":  "2024-09-06T20:54:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "cc @pavelsavara \r\nCan target ever be null in a single threaded scenario? Or MT only?",
                                           "updatedAt":  "2024-09-06T20:54:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LXG3g",
                                           "createdAt":  "2024-09-09T13:12:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Probably duplicate https://github.com/dotnet/runtime/issues/104470\r\nIt seems to me that `Why are we setting the target on an unoccupied slot?` https://github.com/dotnet/runtime/issues/104524 could be also the same thing",
                                           "updatedAt":  "2024-09-09T13:12:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NT4y2",
                                           "createdAt":  "2024-09-24T09:48:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Could this be the root cause ? https://github.com/dotnet/runtime/issues/107974",
                                           "updatedAt":  "2024-09-24T09:48:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SwDJH",
                                           "createdAt":  "2024-11-07T12:05:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "This is not `Promise` it\u0027s a `ArraySegment\u003cint\u003e` which we pin with `GCHandle` and create JS `MemoryView` with that `gc_handle`.\nWe also register that handle into thread local `JSProxyContext.ThreadJsOwnedObjects` for re-use.\nThe only place when we are doing `handle.Free();` is in `ReleaseJSOwnedObjectByGCHandle` under `lock` which is only called when `teardown_managed_proxy`. \n\nThat is only happening when `ArraySegment.dispose()` which we don\u0027t do in this test.\nIt could also happen when `_js_owned_object_finalized` via `FinalizationRegistry`. \n\nThe fail happens on marshaling result of the JS call to `echo1view()` and maybe on MT, that could happen in parallel with `FinalizationRegistry` ?",
                                           "updatedAt":  "2024-11-07T12:05:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SwFAK",
                                           "createdAt":  "2024-11-07T12:09:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "`release_js_owned_object_by_gc_handle` is `invoke_async_jsexport(runtimeHelpers.ioThreadTID` which is different thread than which is executing the unit test",
                                           "updatedAt":  "2024-11-07T12:09:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SwTyt",
                                           "createdAt":  "2024-11-07T12:39:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Unit test is synchronous call from deputy thread to UI thread via `JSImport` which will do `mono_threads_wasm_sync_run_in_target_thread_vii` and be blocked until `mono_threads_wasm_sync_run_in_target_thread_done` is called by JS. \nThe `release_js_owned_object_by_gc_handle` could be dispatched to IO thread and free the handle before the `JSMarshalerArgument.ToManaged` is done marshaling from that handle.",
                                           "updatedAt":  "2024-11-07T12:39:26Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[wasm][MT] Incorrect handling of null target in ReleaseJSOwnedObjectByGCHandle",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107577",
        "createdAt":  "2024-09-09T22:20:10Z",
        "number":  107577,
        "author":  "tmat",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-12T16:54:59Z",
        "body":  "### Description\r\n\r\nThe source generator emits non-user code methods without `#line` directives. That\u0027s usually ok, since the code is not expected to be stepped into or compiler errors are not expected to occur in it. However, changing the declaration of a partial method stub annotated by JSImport attribute during EnC/Hot Reload might result in rude edits. Currently, these diagnostics are reported with locations pointing to the source-generated file.\r\n\r\nAdding `#line` directives that map the locations back to the originating declaration would improve the experience. The IDE would then show the errors in the source file where the user is actually making the changes.\r\n\r\n\r\n### Reproduction Steps\r\n\r\n1. `dotnet new blazorwasm -o testblazor01`\r\n1. `cd testblazor01` \r\n1. In `testblazor01.csproj` add the following:\r\n  ```xml\r\n  \u003cAllowUnsafeBlocks\u003etrue\u003c/AllowUnsafeBlocks\u003e\r\n  ```\r\n1. In `Program.cs`, add the following at the end:\r\n  ```csharp\r\n   public static partial class Test\r\n   {\r\n       [System.Runtime.InteropServices.JavaScript.JSImport(\"test\")]\r\n       public static partial void F(int a);\r\n   }\r\n  ```\r\n1. Open the project in VS and start debugging (F10)\r\n1. Change the signature of Test method to:\r\n```csharp\r\npublic static partial void F(int a, int b);\r\n```\r\n1. Open Hot Reload pane of Output window\r\n\r\n\r\n### Expected behavior\r\n\r\n```\r\n[Error] C:\\Test\\testblazor01\\Program.cs (line 18): error ENC0044: Modifying method which contains the stackalloc operator requires restarting the application.\r\n[Error] C:\\Test\\testblazor01\\Program.cs (line 18): error ENC0020: Renaming field \u0027__signature_F_583343223\u0027 requires restarting the application.\r\n```\r\n\r\n### Actual behavior\r\n\r\n```\r\n[Error] Microsoft.Interop.JavaScript.JSImportGenerator\\Microsoft.Interop.JavaScript.JSImportGenerator\\JSImports.g.cs (line 12): error ENC0044: Modifying method which contains the stackalloc operator requires restarting the application.\r\n[Error] Microsoft.Interop.JavaScript.JSImportGenerator\\Microsoft.Interop.JavaScript.JSImportGenerator\\JSImports.g.cs (line 26): error ENC0020: Renaming field \u0027__signature_F_583343223\u0027 requires restarting the application.\r\n```\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi7A8Rw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6LbjHT",
                                           "createdAt":  "2024-09-09T22:20:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-09T22:20:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Lbkgf",
                                           "createdAt":  "2024-09-09T22:25:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxlxNw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2024-09-09T22:38:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "If we were to emit line directives, how would that interact with stepping? A huge part of the choice to use source generators for interop was to be able to step through the generated code and see the C# for what\u0027s happening.\n\nWould it be possible to only emit line directives for the signature and not the body to get the right experience?",
                                           "updatedAt":  "2024-09-09T22:25:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LbxY8",
                                           "createdAt":  "2024-09-09T23:16:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "Emitting it only for the signature wouldn\u0027t help. We don\u0027t have currently any means to make stepping work with `#line` directives that would remap to the original definition. I guess it\u0027s a matter of preference/priority: if stepping is important than the current state is better. ",
                                           "updatedAt":  "2024-09-09T23:16:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Lb7NO",
                                           "createdAt":  "2024-09-09T23:58:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "I think a decent compromise here for the JavaScript generators would be to remap the line that defines the signature field back to the original declaration\u0027s line as there\u0027s no interesting code to step there and the rude edit error itself doesn\u0027t let you easily trace back to the original method. That way the rude edit would point to user code and stepping would still work.",
                                           "updatedAt":  "2024-09-09T23:58:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Lb9wB",
                                           "createdAt":  "2024-09-10T00:08:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "I guess we can try that. We would also want to remap all field definitions. That would likely cover most rude edits.",
                                           "updatedAt":  "2024-09-10T00:08:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Lb_Z0",
                                           "createdAt":  "2024-09-10T00:16:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-10T00:16:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LsDxH",
                                           "createdAt":  "2024-09-11T12:50:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "Using the reproduction steps we\u0027re getting a slightly different error:\r\n```\r\n[Error] C:\\Users\\testblazor01\\testblazor01.sln (line 1): error ENC1002: Cannot apply changes -- unexpected error: \u0027Partial method implementation required (Parameter \u0027oldSymbol\u0027)\u0027\r\n```\r\nWhen we use `wasmbrowser` instead of blazor, we are able to reproduce the quoted error:\r\n```\r\n [Error] Microsoft.Interop.JavaScript.JSImportGenerator\\Microsoft.Interop.JavaScript.JSImportGenerator\\JSImports.g.cs (line 2): error ENC0033: Deleting field \u0027__signature_F_55838023\u0027 requires restarting the application.\r\n```",
                                           "updatedAt":  "2024-09-11T12:50:26Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "JavaScript interop source generator should emit #line directives pointing to the originating declaration",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107974",
        "createdAt":  "2024-09-18T09:57:52Z",
        "number":  107974,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-16T08:19:28Z",
        "body":  "When we are marshaling JSObject to JS, should we DangerousAddRef on it for duration of the call ?\r\nOur GC is scanning the stack so in most cases, that would be enough. \r\n\r\nBut there are few scenarios for which I\u0027m not sure\r\n- marshaling array where `JSObject` is item in the array\r\n- multi-threaded stack frame which is passed between thread is allocated on a heap\r\n- NAOT-LLVM doesn\u0027t have conservative GC",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjIyg6w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6MjKDr",
                                           "createdAt":  "2024-09-18T09:58:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-18T09:58:05Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[browser] Consider DangerousAddRef for JSObject",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "Priority:3",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108019",
        "createdAt":  "2024-09-19T12:35:44Z",
        "number":  108019,
        "author":  "ilonatommy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T17:22:03Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=811867\r\nBuild error leg or test failing: WasmTestOnChrome-MT-System.Net.Http.Functional.Tests.WorkItemExecution\r\nPull request: https://github.com/dotnet/runtime/pull/107504\r\nlog: https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-107504-merge-22effdb9e29a4d47a9/WasmTestOnChrome-ST-System.Net.Http.Functional.Tests/1/console.9bf1cbdb.log?helixlogtype=result\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"\",\r\n  \"ErrorPattern\": [ \"FAIL\", \"System.Net.Http.Functional.Tests.HttpClientHandler_RemoteServerTest.GetAsync_ServerNeedsAuthAndNoCredential_StatusCodeUnauthorized\" ],\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n```\r\n[09:50:18] info: Starting:    System.Net.Http.Functional.Tests.dll\r\n[09:50:18] fail: [out of order message from the browser]: https://127.0.0.1:50799/Echo.ashx - Failed to load resource: net::ERR_FAILED\r\n[09:50:18] fail: [out of order message from the browser]: https://127.0.0.1:50799/Echo.ashx - Failed to load resource: net::ERR_FAILED\r\n[09:50:18] fail: [out of order message from the browser]: https://127.0.0.1:50799/Echo.ashx - Failed to load resource: net::ERR_FAILED\r\n[09:50:18] fail: [out of order message from the browser]: https://127.0.0.1:50799/Echo.ashx - Failed to load resource: net::ERR_FAILED\r\n[09:50:18] fail: [out of order message from the browser]: https://127.0.0.1:50799/Echo.ashx - Failed to load resource: net::ERR_FAILED\r\n[09:50:18] fail: [out of order message from the browser]: https://127.0.0.1:50799/Echo.ashx - Failed to load resource: net::ERR_FAILED\r\n[09:50:18] fail: [out of order message from the browser]: https://127.0.0.1:50799/Echo.ashx - Failed to load resource: net::ERR_FAILED\r\n[09:50:18] fail: [out of order message from the browser]: https://127.0.0.1:50799/Echo.ashx - Failed to load resource: net::ERR_FAILED\r\n[09:50:39] fail: [out of order message from the browser]: https://127.0.0.1:50799/StatusCode.ashx?statuscode=500\u0026statusdescription=test\u0026delay=100 - Failed to load resource: the server responded with a status of 500 ()\r\n[09:50:40] fail: [out of order message from the browser]: http://127.0.0.1:58189/ - Failed to load resource: net::ERR_CONTENT_LENGTH_MISMATCH\r\n[09:50:41] fail: [out of order message from the browser]: http://127.0.0.1:53394/ - Failed to load resource: net::ERR_INCOMPLETE_CHUNKED_ENCODING\r\n[09:50:41] fail: [out of order message from the browser]: http://127.0.0.1:55602/ - Failed to load resource: net::ERR_INCOMPLETE_CHUNKED_ENCODING\r\n[09:52:22] info: [FAIL] System.Net.Http.Functional.Tests.HttpClientHandler_RemoteServerTest.GetAsync_ServerNeedsAuthAndNoCredential_StatusCodeUnauthorized(remoteServer: (BaseUri: http://127.0.0.1:50798/, HttpVersion: 1.1))\r\n[09:52:22] info: System.Threading.Tasks.TaskCanceledException : The request was canceled due to the configured HttpClient.Timeout of 100 seconds elapsing.\r\n[09:52:22] info: ---- System.TimeoutException : The operation was canceled.\r\n[09:52:22] info: -------- System.Threading.Tasks.TaskCanceledException : The operation was canceled.\r\n[09:52:22] info: ------------ System.Runtime.InteropServices.JavaScript.JSException : Error: OperationCanceledException\r\n[09:52:22] info:    at System.Net.Http.HttpClient.HandleFailure(Exception e, Boolean telemetryStarted, HttpResponseMessage response, CancellationTokenSource cts, CancellationToken cancellationToken, CancellationTokenSource pendingRequestsCts)\r\n[09:52:22] info:    at System.Net.Http.HttpClient.\u003cSendAsync\u003eg__Core|83_0(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationTokenSource cts, Boolean disposeCts, CancellationTokenSource pendingRequestsCts, CancellationToken originalCancellationToken)\r\n[09:52:22] info:    at System.Net.Http.Functional.Tests.HttpClientHandler_RemoteServerTest.GetAsync_ServerNeedsAuthAndNoCredential_StatusCodeUnauthorized(RemoteServer remoteServer)\r\n[09:52:22] info: --- End of stack trace from previous location ---\r\n[09:52:22] info: ----- Inner Stack Trace -----\r\n[09:52:22] info: \r\n[09:52:22] info: ----- Inner Stack Trace -----\r\n[09:52:22] info:    at System.Net.Http.CancellationHelper.ThrowOperationCanceledException(Exception innerException, CancellationToken cancellationToken)\r\n[09:52:22] info:    at System.Net.Http.CancellationHelper.ThrowIfCancellationRequested(Exception innerException, CancellationToken cancellationToken)\r\n[09:52:22] info:    at System.Net.Http.BrowserHttpInterop.CancellationHelper(Task promise, CancellationToken cancellationToken, JSObject jsController)\r\n[09:52:22] info:    at System.Net.Http.BrowserHttpController.CallFetch()\r\n[09:52:22] info:    at System.Net.Http.HttpClient.\u003cSendAsync\u003eg__Core|83_0(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationTokenSource cts, Boolean disposeCts, CancellationTokenSource pendingRequestsCts, CancellationToken originalCancellationToken)\r\n[09:52:22] info: ----- Inner Stack Trace -----\r\n[09:52:22] info:    at System.Net.Http.BrowserHttpInterop.CancellationHelper(Task promise, CancellationToken cancellationToken, JSObject jsController)\r\n[09:52:22] info:     at Jr.cancel (http://127.0.0.1:50798/_framework/dotnet.runtime.js:3:43272)\r\n[09:52:22] info:     at http://127.0.0.1:50798/_framework/dotnet.runtime.js:3:175008\r\n[09:52:22] info:     at http://127.0.0.1:50798/_framework/dotnet.runtime.js:3:175017\r\n[09:52:22] info:     at fr (http://127.0.0.1:50798/_framework/dotnet.runtime.js:3:35050)\r\n[09:52:22] info:     at Mc (http://127.0.0.1:50798/_framework/dotnet.runtime.js:3:174795)\r\n[09:52:22] info:     at http://127.0.0.1:50798/_framework/dotnet.native.wasm:wasm-function[289]:0x1fa8c\r\n[09:52:22] info:     at http://127.0.0.1:50798/_framework/dotnet.native.wasm:wasm-function[220]:0x1cf8a\r\n[09:52:22] info:     at http://127.0.0.1:50798/_framework/dotnet.native.wasm:wasm-function[211]:0xef62\r\n[09:52:22] info:     at http://127.0.0.1:50798/_framework/dotnet.native.wasm:wasm-function[282]:0x1f531\r\n[09:52:22] info:     at http://127.0.0.1:50798/_framework/dotnet.native.wasm:wasm-function[318]:0x206d7\r\n[09:52:22] info:     at http://127.0.0.1:50798/_framework/dotnet.native.wasm:wasm-function[190]:0xcbcb\r\n[09:52:22] info:     at http://127.0.0.1:50798/_framework/dotnet.native.wasm:wasm-function[3564]:0x113ab3\r\n[09:52:22] info:     at mono_wasm_schedule_timer_tick (http://127.0.0.1:50798/_framework/dotnet.runtime.js:3:56220)\r\n[09:52:22] info:     at callUserCallback (http://127.0.0.1:50798/_framework/dotnet.native.js:8:107026)\r\n[09:52:22] info:     at http://127.0.0.1:50798/_framework/dotnet.native.js:8:107294\r\n```\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=811867\r\n**Error message validated:** `[FAIL System.Net.Http.Functional.Tests.HttpClientHandler_RemoteServerTest.GetAsync_ServerNeedsAuthAndNoCredential_StatusCodeUnauthorized`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 9/20/2024 6:40:41 AM UTC\r\n\u003c!-- Known issue validation end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjOt-kw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6MuAgL",
                                           "createdAt":  "2024-09-19T12:36:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-infrastructure-libraries\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-19T12:36:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MxvcJ",
                                           "createdAt":  "2024-09-19T18:04:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-19T18:04:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6M636T",
                                           "createdAt":  "2024-09-20T17:59:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-20T17:59:05Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "`GetAsync_ServerNeedsAuthAndNoCredential_StatusCodeUnauthorized` got cancelled",
        "labels":  [
                       "arch-wasm",
                       "disabled-test",
                       "area-System.Runtime.InteropServices.JavaScript"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110657",
        "createdAt":  "2024-12-09T13:23:11Z",
        "number":  110657,
        "author":  "Sean4572435243",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9a3Nw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MattParkerDev",
                                            "createdAt":  "2024-12-11T01:54:03Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-03-08T15:54:17Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI have javascript interops to js codebehind in my blazor c# code.  Builds always result in the JSImport code-generator creating new unique code, and as such the compiled output cannot be deterministic, making verifiable source code impossible, which for open source financial webapps in particular is critical.  To work around this, I\u0027ve statically incorporated the JSImport auto-generated code by copying it into the original source code, and then commenting out the JSImport attributes so that the code remains static (to locate the auto-generated code, build, then right click a method marked with JSImport and in the submenu select \u0027go to definition\u0027, and this will take you to the auto-generated cs code).  Takes a little bit of easy finagling to make it work, such as annotating with \n       ` [method: SupportedOSPlatform(\"browser\")]`\nwhere needed, and then adding ! to variables creating null warnings and then finally making the JSFunctionBinding nullable (append ? to the type)\n\nThis is of course a maintenance nightmare but it does work and I now get repeatable binary matches on the output wasms, as long as I build or publish with these flags set:\n`dotnet publish /p:BlazorWebAssemblyEnableLinking=true /p:Optimize=true /p:ContinuousIntegrationBuild=true /p:Deterministic=true /p:ReproducibleBuild=true`\n\n### Describe the solution you\u0027d like\n\nWhatever randomness is imposed by JSImport code generation could probably become deterministic, and possibly even smart enough to know if the code generator even needs to activate if the source hasn\u0027t changed (source hash checksum embedded in previously generated code?).  This would restore native deterministic builds and hence provable source code, without the need for my kludgey workaround. \n\nI\u0027d also like to suggest making the default build parameters to always produce code-based (not filestamp or path) deterministic output so we don\u0027t need to hunt down all these confusing \u0027determinism\u0027 parameters to try to close the gap.  Seems very complicated to achieve what should be intuitive, and I don\u0027t believe there\u0027s a practical or common need for compiling unchanged source producing different outputs with new hashes, especially as the default.  I believe most developers instinctively associate the wasm hash with the exact contents of the source code alone, plus the cachebusting hash rationale doesn\u0027t add value from that context.\n\n### Additional context\n\nBlazor is an amazing product folks, glad to see it reaching the maturity and robustness we\u0027ve long awaited.  Much respect",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoW1_qw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6fDB2h",
                                           "createdAt":  "2025-02-19T11:32:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "You can add `\u003cEmitCompilerGeneratedFiles\u003etrue\u003c/EmitCompilerGeneratedFiles\u003e` and `\u003cCompilerGeneratedFilesOutputPath\u003esrc/generated\u003c/CompilerGeneratedFilesOutputPath\u003e` into `\u003cPropertyGroup\u003e` of your project file. That would allow you to validate that the files changed or not. \n\nAt the moment, I believe we are not making anything about it random and so the file content should be deterministic.",
                                           "updatedAt":  "2025-02-19T11:32:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fDCnr",
                                           "createdAt":  "2025-02-19T11:33:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Please let me know if the content of the generated code is changing and we can figure out what\u0027s the cause. We would need detailed steps to reproduce. @Sean4572435243 ",
                                           "updatedAt":  "2025-02-19T11:33:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fOqan",
                                           "createdAt":  "2025-02-20T12:56:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sean4572435243",
                                           "body":  "I need some time to respond, but I will follow up.",
                                           "updatedAt":  "2025-02-20T12:56:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hM6Vn",
                                           "createdAt":  "2025-03-06T17:35:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sean4572435243",
                                           "body":  "Apologies for the delay.  Working on getting back to a compiling state so I can proceed with this issue.",
                                           "updatedAt":  "2025-03-06T17:35:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hbX-r",
                                           "createdAt":  "2025-03-08T14:23:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sean4572435243",
                                           "body":  "I followed your recommendations for the .csproj modifications\n\n  ```\n\u003cPropertyGroup\u003e\n    ...\n    \u003cEmitCompilerGeneratedFiles\u003etrue\u003c/EmitCompilerGeneratedFiles\u003e\n    \u003cCompilerGeneratedFilesOutputPath\u003esrc/generated\u003c/CompilerGeneratedFilesOutputPath\u003e\n  \u003c/PropertyGroup\u003e\n```\n\nthough this was also needed to avoid ambiguous reference errors\n\n ```\n \u003cItemGroup\u003e\n    \u003cCompile Remove=\"src/generated/**\" /\u003e\n  \u003c/ItemGroup\u003e\n```\n\nUltimately it didn\u0027t solve my issue\n\nin my blazor MyFile.cs, I have\n\n```\nstatic partial class MyInterop\n{\n    [JSImport(\"MyMethod\", \"MyScript.js\")]\n    [return: JSMarshalAs\u003cPromise\u003cAny\u003e\u003e()]\n    internal static partial Task\u003cobject\u003e MyMethod();\n}\n```\n\nwhen it compiles, it generates the signature\n\n```\n// \u003cauto-generated/\u003e\nnamespace MyNameSpace\n{\n    static unsafe partial class MyInterop\n    {\n        [global::System.Diagnostics.DebuggerNonUserCode]\n        internal static partial global::System.Threading.Tasks.Task\u003cobject\u003e MyMethod()\n        {\n            if (__signature_MyMethod_1273277274 == null)\n            {\n                    { and so on...}\n```\n\nWhat I discovered is if the dotnet.exe process is terminated (either forcibly or by restarting the computer), the next time I build my project, this __signature_MyMethod_1273277274 number changes, resulting in my new filename hash.  \n\nI tried to isolate to a simple example app, but when I do that, the problem is no longer exhibited and the number remains consistent, even between dotnet.exe instances.  \n\nThe kicker is that if the dotnet.exe process remains active, even my full app will have consistent interop method numbers between builds of the exact same code (back to back compiles with no changes).  However, if I terminate the dotnet.exe between back-to-back builds, I get a different method number in the interop.  Very strange behavior and difficult to isolate from my end.  \n\nI know the temptation is to say there\u0027s something about my project that\u0027s causing this, but since the back-to-back compiles produce consistent interop numbers (new file created each build though), yet terminating the dotnet.exe breaks that consistency, I\u0027m hesitant to blame the app but suggest rather that the app\u0027s complexity may be exposing something in dotnet.exe memory state that produces consistency that is lost between instances.\n\nI\u0027m not sure I can add further value here since an example app doesn\u0027t seem possible, but I hope that I was able to demonstrate that it appears the randomness comes from between dotnet.exe instances and maybe this will lead to a solution.  It may even be that stale data in dotnet.exe memory may be obscuring the actual source of the problem in my app.  For now, I\u0027ll continue with my workaround of hard-coding the interop so it\u0027s not dynamically generated.",
                                           "updatedAt":  "2025-03-08T15:54:17Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Blazor - JSImport feature makes deterministic builds impossible",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "needs-further-triage",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110870",
        "createdAt":  "2024-12-11T07:04:41Z",
        "number":  110870,
        "author":  "konstantin-karpukhin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-05T22:00:11Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\n1\u003eWasmApp.Common.targets(793,5): Message WASM0060 : Type System.Object is not blittable: Not a ValueType\n1\u003eWasmApp.Common.targets(793,5): Message WASM0062 : Type System.Runtime.InteropServices.HandleRef is not blittable: Field _wrapper is not blittable\n1\u003eWasmApp.Common.targets(793,5): Warning WASM0001 : Could not get pinvoke, or callbacks for method \u0027ExternalLibrary.ExternalClass::GetCharABCWidthsFloat\u0027 because \u0027System.NotSupportedException: Unsupported parameter type in method \u0027ExternalLibrary.ExternalClass.GetCharABCWidthsFloat\u0027\n   at PInvokeCollector.\u003cCollectPInvokes\u003eg__CollectPInvokesForMethod|6_0(MethodInfo method, \u003c\u003ec__DisplayClass6_0\u0026)\n   at PInvokeCollector.CollectPInvokes(List`1 pinvokes, List`1 callbacks, HashSet`1 signatures, Type type)\u0027\n\n### Expected Behavior\n\nNo warnings (as it was in NET8)\n\n### Steps To Reproduce\n\nhttps://github.com/konstantin-karpukhin/BlazorWASM0001\n\n### Exceptions (if any)\n\nProject should be configured for NET9 with WasmEnableSIMD set to false\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoEfvNg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ZZbdm",
                                           "createdAt":  "2025-01-06T17:31:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-06T17:31:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gOnIo",
                                           "createdAt":  "2025-02-27T14:49:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Related ? https://github.com/dotnet/runtime/issues/112963",
                                           "updatedAt":  "2025-02-27T14:49:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gR-vI",
                                           "createdAt":  "2025-02-27T20:41:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "This warning is generated to indicate that the code will fail at runtime (and it will).  The logic that is generating the warning could (and should) be improved to understand the SupportedOsPlatform attribute.  For now I would suppress the warning.",
                                           "updatedAt":  "2025-02-27T20:41:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gR-82",
                                           "createdAt":  "2025-02-27T20:42:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "\u003e Related ? [#112963](https://github.com/dotnet/runtime/issues/112963)\n\nWeakly related",
                                           "updatedAt":  "2025-02-27T20:42:26Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "NET9 - warnings on building Blazor Wasm project (WASM0060, WASM0062, WASM0001)",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110717",
        "createdAt":  "2024-12-15T05:00:51Z",
        "number":  110717,
        "author":  "miroljub1995",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-27T14:56:14Z",
        "body":  "I see that some methods on JSObject are called with helper methods defined here:\nhttps://github.com/dotnet/runtime/blob/3aa1ec5bb1f50f0a1bed9cfcac8734f742bcf24b/src/mono/browser/runtime/invoke-js.ts#L425\nhttps://github.com/dotnet/runtime/blob/3aa1ec5bb1f50f0a1bed9cfcac8734f742bcf24b/src/mono/browser/runtime/invoke-js.ts#L420\nhttps://github.com/dotnet/runtime/blob/3aa1ec5bb1f50f0a1bed9cfcac8734f742bcf24b/src/mono/browser/runtime/invoke-js.ts#L430\n\nWhy we do not import the native ones and deprecate the old ones:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOl6CeNw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6XoJ43",
                                           "createdAt":  "2024-12-15T14:01:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-15T14:01:48Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Possible WebAssembly JSObject Improvements",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110738",
        "createdAt":  "2024-12-16T13:15:55Z",
        "number":  110738,
        "author":  "elringus",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-12T11:52:24Z",
        "body":  "### Description\n\nThe following error occurs randomly when booting the .NET runtime in browser:\n\n```\n[MONO] * Assertion at /__w/1/s/src/mono/mono/metadata/assembly.c:2718, condition `\u003cdisabled\u003e\u0027 not met\nError at Fc (http://localhost:3000/_framework/dotnet.runtime.js:3:168644)\n  at http://localhost:3000/_framework/dotnet.native.wasm:wasm-function[3748]:0x10334d\n  at http://localhost:3000/_framework/dotnet.native.wasm:wasm-function[785]:0x3c089\n  at http://localhost:3000/_framework/dotnet.native.wasm:wasm-function[706]:0x3a13c\n  at http://localhost:3000/_framework/dotnet.native.wasm:wasm-function[710]:0x3a25d\n  at http://localhost:3000/_framework/dotnet.native.wasm:wasm-function[712]:0x3a2a0\n  at http://localhost:3000/_framework/dotnet.native.wasm:wasm-function[711]:0x3a273\n  at http://localhost:3000/_framework/dotnet.native.wasm:wasm-function[3742]:0x1010a2\n  at Module._mono_wasm_load_runtime [as mono_wasm_load_runtime] (http://localhost:3000/_framework/dotnet.native.js:8:91450)\n  at http://localhost:3000/_framework/dotnet.runtime.js:3:184650\nMONO_WASM: mono_wasm_load_runtime () failed\n```\n\n### Reproduction Steps\n\n1. Clone the following minimal repro: https://github.com/elringus/js-interop-test\n2. Run `dotnet publish` under the root directory\n3. Run `npx serve` (or other HTTP server) under `JSInteropTest/bin/Release/net9.0/browser-wasm/AppBundle`\n4. Open the served URL with a browser and start refreshing the page\n\n### Expected behavior\n\nThe app is booted and prints the debug statements on each page refresh.\n\n### Actual behavior\n\nThe app is sometimes booted and sometimes not, with the aforementioned error.\n\nExample screen recording below:\n\nhttps://github.com/user-attachments/assets/2cb895ac-d894-46b2-97d2-ced0893573e5\n\n\n### Regression?\n\nThis is a regression in .NET 9. This behavior was not observed in .NET 8.\n\n### Known Workarounds\n\nNone.\n\n### Configuration\n\n```\n.NET SDK:\n Version:           9.0.100\n Commit:            59db016f11\n Workload version:  9.0.100-manifests.174c237d\n MSBuild version:   17.12.7+5b8665660\n\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.19045\n OS Platform: Windows\n RID:         win-x64\n```\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpmk_1g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6lZmRR",
                                           "createdAt":  "2025-04-03T08:56:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-03T08:56:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mC28v",
                                           "createdAt":  "2025-04-08T09:11:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Is this possibly because `[ModuleInitializer]` ?",
                                           "updatedAt":  "2025-04-08T09:11:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mGIkQ",
                                           "createdAt":  "2025-04-08T14:22:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elringus",
                                           "body":  "I\u0027ve worked around this by using `buffer` instead of `resolvedUrl` in config.assets and manually fetching the binaries content, so I guess it has something to do with the resource fetching on JS side.",
                                           "updatedAt":  "2025-04-08T14:22:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mGq74",
                                           "createdAt":  "2025-04-08T15:06:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I see now, this is the custom boot sequence.\n\nhttps://github.com/elringus/js-interop-test/blob/69c531912bdec3acf49496e8a3202e94dfb7f377/JSInteropTest/Frontend/boot.js#L7",
                                           "updatedAt":  "2025-04-08T15:06:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mGtBN",
                                           "createdAt":  "2025-04-08T15:09:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "We are probably going to disrupt this anyway, right @maraf ?",
                                           "updatedAt":  "2025-04-08T15:09:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mOXbd",
                                           "createdAt":  "2025-04-09T08:30:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elringus",
                                           "body":  "\u003e probably going to disrupt this anyway\n\nYou mean removing `assets` from the runtime config? I suspected this might happen when the property was removed from the `MonoConfig` type definition. I assume `resources` should be used instead?\n\nCould you please consider adding a way to specify a resource\u0027s buffer for cases where end-users fetch the content themselves (similar to `asset.buffer`)? Maybe something like:\n```ts\ntype ResourceList = {\n    [name: string]: string | null | \"\" | ArrayBuffer;\n};\n```\n— where an `ArrayBuffer`, when specified instead of a hash, would indicate that the resource is already loaded and the provided content should be used by the runtime.\n",
                                           "updatedAt":  "2025-04-09T08:30:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mQU7O",
                                           "createdAt":  "2025-04-09T11:05:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "@elringus if I remember it right, you are doing this in order to webpack it ? Or what\u0027s the real use case and motivation for this extension point ?",
                                           "updatedAt":  "2025-04-09T11:05:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mQede",
                                           "createdAt":  "2025-04-09T11:15:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENh5lw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2025-04-09T11:47:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "elringus",
                                           "body":  "The main one is embedding WASM inside JavaScript module, so that we can have a single `.js` file with the C# library inside, which can be directly imported to a web project.\n\nBut this is also important to abstract the WASM delivery mechanism. It\u0027s not like `fetch` covers all possible scenarios. For example, we may have an electron or tauri app, where the binary is embedded in app resources—simple fetch won\u0027t work here.",
                                           "updatedAt":  "2025-04-09T11:15:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mQySn",
                                           "createdAt":  "2025-04-09T11:47:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "BTW: you can also monkey-patch `fetch`",
                                           "updatedAt":  "2025-04-09T11:47:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mQ4Eb",
                                           "createdAt":  "2025-04-09T11:53:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elringus",
                                           "body":  "\u003e you can also monkey-patch fetch\n\nNot really, as I don\u0027t want to break base dotnet JS features for end-users of my library. If someone would like to use the default resource fetching mechanism, they should be able to.",
                                           "updatedAt":  "2025-04-09T11:53:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mZdEg",
                                           "createdAt":  "2025-04-10T06:28:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "\u003e The main one is embedding WASM inside JavaScript module\n\nHow are you doing it? Are you embedding the wasm binary as text in JS?\n\n\u003e Could you please consider adding a way to specify a resource\u0027s buffer for cases where end-users fetch the content themselves (similar to asset.buffer)?\n\nI\u0027m not sure about the final schema, whether it will be `resources`-based or `assets`-based, but we are looking at being able to generate boot config compatible with bundlers (webpack, rollup). With this config https://github.com/dotnet/aspnetcore/issues/59456#issuecomment-2650432491 (and https://github.com/dotnet/runtime/issues/77191) babel was able to do it\u0027s job, merge all JS files together and process wasm files. Would that be sufficient for your goals? I would like to hear your input",
                                           "updatedAt":  "2025-04-12T11:52:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6maT_W",
                                           "createdAt":  "2025-04-10T08:06:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENrkSA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maraf",
                                                                               "createdAt":  "2025-04-10T09:59:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "elringus",
                                           "body":  "\u003e How are you doing it? Are you embedding the wasm binary as test in JS text?\n\nAs base64-encoded text.\n\n\u003e we are looking at being able to generate boot config compatible with bundlers\n\nI\u0027ve maintained that kind of boot config since .NET 6 in my library: https://github.com/elringus/bootsharp/blob/main/src/js/src/config.ts. It works with bundlers (webpack, Vite) and runtimes (Node, Deno, Bun) alike. The one you\u0027ve shared looks similar, so I guess it\u0027ll work as well. Just be aware of bundler warnings due to unresolved imports in the JS runtime and Emscripten-generated files. On my end, I\u0027m patching them during the dotnet build. I created an issue about this a while ago: https://github.com/dotnet/runtime/issues/80045 (though the title is about web extensions, the core issue is with the imports). Here is the patcher I\u0027m using: https://github.com/elringus/bootsharp/blob/main/src/cs/Bootsharp.Publish/Pack/ModulePatcher/InternalPatcher.cs.\n\nThat said, this particular bundler/boot config scenario is not directly related to the issue of customizing the binaries delivery mechanism. We still need an option to provide the content directly to the dotnet JS runtime when it initializes—so it\u0027s a runtime issue rather than a build/bundle-time one.\n\n\u003e Would that be sufficient for your goals?\n\nAs long as the dotnet JS runtime allows providing binary content for the boot resources, it\u0027ll work. The assets model with the `buffer` property is working perfectly. The resources model in its current form doesn\u0027t work, because it doesn\u0027t have a way to specify the binary content.",
                                           "updatedAt":  "2025-04-10T08:06:35Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "[browser] custom boot - Condition not met at mono/metadata/assembly.c:2718",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111449",
        "createdAt":  "2025-01-15T08:52:01Z",
        "number":  111449,
        "author":  "MihaZupan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T23:02:55Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=917305\nBuild error leg or test failing: System.Runtime.InteropServices.JavaScript.Tests.JSImportTest.BadCast\nPull request: https://github.com/dotnet/runtime/pull/111433\n\u003c!-- Error message template  --\u003e\n## Error Message\n\n```json\n{\n  \"ErrorMessage\": \"[FAIL] System.Runtime.InteropServices.JavaScript.Tests.JSImportTest.BadCast\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n```\n[20:43:11] info: [FAIL] System.Runtime.InteropServices.JavaScript.Tests.JSImportTest.BadCast\n[20:43:11] info: Assert.Contains() Failure: Sub-string not found\n[20:43:11] info: String:    \"Error: Assert failed: Null reference\"\n[20:43:11] info: Not found: \"JSObject proxy of boolean is not supporte\"···\n[20:43:11] info:    at System.Runtime.InteropServices.JavaScript.Tests.JSImportTest.BadCast()\n[20:43:11] info:    at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\n[20:43:11] info:    at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\n```\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=917305\r\n**Error message validated:** `[[FAIL] System.Runtime.InteropServices.JavaScript.Tests.JSImportTest.BadCast`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 1/15/2025 8:52:16 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "JSImportTest.BadCast test failure",
        "labels":  [
                       "area-System.Runtime.InteropServices.JavaScript",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111455",
        "createdAt":  "2025-01-15T12:09:41Z",
        "number":  111455,
        "author":  "AlaJaber97",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-20T16:24:27Z",
        "body":  "The loadAllSatelliteResources property is missing from the config class definition in dotnet.d.ts. This causes a TypeScript error when attempting to configure the dotnet object with this property in the following code:\n\n```\ndotnet\n    .withVirtualWorkingDirectory(runArgs.workingDirectory)\n    .withEnvironmentVariables(runArgs.environmentVariables)\n    .withDiagnosticTracing(runArgs.diagnosticTracing)\n    .withExitOnUnhandledError()\n    .withExitCodeLogging()\n    .withElementOnExit()\n    .withInteropCleanupOnExit()\n    .withDumpThreadsOnNonZeroExit()\n    .withConfig({\n        loadAllSatelliteResources: true,\n        jsThreadBlockingMode: \"ThrowWhenBlockingWait\",\n    });\n```\n\n**Expected Behavior**\nThe config class in dotnet.d.ts should include a definition for the loadAllSatelliteResources property to allow seamless configuration without TypeScript errors.\n\n**Actual Behavior**\nThe TypeScript compiler throws an error because loadAllSatelliteResources is not recognized as a valid property of the config object in dotnet.d.ts.\n\n**Steps to Reproduce**\n\n- Use the dotnet object and attempt to configure it as shown in the example above.\n- Include the loadAllSatelliteResources property in the withConfig method.\n- Observe the TypeScript error related to the missing property in dotnet.d.ts.\n\n**Suggested Solution**\nAdd the loadAllSatelliteResources property to the config class definition in dotnet.d.ts. For example:\n```\ntype MonoConfig {\n    loadAllSatelliteResources?: boolean;\n    jsThreadBlockingMode?: string;\n    // other existing properties\n}\n```\n\n**Environment**\n\n- \u003e Language: TypeScript\n- \u003e Platform: .NET Runtime\n\nLet me know if you need additional details!",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmyQU1g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6alkeT",
                                           "createdAt":  "2025-01-15T17:28:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-15T17:28:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6alkqf",
                                           "createdAt":  "2025-01-15T17:28:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @akoeplinger, @matouskozak\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-15T17:28:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bJBTW",
                                           "createdAt":  "2025-01-20T16:24:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEDR9-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2025-01-20T16:24:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "maraf",
                                           "body":  "I\u0027m curious, why are you loading all resources (meaning all cultures your assemblies support) instead of loading just resources for the selected culture?\n\nThe `loadAllSatelliteResources` is there mostly for internal purposes of running runtime tests, it was never considered a public feature, this why it\u0027s missing from `dotnet.d.ts`",
                                           "updatedAt":  "2025-01-20T16:24:04Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Missing loadAllSatelliteResources Property in MonoConfig Class in dotnet.d.ts",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112262",
        "createdAt":  "2025-02-07T05:39:48Z",
        "number":  112262,
        "author":  "r58Playz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-05T21:58:56Z",
        "body":  "### Description\n\nAn `Uncaught RuntimeError: null function or function signature mismatch` is thrown when attempting to call a `[DllImport]`ed function that takes an enum with `ulong` variant on WASM.\n\n### Reproduction Steps\n\nDefault wasmbrowser template with these changes:\n\nProgram.cs\n```csharp\nusing System;\nusing System.Runtime.InteropServices;\nusing System.Runtime.InteropServices.JavaScript;\n\nConsole.WriteLine(\"Hello, Browser!\");\n\n[Flags]\npublic enum Flags  : ulong { X = 1 }\n\npublic partial class MyClass\n{\n    [JSExport]\n    internal static string Greeting()\n    {\n        i64func(Flags.X);\n        var text = $\"Hello, World!\";\n        Console.WriteLine(text);\n        return text;\n    }\n\n    [DllImport(\"Program\")]\n    extern static void i64func(Flags var);\n}\n```\nProgram.c\n```c\n#include \u003cstdio.h\u003e\n#include \u003cstdint.h\u003e\n\nvoid i64func(uint64_t var) {\n\tprintf(\"test %lld \\n\", var);\n}\n```\ni64-fail.csproj\n```xml\n\u003cProject Sdk=\"Microsoft.NET.Sdk.WebAssembly\"\u003e\n  \u003cPropertyGroup\u003e\n    \u003cTargetFramework\u003enet9.0\u003c/TargetFramework\u003e\n    \u003cAllowUnsafeBlocks\u003etrue\u003c/AllowUnsafeBlocks\u003e\n    \u003cWasmBuildNative\u003etrue\u003c/WasmBuildNative\u003e\n  \u003c/PropertyGroup\u003e\n\n  \u003cItemGroup\u003e\n    \u003cNativeFileReference Include=\"Program.c\" /\u003e\n  \u003c/ItemGroup\u003e\n\u003c/Project\u003e\n```\n\n### Expected behavior\n\n`i64func` should print the number that it was passed to the console when called.\n\n### Actual behavior\n\n`i64func` throws `Uncaught RuntimeError: null function or function signature mismatch` when called.\n\n![Image](https://github.com/user-attachments/assets/62ef981d-3f96-490f-8f5a-ccc628d7204d)\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n- OS: Arch Linux\n- dotnet: 9.0.102\n- Host architecture: x86_64\n- Browser: Chrome, Firefox\n\n### Other information\n\n_No response_\n\nEdit: Made my repro closer to what my full code is erroring on and fixed image",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnb05cw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6dt2Wj",
                                           "createdAt":  "2025-02-09T03:00:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "@kg any idea what might be going wrong here?",
                                           "updatedAt":  "2025-02-09T03:00:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dt4BR",
                                           "createdAt":  "2025-02-09T03:26:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "Does it work if you cast the enum to uint64 and make the signature of the pinvoke uint64?",
                                           "updatedAt":  "2025-02-09T03:26:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dvSNr",
                                           "createdAt":  "2025-02-09T17:13:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "r58Playz",
                                           "body":  "Yes, it works fine if I do that.",
                                           "updatedAt":  "2025-02-09T17:13:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dvTlz",
                                           "createdAt":  "2025-02-09T17:20:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFwBEw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "r58Playz",
                                                                               "createdAt":  "2025-02-09T17:20:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kg",
                                           "body":  "I think we historically have some limitations around enums and basetypes, so this is probably one of those cases. I know JS interop previously treated all enums as int32 so it doesn\u0027t surprise me that the same is true for pinvoke.\n\nFor now, please use the workaround, but we\u0027ll definitely keep this issue open and try to fix it.",
                                           "updatedAt":  "2025-02-09T17:20:00Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Function signature mismatch when calling native WASM function that takes i64/long",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113979",
        "createdAt":  "2025-03-27T18:43:13Z",
        "number":  113979,
        "author":  "elringus",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-29T21:36:01Z",
        "body":  "I\u0027m not sure if that\u0027s by design or a bug or I\u0027m doing something wrong, but `[JSExport/Import]` interop in .NET 9 AOT is about 10 times slower than in Rust. Even considering the runtime overhead, 10x difference seems just too much.\n\nBelow are the samples I\u0027ve used for the benchmark:\n\n\u003cdetails\u003e\n  \u003csummary\u003eC#\u003c/summary\u003e\n\n## .csproj\n\n```xml\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\n    \u003cPropertyGroup\u003e\n        \u003cTargetFramework\u003enet9.0\u003c/TargetFramework\u003e\n        \u003cConfiguration\u003eRelease\u003c/Configuration\u003e\n        \u003cRuntimeIdentifier\u003ebrowser-wasm\u003c/RuntimeIdentifier\u003e\n        \u003cAllowUnsafeBlocks\u003etrue\u003c/AllowUnsafeBlocks\u003e\n        \u003cRunAOTCompilation\u003etrue\u003c/RunAOTCompilation\u003e\n        \u003cOptimizationPreference\u003eSpeed\u003c/OptimizationPreference\u003e\n    \u003c/PropertyGroup\u003e\n\n    \u003cItemGroup\u003e\n        \u003cAssemblyAttribute Include=\"System.Runtime.Versioning.SupportedOSPlatform\"\u003e\n            \u003c_Parameter1\u003ebrowser\u003c/_Parameter1\u003e\n        \u003c/AssemblyAttribute\u003e\n    \u003c/ItemGroup\u003e\n\u003c/Project\u003e\n```\n\n## Program.cs\n\n```cs\nusing System.Runtime.InteropServices.JavaScript;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\n\npublic struct Data\n{\n    public string Info;\n    public bool Ok;\n    public int Revision;\n    public string[] Messages;\n}\n\n[JsonSerializable(typeof(Data))]\ninternal partial class SourceGenerationContext : JsonSerializerContext;\n\npublic static partial class Program\n{\n    public static void Main () { }\n\n    [JSExport]\n    public static int EchoNumber ()\n    {\n        return GetNumber();\n    }\n\n    [JSExport]\n    public static string EchoStruct ()\n    {\n        var json = GetStruct();\n        var data = JsonSerializer.Deserialize(json, SourceGenerationContext.Default.Data);\n        return JsonSerializer.Serialize(data, SourceGenerationContext.Default.Data);\n    }\n\n    [JSImport(\"getNumber\", \"x\")]\n    private static partial int GetNumber ();\n\n    [JSImport(\"getStruct\", \"x\")]\n    private static partial string GetStruct ();\n}\n```\n\n## main.mjs\n\n```js\nimport { dotnet } from \"./bin/Release/net9.0/browser-wasm/AppBundle/_framework/dotnet.js\";\n\nconst { setModuleImports, getAssemblyExports, getConfig } = await dotnet\n    .withDiagnosticTracing(false)\n    .create();\n\nsetModuleImports(\"x\", {\n    getNumber: () =\u003e 42,\n    getStruct: () =\u003e JSON.stringify({\n        Info: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n        Ok: true,\n        Revision: -112,\n        Messages: [\"foo\", \"bar\", \"baz\", \"nya\", \"far\"]\n    })\n});\n\nconst exports = await getAssemblyExports(getConfig().mainAssemblyName);\n\nawait new Promise(res =\u003e setTimeout(res, 100));\nlet startTime = performance.now();\nfor (let i = 0; i \u003c 100000; i++)\n    exports.Program.EchoNumber();\nconsole.log(`Echo number: ${(performance.now() - startTime).toFixed(2)} ms`);\n\nawait new Promise(res =\u003e setTimeout(res, 100));\nstartTime = performance.now();\nfor (let i = 0; i \u003c 100000; i++)\n    exports.Program.EchoStruct();\nconsole.log(`Echo struct: ${(performance.now() - startTime).toFixed(2)} ms`);\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n  \u003csummary\u003eRust\u003c/summary\u003e\n\n## Cargo.toml\n\n```toml\n[package]\nname = \"rust-wasm\"\nversion = \"0.1.0\"\nedition = \"2024\"\n\n[lib]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nwasm-bindgen = \"0.2\"\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde_json = \"1.0\"\n\n[profile.release]\ncodegen-units = 1\nlto = true\nopt-level = 3\npanic = \"abort\"\nstrip = true\n```\n\n## lib.rs\n\n```rs\nuse serde::{Deserialize, Serialize};\nuse wasm_bindgen::prelude::*;\n\n#[derive(Serialize, Deserialize)]\npub struct Data {\n    pub info: String,\n    pub ok: bool,\n    pub revision: i32,\n    pub messages: Vec\u003cString\u003e,\n}\n\n#[wasm_bindgen]\nextern \"C\" {\n    #[wasm_bindgen(js_name = getNumber)]\n    fn get_number() -\u003e i32;\n    #[wasm_bindgen(js_name = getStruct)]\n    fn get_struct() -\u003e String;\n}\n\n#[wasm_bindgen(js_name = echoNumber)]\npub fn echo_number() -\u003e i32 {\n    get_number()\n}\n\n#[wasm_bindgen(js_name = echoStruct)]\npub fn echo_struct() -\u003e String {\n    let json = get_struct();\n    let data: Data = serde_json::from_str(\u0026json).unwrap();\n    serde_json::to_string(\u0026data).unwrap()\n}\n```\n\n## main.mjs\n\n```js\nimport { echoNumber, echoStruct } from \u0027./pkg/rust_wasm.js\u0027;\n\nglobal.getNumber = () =\u003e 42;\nglobal.getStruct = () =\u003e JSON.stringify({\n    info: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n    ok: true,\n    revision: -112,\n    messages: [\"foo\", \"bar\", \"baz\", \"nya\", \"far\"]\n});\n\nawait new Promise(res =\u003e setTimeout(res, 100));\nlet startTime = performance.now();\nfor (let i = 0; i \u003c 100000; i++)\n    echoNumber();\nconsole.log(`Echo number: ${(performance.now() - startTime).toFixed(2)} ms`);\n\nawait new Promise(res =\u003e setTimeout(res, 100));\nstartTime = performance.now();\nfor (let i = 0; i \u003c 100000; i++)\n    echoStruct();\nconsole.log(`Echo struct: ${(performance.now() - startTime).toFixed(2)} ms`);\n```\n\n\u003c/details\u003e\n\n```sh\ndotnet publish -c Release\nnode main.mjs\n\nEcho number: 65.49 ms\nEcho struct: 1082.17 ms\n```\n\n```sh\nwasm-pack build --target nodejs\nnode main.mjs\n\nEcho number: 5.91 ms\nEcho struct: 238.33 ms\n```\n\nIs this something to be expected and can\u0027t be improved or maybe I\u0027m missing some configuration/optimization options?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpMMheA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6kdFYl",
                                           "createdAt":  "2025-03-27T18:43:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-json, @gregsdennis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-27T18:43:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kdHQx",
                                           "createdAt":  "2025-03-27T18:46:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-27T18:46:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kdl1T",
                                           "createdAt":  "2025-03-27T19:32:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEc1vzg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2025-03-28T13:44:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "IDisposable",
                                                                               "createdAt":  "2025-08-01T18:26:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "hez2010",
                                           "body":  "Can you try NativeAOT-LLVM? By default .NET uses mono (even for aot) for wasm on browser which is known to be slow.\n\nTo try NativeAOT-LLVM, you can replace your csproj file with the following:\n\n```xml\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\n\n  \u003cPropertyGroup\u003e\n    \u003cTargetFramework\u003enet9.0-browser\u003c/TargetFramework\u003e\n    \u003cRuntimeIdentifier\u003ebrowser-wasm\u003c/RuntimeIdentifier\u003e\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\n    \u003cDotNetJsApi\u003etrue\u003c/DotNetJsApi\u003e\n    \u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\n    \u003cInvariantGlobalization\u003etrue\u003c/InvariantGlobalization\u003e\n    \u003cNativeDebugSymbols\u003efalse\u003c/NativeDebugSymbols\u003e\n    \u003cStackTraceSupport\u003efalse\u003c/StackTraceSupport\u003e\n    \u003cDebugType\u003enone\u003c/DebugType\u003e\n    \u003cAllowUnsafeBlocks\u003etrue\u003c/AllowUnsafeBlocks\u003e\n    \u003cIlcHostPackagePath Condition=\"\u0027$([MSBuild]::IsOSPlatform(\u0026quot;Windows\u0026quot;))\u0027 == \u0027true\u0027\"\u003e$(Pkgruntime_win-x64_Microsoft_DotNet_ILCompiler_LLVM)\u003c/IlcHostPackagePath\u003e\n    \u003cIlcHostPackagePath Condition=\"\u0027$([MSBuild]::IsOSPlatform(\u0026quot;Windows\u0026quot;))\u0027 == \u0027false\u0027\"\u003e$(Pkgruntime_linux-x64_Microsoft_DotNet_ILCompiler_LLVM)\u003c/IlcHostPackagePath\u003e\n    \u003cUseAppHost\u003efalse\u003c/UseAppHost\u003e\n    \u003cUsingBrowserRuntimeWorkload\u003efalse\u003c/UsingBrowserRuntimeWorkload\u003e\n    \u003cUsingWasiRuntimeWorkload\u003efalse\u003c/UsingWasiRuntimeWorkload\u003e\n    \u003cUsingEmscriptenWorkload\u003etrue\u003c/UsingEmscriptenWorkload\u003e\n    \u003cRestoreAdditionalProjectSources\u003e\n      https://api.nuget.org/v3/index.json;\n      https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-experimental/nuget/v3/index.json;\n    \u003c/RestoreAdditionalProjectSources\u003e\n  \u003c/PropertyGroup\u003e\n\n  \u003cPropertyGroup\u003e\n    \u003cEmccExtraArgs\u003e$(EmccExtraArgs) -lcompiler_rt-wasm-sjlj\u003c/EmccExtraArgs\u003e\n    \u003cEmccFlags\u003e$(EmccFlags) -O3\u003c/EmccFlags\u003e\n  \u003c/PropertyGroup\u003e\n\n  \u003cItemGroup\u003e\n    \u003cPackageReference Include=\"Microsoft.DotNet.ILCompiler.LLVM\" Version=\"10.0.0-*\" /\u003e\n    \u003cPackageReference Condition=\"\u0027$([MSBuild]::IsOSPlatform(\u0026quot;Windows\u0026quot;))\u0027 == \u0027true\u0027\" Include=\"runtime.win-x64.Microsoft.DotNet.ILCompiler.LLVM\" Version=\"10.0.0-*\" /\u003e\n    \u003cPackageReference Condition=\"\u0027$([MSBuild]::IsOSPlatform(\u0026quot;Windows\u0026quot;))\u0027 == \u0027false\u0027\" Include=\"runtime.linux-x64.Microsoft.DotNet.ILCompiler.LLVM\" Version=\"10.0.0-*\" /\u003e\n  \u003c/ItemGroup\u003e\n  \n  \u003cPropertyGroup\u003e\n    \u003cExecutableExtensionName Condition=\"\u0027$([MSBuild]::IsOSPlatform(\u0026quot;Windows\u0026quot;))\u0027 == \u0027true\u0027\"\u003e.exe\u003c/ExecutableExtensionName\u003e\n  \u003c/PropertyGroup\u003e\n\n  \u003cItemGroup\u003e\n    \u003cEmscriptenEnvVars Include=\"DOTNET_EMSCRIPTEN_LLVM_ROOT=$(EmscriptenUpstreamBinPath)\" /\u003e\n    \u003cEmscriptenEnvVars Include=\"DOTNET_EMSCRIPTEN_BINARYEN_ROOT=$(EmscriptenSdkToolsPath)\" /\u003e\n    \u003cEmscriptenEnvVars Include=\"DOTNET_EMSCRIPTEN_NODE_JS=$(EmscriptenNodeBinPath)node$(ExecutableExtensionName)\" /\u003e\n    \u003cEmscriptenEnvVars Include=\"EM_CACHE=$(EmscriptenCacheSdkCacheDir)\" /\u003e\n  \u003c/ItemGroup\u003e\n\n\u003c/Project\u003e\n```\n\nand build your project with `dotnet publish -c Release -r browser-wasm`\n\nAnd your mjs file need to be modified to\n```js\nimport { dotnet } from \"./dotnet.js\"; // update path here\n\nconst { setModuleImports, getAssemblyExports, getConfig } = await dotnet\n    .withDiagnosticTracing(false)\n    .withMainAssembly(\"MyWasmJsInteropTest\") // set the main assembly name to match your project\n    .create();\n\nsetModuleImports(\"x\", {\n    getNumber: () =\u003e 42,\n    getStruct: () =\u003e JSON.stringify({\n        Info: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n        Ok: true,\n        Revision: -112,\n        Messages: [\"foo\", \"bar\", \"baz\", \"nya\", \"far\"]\n    })\n});\n\nconst exports = await getAssemblyExports(getConfig().mainAssemblyName);\n\nawait new Promise(res =\u003e setTimeout(res, 100));\nlet startTime = performance.now();\nfor (let i = 0; i \u003c 100000; i++)\n    exports.Program.EchoNumber();\nconsole.log(`Echo number: ${(performance.now() - startTime).toFixed(2)} ms`);\n\nawait new Promise(res =\u003e setTimeout(res, 100));\nstartTime = performance.now();\nfor (let i = 0; i \u003c 100000; i++)\n    exports.Program.EchoStruct();\nconsole.log(`Echo struct: ${(performance.now() - startTime).toFixed(2)} ms`);\n```\n\nOn my machine this yielded\n\n```\nEcho number: 18.85 ms\nEcho struct: 190.76 ms\n```\n\nwhich is quite competitive with Rust version.",
                                           "updatedAt":  "2025-03-27T19:38:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6keeaD",
                                           "createdAt":  "2025-03-27T20:54:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elringus",
                                           "body":  "@hez2010 Thank you so much for sharing this! I\u0027ve tried NativeAOT-LLVM in the past, but wasn\u0027t aware of the correct project config/setup. It does indeed work much faster, especially when dealing with JSON serialization. I got following results on my machine:\n\n```\nEcho number: 45.08 ms\nEcho struct: 374.72 ms\n```\n\n— this is now actually on the level I expected. Great stuff.\n\nDo I understand correctly that the intention is to eventually use NativeAOT-LLVM as the default backend for the browser-wasm target?",
                                           "updatedAt":  "2025-03-27T20:54:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6khUHe",
                                           "createdAt":  "2025-03-28T04:57:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcz5cg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elringus",
                                                                               "createdAt":  "2025-03-28T08:34:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2025-03-28T13:44:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RenderMichael",
                                                                               "createdAt":  "2025-08-01T14:12:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "hez2010",
                                           "body":  "\u003e Do I understand correctly that the intention is to eventually use NativeAOT-LLVM as the default backend for the browser-wasm target?\n\nMaybe? It\u0027s still an actively developed experimental backend driven by the community, and there\u0027re still many issues need to be resolved before it can be made as the default backend.",
                                           "updatedAt":  "2025-03-28T04:58:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kjSrc",
                                           "createdAt":  "2025-03-28T09:34:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "~~this is \"why is interpreter slow\", not really about interop~~\n\nWe don\u0027t have JIT on WASM (RiuJIT backend). \nFor now we have interpreter accelerator https://github.com/dotnet/runtime/blob/main/docs/design/mono/jiterpreter.md\n\nFew optimization hints\n- for json https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-source-generator/\n- you can try Mono AOT `\u003cRunAOTCompilation\u003etrue\u003c/RunAOTCompilation\u003e` in your csproj\n\nHere are other advanced knobs you can try to tune https://github.com/dotnet/runtime/blob/main/src/mono/wasm/features.md",
                                           "updatedAt":  "2025-03-28T10:42:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kjdSI",
                                           "createdAt":  "2025-03-28T09:50:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEL2mjQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2025-03-28T10:27:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hez2010",
                                           "body":  "@pavelsavara note that the author was already using mono aot in this issue, so it\u0027s unrelated to the interpreter. ",
                                           "updatedAt":  "2025-03-28T09:50:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kkCiR",
                                           "createdAt":  "2025-03-28T10:35:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e [@pavelsavara](https://github.com/pavelsavara) note that the author was already using mono aot in this issue, so it\u0027s unrelated to the interpreter.\n\nI stand corrected, thanks!\n\nI can try to speculate why Mono AOT + Interop is slow ... or somebody could deep dive and optimize it.\n- Is there something which is not Mono AOT compatible and we are in fact running interp ?\n- Is the generated code optimal ?\n- Is the exception handling on the interop boundary slow ?\n\nWe would need more actionable insight, rather than general: this is slow.",
                                           "updatedAt":  "2025-03-28T10:36:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kkjN_",
                                           "createdAt":  "2025-03-28T11:10:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEU66dA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "rblanca",
                                                                               "createdAt":  "2025-06-02T15:47:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "elringus",
                                           "body":  "@pavelsavara Thank you for the insight! I\u0027ve actually already had all the optimizations employed except for SIMD, but after enabling it, the results remained unchanged.\n\nI\u0027m afraid I\u0027m not knowledgeable enough to investigate the efficiency of Mono\u0027s internals, but if there\u0027s anything I can test or try at a higher user level, I\u0027d be happy to assist.\n\nOn a side note, I really hope NativeAOT-LLVM makes it as the default backend, as it seems to nail all the pain points: it\u0027s significantly faster than Mono AOT, produces a smaller binary than even the non-AOT Mono (1.7MB vs. 2.1MB), and (what surprised me) has compile times on par with non-AOT Mono.",
                                           "updatedAt":  "2025-03-28T11:10:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kk7vm",
                                           "createdAt":  "2025-03-28T11:51:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEL4ZLw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elringus",
                                                                               "createdAt":  "2025-03-28T11:53:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e On a side note, I really hope NativeAOT-LLVM makes it as the default backend\n\nAt the moment, our main focus in on Blazor, which is unfortunately not NAOT compatible (reflection, trimming). \nThat doesn\u0027t mean never, that means not yet and possibly in the future. \nWe don\u0027t know yet, but we are collaborating with NAOT-LLVM and watching it closely.\n\n\u003e I\u0027m afraid I\u0027m not knowledgeable enough to investigate the efficiency of Mono\u0027s internals, but if there\u0027s anything I can test or try at a higher user level, I\u0027d be happy to assist.\n\nTo make perf profiling more accessible to contributors and customers, I\u0027m working on https://github.com/dotnet/runtime/issues/76316\n\nQuite likely this will land in Net 10 preview 4 and you can use it to make further observations.\n\n\n",
                                           "updatedAt":  "2025-03-28T11:51:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kk_b7",
                                           "createdAt":  "2025-03-28T11:59:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEL4bjg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elringus",
                                                                               "createdAt":  "2025-03-28T12:00:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Also better integration with dev tools profiler is already in [preview3](https://github.com/dotnet/runtime/pull/112352)\n\nSpecifically for Mono AOT, the flame graph of native code would be useful for your test case.\n\n```\n\u003cRunAOTCompilation\u003etrue\u003c/RunAOTCompilation\u003e\n\u003cWasmNativeStrip\u003efalse\u003c/WasmNativeStrip\u003e\n\u003cWasmNativeDebugSymbols\u003etrue\u003c/WasmNativeDebugSymbols\u003e\n```\n",
                                           "updatedAt":  "2025-03-28T11:59:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kwyF4",
                                           "createdAt":  "2025-03-29T21:36:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEc7oaw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "rogihee",
                                                                               "createdAt":  "2025-04-30T17:00:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "rblanca",
                                                                               "createdAt":  "2025-06-02T15:46:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2025-08-03T20:11:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "elringus",
                                           "body":  "Gathered a bit more info, could be useful for context. Numbers are relative to the Rust baseline results. Sources are here: https://github.com/elringus/bootsharp/tree/main/samples/bench\n\n|             | Rust  | .NET LLVM | .NET AOT | Go      |\n|-------------|-------|-----------|--------|---------|\n| Echo Number | `1.0` | `14.4`    | `21.1` | `718.7` |\n| Echo Struct | `1.0` | `1.5`     | `4.3`  | `20.8`  |\n| Fibonacci   | `1.0` | `1.1`     | `1.5`  | `3.8`   |",
                                           "updatedAt":  "2025-03-29T21:36:00Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "[WASM] Why JS mono AOT is so slow?",
        "labels":  [
                       "question",
                       "arch-wasm",
                       "tenet-performance",
                       "area-System.Runtime.InteropServices.JavaScript"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114140",
        "createdAt":  "2025-04-02T06:42:24Z",
        "number":  114140,
        "author":  "iXyles",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-02T19:37:06Z",
        "body":  "### Description\n\nThe other day we started looking into what it\u0027d take to enable multi threading for our wasmbrowser project that we utilize along an angular app, with the main purpose of utilizing a bunch of business logic within the browser written in C#.\n\nWe started the WASM component in a web-worker to off-load it from the \"main\" thread to avoid it looking UI when processing things. However, now with MT it does not seem to work - as it fails on startup during:\n`mono_wasm_pthread_on_pthread_attached-\u003e        currentWorkerThreadEvents.dispatchEvent(makeWorkerThreadEvent(dotnetPthreadAttached, pthread_self));`\nFrom what I have gathered it tries to do \"dispatchEvent\" on the \"UI\" thread which is also a worker.\n\n![Image](https://github.com/user-attachments/assets/5d9d4809-62d6-42e8-837f-f384527a9609)\n\n![Image](https://github.com/user-attachments/assets/1bca6e80-74e1-4254-a34b-6443987fb366)\n\nThis might not be a bug, but expected to not work - that the new MT design is meant to always be started in the web context and not in a worker context.\n\n### Reproduction Steps\n\nwasmbrowser project `worker.js`\n```\nimport { dotnet } from \"./_framework/dotnet.js\";\n\nlet modulePromise = null;\n\nfunction loadWasm() {\n    console.log(\"SharedArrayBuffer available:\", typeof SharedArrayBuffer !== \u0027undefined\u0027, globalThis);\n    console.info(\"Loading WASM module...\");\n\n    return dotnet\n        .withConfig({\n            // cacheBootResources: true // currently not supported: https://github.com/dotnet/runtime/issues/97787\n        })\n        .create()\n        .then((net) =\u003e {\n            const { getAssemblyExports, getConfig } = net;\n            const config = getConfig();\n            return getAssemblyExports(config.mainAssemblyName);\n        })\n        .then((module) =\u003e {\n            console.info(\"WASM module loaded...\");\n            return module;\n        });\n}\n\nfunction ensureLoaded() {\n    return !modulePromise\n        ? (modulePromise = loadWasm())\n        : modulePromise;\n}\n\nfunction test() {\n    return ensureLoaded().then((module) =\u003e\n        module.WasmClient.Test()\n    );\n}\n\n// dummied down for example\naddEventListener(\"message\", (event) =\u003e {\n  if (event.data.method == \"test\") {\n      test().then((output) =\u003e {\n        postMessage({ result: output });\n      });\n  }\n});\n```\n\nwasmbrowser C# sample code\n```\nusing System.Runtime.InteropServices.JavaScript;\nusing System.Threading.Tasks;\n\nreturn; // Main entry point do not remove.\n\npublic partial class WasmClient\n{\n    [JSExport]\n    public static Task\u003cstring\u003e Test()\n    {\n        return Task.FromResult(\"Hello from C#\");\n    }\n}\n```\n\nThen from JS side depending how you configure it\n```\nvar worker = new Worker(\u0027./assets/wasm/worker.js\u0027, { type: \u0027module\u0027 });\nworker.addEventListener(\u0027message\u0027, (event) =\u003e {\nconsole.log(event); // log output from wasm\n});\nworker.postMessage({\n  method: \"test\"\n});\n```\n\nFeel free to ping me if I should setup a repo project for simplification.\n\n### Expected behavior\n\nExpected behaviour is that the wasm project loads inside of the worker, the method is called and returns the `Hello from C#`. Note: This works just fine if you turn off multithreading.\n\n### Actual behavior\n\n![Image](https://github.com/user-attachments/assets/01345f6e-35d0-4bc3-a8d7-db4d2e24f4ea)\n\n### Regression?\n\nNot that we know of - might be an untested territory, worth to note - this works just fine without \"MT\" enabled.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n```\n\u003cPropertyGroup\u003e\n\t\u003cTargetFramework\u003enet9.0\u003c/TargetFramework\u003e\n\t\u003cRuntimeIdentifier\u003ebrowser-wasm\u003c/RuntimeIdentifier\u003e\n\u003cOutputType\u003eExe\u003c/OutputType\u003e\n\t\u003cWasmMainJSPath\u003emain.js\u003c/WasmMainJSPath\u003e\u003c!-- points towards an empty file with console log --\u003e\n\t\u003cWasmEnableSIMD\u003etrue\u003c/WasmEnableSIMD\u003e\n\t\u003cWasmEnableThreads\u003etrue\u003c/WasmEnableThreads\u003e\n\t\u003cTrimMode\u003epartial\u003c/TrimMode\u003e\n\t\u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\n\t\u003cWasmBuildNative\u003etrue\u003c/WasmBuildNative\u003e\n\t\u003cAllowUnsafeBlocks\u003etrue\u003c/AllowUnsafeBlocks\u003e\n\t\u003cPublishWithAot\u003efalse\u003c/PublishWithAot\u003e\n\t\u003cWasmStripILAfterAOT\u003efalse\u003c/WasmStripILAfterAOT\u003e\n\t\u003cWasmAppDir\u003e../webapp/src/assets/wasm\u003c/WasmAppDir\u003e\u003c!-- adjust accordingly --\u003e\n\u003c/PropertyGroup\u003e\n```\n\nBuild project with `dotnet publish` and the files needed will be copied if `WasmAppDir` is configured correctly.\n\n### Other information\n\nmono_wasm_pthread_on_pthread_attached being called for the \"UI\" aka main thread even though the comment says it should not. But when the main thread is a worker it fails some pre-check (is the initial guess)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpUg9ng==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6lOixo",
                                           "createdAt":  "2025-04-02T09:56:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-02T09:56:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lOi4K",
                                           "createdAt":  "2025-04-02T09:56:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "cc @pavelsavara ",
                                           "updatedAt":  "2025-04-02T09:56:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lPUjH",
                                           "createdAt":  "2025-04-02T11:24:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "There is lot of `postMessage` drama in MT and I guess that may be the problem. \nOr maybe the way how we detect \"main\" thread, expecting it to be \"UI\" thread.\n\nIt could be fixable, but currently not a priority for us.",
                                           "updatedAt":  "2025-04-02T11:24:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lQIW7",
                                           "createdAt":  "2025-04-02T12:52:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iXyles",
                                           "body":  "Do I understand it correctly that if we wish to try utilize MT for now we have to move back to none worker host, as it is not the focus to get that working but rather primarily adapt it for blazor-webassembly.\n\nSince this is a different kind of use-case situation which is not prio to support - I do wonder if there is a way then to force the \"main\" thread to move the actual work to a worker, in simple terms changing the C# layer to push it to the worker\n\nWould this example work, or would something more be required?\n```\n[JSExport]\npublic static Task\u003cstring\u003e Test() // or is it sufficient that this is `Task` \n{\n    return ExecuteOnWorker(() =\u003e TestImpl());\n}\n\nstatic Task\u003cT\u003e ExecuteOnWorker\u003cT\u003e(Func\u003cTask\u003cT\u003e\u003e workFunction)\n{\n    // Assuming this is will cause the `workFunction` to run on a worker\n    return Task.Run(async () =\u003e await workFunction());\n}\n\nstatic async Task\u003cstring\u003e TestImpl()\n{\n    // Simulate some async work\n    await Task.Delay(100); // Example delay\n    return \"Hello from C#\";\n}\n```",
                                           "updatedAt":  "2025-04-02T12:52:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lRwZp",
                                           "createdAt":  "2025-04-02T15:07:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "This is the [MT design](https://github.com/dotnet/designs/blob/main/accepted/2023/wasm-browser-threads.md)  does it help ?",
                                           "updatedAt":  "2025-04-02T15:07:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lSD2e",
                                           "createdAt":  "2025-04-02T15:33:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEMlHiA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2025-04-02T15:50:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "iXyles",
                                           "body":  "Seems so, my understanding from the design \u0026 comments regarding net9 section is that as long the JSExports methods in C# are `Task\u003cT\u003e` that we call from the web app will be off-loaded to a worker, and then return to the deputy thread (in this instance our web app) to continue working with the output data.\n\nWill have to do a small POC to verify that my assumption is correct, and see if fits/work for our cases.\nI\u0027d however say that the given example scenario would be nice to see working, but I do understand that it will not be prioritized at this point in time.\n",
                                           "updatedAt":  "2025-04-02T15:33:52Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[WASM][MT] Failing to start inside of a web worker",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115763",
        "createdAt":  "2025-05-20T07:01:58Z",
        "number":  115763,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T17:23:04Z",
        "body":  "[Log](https://helixr1107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-115735-merge-97a54c8e5dbf497f9f/WasmTestOnChrome-ST-System.Runtime.InteropServices.JavaScript.Tests/1/console.4572561d.log?helixlogtype=result\u0026skoid=8eda00af-b5ec-4be9-b69b-0919a2338892\u0026sktid=72f988bf-86f1-41af-91ab-2d7cd011db47\u0026skt=2025-05-20T06%3A56%3A52Z\u0026ske=2025-05-20T07%3A56%3A52Z\u0026sks=b\u0026skv=2024-11-04\u0026sv=2024-11-04\u0026se=2025-05-20T07%3A56%3A52Z\u0026sr=b\u0026sp=rl\u0026sig=DgBSz617H%2BTM1y%2F0TuZKw1bPlpRA54da3MNE%2FeNvhd8%3D)\n```\n[20:20:27] info: [FAIL] System.Runtime.InteropServices.JavaScript.Tests.TimerTests.TestTimers(timeouts: [10, 20], expectedSetCounter: 1, expectedSetCounterAfterCleanUp: null, expectedHitCount: null)\n[20:20:27] info: wasCalled: actual 0 expected 2\n[20:20:27] info:    at System.Runtime.InteropServices.JavaScript.Tests.TimerTests.TestTimers(Int32[] timeouts, Nullable`1 expectedSetCounter, Nullable`1 expectedSetCounterAfterCleanUp, Nullable`1 expectedHitCount)\n[20:20:27] info: --- End of stack trace from previous location ---\n[20:20:31] info: [FAIL] System.Runtime.InteropServices.JavaScript.Tests.TimerTests.TestTimers(timeouts: [800, 600, 400, 200, 100], expectedSetCounter: 5, expectedSetCounterAfterCleanUp: 13, expectedHitCount: 9)\n[20:20:31] info: setCounter: actual 8 expected 13\n[20:20:31] info:    at System.Runtime.InteropServices.JavaScript.Tests.TimerTests.TestTimers(Int32[] timeouts, Nullable`1 expectedSetCounter, Nullable`1 expectedSetCounterAfterCleanUp, Nullable`1 expectedHitCount)\n[20:20:31] info: --- End of stack trace from previous location ---\n```\n\n## Build Information\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=1045454\nBuild error leg or test failing: TimerTests.TestTimers\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": \"[FAIL] System.Runtime.InteropServices.JavaScript.Tests.TimerTests.TestTimers\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1045454\r\n**Error message validated:** `[[FAIL] System.Runtime.InteropServices.JavaScript.Tests.TimerTests.TestTimers`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 5/20/2025 7:02:16 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrHKmnA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6scqac",
                                           "createdAt":  "2025-05-20T07:02:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-20T07:02:09Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[browser] System.Runtime.InteropServices.JavaScript.Tests.TimerTests.TestTimers",
        "labels":  [
                       "arch-wasm",
                       "disabled-test",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116781",
        "createdAt":  "2025-06-18T10:30:27Z",
        "number":  116781,
        "author":  "maraf",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-20T09:34:47Z",
        "body":  "Since boot config is now inlined into `dotnet.js`, any user call will happen after it.\nSo we don\u0027t the exception from the ordering.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[browser] Application environment has an exception from config precedence order (boot config over javascript API). We should unify the precedence (probably javascript API over boot config)",
        "labels":  [
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118268",
        "createdAt":  "2025-08-01T08:31:44Z",
        "number":  118268,
        "author":  "chexiongsheng",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T11:30:16Z",
        "body":  "### Description\n\nI tested it in both node and chrome, and the results were similar. \n\nversion: .NET 9.0.7\n\nI modified the [console-node](https://github.com/dotnet/runtime/tree/main/src/mono/sample/wasm/console-node) as blow:\n\nmain.mjs\n```javascript\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\nimport { dotnet } from \u0027./_framework/dotnet.js\u0027\n\nfunction fibonacci(n) {\n    if (n \u003c= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nconst FN = 42;\n\nconst startTime = new Date().getTime();\nconst result = fibonacci(FN);\nconst endTime = new Date().getTime();\nconst duration = endTime - startTime;\nconsole.log(`The ${FN}nd Fibonacci number is ${result}`);\nconsole.log(`Calculation took ${duration} milliseconds`);\n\n\nconst api = await dotnet\n    .withDiagnosticTracing(false)\n    .withRuntimeOptions([\"--jiterpreter-traces-enabled\"]) // Whether or not to comment does not affect the results\n    .withApplicationArguments(`${FN}`)\n    .create()\n    \nawait api.runMainAndExit();\n```\nProgram.cs\n\n```csharp\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\nusing System;\nusing System.Threading.Tasks;\n\npublic class Fibonacci\n{\n    public static int Get(int n)\n    {\n        if (n \u003c= 1)\n        {\n            return n;\n        }\n        return Get(n - 1) + Get(n - 2);\n    }\n}\n\npublic class Test\n{\n    public static async Task\u003cint\u003e Main(string[] args)\n    {\n        var watch = System.Diagnostics.Stopwatch.StartNew();\n        int number = int.Parse(args[0]);\n        var result = Fibonacci.Get(number);\n        watch.Stop();\n        var elapsedMs = watch.ElapsedMilliseconds;\n        Console.WriteLine($\"Fibonacci.Get({number}) = {result}, elapsedMs = {elapsedMs}\");\n        return args.Length;\n    }\n}\n\n```\n\ntest result\n\n```\nThe 42nd Fibonacci number is 267914296\nCalculation took 1649 milliseconds\nMONO_WASM: Error loading symbol file dotnet.native.js.symbols: {}\nFibonacci.Get(42) = 267914296, elapsedMs = 15840\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvgbVcQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc67YdvZ",
                                           "createdAt":  "2025-08-01T08:43:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chexiongsheng",
                                           "body":  "Add AOT compilation parameters\n```\nmake AOT=1 \n```\ntest result\n\n```\nThe 42nd Fibonacci number is 267914296\nCalculation took 1660 milliseconds\nMONO_WASM: Error loading symbol file dotnet.native.js.symbols: {}\nFibonacci.Get(42) = 267914296, elapsedMs = 1264\n```\n\nI suspect JIT is not working",
                                           "updatedAt":  "2025-08-01T08:43:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67aF4m",
                                           "createdAt":  "2025-08-01T11:02:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "See also #113979",
                                           "updatedAt":  "2025-08-01T11:02:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67wmXN",
                                           "createdAt":  "2025-08-04T10:44:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrzVlad",
                                           "body":  "This seems expected. Jiterpreter is not a full JIT, is a mix between jitted thunks and interpreter. For each call we always transition back to the interpreter so it looks like your microbenchmark hits this limitation.",
                                           "updatedAt":  "2025-08-04T10:44:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68Lex8",
                                           "createdAt":  "2025-08-06T01:33:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chexiongsheng",
                                           "body":  "\u003e This seems expected. Jiterpreter is not a full JIT, is a mix between jitted thunks and interpreter. For each call we always transition back to the interpreter so it looks like your microbenchmark hits this limitation.\n\nWhat kind of test cases can reflect the performance advantages of Jiterpreter? I turned off Jiterpreter by using `--no-jiterpreter-traces-enabled` and the test results were similar.\n\n```javascript\n// ...\nconst api = await dotnet\n    .withDiagnosticTracing(false)\n    .withRuntimeOptions([\"--no-jiterpreter-traces-enabled\"])\n    .withApplicationArguments(`${FN}`)\n    .create()\n    \nawait api.runMainAndExit();\n```\ntest result:\n```\nThe 42nd Fibonacci number is 267914296\nCalculation took 1668 milliseconds\nMONO_WASM: Error loading symbol file dotnet.native.js.symbols: {}\nFibonacci.Get(42) = 267914296, elapsedMs = 16562\n```",
                                           "updatedAt":  "2025-08-06T01:33:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68M_iv",
                                           "createdAt":  "2025-08-06T06:07:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrzVlad",
                                           "body":  "I would steer away from microbenchmarks since they are not that relevant. Closer to real world benchmarks that we used in the past were for object serialization/deserialization. So I would give that a try instead. cc @kg ",
                                           "updatedAt":  "2025-08-06T06:07:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68fHbP",
                                           "createdAt":  "2025-08-07T03:14:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "Hi, thanks for your interest.\nThe jiterpreter is not involved in your benchmark because it does not implement method calls. Method calls are implemented by the interpreter, and your benchmark basically does nothing except call methods.\n\nTo optimize your microbenchmark and real scenarios similar to it, you would want a JIT that compiles entire methods or even entire classes. At the time we developed the jiterpreter, it was not feasible to ship such a JIT in the browser (due to limitations imposed by Chrome\u0027s V8 runtime which were later relaxed), so we didn\u0027t build one. The jiterpreter instead operates on slices of method bodies, which means it can optimize things like chains of computations or hot loops, but there\u0027s nothing for it to optimize if all it sees is a string of call instructions.\n\nIf there are production scenarios where AOT isn\u0027t feasible and you need better performance from the jiterpreter please don\u0027t hesitate to share examples of them, it\u0027s possible things could be done about those scenarios. Unfortunately, optimizing this particular microbenchmark is not particularly trivial.",
                                           "updatedAt":  "2025-08-07T03:14:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69qWc8",
                                           "createdAt":  "2025-08-13T02:41:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chexiongsheng",
                                           "body":  "@kg thank you for your answer.\nI\u0027d like to ask a quick question: I compared the AOT and non-AOT compilation products and found that the only difference seems to be the data. I originally thought AOT was the compilation of msil to wasm instructions. Could it be that the data in the AOT product is the content of another wasm, dynamically creating a wasm module?",
                                           "updatedAt":  "2025-08-13T02:41:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69q9Um",
                                           "createdAt":  "2025-08-13T04:42:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "\u003e [@kg](https://github.com/kg) thank you for your answer. I\u0027d like to ask a quick question: I compared the AOT and non-AOT compilation products and found that the only difference seems to be the data. I originally thought AOT was the compilation of msil to wasm instructions. Could it be that the data in the AOT product is the content of another wasm, dynamically creating a wasm module?\n\nThe way our AOT works currently is that it identifies eligible methods and compiles them ahead of time to WASM which goes into an \"aot instances\" file. The aot instances file is then merged into the runtime\u0027s wasm file so that all the application and runtime code can be loaded at once.\n\nIf you\u0027re not seeing any changes to anything other than data that suggests your code isn\u0027t being AOTd.",
                                           "updatedAt":  "2025-08-13T04:42:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-BtVx",
                                           "createdAt":  "2025-08-14T11:30:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chexiongsheng",
                                           "body":  "\u003e \u003e [@kg](https://github.com/kg) thank you for your answer. I\u0027d like to ask a quick question: I compared the AOT and non-AOT compilation products and found that the only difference seems to be the data. I originally thought AOT was the compilation of msil to wasm instructions. Could it be that the data in the AOT product is the content of another wasm, dynamically creating a wasm module?\n\u003e \n\u003e The way our AOT works currently is that it identifies eligible methods and compiles them ahead of time to WASM which goes into an \"aot instances\" file. The aot instances file is then merged into the runtime\u0027s wasm file so that all the application and runtime code can be loaded at once.\n\u003e \n\u003e If you\u0027re not seeing any changes to anything other than data that suggests your code isn\u0027t being AOTd.\n\nI used wasm2wat to see that only the data was different. But the AOT version is an order of magnitude higher in performance. You can look at my previous test result.",
                                           "updatedAt":  "2025-08-14T11:30:16Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Jiterpreter is 10 times slower than js？",
        "labels":  [
                       "arch-wasm",
                       "tenet-performance",
                       "area-System.Runtime.InteropServices.JavaScript"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119685",
        "createdAt":  "2025-09-13T13:43:41Z",
        "number":  119685,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-17T18:51:32Z",
        "body":  "@SingleAccretion [said](https://github.com/dotnet/runtime/pull/119681#issuecomment-3288360569)\n\u003e I would like to see these small helpers implemented as Emscripten JS libraries / EM_JS for linking and layering reasons\n\nI strongly prefer TS with ES6 style over Emscripten JS libraries C like style, which break closures and have other sins. \n\nI need to re-invent the way how our JS/ES6 modules (privately) interface each other. So that we can allow emscripten linker to play better with it. And at the same time we could conveniently share utility code. (logging, asserts, memory access, etc ...)\n\nThere is also question of how many published .js file we have. For now I would like to stick to current published assets so that we don\u0027t break Blazor and others. \n\nAnother aspect is parallel download/compilation/startup of various parts. I\u0027m not friend of single file on web.\nI believe that we have has best cold download start perf as is. \n\nAnother consideration is rollup/webpack bundlers, for people who don\u0027t share my view. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxOaWfA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7EALAz",
                                           "createdAt":  "2025-09-13T13:43:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-13T13:43:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EAXPm",
                                           "createdAt":  "2025-09-13T14:11:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "\u003e I need to re-invent the way how our JS/ES6 modules (privately) interface each other. So that we can allow emscripten linker to play better with it. And at the same time we could conveniently share utility code. (logging, asserts, memory access, etc ...)\n\nYes, that would be ideal. Note I am excluding the \"host/loader\" code from this discussion (that code is already layered above the runtime and can\u0027t be trimmed anyway). So this is only about JS which we call from the app and which may call back into the app to use some services.\n\nHere is my north star for the experience:\n1) Possible to use a single `emcc` invocation to link the whole app.\n2) The linker is able to drop JS which isn\u0027t used.\n3) The linker is able to drop native/app code which is used by these unused JS references.\n\nEmscripten\u0027s JS libraries achieve this via the `__deps` annotation and `#STUB` libraries support in wasm-ld.",
                                           "updatedAt":  "2025-09-13T14:24:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7E2olx",
                                           "createdAt":  "2025-09-17T11:59:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiyT2g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maraf",
                                                                               "createdAt":  "2025-09-18T07:34:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I think I have acceptable compromise. \nPoC buried [here](https://github.com/dotnet/runtime/blob/552c512167025c8695acfdb5336d058269c018f5/src/native/libs/System.JavaScript/libSystem.JavaScript.js)\n\n```js\n// example of common infrastructure that lives on global closure of TS codebase\nconst Logger = {\n    info: function (msg) {\n        console.log(msg);\n    },\n    log_warn: function (msg) {\n        console.warn(msg);\n    },\n    error: function (msg) {\n        console.error(msg);\n    }\n};\n\n// another example of common infrastructure that lives on global closure of TS codebase\nconst dotnetInternals = {\n    //.. our internal interfaces\n}\n\n// example of C trimmable utility function\nfunction trimmableBar(bufferPtr, bufferLength) {\n}\n\n// example of C trimmable PInvoke/ICall \nfunction SystemJS_RandomBytes(bufferPtr, bufferLength) {\n    Logger.log_warn(\"demo of using Logger object from function that was moved by emscripten from it\u0027s global closure to Module object closure\");\n    // foo() is not part of emscripten trimming/dependency graph\n    dotnetInternals.foo();\n    // this would be protected by manual `SystemJS_RandomBytes__deps` annotation\n    trimmableBar();\n    return -1;\n}\n\n///////////////////////// above ^^^ was brought into this JS by the TS compiler\n///////////////////////// below vvv is emscripten lib factory\n\nconst commonInfra = {\n    dotnetInternals,\n    Logger,\n    // few other common objects that arrived from dotnet.js and dotnet.runtime.js can be added here\n};\n\nconst trimmableDotnetExports = {\n    SystemJS_RandomBytes,\n    // This needs to be done by hands and \n    \"SystemJS_RandomBytes__deps\": [\"trimmableBar\"],\n    // I don\u0027t believe we would have too many such functions, for sanity reasons\n    trimmableBar,\n};\n\nfunction dotnetLibFactory() {\n    // Symbols that would be protected from emscripten linker\n    const commonInfraTransformed = {};\n    const moduleContextDeps = [];\n    for (const exportName of Reflect.ownKeys(commonInfra)) {\n        if (!Object.prototype.hasOwnProperty.call(commonInfra, exportName)) {\n            continue;\n        }\n        const emName = \"$\" + exportName.toString();\n        commonInfraTransformed[emName] = commonInfra[exportName];\n        moduleContextDeps.push(emName);\n    }\n    const DotnetLib = {\n        $DOTNET: {\n            dotnetLibInitialize: async (dotnetInternals) =\u003e {\n                Object.assign(dotnetInternals, internals);\n            }\n        },\n        \"$DOTNET__postset\": \"DOTNET.dotnetLibInitialize(Module.dotnetInternals)\",\n        \"$DOTNET__deps\": moduleContextDeps,\n        ...commonInfraTransformed,\n        ...trimmableDotnetExports\n    };\n    autoAddDeps(DotnetLib, \"$DOTNET\");\n    addToLibrary(DotnetLib);\n}\ndotnetLibFactory();\n```\n\nFor completeness sake: if we wanted to let emscripten dependency trimmer to fully own our JS:\n- there is [rollup plugin](https://github.com/vtree-rs/rollup-emscripten/tree/master) which probably does the `__deps` annotations.\n- emscripten project should adopt some JS AST parser like babel and stop using `Function.toString()` !\n\nBut I think we don\u0027t want that.\nOur rollup could do better job of minification/name mangling in the separate .js files.\nMoving the boundary of what is in `dotnet.runtime.js` not trimmable vs `dotnet.native.js` trimmable is possible on function by function basis. I don\u0027t believe we would move many such JS functions.\n",
                                           "updatedAt":  "2025-09-17T18:51:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7E3ITi",
                                           "createdAt":  "2025-09-17T12:36:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027size-reduction\u0027: @eerhardt, @SamMonoRT, @marek-safar\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-17T12:36:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7E5pZ8",
                                           "createdAt":  "2025-09-17T15:06:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "I think this is a good compromise.\n\n\u003e I don\u0027t believe we would move many such JS functions.\n\nI agree. In fact I think it would be desirable to also keep the back-channel of the dependencies from this code to the \"runtime API\" minimal. It would work towards goals `1` and `3`.",
                                           "updatedAt":  "2025-09-17T15:06:28Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[browser] reinvent internal JS interfaces between modules",
        "labels":  [
                       "arch-wasm",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "size-reduction",
                       "os-browser"
                   ]
    }
]
