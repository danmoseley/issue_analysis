[
    {
        "url":  "https://github.com/dotnet/runtime/issues/4107",
        "createdAt":  "2015-04-04T22:54:13Z",
        "number":  4107,
        "author":  "reduz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBntD0g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "patricksuo",
                                            "createdAt":  "2017-03-06T02:07:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Nerus87",
                                            "createdAt":  "2017-05-14T22:25:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "horeaper",
                                            "createdAt":  "2017-06-21T11:55:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hotchkj",
                                            "createdAt":  "2017-09-01T08:47:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "guitarrapc",
                                            "createdAt":  "2017-11-05T15:33:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tani",
                                            "createdAt":  "2018-03-09T04:22:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matiasinsaurralde",
                                            "createdAt":  "2018-05-24T12:28:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SupinePandora43",
                                            "createdAt":  "2021-04-19T15:42:34Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2022-03-04T11:58:22Z",
        "body":  "Would it be possible to document how C++ interop happens? From embedding into a C++ Application, to calling to C++ from .net, and calling .net functions from C++. I\u0027m not finding any docs on how to do this.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOCSX_GA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg5ODMyNDc5",
                                           "createdAt":  "2015-04-05T19:08:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MattWhilden",
                                           "body":  "I noticed that @jakesays and @pdelvo had some reasonable suggestion in the gitter chat just after you posted this issue. Did you take a look?\n\nAs noted, calling C++ from C# is super easy via DllImport and hosting CoreCLR uses the sameish APIs as hosting big CLR.. examples are under src\\coreclr\\hosts.\n",
                                           "updatedAt":  "2015-04-05T19:08:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkwMjYxMTE5",
                                           "createdAt":  "2015-04-06T22:12:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "OtherCrashOverride",
                                           "body":  "Calling into C from C# is easy with DllImport.  Calling into C++, however, is nontrivial.  The two main obstacles are 1)Name mangling differs across compilers and 2) VTable may differ across compilers.\n\nThere is a tool to assist with doing it: https://github.com/mono/CppSharp\n",
                                           "updatedAt":  "2015-04-06T22:12:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkwMjYyMjgy",
                                           "createdAt":  "2015-04-06T22:17:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "reduz",
                                           "body":  "can I just pass a pointer to a function manually? I\u0027m not interested in C#\nloading C or C++ code but the opposite, and not interested into C# reading\nC++ symbols. Is there API for this?\n\nOn Mon, Apr 6, 2015 at 7:12 PM, OtherCrashOverride \u003cnotifications@github.com\n\n\u003e wrote:\n\u003e \n\u003e Calling into C from C# is easy with DllImport. Calling into C++, however,\n\u003e is nontrivial. The two main obstacles are 1)Name mangling differs across\n\u003e compilers and 2) VTable may differ across compilers.\n\u003e \n\u003e There is a tool to assist with doing it: https://github.com/mono/CppSharp\n\u003e \n\u003e —\n\u003e Reply to this email directly or view it on GitHub\n\u003e https://github.com/dotnet/coreclr/issues/641#issuecomment-90261119.\n",
                                           "updatedAt":  "2015-04-06T22:17:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkwMjYyNTE4",
                                           "createdAt":  "2015-04-06T22:19:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "reduz",
                                           "body":  "To clarify, I just need a single binary, no DLLs, and no C# entry point,\nbut C++ calling random C# functions.\n\nOn Mon, Apr 6, 2015 at 7:16 PM, Juan Linietsky reduzio@gmail.com wrote:\n\n\u003e can I just pass a pointer to a function manually? I\u0027m not interested in C#\n\u003e loading C or C++ code but the opposite, and not interested into C# reading\n\u003e C++ symbols. Is there API for this?\n\u003e \n\u003e On Mon, Apr 6, 2015 at 7:12 PM, OtherCrashOverride \u003c\n\u003e notifications@github.com\u003e wrote:\n\u003e \n\u003e \u003e Calling into C from C# is easy with DllImport. Calling into C++, however,\n\u003e \u003e is nontrivial. The two main obstacles are 1)Name mangling differs across\n\u003e \u003e compilers and 2) VTable may differ across compilers.\n\u003e \u003e \n\u003e \u003e There is a tool to assist with doing it: https://github.com/mono/CppSharp\n\u003e \u003e \n\u003e \u003e —\n\u003e \u003e Reply to this email directly or view it on GitHub\n\u003e \u003e https://github.com/dotnet/coreclr/issues/641#issuecomment-90261119.\n",
                                           "updatedAt":  "2015-04-06T22:19:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkxMTAzMTQ5",
                                           "createdAt":  "2015-04-09T03:09:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MattWhilden",
                                           "body":  "Hey @reduz. How\u0027d it go?\n\nIt seems like coreclr should have support for all the features you need. Perhaps you\u0027re better served getting help via stackoverflow or from some folks in the gitter channel?\n",
                                           "updatedAt":  "2015-04-09T03:09:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkxMTA0MTk4",
                                           "createdAt":  "2015-04-09T03:15:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "reduz",
                                           "body":  "haven\u0027t really found much on stackoverflow or gitter.. I\u0027m interested in\nusing C# as an extension language for a C++ game engine, in this case C++\ndoes the heavy load and calls a few C# functions. I\u0027m not interested in a\nC# entry point andI can\u0027t use DllImport.\n\nI am unable to find any information on how to do this. I don\u0027t mind doing\nlow level coding or writing VM code myself.  I just can\u0027t find any\ninformation, neither here or on Microsoft\u0027s site.\n\nOn Thu, Apr 9, 2015 at 12:10 AM, Matthew Whilden notifications@github.com\nwrote:\n\n\u003e Hey @reduz https://github.com/reduz. How\u0027d it go?\n\u003e \n\u003e It seems like coreclr should have support for all the features you need.\n\u003e Perhaps you\u0027re better served getting help via stackoverflow or from some\n\u003e folks in the gitter channel?\n\u003e \n\u003e —\n\u003e Reply to this email directly or view it on GitHub\n\u003e https://github.com/dotnet/coreclr/issues/641#issuecomment-91103149.\n",
                                           "updatedAt":  "2015-04-09T03:15:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkxMTA0NTI3",
                                           "createdAt":  "2015-04-09T03:19:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "reduz",
                                           "body":  "Doesn\u0027t Microsoft have some sort of internal documentation for the VM,\nbytecode or this kind of interoperability? Is it possible to open it too?\n\nOn Thu, Apr 9, 2015 at 12:15 AM, Juan Linietsky reduzio@gmail.com wrote:\n\n\u003e haven\u0027t really found much on stackoverflow or gitter.. I\u0027m interested in\n\u003e using C# as an extension language for a C++ game engine, in this case C++\n\u003e does the heavy load and calls a few C# functions. I\u0027m not interested in a\n\u003e C# entry point andI can\u0027t use DllImport.\n\u003e \n\u003e I am unable to find any information on how to do this. I don\u0027t mind doing\n\u003e low level coding or writing VM code myself.  I just can\u0027t find any\n\u003e information, neither here or on Microsoft\u0027s site.\n\u003e \n\u003e On Thu, Apr 9, 2015 at 12:10 AM, Matthew Whilden \u003cnotifications@github.com\n\u003e \n\u003e \u003e wrote:\n\u003e \u003e \n\u003e \u003e Hey @reduz https://github.com/reduz. How\u0027d it go?\n\u003e \u003e \n\u003e \u003e It seems like coreclr should have support for all the features you need.\n\u003e \u003e Perhaps you\u0027re better served getting help via stackoverflow or from some\n\u003e \u003e folks in the gitter channel?\n\u003e \u003e \n\u003e \u003e —\n\u003e \u003e Reply to this email directly or view it on GitHub\n\u003e \u003e https://github.com/dotnet/coreclr/issues/641#issuecomment-91103149.\n",
                                           "updatedAt":  "2015-04-09T03:19:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkxMTA5MjMz",
                                           "createdAt":  "2015-04-09T03:55:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "I\u0027m not an interop expert, but you can convert between function pointers and delegates using:\nMarshal.GetDelegateForFunctionPointer()\nMarshal.GetFunctionPointerForDelegate()\nhttps://github.com/dotnet/coreclr/blob/cbf46fb0b6a0b209ed1caf4a680910b383e68cba/src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n\nYou would still need an initial mechanism to invoke the first C# function, presumably using the hosting API if you don\u0027t want a C# entry point.\n",
                                           "updatedAt":  "2015-04-09T03:55:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkxMTI2MzY2",
                                           "createdAt":  "2015-04-09T06:25:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakesays-old",
                                           "body":  "If you study [coreconsole.cpp](https://github.com/dotnet/coreclr/blob/master/src/coreclr/hosts/coreconsole/coreconsole.cpp) you\u0027ll see exactly how to load the clr and then execute managed code. \n\nAlso see [this article](http://www.fancy-development.net/hosting-net-core-clr-in-your-own-process)\nAnd [this project](https://github.com/fancyDevelopment/Fancy.CoreClrHost)\n",
                                           "updatedAt":  "2015-04-09T06:25:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkxNjc5ODAw",
                                           "createdAt":  "2015-04-10T20:39:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "reduz",
                                           "body":  "thanks for the answers, will give it a try soon to see if/how it works\n\nOn Thu, Apr 9, 2015 at 3:26 AM, Jake Helfert notifications@github.com\nwrote:\n\n\u003e If you study coreconsole.cpp\n\u003e https://github.com/dotnet/coreclr/blob/master/src/coreclr/hosts/coreconsole/coreconsole.cpp\n\u003e you\u0027ll see exactly how to load the clr and then execute managed code.\n\u003e \n\u003e Also see this article\n\u003e http://www.fancy-development.net/hosting-net-core-clr-in-your-own-process\n\u003e And this project https://github.com/fancyDevelopment/Fancy.CoreClrHost\n\u003e \n\u003e —\n\u003e Reply to this email directly or view it on GitHub\n\u003e https://github.com/dotnet/coreclr/issues/641#issuecomment-91126366.\n",
                                           "updatedAt":  "2015-04-10T20:39:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDk2MTgxNzMw",
                                           "createdAt":  "2015-04-25T11:44:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "@jakesays code you have posted make use of \"windows.h\". Do you know any sources that **works** on Linux and OS X?\n",
                                           "updatedAt":  "2015-04-25T11:44:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDk2MjIyMDIw",
                                           "createdAt":  "2015-04-25T15:25:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "@Marqin try [unixcorerun](https://github.com/dotnet/coreclr/blob/82413deb0c7055da784c934101a2e1eed3bfb8ca/src/coreclr/hosts/unixcorerun/corerun.cpp).\n",
                                           "updatedAt":  "2015-04-25T15:25:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDk2MjUxMDMw",
                                           "createdAt":  "2015-04-25T18:09:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "@akoeplinger I tried, but it only can run whole assembly. I just want to call few selected C# functions.\n",
                                           "updatedAt":  "2015-04-25T18:09:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDk2MjU4NDQ0",
                                           "createdAt":  "2015-04-25T18:38:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "@Marqin I meant you should take that file as an example of how to load the CLR. You need to adapt it to your own needs ;)\n",
                                           "updatedAt":  "2015-04-25T18:38:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDk2Mjc5Njgz",
                                           "createdAt":  "2015-04-25T21:23:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@Marqin take a look at src\\dlls\\mscoree\\unixinterface.cpp how the ExecuteAssembly is implemented. At line 207, you can see that we create a delegate to a function to execute and then call it. You can do the same for the functions you want to call.\nTo use it in your C++ game engine, somewhere in your engine initialization, you will need to do all the steps that we do in the ExecuteAssembly upto the point where the delegate is created.\nThen in your engine shutdown, you\u0027ll need to do the rest of the stuff that we do in the ExecuteAssembly, that means unloading the app domain and stopping the host.\n",
                                           "updatedAt":  "2015-04-25T21:23:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNDk0NjIzMA==",
                                           "createdAt":  "2015-06-24T17:20:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "@janvorli I was trying to try that, but I\u0027m getting \"ExecuteAssembly failed - status: 0x80131040\" for every dll/method I try to envoke when using that custom entrypoint.\n",
                                           "updatedAt":  "2015-06-24T17:21:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNDk3NDQ1NA==",
                                           "createdAt":  "2015-06-24T18:33:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "The symbolic name of that error code is FUSION_E_REF_DEF_MISMATCH. It can stem from the case when you reference an assembly during the managed code compilation, but the assembly that you provide at runtime doesn\u0027t match (has different strong name, version, ...).\n",
                                           "updatedAt":  "2015-06-24T18:33:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNDk4Mzg1Mg==",
                                           "createdAt":  "2015-06-24T19:11:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "@janvorli but, when I just pass managedAssemblyAbsolutePath it loads fine from Main entry point. Problem is when I specify my own entry point - I don\u0027t get how that\u0027s connected to assembly not matching. Also, is there any way to check which part of Assembly is not matching?\n",
                                           "updatedAt":  "2015-06-24T19:11:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNDk4NTE2Mw==",
                                           "createdAt":  "2015-06-24T19:18:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Are you trying to use the code path in the unixinterface.cpp that creates the delegate (by passing in non-NULL entryPointAssemblyName, entryPointTypeName and entryPointMethodName) or do you use your own code? If it is the latter, can you share that piece of code with me so that I can take a look?\n",
                                           "updatedAt":  "2015-06-24T19:18:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNDk4ODgxOQ==",
                                           "createdAt":  "2015-06-24T19:35:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "@janvorli \nhttp://pastebin.com/HBbYKnT1 this is my code, that is just modified **./src/coreclr/hosts/unixcoreruncommon/coreruncommon.cpp** from official repo. And then I have there\n\n```\nmanagedAssemblyAbsolutePath, NULL,  NULL, NULL\n```\n\nit\u0027s running Main() from Square.dll and it\u0027s **OK**. But when I change it to\n\n```\nNULL,  \"Square\", \"Square\", \"SquareFour\"\n```\n\nI\u0027m getting **0x80131040**. From what I see it uses function from unixinterface to create that delegate. I also tried recreating unixinterface.cpp but that put me into some include dependecy hell from whole coreCLR, so I\u0027m currently trying to do it this way.\n",
                                           "updatedAt":  "2015-06-24T19:36:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNTAwMTIyMA==",
                                           "createdAt":  "2015-06-24T20:28:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Can you try to run it under debugger, set a breakpoint at AssemblySpec::LoadDomainAssemblystep and when it is hit, step through the code and see where the error comes from? You can also set a breakpoint to all places in the coreclr source where you can see \n`hr = FUSION_E_REF_DEF_MISMATCH;`,\n`IF_FAIL_GO(FUSION_E_REF_DEF_MISMATCH);`,\n`IfFailGo(FUSION_E_REF_DEF_MISMATCH);` and\n`ThrowHR(FUSION_E_REF_DEF_MISMATCH);`\nI can see 8 such places. Then you should hit the breakpoint at the place the error stems from.\n",
                                           "updatedAt":  "2015-06-24T20:28:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNTAxNTI4Mg==",
                                           "createdAt":  "2015-06-24T21:17:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "@janvorli I\u0027m currently using coreCLR downloaded from \"DNX SDK\" from Readme and debbuger cannot find those. There is libcorecrl.so with debbuging symbols on coreCLR CI to download, but I cannot find there mscorlib.dll that would be compatible with -debug libcorecrl.so, and I **do not** have Windows to create my own mscorlib.dll :-1:\nIs there any publicly available mscorlib.dll for x64 bit Linux or OS X, that is compatible with newest libcorecrl.so from Your CI system?\n",
                                           "updatedAt":  "2015-06-24T21:27:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNTE3OTM2Ng==",
                                           "createdAt":  "2015-06-25T09:15:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shahid-pk",
                                           "body":  "@Marqin you can get mscorlib.dll for linux from the ci build artifacts here http://dotnet-ci.cloudapp.net/job/dotnet_coreclr_windows_debug/ \n",
                                           "updatedAt":  "2015-06-25T09:17:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNTE4NTYyNg==",
                                           "createdAt":  "2015-06-25T09:34:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@Marqin You can always get the latest debug version of the mscorlib.dll here:\nhttp://dotnet-ci.cloudapp.net/job/dotnet_coreclr_windows_debug \nGet the bin/Product/Linux.x64.Debug/mscorlib.dll one.\n",
                                           "updatedAt":  "2015-06-25T09:34:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNTIwMTEwNg==",
                                           "createdAt":  "2015-06-25T10:20:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "@janvorli @shahid-pk  **Thanks!**\nSo I\u0027ve debugged and it breaks on assemblybinder.cpp:158, which is caused, because of line assemblybinder.cpp:150 ( also breakpointed that one ), which is caused because of true:\n\n```\nelse if (pRequestedVersion-\u003eIsLargerFeatureVersion(pFoundVersion))\n```\n\nAnd IsLargerFeatureVersion that is used is defined in assemblyversion.inl:79, then I\u0027ve printed:\n\n```\n(lldb) p GetMajor()\n(DWORD) $0 = 4294967295\n(lldb) p pAssemblyVersion-\u003eGetMajor()\n(DWORD) $1 = 0\n(lldb) p GetMinor()\n(DWORD) $2 = 4294967295\n(lldb) p pAssemblyVersion-\u003eGetMinor()\n(DWORD) $3 = 0\n```\n\nAnd btw. 4294967295 == 0 - 1 in terms of unsigned int.\n",
                                           "updatedAt":  "2015-06-25T10:24:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNTIyMDc5NQ==",
                                           "createdAt":  "2015-06-25T11:52:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAMwb5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cleak",
                                                                               "createdAt":  "2017-08-30T04:36:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Interesting. Since the pRequestedVersion is major=(DWORD)-1, minor=(DWORD)-1, that means no explicit version was requested:\n\n``` c++\nBOOL AssemblyName::HaveAssemblyVersion()\n{\n    return (m_version.GetMajor() != static_cast\u003cDWORD\u003e(-1));\n}\n```\n\nCan you please print the fBeingBoundToPlatformAssembly and fWindowsPhone7 at the breakpoint?\nAnyways, it looks like the condition below doesn\u0027t allow requesting assembly without specifying its version. I don\u0027t know this code, but it looks like a bug to me:\n\n``` c++\n                if (!fBeingBoundToPlatformAssembly\n                    \u0026\u0026 pRequestedName-\u003eHaveAssemblyVersion()\n                    \u0026\u0026 !pFoundName-\u003eHaveAssemblyVersion())\n                {\n                    hr = FUSION_E_APP_DOMAIN_LOCKED;\n                }\n                else if (pRequestedVersion-\u003eIsEqualFeatureVersion(pFoundVersion))\n                {\n                    // Now service version matters\n                    if (pRequestedVersion-\u003eIsLargerServiceVersion(pFoundVersion))\n                    {\n                        hr = FUSION_E_APP_DOMAIN_LOCKED;\n                    }\n                }\n                else if (pRequestedVersion-\u003eIsLargerFeatureVersion(pFoundVersion))\n                {\n                    hr = FUSION_E_APP_DOMAIN_LOCKED;\n                }\n```\n\nCould you please try to use full assembly name with version which would be \"Square, Version=0.0.0.0\". Maybe that would make it work.\n",
                                           "updatedAt":  "2015-06-25T11:52:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNTIzMjE3MA==",
                                           "createdAt":  "2015-06-25T12:22:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAMwb5w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cleak",
                                                                               "createdAt":  "2017-08-30T04:36:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Marqin",
                                           "body":  "\u003e Could you please try to use full assembly name with version which would be \"Square, Version=0.0.0.0\". Maybe that would make it work.\n\n**Yes!** It worked that way. And about those two variables, you asked:\n\n```\n(lldb) p fWindowsPhone7\n(bool) $0 = false\n(lldb) p fBeingBoundToPlatformAssembly\n(BOOL) $1 = YES\n```\n",
                                           "updatedAt":  "2015-06-25T12:25:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNTIzOTc5Mg==",
                                           "createdAt":  "2015-06-25T12:46:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Great! So you have a workaround for now. It is strange that the fBeingBoundToPlatformAssembly is TRUE, that seems actually to be the real cause of the issue. The TRUE here means that the assembly is considered to be a platform assembly, which is not the case of your assembly. \nI wonder, do you have your assembly placed in the same folder as the platform assemblies? If that\u0027s the case, that could be the culprit. Then your assembly would be enumerated in the TPA (trusted platform assemblies) list and we would considered it being platform assembly, which requires binding by version.\nIf that\u0027s the case, it would be interesting to try to move your assembly to a different folder, remove the version from the assembly name and try if that works too.\n",
                                           "updatedAt":  "2015-06-25T12:46:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNTI0MzUyNg==",
                                           "createdAt":  "2015-06-25T12:55:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "Yes, it was listed in TPA list, and when moved to another folder it\u0027s working without adding version string!\n\nSo that seem to work. Now, I  wanted to try using directly creating Delegate in my code, not just using ExecuteAssembly, so I tried to compile unixinterface.cpp and I\u0027m getting those compiler errors:\nhttp://pastebin.com/mfV43Ln3\nI wonder if it\u0027s possible to do that without including all those windows headers.\n",
                                           "updatedAt":  "2015-06-25T12:55:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNTI1NTQ1Mg==",
                                           "createdAt":  "2015-06-25T13:20:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Unfortunately it is not reasonably doable. Using the COM interfaces pulls in a lot of windows headers and windows specific types. That\u0027s why I have created the simplified ExecuteAssembly that wraps all the stuff and exposes an interface that can be easily consumed without the windows headers usage.\nI believe that what you need is something we want to support in the CoreCLR as well, so I think we should modify the existing interface and split it into three parts. One would be the initialization, including the host and appdomain creation, the second would be the delegate creation (that could be performed multiple times in case you need to be able to call multiple functions) and the last would be the appdomain unloading and host stopping.\nUnfortunatelly I am on vacation starting tomorrow and ending on 7/6, so I won\u0027t be able to make such a change before getting back. But feel free to add this to the unixinterface.cpp yourself if you want. I would keep the ExecuteAssembly API, but internally let it use the same code for initialization and shutdown that you would expose as the new APIs.\nI just hope that the current way of creating the delegate would work for multiple delegates. I think that there is a problem trying to use the CorHost::ExecuteAssembly multiple times, but maybe it is a different issue and maybe I am just mistaken.\n",
                                           "updatedAt":  "2015-06-25T13:20:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNTI1ODM1NA==",
                                           "createdAt":  "2015-06-25T13:28:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "saper",
                                           "body":  "PAL tries to redefine lots of standard interfaces to align the platforms. I\u0027ve run into this in this pretty simple bug https://github.com/dotnet/coreclr/issues/1091 but I think there is a deeper problem in how PAL exposes things.\n\nThis is all documented here\n\nhttps://github.com/dotnet/coreclr/blob/master/src/pal/src/include/pal/palinternal.h#L14-L136\n",
                                           "updatedAt":  "2015-06-25T13:28:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNjAzNDYxMg==",
                                           "createdAt":  "2015-06-27T12:30:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "@janvorli So have a nice vacation! And we would really appreciate if you could someday divide that API this way you described :)\n\nI\u0027ve thanked you in my PoC README and also added there explanation why 0x80131040 occurs - maybe it will help someone with the same problem, who cannot find it in documentation:\nhttps://github.com/Marqin/simpleCoreCLRHost#why-we-will-get-0x80131040-error-whats-the-solution-if-i-must-have-them-in-the-same-dir\n",
                                           "updatedAt":  "2015-06-27T12:30:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDExNzA2NDE3NA==",
                                           "createdAt":  "2015-06-30T09:04:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bjorkstromm",
                                           "body":  "The other day I was playing with the idea to create a header-file (e.g. coreclr.h) which could contain symbols exported by _libcoreclr_. This header could be used if developer wan\u0027t to dynamically link CoreCLR.\n\nQuickly testing I got **PAL_InitializeCoreCLR** working and when moving to next function used in _unixinterface.cpp_. Got stuck on **CorHost2::CreateObject**, but then I noticed that the _libcoreclr_ exports a nice wrapper for this, i.e. **GetCLRRuntimeHost**. Haven\u0027t yet have time to test that, but should be fairly straightforward since the **ICLRRuntimeHost2** struct is defined in _mscoree.h_.\n\nSo to the question/comment:\nIn addition of creating/modifying these wrapper functions (e.g. ExecuteAssembly), wouldn\u0027t it be nice to also have a header-file that could be included also under Linux/unix-systems as _mscoree.h_ could most likely not be used. This header-file could then be used for dynamic linking of _libcoreclr_. In a _perfect_ world, this header-file could be auto-generated during build.\n",
                                           "updatedAt":  "2015-06-30T09:04:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDEyMTA5MTI1Mg==",
                                           "createdAt":  "2015-07-13T23:34:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@Marqin I have created a github issue dotnet/coreclr#1234 to track work on the hosting API refactoring. I will just wait a bit to see if there is any feedback on the proposed API refactoring and then implement it.\n",
                                           "updatedAt":  "2015-07-13T23:34:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzM5NTc2Mw==",
                                           "createdAt":  "2015-11-03T15:52:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "@janvorli , `coreclr_initialize` stopped working on Linux ( on OS X it\u0027s ok ) in last months builds. Does anything changed? Here\u0027s stack trace from Linux:\nhttp://pastebin.com/raw.php?i=AyigRNXC\nThe same code works OK on OS X.\nBoth tried with coreclr 1.0.0-rc1-16048.\n",
                                           "updatedAt":  "2015-11-03T15:53:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzQ0ODExOA==",
                                           "createdAt":  "2015-11-03T18:36:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@Marqin The coreclr_initialize is used in the corerun / coreconsole and so it is executed in all of our tests and any time we launch anything managed on Linux. There was no change in this function as far as I know, so I wonder what is causing the problem for you.\nFrom your stack, it is hard to guess what was going on. It looks like an unhandled exception happened somewhere in managed code down the call chain from the coreclr_initialize. \n\nThe stack dump also shows there is a missing trap for unhandled exceptions on this code path, so I need to fix that. But that\u0027s kind of unrelated to your issue. Even when I fix that, your app would abort.\nBut you would at least see the managed exception logged to console after the fix.\n",
                                           "updatedAt":  "2015-11-03T18:36:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzQ2MzU0Nw==",
                                           "createdAt":  "2015-11-03T19:33:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@Marqin Now looking at the code, I believe no exceptions should go unhandled down the CorHost2::_CreateAppDomain callchain. But there was a bug related to that that I\u0027ve fixed last week, so I wonder if it is possible that you have a version of coreclr before that fix. \nThe fix was merged in as commit 7a08037ba5c7d5858485985dcb1d4750c77d31a0.\nCould you please check if the latest CoreCLR fixes the issue for you?\n",
                                           "updatedAt":  "2015-11-03T19:33:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzQ2NTc0Mw==",
                                           "createdAt":  "2015-11-03T19:41:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "Ok, now, with the latest CI build there\u0027s no exception on Linux,`coreclr_initialize` just returns `0x80131500` error code( but why? ). On OS X it\u0027s all ok.\n",
                                           "updatedAt":  "2015-11-03T19:42:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzQ2ODMwMg==",
                                           "createdAt":  "2015-11-03T19:50:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "Ok, I run it with **debug** wersion of libcoreclr.so and that\u0027s the full error that I get: http://pastebin.com/raw.php?i=USsnUBRe\n",
                                           "updatedAt":  "2015-11-03T19:50:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzQ2ODcxMg==",
                                           "createdAt":  "2015-11-03T19:52:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Ok, that mostl likely means a mismatch betweem libcoreclr.so and mscorlib.dll. Either they are one release and the other debug or they are not from the same build.\n",
                                           "updatedAt":  "2015-11-03T19:52:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzQ2OTc3NQ==",
                                           "createdAt":  "2015-11-03T19:56:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "Ah, thanks. Now in error message I see again that CLRException::GetThrowable that was in stack strace: http://pastebin.com/raw.php?i=crMpXz1v\n",
                                           "updatedAt":  "2015-11-03T19:56:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzQ3MTE2MA==",
                                           "createdAt":  "2015-11-03T20:02:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Ok, so you are missing the System.Globalization.Native.so. It is built as part of the coreclr build.\n",
                                           "updatedAt":  "2015-11-03T20:02:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzQ3MzMxNw==",
                                           "createdAt":  "2015-11-03T20:11:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "I have `System.Globalization.Native.so`. Tested with both release and debug version of it, and still geting this error. Here is full stack trace from lldb: http://pastebin.com/raw.php?i=QG0hQqcD\nAlso, as I mentioned, there is no problem on OS X.\n",
                                           "updatedAt":  "2015-11-03T20:19:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzQ3ODU0MQ==",
                                           "createdAt":  "2015-11-03T20:33:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Interesting. So far the missing System.Globalization.Native.so was the only case where I\u0027ve seen this assert. Can you please select the frame 4 and print the pException object (using p *pException)?\n",
                                           "updatedAt":  "2015-11-03T20:33:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzQ3OTAxNA==",
                                           "createdAt":  "2015-11-03T20:35:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "```\n(lldb) f 4\nframe dotnet/coreclr#4: 0x00007ffff5fbc9e8 libcoreclr.so`CLRException::GetThrowableFromException(pException=0x00000000006bdfb0) + 248 at clrex.cpp:728\n(lldb) p *pException\n(Exception) $0 = {\n  m_innerException = 0x0000000000000000\n}\n```\n",
                                           "updatedAt":  "2015-11-03T20:35:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzQ4MTkzNQ==",
                                           "createdAt":  "2015-11-03T20:42:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Hmm, GDB shows the actual exception type when I print it like this. LLDB obviously doesn\u0027t. My guess is that the actual type of the pException is EEMessageException. Could you please also try this?:\np _(EEMessageException_)pException\n",
                                           "updatedAt":  "2015-11-03T20:42:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzQ4MjE5Mw==",
                                           "createdAt":  "2015-11-03T20:43:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Sorry, the markdown has screwed it, I meant:\n`p *(EEMessageException*)pException`\n",
                                           "updatedAt":  "2015-11-03T20:43:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzQ4MzgxMw==",
                                           "createdAt":  "2015-11-03T20:48:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "Hmm, is says that it cannot find \"System.Globalization.Native\". But I have in the same folder as libcoreclr.so and all .dlls. And I also copied it inside dir with my executable, and in dir with my managed code. And it didn\u0027t helped.\n\nhttp://pastebin.com/raw.php?i=znJkE1Qb\n",
                                           "updatedAt":  "2015-11-03T20:49:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzQ4NDc3Mw==",
                                           "createdAt":  "2015-11-03T20:52:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "Hmm, I wonder what could be preventing the linker from seeing it. \n@adityamandaleeka do you have any idea why the DllImport would not see the System.Globalization.Native.so?\n",
                                           "updatedAt":  "2015-11-03T20:52:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzQ4NTA4MA==",
                                           "createdAt":  "2015-11-03T20:53:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "I have it in libcoreclr and my binary dirs:\n\n```\nmarqin@nibbler [09:52:30] [~/csharp/simpleCoreCLRHost] [master *]\n-\u003e % ls $SCCH_COREPATH | egrep \"(mscorlib|libcoreclr\\.so|Globalization\\.Native)\"\nlibcoreclr.so\nmscorlib.dll\nSystem.Globalization.Native.so\nmarqin@nibbler [09:52:34] [~/csharp/simpleCoreCLRHost] [master *]\n-\u003e % ls . | grep Native\nSystem.Globalization.Native.so\n```\n\nThis $SSCH_COREPATH dir is also in $PATH, as set by dnvm.\n\nSo it prevents on Linux, and on OS X works. But why.\n",
                                           "updatedAt":  "2015-11-03T20:56:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzQ4OTI0Nw==",
                                           "createdAt":  "2015-11-03T21:07:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "@janvorli, @adityamandaleeka, I found something regarding System.Globalization.Native.so/System.Globalization.Native.dylib.\nWhen I try to link it to some code in OS X, it just passes.\nOn Linux I get [long list of undefined references](http://pastebin.com/raw.php?i=ZB1C5Ukz).\n\nIs it because I have libicuuc.so.55 and not libicuuc.so.52?\n",
                                           "updatedAt":  "2015-11-03T21:07:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzQ5MDIwMg==",
                                           "createdAt":  "2015-11-03T21:11:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "saper",
                                           "body":  "\u003e @janvorli, @adityamandaleeka, I found something regarding System.Globalization.Native.so/System.Globalization.Native.dylib.\n\u003e When I try to link it to some code in OS X, it just passes.\n\u003e On Linux I get [long list of undefined references](http://pastebin.com/raw.php?i=ZB1C5Ukz).\n\nYou can check what is needed with `ldd name-of.so` . You should have\na matching version of the ICU for things to work, yes.\n",
                                           "updatedAt":  "2015-11-03T21:11:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzQ5NjU4OA==",
                                           "createdAt":  "2015-11-03T21:34:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "Ehh, and ICU download page is giving me 500 error.\nSo I rebuild by myself `System.Globalization.Native.so` to use ICU 55 and now I\u0027m getting `0x80070057` from `coreclr_initialize`.\n\n---\n\nAlso, cmake didn\u0027t set `-std=c++11` flag, which caused build to fail, until I modified Makefile by hand, should I report is as bug, right?\n",
                                           "updatedAt":  "2015-11-03T21:36:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzUwMDY1MQ==",
                                           "createdAt":  "2015-11-03T21:51:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "Ok, it was my bug. Now, after building `System.Globalization.Native.so` with ICU 55 support everything works OK :+1: \n\nI\u0027m going to fill bug about that c++11 flag, and that ICU 52 dependency is not documented on DNX page.\n",
                                           "updatedAt":  "2015-11-03T21:51:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzUwNTY0Mw==",
                                           "createdAt":  "2015-11-03T22:12:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "The c++11 flag is actually being set if you use the build.sh or the src/pal/tools/gen-buildsys-clang.sh. Using cmake with no parameters is not a supported scenario.\n",
                                           "updatedAt":  "2015-11-03T22:12:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzUwNjI3Nw==",
                                           "createdAt":  "2015-11-03T22:14:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "The c++11 flag is set using this:\nsrc\\pal\\tools\\clang-compiler-override.txt\nBut there is more than the c++11 flag set there, see the end of the src/pal/tools/gen-buildsys-clang.sh too where the cmake is invoked.\n",
                                           "updatedAt":  "2015-11-03T22:14:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MzUwODUyNA==",
                                           "createdAt":  "2015-11-03T22:24:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "Thanks for clarification. So I just repored that ICU should be documented.\n",
                                           "updatedAt":  "2015-11-03T22:24:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MTg3NDU4Mw==",
                                           "createdAt":  "2016-11-21T08:32:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAPmXpg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "albertino80",
                                                                               "createdAt":  "2017-10-04T21:12:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TheLastRar",
                                                                               "createdAt":  "2017-11-19T19:02:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "zwcloud",
                                           "body":  "Is it in the documentation now? I cannot find it.\r\n\r\nI think the documentation should be something similar to [what mono has provided](http://www.mono-project.com/docs/advanced/embedding/) to host/embed coreclr in C/C++.\r\n\r\n[A related StackOverflow question](http://stackoverflow.com/q/40715691/3427520).",
                                           "updatedAt":  "2016-11-21T16:00:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MTkwODUzMg==",
                                           "createdAt":  "2016-11-21T11:07:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marqin",
                                           "body":  "@zwcloud here\u0027s my example code: https://github.com/Marqin/simpleCoreCLRHost\r\n\r\n(beware, it uses Filesystem TS, for easier finding files to TPA) ",
                                           "updatedAt":  "2016-11-21T11:09:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3MDE1OTM5MQ==",
                                           "createdAt":  "2017-01-03T16:42:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "abergmeier-dsfishlabs",
                                           "body":  "For us to ever consider coreclr, it really needs to provide some way to interact with C++ properly. Similar to something like [pybind11](https://github.com/pybind/pybind11) for Python.\r\nEspecially ownership handling needs to be supported properly (way beyond COM).",
                                           "updatedAt":  "2017-01-03T16:42:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3MDE3Njk4MQ==",
                                           "createdAt":  "2017-01-03T17:52:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "CC: @yizhang82 ",
                                           "updatedAt":  "2017-01-03T17:52:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNDI5MTY1NQ==",
                                           "createdAt":  "2017-10-04T21:15:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "albertino80",
                                           "body":  "As @zwcloud asked, is there some decent documentation?",
                                           "updatedAt":  "2017-10-04T21:15:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjY2MzAwNg==",
                                           "createdAt":  "2018-11-29T00:50:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "Bah!\r\n\r\ncc @jkoritzinsky @jeffschwMSFT ",
                                           "updatedAt":  "2018-11-29T00:50:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_IJTo",
                                           "createdAt":  "2022-03-04T11:58:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCRcDog==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Pycorax",
                                                                               "createdAt":  "2022-03-04T12:00:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "The details of all the issues one can get into are a bit vast on this one. I am working on providing some guidelines that will eventually make it to docs.microsoft.com - see https://github.com/AaronRobinsonMSFT/interop-doc. For now, I\u0027d point to [DNNE](https://github.com/AaronRobinsonMSFT/DNNE) which has an [example on exposing to C++](https://github.com/AaronRobinsonMSFT/DNNE/blob/master/test/ExportingAssembly/InstanceExports.cs), but as mentioned, how this works isn\u0027t much different than regular P/Invokes. The trick is all the corner cases where the C++ ABI isn\u0027t defined and therefore dependent on the C++ compiler being used.\r\n\r\n",
                                           "updatedAt":  "2022-03-04T11:58:22Z"
                                       }
                                   ],
                         "totalCount":  64
                     },
        "title":  "C++ Interop Documentation Request",
        "labels":  [
                       "documentation",
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/11891",
        "createdAt":  "2019-01-25T14:54:52Z",
        "number":  11891,
        "author":  "austvik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOA6HJfw==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "olanat",
                                            "createdAt":  "2019-01-25T14:56:39Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "AaronRobinsonMSFT",
                                            "createdAt":  "2019-01-26T07:34:34Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Thiez",
                                            "createdAt":  "2019-09-11T12:26:54Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "joergrosenkranz",
                                            "createdAt":  "2020-01-28T15:24:01Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2021-05-11T19:20:07Z",
        "body":  "Assembly loading problems are frustrating to debug, especially in some cloud world where you don\u0027t necessarily have control over regestry settings or env variables in the running environment.\r\n\r\nAny error message containing \"or\" should be banned, but lets start with this one.\r\n\r\nThe expected error message should be \"Failed to load DLL %1, couldn\u0027t find it. Searched for it in the following locations: %2\" or \"Failed to load DLL %1. Couldn\u0027t find its dependency %2 which comes from %3 dependency chain. Searched for %2 in the following locations: %4\"\r\n\r\nI understand that assembly loading needs to be fast, but this extra \"give the user some information that can be used\" doesn\u0027t have to kick into action before after the assembly have failed to load. And by that time I guess most programs doesn\u0027t have much meaningfull activity to spend their CPU on anyway.\r\n\r\n\r\nBonus: See how the Win version is much doesn\u0027t tell you how to get diagnostics (fusion logs should probably be recommended?)\r\n\r\n    IDS_EE_NDIRECT_LOADLIB_WIN              \"Unable to load DLL \u0027%1\u0027 or one of its dependencies: %2\"\r\n    IDS_EE_NDIRECT_LOADLIB_LINUX            \"Unable to load shared library \u0027%1\u0027 or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: %2\"\r\n    IDS_EE_NDIRECT_LOADLIB_MAC              \"Unable to load shared library \u0027%1\u0027 or one of its dependencies. In order to help diagnose loading problems, consider setting the DYLD_PRINT_LIBRARIES environment variable: %2\"\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOG0zckA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NzYxNDU5Nw==",
                                           "createdAt":  "2019-01-25T15:42:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAiO5QA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2019-01-26T07:33:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@austvik The error messages given above didn\u0027t originally have the \"or one of its dependencies\" in it. I have added that one to make it actually clearer that the shared library actually may have been there, but its dependencies or dependencies of their dependencies were missing. People were complaining - how come the message tells us that the file is missing when we can see it being there? \r\nBtw, these messages are not related to assemblies, but to native dlls / shared libraries.\r\n\r\nThe problem is that the .NET runtime doesn\u0027t know which dependencies were missing. Basically, we ask the OS to load a shared library and when it fails to do so because a secondary or lower level dependencies are missing, it just returns a failure exit code. The OS loader is responsible for finding what are the dependency libraries and where they are located based on platform specific algorithms and system wide settings. So we really don\u0027t know where the OS loader was looking. That\u0027s why there is the suggestion to use `LD_DEBUG` env var. That instructs the OS loader to log all the locations it used to look for all libraries and their dependencies and also what symbols it was looking for. \r\n",
                                           "updatedAt":  "2019-01-25T15:42:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1NzY1MTcyNA==",
                                           "createdAt":  "2019-01-25T17:33:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAiO5RA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2019-01-26T07:33:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Win version is much doesn\u0027t tell you how to get diagnostics (fusion logs should probably be recommended?)\r\n\r\nThe Windows equivalent of `LD_DEBUG` / `DYLD_PRINT_LIBRARIES` is [Show loader snaps](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/show-loader-snaps) flag. Perhaps we can update the Windows error message to suggest it.\r\n\r\n",
                                           "updatedAt":  "2019-01-25T17:33:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1ODAyMjAzMg==",
                                           "createdAt":  "2019-01-28T07:21:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "austvik",
                                           "body":  "OK, so those were for native DLLs, and we have the same for managed DLLs:\r\nIDS_EE_FILELOAD_ERROR_GENERIC           \"Could not load file or assembly \u0027%1\u0027. %2\"\r\n\r\nI think the argument holds for both: we could save people lots and lots of hours, sometimes making it possible to figure out what went wrong in locked down envs, by adding the information I outlined above to those messages.\r\n\r\nPeople are able to get the useful information both for managed and native code:\r\nhttps://github.com/isindicic/DependencyWalker.Net\r\n\r\n(And if something that runs on top of the CLR is able, then the CLR should be able as well.)",
                                           "updatedAt":  "2019-01-28T07:21:00Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Better error message when not loading native shared library",
        "labels":  [
                       "help wanted",
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/12258",
        "createdAt":  "2019-03-13T16:28:36Z",
        "number":  12258,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-21T19:17:58Z",
        "body":  "Attempting to call `Marshal.SizeOf` for an enum type currently results in the following:\r\n```csharp\r\nType \u0027*\u0027 cannot be marshaled as an unmanaged structure; no meaningful size or offset can be computed.\r\n  + System.Runtime.InteropServices.Marshal.SizeOfHelper(System.Type, bool)\r\n```\r\n\r\nAs far as I am aware, enums are considered to be blittable as they are internally just a value type that contains a single field of a blittable type (generally this is `int32`). However, there isn\u0027t anything explicit about enum marshalling in https://docs.microsoft.com/en-us/dotnet/framework/interop/blittable-and-non-blittable-types.\r\n\r\nI would expect the above call to succeed and for there to be documentation on the blittability of enum types.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfo7Hnw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MjUwMDQzMQ==",
                                           "createdAt":  "2019-03-13T16:30:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "CC. @jkoritzinsky ",
                                           "updatedAt":  "2019-03-13T16:30:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MjUwMTUyMA==",
                                           "createdAt":  "2019-03-13T16:33:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sylveon",
                                           "body":  "Same happens with delegate types, which are also supposed to be marshallable as function pointers.\r\n\r\n```cs\r\n\u003e delegate void SomeProc();\r\n\u003e System.Runtime.InteropServices.Marshal.SizeOf\u003cSomeProc\u003e()\r\nType \u0027Submission#0+SomeProc\u0027 cannot be marshaled as an unmanaged structure; no meaningful size or offset can be computed.\r\n  + System.Runtime.InteropServices.Marshal.SizeOfHelper(System.Type, bool)\r\n```",
                                           "updatedAt":  "2019-03-13T16:33:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MjUwMTYzMA==",
                                           "createdAt":  "2019-03-13T16:33:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This might be failing because it looks the C# compiler is emitting enums as `auto` layout, rather than `sequential` as it does for other value types.\r\n\r\nCC. @jaredpar ",
                                           "updatedAt":  "2019-03-13T16:33:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MjUzOTYzMA==",
                                           "createdAt":  "2019-03-13T18:03:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODioJvA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2019-03-14T16:53:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-05-21T17:33:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  null,
                                           "body":  "\u003e This might be failing because it looks the C# compiler is emitting enums as auto layout, rather than sequential as it does for other value types.\r\n\r\n\"14.3 Enums [...] they shall have auto field layout (§10.1.2)\"",
                                           "updatedAt":  "2019-03-13T18:03:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3Mjk2MTU0Nw==",
                                           "createdAt":  "2019-03-14T16:55:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@tannergooding Given that ECMA-335 indicates they will be auto, what would you like to see here? Is your base assumption the size should by default be `sizeof(int)`? Basically, what would you intuitively expect the size to be?",
                                           "updatedAt":  "2019-03-14T16:55:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3Mjk3MjMyOQ==",
                                           "createdAt":  "2019-03-14T17:18:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODioJzw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2019-03-14T18:39:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CarolEidt",
                                                                               "createdAt":  "2019-03-14T21:37:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-05-21T17:34:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e what would you intuitively expect the size to be?\r\n\r\nThe size of the underlying type, i.e. the following should hold:\r\n\r\n`sizeof(MyEnum) == Marshal.SizeOf\u003cMyEnum\u003e()`\r\n\r\nIf we do something here, we should make all the Marshal APIs consistent. E.g. `Marshal.PtrToStructure` should handle enums too.",
                                           "updatedAt":  "2019-03-14T17:18:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3Mjk3Mzk1NQ==",
                                           "createdAt":  "2019-03-14T17:21:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e what would you intuitively expect the size to be?\r\n\r\nExactly what @jkotas said.\r\n\r\nEnums are blittable value-types and the only reason they don\u0027t work here is because of a runtime rule that says they should have `auto` layout. They always have a single field of type `Enum.GetUnderlyingType` and so I don\u0027t believe that the `auto` rule actually matters.\r\n\r\nI think they should likely be special-cased here and should be fully supported by the `Marshal` class.",
                                           "updatedAt":  "2019-03-14T17:22:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3Mjk5MTc2MA==",
                                           "createdAt":  "2019-03-14T18:01:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003eI think they should likely be special-cased here and should be fully supported by the Marshal class.\r\n\r\nI am not entirely convinced of this yet. There are cases involving `DISPARAM`s that only support `VT_I4` or `VT_U4` which means they aren\u0027t marshalable in all cases if users change the underlying type.\r\n\r\n\u003eEnums are blittable value-types and the only reason they don\u0027t work here is because of a runtime rule that says they should have auto layout.\r\n\r\nI don\u0027t know why the decision was made, but this isn\u0027t entirely fair because it could have been specifically for the `DISPARAM` scenario. We should see if we can determine the history of that prior to changing this _or_ we need to validate all existing marshaling scenarios with work here.",
                                           "updatedAt":  "2019-03-14T18:01:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3Mjk5MzU4Mg==",
                                           "createdAt":  "2019-03-14T18:06:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Note that the struct-marshaling methods on Marshal are super slow. We do not recommend using them for anything that matters. Fixing this for consistency is ok, but it won\u0027t make these APIs something you actually want to use.",
                                           "updatedAt":  "2021-02-19T00:39:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3Mjk5NDI4OQ==",
                                           "createdAt":  "2019-03-14T18:08:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e `DISPARAM` scenario\r\n\r\nI do not think these APIs have anything to do with DISPARAMs.",
                                           "updatedAt":  "2019-03-14T18:08:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3Mjk5NjA1Mw==",
                                           "createdAt":  "2019-03-14T18:12:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "As @0xd4d noted the c# compiler does this because they spec tells us to. As to why the spec tells us to do this ... I have no idea. Can\u0027t even really think of a good reason. But given we use sequential everywhere else I\u0027m guessing there was a deliberate decision here for `enum`. ",
                                           "updatedAt":  "2019-03-14T18:12:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MzAwMTMwOA==",
                                           "createdAt":  "2019-03-14T18:26:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "After some investigation and conversations offline, we\u0027ve decided to update Marshal.SizeOf to support enums.\r\n\r\nTechnically enum\u0027s aren\u0027t blittable in the `IDispatch` case when they are marshalled to a `VARIANT` in a `DISPPARAMS` structure since they will always be truncated or expanded to a 4-byte width. However, since a conversion to VARIANT isn\u0027t blittable anyway, we feel that it\u0027s fine to consider enums as blittable.\r\n\r\ncc: @AaronRobinsonMSFT @davidwrighton \r\n",
                                           "updatedAt":  "2019-03-14T18:26:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MzAwMTMwOQ==",
                                           "createdAt":  "2019-03-14T18:26:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003eI do not think these APIs have anything to do with DISPARAMs.\r\n\r\nThey do in the sense they indicate/imply what will happen. In the `DISPARAM` scenario it isn\u0027t fully supported so rather than indicate a value it fails. I have no idea if this is true, but the fact that it is marked `Auto` is either an artifact of some logical case, in this case `DISPARAM` seems to support that, or it was a mistake and just never supported. I am fine with special casing `Enum`s, but I want to understand the historical scope as well as if there are any areas where this function indicates a size but a marshaler says it is something else - I believe in `DISPARAM` this is the case. @jkoritzinsky is verifying.",
                                           "updatedAt":  "2019-03-14T18:26:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MzAzMzIxMw==",
                                           "createdAt":  "2019-03-14T19:50:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The runtime implements multiple difference set of marshaling rules: Each of PInvoke, COM, IDispatch or WinRT have different set of rules.\r\n\r\nThese methods implement PInvoke marshaling rules. `DISPPARAM` rules are generally pretty different from PInvoke marshaling rules. This change should not change anything about the `DISPPPARAM` rules. If we want to look at changing `DISPPARAM` rules, it should be a separate issues.",
                                           "updatedAt":  "2019-03-14T19:50:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MzA0ODE4Ng==",
                                           "createdAt":  "2019-03-14T20:28:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBkXntw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2019-03-14T22:05:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2021-03-22T17:23:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "According to ECMA 335, enums can actually have an underlying type of `char` or `bool`, so they\u0027re not always blittable. This\u0027ll take some more investigation to make sure we handle this correctly.",
                                           "updatedAt":  "2019-03-14T20:28:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MzA3NzY2Nw==",
                                           "createdAt":  "2019-03-14T21:46:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAlCuEw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2019-03-14T22:21:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Yep, the builtin runtime interop is full of worms. I would treat this issue with very low priority since we discourage use of these APIs anyway. There is a lot more other interesting interop work we can be spending time on...",
                                           "updatedAt":  "2019-03-14T21:46:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MTcyNjU3Mg==",
                                           "createdAt":  "2021-02-19T00:26:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "willson556",
                                           "body":  "It\u0027s worth noting that in .NET 5, enums that have the underlying type specified _do_ work with the Marshaling API\u0027s.\r\n\r\nExample: https://dotnetfiddle.net/dNjfn7",
                                           "updatedAt":  "2021-02-19T00:26:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-jHdC",
                                           "createdAt":  "2024-05-21T17:46:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "Would the solution just involve forwarding `Marshal.SizeOf` to `Unsafe.SizeOf` and `Enum.GetUnderlyingType` for enums?\r\n\r\nhttps://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEUCuA7AHwAEAmARgFgAoIgBgAIiyA6AJXwwEsBbGZgYQjcADpwA2MKAGVJAN05gYAZwDc1Ooxbs8XXswCSOyRGEyo8xavUkAzNQDe1es8YkSTl46ouf9ACpQAJ5+gcIwADwAMgCGgRA4GADSnHgAJgB8ABQAlGrevs4BwaERKRhZuR7OAL5V9HVENppIjCj+QSFh4X4VdV4FzkwAnJkYJRAAZpl+2cwAYjhiYgBy0byV+QUYQXU+/QM+w5kAJABEPnOcCDCpUpwAXjAA8hPdFSB7l9e3D8+vPTlqqcNgdDmQRmcLlcbndHi9piVsh9nPYvjDfvCxmFJtNstkgSCBrVNr4wNEMGAABb0TIAUQQimEXAgeHoMAQ2V2ni5BSOkJcaJ+cImyIG9nZzAAssolNEAOYwAl5A7Eg7bQI8+j7UGaCHnFyS6JQJSU6JiZiwv5vHIfeyG42m82Wl7W/HA5VEzVkinUukMmBMzgstkczXa0F8/XOe0ms0WjH/d5aiXSpSyhVKzWqlzZ5wNJpMFpleiC52JnJ9TWcCY0rEwHEzAxKWl4HDcTkkg5EADs9AAqnhZRM+GXXR7eb2Y4748Kx3VifnmvRi6WEwiwvQ6x29lWa6MSk2W23tzrGJOjbGnWuj9xmABxGAYAepSRiQIpOWdGD7sJ48e+Ht6CnOMyx/GBCRqahqiAA===\r\n\r\n```csharp\r\npublic static int FixedSizeOf\u003cT\u003e()\r\n{\r\n    if (typeof(T).IsEnum)\r\n        return Unsafe.SizeOf\u003cT\u003e();\r\n    return Marshal.SizeOf\u003cT\u003e();\r\n}\r\n\r\npublic static int FixedSizeOf(Type type)\r\n{\r\n    if (type.IsEnum)\r\n        return Marshal.SizeOf(Enum.GetUnderlyingType(type));\r\n    return Marshal.SizeOf(type);\r\n}\r\n```\r\n\r\nSince enums are blittable, using `Unsafe.SizeOf` should give the same value.",
                                           "updatedAt":  "2024-05-21T17:47:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-jsef",
                                           "createdAt":  "2024-05-21T19:17:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Since enums are blittable, using Unsafe.SizeOf should give the same value.\r\n\r\nEnums can be backed by `bool` or `char`. It is not possible to have such enums in C#, but it is possible to have them in IL or managed C++.\r\n\r\nI would expect that the fix for this would have to be in the logic that computes blittability - both the handle all corner cases correctly and to ensure that all places that take blittability into account work consistently. ",
                                           "updatedAt":  "2024-05-21T19:17:57Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "Marshal.SizeOf throws for enum types",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/13197",
        "createdAt":  "2019-08-01T18:42:55Z",
        "number":  13197,
        "author":  "migueldeicaza",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCr-hlQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "daeken",
                                            "createdAt":  "2019-08-03T19:24:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gdkchan",
                                            "createdAt":  "2019-08-07T01:40:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Brar",
                                            "createdAt":  "2020-01-05T23:14:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vincenz099",
                                            "createdAt":  "2020-02-13T13:29:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pavel-zheltiakov",
                                            "createdAt":  "2020-04-16T05:53:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kekekeks",
                                            "createdAt":  "2020-05-08T13:27:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "emmenlau",
                                            "createdAt":  "2020-06-04T09:06:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hamarb123",
                                            "createdAt":  "2022-01-04T10:18:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CodingMadness",
                                            "createdAt":  "2022-03-20T14:10:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mafiesto4",
                                            "createdAt":  "2022-12-22T08:50:38Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2022-01-04T12:08:01Z",
        "body":  "Hello team,\r\n\r\n`Marshal.GetDelegateForFunctionPointer` thows an exception when the provided parameter is an `Action\u003cT\u003e`.   Given that the actual function signature is known, this limitation seems unnecessary. \r\n\r\nMono currently allows this idiom, without throwing an exception, and is very convenient, to avoid producing a bunch of delegates for every combination of parameters during interop.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOO-NTJg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNzQxMDIyMQ==",
                                           "createdAt":  "2019-08-01T18:43:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "cc: @AaronRobinsonMSFT ",
                                           "updatedAt":  "2019-08-01T18:43:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNzQyOTU3Ng==",
                                           "createdAt":  "2019-08-01T19:42:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@migueldeicaza To confirm, an example of the scenario in question would be:\r\n\r\n```csharp\r\nclass Dispatch\u003cT\u003e\r\n{\r\n    private readonly Action\u003cT\u003e act;\r\n    public Dispatch(IntPtr fptr)\r\n    {\r\n        this.act = Marshal.GetDelegateForFunctionPointer\u003cAction\u003cT\u003e\u003e(fptr);\r\n    }\r\n    public void Exec(T t)\r\n    {\r\n        this.act(t);\r\n    }\r\n}\r\n\r\nnew Dispatch\u003cint\u003e(...).Exec(5);\r\n```\r\n\r\nIf so, this is related to not permitting generic delegate types. That behavior is unfortunately documented as such which may make changing this behavior tough. Not against the change at all, simply unsure how much passionate people are about the current semantics.\r\n\r\nHi @terrajobst @richlander @jkotas, how would we feel about changing the semantics of this function?",
                                           "updatedAt":  "2019-08-01T19:42:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNzQ1MzE2OA==",
                                           "createdAt":  "2019-08-01T20:51:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAtytuA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "migueldeicaza",
                                                                               "createdAt":  "2019-08-02T22:55:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Generics are not supported in regular interop signatures accross the board. Related discussion: See dotnet/runtime#4547 or dotnet/runtime#9136.\r\n\r\nI think it is reasonable to relax some of these limitations for blittable types. I do not think it makes sense to relax it everywhere for everything. It would be a lot of runtime complexity for limited value.\r\n\r\nI would recommend to start with relaxing the limitations for arguments of regular DllImport and function pointers that are getting a first-class C# support soon (https://github.com/dotnet/csharplang/blob/master/proposals/function-pointers.md). WIP PR dotnet/coreclr#23899 has started some of this work.\r\n\r\nOnce it is relaxed for regular DllImport and function pointers, we can then see whether we need to go further. My hypothesis is that the function pointers will quickly become *the way* to do interop because of they will be faster, more light-weight and avoid \"collected delegate\" trap. If my hypothesis is correct, fixing the limitations in `Marshal.GetDelegateForFunctionPointer` may be unnecessary.",
                                           "updatedAt":  "2019-08-01T20:51:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNzg2NjQ5OQ==",
                                           "createdAt":  "2019-08-02T22:56:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBEI-Ww==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ctacke",
                                                                               "createdAt":  "2020-05-13T21:23:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "migueldeicaza",
                                           "body":  "The actual use case:\r\n\r\n```\r\nvoid DoStuff (Delegate d)\r\n{\r\n    var x = Marshal.GetDelegateForFunctionPointer (d);\r\n}\r\n\r\nvoid method (int a, int b) {}\r\n\r\nDoStuff ((Action\u003cint,int\u003e) method);\r\n```",
                                           "updatedAt":  "2019-08-02T22:56:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc474mzw",
                                           "createdAt":  "2022-01-04T10:32:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "This could (not sure how many people rely on this feature of mono) be a more significant problem as people will (presumably) have to / want to transition from the Mono runtime to the core runtime in the future. I think this should be prioritised for .NET 7 / 8 (whenever the transition is required, but also earlier the better).\r\n\r\nLuckily for me though, I don\u0027t think I\u0027m actively using my workaround anywhere at the moment (my workaround calls `GetDelegateForFunctionPointerInternal` (with every check except the one we\u0027re discussing here) with a fallback to the actual method for when it\u0027s fixed in the future, hopefully the internal method won\u0027t be renamed between now and then).",
                                           "updatedAt":  "2022-01-04T10:32:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc474ug6",
                                           "createdAt":  "2022-01-04T11:21:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e my workaround calls GetDelegateForFunctionPointerInternal\r\n\r\nCalling internal runtime methods is unsupported. We reserve the right to change the internal runtime methods anytime. Also, this workaround won\u0027t behave correctly in all cases.",
                                           "updatedAt":  "2022-01-04T11:21:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc474vh4",
                                           "createdAt":  "2022-01-04T11:28:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "\u003e Calling internal runtime methods is unsupported. We reserve the right to change the internal runtime methods anytime.\r\n\r\nYes, I\u0027m aware. I\u0027m just hoping that it won\u0027t be renamed before this change hopefully happens. If it does, I\u0027ll just have to deal with it.\r\n\r\n\u003e Also, this workaround won\u0027t behave correctly in all cases.\r\n\r\nI\u0027m aware of that too, (I think) I\u0027ve only ever used it (in the past) for Func \u0026 Action with blittable types for all parameters - this seems like something that is likely to work, and I don\u0027t think I had any issues (except possibly when the native function expected a float, but I provided a wrapped float in a struct, but that could have even been after I changed to function pointers, or caused by something else). I\u0027m now using autogenerated code (including non-generic delegates, I did this before code generators) that use function pointers instead.\r\n\r\nAlso, just another quick question, why is `Marshal.GetDelegateForFunctionPointer(IntPtr ptr, Type t)` (and presumably other methods similar to this) hidden? Is it going to be unsupported in the future?",
                                           "updatedAt":  "2022-01-04T11:30:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4741Mm",
                                           "createdAt":  "2022-01-04T12:08:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCIjvZg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2022-01-04T13:09:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hamarb123",
                                                                               "createdAt":  "2022-01-04T20:38:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e why is Marshal.GetDelegateForFunctionPointer(IntPtr ptr, Type t) (and presumably other methods similar to this) hidden?\r\n\r\nThese methods are not AOT friendly. They are hidden to lead people to the AOT-friendly generic equivalents.\r\n",
                                           "updatedAt":  "2022-01-04T12:08:00Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Marshal.GetDelegateForFunction feature parity request",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/32963",
        "createdAt":  "2020-02-28T16:53:56Z",
        "number":  32963,
        "author":  "jonpryor",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8YNmQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NN---",
                                            "createdAt":  "2021-02-09T09:24:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cwensley",
                                            "createdAt":  "2022-02-25T16:33:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SupinePandora43",
                                            "createdAt":  "2023-07-31T12:05:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "just-ero",
                                            "createdAt":  "2024-11-04T10:19:24Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2024-09-09T19:18:51Z",
        "body":  "There is a difference between Mono \u0026 .NET Framework/.NET Core regarding the use of [`Marshal.GetFunctionPointerForDelegate()`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.marshal.getfunctionpointerfordelegate?view=netframework-4.8#System_Runtime_InteropServices_Marshal_GetFunctionPointerForDelegate_System_Delegate_) and generic delegate types.  Consider:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nclass App {\r\n    public static void Main ()\r\n    {\r\n        Action\u003cint\u003e a = v =\u003e {};\r\n        var p = Marshal.GetFunctionPointerForDelegate (a);\r\n    }\r\n}\r\n```\r\n\r\nOn .NET Framework, this app fails:\r\n\r\n```\r\nUnhandled Exception: System.ArgumentException: The specified Type must not be a generic type definition.\r\n\r\n\u2028Parameter name: delegate\r\n\u2028   at System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegateInternal(Delegate d)\r\n\u2028   at App.Main()\r\n```\r\n\r\nThis works on Mono.\r\n\r\n.NET Core currently has the same check as .NET Framework: https://github.com/dotnet/runtime/blob/fcd862e06413a000f9cafa9d2f359226c60b9b42/src/coreclr/src/vm/comdelegate.cpp#L1228\r\n\r\n---\r\n\r\n**Rationale**: Xamarin.Android currently uses `System.Action\u003c...\u003e` and `System.Func\u003c...\u003e` with `Marshal.GetFunctionPointerForDelegate()` to register function pointers with JNI.  This has always worked on Mono, and Xamarin.Android uses mono, so it\u0027s been Fine.\r\n\r\nHowever, it would be nice to use Xamarin.Android\u0027s JNI infrastructure on .NET Core.  At present, if this were to be done it would fail as soon as we hit `Marshal.GetFunctionPointerForDelegate()` for method registration.\r\n\r\nThe Xamarin.Android team could instead alter their binding infrastructure so that `Action\u003c...\u003e` and `Func\u003c...\u003e` are not used.  The Xamarin.Android team would like to know if this code generator change is *required* for eventual .NET Core support, or if we can instead forego this change.\r\n\r\n---\r\n\r\nThanks to the *Similar issues* window, https://github.com/dotnet/runtime/issues/4547 was suggested. I\u0027m not sure if this is entirely duplicative or not, but Issue #4547 is currently Closed, though it was also added to the .NET 5 milestone, so I\u0027m not entirely sure if these are the same or not.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi2i7_A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MjYwOTI2MQ==",
                                           "createdAt":  "2020-02-28T17:07:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBDuk4g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2020-02-28T18:53:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GrabYourPitchforks",
                                                                               "createdAt":  "2020-02-28T19:21:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nxrighthere",
                                                                               "createdAt":  "2020-04-01T16:19:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jingliancui",
                                                                               "createdAt":  "2020-04-21T15:08:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bramborman",
                                                                               "createdAt":  "2020-04-28T21:50:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "josipjuric",
                                                                               "createdAt":  "2020-05-10T17:13:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Marshal.GetFunctionPointerForDelegate for generic types is not straightforward to implement in CoreCLR, and it is even more difficult to implement a good AOT compilation scheme for it.\r\n\r\nThe recommend way to do this for .NET 5 and beyond is going to use the `NativeCallableAttribute` (#32462) and C# function pointers (https://github.com/dotnet/csharplang/blob/master/proposals/function-pointers.md). This will remove the delegates from the picture completely and make the whole thing faster, smaller and easy for ahead-of-time compilation.\r\n\r\nMy recommendation would be:\r\n- Keep GetFunctionPointerForDelegate on Action for now.\r\n- Once the .NET 5 function pointer features comes online, switch Xamarin Android to use it. It will make it compatible with CoreCLR, and also faster and smaller.\r\n\r\ncc @AaronRobinsonMSFT ",
                                           "updatedAt":  "2020-02-28T17:09:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MjY3NjExNA==",
                                           "createdAt":  "2020-02-28T19:00:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e but Issue #4547 is currently Closed, though it was also added to the .NET 5 milestone, so I\u0027m not entirely sure if these are the same or not.\r\n\r\n@jonpryor The discussion was had and decided that it wasn\u0027t the best solution due to the better approach described by @jkotas above. Does the recommendation above make sense to you?",
                                           "updatedAt":  "2020-02-28T19:00:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NTk3MTE5OQ==",
                                           "createdAt":  "2020-03-06T21:23:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonpryor",
                                           "body":  "\u003e Does the recommendation above make sense to you?\r\n\r\nI\u0027m not sure it does, likely because I\u0027m not fully understanding the \"function pointers\" proposal.\r\n\r\nWhat we need to be able to do is call [`JNIEnv::RegisterNatives()`](https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html#RegisterNatives):\r\n\r\n```c\r\ntypedef struct {\r\n    char *name;\r\n    char *signature;\r\n    void *fnPtr;\r\n} JNINativeMethod;\r\n\r\ntypedef const struct JNINativeInterface_ *JNIEnv\r\n\r\n/* partial */ struct JNINativeInterface_ {\r\n    int (*RegisterNatives)(JNIEnv *env, class class, const JNINativeMethod *methods, int nMethods);\r\n}\r\n```\r\n\r\nWhat we *currently* do is emit code such as:\r\n\r\n```csharp\r\npartial class /* Java.Lang. */ Object {\r\n\r\n\tstatic Delegate cb_toString;\r\n\tstatic Delegate GetToStringHandler ()\r\n\t{\r\n\t\tif (cb_toString == null)\r\n\t\t\tcb_toString = JNINativeWrapper.CreateDelegate ((Func\u003cIntPtr, IntPtr, IntPtr\u003e) n_ToString);\r\n\t\treturn cb_toString;\r\n\t}\r\n\r\n\tstatic IntPtr n_ToString (IntPtr jnienv, IntPtr native__this)\r\n\t{\r\n\t\tJava.Lang.Object __this = global::Java.Lang.Object.GetObject\u003cJava.Lang.Object\u003e (jnienv, native__this, JniHandleOwnership.DoNotTransfer);\r\n\t\treturn JNIEnv.NewString (__this.ToString ());\r\n\t}\r\n}\r\n```\r\n\r\nWe then lookup `Object.GetToStringHandler()` at runtime via Reflection, then execute it, and pass the returned `Delegate` instance to a `JniNativeMethodRegistration` instance, which relies on the normal P/Invoke marshaler to marshal the Delegate to a function pointer in native code:\r\n\r\n* https://github.com/xamarin/xamarin-android/blob/2fd73856bde0b0800b2455485cf15e6b4b393bec/src/Mono.Android/Android.Runtime/AndroidRuntime.cs#L373-L378\r\n* https://github.com/xamarin/java.interop/blob/27cfd452c6e543374728ace77af05ab65f9952b6/src/Java.Interop/Java.Interop/JniNativeMethodRegistration.cs\r\n\r\nWe don\u0027t explicitly invoke `Marshal.GetFunctionPointerForDelegate()`.  It\u0027s implicit via P/Invoke struct marshaling.\r\n\r\nI\u0027m not immediately sure how to convert the above code into C#8 function pointers.  I\u0027d almost certainly need to drop the use of `Delegate` *entirely*, e.g.:\r\n\r\n```csharp\r\npublic struct JniNativeMethodRegistration {\r\n\tpublic  string      Name;\r\n\tpublic  string      Signature;\r\n\tpublic  IntPtr      Marshaler;\r\n\r\n\tpublic JniNativeMethodRegistration (string name, string signature, IntPtr marshaler)\r\n\t{\r\n\t\tName        = name      ?? throw new ArgumentNullException (nameof (name));\r\n\t\tSignature   = signature ?? throw new ArgumentNullException (nameof (signature));\r\n\t\tMarshaler   = marshaler == IntPtr.Zero ? throw new ArgumentNullException (nameof (marshaler)) : marshaler;\r\n\t}\r\n}\r\n```\r\n\r\nBut I still need to get that `IntPtr`, and \"know\" that the `IntPtr` is a C callable function pointer.  The Function Pointers doc suggests that `delegate*` can be converted to a `void*`:\r\n\r\n```\r\n        delegate*\u003cvoid\u003e ptr1 = \u0026Util.Log;\r\n        void* v = \u0026Util.Log;\r\n```\r\n\r\nbut that in no means I can pass `v` to C code and it can be executed!  (That may be intended, but it\u0027s not *explicit*.). Especially when the doc also states:\r\n\r\n\u003e This means invocation of a `delegate*` will use `calli` where invocation of a delegate will use `callvirt` on the `Invoke` method\r\n\r\nAdditionally, note the `JNINativeWrapper.CreateDelegate()` invocation in the above snippet.  This uses *`System.Reflection.Emit`* to generate a *new* delegate, which \"wraps\" `n_ToString()` in a try/catch block for exception marshaling purposes.\r\n\r\nI\u0027m going to go out on a limb and guess that there\u0027s no way to use System.Reflection.Emit-generated delegate instances with `delegate*`.\r\n\r\nI am not immediately convinced that Function Pointers are a path forward, and updating our generator to instead *avoid* `Action\u003c...\u003e` and `Func\u003c...\u003e` by emitting new families of non-generic delegate types for our dispatch infrastructure may be the easier path forward.\r\n",
                                           "updatedAt":  "2020-03-06T21:23:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NjEyNzUwMg==",
                                           "createdAt":  "2020-03-07T19:03:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA9gnfg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2020-03-07T19:07:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e but that in no means I can pass v to C code and it can be executed! \r\n\r\nIf the method is marked with `NativeCallable` attribute, you can absolutely pass `v`to C code and it can be executed! The C# function pointers spec do not have the details on `NativeCallable`, but I expect that it is something we are going to fix as we work through the end-to-end scenarios. cc @AaronRobinsonMSFT  @333fred\r\n\r\nSo you would produce this (no static fields, no delegate objects):\r\n\r\n```\r\n[NativeCallable]\r\nstatic IntPtr n_ToString (IntPtr jnienv, IntPtr native__this)\r\n{\r\n    try\r\n    {\r\n        Java.Lang.Object __this = global::Java.Lang.Object.GetObject\u003cJava.Lang.Object\u003e (jnienv, native__this, JniHandleOwnership.DoNotTransfer);\r\n        return JNIEnv.NewString (__this.ToString ());\r\n    }\r\n    catch (Exception e)\r\n    {\r\n        ... whatever you generate with Reflection.Emit today ...        \r\n    }\r\n}\r\n```\r\n\r\nAnd then pass the address of `n_ToString` to registration.\r\n\r\n\u003e there\u0027s no way to use System.Reflection.Emit-generated delegate instances with delegate*\r\n\r\nYou should be able to emit method with `NativeCallableAttribute`, but it seems questionable to me. Statically generated code for this should be a lot better - it would certainly be orders of magnitude smaller and faster than Reflection.Emit-based solution when run on CoreCLR.",
                                           "updatedAt":  "2020-03-07T19:03:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NjEyODE5Nw==",
                                           "createdAt":  "2020-03-07T19:11:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@jonpryor See https://github.com/dotnet/runtime/pull/33005 for the `NativeCallableAttribute` PR. This is something that should help with your scenario. It is close to complete, but unfortunately isn\u0027t as useful as desired until the C# function pointer work is in. See [`NativeCallableTest.cs`](https://github.com/dotnet/runtime/blob/df879db95c2c3ea4abe79c68461d204d3648b83b/src/coreclr/tests/src/Interop/NativeCallable/NativeCallableTest.cs) for examples of use without C# function pointers.",
                                           "updatedAt":  "2020-03-07T19:11:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LaLv8",
                                           "createdAt":  "2024-09-09T19:18:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SupinePandora43",
                                           "body":  "\u003e Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup. It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\r\n\u003e \r\n\u003e This process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\r\n\r\nThis is a needed feature that will remove need for casting all `Action\u003cT\u003e` to their non-generic `delegate` variants,",
                                           "updatedAt":  "2024-09-09T19:18:42Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Allow Marshal.GetFunctionPointerForDelegate() to work with generic types",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/34711",
        "createdAt":  "2020-04-08T20:11:42Z",
        "number":  34711,
        "author":  "wli3",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBEPjA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rikj000",
                                            "createdAt":  "2025-04-10T13:22:47Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-08T12:35:23Z",
        "body":  "_From @sunliusi on Sunday, March 22, 2020 4:21:18 AM_\r\n\r\nI need to use the local library for cross-platform. Local libraries have different implementations and Put them in different folders. \r\n\r\nit work fine in windows just like this:\r\nEnvironment.SetEnvironmentVariable(\"PATH\", path + \";\" + Environment.GetEnvironmentVariable(\"PATH\"));\r\n\r\nit\u0027s not working in linux just like this:\r\nEnvironment.SetEnvironmentVariable(\"LD_LIBRARY_PATH\", dir + \":\" + Environment.GetEnvironmentVariable(\"LD_LIBRARY_PATH\"));\r\n\r\n_Copied from original issue: dotnet/sdk#10957_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtbicmg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMTE2ODg3Ng==",
                                           "createdAt":  "2020-04-08T20:11:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wli3",
                                           "body":  "_From @sunliusi on Sunday, March 22, 2020 4:28:55 AM_\r\n\r\nNativeLibrary doesn\u0027t work either. There are two local libraries, one dependent on the other. This works only if the local library has no dependencies.\r\n\r\n ```\r\nvar path1 = Path.Combine(assemblyDirectory, \"unix\", \"testaa.so\");\r\n                var p1 = NativeLibrary.Load(path1);\r\n                if (p1 == IntPtr.Zero)\r\n                {\r\n                    throw new ApplicationException(\"load assembly fail:\" + path1);\r\n                }\r\n\r\n\r\n                var path = Path.Combine(assemblyDirectory, \"unix\", \"test.so\");\r\n                var p = NativeLibrary.Load(path);\r\n                if (p == IntPtr.Zero)\r\n                {\r\n                    throw new ApplicationException(\"load assembly fail:\" + path);\r\n                }\r\n```\r\n\r\n ---\u003e System.DllNotFoundException: Unable to load shared library \u0027test.so\u0027 or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: ./testaa.so: cannot open shared object file: No such file or directory\r\n   at System.Runtime.InteropServices.NativeLibrary.LoadFromPath(String libraryName, Boolean throwOnError)\r\n   at System.Runtime.InteropServices.NativeLibrary.Load(String libraryPath)\r\n",
                                           "updatedAt":  "2020-04-08T20:11:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMTE2ODg5MA==",
                                           "createdAt":  "2020-04-08T20:11:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wli3",
                                           "body":  "_From @SourceSkyBoxer on Tuesday, March 24, 2020 9:48:41 AM_\r\n\r\nHello, \r\nI will tell you example with NativeLibrary()\r\n ```\r\n       /*\r\n         *  Valid library name for Linux of X11, Extensions, OpenGL and Vulkan\r\n         */\r\n        private const string libX11 = \"libX11.so.6\";\r\n        private const string libXrender = \"libXrender.so.0\";\r\n        private static IntPtr handle;\r\n\r\n        static XLib()\r\n        {\r\n            // Important instance of TryGetExport()\r\n            handle = NativeLibrary.Load(libX11, typeof(XLib).Assembly, 0);\r\n        }\r\n\r\n        /*\r\n         *  Display *XOpenDisplay(char *displayname);\r\n         */\r\n        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]\r\n        private delegate IntPtr _XOpenDisplay(string displayname);\r\n        public static Display XOpenDisplay(string displayname)\r\n        {\r\n            _XOpenDisplay opendisplay_delegate;\r\n            if (NativeLibrary.TryGetExport(handle, \"XOpenDisplay\", out IntPtr opendisplay))\r\n            {\r\n                opendisplay_delegate = Marshal.GetDelegateForFunctionPointer\u003c_XOpenDisplay\u003e(opendisplay);\r\n            }\r\n            else\r\n            {\r\n                opendisplay_delegate = (string name) =\u003e { throw new NotImplementedException(\"Error: XOpenDisplay not found.\"); };\r\n            }\r\n\r\n            return new Display(opendisplay_delegate(displayname));\r\n        }\r\n```\r\nIf you want FullPath like this.\r\nYou should use \"AppDomain.CurrentDomain.BaseDirectory\"\r\nlike this:\r\n```\r\n            ...\r\n            string rootdir = AppDomain.CurrentDomain.BaseDirectory;\r\n            handle = NativeLibrary.Load(Path.Combine(rootdir, \"unix\", \"sofile.so\"), typeof(YourClass).Assembly, 0);\r\n            ...\r\n```\r\n\r\nYou should create delegate with UnmanagedFunctionPointer\r\n```\r\n        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]\r\n        private delegate void _Method(string sayhello);\r\n```\r\nThan you can try as public method if you try out.\r\n```\r\n        public static void Method(string sayhello)\r\n        {\r\n            _Method method_delegate;\r\n            if (NativeLibrary.TryGetExport(handle, \"Method\", out IntPtr method_ptr))\r\n            {\r\n                method_delegate = Marshal.GetDelegateForFunctionPointer\u003c_Method\u003e(method_ptr);\r\n            }\r\n            else\r\n            {\r\n                method_delegate = (string name) =\u003e { throw new NotImplementedException(\"Error: Method not found.\"); };\r\n            }\r\n\r\n            method_delegate(sayhello);\r\n        }\r\n```\r\n\r\nJust it is small example of my made.\r\nI hope my solution helps you as well.\r\n\r\n// EDIT: You mean multiple so files?\r\nNo problem for me \r\n\r\n```\r\n            ...\r\n            // multiple so files\r\n            string[] sofiles =\r\n            {\r\n                \"file1.so\", \"file2.so\"\r\n            };\r\n            string rootdir = AppDomain.CurrentDomain.BaseDirectory;\r\n            foreach (string sofile in sofiles)\r\n            {\r\n                handle = NativeLibrary.Load(Path.Combine(rootdir, \"unix\", sofile));\r\n            }\r\n            ...\r\n```\r\nIt is example:\r\nFor old version of NetFX 4.5 picture.\r\n![image](https://user-images.githubusercontent.com/57066679/77443749-91dad000-6deb-11ea-87e2-f72f3de85c5e.png)\r\nIt is very easy to understand like I made it.\r\n\r\nIt is simple for you. I hope that.",
                                           "updatedAt":  "2020-04-08T20:11:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMTE2ODg5NQ==",
                                           "createdAt":  "2020-04-08T20:11:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-04-08T20:11:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMTE2ODg5Nw==",
                                           "createdAt":  "2020-04-08T20:11:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wli3",
                                           "body":  "_From @sunliusi on Wednesday, March 25, 2020 4:29:01 AM_\r\n\r\nThanks @SourceSkyBoxer  for such a detailed explanation.\r\n\r\nFollow the example above:\r\n`// multiple so files\r\n            string[] sofiles =\r\n            {\r\n                \"file1.so\", \"file2.so\"\r\n            };\r\n            string rootdir = AppDomain.CurrentDomain.BaseDirectory;\r\n            foreach (string sofile in sofiles)\r\n            {\r\n                handle = NativeLibrary.Load(Path.Combine(rootdir, \"unix\", sofile));\r\n            }` \r\n\r\nThe problem is that NativeLibrary.Load will fail when file2.so references file1.so.\r\n\r\nIf you put file2.so and file1.so in the root directory, there is no problem",
                                           "updatedAt":  "2020-04-08T20:11:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMTE2ODkwNw==",
                                           "createdAt":  "2020-04-08T20:11:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wli3",
                                           "body":  "_From @sunliusi on Wednesday, March 25, 2020 4:30:22 AM_\r\n\r\nSystem.DllNotFoundException: Unable to load shared library \u0027.../unix/file2.so\u0027 or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: ./file1.so: cannot open shared object file: No such file or directory\r\n",
                                           "updatedAt":  "2020-04-08T20:11:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMTE3ODM0MA==",
                                           "createdAt":  "2020-04-08T20:31:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODZgkSg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2020-04-09T18:36:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "withsalt",
                                                                               "createdAt":  "2021-12-21T09:15:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jgrosic",
                                                                               "createdAt":  "2022-11-04T12:55:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ahjszll",
                                                                               "createdAt":  "2024-03-06T08:03:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "I believe that `LD_LIBRARY_PATH` has to be set before the program starts (either exported into the environment or when it is started). We don\u0027t propagate environment variable changes back out to the system when they\u0027re changed in .NET on Unix.",
                                           "updatedAt":  "2020-04-08T20:31:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMTE3ODc2Mg==",
                                           "createdAt":  "2020-04-08T20:32:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "Related to/possible duplicate of https://github.com/dotnet/runtime/issues/9529",
                                           "updatedAt":  "2020-04-08T20:32:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMTYzOTkyOQ==",
                                           "createdAt":  "2020-04-09T17:03:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "\u003e I believe that `LD_LIBRARY_PATH` has to be set before the program starts (either exported into the environment or when it is started). We don\u0027t propagate environment variable changes back out to the system when they\u0027re changed in .NET on Unix.\r\n\r\nThat\u0027s correct. And it is not a .NET problem and it is unrelated to propagation env variables settings into the system, setting LD_LIBRARY_PATH has effect only before a process launch for any application written in any language. That\u0027s how the dynamic linker works.",
                                           "updatedAt":  "2020-04-09T17:03:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNDc1MTcyMg==",
                                           "createdAt":  "2020-04-16T16:17:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ssa3512",
                                           "body":  "I am running into a similar issue with interop on linux. I have a nuget package that is distributing some native libraries that I am calling with P/Invoke. The libraries are in the bin folder as such:\r\n\r\n```\r\nbin/Debug/netcoreapp3.1/runtimes\r\n├── linux-x64\r\n│   └── native\r\n│       ├── libfile1.so\r\n│       ├── libfile2.so\r\n│       └── libfile3.so\r\n├── linux-x86\r\n│   └── native\r\n│       ├── libfile1.so\r\n│       ├── libfile2.so\r\n│       └── libfile3.so\r\n├── win-x64\r\n│   └── native\r\n│       ├── file1.dll\r\n│       ├── file2.dll\r\n│       └── file3.dll\r\n└── win-x86\r\n    └── native\r\n        ├── file1.dll\r\n        ├── file2.dll\r\n        └── file3.dll\r\n```\r\n\r\nfile1 has a dependency on file2 and file3. The code runs fine on Windows x86 and x64, but fails on linux with this error:\r\n```\r\nThe active test run was aborted. Reason: Test host process crashed : Unhandled exception.\r\nSystem.DllNotFoundException: Unable to load shared library \u0027file1\u0027 or one of its dependencies. In\r\norder to help diagnose loading problems, consider setting the LD_DEBUG environment variable:\r\nlibfile1: cannot open shared object file: No such file or directory\r\n```\r\n\r\nThe code is calling into this library as such:\r\n``` cs\r\n[DllImport(\"file1\")\r\npublic static extern void NativeMethod();\r\n```\r\n\r\nIf I copy the files `libfile1.so`, `libfile2.so` and `libfile3.so` to `/usr/lib` the code executes fine. Is this related to the above issue? I would expect .NET core to include the appropriate runtimes folder (in this case `runtimes/linux-x64/native` in the search path for interop.\r\n\r\nldd output without runtimes folder in LD_LIBRARY_PATH\r\n```\r\nprojectdir\u003e ldd bin/Debug/netcoreapp3.1/runtimes/linux-x64/native/libfile1.so\r\n        linux-vdso.so.1 (0x00007ffd95b94000)\r\n        libpthread.so.0 =\u003e /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fa4abdbd000)\r\n        libfile2.so =\u003e not found\r\n        libfile3.so =\u003e not found\r\n        libm.so.6 =\u003e /lib/x86_64-linux-gnu/libm.so.6 (0x00007fa4aba1f000)\r\n        libc.so.6 =\u003e /lib/x86_64-linux-gnu/libc.so.6 (0x00007fa4ab62e000)\r\n        /lib64/ld-linux-x86-64.so.2 (0x00007fa4ac34e000)\r\n```\r\nIncluding runtimes folder in LD_LIBRARY_PATH\r\n```\r\nprojectdir\u003e LD_LIBRARY_PATH=$LD_LIBRARY_PATH:bin/Debug/netcoreapp3.1/runtimes/linux-x64/native ldd bin/Debug/netcoreapp3.1/runtimes/linux-x64/native/libfile1.so\r\n        linux-vdso.so.1 (0x00007fff7c4d4000)\r\n        libpthread.so.0 =\u003e /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f2a2163e000)\r\n        libfile2.so =\u003e bin/Debug/netcoreapp3.1/runtimes/linux-x64/native/libfile2.so (0x00007f2a2142c000)\r\n        libfile3.so =\u003e bin/Debug/netcoreapp3.1/runtimes/linux-x64/native/libfile3.so (0x00007f2a21183000)\r\n        libm.so.6 =\u003e /lib/x86_64-linux-gnu/libm.so.6 (0x00007f2a20de5000)\r\n        libc.so.6 =\u003e /lib/x86_64-linux-gnu/libc.so.6 (0x00007f2a207ed000)\r\n        /lib64/ld-linux-x86-64.so.2 (0x00007f2a21bcf000)\r\n```",
                                           "updatedAt":  "2020-04-16T16:23:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNDc3MzQ4NQ==",
                                           "createdAt":  "2020-04-16T16:58:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sunliusi",
                                           "body":  "Put so in the root directory on linux, and put dll in custom directory on windows, it also works.\n\nSet LD_LIBRARY_PATH before the program start is not a good idea. It\u0027s best to control it using code, just like Windows",
                                           "updatedAt":  "2020-04-16T16:58:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNDc3NTUwOQ==",
                                           "createdAt":  "2020-04-16T17:01:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEP69gg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "emmenlau",
                                                                               "createdAt":  "2021-01-26T22:24:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DmitryZhelnin",
                                                                               "createdAt":  "2021-03-16T12:04:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikehixson",
                                                                               "createdAt":  "2022-10-12T18:37:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikhail-khalizev",
                                                                               "createdAt":  "2023-05-16T16:31:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rikj000",
                                                                               "createdAt":  "2025-04-10T13:36:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlLiberali",
                                                                               "createdAt":  "2025-04-28T12:03:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "ssa3512",
                                           "body":  "It is my understanding that the /runtimes/[platform]/native folder is supposed to be supported as a delivery mechanism for native libraries https://docs.microsoft.com/en-us/nuget/create-packages/supporting-multiple-target-frameworks#architecture-specific-folders\r\n\r\nThe challenge seems to come in when those libraries have other dependencies also being distributed this way.",
                                           "updatedAt":  "2020-04-16T17:01:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2Nzg2OTYyOQ==",
                                           "createdAt":  "2021-01-26T22:29:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEP69vw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ssa3512",
                                                                               "createdAt":  "2022-04-07T23:53:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "arthurvb",
                                                                               "createdAt":  "2024-07-10T19:33:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rikj000",
                                                                               "createdAt":  "2025-04-10T13:36:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlLiberali",
                                                                               "createdAt":  "2025-04-28T12:04:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "emmenlau",
                                           "body":  "I\u0027m also affected by this problem, and I\u0027ve spent the past day trying to figure out what is going wrong. Reading this issue I still do not see the best solution (or workaround).\r\n\r\nWhy does .NET not resolve libraries in architecture specific folders (i.e. in `runtimes/linux-x64/native/`)? I\u0027ve tried to see with `strace` where my DllImport library is searched, and it seems that dotnet is not even checking the `runtimes/linux-x64/native/` folder for the DllImport (let alone its dependencies).",
                                           "updatedAt":  "2021-01-26T22:30:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTU2NTA5Ng==",
                                           "createdAt":  "2021-01-29T04:21:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODH_fWA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "emmenlau",
                                                                               "createdAt":  "2021-06-23T17:26:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dif-sam",
                                                                               "createdAt":  "2023-09-27T20:27:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "sweemer",
                                           "body":  "I have encountered this issue as well and agree with @ssa3512 and @emmenlau that the .NET runtime should be responsible for somehow properly adding all nupkg native libs and their dependencies to the runtime search path.\r\n\r\nIn the meantime, I did find a workaround that I would like to share. You can use the compiler option `-Wl,-rpath,\"\\$ORIGIN\"` when compiling (linking) the library that you specify in `DllImport`, which will add the executable directory to the search path. Since `dotnet publish` puts the executable and all the native libs in the `publish` directory together, the libraries are all available on the search path; i.e. the `publish` directory.\r\n\r\nIf you are using CMake then you can add `set(CMAKE_BUILD_RPATH \"$\\{ORIGIN\\}\")` to your `CMakeLists.txt` file to accomplish the same thing.",
                                           "updatedAt":  "2021-01-29T04:21:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6f9SA9",
                                           "createdAt":  "2025-02-26T01:07:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gfody",
                                           "body":  "I\u0027ve encountered this while trying to load libicuuc.dylib on macOS - this library sideloads libicudata.dylib and on Windows we can use SetDllDirectory from kernel32 at runtime but on macOS nothing seems to work. Is recompiling the native libs to embed an rpath really the only way?",
                                           "updatedAt":  "2025-02-26T01:07:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mh4gK",
                                           "createdAt":  "2025-04-10T14:39:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEZw2aA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "teikitel",
                                                                               "createdAt":  "2025-07-08T12:31:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Rikj000",
                                           "body":  "After a long search, I\u0027ve discovered a feasible work-around! 🥳\n\nWith [`patchelf --set-rpath`](https://github.com/NixOS/patchelf) it\u0027s possible to update the `RUNPATH` of libraries that depend on each-other,   \nwhich solves `ldd` reporting `not found` on the dependencies,   \nand also the ability to import the libraries with `NativeLibrary.Load()`\n\nI\u0027ve written a small `.sh` script to patch all libraries used:\n```sh\n#!/bin/bash\n\n# Notes:\n# - Depends on \u0027patchelf\u0027\n# - Needs to be called once after each library update\n\nRUNTIMES=(\n    \"linux-arm64\"\n    \"linux-x64\"\n);\n\nLIBRARIES=(\n    \"file1.so\"\n    \"file2.so\"\n);\n  \nfor RUNTIME in \"${RUNTIMES[@]}\"; do\n    echo \"Patching RUNPATHs for \u0027$RUNTIME\u0027 runtime:\";\n    for LIBRARY in \"${LIBRARIES[@]}\"; do\n        echo \"- Patching \u0027$LIBRARY\u0027 library\";\n        patchelf --set-rpath \"runtimes/$RUNTIME/native\" \"$RUNTIME/$LIBRARY\";\n    done\n    echo \"\";\ndone\n\necho \"Patched all library RUNPATHs!\";\n```\n\nThe script assumes that the libraries will end up under `runtimes/$RUNTIME/native` after building.\n\n```bash\nreadelf -d file1.so | grep RUNPATH\n# Before patching\n 0x000000000000001d (RUNPATH)            Library runpath: [./]\n# After patching\n 0x000000000000001d (RUNPATH)            Library runpath: [runtimes/linux-arm64/native]\n```",
                                           "updatedAt":  "2025-04-10T14:40:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61uJya",
                                           "createdAt":  "2025-07-08T12:35:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teikitel",
                                           "body":  "\u003e\n\u003e After a long search, I\u0027ve discovered a feasible work-around! 🥳\n\u003e \n\nThanks a lot for the workaround @Rikj000. I recently faced the very same issue and was able to patch my lib\u0027s rpath using https://pypi.org/project/patchelf/\n\nI also had to do the same for a MacOs native lib where I use `otool` to check and `install_name_tool` to patch the rpath https://stackoverflow.com/questions/35220111/install-name-tool-difference-between-change-and-id\n",
                                           "updatedAt":  "2025-07-08T12:35:23Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "Using the LD LIBRARY PATH to load local libraries does not work on Linux",
        "labels":  [
                       "question",
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/35017",
        "createdAt":  "2020-04-15T19:17:13Z",
        "number":  35017,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-06T09:15:26Z",
        "body":  "There are a few issues/documentation that currently indicate unmanaged exception interop doesn\u0027t exist on Unix:\r\n* https://github.com/dotnet/runtime/issues/6820\r\n* https://github.com/dotnet/runtime/issues/7086\r\n* https://github.com/dotnet/runtime/issues/7342\r\n* https://github.com/dotnet/coreclr/pull/7652\r\n* https://docs.microsoft.com/en-us/dotnet/standard/native-interop/exceptions-interoperability\r\n\r\nThe latter of which indicates\r\n\u003e  the Unix ABI has no definition for exception handling\r\n\r\nHowever, I find this confusing as the System V ABI (https://github.com/hjl-tools/x86-psABI/wiki/X86-psABI) does define this in `Section 6.2 - Unwind Library Interface`, as does the Itanium C++ ABI (https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html), both of which are used by code and more specifically C/C++ code on Unix platforms.\r\n\r\nIt was mentioned that Windows would be made consistent and the support for propagating exceptions was going to be dropped, but that was latter dropped in favor of compatibility. Given that it should be possible to handle and even propagate exception information across the boundaries and it would make the cross-platform behavior consistent, is it worth taking another look at this?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcvt5AQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNDIzMDE1Mg==",
                                           "createdAt":  "2020-04-15T19:17:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-04-15T19:17:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNDIzMDI2MA==",
                                           "createdAt":  "2020-04-15T19:17:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "CC. @janvorli, @jkotas, @jkoritzinsky ",
                                           "updatedAt":  "2020-04-15T19:17:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNDI0NzI1OA==",
                                           "createdAt":  "2020-04-15T19:52:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODVi0WA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2020-04-15T20:10:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ceztko",
                                                                               "createdAt":  "2024-02-05T17:45:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "You can do C++ exception interop manually today by doing try+catch on one side, remap the exception to the other system and throw on the other side. It is a boiler plate code, but it gives you a full control over what you can do. For example, we do that in the crossgen2 compiler here: https://github.com/dotnet/runtime/blob/master/src/coreclr/src/tools/crossgen2/jitinterface/jitinterface.h#L200\r\n\r\nI think it would be a fine idea to explore how to reduce this boilerplate code, e.g. by having opt-in mechanism that allows you to attach a custom exception re-mapper to specific PInvokes/reverse PInvokes. Xamarin does it for Objective C exception interop, but it is specific to Objective C and depends on Mono embedding APIs: https://github.com/xamarin/xamarin-macios/blob/master/runtime/EXCEPTIONS.md .",
                                           "updatedAt":  "2020-04-15T19:52:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y1B7J",
                                           "createdAt":  "2024-02-05T09:00:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ceztko",
                                           "body":  "\u003e remap the exception to the other system and throw on the other side [...] For example, we do that in the crossgen2 compiler here:\r\n\r\nI\u0027m updating the link of [`jitinterface.h#L200`](https://github.com/dotnet/corert/blob/c6af4cfc8b625851b91823d9be746c4f7abdc667/src/Native/jitinterface/jitinterface.h#L200) since it got broken by updating the master.\r\n\r\n\u003e I think it would be a fine idea to explore how to reduce this boilerplate code, e.g. by having opt-in mechanism that allows you to attach a custom exception re-mapper to specific PInvokes/reverse PInvokes. Xamarin does it for Objective C exception interop\r\n\r\nTalking about propagating exception from unmanaged-managed boundary and removing the need for boilerplate, especially in the case of custom error handlers, I imagined having something like (tentative invented API) `Marshal.SetManagedException(ex)`, and a boolean flag `CheckExceptionOnExit` in the `DllImport`/`LibraryImport` attributes. So one on .NET would expose native functionalities and define the error handler like the following:\r\n\r\n```csharp\r\npublic class MyLibrary\r\n{\r\n    static ErrorHandlerCallback? _errorHandler;\r\n\r\n    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]\r\n    delegate void ErrorHandlerCallback([MarshalAs(UnmanagedType.LPUTF8Str)]string message);\r\n\r\n    static MyLibrary()\r\n    {\r\n        _errorHandler = HandleError;\r\n        SetErrorHandler(_errorHandler);\r\n    }\r\n\r\n    public static void Foo()\r\n    {\r\n        NativeFoo();\r\n    }\r\n\r\n    static void HandleError(string message)\r\n    {\r\n        // Set managed exception from [UnmanagedFunctionPointer] handler, to be thrown late by the runtime\r\n        // NOTE: Tentative invented API\r\n        Marshal.SetManagedException(new Exception(message));\r\n    }\r\n\r\n    // NOTE: Tentative invented API\r\n    [DllImport(\"SharedLibrary\", CheckExceptionOnExit = true, CallingConvention = CallingConvention.Cdecl)]\r\n    static extern void NativeFoo();\r\n\r\n    [DllImport(\"SharedLibrary\", CallingConvention = CallingConvention.Cdecl)]\r\n    static extern void SetErrorHandler(ErrorHandlerCallback callback);\r\n}\r\n```\r\n\r\nAnd externally one would just `try-catch` on `MyLibray.Foo()`.",
                                           "updatedAt":  "2024-02-05T18:37:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y3tFs",
                                           "createdAt":  "2024-02-05T15:03:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e Talking about propagating exception from unmanaged-managed boundary and removing the need for boilerplate, especially in the case of custom error handlers, I imagined having something like (tentative invented API) `Marshal.SetManagedException(ex)`, and a boolean flag `CheckExceptionOnExit` in the `DllImport`/`LibraryImport` attributes.\r\n\r\nYou could make such wrapping yourself easily, there\u0027s no need to involve the runtime. There\u0027s an issue though that such exception storing wouldn\u0027t indicate a failure to native code which means you\u0027d need to return some exit codes there.\r\nAn example of manual implementation:\r\n```cs\r\npublic static class Test\r\n{\r\n    [ThreadStatic]\r\n    private static Exception exceptionStorage;\r\n\r\n    [StackTraceHidden]\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static void RethrowNative()\r\n    {\r\n        Exception exception = exceptionStorage;\r\n        if (exception == null)\r\n            return;\r\n        exceptionStorage = null;\r\n        Rethrow(exception);\r\n\r\n        [StackTraceHidden]\r\n        static void Rethrow(Exception ex) =\u003e throw ex;\r\n    }\r\n\r\n    public static void Foo()\r\n    {\r\n        Bar(\u0026Export);\r\n        RethrowNative();\r\n    }\r\n\r\n    [UnmanagedCallersOnly(CallConvs = [typeof(CallConvCdecl)])]\r\n    static int Export()\r\n    {\r\n        try\r\n        {\r\n            Throw();\r\n            return 0;\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            exceptionStorage = ex;\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    private static void Throw() =\u003e throw new Exception();\r\n\r\n    [DllImport(\"Library\", CallingConvention = CallingConvention.Cdecl)]\r\n    static extern void Bar(delegate* unmanaged[Cdecl]\u003cint\u003e ptr);\r\n}\r\n```",
                                           "updatedAt":  "2024-02-05T15:03:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y3ua-",
                                           "createdAt":  "2024-02-05T15:05:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e void HandleError(string message, IntPtr data)\r\n\r\nWhere would `string message` and `IntPtr data` come from?",
                                           "updatedAt":  "2024-02-05T15:05:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y32tK",
                                           "createdAt":  "2024-02-05T15:21:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ceztko",
                                           "body":  "\u003e Where would `string message` and `IntPtr data` come from?\r\n\r\nSorry, forget about that `IntPtr data` (I\u0027ve removed it in the sample above). Having an opaque data is just the classical C style approach to store some context in case of callbacks, but it\u0027s really unnecessary here so it was a bit of cargo cult. As per `string message`, that\u0027s obviously the error message that is passed when the `ErrorHandlerCallback` callback is called in the native part, hence the need to have the managed callback (or the Native AOT compiled one, as in the other similar [issue](https://github.com/dotnet/runtime/issues/97952)) to be able to throw or set/\"install\" an exception in the correct runtime.",
                                           "updatedAt":  "2024-02-05T15:21:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y35QB",
                                           "createdAt":  "2024-02-05T15:26:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e when the ErrorHandlerCallback callback is called in the native part,\r\n\r\nHow would the runtime create this native part?",
                                           "updatedAt":  "2024-02-05T15:26:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y39X_",
                                           "createdAt":  "2024-02-05T15:34:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ceztko",
                                           "body":  "\u003e \u003e when the ErrorHandlerCallback callback is called in the native part,\r\n\u003e \r\n\u003e How would the runtime create this native part?\r\n\r\n@jkotas I\u0027m confused by your question, in the sense the use case I was describing is really the classical .NET managed wrapper on an existing native library, hence native part is 3rd party or user made. Just look at the proposed API in the [sample](https://github.com/dotnet/runtime/issues/35017#issuecomment-1926504137) above with this in mind.",
                                           "updatedAt":  "2024-02-05T15:34:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y4CDV",
                                           "createdAt":  "2024-02-05T15:43:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ceztko",
                                           "body":  "\u003e You could make such wrapping yourself easily, there\u0027s no need to involve the runtime. [...] An example of manual implementation\r\n\r\n@MichalPetryka You are absolutely correct but that still needs a bit of boilerplate, which is the calling of `RethrowNative()` after all P/Invoke calls, and doing it becomes a bit more frustrating with native functions that return values. Having a support for such mechanism in the runtime, to be enabled in the `DllImport`/`LibraryImport` attribute, would look a bit more clean and less hacky to me but I guess it\u0027s also a matter of personal taste.",
                                           "updatedAt":  "2024-02-05T17:44:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y47qp",
                                           "createdAt":  "2024-02-05T17:26:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODViqsw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ceztko",
                                                                               "createdAt":  "2024-02-05T17:29:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e \u003e How would the runtime create this native part?\r\n\r\n\u003e @jkotas I\u0027m confused by your question, \r\n\r\nAh sorry, I looked at your example again. It makes sense now.\r\n\r\n\u003e DllImport/LibraryImport attribute\r\n\r\nIf we were to do something here, I expect that it would be via LibraryImport source generator.",
                                           "updatedAt":  "2024-02-05T17:26:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y5R2H",
                                           "createdAt":  "2024-02-05T17:53:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ceztko",
                                           "body":  "\u003e If we were to do something here, I expect that it would be via LibraryImport source generator.\r\n\r\nIt would be totally fine if interop improvements go first (or exclusively) to `LibraryImport`. How do you see the idea of a (thread local stored) exception to be thrown automatically at the return from P/Invoke calls with some level of support from the runtime?",
                                           "updatedAt":  "2024-02-05T17:55:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y5c9T",
                                           "createdAt":  "2024-02-05T18:07:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e How do you see the idea of a (thread local stored) exception to be thrown automatically at the return from P/Invoke calls with some level of support from the runtime?\r\n\r\nAs in define the thread local in the runtime and expose getter/setter for it? It has miniscule benefit. I think the thread local can be generated by the LibraryImport source generator just fine.",
                                           "updatedAt":  "2024-02-05T18:07:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y5hmH",
                                           "createdAt":  "2024-02-05T18:13:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ceztko",
                                           "body":  "\u003e As in define the thread local in the runtime and expose getter/setter for it? It has miniscule benefit. I think the thread local can be generated by the LibraryImport source generator just fine.\r\n\r\nOk, but how do you \"store\" the exception to that thread local if there is no getter/setter?",
                                           "updatedAt":  "2024-02-05T18:13:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y5mS7",
                                           "createdAt":  "2024-02-05T18:20:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Ok, but how do you \"store\" the exception to that thread local if there is no getter/setter?\r\n\r\nThe source generated code would store into and load from the thread local variable that is generated by the source generator and that is internal to your assembly, similar to how https://github.com/dotnet/runtime/issues/35017#issuecomment-1927205228 does it.",
                                           "updatedAt":  "2024-02-05T18:20:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y5nS7",
                                           "createdAt":  "2024-02-05T18:22:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e The source generated code\r\n\r\nI don\u0027t think the generator generates anything for `UnmanagedCallersOnly`/`UnmanagedFunctionPointer` that could store it in the callback?",
                                           "updatedAt":  "2024-02-05T18:22:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y5zYk",
                                           "createdAt":  "2024-02-05T18:33:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I don\u0027t think the generator generates anything for UnmanagedCallersOnly/UnmanagedFunctionPointer that could store it in the callback?\r\n\r\nThe reverse PInvoke support in interop marshaling source generator is tracked by #63590. (The examples mentioned here so far were for PInvoke.)\r\n\r\n",
                                           "updatedAt":  "2024-02-05T18:33:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y57c_",
                                           "createdAt":  "2024-02-05T18:43:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ceztko",
                                           "body":  "\u003e The source generated code would store into and load from the thread local variable that is generated by the source generator and that is internal to your assembly, similar to how [#35017 (comment)](https://github.com/dotnet/runtime/issues/35017#issuecomment-1927205228) does it.\r\n\r\n@jkotas But that example you linked still does some (little) boilerplate to be called after all P/Invoke calls. If you add some runtime support doing exception checking/throwing through the `LibraryImport` generator, will I then be able to safely throw from `[UnmanagedFunctionPointer]` delegates? Just to understand what you have in mind.",
                                           "updatedAt":  "2024-02-05T18:44:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y6MY6",
                                           "createdAt":  "2024-02-05T19:11:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e will I then be able to safely throw from [UnmanagedFunctionPointer] delegates?\r\n\r\nNo, you would not be. The unmanaged side still needs to have the boiler plate code. There is no good way for the runtime to generate the unmanaged side of the boilerplate in a portable way (https://github.com/dotnet/runtime/issues/97952#issuecomment-1926537178).\r\n\r\n\r\n",
                                           "updatedAt":  "2024-02-05T19:11:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y6v7T",
                                           "createdAt":  "2024-02-05T20:02:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ceztko",
                                           "body":  "\u003e  The unmanaged side still needs to have the boiler plate code. \r\n\r\nAh, the unmanaged part may still need some boiler plate, of course. I now understand that you often tried to grasp something about the unmanaged part, but no, I was always just referring to the boiler plate in the managed part.\r\n\r\nAgain the question is: assuming I will have the right boiler plate in the **unmanaged** part, with this support in the `LibraryImport` generator (and/or runtime) will I be able to have no boiler code in the boiler plate and throw from `[UnmanagedFunctionPointer]` delegates in the **managed** part?\r\n\r\nFor example one may imagine that I have function like this:\r\n\r\n```csharp\r\nstatic void HandleError(string message)\r\n{\r\n    throw new Excpetion(message);\r\n}\r\n```\r\n\r\nThen I assign it to a delegate that gets passed to unamanged part:\r\n\r\n```csharp\r\n[UnmanagedFunctionPointer(CallingConvention.Cdecl)]\r\n    delegate void ErrorHandlerCallback([MarshalAs(UnmanagedType.LPUTF8Str)]string message);\r\n```\r\n\r\nThen the runtime/compiler in the trampoline it does something like:\r\n\r\n```csharp\r\nstatic void trampoline_HandleError(string message)\r\n{\r\n    try\r\n    {\r\n        HandleError(message);\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        // ... Store the exception in a thread local variable, or in the stack somewhere \r\n    }\r\n}\r\n```\r\n\r\nThen I may have a `LibraryImport` attribute with a `CheckExceptionOnExit`  (tentative) that will do the boilerplate of checking if a managed exception is stored and throw it just in case.\r\n\r\n```csharp\r\n[LibraryImport(\"SharedLibrary\", CheckExceptionOnExit = true)]\r\n[UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]\r\nstatic partial void Foo();\r\n```\r\n\r\nSo I can call this `Foo()` method and have a managed exception correctly thrown when necessary. Will the system you suggest work like this? Sorry but I understand it only through actual (pseudo)code.",
                                           "updatedAt":  "2024-02-05T20:02:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y9KWr",
                                           "createdAt":  "2024-02-06T01:48:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Then the runtime/compiler in the trampoline it does something like:\r\n\u003e\r\n\u003e static void trampoline_HandleError(string message)\r\n\r\nThis assumes that https://github.com/dotnet/runtime/issues/63590 is implemented. I would expect that there would be some gesture to trigger this behavior. It would not happen by default.\r\n\r\n\u003e ```\r\n\u003e [LibraryImport(\"SharedLibrary\", CheckExceptionOnExit = true)]\r\n\u003e [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]\r\n\u003e static partial void Foo();\r\n\u003e ```\r\n\r\nI would expect this to be more general. All you need is that the marshalling source generator calls your method right after the raw PInvoke. There are other patterns you may want to do - call a method right before the raw invoke, keep some state between before and after the PInvoke. It looks very similar to what the argument marshallers do, so we may want to reuse the marshaller concepts here. The new attribute would then point to the name of the marshaller, something like `[LibraryImport(\"SharedLibrary\", MarshalUsing=typeof(MyExceptionMarshaller)]`.",
                                           "updatedAt":  "2024-02-06T01:48:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5y-3kB",
                                           "createdAt":  "2024-02-06T09:15:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ceztko",
                                           "body":  "\u003e I would expect this to be more general. All you need is that the marshalling source generator calls your method right after the raw PInvoke. [...] It looks very similar to what the argument marshallers do, so we may want to reuse the marshaller concepts here. The new attribute would then point to the name of the marshaller\r\n\r\nAh, finally I got it! I didn\u0027t understand you had user made custom marshalling in mind. Then the `[UnmanagedFunctionPointer]` delegate could just set the exception in the storage of such user defined `MyExceptionMarshaller`. Looks great with the only possible concern on my side that in this way different libraries may all \"waste\" thread local storage, that\u0027s why I was suggesting the idea of globally defined one. Or you may consider of being able to store the exception in the stack, but then the `LibraryImport` directive should probably be very aware of the pattern (hence loosing generality).\r\n\r\nThank you for the replies and clarifications. I hope this feedback is seen as useful/productive, and I hope to see something materialize with this regard for .NET 9/10.",
                                           "updatedAt":  "2024-02-06T09:15:24Z"
                                       }
                                   ],
                         "totalCount":  22
                     },
        "title":  "Unmanaged Exception Interop on Unix",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/35079",
        "createdAt":  "2020-04-16T23:01:12Z",
        "number":  35079,
        "author":  "AaronRobinsonMSFT",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOB19m8w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkoritzinsky",
                                            "createdAt":  "2020-04-17T01:17:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LakshanF",
                                            "createdAt":  "2021-08-11T16:47:16Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2021-08-11T16:49:51Z",
        "body":  "See https://github.com/dotnet/runtime/issues/35045#issuecomment-614726363 for context.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONXbuBA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNTAwNDYxNw==",
                                           "createdAt":  "2020-04-17T02:33:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The tests failures tracked by https://github.com/dotnet/runtime/issues/34748 and https://github.com/dotnet/runtime/issues/34749 should be disabled against this.",
                                           "updatedAt":  "2020-04-17T02:33:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41du4E",
                                           "createdAt":  "2021-08-11T16:49:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LakshanF",
                                           "body":  "Having this capability will help with #54523 and also allow testing much easier once #56222 is done",
                                           "updatedAt":  "2021-08-11T16:49:51Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add test project property to indicate test requires COM support",
        "labels":  [
                       "help wanted",
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/37039",
        "createdAt":  "2020-05-27T02:58:52Z",
        "number":  37039,
        "author":  "elinor-fung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_Yppg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AaronRobinsonMSFT",
                                            "createdAt":  "2020-05-27T03:06:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RussKie",
                                            "createdAt":  "2020-06-02T14:21:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nxrighthere",
                                            "createdAt":  "2020-06-20T22:47:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jozefizso",
                                            "createdAt":  "2020-08-03T09:25:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "raulsntos",
                                            "createdAt":  "2025-02-24T02:13:31Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2024-02-03T21:33:03Z",
        "body":  "This tracking issue for a small backlog of rules around interop to add to the officially recommended set of analyzers. The rules are grouped around runtime functionality/features, but would represent separate analyzers in implementation. Since many issues concerning interop are rooted in a discrepancy between the user\u0027s intent and implementation, it is expected that only a small number of rules would be useful and applicable to all users. Official documentation will remain the main source of guidance for more nuanced behaviour that requires clear understanding of intent.\r\n\r\nThe upcoming plan to provide source generators for p/invokes should not directly affect the rules here, as that functionality would be using a different attribute for declaring p/invokes. However, there is the opportunity to provide an analyzer to help users migrate to the source generator approach. Once a source generator exists, the rules here could also be updated to consider p/invokes which use that generator or, depending on their severity, warnings within the generator itself.\r\n\r\nThe intent is that as the runtime interop team works through a backlog of analyzers around existing features and functionality, the concept of considering and adding analyzers for any new features will become natural and simply be part of that feature work. The [P/Invokes](#p/invokes) and [Marshalling](#marshalling) rules are expected to be the starting points for working through this backlog.\r\n\r\n## P/Invokes\r\n\r\nThese rules inspect the actual declaration and invocation of p/invokes.\r\n\r\n- [x] Do not use `[Out]` string for P/Invokes: #35692\r\n- [x] Avoid `StringBuilder` parameters for P/Invokes: #35693\r\n- [x] Prefer `ExactSpelling=true` in `[DllImport]` for known APIs: #35695\r\n- [x] Remove redundant configuration from `[DllImport]` declaration #33808\r\n- [ ] CA1404 port: dotnet/roslyn-analyzers#420\r\n- [ ] Prefer `SafeHandle` over `IntPtr` for known APIs: #42404\r\n- [ ] Get the last error after calls to P/Invokes with `SetLastError=true`\r\n  - Category: Interoperability\r\n  - Default: Enabled\r\n  - After calling a p/invoke that sets the last error, `Marshal.GetLastWin32Error` should be called to retrieve the last error.\r\n    ```C#\r\n    [DllImport(\"MyLibrary\", SetLastError = true)]\r\n    private static extern void Foo();\r\n\r\n    public static void Bar()\r\n    {\r\n        Foo(); // Flag last error not retrieved\r\n    }\r\n\r\n    public static void Baz()\r\n    {\r\n        Foo(); // OK\r\n        if (Marshal.GetLastWin32Error() == 0) { ... }\r\n    }\r\n    ```\r\n- [ ] Specify `SetLastError=true` in `[DllImport]` for known APIs\r\n  - Category: Interoperability\r\n  - Default: Enabled\r\n  - For APIs that are known to set last error, `SetLastError=true` should be specified. This would require having/building a database of APIs to compare against.\r\n    ```C#\r\n    // Flag SetLastError=false for known API\r\n    [DllImport(\"kernel32\")]\r\n    public static extern bool CloseHandle(IntPtr hObject);\r\n\r\n    // OK - known API does not set last error\r\n    [DllImport(\"kernel32\")]\r\n    public static extern int GetCurrentProcessId();\r\n    ```\r\n  - Recommend:\r\n    ```C#\r\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\r\n    public static extern bool CloseHandle(IntPtr hObject);\r\n    ```\r\n  - If the user does not intend to check the error, this can be skipped, but the general guidance is to both define the p/invoke to set last error (for APIs that do so) and check the error.\r\n\r\n## Marshalling\r\n\r\nThese rules inspect how data is marshalled. They would apply to the parameters on p/invokes and any types (e.g. marshalled structs, delegates) used by p/invokes.\r\n\r\n- [ ] Specify `SizeConst` when marshalling as ByValArray: #36134\r\n- [ ] CA1414 port: dotnet/roslyn-analyzers#430\r\n- [ ] Avoid `Delegate` or `MulticastDelegate` fields in marshalled structs\r\n  - Category: Interoperability\r\n  - Default: Enabled\r\n  - `Delegate` and `MulticastDelegate` do not have a required signature, so they do not guarantee that the delegate passed in will match the signature the native code expects. Marshalling a struct containing a `Delegate` or `MulticastDelegate` from its native representation to a managed object can destabilize the runtime if the value of the field in the native representation is not a function pointer that wraps a managed delegate. Use a specific delegate type instead of `Delegate` or `MulticastDelegate`.\r\n    ```C#\r\n    [DllImport(\"MyLibrary\")]\r\n    private static extern void Foo(MyStruct s);\r\n\r\n    struct MyStruct\r\n    {\r\n        Delegate Bar; // Flag Delegate in marshalled struct\r\n    }\r\n    ```\r\n- [ ] Rules for implementing [`ICustomMarshaler`](https://docs.microsoft.com/dotnet/api/system.runtime.interopservices.icustommarshaler)\r\n  - [ ] `GetInstance()` requirement - https://github.com/dotnet/runtime/issues/46521\r\n\r\n## COM\r\n\r\nThese rules inspect COM-related functionality. Many of the [existing rules](#existing-rules) that have not yet been ported are around COM.\r\n\r\n- [ ] Types should not be both `[ComImport]` and `[ComVisible(true)]`\r\n  - Types should not be marked as both imported from COM and made visible to COM.\r\n- [ ] COM-visible types should be accessible and creatable\r\n  - Types marked `ComVisible(true)` should be public, non-abstract, and have a public parameterless constructor.\r\n  - https://github.com/dotnet/roslyn-analyzers/issues/425\r\n    - [CA1409](https://docs.microsoft.com/visualstudio/code-quality/ca1409) looks to have the same intent, but only specifically flagged the public parameterless constructor\r\n- [ ] Partial interface definitions with `ComImport` \u0026ndash; https://github.com/dotnet/runtime/issues/59013.\r\n\r\n## Low-level interop APIs\r\n\r\nThese rules are related to APIs that provide low-level interaction/integration with the runtime\u0027s interop system.\r\n\r\n- [x] Interfaces marked with `DynamicInterfaceCastableImplementationAttribute` should provide a default implementation of all inherited interface methods: #41529\r\n\r\n## Cross-platform\r\n\r\nThere is an [existing proposal](https://github.com/dotnet/designs/pull/110/files) for an analyzer that detects the use of platform-specific APIs where the API might not be available. Many interop-related APIs are platform-specific and would be given the appropriate attribute such that the proposed analyzer would flag their use.\r\n\r\nThe logic that will be used by the proposed analyzer for platform-specific APIs could be leveraged for platform-specifc interop behaviour that is not tied to a specifid API. There are some types or `MarshalAs` values for which marshalling is not supported on all platforms. In these cases, it is not a known API that is platform-specific, but a user-defined p/invoke that is platform-specific due to the way it is defined. An analyzer would detect those p/invokes and treat those as platform-specific calls, following the same logic as that for the platform-specific APIs for determining the platform context and checking for platform guards around the call site.\r\n\r\nRules:\r\n- Marshalling of `\u003cType\u003e` requires `\u003cOS\u003e`\r\n- Marshalling as `\u003cUnmanagedType.*\u003e` requires `\u003cOS\u003e`\r\n\r\n## Existing rules\r\n\r\nThere are a number of [rules](https://docs.microsoft.com/visualstudio/code-quality/interoperability-warnings) around interop and marshalling that go through legacy (static) analysis. They have all previously been deprecated or slated to be ported as time allows. See [FxCop rule port status](https://docs.microsoft.com/visualstudio/code-quality/fxcop-rule-port-status) for a list of all ported, tracked, and deprecated rules.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONs9orQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNDM5Nzg4OQ==",
                                           "createdAt":  "2020-05-27T02:59:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "@AaronRobinsonMSFT @jkoritzinsky ",
                                           "updatedAt":  "2020-05-27T02:59:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNTA1NDk1NQ==",
                                           "createdAt":  "2020-05-28T02:23:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rseanhall",
                                           "body":  "In most Win32 APIs, it is wrong to use `Marshal.GetLastWin32Error` to check if the API failed because [most functions that set the thread\u0027s last-error code [only] set it when they fail](https://docs.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror).",
                                           "updatedAt":  "2020-05-28T02:23:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNTA3ODM5OA==",
                                           "createdAt":  "2020-05-28T03:41:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "That is definitely the case for the Win32 APIs themselves. However, when going through a p/invoke in .NET Core with `SetLastError=true`, the runtime will explicitly clear the last error before calling the target function: https://github.com/dotnet/runtime/blob/master/src/coreclr/src/vm/dllimport.cpp#L862-L868",
                                           "updatedAt":  "2020-05-28T03:41:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNTA5ODA0Mg==",
                                           "createdAt":  "2020-05-28T04:48:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rseanhall",
                                           "body":  "Interesting, I didn\u0027t know that. It doesn\u0027t really solve the problem though. [`CreateFile`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilew) is a typical Win32 API. In its documentation, it states how to tell when there\u0027s a failure (the returned value is `INVALID_HANDLE_VALUE`). Then it says if it failed, call `GetLastError` for more information. Nowhere does it say that `GetLastError` will return 0 on success. So theoretically, `CreateFile` could internally call another API which sets the last error to non-zero, and still complete successfully without ever putting it back to zero while still adhering to the documented contract.\r\n\r\nThis code relies on undocumented behavior:\r\n```\r\nvar hFile = CreateFile(...);\r\nif (Marshal.GetLastWin32Error() == 0)\r\n{\r\n  //succeeded\r\n}\r\nelse\r\n{\r\n  //failed\r\n}\r\n```\r\nThis code doesn\u0027t directly check the last error but is perfectly valid ([`Win32Exception`](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.win32exception?view=netcore-3.1) calls `Marshal.GetLastWin32Error` internally):\r\n```\r\nvar hFile = CreateFile(...);\r\nif (hFile == INVALID_HANDLE_VALUE)\r\n{\r\n  throw new Win32Exception();\r\n}\r\n```",
                                           "updatedAt":  "2020-05-28T04:48:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNTEyNjc3Ng==",
                                           "createdAt":  "2020-05-28T06:09:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBFmyrw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rseanhall",
                                                                               "createdAt":  "2020-05-28T07:06:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "The spirit of the rule is that there is a path after the p/invoke where the last error is retrieved without another call in between. As your example points out, only expecting `Marshal.GetLastWin32Error` is not sufficient, but I believe that still fits within the intent of the rule (i.e. the rule should consider `Win32Exception` and not flag something like that).",
                                           "updatedAt":  "2020-05-28T06:09:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MzQ2NDM5Mg==",
                                           "createdAt":  "2020-08-30T20:06:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Mrnikbobjeff",
                                           "body":  "One issue which seems to have fallen through the tracks seems to be #33808 which is not referenced in the todo list if I read this correctly",
                                           "updatedAt":  "2020-08-30T20:06:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4Mzg3Njg5NQ==",
                                           "createdAt":  "2020-08-31T16:10:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "Thanks @Mrnikbobjeff - updated the list.",
                                           "updatedAt":  "2020-08-31T16:10:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NjYxNTQyMQ==",
                                           "createdAt":  "2020-09-03T16:41:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Mrnikbobjeff",
                                           "body":  "Are these rules already approved when they are in the list? Would a PR be accepted for them or do they individually require approval?",
                                           "updatedAt":  "2020-09-03T16:41:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NjYyNjY3Ng==",
                                           "createdAt":  "2020-09-03T17:01:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@Mrnikbobjeff Great question. This issue is for tracking interop analyzers as an initiative and doesn\u0027t represent specific approval for any of them. Each analyzer requires a separate API review via a new issue. Some however have had API reviews and been approved - see #35695 for \"Prefer `ExactSpelling=true` in `[DllImport]` for known APIs\". When the API review is completed and marked with the `api-approved` tag the analyzer can be implemented by anyone. See previously completed analyzer issues above and refer to the associated PR for the repo and process.\r\n\r\nIf so incline, anyone in the community can submit a PR for the existing approved but not completed analyzer above (#35695) and/or submit new issues marked with `api-suggestion` and begin the review process. If submitting a new PR, please let us know here and tag one of us (@elinor-fung, @jkoritzinsky, or myself) on the issue so we can update this issue and help the process along.",
                                           "updatedAt":  "2020-09-03T17:01:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjE2NTA4NA==",
                                           "createdAt":  "2020-09-14T16:21:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Mrnikbobjeff",
                                           "body":  "For the GetLastError heuristic some things are not clear to me. How would one arrive at a list of methods calling setlasterror. I thought about how other languages might approach this, as I had already written a Java bytecode analyzer which finds method calls inside of a function. Build the list up transitively and one would know which methods call SetLastError. As this is not viable in ASM and SetLastError is documented on a per function basis I have no idea on creating the desired list. Are there any approaches already considered?",
                                           "updatedAt":  "2020-09-14T16:21:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjIwMTI4Mw==",
                                           "createdAt":  "2020-09-14T17:28:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@Mrnikbobjeff Unfortunately there isn\u0027t. Any Win32 API could call another Win32 API that call `SetLastError()` - this means even if a function doesn\u0027t call it directly it can be called. One could argue that any Win32 API that returns a non-error code (i.e. `BOOL` or handle type) is implicitly going to call `SetLastError()` in order to provide more detailed information.\r\n\r\nThe TL;DR of the hand-wavy statements above is the only way to \"know\" is to follow the official documentation or guess based on the function signature.",
                                           "updatedAt":  "2020-09-14T17:28:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42zr5T",
                                           "createdAt":  "2021-09-14T21:16:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "@elinor-fung Looks like this other approved proposal belongs to this list:\r\nhttps://github.com/dotnet/runtime/issues/51193",
                                           "updatedAt":  "2021-09-14T21:16:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42z2it",
                                           "createdAt":  "2021-09-14T22:41:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "@carlossanlop This issue is listing out a backlog of interop-related analyzers. That one looks to be more general performance. I don\u0027t believe we do a tracking list for general runtime/performance analyzers.",
                                           "updatedAt":  "2021-09-14T22:41:55Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Roslyn Code analyzers for interop",
        "labels":  [
                       "area-Interop-coreclr",
                       "User Story",
                       "Bottom Up Work"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/42550",
        "createdAt":  "2020-09-21T18:55:35Z",
        "number":  42550,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBfH39A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AaronRobinsonMSFT",
                                            "createdAt":  "2020-09-21T19:04:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "geoffkizer",
                                            "createdAt":  "2020-09-21T19:29:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2020-09-22T05:10:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrnikbobjeff",
                                            "createdAt":  "2020-09-25T08:17:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2021-02-06T10:38:58Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2021-04-14T16:18:03Z",
        "body":  "Today, the SafeHandle marshaler prohibits null SafeHandle instances:\r\nhttps://github.com/dotnet/runtime/blob/e489111db3cb25a7ff9640c2e3a6e9561f56cc07/src/coreclr/src/System.Private.CoreLib/src/System/StubHelpers.cs#L1251-L1256\r\nbut there are native methods that let you pass a null pointer to mean \"I don\u0027t have one\".  To call such methods, you then either need to use an IntPtr directly or have multiple P/Invoke definitions (one for when you have a non-null SafeHandle and one for when you have null) or create a throw-away safe handle instance that contains IntPtr.Zero.  It\u0027s not clear to me why the marshaler prohibits null; it could just marshal it as null / zero.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLl0SoA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5NjMwNzkwOA==",
                                           "createdAt":  "2020-09-21T18:59:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "@AaronRobinsonMSFT ",
                                           "updatedAt":  "2020-09-21T18:59:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5NjMxMDY1Mw==",
                                           "createdAt":  "2020-09-21T19:04:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "We should talk about this for .NET 6. The built-in `SafeHandle` marshaller is a bit aggressive here but at a minimum the new source generation experiment needs to handle this with minimal fanfare.\r\n\r\n/cc @elinor-fung @jkoritzinsky ",
                                           "updatedAt":  "2020-09-21T19:04:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3Nzg1MTU1Mg==",
                                           "createdAt":  "2021-02-11T23:03:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "Reopening due to https://github.com/dotnet/runtime/pull/48193",
                                           "updatedAt":  "2021-02-11T23:03:58Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "SafeHandle marshaler should allow null handles",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45750",
        "createdAt":  "2020-12-08T09:17:33Z",
        "number":  45750,
        "author":  "smourier",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_rRhw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gusmally",
                                            "createdAt":  "2023-03-30T23:02:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexhost",
                                            "createdAt":  "2023-05-11T16:03:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matherm-aboehm",
                                            "createdAt":  "2024-03-14T15:56:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "batzen",
                                            "createdAt":  "2025-03-04T09:15:56Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2023-04-12T18:05:30Z",
        "body":  "As far as I know, currently, to register a COM object written in .NET 5 (or .NET Core 3.x for that matter) we need to\r\n\r\n_\"Open an elevated command prompt and run regsvr32 ProjectName.comhost.dll. That will register all of your exposed .NET objects with COM.\"_ from here\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/core/native-interop/expose-components-to-com#register-the-com-host-for-com\r\n\r\nI think the relevant source is here: https://github.com/dotnet/runtime/blob/master/src/installer/corehost/cli/comhost/comhost.cpp#L309 it seems pretty much hardcoded for HKEY_LOCAL_MACHINE.\r\n\r\nAs you know, registering COM component in HKCU (HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID for the CLSID, etc.) is pretty common and supported by \"COM\" in general (CoCreateInstance, etc.). It\u0027s also supported by tooling such as Visual Studio\u0027s ATL and Windows\u0027 regsvr32.exe with the help of _DllInstall_ (optional) DLL export:\r\n\r\nhttps://docs.microsoft.com/en-us/windows/win32/api/shlwapi/nf-shlwapi-dllinstall\r\n\r\nIt has the enormous advantage of avoiding elevated rights for setup, installers, etc.\r\n\r\nCan support for this be added to comhost?\r\n\r\nIn the meantime, is there any way to do this with current .NET 5? Should I write a custom comhost? How?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWb9VJg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDUwNjE2NA==",
                                           "createdAt":  "2020-12-08T09:40:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "I\u0027m aware that registering com servers in the user hive functions but is it a supported configuration? You cite using DllInstall but that simply allows you to integrate custom registration logic it doesn\u0027t provide you a supported way to register user rather than local machine level servers. \r\n\r\nAs far as I\u0027m aware registration free com using manifests is the suggested way of dealing with registration elevation permissions requirement issues.",
                                           "updatedAt":  "2020-12-08T09:40:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDUxMjQ2OA==",
                                           "createdAt":  "2020-12-08T09:50:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smourier",
                                           "body":  "Supported by who? what? As I said, yes, it\u0027s supported by CoCreateInstance, and COM/Windows in general, including all Shell API (Explorer, Common Dialogs, etc.).\r\n\r\nI know DllInstall in itself doesn\u0027t allow anything special, I\u0027m not specifically attached to that, but try Visual Studio ATL\u0027s and you\u0027ll see that\u0027s how it supports HKCU registration in the wizard-generated code:\r\n\r\n\t// DllInstall - Adds/Removes entries to the system registry per user per machine.\r\n\tSTDAPI DllInstall(BOOL bInstall, _In_opt_  LPCWSTR pszCmdLine)\r\n\t{\r\n\t\tHRESULT hr = E_FAIL;\r\n\t\tstatic const wchar_t szUserSwitch[] = L\"user\";\r\n\r\n\t\tif (pszCmdLine != nullptr)\r\n\t\t{\r\n\t\t\tif (_wcsnicmp(pszCmdLine, szUserSwitch, _countof(szUserSwitch)) == 0)\r\n\t\t\t{\r\n\t\t\t\tATL::AtlSetPerUserRegistration(true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (bInstall)\r\n\t\t{\r\n\t\t\thr = DllRegisterServer();\r\n\t\t\tif (FAILED(hr))\r\n\t\t\t{\r\n\t\t\t\tDllUnregisterServer();\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\thr = DllUnregisterServer();\r\n\t\t}\r\n\r\n\t\treturn hr;\r\n\t}\r\n\r\nregistration-free means you must distribute the components with the clients. This answers different scenarios.\r\n",
                                           "updatedAt":  "2020-12-08T09:50:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NDExNjU5NQ==",
                                           "createdAt":  "2020-12-14T01:45:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBZ2f7w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "smourier",
                                                                               "createdAt":  "2020-12-14T07:52:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Wraith2",
                                                                               "createdAt":  "2020-12-14T09:36:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "govert",
                                                                               "createdAt":  "2020-12-14T09:40:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003eI\u0027m aware that registering com servers in the user hive functions but is it a supported configuration?\r\n\r\nAt present, it is not supported in .NET Core 3.0+ or .NET 5. COM registration is only supported for the HKLM hive. This was chosen for security reasons. In .NET Framework the behavior had issues that were not appropriate and relied upon legacy registry behavior from the Windows 95/98 days. We are now explicit about this and force HKLM.\r\n\r\n\u003eAs far as I\u0027m aware registration free com using manifests is the suggested way of dealing with registration elevation permissions requirement issues.\r\n\r\nYes. That would be our suggested workaround.\r\n\r\n\u003eregistration-free means you must distribute the components with the clients. This answers different scenarios.\r\n\u003eCan support for this be added to comhost?\r\n\r\n@smourier Your concerns with RegFree COM are valid and I empathize with the issue. I don\u0027t personally think we should be continuing some of the questionable COM practices of yore, but do recognize there are applications that have been built up around this option. We can absolutely add support for it, as you discovered it is hardcoded and wouldn\u0027t be technically difficult to add a flag or some metadata that indicates where one would like the registration to go. When it was implemented the \"most common\" scenario was selected - not a lot more thought put into it.\r\n\r\nFeel free to propose a mechanism in this issue\u0027s description or we can prioritize it as is with other interop feature requests. I would imagine a new attribute would suffice or perhaps extend [`ComRegisterFunctionAttribute`](https://docs.microsoft.com/dotnet/api/system.runtime.interopservices.comregisterfunctionattribute)? Both of these would have to go through the [official .NET API review](https://github.com/dotnet/runtime/blob/master/docs/project/api-review-process.md) - I am more than willing to help shepherd them. Non-API impacting suggestions are possible as well (i.e. environment variable during registration or [modify `.clsidmap` generation](https://github.com/dotnet/runtime/blob/e0e1919aef7176fb7cabd8a85cad26d80e62728f/src/installer/managed/Microsoft.NET.HostModel/ComHost/ClsidMap.cs#L31-L70), we would likely need an API for the later). I haven\u0027t given any of these options much though so feedback/initiative from you or the community as to direction would be appreciative to start the process.",
                                           "updatedAt":  "2020-12-14T17:12:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NDI0ODYzMA==",
                                           "createdAt":  "2020-12-14T07:52:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smourier",
                                           "body":  "Thanks for your answer.\r\n\r\nIf such a feature is added, it\u0027s very important to decide where registration happens at deployment time vs compilation time. This is what the ATL-generated code does.\r\n\r\nSo, my initial idea was really not to change any .NET API but instead add support in comhost for a DllInstall parameter that would instruct the registration to happen in HKCU instead of HKLM. So, COM-support related code stays in COM-support related binaries, impact on .NET is minimal.\r\n\r\nSince .NET 5 requires each COM coclass guid to be specified, I could even imagine a DllInstall command that could be able to support one component in HKCU, another in HKLM, but maybe that\u0027s too complicated. By default, all components would be in HKCU or all in HKLM.\r\n\r\nregsvr32 (which supports DllInstall) is very well known and in fact already referenced in the .NET Core doc here: https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.comregisterfunctionattribute?view=net-5.0) but that would support custom installers calling DllInstall too.\r\n",
                                           "updatedAt":  "2020-12-14T07:52:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NDMxMjA4Ng==",
                                           "createdAt":  "2020-12-14T09:36:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "Adding the ability to perform user registrations would also have an effect on tools that generate or gather registration information. For example when I last used WiX to generate installers the official advice was not to try and invoke DllInstall dynamically at install time but to do a gather step and embed the resulting registry alterations. Properly written this won\u0027t change if registration if in hkcu instead of hklm but I expect there to be improperly written apps out there that only redirect hklm because that\u0027s all that was supported. This is why I asked whether it was a supported scenario, while I know per-user registration works if it isn\u0027t supported it can put consumers in a situation where they are doing something that could cause a support ticket to be rejected.\r\n\r\nFor clarity, I like the idea and I think extending `ComRegisterFunctionAttribute` with a per-user flag would be a nice way to do it, but I also think there will be ecosystem knock-on effects.",
                                           "updatedAt":  "2020-12-14T09:40:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NDMxODU3Mw==",
                                           "createdAt":  "2020-12-14T09:47:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "govert",
                                           "body":  "@AaronRobinsonMSFT You say:\r\n\u003e In .NET Framework the behavior had issues that were not appropriate and relied upon legacy registry behavior from the Windows 95/98 days. \r\n\r\nDo you have some more information or a reference about these issue?\r\n\r\nThe registry behaviour under the Office Click-to-Run environment (I think it is related to App-V) has also been problematic in recent Office versions, with undocumented registry types and unexpected behaviour in different versions.\r\n\r\nIn general the component developer has little control over the environment into which this must be installed or run, so so some flexibility about the registration is very valuable - when it runs, registry vs. SxS activation contexts, and some HKCU plan if possible.\r\n",
                                           "updatedAt":  "2020-12-14T09:47:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NDU5NjEzNQ==",
                                           "createdAt":  "2020-12-14T17:35:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003eIn the meantime, is there any way to do this with current .NET 5? Should I write a custom comhost? How?\r\n\r\nMissed this query. It is entirely possible and one could use the [existing source](https://github.com/dotnet/runtime/tree/master/src/installer/corehost/cli/comhost) to start. One missing aspect from the source is the need to link against our public low level host API (i.e. `nethost.lib`). A sample exists for that [here](https://github.com/dotnet/samples/tree/master/core/hosting/HostWithHostFxr).\r\n\r\n\u003eregsvr32 (which supports DllInstall) is very well known and in fact already referenced in the .NET Core doc here: https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.comregisterfunctionattribute?view=net-5.0) but that would support custom installers calling DllInstall too.\r\n\r\n@smourier Yep. Support for COM in .NET Core 3+ and .NET 5 was designed to make the UX align with long standing COM tooling. This may be a difficult change in the short term but we are hoping it aligns better with long standing COM developers as opposed to .NET providing an alternative COM registration methodology. Your suggestion to use `DllInstall` aligns with that goal.\r\n\r\nI personally have no issue with enabling `DllInstall` support, but as @Wraith2 said the UX is going to require some thought.\r\n\r\n\u003eFor example when I last used WiX to generate installers the official advice was not to try and invoke DllInstall dynamically at install time but to do a gather step and embed the resulting registry alterations.\r\n\r\n@Wraith2 Yes that is indeed the correct advice. WiX and MSIs handle the reference counting logic for the installation whereas `regsvr32` doesn\u0027t. I agree with your general sentiment here and before we support this we would need to investigate some existing use patterns to ensure existing developers can still accomplish their goals.\r\n\r\n\u003eDo you have some more information or a reference about these issue?\r\n\r\n@govert Unfortunately those details aren\u0027t something I am permitted to discuss for various reasons. I can say we are now explicitly registering in the HKLM hive to ensure we know where the server is registered. This provides explicit behavior that aligns with work done in the OS during the Windows Vista time frame. I really can\u0027t comment further.",
                                           "updatedAt":  "2020-12-14T17:35:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NjE5MDIwMA==",
                                           "createdAt":  "2021-01-23T22:33:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lauxjpn",
                                           "body":  "The traditional way to write the COM related registry keys in the HKCU hive on demand is to use the [OaEnablePerUserTLibRegistration](https://docs.microsoft.com/en-us/windows/win32/api/oleauto/nf-oleauto-oaenableperusertlibregistration) and [RegOverridePredefKey](https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regoverridepredefkey) functions.\r\n\r\nOnce you have moved the registry context to HKCU, you would just load the `YourApp.comhost.dll` via `LoadLibrary` and call its `DllRegisterServer` or `DllUnregisterServer` entry point.\r\n\r\nAll HKCR related keys are then written to `HKCU\\Software\\Classes` instead of `HKLM\\Software\\Classes`.\r\n\r\n---\r\n\r\nWhile `regsvr32.exe` never had a user-level registration feature, there are tools out there that do this, in case you don\u0027t want to implement it yourself. One of those tools is [RegSvrEx](https://github.com/vadz/RegSvrEx), though it does not seem to call `OaEnablePerUserTLibRegistration` (might be worth a PR).\r\n\r\nI\u0027ve also got some .NET code I could publish (just in case anybody is interested at some point in the future), which does all that and that I have been using for years in scenarios, where Reg-Free-COM via manifests is not an option (e.g. when you want to load components into Office applications, but can\u0027t get elevated and of course can\u0027t just modify the manifest file of the Office app).\r\n\r\n---\r\n\r\n\u003e Feel free to propose a mechanism in this issue\u0027s description or we can prioritize it as is with other interop feature requests. I would imagine a new attribute would suffice or perhaps extend `ComRegisterFunctionAttribute`?\r\n\r\n@AaronRobinsonMSFT I would also suggest a new attribute (or attribute pair). I am also interested in that, because of .NET\u0027s current lack of TLB generation. So when I manually generate a TLB from an IDL file via MIDL.exe, I want to register the type library during the standard registration process. This is currently only possible by using the `ComRegisterFunctionAttribute`, which is conceptionally not the right place to do this (especially with multiple COM classes in one assembly).",
                                           "updatedAt":  "2021-01-24T00:23:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NjI2MTk3Mw==",
                                           "createdAt":  "2021-01-24T01:09:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003eThis is currently only possible by using the ComRegisterFunctionAttribute, which is conceptionally not the right place to do this (especially with multiple COM classes in one assembly).\r\n\r\n@lauxjpn I\u0027m not sure I follow this. The function marked with `ComRegisterFunctionAttribute` is immediately following registration so I am curious where you feel the right place for this? Would your suggestion be something akin to `TlbRegisterFunctionAttribute`?",
                                           "updatedAt":  "2021-01-24T01:09:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NjI4MjkwNQ==",
                                           "createdAt":  "2021-01-24T03:06:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lauxjpn",
                                           "body":  "\u003e Would your suggestion be something akin to TlbRegisterFunctionAttribute?\r\n\r\n@AaronRobinsonMSFT Something like that. It does not necessarily have to be tied to the TLB, but it should be called only once per `DllRegisterServer`/`DllUnregisterServer` call.\r\n\r\nMaybe an additional attribute can be introduced, that could then be placed on a class, marking it as a `[ComRegistrationClass]` or something similar. Then the `[ComRegisterFunction]` and `[ComUnregisterFunction]` attributes could be reused in this context on the classes methods. The class level attribute could be restricted to static classes. Enumerating the decorated classes in `ComActivator` should not be much of a performance concern, since registration is usually not done on a hot path (and usually even outside of the normal application runtime).\r\n\r\nA more modern approach would be to use something convention based, but this would break with the pattern to use attributes, that has been established for COM in .NET about 20 years ago, so its probably not a good idea.",
                                           "updatedAt":  "2021-01-24T03:07:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NjI5MzEwNA==",
                                           "createdAt":  "2021-01-24T05:14:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003ebut it should be called only once per DllRegisterServer/DllUnregisterServer call.\r\n\r\nSo I could be mistaken here, but a function with that attribute is only called once during the respective `DllRegisterServer`/`DllUnregisterServer` call. How would the above suggestion differ in this case?\r\n\r\n\u003eThe class level attribute could be restricted to static classes. Enumerating the decorated classes in ComActivator should not be much of a performance concern, since registration is usually not done on a hot path (and usually even outside of the normal application runtime).\r\n\r\nThis would be creating a lot of new policy for a system that we don\u0027t believe will continue to evolve much. Is there a perception that this approach is something that will grow in popularity which would make investment important or slowly decrease as time progresses? Office - which has historically been the most popular .NET COM interop consumer - seems to focus far more on [JavaScript Add-Ins](https://docs.microsoft.com/office/dev/add-ins/overview/office-add-ins).\r\n\r\nNote: I am not suggestion COM or Office COM extensions aren\u0027t important. I am trying to understand the community perspective and if this is a growing area to invest in or if this area may not warrant time to prioritize improvements in.",
                                           "updatedAt":  "2021-01-24T05:14:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NjM2NzAwNQ==",
                                           "createdAt":  "2021-01-24T15:22:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lauxjpn",
                                           "body":  "\u003e So I could be mistaken here, but a function with that attribute is only called once during the respective `DllRegisterServer`/`DllUnregisterServer` call. How would the above suggestion differ in this case?\r\n\r\nThere are two main differences from my point of view here:\r\n\r\n* Using the current mechanism, that is conceptionally bound to a particular COM class, to perform actions that are not about this COM class (or not _just_ this COM class), is a hack (or at least a semantic issue). For example, if an assembly must register a type library which contains 20 COM classes, only one of those classes should now register the type library using the `ComRegisterFunctionAttribute`, but which one?\r\n* If I need to make alterations after `comhost.dll` has registered the classes, there is no simple or official way to make sure that this code runs at the end of all registration (or the beginning of all unregistration) actions. For example, I might need to configure the APPID related (or DCOM related) settings of the library, or need to alter the configuration in some other fashion. In cases where I need to run code after all classes have been registered, I would currently need to enumerate all valid `ComRegisterFunctionAttribute` methods of all valid classes (or do some subclassing and track the information in the base class), count the method calls (because I cannot rely on the order in which they are executed) and run my post registration code at the end of the last call.\r\n\r\n\u003e Is there a perception that this approach is something that will grow in popularity which would make investment important or slowly decrease as time progresses?\r\n\r\nOn the Win32 level, COM is still the number one choice to implement new features and from a .NET perspective, it is the glue technology to integrate your application/components with any (well, most) non-.NET applications/components on Windows.\r\n\r\nSince .NET 5 does not provide integrated type library support, manually generating type libraries and registering them will become much more common in the future.\r\n\r\n\u003e Office - which has historically been the most popular .NET COM interop consumer - seems to focus far more on [JavaScript Add-Ins](https://docs.microsoft.com/office/dev/add-ins/overview/office-add-ins).\r\n\r\nWhile this is true, Microsoft has introduced many new technologies for their products over the years, while only very few of them usually stick. In regards to Office, there is an over 20 year history of VBS and COM component consumption, so even if JavaScript Add-Ins will become popular of the next few years, there are so many components and applications out there relying on COM, that first-class support will need to be part of .NET on the traditional Windows platform forever anyway.\r\nMicrosoft is not focusing too much specifically on COM for their applications, because it just works and most traditional Microsoft applications (like the Office applications) are COM hosts anyway, so they are based on COM and therefore there is not much focus needed.\r\n\r\n---\r\n\r\nIf .NET 5 would have type library support, this would be less of an issue. But since it hasn\u0027t, the need to customize your COM classes and application registrations has significantly increased.\r\n\r\n---\r\n\r\n\u003e This would be creating a lot of new policy for a system that we don\u0027t believe will continue to evolve much.\r\n\r\nI am not sure, that this is really the case. Reusing the same attributes for the same purpose on a different level seems intuitive to me. It would not be a compatibility issue and pretty much in line with how the COM interop implementation handles similar issues. It would also be easy to discover, since the additional usage scenario would be mentioned in the docs for the same attribute that has been used (and misused) for 20 years for similar cases.\r\nThe .NET implementation would be pretty simple too and change very little of the already established code.\r\nSo from my point of view, there is an increasing need with little risk.\r\n\r\n(I personally am more of a fan of convention based approaches, where `ComActivator` would just look for a specific registration class and call specific methods on it, which is easily extendable in the future, if additional hooks are needed.\r\nThis implementation would also be distinct from the .NET Framework one, so its light on the docs changes. But its not what anyone familiar with COM interop would expect and is hard to discover.)",
                                           "updatedAt":  "2021-01-24T15:26:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NjQxMTg4Ng==",
                                           "createdAt":  "2021-01-24T18:50:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBdf5DQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lauxjpn",
                                                                               "createdAt":  "2021-01-24T23:01:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e Using the current mechanism, that is conceptionally bound to a particular COM class, to perform actions that are not about this COM class (or not just this COM class), is a hack (or at least a semantic issue).\r\n\r\nFair point. So the idea here would be at the assembly level not specifically tied to an exported COM class. Message received, I agree with your perspective on it being semantically confusing. This argument is convincing given how much work it would be to consider support - limited by our other priorities of course.\r\n\r\n\u003eOn the Win32 level, COM is still the number one choice to implement new features\r\n\u003eSince .NET 5 does not provide integrated type library support, manually generating type libraries and registering them will become much more common in the future.\r\n\r\nWe are not entirely in agreement here. The WinRT API surface area is where new APIs are appearing. WinRT is built on top of COM so there is overlap but the system is fundamentally different and registration is different - TLBs don\u0027t exist. In addition to that the C#/WinRT repo is working to provide a [.NET component authoring story](https://github.com/microsoft/CsWinRT/issues/309). I would argue that is where we should invest rather than the built-in COM system.\r\n\r\n\u003eIn regards to Office, there is an over 20 year history of VBS and COM component consumption, so even if JavaScript Add-Ins will become popular of the next few years, there are so many components and applications out there relying on COM, that first-class support will need to be part of .NET on the traditional Windows platform forever anyway.\r\n\r\nI fully agree with respect to .NET Framework and that is also our statement as it relates to COM interop. However, for .NET 5+ this is not a specific goal as it relates to the Office ecosystem. There are many issues with the Office COM model and .NET 5+ and it is not clear if Office will fully support .NET 5+ until multiple versions of the runtime can be loaded in the same process - which is not a goal at present - see https://github.com/dotnet/runtime/issues/45285#issuecomment-736712591. I think until Office reprioritizes the COM extension approach or another scenario pushes us toward enabling multiple in-proc runtime instances the best advice here is to focus on .NET Framework development for Office extensions.",
                                           "updatedAt":  "2021-01-24T18:50:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NjQ1NTI4NA==",
                                           "createdAt":  "2021-01-24T23:02:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBdgC5w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2021-01-25T00:28:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lauxjpn",
                                           "body":  "\u003e So the idea here would be at the assembly level not specifically tied to an exported COM class.\r\n\r\nYeah, that\u0027s it.\r\n\r\n\u003e The WinRT API surface area is where new APIs are appearing.\r\n\r\nThat\u0027s definitely the case for APIs in general. (I was really only talking about the Win32 layer here.)\r\n\r\n\u003e I think until Office reprioritizes the COM extension approach or another scenario pushes us toward enabling multiple in-proc runtime instances the best advice here is to focus on .NET Framework development for Office extensions.\r\n\r\nI agree that for the time being, writing .NET Standard 2.0 compatible net48 code is probably the best choice for Office compatible COM classes.\r\nOver time, when the gap between .NET Standard 2.0 and .NET 5+ widens, the impact level of the issue will become more clear and whether its worth investing in that area or not.",
                                           "updatedAt":  "2021-01-24T23:02:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNDA1NjMwOA==",
                                           "createdAt":  "2021-03-22T13:21:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC47e0A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gusmally",
                                                                               "createdAt":  "2023-03-30T23:02:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bclothier",
                                           "body":  "I want to add my support / vote for this request. We usually prefer using HKCU over HKLM since the addins we provide for use with Office usually are scoped for users and needs to be available to corporate uses who may have a locked down environment and thus cannot write to HKCU. \r\n\r\nManifest approach is not practical because that requires creating a manifest associated with an .exe file for the Office which will require admin privilege anyway AND it is also improper because it makes the scope is to the _all_ documents managed by the Office when in fact it may only apply to certain kind of documents (e.g. a COM addin/library is used by only one specific Excel spreadsheet or a particular Access database). \r\n\r\nThe workaround is to manually write a `.reg` script that simulates the registry keys created as a result of `regsvr32` but that\u0027s tedious \u0026 errorprone. ",
                                           "updatedAt":  "2021-03-22T13:21:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMjMwNDMzMg==",
                                           "createdAt":  "2021-04-02T04:02:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lauxjpn",
                                           "body":  "@bclothier The general way to accomplish what you want, is to register your in-proc DLL after calling [RegOverridePredefKey](https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regoverridepredefkey).\r\n\r\nFor type library registrations, also call [OaEnablePerUserTLibRegistration](https://docs.microsoft.com/en-us/windows/win32/api/oleauto/nf-oleauto-oaenableperusertlibregistration).\r\n\r\n(If necessary, I can probably share some C# code I have been using for about 10 years to register COM libraries under HKCU, so they can be registered and loaded from a normal user context without elevation. I have used it also for COM and ActiveX components that needed to be loaded in Excel or Access).",
                                           "updatedAt":  "2021-04-02T04:02:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNDkyOTMyMQ==",
                                           "createdAt":  "2021-04-07T13:48:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bclothier",
                                           "body":  "@lauxjpn Thank you for the insight! This is very good to know but I\u0027m a bit fuzzy on one point. Given that we call the `regsvr32.dll`, which in turn calls the `ComDllRegisterFunction`-decorated function, wouldn\u0027t it be necessary to run `RegOverridePredefKey` before running the `regsvr32.dll` lest it registers stuff which happens before we enter the custom function?",
                                           "updatedAt":  "2021-04-07T13:48:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNDk1MTAxNw==",
                                           "createdAt":  "2021-04-07T14:15:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lauxjpn",
                                           "body":  "@bclothier Not sure what the `regsvr32.dll` file is you are mentioning.\r\n\r\nThe general procedure would look like this:\r\n\r\n```\r\nLoadLibrary(\"Oleaut32.dll\")\r\n    GetProcAddress(\"OaEnablePerUserTLibRegistration\")\r\n    Marshal.GetDelegateForFunctionPointer()\r\n    Call OaEnablePerUserTLibRegistration()\r\n\r\n    key = RegOpenKey(RegistryHive.CurrentUser, @\"Software\\Classes\")\r\n        RegOverridePredefKey(RegistryHive.ClassesRoot, key)\r\n    RegCloseKey(key)\r\n\r\n        LoadLibrary(\"YourLibrary.comhost.dll\")\r\n            GetProcAddress(\"DllRegisterServer\")\r\n            Marshal.GetDelegateForFunctionPointer()\r\n            Call DllRegisterServer()\r\n        FreeLibrary()\r\n\r\n    RegOverridePredefKey(RegistryHive.ClassesRoot, null)\r\nFreeLibrary()\r\n```",
                                           "updatedAt":  "2021-04-07T14:15:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNDk1NjU3NA==",
                                           "createdAt":  "2021-04-07T14:22:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bclothier",
                                           "body":  "Sorry, I mistyped. I meant `regsvr32.exe`, not `regsvr32.dll`. The process you outlined sounds like this needs to be run in lieu of the `regsvr32.exe` whereas Microsoft says that you can just call `regsvr32.exe` on your COM-enabled project and it just works™. The `ComRegisterFunction` attribute is called by the `regsvr32.exe` but after it has done its own registration. \r\n\r\nGiven that `regsvr32.exe` does not officially support per-user registration, this might be the next best alternative. ",
                                           "updatedAt":  "2021-04-07T14:22:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNDk2MjgyNw==",
                                           "createdAt":  "2021-04-07T14:30:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBmSieQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bclothier",
                                                                               "createdAt":  "2021-04-07T14:38:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lauxjpn",
                                           "body":  "The `regsvr32.exe YourLibrary.comhost.dll` call just loads the `YourLibrary.comhost.dll` and then calls the `DllRegisterServer` entry point. It doesn\u0027t know anything about .NET or its attributes (but the auto-generated `X.comhost.dll` does).\r\n\r\nThe procedure I outlined does not depend on `regsvr32.exe`. You could implement it in your own exe-Tool and use that one for registering/unregistering your components instead of `regsvr32.exe`.\r\nYou could also move the code to a .NET class and call that class\u0027 method from VBA to register your components.\r\nIf you have some kind of setup routine, you could run the procedure from there.\r\n\r\nHow you execute the procedure is really up to you and depends on how you run and deploy your app or components.",
                                           "updatedAt":  "2021-04-07T14:34:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_lsbN",
                                           "createdAt":  "2022-03-14T14:14:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marklechtermann",
                                           "body":  "If you are looking for a way to generate a **TLB** from a .NET 5+ assembly, this project might help you:\r\n[https://github.com/dspace-group/dscom](https://github.com/dspace-group/dscom)",
                                           "updatedAt":  "2022-03-14T14:14:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_ltnm",
                                           "createdAt":  "2022-03-14T14:18:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCSzAew==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "marklechtermann",
                                                                               "createdAt":  "2022-03-14T14:39:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@marklechtermann This is a very interesting project! Thank you for sharing and providing a community solution for TLB tooling in .NET 5+.",
                                           "updatedAt":  "2022-03-14T14:18:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_lulu",
                                           "createdAt":  "2022-03-14T14:22:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smourier",
                                           "body":  "Building a TLB from .NET 5+ is not the subject of this issue, but anyway, IMHO, this should be provided by Microsoft like it used to be, not by the community.",
                                           "updatedAt":  "2022-03-14T14:22:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Y4Ayr",
                                           "createdAt":  "2023-03-30T23:06:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gusmally",
                                           "body":  "\u003e (If necessary, I can probably share some C# code I have been using for about 10 years to register COM libraries under HKCU, so they can be registered and loaded from a normal user context without elevation. I have used it also for COM and ActiveX components that needed to be loaded in Excel or Access).\r\n\r\n@lauxjpn I would be very interested in seeing this code!",
                                           "updatedAt":  "2023-03-30T23:06:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Zv1Um",
                                           "createdAt":  "2023-04-12T18:05:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lauxjpn",
                                           "body":  "\u003e @lauxjpn I would be very interested in seeing this code!\r\n\r\n@gusmally Here is the COM library registration code that I have been using for a long time. It is able to register libraries for the current user:\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eCOM library registration source code\u003c/summary\u003e\r\n\r\n```c#\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace Registration\r\n{\r\n    public static class ComLibrary\r\n    {\r\n        #region External Declarations\r\n\r\n        [DllImport(\"kernel32\", CharSet = CharSet.Unicode, SetLastError = true)]\r\n        private static extern IntPtr LoadLibrary(string lpFileName);\r\n\r\n        [DllImport(\"kernel32\", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]\r\n        private static extern IntPtr GetProcAddress(IntPtr hModule, string procName);\r\n\r\n        [DllImport(\"kernel32\", SetLastError = true)]\r\n        [return: MarshalAs(UnmanagedType.Bool)]\r\n        private static extern bool FreeLibrary(IntPtr hModule);\r\n\r\n        #endregion\r\n\r\n        private delegate int ComLibraryFunctionDelegate();\r\n        private delegate void EnableTypeLibRegistrationForCurrentUserDelegate();\r\n\r\n        private static bool IsTypeLibRegistrationForCurrentUserEnabled { get; set; }\r\n\r\n        public static bool Register(string libraryPath, bool currentUserOnly = false, TraceSource traceSource = null)\r\n        {\r\n            traceSource?.TraceInformation($\"COM library \\\"{libraryPath}\\\" is being registered for {(currentUserOnly ? \"the current user\" : \"all users\")}.\");\r\n\r\n            var succeeded = false;\r\n\r\n            if (currentUserOnly)\r\n            {\r\n                EnableTypeLibRegistrationForCurrentUser(\r\n                    () =\u003e\r\n                    {\r\n                        using (new UserClassesRegistryContext())\r\n                            succeeded = CallLibraryFunction(\"DllRegisterServer\", libraryPath, traceSource);\r\n                    }, traceSource);\r\n            }\r\n            else\r\n                succeeded = CallLibraryFunction(\"DllRegisterServer\", libraryPath, traceSource);\r\n\r\n            traceSource?.TraceInformation($\"The registration process {(succeeded ? \"succeeded\" : \"failed\")}.\");\r\n\r\n            return succeeded;\r\n        }\r\n\r\n        public static bool Unregister(string libraryPath, bool currentUserOnly = false, TraceSource traceSource = null)\r\n        {\r\n            traceSource?.TraceInformation($\"COM library \\\"{libraryPath}\\\" is being unregistered for {(currentUserOnly ? \"the current user\" : \"all users\")}.\");\r\n\r\n            var succeeded = false;\r\n\r\n            if (currentUserOnly)\r\n            {\r\n                EnableTypeLibRegistrationForCurrentUser(\r\n                    () =\u003e\r\n                    {\r\n                        using (new UserClassesRegistryContext())\r\n                            succeeded = CallLibraryFunction(\"DllUnregisterServer\", libraryPath, traceSource);\r\n                    }, traceSource);\r\n            }\r\n            else\r\n                succeeded = CallLibraryFunction(\"DllUnregisterServer\", libraryPath, traceSource);\r\n\r\n            traceSource?.TraceInformation($\"The unregistration process {(succeeded ? \"succeeded\" : \"failed\")}.\");\r\n\r\n            return succeeded;\r\n        }\r\n\r\n        private static void EnableTypeLibRegistrationForCurrentUser(Action action, TraceSource traceSource = null)\r\n        {\r\n            if (IsTypeLibRegistrationForCurrentUserEnabled)\r\n            {\r\n                action();\r\n                return;\r\n            }\r\n\r\n            traceSource?.TraceInformation(\"User specific type library registration will be used.\");\r\n\r\n            var hModule = IntPtr.Zero;\r\n\r\n            const string libraryPath = \"Oleaut32.dll\";\r\n            const string functionName = \"OaEnablePerUserTLibRegistration\";\r\n\r\n            try\r\n            {\r\n                hModule = LoadLibrary(libraryPath);\r\n                if (hModule == IntPtr.Zero)\r\n                    throw new InvalidOperationException($\"The library \\\"{libraryPath}\\\" could not be loaded.\");\r\n\r\n                var libraryFunctionProcAddress = GetProcAddress(hModule, functionName);\r\n                if (libraryFunctionProcAddress != IntPtr.Zero)\r\n                {\r\n                    var libraryFunction = (EnableTypeLibRegistrationForCurrentUserDelegate)Marshal.GetDelegateForFunctionPointer(libraryFunctionProcAddress, typeof(EnableTypeLibRegistrationForCurrentUserDelegate));\r\n                    libraryFunction();\r\n                }\r\n\r\n                IsTypeLibRegistrationForCurrentUserEnabled = true;\r\n\r\n                action();\r\n            }\r\n            finally\r\n            {\r\n                IsTypeLibRegistrationForCurrentUserEnabled = false;\r\n\r\n                if (hModule != IntPtr.Zero)\r\n                {\r\n                    FreeLibrary(hModule);\r\n                    hModule = IntPtr.Zero;\r\n                }\r\n            }\r\n        }\r\n\r\n        private static bool CallLibraryFunction(string functionName, string libraryPath, TraceSource traceSource = null)\r\n        {\r\n            var hModule = IntPtr.Zero;\r\n\r\n            try\r\n            {\r\n                hModule = LoadLibrary(libraryPath);\r\n                if (hModule == IntPtr.Zero)\r\n                    throw new InvalidOperationException($\"The library \\\"{libraryPath}\\\" could not be loaded.\");\r\n\r\n                var libraryFunctionProcAddress = GetProcAddress(hModule, functionName);\r\n                if (libraryFunctionProcAddress == IntPtr.Zero)\r\n                    throw new InvalidOperationException($\"The entry point \\\"{functionName}\\\" of COM library \\\"{libraryPath}\\\" could not be found.\");\r\n\r\n                var libraryFunction = (ComLibraryFunctionDelegate)Marshal.GetDelegateForFunctionPointer(libraryFunctionProcAddress, typeof(ComLibraryFunctionDelegate));\r\n\r\n                var hResult = libraryFunction();\r\n                traceSource?.TraceInformation($\"The entry point \\\"{functionName}\\\" of COM library \\\"{libraryPath}\\\" returned an HRESULT value of \\\"{hResult}\\\".\");\r\n\r\n                return hResult == 0;\r\n            }\r\n            finally\r\n            {\r\n                if (hModule != IntPtr.Zero)\r\n                {\r\n                    FreeLibrary(hModule);\r\n                    hModule = IntPtr.Zero;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public class UserClassesRegistryContext : IDisposable\r\n    {\r\n        #region External Declarations\r\n\r\n        [DllImport(\"advapi32.dll\", SetLastError = true)]\r\n        private static extern int RegOpenKey(IntPtr hKey, string lpSubKey, out IntPtr phkResult);\r\n\r\n        [DllImport(\"advapi32.dll\", SetLastError = true)]\r\n        private static extern int RegOverridePredefKey(IntPtr hkey, IntPtr hnewKey);\r\n\r\n        [DllImport(\"advapi32.dll\", SetLastError = true)]\r\n        private static extern int RegCloseKey(IntPtr hKey);\r\n\r\n        #endregion\r\n\r\n        private const long ERROR_SUCCESS = 0;\r\n\r\n        public bool InContext { get; private set; }\r\n\r\n        public UserClassesRegistryContext()\r\n        {\r\n            EnterContext();\r\n        }\r\n\r\n        ~UserClassesRegistryContext()\r\n        {\r\n            ReleaseUnmanagedResources();\r\n        }\r\n\r\n        public void Dispose()\r\n        {\r\n            ReleaseUnmanagedResources();\r\n            GC.SuppressFinalize(this);\r\n        }\r\n\r\n        private void ReleaseUnmanagedResources()\r\n        {\r\n            if (InContext)\r\n                ExitContext();\r\n        }\r\n\r\n        private void EnterContext()\r\n        {\r\n            if (RegOpenKey(new IntPtr((int) RegistryHive.CurrentUser), @\"Software\\Classes\", out var hKey) != ERROR_SUCCESS)\r\n                throw new InvalidOperationException(@\"The registry key \"\"HKEY_CURRENT_USER\\Software\\Classes\"\" could not be opened.\");\r\n            \r\n            try\r\n            {\r\n                if (RegOverridePredefKey(new IntPtr((int) RegistryHive.ClassesRoot), hKey) != ERROR_SUCCESS)\r\n                    throw new InvalidOperationException(@\"The registry key \"\"HKEY_CLASSES_ROOT\"\" could not be overridden by \"\"HKEY_CURRENT_USER\\Software\\Classes\"\".\");\r\n\r\n                InContext = true;\r\n            }\r\n            finally\r\n            {\r\n                RegCloseKey(hKey);\r\n            }\r\n        }\r\n\r\n        private void ExitContext()\r\n        {\r\n            if (!InContext)\r\n                throw new InvalidOperationException(\"ExitContext was called before calling EnterContext first.\");\r\n\r\n            RegOverridePredefKey(new IntPtr((int)RegistryHive.ClassesRoot), IntPtr.Zero);\r\n            InContext = false;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\u003c/details\u003e\r\n\r\nJust call `ComLibrary.Register(...)` or `ComLibrary.Unregister(...)`.",
                                           "updatedAt":  "2023-04-12T18:05:30Z"
                                       }
                                   ],
                         "totalCount":  25
                     },
        "title":  "Windows ComHost COM registration in HKCU instead of HKLM?",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54523",
        "createdAt":  "2021-06-21T21:57:29Z",
        "number":  54523,
        "author":  "agocke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBvqWbg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkoritzinsky",
                                            "createdAt":  "2021-06-21T22:04:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LakshanF",
                                            "createdAt":  "2021-06-22T12:18:42Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-07-29T17:37:45Z",
        "body":  "I\u0027m thinking of test assemblies like System.Collections, which probably doesn\u0027t have any dependencies on COM.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONHPMmw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NTM3MjQxNA==",
                                           "createdAt":  "2021-06-21T22:00:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027linkable-framework\u0027: @eerhardt, @vitek-karas, @LakshanF, @sbomer, @joperezr\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI\u0027m thinking of test assemblies like System.Collections, which probably doesn\u0027t have any dependencies on COM.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eagocke\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Interop-coreclr`, `linkable-framework`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-21T22:00:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NTM3NDg1NA==",
                                           "createdAt":  "2021-06-21T22:04:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBvqWPg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "agocke",
                                                                               "createdAt":  "2021-06-21T23:07:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LakshanF",
                                                                               "createdAt":  "2021-06-22T12:18:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "Even if we don\u0027t do this for the default run, we should definitely have a rolling/scheduled CI run that does this.",
                                           "updatedAt":  "2021-06-21T22:04:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4MDAwNDI1MQ==",
                                           "createdAt":  "2021-07-14T15:46:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "@agocke I see that you have this in the AppModel .NET 6.0 project. Are we considering this a 6.0 issue?",
                                           "updatedAt":  "2021-07-14T15:46:13Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Set BuiltInComInteropSupport=false for test assemblies which don\u0027t (and shouldn\u0027t) use COM",
        "labels":  [
                       "test-enhancement",
                       "area-Interop-coreclr",
                       "linkable-framework"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57439",
        "createdAt":  "2021-08-15T12:21:54Z",
        "number":  57439,
        "author":  "borioan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-18T15:52:28Z",
        "body":  "Using VisualStudio 2019 I created a new C++/CLR Class Library (.NET project) - ClassLibrary1 \r\nI added ComVisible(true) and a new GUID to the generated project class \r\nMake sure that the I have /clr:netcore and .NET5.0 as .NET Core target framework settings,  \r\nI tried to register the .dll: regsvr32 D:\\Code\\CLI\\ClassLibrary1\\x64\\Debug\\ClassLibrary1.dll but I get the error message \"the module was loaded but the entry-point dllregisterserver was not found..\"\r\nI can see that a Ijwhost.dll was created, but I do not know how to deal with. \r\nIf I switch to /clr - Common Language Runtime Support (/clr) in the project settings,  I can register the assembly with regasm without no problem!\r\nAny idea?\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONbepbQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41pBO8",
                                           "createdAt":  "2021-08-17T02:27:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "Hi @borioan. Thank for raising this concern. At present there is no built-in support for using C++/CLI to write a COM server in .NET Core. Since it is C++ though one could write all the needed COM registration functions themselves. However, this has not been tested in any way at present and there may be some issues. Details can be found [here](https://docs.microsoft.com/windows/win32/com/com-server-responsibilities).\r\n\r\nCan you tell us a bit more about your scenario? Is this a new project or is this project being ported from .NET Framework to .NET 5+? Understanding your current reasoning for using C++/CLI will help us prioritize future work.\r\n\r\n/cc @jkoritzinsky @elinor-fung @vitek-karas ",
                                           "updatedAt":  "2021-08-17T02:28:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41ri7L",
                                           "createdAt":  "2021-08-17T20:27:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "borioan",
                                           "body":  "I develop an app which extract some data through a COM add-in inside a CAD platform.  \r\nThe data must be passed into another app which is a .NET 5.0 solution. \r\nThe COM add-in must be a C++/CLR class library. I can perfectly create and read the CAD platform data using a .NET Framework C++/CLR COM dll but the problem is the link in the other side, with the .NET 5.0 platform. For compatibility I must assume that  the C++/CLR COM add-in must be compiled with  .NET Core Runtime Support (/clr:netcore) setting option. Please advice, I need a solution!",
                                           "updatedAt":  "2021-08-17T20:27:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41r9m6",
                                           "createdAt":  "2021-08-18T00:19:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003eThe COM add-in must be a C++/CLR class library.\r\n\r\nCan you elaborate on why C++/CLI is required in this case? In .NET 5+ there is very little that can\u0027t be done in C# vs using C++/CLI. In fact there are cases where C# will be faster than C++/CLI.\r\n\r\n\u003ebut the problem is the link in the other side, with the .NET 5.0 platform\r\n\r\nIs this a cross-process communication channel? I am assuming this is the case with the term \"other side\".\r\n\r\nThere are a few ways to accomplish this but in principle the easiest would be to author your COM server in C# \u0026ndash; if the scenario uses COM in an out-of-proc manner. In order to create a COM server using C++/CLI the following exports will need to be manually written/implemented in pure C/C++ and then compiled/linked into your C++/CLI assembly as native code:\r\n\r\n[`HRESULT DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID *ppv);`](https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-dllgetclassobject)\r\n\r\n[`HRESULT DllCanUnloadNow();`](https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-dllcanunloadnow)\r\n\r\n**Only needed if registration is desired**\r\n[`HRESULT DllRegisterServer();`](https://msdn.microsoft.com/library/windows/desktop/ms682162(v=vs.85).aspx)\r\n\r\n[`HRESULT DllUnregisterServer();`](https://msdn.microsoft.com/library/windows/desktop/ms691457(v=vs.85).aspx)\r\n\r\nAlternatively one could implement a COM server in a managed assembly and then provide types from a referenced C++/CLI assembly. An issue with this approach is the current .NET Core 3.x/.NET 5+ approach requires the COM server to be implemented in the managed assembly itself. This means one would need to create a type that would provide the types from the C++/CLI assembly.\r\n\r\nThis is entirely possible but using C++/CLI is not going to be straight forward for a COM server given this scenario is not currently supported. This has been marked for .NET 7 consideration.",
                                           "updatedAt":  "2021-08-18T00:19:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41tBVa",
                                           "createdAt":  "2021-08-18T10:15:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB22U8Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2021-08-18T15:52:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "borioan",
                                           "body":  "The application I am developing consists of a .DLL module that reads data (3D models) from within the CAD platform (platform 1) and tries to transfer them to an external WPF .NET 5.0 application\r\nThe WPF application in turn is based on another platform (platform 2) that helps with the conversion of read data and allows the 3D models to display them in the final WPF window. Both platform 1 and platform 2 are based on C ++ libraries.\r\nPlatform 1 allows users to develop modules only in the form of COM DLL modules. The API used to read the data is provided strictly in C ++ language.\r\nModules under platform 1 can be developed without problems in any C ++ / C # / Visual Basic language. \r\nI can create a .dll using C# and P/Invoke mechanism to use these C++ API functions but the best is to use C++ interop mechanism which is superior to P/Invoke because of fewer type-marshalling requirements\r\nOn the other hand, platform 2 - which is a combination of C ++ and C ++ / CLI libraries, converts and displays 3D models using directly native C ++ data which finally can be displayed in a WPF NET 5.0 window \r\nData processing speed is critical. This is the main reason I try to find the best solution in this scenario.",
                                           "updatedAt":  "2021-08-18T10:15:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41t6lt",
                                           "createdAt":  "2021-08-18T15:52:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e but the best is to use C++ interop mechanism which is superior to P/Invoke because of fewer type-marshalling requirements\r\n\r\nI\u0027d be interested to see data which proves that in practice. The C++/CLI platforms allows users to create very clever and potentially light-weight marshalling solutions but that is not the default. The default is no better than C# and that is especially true for COM interop.\r\n\r\nIf .NET 5+ is available to you and your team I would avoid C++/CLI unless there is an existing large codebase that cannot be easily ported or there is some other business requirement that requires C++/CLI. Since C# now provides [function pointers](https://docs.microsoft.com/dotnet/csharp/language-reference/proposals/csharp-9.0/function-pointers), has efficient native memory representation using [`Span\u003cT\u003e` ](https://docs.microsoft.com/dotnet/api/system.span-1), and can now expose minimal overhead functions to native code via [`UnmanagedCallersOnlyAttribute`](https://docs.microsoft.com/dotnet/api/system.runtime.interopservices.unmanagedcallersonlyattribute) \u0026ndash; there are tools that exist to make use of `UnmanagedCallersOnlyAttribute` in interesting ways such as [DNNE](https://github.com/AaronRobinsonMSFT/DNNE).\r\n\r\nSince COM is a required on one side of this and I didn\u0027t see anything obvious that requires C++/CLI, I would recommend implementing the COM server in C#. If it already exists it should be possible to keep the core logic in C++/CLI and instead write a thin COM server in C# that calls into the C++/CLI assembly with the business logic.",
                                           "updatedAt":  "2021-08-18T15:52:28Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "C++/CLI should be supported to write a .NET COM server",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58191",
        "createdAt":  "2021-08-26T15:59:42Z",
        "number":  58191,
        "author":  "t-mustafin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-09-02T04:36:33Z",
        "body":  "`GenericPInvokeCalliHelper` produces a problem on linux.\r\n\r\n`GenericPInvokeCalliHelper` takes away `VASigCookie` argument from the stack and moves on its place return address value. It breaks 16 byte stack alignment and leads to further problems on `esp` usage: execution could break inside `CHECK_STACK_ALIGNMENT` macro or on `movap [esp+offset]` instruction. The problem spreads until caller of `GenericPInvokeCalliHelper` will restore `esp` from `ebp` on self epilog.\r\n\r\nhttps://github.com/dotnet/runtime/blob/aa526116c5185daf46743906a4308cf1c118ee72/src/coreclr/vm/i386/asmhelpers.S#L619-L677\r\n\r\nI see couple of options to resolve the problem:\r\n\r\n1. Besides `VASigCookie` `GenericPInvokeCalliHelper` takes `the unmanaged target` argument via `eax` register. Caller could create a structure `{the unmanaged target; VASigCookie}` and pass  a pointer to the structure via `eax`. `GenericPInvokeCalliHelper` able to read the structure and place `the unmanaged target` in `eax` to the moment of `IL_STUB_PIvoke` call. So this option changes only caller-\u003e`GenericPInvokeCalliHelper` interface, `GenericPInvokeCalliHelper`-\u003e`IL_STUB_PIvoke` interface remains unchanged.\r\n2. Change all caller-\u003e`IL_STUB_PIvoke` calling convention to use only stack instead of `ecx` + `edx` + stack to pass arguments. It will free `ecx` register which could be used during caller-\u003e`GenericPInvokeCalliHelper` to keep `VASigCookie` value.\r\n\r\n@jkotas  Will such changes break some code outside of `GenericPInvokeCalliHelper` case? Which variant is preferable?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONgqm2Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42CK-i",
                                           "createdAt":  "2021-08-26T15:59:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-08-26T15:59:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42CMGj",
                                           "createdAt":  "2021-08-26T16:05:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "t-mustafin",
                                           "body":  "cc @alpencolt @gbalykov ",
                                           "updatedAt":  "2021-08-26T16:05:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42CpLs",
                                           "createdAt":  "2021-08-26T18:57:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The strategy used to deal with this problem on ARM was to pass the cookie in callee saved register: https://github.com/dotnet/runtime/blob/39803d4d3cbf818641437afb7402da15fa076bec/src/coreclr/vm/arm/pinvokestubs.S#L181\r\n\r\nI think it would make sense to use the same strategy here as well and pass the cookie e.g. in ebx. If it helps, I think it would be fine to change Windows x86 to be on the same plan as well - it may get rid of a few ifdefs in the JIT.\r\n\r\n\u003e  Caller could create a structure\r\n\r\nI agree that this approach would work too, but creating the structure in the JIT would be probably more involved than just using callee saved register like on ARM.\r\n\r\n\u003e Change all caller-\u003eIL_STUB_PIvoke calling convention to use only stack\r\n\r\nYou would also need to change the calling convention for the callee. I think it would be involved change, touching many places.\r\n\r\n\r\nFor completeness, another option would be to get rid of the GenericPInvokeCalliHelper helper completely and instead change the JIT to call the IL stub directly. It is how it is done for NativeAOT (look for `convertPInvokeCalliToCall` method on JIT/EE interface). But that is probably pretty involved as well.",
                                           "updatedAt":  "2021-08-26T18:57:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42CqbZ",
                                           "createdAt":  "2021-08-26T19:04:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "One more option: Pass in the unmanaged target as regular argument to the stub and use the special register (eax, r12, etc.)  for the cookie. It would reduce the dependencies on passing things in special registers that is a good thing, but it should be less involved than going all the way to `convertPInvokeCalliToCall`.",
                                           "updatedAt":  "2021-08-26T19:04:43Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[Linux/x86] GenericPInvokeCalliHelper problem",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60573",
        "createdAt":  "2021-10-18T19:11:10Z",
        "number":  60573,
        "author":  "DaZombieKiller",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC392wQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NN---",
                                            "createdAt":  "2021-11-02T19:29:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AraHaan",
                                            "createdAt":  "2021-11-07T07:35:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "qmfrederik",
                                            "createdAt":  "2021-11-09T13:56:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2023-12-11T17:14:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kevingosse",
                                            "createdAt":  "2024-03-12T14:29:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aelsi2",
                                            "createdAt":  "2024-05-17T06:37:11Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2022-06-17T00:23:48Z",
        "body":  "Today, if you need to wrap a native API that has differing structure layouts (namely, structure packing) between platforms, you\u0027re stuck in a very messy scenario with not many good options to proceed. An example of such a scenario is Valve\u0027s Steamworks API, which has a series of callback structures with packing that varies per platform (`8` on Windows, `4` everywhere else).\r\n\r\nSo, when faced with this problem, some solutions that come to mind are:\r\n* Ship per-RID assemblies\r\n  * Not realistically feasible outside of the runtime.\r\n* Duplicate the structures per platform\r\n  * This requires duplication of function signatures that use these structures by value.\r\n  * It also requires duplication of any other structures that _use_ these structures.\r\n* Use interfaces\r\n  * Results in boxing, which may or may not be acceptable depending on your scenario.\r\n  * Boxing can be avoided by using generics, but this results in vastly more complicated bindings.\r\n\r\nNone of these are particularly appetizing, and all of them have significant drawbacks. Ideally, the runtime could provide some method to annotate structures to allow their layout to change depending on the current platform. If we ignore everything except structure packing, such a feature could look like:\r\n```cs\r\n[StructLayout(LayoutKind.Sequential, Pack = 4)]\r\n[StructPackOverride(PlatformID.Win32NT, Pack = 8)]\r\npublic struct SomeCallbackStructure {}\r\n```\r\nWhich would define a struct with a packing value of `8` on Windows, and `4` everywhere else.\r\n\r\ncc @jkoritzinsky @AaronRobinsonMSFT ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOWB7Zg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44ZA_F",
                                           "createdAt":  "2021-10-18T19:11:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-10-18T19:11:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ZCTI",
                                           "createdAt":  "2021-10-18T19:18:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "This seems like a great opportunity for customization in our struct marshalling source generator that @jkoritzinsky is working on. I\u0027m hesitant to change any of our built-in marshalling support to enable this sort of functionality.\r\n\r\n/cc @elinor-fung ",
                                           "updatedAt":  "2021-10-18T19:18:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ZC4Q",
                                           "createdAt":  "2021-10-18T19:21:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "\u003e I\u0027m hesitant to change any of our built-in marshalling support to enable this sort of functionality.\r\n\r\nI should mention that for my specific use cases I am working purely with blittable structures, avoiding marshaling where I can. So ideally this would affect both the managed _and_ unmanaged layouts.",
                                           "updatedAt":  "2021-10-18T19:21:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ZEur",
                                           "createdAt":  "2021-10-18T19:30:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB-xZjg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DaZombieKiller",
                                                                               "createdAt":  "2021-10-18T19:30:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@DaZombieKiller Let me elaborate on my primary concern about built-in support. The `Pack` details are apart of the metadata \u0026ndash; `StructLayoutAttribute` is a pseudo-attribute. This means it is sort of ugly to have something clearly declared in metadata but have another attribute that overrides that setting. It makes respecting this new attribute cumbersome since now metadata must be confirmed to be \"correct\" since the user could override that.\r\n\r\nIn order to improve this we would likely need some sentinel value to indicate \u0026ndash; look somewhere else for the value. That isn\u0027t impossible but would require thought and coordinate with the Roslyn team.",
                                           "updatedAt":  "2021-10-18T19:30:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ZFQ_",
                                           "createdAt":  "2021-10-18T19:33:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODPMOyg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2021-10-18T20:43:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2023-12-11T17:14:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "That makes a lot of sense, yeah. The example in the OP was more of a \"this is what a potential solution to this could look like\", moreso than a concrete proposal. If supporting differing layouts in the runtime itself proves to be too much of a headache, having APIs akin to `StructureToPtr`/`PtrToStructure` (which I imagine would be required by the generator if things were to go that route) would certainly still be enough to make this scenario far less of a headache to deal with.",
                                           "updatedAt":  "2021-10-18T19:33:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ZG0O",
                                           "createdAt":  "2021-10-18T19:43:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Its likely also worth considering in what scenarios this occurs. If such APIs appear as part of particularly \"hot calls\", then it may be problematic to require marshalling to occur. It can also impact where changes become visible if pointers, refs, or arrays are involved.\r\n\r\nI\u0027d expect that work in this area might not impact `interop` at all (at least directly), but would by relegated to the `class layout` logic in the VM. Noting that touching the class layout logic is likely just as concerning overall since touching that logic has historically been semi-problematic 😄 \r\n\r\nMuch of this could be simpler if it was more trivial to support `per-RID` assemblies in .NET (although even that can have problems due to doubling size of things generally for a 1-or-2 types that need the customization).\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2021-10-18T19:43:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44Zk4-",
                                           "createdAt":  "2021-10-18T22:52:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e `[StructPackOverride(PlatformID.Win32NT, Pack = 8)]`\r\n\r\nNote that the conditions that express the platform differences can be quite complex. For example \"Windows and not ARM\" here: https://github.com/dotnet/runtime/blob/dfd618dc648ba9b11dd0f8034f78113d69f223cd/src/libraries/System.Data.OleDb/src/OleDbStruct.cs#L112-L116 . I think it would be hard to make the declarative scheme like `StructPackOverride` to be general purpose enough.",
                                           "updatedAt":  "2021-10-18T22:53:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44eYf-",
                                           "createdAt":  "2021-10-20T09:27:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "\u003e Note that the conditions that express the platform differences can be quite complex.\r\n\r\nThis is a good point, and it got me thinking about potential alternatives. One that came to mind was something along the lines of:\r\n```cs\r\npublic interface IRuntimeStructLayout\r\n{\r\n    static abstract int Pack { get; }\r\n    static abstract int Size { get; }\r\n    static abstract CharSet CharSet { get; }\r\n}\r\n\r\npublic sealed class RuntimeStructLayoutAttribute\u003cT\u003e : Attribute\r\n    where T : IRuntimeStructLayout\r\n{\r\n    public int Pack =\u003e T.Pack;\r\n    public int Size =\u003e T.Size;\r\n    public CharSet CharSet =\u003e T.CharSet;\r\n}\r\n```\r\nWhich would be used like this:\r\n```cs\r\n[RuntimeStructLayout\u003cSomeCallbackLayout\u003e]\r\npublic struct SomeCallback\r\n{\r\n}\r\n\r\nsealed class SomeCallbackLayout : IRuntimeStructLayout\r\n{\r\n    public static int Pack =\u003e OperatingSystem.IsWindows() ? 8 : 4;\r\n    public static int Size =\u003e 0;\r\n    public static CharSet CharSet =\u003e CharSet.None;\r\n}\r\n```\r\nI think such an approach would be fine if it were to be used for marshalling, but it\u0027s overall an unsatisfying solution because the requirement of code execution to get the values feels like it would be unsuitable for the managed layout (and thus wouldn\u0027t affect access through `ref`, pointers, etc.)",
                                           "updatedAt":  "2021-10-20T09:27:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44fE2t",
                                           "createdAt":  "2021-10-20T13:30:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB_Fm6w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DaZombieKiller",
                                                                               "createdAt":  "2021-10-20T13:34:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This solution would be incompatible with AOT compilation. It is equivalent to emitting the type definitions at runtime using `Reflection.Emit`.  If fact, you can implement a solution like this using Reflection.Emit today: move the types with dynamic layout into a separate assembly, do not include this assembly in the application and instead emit it using `Reflection.Emit` at runtime. It is not something that I would recommend.",
                                           "updatedAt":  "2021-10-20T13:30:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44fFpS",
                                           "createdAt":  "2021-10-20T13:34:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "Yeah, AOT was another concern I had. I suppose it could be theoretically possible if there were heavy restrictions placed on what the `IRuntimeStructLayout` methods could do, but it\u0027d be a monumental (and likely non-worthwhile) effort that would be better served investigating other options. The `Reflection.Emit` trick sounds clever (I assume you\u0027d compile against a `ref` assembly that would look similar to what you emit at runtime?), but definitely not something I would want to pursue in a production codebase.",
                                           "updatedAt":  "2021-10-20T13:34:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44fIQ8",
                                           "createdAt":  "2021-10-20T13:46:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e Ship per-RID assemblies\nNot realistically feasible outside of the runtime.\n\nCould you say more about this? Doesn\u0027t Nuget hide the complexity from the consumer here?",
                                           "updatedAt":  "2021-10-20T13:46:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44fYYA",
                                           "createdAt":  "2021-10-20T14:56:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODAuCiw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DaZombieKiller",
                                                                               "createdAt":  "2021-10-20T14:56:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Droppers",
                                                                               "createdAt":  "2021-10-20T16:04:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PathogenDavid",
                                                                               "createdAt":  "2021-10-21T20:35:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Grendizr",
                                                                               "createdAt":  "2021-11-02T10:00:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AraHaan",
                                                                               "createdAt":  "2021-11-07T13:50:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "glopesdev",
                                                                               "createdAt":  "2021-12-27T19:22:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2023-07-14T14:15:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@danmoseley, in many senses yes. However, NuGet has a number of tracked issues here that prevent the experience from working cohesively. Some of the ones I can remember off the top of my head are:\r\n* https://github.com/NuGet/Home/issues/10571\r\n* https://github.com/NuGet/Home/issues/4184\r\n* https://github.com/NuGet/Home/issues/6793\r\n* https://github.com/NuGet/Home/issues/1660\r\n* https://github.com/NuGet/Home/issues/5862\r\n\r\nIn particular the some of the issues I\u0027ve hit are that:\r\n* While its decently trivial to create a package which contains per-TFM assemblies, there is no simple way to do the same for per-RID.\r\n  * This applies to the SDK in general where, as far as I know, there isn\u0027t some way to compile for multiple RIDs automatically (and specifying a `/p:RuntimeIdentifier` at the solution level is actually blocked by today with an error).\r\n* If you do the manual work of creating per-RID assemblies, you are realistically forced to put them all into a single NuGet which can cause increased network bandwidth and other issues for the inner loop.\r\n  * While many assemblies are small, supporting per RID assemblies for 10 OS/architecture combinations quickly blows up in terms of size and build time complexity\r\n  * When the difference is 2 types out of say 20k (where one of my libraries is right now), this becomes a very bad edge case of forcing users to go a massively complex route for something which ideally could be specified in metadata\r\n  * There is some support for `runtime.json` to split into per-RID nuget packages, but this is not officially supported for public use (the runtime itself uses it) and has various issues because of that\r\n* There is no support for generating shared reference assemblies today\r\n  * You get a reference assembly per TFM/RID, even if the public surface area is all the same\r\n* There is no support for switching on \"just\" Operating System or \"just\" bitness, you must specify both in conjunction\r\n  * Linux can be particularly bad where it can be per-distro in the worst case, such as with packaging native dependencies\r\n  * Some of this recently improved with `net60-windows` and the like, but then you aren\u0027t considered \"AnyCPU\" compatible which forces downstream changes in your dependents and a more complex build process/setup for them as well",
                                           "updatedAt":  "2021-10-20T14:56:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44fZ3f",
                                           "createdAt":  "2021-10-20T15:02:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "Tanner\u0027s comment effectively summarizes most of the issues I could think of. One of the largest concerns for my own use cases is that there is a massive amount of code duplication (there is a not-insignificant number of structs that need to have \"runtime layout\" here), so with per-RID assemblies a project will need to include each platform-specific assembly (assuming the application or library consuming the code isn\u0027t built for a specific RID).",
                                           "updatedAt":  "2021-10-20T15:02:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45X5tv",
                                           "createdAt":  "2021-11-07T07:51:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCBfNWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "rgwood",
                                                                               "createdAt":  "2021-11-07T15:34:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AraHaan",
                                           "body":  "I would also like if it was possible to have a single defined structure for when other things like so exist as well:\r\n - A structure with 4 members on x86, 5 on x64, 4 on ARM, 5 on ARM64.\r\n\r\nAs such I often would like to define a structure with all 5 members and use it with ``AnyCPU`` and would love to mark that 5th member as:\r\n\r\n```\r\n[StructMember(StructMemberKind.Hidden)]\r\n[StructMemberOverride(TargetCpuType.X64, StructMemberKind.Public)]\r\n[StructMemberOverride(TargetCpuType.ARM64, StructMemberKind.Public)]\r\n```\r\n\r\nWhere the struct is for calling into native code and ``StructMemberKind`` then would control exposure of that member to ``sizeof()`` at runtime where if say, the .NET Runtime / process is running under x86 or ARM that member is not calculated with ``sizeof()`` nor is it passed into native code, effectively hiding it unless the same code is executing under x64 or ARM64.\r\n\r\nReasonings? Well this could benefit situations like what is noticed in TerraFX.Interop.Windows where one might want both the 32 bit and 64 bit structures to some of the Windows APIs where the only difference is an added member under x64 or even ARM64. With something like this it could improve the codegen inside of TerraFX.Interop.Windows and also make the end users even more happy without adding a burden to @tannergooding for supporting x86 users at the moment and not just dropping 32 bit support entirely.",
                                           "updatedAt":  "2021-11-07T07:51:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45YHtm",
                                           "createdAt":  "2021-11-07T14:50:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCBfNVg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PathogenDavid",
                                                                               "createdAt":  "2021-11-07T15:08:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "budgetdevv",
                                                                               "createdAt":  "2021-11-07T15:18:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "budgetdevv",
                                                                               "createdAt":  "2021-11-07T15:18:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rgwood",
                                                                               "createdAt":  "2021-11-07T15:34:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Reasonings? Well this could benefit situations like what is noticed in TerraFX.Interop.Windows where one might want both the 32 bit and 64 bit structures to some of the Windows APIs where the only difference is an added member under x64 or even ARM64. With something like this it could improve the codegen inside of TerraFX.Interop.Windows and also make the end users even more happy without adding a burden to @tannergooding for supporting x86 users at the moment and not just dropping 32 bit support entirely.\r\n\r\nCould we please not make assumptions about people\u0027s libraries and what would or would not be beneficial.\r\n\r\nIt\u0027s fine to request a feature that you think would be beneficial. It is not fine to try and tie it into someone else\u0027s library without first checking with the author if it\u0027s even something impacting them. There are limitations to what can and cannot be supported here and structs having an additional member between 32-bit and 64-bit is something I\u0027ve hit less than 10 times in 30k types. The different packing issue is likewise rare overall, but it is at least quite a bit more common across various libraries/ecosystems.\r\n\r\nNeither of these issues would actually need runtime support if there per-RID building, packing, and distributing was simpler.",
                                           "updatedAt":  "2021-11-07T14:50:57Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "StructLayouts that differ between architectures and/or operating systems",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64803",
        "createdAt":  "2022-02-04T10:51:36Z",
        "number":  64803,
        "author":  "forderud",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-02-24T14:02:03Z",
        "body":  "This request is a follow-up to https://github.com/dotnet/runtime/issues/62529 that improved the default naming of the ComHost server name in the registry based on the ProgID in .Net 7.0. The COM class name in registry is now always `\u003cnamespace\u003e.\u003cclass-name\u003e` (e.g. \"MyNamespace.MyClass\"). This is a good default, but it would still be beneficial to also have a mechanism to allow customizing this name, so that the class can e.g. be named \"My class\".\r\n\r\nASK: Could it be possible to use the `[Description(\"..\")]` attribute or similar for overriding the ComHost server registry name?\r\n\r\nBackground: I\u0027m working on a plugin-based SW architecture that uses COM class names in the registry for plugin identification. Providing an ability to customize the name would enable improved plugin naming when using .Net for the implementation.\r\n\r\n\r\n### Steps to reproduce\r\n1. Open the https://github.com/dotnet/samples/tree/main/core/extensions/COMServerDemo/COMServer project\r\n2. Upgrade to Target Framework \".NET 7.0\"\r\n3. Build the COMServer project\r\n4. Register COMServer.comhost.dll with regsvr32.exe\r\n5. Open RegEdit.exe and observe that the server name is \"COMServer.Server\" (\"CoreCLR COMHost Server\" if using .Net 6) in the Computer\\HKEY_CLASSES_ROOT\\CLSID\\\\{DB1797F5-7198-4411-8563-D05F4E904956} registry folder:\r\n![image](https://user-images.githubusercontent.com/2671400/152681704-7400bf08-3c3d-4f23-9592-7c5ac0d9ae23.png)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPYNiAw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49Ynat",
                                           "createdAt":  "2022-02-04T10:51:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-02-04T10:51:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49g2ID",
                                           "createdAt":  "2022-02-07T23:00:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCNfMgg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "forderud",
                                                                               "createdAt":  "2022-02-07T23:03:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "This seems like a reasonable request. However, the cost here is non-trivial. The biggest issue is that the code involved in setting Registry keys is in native. This means we would need to update the clsid map file format to contain this information, which means updates to the SDK and runtime code. I\u0027m not opposed to this effort but honestly continuing to add minor convenience features for COM registrations seems like a very minor win.\r\n\r\nIdeally, the solution would be to move the majority of the COM server Registry key setting code into managed code in the [`ComActivator`](https://github.com/dotnet/runtime/blob/main/src/coreclr/System.Private.CoreLib/src/Internal/Runtime/InteropServices/ComActivator.cs) class and then we could reflect on the type and consume new attributes. I would argue this is the correct fix and then these new features would be trivial to add. That work though is going to be a bit more effort and will require some indication from the broader community that this has higher priority over other features in flight.",
                                           "updatedAt":  "2022-02-07T23:00:40Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "REQUEST:  Customize ComHost server registry name",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/74269",
        "createdAt":  "2022-08-19T18:36:23Z",
        "number":  74269,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T17:58:35Z",
        "body":  "After discussion over https://github.com/dotnet/runtime/pull/74123 for Int128/UInt128, it\u0027s come to light that there may be some Vector64/128/256\u003cT\u003e pass-by-value scenarios that aren\u0027t being blocked for P/Invoke.\r\n\r\nWe should ensure that these get the same coverage and blocking as `Int128`/`UInt128` until the ABI handling can be fixed and the scenarios unblocked.\r\n\r\n- [x] Respect `DisableRuntimeMarshalling` for non-inline scenarios - https://github.com/dotnet/runtime/pull/74612\r\n- [ ] Respect `DisableRuntimeMarshalling` for inline scenarios\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSMbcsA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5IxsHM",
                                           "createdAt":  "2022-08-19T18:36:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-08-19T18:36:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IxsId",
                                           "createdAt":  "2022-08-19T18:36:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "CC. @davidwrighton ",
                                           "updatedAt":  "2022-08-19T18:36:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ixtyw",
                                           "createdAt":  "2022-08-19T18:41:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidwrighton",
                                           "body":  "What I saw when implementing the block for Int128 is that\r\n- DisableRuntimeMarshalling didn\u0027t respect this block (This is an opt-in flag)\r\n- If a Vector is a field of a structure type, this block isn\u0027t respected\r\n- Logic to detect if pinvoke marshalling is needed at all doesn\u0027t respect this block (This can cause a behavioral difference between optimized and non-optimized code scenarios)",
                                           "updatedAt":  "2022-08-19T18:41:55Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Ensure Vector64/128/256 are blocked for pass-by-value to P/Invoke in all scenarios",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76775",
        "createdAt":  "2022-10-08T02:24:31Z",
        "number":  76775,
        "author":  "elinor-fung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0FJEg==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "danmoseley",
                                            "createdAt":  "2022-10-08T04:15:01Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "pedoc",
                                            "createdAt":  "2022-10-08T05:53:16Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "vitek-karas",
                                            "createdAt":  "2022-10-09T20:31:17Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2023-11-18T12:05:51Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-08-04T21:42:05Z",
        "body":  "In .NET 5, we added event [tracing for managed assembly loading](https://learn.microsoft.com/dotnet/core/dependency-loading/collect-details). The logic for [unmanaged library loading](https://learn.microsoft.com/dotnet/core/dependency-loading/loading-unmanaged) is also complicated, involving a fair amount of probing logic and multiple extension points.\r\n\r\nWe should consider adding tracing for unmanaged library loading. We have had confusion around both why a library could not be found and how / from where a library was found. There isn\u0027t really a good way to gain insight into what actually happened - closest is probably procmon/strace. Having tracing could help with understanding such scenarios.\r\n\r\nPossible entry points:\r\n- P/Invoke / [`DllImport`](https://learn.microsoft.com/dotnet/api/system.runtime.interopservices.dllimportattribute)\r\n- [`NativeLibrary.Load`](https://learn.microsoft.com/dotnet/api/system.runtime.interopservices.nativelibrary.load#system-runtime-interopservices-nativelibrary-load(system-string-system-reflection-assembly-system-nullable((system-runtime-interopservices-dllimportsearchpath)))) (the high-level one)\r\n\r\nInteresting actions:\r\n- Load start/end\r\n  - All other events should be correlated with a  \u0027main\u0027 load\r\n  - Basic information like requested library, ALC, search path settings, result/error, library path\r\n- Cached images\r\n- [Probing](https://learn.microsoft.com/dotnet/core/dependency-loading/default-probing#unmanaged-native-library-probing)\r\n  - We probe (potentially) a lot of different paths based on a matrix of:\r\n    - Platform-dependent [name variations](https://learn.microsoft.com/dotnet/standard/native-interop/cross-platform#library-name-variations)\r\n    - Directories specified in `NATIVE_DLL_SEACH_DIRECTORIES`\r\n    - Directory of the p/invoke assembly (may be skipped by search path settings)\r\n  - Since the OS does the actual load, there is the added complication of OS-dependent behaviour, but tracing would at least get us to the point of \u0027this is what we gave to the platform and this is the result we got back\u0027.\r\n- Extension points\r\n  - [`AssemblyLoadContext.LoadUnmanagedDll`](https://learn.microsoft.com/dotnet/api/system.runtime.loader.assemblyloadcontext.loadunmanageddll)\r\n  - [`AssemblyLoadContext.ResolvingUnmanagedDll`](https://learn.microsoft.com/dotnet/api/system.runtime.loader.assemblyloadcontext.resolvingunmanageddll)\r\n  - [`DllImportResolver`](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.dllimportresolver)\r\n\r\ncc @AaronRobinsonMSFT @jkoritzinsky @vitek-karas ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYeyKug==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5h7Iq6",
                                           "createdAt":  "2023-07-19T23:28:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "Moving this to .NET 9 as we\u0027ve passed feature-complete.",
                                           "updatedAt":  "2023-07-19T23:28:24Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Tracing for unmanaged library loading",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84451",
        "createdAt":  "2023-04-06T22:11:55Z",
        "number":  84451,
        "author":  "jkoritzinsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-07T16:44:59Z",
        "body":  "To simplify the testing strategy for LibraryImportGenerator, we utilized the DNNE package to enable writing the \"unmanaged\" side of the tests in C#. For our tests under `src/tests/Interop` that are only testing our built-in marshalling logic, we should consider moving these tests to utilize DNNE as well and live under the libraries test tree. This change will help us reduce how many tests we own under src/tests. \r\n\r\nWe will keep tests under `src/tests/Interop` that test interactions with native code that we can\u0027t safely validate with a managed implementation (because \"both sides\" of the managed code could be wrong), such as calling convention tests or primitive/native intrinsic type marshalling tests. We should also exclude moving tests that integrate tightly with platform features or use a custom app launcher to have the test start from native code, like the COM and Objective-C tests.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWW8WDg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ZZKRJ",
                                           "createdAt":  "2023-04-06T23:51:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5a9vQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2023-04-07T00:08:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkoritzinsky",
                                                                               "createdAt":  "2023-04-07T05:59:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "The use of DNNE currently blocks running the LibraryImportGenerator tests with NativeAOT:\r\n\r\nhttps://github.com/dotnet/runtime/blob/de5a04b2d7d184c5a9121b56cd51c713f72def76/src/libraries/tests.proj#L456-L457\r\n\r\nThe tests are also excluded on mobile/bionic, etc. probably for similar reasons. If we want to put more testing on that plan, we need to resolve this too.",
                                           "updatedAt":  "2023-04-06T23:51:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZZ7Lx",
                                           "createdAt":  "2023-04-07T06:01:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "The tests in the src/tests tree that have native components are also excluded on mobile (the native build there was never hooked up to work for mobile targets), so I don\u0027t think those targets should be a requirement before doing this. Bionic and NativeAOT are good prereqs before doing this work though.",
                                           "updatedAt":  "2023-04-07T06:01:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZbVkx",
                                           "createdAt":  "2023-04-07T14:25:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e If we want to put more testing on that plan, we need to resolve this too.\r\n\r\nDNNE was designed to be compatible with a NativeAOT workflow. I would imagine that in a NativeAOT scenario, we could simply not use DNNE and NativeAOT the test assembly to get the native exports generated. Is that fair or is there another issue?",
                                           "updatedAt":  "2023-04-07T14:25:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZbxYO",
                                           "createdAt":  "2023-04-07T16:44:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "I think if we turn on DirectPInvoke and set up the build such that the symbols from the UnmanagedCallersOnly methods in NativeExports are generated, things will work. Just haven\u0027t had a chance to try it. And if DirectPInvoke doesn\u0027t work, we can use a custom DllImportResolver to redirect the PInvokes to the main DLL.",
                                           "updatedAt":  "2023-04-07T16:44:58Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Move Built-in marshalling tests to use DNNE and live under the System.RuntimeInteropServices test tree",
        "labels":  [
                       "test-enhancement",
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86458",
        "createdAt":  "2023-05-18T18:15:52Z",
        "number":  86458,
        "author":  "DaZombieKiller",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-05-19T08:43:50Z",
        "body":  "Interop with COM/vtables is currently performed by allocating an array of function pointers. However, this may be dangerous if some C++ code attempts to use `dynamic_cast`, `typeid`, or some other feature that requires the existence of RTTI. This is because the RTTI pointer is located just before the first entry of the vtable, which is out of bounds of the memory that was allocated.\r\n\r\nTo my knowledge, both the Microsoft and Itanium ABIs will treat a `nullptr` value for the RTTI pointer to mean \"no RTTI is present for this type\" (in the case of MSVC, `__RTDynamicCast` will catch an AV and treat that as \"no RTTI\"). I am not sure how the older GCC ABI deals with this.\r\n\r\nWould it be desirable for the COM and vtable source generators (and the general guidance on vtable interop in .NET) to be changed from this:\r\n```cpp\r\nvoid** vtable = new void*[methodCount];\r\n// fill in vtable\r\n```\r\nto this?\r\n```cpp\r\nvoid** vtable = new void*[methodCount + 1];\r\nvtable[0] = nullptr;\r\nvtable++;\r\n// fill in vtable\r\n```\r\nIt would ensure that the RTTI pointer is `null` and the proper failure messages can be displayed instead of potentially reading an invalid (but readable) pointer.\r\n\r\nI think supporting RTTI is out of scope for .NET interop, but adding a dummy `null` pointer before the vtable seems like a good \"best effort\" to ensure that the failure is still deterministic if some code attempts to use RTTI with an interop vtable.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXKPghg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5cmMnd",
                                           "createdAt":  "2023-05-18T19:10:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@DaZombieKiller This is an interesting idea. I don\u0027t think we\u0027re opposed to it, but it is a new feature that is a very niche scenario. This isn\u0027t something the runtime team is likely to put effort into, but we can see if there is a community member who wants to take a crack at it.\r\n\r\nIf this were to go forward we would need positive and negative testing for this on all platforms.",
                                           "updatedAt":  "2023-05-18T19:10:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cmNLT",
                                           "createdAt":  "2023-05-18T19:12:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "For reference. the location of the `std::type_info*` for a type with-respect-to a vtable is specified in the Itanium ABI at item 2.9.4.3. Whoever takes up this work should also make sure that we don\u0027t need to handle 2.9.4.2 or add handling (and testing) for it.\r\n\r\nThere\u0027s no good spec for the MSVC data structures, so that will be harder to validate.",
                                           "updatedAt":  "2023-05-18T19:12:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cmNs9",
                                           "createdAt":  "2023-05-18T19:14:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7_9zA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkoritzinsky",
                                                                               "createdAt":  "2023-05-18T19:45:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "\u003e There\u0027s no good spec for the MSVC data structures, so that will be harder to validate.\r\n\r\nThe closest thing would be the `include\\rttidata.h`, `include\\ehdata_forceinclude.h` and `crt\\src\\vcruntime\\rtti.cpp` files under `VC\\Tools\\MSVC\\\u003cversion\u003e\\` in Visual Studio.",
                                           "updatedAt":  "2023-05-18T19:14:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cmlao",
                                           "createdAt":  "2023-05-18T20:41:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "I\u0027d also like to say that even with an implementation PR, there is no guarantee it will be merged. Setting expectations not trying to say no one should look into this effort.\r\n\r\nThe biggest pushback for this is the sentiment that we don\u0027t have official support for any C++ construct in the interop space. We support C constructs and adding an explicit change for a C++ feature, like the above, forces us to add support that likely has narrow utility and could potentially be limiting for future use cases.\r\n\r\nHaving concrete user scenarios where this is helpful changes that calculus a lot.",
                                           "updatedAt":  "2023-05-18T20:41:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cnekD",
                                           "createdAt":  "2023-05-19T00:38:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Just wondering - how does this work across C++ ABI breaks? Like if I have a COM object written in VC++ 6.0 and try to use it with RTTI today. Or a clang-generated COM object in VC++?",
                                           "updatedAt":  "2023-05-19T00:38:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5coz9l",
                                           "createdAt":  "2023-05-19T08:06:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e Just wondering - how does this work across C++ ABI breaks? Like if I have a COM object written in VC++ 6.0 and try to use it with RTTI today. Or a clang-generated COM object in VC++?\r\n\r\nIt will likely fail in some inscrutable way, unless effort was taken to align the cross ABI. It is related to my pushback and why adding \"C++ support\" outside of a C++ compiler is generally folly. The Itanium ABI adoption is great for the community and something that has improved a lot of things, but .NET trying to adhere to or even follow it seems premature until the C++ standards committee actually takes an official stance. ",
                                           "updatedAt":  "2023-05-19T08:06:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5co-CG",
                                           "createdAt":  "2023-05-19T08:43:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8HSlA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichalStrehovsky",
                                                                               "createdAt":  "2023-05-22T01:28:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "For VC++6.0 specifically, as far as I know the structure of RTTI data is identical to the current one under x86. The format has only been revised once: pointers were changed to RVAs on x64 to avoid increasing the size of the data. Clang has full support for MSVC RTTI when targeting the MSVC ABI too.\r\n\r\nJust to clarify, this proposal isn\u0027t about _supporting_ RTTI, it\u0027s just about decreasing the chances of a `dynamic_cast`, `typeid`, etc. operation resulting in subtle memory corruption instead of a crash. `dynamic_cast` and the related operations shouldn\u0027t be expected to work as a result of this change.\r\n\r\nYou could compare this to Roslyn detecting Git conflict markers in source files, it\u0027s a best-effort attempt to improve the developer experience if something is wrong, but there would be no qualms about removing it if the feature proved to be a blocker for something else.",
                                           "updatedAt":  "2023-05-19T08:43:49Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Safer failure with COM/C++/vtable interop and RTTI",
        "labels":  [
                       "help wanted",
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87188",
        "createdAt":  "2023-06-06T19:15:21Z",
        "number":  87188,
        "author":  "jkoritzinsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-31T20:15:15Z",
        "body":  "### Description\n\nWhen calling a vararg P/Invoke defined in another assembly, the runtime tries to look up the metadata from the wrong module. This can cause a variety of issues, from throwing a BadImageFormatException to emitting an incorrect stub signature.\n\n### Reproduction Steps\n\nDefine the following P/Invoke in assembly A:\r\n\r\n```csharp\r\n[DllImport(\"msvcrt.dll\", CharSet = CharSet.Ansi, CallingConvention = CallingConvention.Cdecl)]\r\npublic static unsafe extern int _scprintf(string format, __arglist);\r\n```\r\n\r\nCall it from another assembly (Assembly B):\r\n\r\n```csharp\r\n_scprintf(\"%d\\n\", __arglist(42));\r\n```\n\n### Expected behavior\n\n\"42\" is printed out to the console.\n\n### Actual behavior\n\nBadImageFormatException if the method token for `_scprintf` is higher than the highest valid method token in assembly B.\r\n\r\nStack corruption if the method token for `_scprintf` in Assembly A corresponds to a method in Assembly B without the `preservesig` metadata bit set.\n\n### Regression?\n\nBased on code inspection, this issue has likely been present since .NET Framework.\n\n### Known Workarounds\n\nMove the call to the P/Invoke to the same assembly as the caller (or vice versa).\n\n### Configuration\n\n.NET 7.0.3 Windows x86\n\n### Other information\n\nThe failure is due to this line using `m_pModule` instead of `m_pMetadataModule`:\r\n\r\nhttps://github.com/dotnet/runtime/blob/10222f94e5d89b19959117dd9e5b8576ef63f878/src/coreclr/vm/dllimport.cpp#L4267",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOX9Kfcw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5f0p9z",
                                           "createdAt":  "2023-06-26T14:43:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fkelava",
                                           "body":  "Hi! Figured I\u0027d chime in here, seeing as I ran into this issue.\r\n\r\nI originally reported this issue through Discord and Jeremy kindly helped me discover what it was and filed it. Thanks again!\r\n\r\nAlthough the workaround given is fine for the time being, I\u0027d just like to let you know there is interest in seeing this fixed at some point. I know it\u0027s low priority, but I hope it\u0027s more _a few months_ than _a few years_ from now. Maybe in .NET 9, time permitting?\r\n\r\nIf there is no time to deal with it at present, that\u0027s fine too. It\u0027s a minor inconvenience at most; I\u0027m just commenting on the very naive assumption that the fix truly is a one-liner or at least not _too_ drastic.",
                                           "updatedAt":  "2023-06-26T14:43:51Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Calling a Vararg P/Invoke from another assembly fails to call underlying native function",
        "labels":  [
                       "os-windows",
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106661",
        "createdAt":  "2024-08-19T20:16:31Z",
        "number":  106661,
        "author":  "jonpryor",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-10-31T19:30:34Z",
        "body":  "### Description\r\n\r\n.NET 8.0.401 + macOS crashes, while .NET 8.0.303 doesn\u0027t.\r\n\r\n### Reproduction Steps\r\n\r\nAlas, not minimal:\r\n\r\n\r\n```console\r\n# Repro is from building the dotnet/java-interop repo\r\ngit clone https://github.com/dotnet/java-interop.git\r\ncd java-interop\r\ngit checkout fcad3368815dffd0f38f64384aa21b0b65367d68\r\ngit submodule update --init --recursive\r\n\r\n\r\n# ensure .NET 8.0.401 is used\r\nexport PATH=$HOME/Downloads/dotnet-sdk-8.0.401-osx-x64:$PATH\r\n\r\n# prepare\r\ndotnet build -t:Prepare Java.Interop.sln\r\n\r\n# build\r\ndotnet build Java.Interop.sln\r\n```\r\n\r\n### Expected behavior\r\n\r\nBuild completes without error.\r\n\r\nNote: requires that dotnet/java-interop dependencies already exist, which includes a C++ toolchain, Java SDK, etc.…\r\n\r\n### Actual behavior\r\n\r\nFails to build:\r\n\r\n```\r\ntmp7adcfcd1012f44439ffd2772eea8f2e1.exec.cmd: line 2: 89333 Segmentation fault: 11  \"…/dotnet-sdk-8.0.401-osx-x64/dotnet\" \"…/java-interop/bin/Debug-net8.0//jnimarshalmethod-gen.dll\" \"…/java-interop/samples/Hello-NativeAOTFromJNI/bin/Debug/Hello-NativeAOTFromJNI.dll\" -v -v --keeptemp -L \"…/java-interop/samples/Hello-NativeAOTFromJNI/bin/Debug/\"\r\n…/java-interop/samples/Hello-NativeAOTFromJNI/Hello-NativeAOTFromJNI.targets(44,5): error MSB3073: The command \"\"…/dotnet-sdk-8.0.401-osx-x64/dotnet\" \"…/java-interop/bin/Debug-net8.0//jnimarshalmethod-gen.dll\" \"…/java-interop/samples/Hello-NativeAOTFromJNI/bin/Debug/Hello-NativeAOTFromJNI.dll\" -v -v --keeptemp -L \"…/java-interop/samples/Hello-NativeAOTFromJNI/bin/Debug/\" \" exited with code 139. […/java-interop/samples/Hello-NativeAOTFromJNI/Hello-NativeAOTFromJNI.csproj]\r\n```\r\n\r\nRe-run with diagnostic logging enabled:\r\n\r\n```\r\ndotnet build -v:diag Java.Interop.sln \u003e b.txt\r\n```\r\n\r\nand there isn\u0027t much additional output regarding the crash.\r\n\r\n### Regression?\r\n\r\nYes.  This same repo builds with .NET 8.0.303.  See also: https://github.com/dotnet/java-interop/pull/1245\r\n\r\n### Known Workarounds\r\n\r\nUse .NET 8.0.303.\r\n\r\n### Configuration\r\n\r\n* .NET 8.0.401\r\n* macOS Sonoma 16.4.1\r\n* x64\r\n* No idea if it\u0027s specific to this configuration\r\n* Not using Blazor\r\n\r\n### Other information\r\n\r\nThis doesn\u0027t appear to fail on Linux-x64.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkhI1WA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6I7zKA",
                                           "createdAt":  "2024-08-19T20:19:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonpryor",
                                           "body":  "Note: you may need to run `dotnet build Java.Inteorp.sln` more than once to get to the crash.  I\u0027ve also seen this error, which doesn\u0027t repro:\r\n\r\n```\r\n…/dotnet-sdk-8.0.401-osx-x64/sdk/8.0.401/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(379,5): error MSB4018: The \"GenerateRuntimeConfigurationFiles\" task failed unexpectedly. […/java-interop/build-tools/jnienv-gen/jnienv-gen.csproj]\r\n…/dotnet-sdk-8.0.401-osx-x64/sdk/8.0.401/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(379,5): error MSB4018: System.IO.IOException: The process cannot access the file \u0027…/java-interop/bin/BuildDebug-net8.0/jnienv-gen.runtimeconfig.json\u0027 because it is being used by another process. […/java-interop/build-tools/jnienv-gen/jnienv-gen.csproj]\r\n…/dotnet-sdk-8.0.401-osx-x64/sdk/8.0.401/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(379,5): error MSB4018:    at Microsoft.Win32.SafeHandles.SafeFileHandle.Init(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Int64\u0026 fileLength, UnixFileMode\u0026 filePermissions) […/java-interop/build-tools/jnienv-gen/jnienv-gen.csproj]\r\n…/dotnet-sdk-8.0.401-osx-x64/sdk/8.0.401/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(379,5): error MSB4018:    at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, UnixFileMode openPermissions, Int64\u0026 fileLength, UnixFileMode\u0026 filePermissions, Boolean failForSymlink, Boolean\u0026 wasSymlink, Func`4 createOpenException) […/java-interop/build-tools/jnienv-gen/jnienv-gen.csproj]\r\n…/dotnet-sdk-8.0.401-osx-x64/sdk/8.0.401/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(379,5): error MSB4018:    at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode) […/java-interop/build-tools/jnienv-gen/jnienv-gen.csproj]\r\n…/dotnet-sdk-8.0.401-osx-x64/sdk/8.0.401/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(379,5): error MSB4018:    at System.IO.File.Create(String path) […/java-interop/build-tools/jnienv-gen/jnienv-gen.csproj]\r\n…/dotnet-sdk-8.0.401-osx-x64/sdk/8.0.401/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(379,5): error MSB4018:    at Microsoft.NET.Build.Tasks.GenerateRuntimeConfigurationFiles.WriteToJsonFile(String fileName, Object value) […/java-interop/build-tools/jnienv-gen/jnienv-gen.csproj]\r\n…/dotnet-sdk-8.0.401-osx-x64/sdk/8.0.401/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(379,5): error MSB4018:    at Microsoft.NET.Build.Tasks.GenerateRuntimeConfigurationFiles.WriteRuntimeConfig(RuntimeFramework[] runtimeFrameworks, LockFileTargetLibrary platformLibrary, Boolean isFrameworkDependent, IList`1 packageFolders) […/java-interop/build-tools/jnienv-gen/jnienv-gen.csproj]\r\n…/dotnet-sdk-8.0.401-osx-x64/sdk/8.0.401/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(379,5): error MSB4018:    at Microsoft.NET.Build.Tasks.GenerateRuntimeConfigurationFiles.ExecuteCore() […/java-interop/build-tools/jnienv-gen/jnienv-gen.csproj]\r\n…/dotnet-sdk-8.0.401-osx-x64/sdk/8.0.401/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(379,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() […/java-interop/build-tools/jnienv-gen/jnienv-gen.csproj]\r\n…/dotnet-sdk-8.0.401-osx-x64/sdk/8.0.401/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(379,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Execute() […/java-interop/build-tools/jnienv-gen/jnienv-gen.csproj]\r\n…/dotnet-sdk-8.0.401-osx-x64/sdk/8.0.401/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(379,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(TaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) […/java-interop/build-tools/jnienv-gen/jnienv-gen.csproj]\r\n```\r\n\r\nI\u0027m not (currently) reporting this MSB4018 from `GenerateRuntimeConfigurationFiles`.",
                                           "updatedAt":  "2024-08-19T20:19:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LwD05",
                                           "createdAt":  "2024-09-11T20:22:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "@AaronRobinsonMSFT Did we make any servicing fixes that could have caused this?",
                                           "updatedAt":  "2024-09-11T20:22:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LwNi7",
                                           "createdAt":  "2024-09-11T20:46:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODyABoQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2024-09-12T13:27:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This might have been introduced by https://github.com/dotnet/runtime/pull/104818 and fixed by https://github.com/dotnet/runtime/pull/107199 .\r\n\r\ncc @janvorli \r\n\r\n",
                                           "updatedAt":  "2024-09-11T20:46:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LwrdE",
                                           "createdAt":  "2024-09-11T22:13:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "If the crash occurs only under Rosetta and not on a real x64 macOS and there is some hardware exception handling going on, this could be what @jkotas said.",
                                           "updatedAt":  "2024-09-11T22:13:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SEjVY",
                                           "createdAt":  "2024-10-31T19:30:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonpryor",
                                           "body":  "@janvorli [wrote](https://github.com/dotnet/runtime/issues/106661#issuecomment-2344793924):\n\n\u003e If the crash occurs only under Rosetta and not on a real x64 macOS … this could be what @jkotas said.\n\nI was experiencing this on an x64 macOS machine.  No arm64, no Rosetta.",
                                           "updatedAt":  "2024-10-31T19:30:33Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  ".NET 8.0.401 + macOS crashes, while .NET 8.0.303 doesn\u0027t.",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106905",
        "createdAt":  "2024-08-23T21:43:04Z",
        "number":  106905,
        "author":  "KaizerT",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-18T06:58:21Z",
        "body":  "### Description\n\nIn summary, when validating a local user, PrincipalContext.ValidateCredentials throws an exception after a single local user is verified. It doesn\u0027t matter if the credentials are correct or not, the exception is thrown.  The same code works when validating against an Active Directory.\r\n\r\nThis is a duplicate of the issue below.\r\nhttps://github.com/dotnet/runtime/issues/83269\r\n\r\nIn the issue it is said to have been broken for version 7.0 and 8.0 and fixed last year. However we are running with 8.0 and are experiencing the same issue.\r\n\r\n I\u0027ve tried downgrading System.DirectoryServices and System.DirectoryServices.AccountManagement to 7.0 and 6.0 with the same issue.\r\n\n\n### Reproduction Steps\n\n[PrincipalContextIssueRepro.zip](https://github.com/user-attachments/files/16733820/PrincipalContextIssueRepro.zip)\r\nHere\u0027s a small sample project that duplicates the behavior\n\n### Expected behavior\n\nUnlimited amount of local user credentials can be verified\n\n### Actual behavior\n\nException is thrown after 1 user is successfully verified. After that only that user can be verified. Exception is thrown for other users or when the first user is verified with the wrong password.\n\n### Regression?\n\nThis is a duplicate issue https://github.com/dotnet/runtime/issues/83269\n\n### Known Workarounds\n\nWorkaround is restarting the application (recycle for web apps) but would break right after.\n\n### Configuration\n\n.net 8.0.6\r\nWindows 10 Enterprise Build 19045.4651 x64\r\nWindows 11 Pro Build 22621.4037 x64\r\nVistual Studio Enterprise 2022 17.10.4\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnjyFvQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Jjvhz",
                                           "createdAt":  "2024-08-23T21:43:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-directoryservices, @jay98014\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-23T21:43:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JuA5-",
                                           "createdAt":  "2024-08-26T15:56:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@jkoritzinsky can you have a look?  It seems that this was fixed by you last year, https://github.com/dotnet/runtime/commit/b039eab2303355bc3a306cfb6f234b9a63a180e2\r\n\r\nI confirm that fix shipped in 8.0, and was backported to 7.0 in System.DirectoryServices.AccountManagement 7.0.1.  The repro is using package version 8.0.0.",
                                           "updatedAt":  "2024-08-26T15:56:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LvTRQ",
                                           "createdAt":  "2024-09-11T18:50:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "@jkoritzinsky looks the finally block that releases the pointer in UnsafeNativeMethods.cs supposed to added to the outer try/catch block as it calls `Interop.Activeds.ADsOpenObject` in outer block\r\nhttps://github.com/dotnet/runtime/blob/a3365e4c442a728bc82e59d5583cf83bc6d31d72/src/libraries/System.DirectoryServices/src/Interop/UnsafeNativeMethods.cs#L35-L50",
                                           "updatedAt":  "2024-09-11T18:50:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MSfRG",
                                           "createdAt":  "2024-09-16T18:45:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@buyaa-n were you able to verify that\u0027s the problem here?  It seems unusual since the outer try/catch is handling an `EntryPointNotFoundException` which I would expect to only be hit if there was an issue invoking `ADsOpenObject` - therefor nothing to release. \r\n\r\nI gave the repro a try, first by adapting to a console app, then trying the original winforms application.  Validating local user accounts I created for the purpose of repro.  I could not reproduce this issue.\r\n\r\n@KaizerT - I\u0027m not sure what you\u0027re hitting but your repro worked for me.  One thing I did notice about your repro code is that you leak the `PrincipalContext` and `UserPrincipal` types - but I don\u0027t think that should matter here.  Here\u0027s a screen cap of what I see: [Recording-20240916_114150.webm](https://github.com/user-attachments/assets/e7404d63-52e8-4683-a3cd-0289217b60b0)\r\n",
                                           "updatedAt":  "2024-09-16T18:45:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MSlhA",
                                           "createdAt":  "2024-09-16T18:56:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KaizerT",
                                           "body":  "Hello @ericstj ,\r\n\r\nI just tried it again and I\u0027m getting the same error, this is on the same repro and I even fixed the context leak on the project. Here\u0027s a recording I made to show the behavior.\r\n\r\nhttps://github.com/user-attachments/assets/c6c950f8-a81a-4187-9440-d35adb714f49\r\n\r\nHere\u0027s the full exception\r\n\r\nSystem.DirectoryServices.AccountManagement.PrincipalOperationException: An extended error has occurred.\r\n\r\n ---\u003e System.Runtime.InteropServices.COMException (0x800704B8): An extended error has occurred.\r\n\r\n   at System.DirectoryServices.AccountManagement.UnsafeNativeMethods.IADs.Get(String bstrName)\r\n   at System.DirectoryServices.AccountManagement.CredentialValidator.BindSam(String target, String userName, String password)\r\n   --- End of inner exception stack trace ---\r\n   at System.DirectoryServices.AccountManagement.CredentialValidator.BindSam(String target, String userName, String password)\r\n   at System.DirectoryServices.AccountManagement.CredentialValidator.Validate(String userName, String password)\r\n   at System.DirectoryServices.AccountManagement.PrincipalContext.ValidateCredentials(String userName, String password)\r\n   at PrincipalContextIssueRepro.Form1.cmdLogin_Click(Object sender, EventArgs e) in C:\\Users\\MDumaraos\\source\\repos\\PrincipalContextIssueRepro\\PrincipalContextIssueRepro\\Form1.cs:line 51",
                                           "updatedAt":  "2024-09-16T18:58:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MSoRE",
                                           "createdAt":  "2024-09-16T19:01:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KaizerT",
                                           "body":  "I was able to reproduce this in separate environments, one a physical laptop, and one on a Windows 11 VM. We\u0027re just pretty lost on what could\u0027ve caused this since it\u0027s not doing domain verification at this point, and even then the Windows 11 VM was unjoined from any domain. A point in the right direction would be appreciated, thank you. @ericstj ",
                                           "updatedAt":  "2024-09-16T19:01:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MSqRq",
                                           "createdAt":  "2024-09-16T19:05:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODyazMQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KaizerT",
                                                                               "createdAt":  "2024-09-16T19:06:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "The callstack helps.",
                                           "updatedAt":  "2024-09-16T19:05:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MS6UU",
                                           "createdAt":  "2024-09-16T19:40:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "This looks different than #83269.  The call to `ADsOpenObject` was successful, but the object returned is failing when the `Get` method is called.  https://github.com/dotnet/runtime/blob/76f10f9f3c995c13c53cd9be743fdac918fbf61a/src/libraries/System.DirectoryServices.AccountManagement/src/System/DirectoryServices/AccountManagement/Context.cs#L126\r\nIt\u0027s failing with `0x800704B8` which is `ERROR_EXTENDED_ERROR` or one of over dozen LDAP specific error codes: https://learn.microsoft.com/en-us/windows/win32/adsi/win32-error-codes-for-adsi-2-0\r\nI can\u0027t tell what that might mean from https://learn.microsoft.com/en-us/windows/win32/api/iads/nf-iads-iads-get as I\u0027m no AD expert.  This library is actually owned by @BRDPM @grubioe @jay98014 but we try to maintain it and triage any issues.\r\n\r\nJust to double-check  @KaizerT  you mentioned this doesn\u0027t work in 6.0, 7.0, and 8.0 for you, right?  Did it ever work?  Have you tried package version 5.0.0 or 4.7.0 or `System.DirectoryServices.AccountManagement`?  Did it work on .NETFramework?  Just trying to understand where the problem might be.\r\n\r\nIn the previous issue we were able to isolate the problem to a change made to interop.  In this case we don\u0027t have anything that shows this ever working, nor do we have a repro of your problem to debug.",
                                           "updatedAt":  "2024-09-16T19:40:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MS8J6",
                                           "createdAt":  "2024-09-16T19:44:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KaizerT",
                                           "body":  "Hello eric, We\u0027ve confirmed that it works on .Net Framework 4.8 since this code is basically copied form the UI part of the system and was just updated to .Net 8, this was confirmed in both of the environments where it failed during our tests. I haven\u0027t tried any packages below 6.0 but I can try with the repro project. I only tried the lower version of the package in our actual microservice.",
                                           "updatedAt":  "2024-09-16T19:44:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MTRKn",
                                           "createdAt":  "2024-09-16T20:15:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KaizerT",
                                           "body":  "@ericstj I\u0027ve uploaded the repro to a [public repo](https://github.com/KaizerT/dotnet-runtime-issue-106905) and added branches for all the lower versions to 4.7.0. All versions had the same issue with my windows 10 machine. \r\n\r\nAlso, regarding System.DirectoryServices.AccountManagement, if you check the repro it\u0027s already being used by the application. \r\n![image](https://github.com/user-attachments/assets/602eeb86-5f4b-491e-9dfa-e6b499929db3)\r\n\r\n\r\nDo I need to create this ticket in another repo for the right team to work on it and investigate or is this fine in this project?\r\n\r\nThanks for the help so far.\r\n",
                                           "updatedAt":  "2024-09-16T20:15:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MTae_",
                                           "createdAt":  "2024-09-16T20:22:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "If I understand correctly, you mention this has always been broken, even using package version 4.7.0 - but it works on .NETFramework?  (apologies for closing this again , that was unintentional)",
                                           "updatedAt":  "2024-09-16T20:23:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MTlI3",
                                           "createdAt":  "2024-09-16T20:30:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KaizerT",
                                           "body":  "Yes, this has been broken for local authentication since we created the project for .net 8.0. It works fine when authenticated against a domain. \r\n\r\nLocal and domain authentication works fine on our web UI project using .Net Framework. The package is not explicitly referenced in the .Net Framework project due to the nature of .Net Framework containing everything it can by default though. \r\n\r\nWould it help if I create another project but in .Net Framework?",
                                           "updatedAt":  "2024-09-16T20:30:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MT2pU",
                                           "createdAt":  "2024-09-16T20:54:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I\u0027m not sure your repro will help us in any case as right now, it\u0027s no-repo for us.  \r\n\r\nIf every version of those packages is broken in the same way for you, then we also don\u0027t have a change to look to as a possible source of regression.  It could be a problem with the initial port of this code to .NETCore if you\u0027re saying this exact same app works on .NET Framework, but not on any version of .NETCore.",
                                           "updatedAt":  "2024-09-16T21:03:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MT4Rd",
                                           "createdAt":  "2024-09-16T20:58:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KaizerT",
                                           "body":  "ok, thanks for investigating it so far and looking forward when the rest of the package owners can have a look at it.",
                                           "updatedAt":  "2024-09-16T20:58:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MUBDd",
                                           "createdAt":  "2024-09-16T21:24:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I gave your repro a try on two different machines here.  One domain joined and one not.  Both cases I created new users with `net user name password /add` to run the test.  In both cases the app worked correctly for me.  I\u0027m using Windows 11 23H2, x64. \r\n\r\nOne thing I noticed that\u0027s somewhat unusual is what this method actually does to check the user name.  It\u0027s fetching the server _computer_ object:\r\nhttps://github.com/dotnet/runtime/blob/657f18dbd8ac9ffae3abb79104d038155387df31/src/libraries/System.DirectoryServices.AccountManagement/src/System/DirectoryServices/AccountManagement/Context.cs#L88\r\n\r\nThen accessing the `name` property of that.  Is there anything unusual about the computer name of the systems you\u0027re testing?",
                                           "updatedAt":  "2024-09-16T21:26:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MUDi8",
                                           "createdAt":  "2024-09-16T21:33:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KaizerT",
                                           "body":  "For the computer names, I don\u0027t think we have weird ones. The environments are as follows:\r\n\r\n1. Windows 10 Enterprise, 22H2 x64, Name: USLKZ220C9Y3\r\n2. Windows 11 Pro 22H2 x64, Name: Win11Pro-DXT31",
                                           "updatedAt":  "2024-09-16T21:33:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6McHJE",
                                           "createdAt":  "2024-09-17T15:09:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "On the off-chance that there is some runtime / interop bug we\u0027re missing that\u0027s causing this behavior -- could you please share your .NET 8.0 runtime version?  You can get this from `dotnet --info`.  I\u0027m still perplexed that we can\u0027t reproduce your problem.",
                                           "updatedAt":  "2024-09-17T15:09:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6McJhg",
                                           "createdAt":  "2024-09-17T15:12:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KaizerT",
                                           "body":  "Here\u0027s for my dev environment, the windows 10 laptop:\r\n\r\n![image](https://github.com/user-attachments/assets/18d1b37a-b328-43df-9f03-f3a22f453c69)\r\n\r\nAnd here\u0027s the windows 11 VM\r\n\r\n![image](https://github.com/user-attachments/assets/5bc4493d-abf2-4c1f-918b-d06c9635858a)\r\n",
                                           "updatedAt":  "2024-09-17T15:12:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bdo_v",
                                           "createdAt":  "2025-01-22T20:51:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "This one remains no-repro for us.  I just gave another try using the latest 8.0 packages and 8.0 runtime.",
                                           "updatedAt":  "2025-01-22T20:51:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eO7SE",
                                           "createdAt":  "2025-02-12T19:55:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PavPav",
                                           "body":  "Investigating similar problem in our project. Found first time on System.DirectoryServices.AccountManagement 6.0.0 and now still reproducible after moving to System.DirectoryServices.AccountManagement 8.0.0.\nNot yet sure that it is duplicate of #83269, because of error code (0x800704C3) so it is more likely to be same as #111683. \nStack trace is:\n```\n ---\u003e System.Runtime.InteropServices.COMException (0x800704C3): Multiple connections to a server or shared resource by the same user, using more than one user name, are not allowed. Disconnect all previous connections to the server or shared resource and try again.\n\n   at System.DirectoryServices.AccountManagement.UnsafeNativeMethods.IADs.Get(String bstrName)\n   at System.DirectoryServices.AccountManagement.CredentialValidator.BindSam(String target, String userName, String password)\n   --- End of inner exception stack trace ---\n   at System.DirectoryServices.AccountManagement.CredentialValidator.BindSam(String target, String userName, String password)\n```\nAnd we are able to reproduce it only during performance testing so it is not always failing after 1st successful try. It takes about 100 successful tries (All 100 tries are with same usename and password) until we face this issue (all other tries after getting this error are unsuccessful no matter if it is same user or another users)).\nAs @ericstj mentioned [here](https://github.com/dotnet/runtime/issues/111683#issuecomment-2613356914) it might be something related to multiple concurrent threads.\n\nAnd code from where credential check is called is quite simple\n\n```\n        public Task\u003cbool\u003e Authenticate(string username, string password)\n        {\n            using var context = new PrincipalContext(ContextType.Machine);\n            var result = context.ValidateCredentials(username, password);\n            return Task.FromResult(result);\n        }\n```\n",
                                           "updatedAt":  "2025-02-12T20:13:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ePHx6",
                                           "createdAt":  "2025-02-12T20:23:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@jkoritzinsky -- does any of this ring a bell as possible fallout from the interop changes that were made that started all this?  I believe we began seeing problems after the `LibraryImport` changes that replaced runtime interop with the source gen.  Perhaps different concurrency behavior with the source generated code?  Or maybe a leak in that source gen code?\n\n-- moving to interop area for visibility",
                                           "updatedAt":  "2025-02-12T20:24:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ePIW9",
                                           "createdAt":  "2025-02-12T20:25:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-12T20:25:08Z"
                                       }
                                   ],
                         "totalCount":  22
                     },
        "title":  "PrincipalContext.ValidateCredentials against the local SAM store fails with a PrincipalOperationException after any successful call to ValidateCredentials against the local SAM store",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110760",
        "createdAt":  "2024-12-16T22:32:49Z",
        "number":  110760,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-18T06:38:47Z",
        "body":  "I\u0027m not able to find an instance of \"CallConvFastcall\" string in the src/tests tree.\n\nhttps://github.com/dotnet/runtime/pull/110685#issuecomment-2544689307",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOl9Aaxw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6X0BrH",
                                           "createdAt":  "2024-12-16T22:33:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-16T22:33:20Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Missing test coverage for UnmanagedCallersOnly with CallconvFastcall",
        "labels":  [
                       "help wanted",
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112080",
        "createdAt":  "2025-02-03T01:34:00Z",
        "number":  112080,
        "author":  "yaakov-h",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODED5Rg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CEbbinghaus",
                                            "createdAt":  "2025-02-03T01:50:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xPaw",
                                            "createdAt":  "2025-02-03T09:01:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JustArchi",
                                            "createdAt":  "2025-02-03T12:14:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ejhg",
                                            "createdAt":  "2025-02-22T02:03:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jdk-21",
                                            "createdAt":  "2025-04-30T09:09:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sportfloh",
                                            "createdAt":  "2025-06-17T08:08:15Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-04-22T13:02:15Z",
        "body":  "### Description\n\n.NET runtime 9.0.1 seems to have introduced a breaking change with regards to how `dyld` on macOS resolves relative paths to system frameworks.\n\nI suspect this will be related to the [change in pipelines](https://github.com/dotnet/runtime/compare/v9.0.0..v9.0.1#diff-39689c937bba633486600e973f3b821449f8d0f485b3eb7ee545ab8509c37992) from macos-12 to macos-13:\n\n```diff\n        # OSX Public Build Pool (we don\u0027t have on-prem OSX BuildPool).\n        ${{ if and(in(parameters.osGroup, \u0027osx\u0027, \u0027maccatalyst\u0027, \u0027ios\u0027, \u0027iossimulator\u0027, \u0027tvos\u0027, \u0027tvossimulator\u0027), eq(variables[\u0027System.TeamProject\u0027], \u0027public\u0027)) }}:\n-          vmImage: \u0027macos-12\u0027\n+          vmImage: \u0027macos-13\u0027\n\n        # OSX Internal Pool\n        ${{ if and(in(parameters.osGroup, \u0027osx\u0027, \u0027maccatalyst\u0027, \u0027ios\u0027, \u0027iossimulator\u0027, \u0027tvos\u0027, \u0027tvossimulator\u0027), ne(variables[\u0027System.TeamProject\u0027], \u0027public\u0027)) }}:\n          name: \"Azure Pipelines\"\n-          vmImage: \u0027macOS-12\u0027\n+          vmImage: \u0027macOS-13\u0027\n          os: macOS\n\n        # Official Build Windows Pool\n```\n\n(I don\u0027t know enough about the .NET build engineering side so I could be wrong here, but that is definitely sus.)\n\nIs there a way to restore the old behaviour for the .NET 9 lifecycle?\n\nIf not, should this at least be documented somewhere? I didn\u0027t see this in any of the release notes.\n\nSee https://github.com/SteamRE/SteamKit/pull/1501 and https://github.com/Homebrew/homebrew-core/issues/206331#issuecomment-2629541596 for details.\n\n### Reproduction Steps\n\nAttempt to DllImport/LibraryImport a system framework using a relative path on macOS e.g. `CoreFoundation.framework/CoreFoundation`\n\n### Expected behavior\n\nThe P/Invoke function is loaded and executed.\n\n### Actual behavior\n\n```\nSystem.DllNotFoundException : Unable to load shared library \u0027CoreFoundation.framework/CoreFoundation\u0027 or one of its dependencies. In order to help diagnose loading problems, consider setting the DYLD_PRINT_LIBRARIES environment variable: \ndlopen(/Users/runner/.dotnet/shared/Microsoft.NETCore.App/9.0.1/CoreFoundation.framework/CoreFoundation.dylib, 0x0001): tried: \u0027/Users/runner/.dotnet/shared/Microsoft.NETCore.App/9.0.1/CoreFoundation.framework/CoreFoundation.dylib\u0027 (no such file), \u0027/System/Volumes/Preboot/Cryptexes/OS/Users/runner/.dotnet/shared/Microsoft.NETCore.App/9.0.1/CoreFoundation.framework/CoreFoundation.dylib\u0027 (no such file), \u0027/Users/runner/.dotnet/shared/Microsoft.NETCore.App/9.0.1/CoreFoundation.framework/CoreFoundation.dylib\u0027 (no such file)\ndlopen(/Users/runner/work/SteamKit/SteamKit/SteamKit2/Tests/bin/Debug/net8.0/CoreFoundation.framework/CoreFoundation.dylib, 0x0001): tried: \u0027/Users/runner/work/SteamKit/SteamKit/SteamKit2/Tests/bin/Debug/net8.0/CoreFoundation.framework/CoreFoundation.dylib\u0027 (no such file), \u0027/System/Volumes/Preboot/Cryptexes/OS/Users/runner/work/SteamKit/SteamKit/SteamKit2/Tests/bin/Debug/net8.0/CoreFoundation.framework/CoreFoundation.dylib\u0027 (no such file), \u0027/Users/runner/work/SteamKit/SteamKit/SteamKit2/Tests/bin/Debug/net8.0/CoreFoundation.framework/CoreFoundation.dylib\u0027 (no such file)\ndlopen(CoreFoundation.framework/CoreFoundation.dylib, 0x0001): tried: \u0027CoreFoundation.framework/CoreFoundation.dylib\u0027 (no such file), \u0027/System/Volumes/Preboot/Cryptexes/OSCoreFoundation.framework/CoreFoundation.dylib\u0027 (no such file), \u0027/usr/lib/CoreFoundation.framework/CoreFoundation.dylib\u0027 (no such file, not in dyld cache), \u0027CoreFoundation.framework/CoreFoundation.dylib\u0027 (no such file)\ndlopen(/Users/runner/.dotnet/shared/Microsoft.NETCore.App/9.0.1/CoreFoundation.framework/CoreFoundation, 0x0001): tried: \u0027/Users/runner/.dotnet/shared/Microsoft.NETCore.App/9.0.1/CoreFoundation.framework/CoreFoundation\u0027 (no such file), \u0027/System/Volumes/Preboot/Cryptexes/OS/Users/runner/.dotnet/shared/Microsoft.NETCore.App/9.0.1/CoreFoundation.framework/CoreFoundation\u0027 (no such file), \u0027/Users/runner/.dotnet/shared/Microsoft.NETCore.App/9.0.1/CoreFoundation.framework/CoreFoundation\u0027 (no such file)\ndlopen(/Users/runner/work/SteamKit/SteamKit/SteamKit2/Tests/bin/Debug/net8.0/CoreFoundation.framework/CoreFoundation, 0x0001): tried: \u0027/Users/runner/work/SteamKit/SteamKit/SteamKit2/Tests/bin/Debug/net8.0/CoreFoundation.framework/CoreFoundation\u0027 (no such file), \u0027/System/Volumes/Preboot/Cryptexes/OS/Users/runner/work/SteamKit/SteamKit/SteamKit2/Tests/bin/Debug/net8.0/CoreFoundation.framework/CoreFoundation\u0027 (no such file), \u0027/Users/runner/work/SteamKit/SteamKit/SteamKit2/Tests/bin/Debug/net8.0/CoreFoundation.framework/CoreFoundation\u0027 (no such file)\ndlopen(CoreFoundation.framework/CoreFoundation, 0x0001): tried: \u0027CoreFoundation.framework/CoreFoundation\u0027 (no such file), \u0027/System/Volumes/Preboot/Cryptexes/OSCoreFoundation.framework/CoreFoundation\u0027 (no such file), \u0027/usr/lib/CoreFoundation.framework/CoreFoundation\u0027 (no such file, not in dyld cache), \u0027CoreFoundation.framework/CoreFoundation\u0027 (no such file)\n```\n\n### Regression?\n\nThis worked in .NET 8 and seems to also work in .NET 9.0.0. It fails in .NET 9.0.1.\n\n### Known Workarounds\n\nWorkaround 1: Launch with the environment variable `DYLD_FRAMEWORK_PATH=/System/Library/Frameworks` preset.\n\nWorkaround 2: Recompile and redeploy binaries with DllImport/LibraryImport set to an absolute path to the framework binaries, rather than a relative path.\n\n### Configuration\n\nmacos-14 and macos-latest on GitHub Actions, as well as my MacBook Pro (M2 Pro) with Sequoia 15.3 (24D60) arm64\n\n.NET 9.0.1\n\n### Other information\n\ncc @dotnet/compat ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqCkI5w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6cvt2_",
                                           "createdAt":  "2025-02-03T02:27:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-03T02:27:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cwuwm",
                                           "createdAt":  "2025-02-03T05:36:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@elinor-fung Thoughts on what might have changed here?",
                                           "updatedAt":  "2025-02-03T05:36:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cwzZ7",
                                           "createdAt":  "2025-02-03T05:54:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEHPwNA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ejhg",
                                                                               "createdAt":  "2025-02-22T02:12:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "yaakov-h",
                                           "body":  "FWIW I\u0027m also seeing this now on .NET 8.0.12.\n\nIf I run the failing unit test with `DOTNET_ROLL_FORWARD=disable` it passes, with `DOTNET_ROLL_FORWARD=LatestPatch` it fails.\n\nI suspect that with `\u003cRollForward\u003eLatestMajor\u003c/RollForward\u003e` in the test .csproj it was rolling forward to 9.0 so I\u0027m not sure which patch of .NET 8 introduced the same bug as I tried to set several but they would have all been skipped due to rollforward behaviour.\n\nThough given that the same vmImage update occurred between .NET 8.0.11 and .NET 8.0.12, I would put my money on that...",
                                           "updatedAt":  "2025-02-03T05:54:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6c24ym",
                                           "createdAt":  "2025-02-03T17:30:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "I don’t think we changed anything in the code, so I agree that if something changed the OS image update looks notable. But I have no idea what could have changed in 13 to cause this type of code change. ",
                                           "updatedAt":  "2025-02-03T17:30:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ff7So",
                                           "createdAt":  "2025-02-22T02:15:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ejhg",
                                           "body":  "I am seeing this issue in sdk `8.0.405` and `8.0.406`.  (Issue is absent in `8.0.404` and prior.)",
                                           "updatedAt":  "2025-02-22T02:36:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hKw1V",
                                           "createdAt":  "2025-03-06T14:07:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DennisDyallo",
                                           "body":  "We\u0027re seeing this issue in the [Yubico.NET.SDK](https://github.com/Yubico/Yubico.NET.SDK) which loads some native libraries in order to do some native work (connecting to USB-devices, CFString, etc.)\n\nWe came across the error when upgrading our integration test and example projects to .net8 and .net9 and running on Mac (Sequoia 15.2, 15.3.1)\n\nWhile these workarounds work fine in our own integration testing, it wont work well downstream with the end users of our SDK/3rd party client apps.\n\n**Would like to see a confirmation from MSFT on the issue, the intended fix and forward guidance.** ",
                                           "updatedAt":  "2025-03-06T15:02:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oKQjn",
                                           "createdAt":  "2025-04-22T13:02:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXFAkA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ejhg",
                                                                               "createdAt":  "2025-04-23T15:48:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DennisDyallo",
                                                                               "createdAt":  "2025-06-18T15:13:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "DennisDyallo",
                                           "body":  "Any news? ",
                                           "updatedAt":  "2025-04-22T13:02:13Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  ".NET 9.0.1 Breaking Change in macOS native library resolution",
        "labels":  [
                       "area-Interop-coreclr",
                       "regression-from-last-release"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112104",
        "createdAt":  "2025-02-03T19:42:54Z",
        "number":  112104,
        "author":  "seanoct",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-28T21:03:45Z",
        "body":  "### Description\n\nWe’re seeing this issue when we try to migrate our solution from .NET 6 to .NET 8.\n\nOnce we got the code compiling and running, our application freezes. I guess something changed from .NET 6 to .NET 8 that isn’t apparent.\n\nAfter some digging around, this is what I\u0027ve found.\nWe have some 3rd party objects that implement `IDispose`. The 3rd party objects seems to do a `lock (this) {}` in their `Dispose` and it is out of our control.\n\nNow when we instantiate an instance of this object inside a `using {}` block, the code hangs at the closing scope.\n\nkey.Down() returns a new instance of `SegmentKey` (as far as I can tell from VS decompilation) with some vendor bookkeeping logic.\n\nIf we remove the `using` block, the GC thread will freeze (eventually) – I’m assuming that it’s also hitting the lock.\n\nThis is what our code looks like when it freezes:\n```\npublic static bool HasSubkey(this SegmentKey key, string name)\n{\n    using (SegmentKey subkey = key.Down(name, false))\n    {\n        try\n        {\n            return subkey.Name() == name;\n        }\n        catch { }\n    } // freezes here\n    return false;\n}\n```\n\nThis is what the SegmentKey’s (3rd party) Dispose looks like from VS decompilation:\n```\npublic override void Dispose()\n{\n    lock (this) // debugger says that we freeze here\n    {\n        .\n        .\n        .\n    }\n}\n```\n\nLooking into this, I peeked around the memory and cross referenced with documentation on how CLR objects work (https://mycodingplace.wordpress.com/2018/01/10/object-header-get-complicated/). I see this:\n\n![Image](https://github.com/user-attachments/assets/0e499b9d-29a4-4e12-bb0a-0cfc9587ec75)\n\nIf my understanding is correct, that value of `0x0100007f` indicates that our object is `BIT_SBLK_SPIN_LOCK`’ed.\n\nI thought maybe the vendor is doing something silly, so I experimented with a plain C# object. It too had `BIT_SBLK_SPIN_LOCK` (among other bits set).\n\n![Image](https://github.com/user-attachments/assets/0f2bb3f8-adaf-4508-8d45-f34500fc3620)\n\nIf I try to lock o, then the thread freezes – even if I do so directly after allocation:\n```\npublic static bool HasSubkey(this SegmentKey key, string name)\n{\n    System.Object o = new System.Object();\n    lock (o) { } // freezes on lock\n\n    using (SegmentKey subkey = key.Down(name, false))\n    {\n        try\n        {\n            return subkey.Name() == name;\n        }\n        catch { }\n    }\n    return false;\n}\n```\n\nI don\u0027t think threads are involved. This is all happening on the main thread. It _seems_ like the main thread is deadlocking itself.\n\nFor me, this is 100% reproducible on .NET 8. It always happens on the 4th call to `HasSubKey` (which I determined by counting breakpoint hits).\n\nI tried clearing out the bin/ directory and forcing a clean rebuild. Didn\u0027t help.\n\nI’ve also tried the `clrgc` trick from this post: https://maoni0.medium.com/is-the-regression-in-gc-or-something-else-38f10018dd21 (which I discovered after reading through https://github.com/dotnet/runtime/issues/95191). I was successfully able to load clrgc, but it didn’t have any noticeable effect on preventing the freeze.\n\n### Reproduction Steps\n\nnot sure if I can provide a sandboxed repro steps\n\n### Expected behavior\n\na newly instantiated object isn\u0027t locked\n\n### Actual behavior\n\na newly instantiated object is locked\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nWindows 11 x64\n\ntrying to migrate .NET 6 -\u003e 8\n\n\n\n### Other information\n\nNot sure if this is useful, I think if you try to do `Monitor.TryLock()` on this object, the function never returns -- and the thread deadlocks as well",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOndhulw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6c4VVw",
                                           "createdAt":  "2025-02-03T20:32:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-03T20:32:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6c4YtD",
                                           "createdAt":  "2025-02-03T20:40:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The memory that the new objects are allocated from is expected to be filled with zeros. From your screenshots, it looks like that `3ff000` was somehow written into this memory and that makes the object appear locked. We need to find how `3ff000` got written into that memory.\n\nWhat\u0027s the debugger and version that you use to debug the app? Does the problem reproduce without your debugger attached? ",
                                           "updatedAt":  "2025-02-03T20:40:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6c4Z-b",
                                           "createdAt":  "2025-02-03T20:43:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "seanoct",
                                           "body":  "Visual Studio 17.12.4\n\nRegardless if run it from visual studio or directly out of the bin/ directory (i.e. double-click the exe), the freeze will occur.\n",
                                           "updatedAt":  "2025-02-03T20:43:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6c4joJ",
                                           "createdAt":  "2025-02-03T21:04:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Would you be able to use [Time Travel Debugging](https://learn.microsoft.com/en-us/windows-hardware/drivers/debuggercmds/time-travel-debugging-overview) to diagnose this? The steps are:\n  \n1. Install windbg debugger (https://learn.microsoft.com/en-us/windows-hardware/drivers/debugger/)\n2. Find TTD.exe tool in the windbg installation and run your app under it in an admin window: `TTD.exe \u003cpath_to_your_app\u003e.exe`. It should generate time trace trace.\n3. Start windbg debugger and open the time travel trace generated by previous step. \n\nOnce you are in the windbg debugger, open the prompt:\n- `g` to run to the end of the trace\n- Find the address of memory location with the bad 3fff value\n- `ba w4 \u003chex address\u003e` to set a write breakpoint at 4 bytes that are corrupted\n- `g-` to run execution backwards. It should stop at the place where the offending 3fff got written\n\nLet me know if you need help with any of these steps.",
                                           "updatedAt":  "2025-02-03T21:04:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6c5sq1",
                                           "createdAt":  "2025-02-03T23:00:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFGSTg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2025-02-03T23:03:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "seanoct",
                                           "body":  "I\u0027ll look at this more tomorrow. I need some time to familiarize myself with this tool\n",
                                           "updatedAt":  "2025-02-03T23:00:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dBPqB",
                                           "createdAt":  "2025-02-04T15:39:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "seanoct",
                                           "body":  "I think I might have found something. @jkotas, is there a way that we can talk about it offline?",
                                           "updatedAt":  "2025-02-04T15:39:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dBysk",
                                           "createdAt":  "2025-02-04T16:34:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "You can email me (my email is in my github profile) and we can go from there.",
                                           "updatedAt":  "2025-02-04T16:34:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dDEGL",
                                           "createdAt":  "2025-02-04T19:05:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "seanoct",
                                           "body":  "I sent you an email. Hopefully you received it!",
                                           "updatedAt":  "2025-02-04T19:05:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dGZg5",
                                           "createdAt":  "2025-02-05T04:54:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Thank you for sharing the details. Here is a simplified repro:\n```\n[StructLayout(LayoutKind.Explicit, Size=100)]\nclass Test\n{\n    [FieldOffset(0)]\n    private byte b;\n\n    unsafe void M()\n    {\n        fixed (byte* p = \u0026b)\n        {\n            // Code treats p as a pointer to a buffer of 100 bytes and ends up overwriting memory\n            // beyond the end of this instance\n        }\n    }\n}\n```\nStructLayout controls unmanaged layout of the type (ie the layout that you get when calling `Marshal.StructureToPtr`). The managed layout matches the unmanaged layout for blittable types only. The problem in this specific example is that the type is not treated as blittable and the runtime only allocates one byte of memory in the managed layout.\n\n@jkoritzinsky Is it expected that `StructLayoutAttribute.Size` is not respected for managed layout in this example?",
                                           "updatedAt":  "2025-02-05T05:32:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dk7Z2",
                                           "createdAt":  "2025-02-07T18:35:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "seanoct",
                                           "body":  "This seems dangerous from a contractual perspective (between a compiler \u003c-\u003e programmer).\n\nhttps://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.structlayoutattribute talks a bit about blittable/non-blittable data types and memory layout. It doesn\u0027t clearly spell out what it does if `StructLayoutAttribute.Size` isn\u0027t in agreement with the size calculated from the fields.\n\nI think -- regardless of blittable/non-blittable data types -- the compiler should respect StructLayoutAttribute.Size if it\u0027s \u003e 0.\n",
                                           "updatedAt":  "2025-02-07T18:35:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dtbZD",
                                           "createdAt":  "2025-02-08T20:33:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-08T20:33:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dtdM1",
                                           "createdAt":  "2025-02-08T20:58:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@seanoct In general you shouldn\u0027t use `Size` to oversize types, its effectively defining custom ABI and likely to cause issues.\n\nIn this scenario, the right thing to do is something more like:\n```csharp\nclass Test\n{\n    private InlineBuffer100\u003cbyte\u003e b;\n\n    unsafe void M()\n    {\n        fixed (byte* p = \u0026b)\n        {\n            // InlineBuffer100\u003cbyte\u003e is definitively 100 bytes and so safe to use\n        }\n    }\n}\n\n\n[InlineArray(100)]\ninternal struct InlineBuffer100\u003cT\u003e\n{\n    public T element0;\n}\n```",
                                           "updatedAt":  "2025-02-08T20:59:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6d2G6X",
                                           "createdAt":  "2025-02-10T14:42:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "seanoct",
                                           "body":  "@tannergooding Ok, I\u0027ll give this a go!\n\nIt might be worthwhile to mention `InlineArrayAttribute` on the `StructLayoutAttribute` doc page for someone looking to do something like this in the future",
                                           "updatedAt":  "2025-02-10T14:42:18Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "System.Runtime.InteropServices.StructLayoutAttribute.Size behavior on reference types",
        "labels":  [
                       "documentation",
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112841",
        "createdAt":  "2025-02-24T07:48:05Z",
        "number":  112841,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-18T06:44:02Z",
        "body":  "**Failed in:** [runtime-coreclr jitstress-isas-arm 20250222.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=959912\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25555036\u0026resultId=123341\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr windows arm64 Checked jitstress_isas_nosimd @ Windows.11.Arm64.Open\n    - Interop/DllImportAttribute/DllImportPath/DllImportPathTest/DllImportPathTest.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:C:hwB02F093BwBA5C0A03eInteropInterop../DllImportAttribute/DllImportPath/DllImportPathTest/DllImportPathTest.cmd Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 2/22/2025 9:04:05 PM, end: 2/22/2025 9:34:05 PM)\n\nReturn code:      -100\nRaw output file:      C:hwB02F093BwBA5C0A03uploadsDllImportAttributeDllImportPathDllImportPathTestoutput.txt\nRaw output:\nBEGIN EXECUTION\n \"C:hwB02F093Bpcorerun.exe\" -p \"System.Reflection.Metadata.MetadataUpdater.IsSupported=false\" -p \"System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true\"  DllImportPathTest.dll \n\ncmdLine:C:hwB02F093BwBA5C0A03eInteropInterop../DllImportAttribute/DllImportPath/DllImportPathTest/DllImportPathTest.cmd Timed Out (timeout in milliseconds: 1800000 from variable __TestTimeout, start: 2/22/2025 9:04:05 PM, end: 2/22/2025 9:34:05 PM)\nTest Harness Exitcode is : -100\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e C:hwB02F093BwBA5C0A03eInteropInterop../DllImportAttribute/DllImportPath/DllImportPathTest/DllImportPathTest.cmd\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor235|25_236(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass25_0\u0026)\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpqv3Hg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6fmavy",
                                           "createdAt":  "2025-02-24T07:48:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-24T07:48:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jbgoM",
                                           "createdAt":  "2025-03-20T23:47:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "Also failed in [runtime-coreclr pgo](https://dev.azure.com/dnceng-public/public/_build?definitionId=144\u0026_a=summary)/[20250320.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=987083)\nCC @AndyAyersMS ",
                                           "updatedAt":  "2025-03-20T23:47:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jbsDf",
                                           "createdAt":  "2025-03-21T00:25:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndyAyersMS",
                                           "body":  "These are both timeouts. Let\u0027s see if this keeps happening.",
                                           "updatedAt":  "2025-03-21T00:25:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kEmAJ",
                                           "createdAt":  "2025-03-25T22:12:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "Both pipelines are green. Closing the issue.",
                                           "updatedAt":  "2025-03-25T22:12:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kEpIw",
                                           "createdAt":  "2025-03-25T22:21:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "Reopenining because it failed with timeout in [runtime-jit-experimental](https://dev.azure.com/dnceng-public/public/_build?definitionId=137\u0026_a=summary)/[20250323.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=990579).",
                                           "updatedAt":  "2025-03-25T22:21:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mq_ce",
                                           "createdAt":  "2025-04-11T09:01:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr pgo 20250410.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1011865\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27048124\u0026resultId=123363\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr windows arm64 Checked defaultpgo @ Windows.11.Arm64.Open\n    - Interop/DllImportAttribute/DllImportPath/DllImportPathTest/DllImportPathTest.cmd\n```\n\n**Error message:**\n```\n \ncmdLine:C:hwADFD0942wB51109A5eInteropInterop../DllImportAttribute/DllImportPath/DllImportPathTest/DllImportPathTest.cmd Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 4/10/2025 9:38:21 AM, end: 4/10/2025 9:48:21 AM)\n\nReturn code:      -100\nRaw output file:      C:hwADFD0942wB51109A5uploadsDllImportAttributeDllImportPathDllImportPathTestoutput.txt\nRaw output:\nBEGIN EXECUTION\n \"C:hwADFD0942pcorerun.exe\" -p \"System.Reflection.Metadata.MetadataUpdater.IsSupported=false\" -p \"System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization=true\"  DllImportPathTest.dll \n\ncmdLine:C:hwADFD0942wB51109A5eInteropInterop../DllImportAttribute/DllImportPath/DllImportPathTest/DllImportPathTest.cmd Timed Out (timeout in milliseconds: 600000 from variable __TestTimeout, start: 4/10/2025 9:38:21 AM, end: 4/10/2025 9:48:21 AM)\nTest Harness Exitcode is : -100\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e C:hwADFD0942wB51109A5eInteropInterop../DllImportAttribute/DllImportPath/DllImportPathTest/DllImportPathTest.cmd\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor235|25_236(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass25_0\u0026)\n```",
                                           "updatedAt":  "2025-04-11T09:01:15Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Test failure: Interop/DllImportAttribute/DllImportPath/DllImportPathTest/DllImportPathTest.cmd",
        "labels":  [
                       "arch-arm64",
                       "os-windows",
                       "JitStress",
                       "area-Interop-coreclr",
                       "blocking-clean-ci-optional"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113518",
        "createdAt":  "2025-03-14T05:20:16Z",
        "number":  113518,
        "author":  "CeSun",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODR4tmw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "huoyaoyuan",
                                            "createdAt":  "2025-03-14T05:41:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tollainmear",
                                            "createdAt":  "2025-03-14T06:04:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rabbitism",
                                            "createdAt":  "2025-03-14T06:20:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DWVoid",
                                            "createdAt":  "2025-03-14T08:24:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ySion",
                                            "createdAt":  "2025-03-14T08:28:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2025-03-14T22:49:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rogihee",
                                            "createdAt":  "2025-03-15T08:57:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Lamparter",
                                            "createdAt":  "2025-03-16T11:49:45Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Lamparter",
                                            "createdAt":  "2025-03-16T11:49:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ram16g",
                                            "createdAt":  "2025-03-21T07:46:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bxjg1987",
                                            "createdAt":  "2025-03-21T09:33:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "raulsntos",
                                            "createdAt":  "2025-03-26T04:49:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lightway82",
                                            "createdAt":  "2025-04-10T16:02:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iMemento",
                                            "createdAt":  "2025-04-17T06:48:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hez2010",
                                            "createdAt":  "2025-04-29T03:23:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gechdcb",
                                            "createdAt":  "2025-05-30T04:29:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mogud",
                                            "createdAt":  "2025-06-09T17:20:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mybios",
                                            "createdAt":  "2025-07-28T07:57:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "realybin",
                                            "createdAt":  "2025-09-19T11:34:15Z"
                                        }
                                    ],
                          "totalCount":  19
                      },
        "updatedAt":  "2025-04-03T08:52:13Z",
        "body":  "Currently supports all platforms (Windows, MacOS, Linux, Android, iOS and other mainstream platforms), and can be hot-updated at runtime, **only Mono**\n\nWe all know that C# is one of the best languages ​​for developing GamePlay, therefore, the gaming industry is in great need of a modern, all-platform, hot-updatable .NET runtime.\n\nMy friends and I are embedding .NET into Unreal Engine to replace the mainstream TypeScript and Lua. We believe that .NET will improve the development efficiency and runtime performance of Gameplay.\n\nProject Repo： https://github.com/crazytuzi/UnrealCSharp\n\n**Two years ago, we started evaluating various runtimes and found that only Mono could support all platforms with one code.**\n\nIn the long run, mono will eventually be completely eliminated by coreclr, because currently only wasm and Android must be run using mono, and coreclr and nativeaot support for these two platforms is also in progress.\n\nThe nuget package of mono on PC has also stopped updating\n\n### This is a signal: We must migrate from mono to coreclr or even nativeaot platform\n\n\nCurrently, coreclr only supports PC. Although the coreclr of Android platform can be compiled, the embedded API of coreclr seems to be designed for PC. For example, it searches for .net runtime in the current environment, forcibly binds the path of libcoreclr.so and System.Private.dll, etc. Doesn’t work well on Android\n\n\nAlthough NativeAot can supplement platforms that Coreclr does not support well, such as Android and iOS, it lacks the function of dynamically loading IL, and hot updates become a new problem. What\u0027s more, the embedding methods of nativeaot and coreclr are completely different, and two codes need to be maintained at the same time,This cost is unacceptable.\n\nThe most successful company in embedding .net in the engine is Unity. They still need to modify coreclr and maintain il2cpp to solve these terrible problems.\n\nTherefore, it is more difficult for small and medium-sized enterprises to better use .net in their own games.\n\n### In order to make .NET more widely used in the gaming industry, I strongly recommend launching a more unified embedding solution.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpWYyug==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6iVku1",
                                           "createdAt":  "2025-03-14T05:20:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-14T05:20:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iV2_p",
                                           "createdAt":  "2025-03-14T05:41:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "A thing to note that the grain of embedding coreclr would be quite different from mono. Coreclr uses precise GC everywhere, thus object references can\u0027t be manipulated by unmanaged code easily. Within coreclr itself there are numerous macros and quirks to ensure GC safety.",
                                           "updatedAt":  "2025-03-14T05:41:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iWi2m",
                                           "createdAt":  "2025-03-14T07:02:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CeSun",
                                           "body":  "\u003e A thing to note that the grain of embedding coreclr would be quite different from mono. Coreclr uses precise GC everywhere, thus object references can\u0027t be manipulated by unmanaged code easily. Within coreclr itself there are numerous macros and quirks to ensure GC safety.\n\nIs there any problem with using GCHandle?\n\n",
                                           "updatedAt":  "2025-03-14T07:02:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iXHkK",
                                           "createdAt":  "2025-03-14T08:22:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ySion",
                                           "body":  "This is a topic I care about as well",
                                           "updatedAt":  "2025-03-14T08:22:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iXLNe",
                                           "createdAt":  "2025-03-14T08:29:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e Is there any problem with using GCHandle?\n\nGCHandle is sufficient for manipulating opaque objects, but it doesn\u0027t allow manipulating fields or calling methods easily in unmanaged code.",
                                           "updatedAt":  "2025-03-14T08:29:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ijGbF",
                                           "createdAt":  "2025-03-16T01:21:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "What kind of embedding surface are you looking for? It would be good to understand which apis are highest priority",
                                           "updatedAt":  "2025-03-16T01:21:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ijSQF",
                                           "createdAt":  "2025-03-16T03:13:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-16T03:13:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ikBa1",
                                           "createdAt":  "2025-03-16T11:46:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CeSun",
                                           "body":  "\u003e What kind of embedding surface are you looking for? It would be good to understand which apis are highest priority\n\nHere are some important features:\n1. IL files can freely specify directories instead of being forcibly bound to binary library directories. For example, `System.Private.CoreLib.dll` file must be in the same directory as libcoreclr.so and cannot be changed. (https://github.com/dotnet/runtime/issues/109633#issuecomment-2684269563)\n2. On the iOS platform, it supports a mix of interpreter and AOT modes. It is said that working R2R and interpreter together in the future will achieve a similar effect, but I am not sure if it can be used on other hosts.(https://github.com/dotnet/runtime/issues/112748#issuecomment-2681771324)\n\nHere are some non essential features:\n1. Dependency loading can be redirected, for example, in games, IL files are usually in resource packages and cannot be directly loaded using the system\u0027s file system. (Using ALC in C # seems to solve the problem)\n2. It is easier to access managed types in C++, such as the reflection API embedded with Mono API (It can also be implemented using C #, but it\u0027s more complicated)",
                                           "updatedAt":  "2025-03-16T11:46:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iklfD",
                                           "createdAt":  "2025-03-16T15:27:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "(2) isn’t really about embedding, it’s a fundamental design characteristic of the runtime. That will have to be handled separately. \n\nFor (1), that restriction is specific to System.Private.CoreLib. What’s the problem with placing S.P.C next to coreclr?",
                                           "updatedAt":  "2025-03-16T15:27:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ikmRh",
                                           "createdAt":  "2025-03-16T15:33:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e For (1), that restriction is specific to System.Private.CoreLib. What’s the problem with placing S.P.C next to coreclr?\n\nContext: https://github.com/dotnet/runtime/issues/109633\n\nThe platform handles native executables/dynamic libraries separately from other files. Thus, S.P.C which is a \"data\" file can\u0027t be placed together with libcoreclr.so which is a native object.",
                                           "updatedAt":  "2025-03-16T15:33:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ikqgP",
                                           "createdAt":  "2025-03-16T16:08:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CeSun",
                                           "body":  "\u003e For (1), that restriction is specific to System.Private.CoreLib. What’s the problem with placing S.P.C next to coreclr?\n\nSome mobile systems require that native libraries must be placed in a certain directory, but dll is a resource file and cannot be placed in the same directory as libcoreclr.",
                                           "updatedAt":  "2025-03-16T16:08:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6imhJo",
                                           "createdAt":  "2025-03-17T03:36:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CeSun",
                                           "body":  "\u003e 2) On the iOS platform, it supports a mix of interpreter and AOT modes. It is said that working R2R and interpreter together in the future will achieve a similar effect, but I am not sure if it can be used on other hosts.\n\nThis suggestion is discussed in this post.\nhttps://github.com/dotnet/runtime/issues/112748#issuecomment-2680189307\n",
                                           "updatedAt":  "2025-03-17T03:36:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lZjK6",
                                           "createdAt":  "2025-04-03T08:52:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEV7XdA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CeSun",
                                                                               "createdAt":  "2025-04-03T12:22:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iMemento",
                                                                               "createdAt":  "2025-04-17T06:43:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TickThunder",
                                                                               "createdAt":  "2025-04-25T08:39:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ram16g",
                                                                               "createdAt":  "2025-06-09T11:44:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mogud",
                                                                               "createdAt":  "2025-06-09T17:36:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "srxqds",
                                           "body":  "we hope .net support mix aot and interp execute mode. I have tried mono on iOS it not work.",
                                           "updatedAt":  "2025-04-03T08:52:13Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Unified Embedded .NET Solution",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113692",
        "createdAt":  "2025-03-19T14:38:20Z",
        "number":  113692,
        "author":  "radekdoulik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-24T16:14:56Z",
        "body":  "implement pinvoke and intenal calls for wasm/clr interpreter\n\nthink about best solution and implement it. possible scenarios:\n\n* generate C source helpers similar to what we do in mono, would require to provide clang through workload or some other way\n* generate wasm functions directly. the code could be easy enough to generate, possibly with the help of wa-info\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoyorNA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6jIevJ",
                                           "createdAt":  "2025-03-19T14:44:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-19T14:44:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jKis0",
                                           "createdAt":  "2025-03-19T17:15:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-19T17:15:42Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[wasm coreclr] pinvoke and internal calls",
        "labels":  [
                       "arch-wasm",
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113851",
        "createdAt":  "2025-03-24T19:31:49Z",
        "number":  113851,
        "author":  "frabert",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODEFj_g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TheLeftExit",
                                            "createdAt":  "2025-06-17T13:23:46Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-03-29T17:36:54Z",
        "body":  "### Description\n\nExporting a function using `UnmanagedCallersOnly` and the Fastcall calling convention will work, but calling `((delegate* unmanaged[Fastcall]\u003cint, int\u003e)somePtr)(someArg)` will fail with\n\n```\nSystem.TypeLoadException\n  HResult=0x80131522\n  Message=Unsupported unmanaged calling convention.\n```\n\n### Reproduction Steps\n\n```c#\nunsafe\n{\n    int x = ((delegate* unmanaged[Fastcall]\u003cint, int\u003e)IntPtr.Zero)(0);\n}\n```\n\n### Expected behavior\n\nThe function pointer should be called.\n\n### Actual behavior\n\nThe call fails due to the Fastcall calling convention being unimplemented.\n\n### Regression?\n\nUnlikely that this was implemented before and removed afterwards.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nWindows x86\n\nTechnically I\u0027m running from a CoreCLR embedded in an application, but it should not matter in this scenario.\n\n### Other information\n\nhttps://github.com/dotnet/runtime/blob/f17c21c1d1d4dd8825bfc378858b5fdb9375c6a5/src/coreclr/vm/dllimport.cpp#L4238",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOo91zOg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6j3XM6",
                                           "createdAt":  "2025-03-24T19:32:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-24T19:32:28Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Invoking an unmanaged fastcall function pointer under x86 Windows fails at runtime",
        "labels":  [
                       "arch-x86",
                       "area-Interop-coreclr",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114500",
        "createdAt":  "2025-04-10T17:24:15Z",
        "number":  114500,
        "author":  "ikasou",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-16T20:24:50Z",
        "body":  "### Description\n\nExcel Automation AddIn (used to define UDFs in managed code) that works in .NET Framework fails in .NET6.\n\n### Reproduction Steps\n\nUnder .NET Framework it is straightforward to expose user-defined functions for Excel with a so-called automation addin. \nA minimal implementation is something like:\n\n```\nnamespace ClassLibrary1\n{\n    [ComVisible(true)]\n    [Guid(\"2FD6F136-4235-4727-B473-C5C04244E8E3\")]\n    [InterfaceType(ComInterfaceType.InterfaceIsDual)]\n    public interface IClass1\n    {\n        double AddIt(double a, double b);\n    }\n\n    [ComVisible(true)]\n    [Guid(\"0DD3D8DC-BC65-4818-AA46-8A579BF8E0DB\")]\n    [ComDefaultInterface(typeof(IClass1))]\n    [ClassInterface(ClassInterfaceType.None)]\n    public class Class1: IClass1\n    {\n        public Class1() { }\n        public double AddIt(double a, double b) =\u003e a + b;\n    }\n}\n```\n\nWith the above, and the usual registrations under HKCU\\Software\\Classes\\CLSID\\{0DD3D8DC-BC65-4818-AA46-8A579BF8E0DB} and HKCU\\Software\\Classes\\Typelib\\{ECDFE6A5-2DEB-45CB-8BE3-46A7ED117114} etc a new category of functions will appear in the function helper next to the F2 bar called ClassLibrary1.Class1 with AddIt inside.\n \nIn trying to replicate the same with .NET6 I have used exactly the same code, the exact same type library from the .NET Framework project exported by tlbexp.exe and the following project file, together with the Registry Settings listed below:\n```\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\n  \u003cPropertyGroup\u003e\n    \u003cTargetFramework\u003enet6.0\u003c/TargetFramework\u003e\n    \u003cEnableComHosting\u003etrue\u003c/EnableComHosting\u003e\n    \u003cPlatformTarget\u003ex64\u003c/PlatformTarget\u003e\n    \u003cPlatforms\u003ex64\u003c/Platforms\u003e\n  \u003c/PropertyGroup\u003e\n  \u003cItemGroup\u003e\n    \u003cComHostTypeLibrary Include=\"C:\\Users\\ilias\\source\\repos\\ClassLibraryFw1\\bin\\x64\\Debug\\ClassLibrary1.tlb\"\u003e\u003c/ComHostTypeLibrary\u003e\n  \u003c/ItemGroup\u003e\n\u003c/Project\u003e\n```\n\n```\n[HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\{0DD3D8DC-BC65-4818-AA46-8A579BF8E0DB}]\n@=\"ClassLibrary1.Class1\"\n\n[HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\{0DD3D8DC-BC65-4818-AA46-8A579BF8E0DB}\\Implemented Categories]\n@=\"{62C8FE65-4EBB-45e7-B440-6E39B2CDBF29}\"\n\n[HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\{0DD3D8DC-BC65-4818-AA46-8A579BF8E0DB}\\InprocServer32]\n@=\"C:\\\\Users\\\\ilias\\\\source\\\\repos\\\\ClassLibrary1\\\\bin\\\\x64\\\\Debug\\\\net6.0\\\\ClassLibrary1.comhost.dll\"\n\n[HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\{0DD3D8DC-BC65-4818-AA46-8A579BF8E0DB}\\ProgID]\n@=\"ClassLibrary1.Class1\"\n\n[HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\{0DD3D8DC-BC65-4818-AA46-8A579BF8E0DB}\\Programmable]\n\n[HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\{0DD3D8DC-BC65-4818-AA46-8A579BF8E0DB}\\TypeLib]\n@=\"{ECDFE6A5-2DEB-45CB-8BE3-46A7ED117114}\"\n```\n\n```\n[HKEY_CURRENT_USER\\Software\\Classes\\Interface\\{2FD6F136-4235-4727-B473-C5C04244E8E3}]\n@=\"IClass1\"\n\n[HKEY_CURRENT_USER\\Software\\Classes\\Interface\\{2FD6F136-4235-4727-B473-C5C04244E8E3}\\ProxyStubClsid32]\n@=\"{00020420-0000-0000-C000-000000000046}\"\n\n[HKEY_CURRENT_USER\\Software\\Classes\\Interface\\{2FD6F136-4235-4727-B473-C5C04244E8E3}\\TypeLib]\n@=\"{ECDFE6A5-2DEB-45CB-8BE3-46A7ED117114}\"\n\"Version\"=\"1.0\"\n```\n\n```\n[HKEY_CURRENT_USER\\Software\\Classes\\Typelib\\{ECDFE6A5-2DEB-45CB-8BE3-46A7ED117114}]\n\n[HKEY_CURRENT_USER\\Software\\Classes\\Typelib\\{ECDFE6A5-2DEB-45CB-8BE3-46A7ED117114}\\1.0]\n@=\"ClassLibrary1\"\n\n[HKEY_CURRENT_USER\\Software\\Classes\\Typelib\\{ECDFE6A5-2DEB-45CB-8BE3-46A7ED117114}\\1.0\\0]\n\n[HKEY_CURRENT_USER\\Software\\Classes\\Typelib\\{ECDFE6A5-2DEB-45CB-8BE3-46A7ED117114}\\1.0\\0\\win64]\n@=\"C:\\\\Users\\\\ilias\\\\source\\\\repos\\\\ClassLibrary1\\\\bin\\\\x64\\\\Debug\\\\net6.0\\\\ClassLibrary1.comhost.dll\"\n\n```\n\nWith the above settings I am able to activate a COM server (i.e. \"COM AddIn\" in Excel speak) from VBA using both Early and Late Binding (i.e. by either adding a reference to the type library or by using CreateObject(\"ClassLibrary1.Class1\") so this really basic configuration works as it should.\n\nHowever the Excel Automation AddIn scenario fails at activation stage in the below place where Excel passes the riid of IDispatch while the classType.GetInterfaces() only contains IClass1:\n\n![Image](https://github.com/user-attachments/assets/f281ac65-2bc2-4a7f-ac9a-8a994b5ff0c2)\n\nClearly some auto-generated machinery that gets created on the fly by the .NET Framework runtime is missing here. \nI have seen #86751 in relation to the removal of dynamic generation of ITypeLibs so I am wondering what else was removed around the IDispatch support expected by Excel and whether this has any chance of working in the first place. Comparing the dynamically generated interfaces between .NET Framework and .NET6 leaves a lot to be desired:\n\n.NET Framework:\n![Image](https://github.com/user-attachments/assets/2c8dc40e-9824-4683-b23e-05bb469107a6)\n\n.NET6\n![Image](https://github.com/user-attachments/assets/98b40354-caef-40db-855a-2ff8ed968874)\n\nI am also struggling in particular with the Unknown Error 0x80131515 that only seems to appear in google searches in relation to security related file access blocks in Windows explorer. But since I am able to activate the COM addin with VBA (both early and late bound using .NET6) I think it is unrelated.\n\nA native trace is not very revealing either (as I am debugging in a MacBook using a VM I cannot run both Native and Managed at the same time):\n```\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Users\\ilias\\source\\repos\\ClassLibrary1\\bin\\x64\\Debug\\net6.0\\ClassLibrary1.comhost.dll\u0027. Symbol loading disabled by Include/Exclude setting.\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\dotnet\\x64\\host\\fxr\\9.0.2\\hostfxr.dll\u0027. Symbol loading disabled by Include/Exclude setting.\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\dotnet\\x64\\shared\\Microsoft.NETCore.App\\6.0.36\\hostpolicy.dll\u0027. Symbol loading disabled by Include/Exclude setting.\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\dotnet\\x64\\shared\\Microsoft.NETCore.App\\6.0.36\\coreclr.dll\u0027. Symbol loading disabled by Include/Exclude setting.\nException thrown at 0x00007FF92D0BC798 (KernelBase.dll) in EXCEL.EXE: 0x04242420 (parameters: 0x0000000031415927, 0x00007FF87CE00000, 0x000000AA6B4C6B40).\nProfiler was prevented from loading notification profiler due to app settings.\n  Process ID (decimal): 18224.  Message ID: [0x2509].\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\dotnet\\x64\\shared\\Microsoft.NETCore.App\\6.0.36\\System.Private.CoreLib.dll\u0027. \n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\dotnet\\x64\\shared\\Microsoft.NETCore.App\\6.0.36\\clrjit.dll\u0027. Symbol loading disabled by Include/Exclude setting.\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Users\\ilias\\source\\repos\\ClassLibrary1\\bin\\x64\\Debug\\net6.0\\ClassLibrary1.dll\u0027. \n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\dotnet\\x64\\shared\\Microsoft.NETCore.App\\6.0.36\\System.Runtime.dll\u0027. \n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\dotnet\\x64\\shared\\Microsoft.NETCore.App\\6.0.36\\System.ComponentModel.TypeConverter.dll\u0027. \n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\dotnet\\x64\\shared\\Microsoft.NETCore.App\\6.0.36\\System.Runtime.InteropServices.dll\u0027. \nException thrown at 0x00007FF92D0BC798 (KernelBase.dll) in EXCEL.EXE: 0xE0434352 (parameters: 0xFFFFFFFF80004002, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x00007FF87CE00000).\nThe thread \u0027.NET Tiered Compilation Worker\u0027 (14836) has exited with code 0 (0x0).\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\Microsoft Office\\root\\Office16\\OSF.DLL\u0027. Symbol loading disabled by Include/Exclude setting.\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\Microsoft Office\\root\\Office16\\OSFUI.DLL\u0027. Symbol loading disabled by Include/Exclude setting.\nThe thread 5844 has exited with code 0 (0x0).\n```\n\n### Expected Behavior\nIdeally this works out of the box and AddIt() is accessible as a worksheet cell function.\n\n### Actual Behavior\nException thrown as described above, UDF is unavailable in Excel worksheet cell.\n\n### Regression?\nWorks in .NET Framework\n\n### Known Workarounds\nNone - but potentially some wrapper that properly exposes/supports IDispatch is required. This seems to be related to the removal of ClassInterfaceType.AutoDual/AutoDispatch, in other words the functionality is no longer there for this to work out of the box.\n\n### Configuration\nWindows 11 on Arm / .NET 6\n\n\n\n\n\n\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpwocEA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6m1qi8",
                                           "createdAt":  "2025-04-12T23:22:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e `[ClassInterface(ClassInterfaceType.None)]`\n\n@ikasou Shouldn\u0027t this be `ClassInterfaceType.AutoDual`?\n\n\u003e so I am wondering what else was removed around the IDispatch support expected by Excel and whether this has any chance of working in the first place.\n\nUnfortunately the dynamic TLB generation had tendrils everywhere and there remain some partially supported scenarios and some completely severed - accidentally or intentionally is hard to tell in this area. It may take some more debugging to get to the bottom of precisely what is missing in this case, but it is also possible we recently fixed this. In .NET 10 we did discover a lack of support for `ClassInterfaceType` and fixed it in https://github.com/dotnet/runtime/pull/109616. Could you try the [latest Preview](https://dotnet.microsoft.com/download/dotnet/10.0) and see if it works for you? ",
                                           "updatedAt":  "2025-04-12T23:22:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6m1s46",
                                           "createdAt":  "2025-04-12T23:24:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "FYI for @govert. No action, but I always think of you when Excel interop comes up :) ",
                                           "updatedAt":  "2025-04-12T23:24:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6m4802",
                                           "createdAt":  "2025-04-13T13:08:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ikasou",
                                           "body":  "\u003e \u003e `[ClassInterface(ClassInterfaceType.None)]`\n\u003e \n\u003e [@ikasou](https://github.com/ikasou) Shouldn\u0027t this be `ClassInterfaceType.AutoDual`?\n\u003e \n\u003e \u003e so I am wondering what else was removed around the IDispatch support expected by Excel and whether this has any chance of working in the first place.\n\u003e \n\u003e Unfortunately the dynamic TLB generation had tendrils everywhere and there remain some partially supported scenarios and some completely severed - accidentally or intentionally is hard to tell in this area. It may take some more debugging to get to the bottom of precisely what is missing in this case, but it is also possible we recently fixed this. In .NET 10 we did discover a lack of support for `ClassInterfaceType` and fixed it in [#109616](https://github.com/dotnet/runtime/pull/109616). Could you try the [latest Preview](https://dotnet.microsoft.com/download/dotnet/10.0) and see if it works for you?\n\nThanks for taking a look. AutoDual is unavailable in .NET6, but seems to reappear for .NET8 onwards: I tried it, doesn\u0027t change anything since ComActivator still throws inside GetValidatedInterfaceType. With ClassInterfaceType.AutoDual chosen, .NET 10 preview 3 however addresses the exception nicely as you suggested, which is definitely progress in the right direction. Excel seems to try and move ahead with the process of examining type information, and I can see in the native trace oleauth32.dll complaining with  ReturnHr(1) tid(4154) 8002801D Library not registered. This is something I have seen before in earlier .net versions while troubleshooting, but I didn\u0027t mention it as it wasn\u0027t appearing consistently during my experimentation. \n\nMore worrisome is a repeatable straight crash with \"An unhandled exception of type \u0027System.ExecutionEngineException\u0027 occurred in Unknown Module.\" in the managed debugger that happens when I execute the following in VBA\n```\nSub test()\nDim a As Class1\nSet a = New Class1\nDim b As Integer\nb = a.AddIt(3.4, 5.6)\nDim c As Object\nSet c = CreateObject(\"ClassLibrary1.Class1\")\nDim d As Integer\nd = c.AddIt(4.4, 5.6)\nEnd Sub\n```\nIt happens at line b = a.AddIt(3.4, 5.6)\n\nI am attaching the full trace without filtering lines in case it is helpful ...\n\n```\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Users\\ilias\\source\\repos\\ClassLibrary1\\bin\\x64\\Debug\\net10.0\\ClassLibrary1.comhost.dll\u0027. Symbol loading disabled by Include/Exclude setting.\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\dotnet\\x64\\host\\fxr\\10.0.0-preview.3.25171.5\\hostfxr.dll\u0027. Symbol loading disabled by Include/Exclude setting.\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\dotnet\\x64\\shared\\Microsoft.NETCore.App\\10.0.0-preview.3.25171.5\\hostpolicy.dll\u0027. Symbol loading disabled by Include/Exclude setting.\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\dotnet\\x64\\shared\\Microsoft.NETCore.App\\10.0.0-preview.3.25171.5\\coreclr.dll\u0027. Symbol loading disabled by Include/Exclude setting.\nException thrown at 0x00007FFE52FAC798 (KernelBase.dll) in EXCEL.EXE: 0x04242420 (parameters: 0x0000000031415927, 0x00007FFD5F040000, 0x0000001F31907240).\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\dotnet\\x64\\shared\\Microsoft.NETCore.App\\10.0.0-preview.3.25171.5\\System.Private.CoreLib.dll\u0027. \n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\dotnet\\x64\\shared\\Microsoft.NETCore.App\\10.0.0-preview.3.25171.5\\clrjit.dll\u0027. Symbol loading disabled by Include/Exclude setting.\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Users\\ilias\\source\\repos\\ClassLibrary1\\bin\\x64\\Debug\\net10.0\\ClassLibrary1.dll\u0027. \n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\dotnet\\x64\\shared\\Microsoft.NETCore.App\\10.0.0-preview.3.25171.5\\System.Runtime.dll\u0027. \n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\dotnet\\x64\\shared\\Microsoft.NETCore.App\\10.0.0-preview.3.25171.5\\System.ComponentModel.TypeConverter.dll\u0027. \n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\dotnet\\x64\\shared\\Microsoft.NETCore.App\\10.0.0-preview.3.25171.5\\System.Runtime.InteropServices.dll\u0027. \nThe thread 16212 has exited with code 0 (0x0).\nThe thread 14300 has exited with code 0 (0x0).\nThe thread 17344 has exited with code 0 (0x0).\nThe thread \u0027.NET Tiered Compilation Worker\u0027 (2132) has exited with code 0 (0x0).\nmincore\\com\\oleaut32\\typelib\\tlibapi.cpp(2427)\\oleaut32.dll!00007FFE55A503B8: (caller: 00007FFE55A4E99C) ReturnHr(1) tid(4154) 8002801D Library not registered.\nmincore\\com\\oleaut32\\typelib\\tlibapi.cpp(2904)\\oleaut32.dll!00007FFE55A75208: (caller: 00007FFE55AF1188) ReturnHr(2) tid(4154) 8002801D Library not registered.\nmincore\\com\\oleaut32\\typelib\\tlibapi.cpp(2427)\\oleaut32.dll!00007FFE55A503B8: (caller: 00007FFE55A4E99C) ReturnHr(3) tid(4154) 8002801D Library not registered.\nmincore\\com\\oleaut32\\typelib\\tlibapi.cpp(2904)\\oleaut32.dll!00007FFE55A75208: (caller: 00007FFE55AF1188) ReturnHr(4) tid(4154) 8002801D Library not registered.\nmincore\\com\\oleaut32\\typelib\\tlibapi.cpp(2427)\\oleaut32.dll!00007FFE55A503B8: (caller: 00007FFE55A4E99C) ReturnHr(5) tid(4154) 8002801D Library not registered.\nmincore\\com\\oleaut32\\typelib\\tlibapi.cpp(2904)\\oleaut32.dll!00007FFE55A75208: (caller: 00007FFE55AF1188) ReturnHr(6) tid(4154) 8002801D Library not registered.\nThe thread 16436 has exited with code 0 (0x0).\nThe thread 15452 has exited with code 0 (0x0).\nThe thread 15820 has exited with code 0 (0x0).\nThe thread 12032 has exited with code 0 (0x0).\nThe thread 13792 has exited with code 0 (0x0).\nThe thread 16592 has exited with code 0 (0x0).\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\Microsoft Office\\root\\Office16\\OSF.DLL\u0027. Symbol loading disabled by Include/Exclude setting.\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\Microsoft Office\\root\\Office16\\OSFUI.DLL\u0027. Symbol loading disabled by Include/Exclude setting.\n13/04/2025 13:50:33.284\tMedium\tWeb Add-In Runtime Logging Session Started\t\t\t\n13/04/2025 13:50:33.284\tMonitorable\tManifest\tIssue encountered while parsing manifest, add-in ID : b8fb1407-490b-42c2-89e7-261035439e6e, Location: Error at element \"VersionOverrides\" : Manifest override with unsupported requirements or no supported extension points ignored: http://schemas.microsoft.com/office/taskpaneappversionoverrides, VersionOverridesV1_0, Line=52, CharPosition=7\t\t\n13/04/2025 13:50:33.284\tMonitorable\tManifest\tIssue encountered while parsing manifest, add-in ID : b8fb1407-490b-42c2-89e7-261035439e6e, Location: Error at element \"VersionOverrides\" : Manifest override with unsupported requirements or no supported extension points ignored: http://schemas.microsoft.com/office/taskpaneappversionoverrides, VersionOverridesV1_0, Line=52, CharPosition=7\t\t\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\Microsoft Office\\root\\vfs\\ProgramFilesCommonX64\\Microsoft Shared\\OFFICE16\\1033\\OSFINTL.DLL\u0027. Module was built without symbols.\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\135.0.3179.73\\EBWebView\\x64\\EmbeddedBrowserWebView.dll\u0027. Symbol loading disabled by Include/Exclude setting.\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Windows\\System32\\edputil.dll\u0027. Symbol loading disabled by Include/Exclude setting.\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Windows\\System32\\winspool.drv\u0027. Symbol loading disabled by Include/Exclude setting.\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Windows\\System32\\dbghelp.dll\u0027. Symbol loading disabled by Include/Exclude setting.\n\u0027EXCEL.EXE\u0027 (Win32): Unloaded \u0027C:\\Windows\\System32\\dbghelp.dll\u0027\nWarning: AddWebResourceRequestedFilter without SourceKind parameter is deprecated! It does not behave as expected for iframes.Please use AddWebResourceRequestedFilterWithRequestSourceKinds instead. For more information, please see https://go.microsoft.com/fwlink/?linkid=2286319\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\Microsoft Office\\root\\Office16\\OFFICEJS_EXCEL.DLL\u0027. Module was built without symbols.\nException thrown at 0x00007FFE52FAC798 in EXCEL.EXE: Microsoft C++ exception: std::future_error at memory location 0x0000001F348FD060.\nException thrown at 0x00007FFE52FAC798 in EXCEL.EXE: Microsoft C++ exception: std::future_error at memory location 0x0000001F348FF2F0.\nException thrown at 0x00007FFE52FAC798 in EXCEL.EXE: Microsoft C++ exception: std::future_error at memory location 0x0000001F348FF2F0.\nException thrown at 0x00007FFE52FAC798 in EXCEL.EXE: Microsoft C++ exception: std::future_error at memory location 0x0000001F348FF2F0.\nException thrown at 0x00007FFE52FAC798 in EXCEL.EXE: Microsoft C++ exception: std::future_error at memory location 0x0000001F348FF2F0.\nException thrown at 0x00007FFE52FAC798 in EXCEL.EXE: Microsoft C++ exception: std::future_error at memory location 0x0000001F348FF2F0.\nException thrown at 0x00007FFE52FAC798 in EXCEL.EXE: Microsoft C++ exception: std::future_error at memory location 0x0000001F348FF2F0.\nException thrown at 0x00007FFE52FAC798 in EXCEL.EXE: Microsoft C++ exception: std::future_error at memory location 0x0000001F348FF2F0.\nException thrown at 0x00007FFE52FAC798 in EXCEL.EXE: Microsoft C++ exception: std::future_error at memory location 0x0000001F348FF2F0.\nException thrown at 0x00007FFE52FAC798 in EXCEL.EXE: Microsoft C++ exception: std::future_error at memory location 0x0000001F348FD060.\nException thrown at 0x00007FFE52FAC798 in EXCEL.EXE: Microsoft C++ exception: std::future_error at memory location 0x0000001F348FF2F0.\nException thrown at 0x00007FFE52FAC798 in EXCEL.EXE: Microsoft C++ exception: std::future_error at memory location 0x0000001F348FF2F0.\nException thrown at 0x00007FFE52FAC798 in EXCEL.EXE: Microsoft C++ exception: std::future_error at memory location 0x0000001F348FF2F0.\nException thrown at 0x00007FFE52FAC798 in EXCEL.EXE: Microsoft C++ exception: std::future_error at memory location 0x0000001F348FF2F0.\nException thrown at 0x00007FFE52FAC798 in EXCEL.EXE: Microsoft C++ exception: std::future_error at memory location 0x0000001F348FF2F0.\nException thrown at 0x00007FFE52FAC798 in EXCEL.EXE: Microsoft C++ exception: std::future_error at memory location 0x0000001F348FF2F0.\nException thrown at 0x00007FFE52FAC798 in EXCEL.EXE: Microsoft C++ exception: std::future_error at memory location 0x0000001F348FF2F0.\nException thrown at 0x00007FFE52FAC798 in EXCEL.EXE: Microsoft C++ exception: std::future_error at memory location 0x0000001F348FF2F0.\nException thrown at 0x00007FFE52FAC798 in EXCEL.EXE: Microsoft C++ exception: std::future_error at memory location 0x0000001F348FF2F0.\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\Microsoft Office\\root\\vfs\\ProgramFilesCommonX64\\Microsoft Shared\\VBA\\VBA7.1\\VBEUIRES.DLL\u0027. Module was built without symbols.\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Program Files\\Microsoft Office\\root\\vfs\\ProgramFilesCommonX64\\Microsoft Shared\\VBA\\VBA7.1\\1033\\VBEUIINTL.DLL\u0027. Module was built without symbols.\n\u0027EXCEL.EXE\u0027 (Win32): Loaded \u0027C:\\Windows\\System32\\oleacc.dll\u0027. Symbol loading disabled by Include/Exclude setting.\nException thrown at 0x0000000000000000 in EXCEL.EXE: 0xC0000005: Access violation executing location 0x0000000000000000.\n\nThe thread 4872 has exited with code 3221225477 (0xc0000005).\nThe thread 15404 has exited with code 3221225477 (0xc0000005).\nThe thread 17368 has exited with code 3221225477 (0xc0000005).\nThe thread 14640 has exited with code 3221225477 (0xc0000005).\nThe thread 3308 has exited with code 3221225477 (0xc0000005).\nThe thread 3712 has exited with code 3221225477 (0xc0000005).\nThe thread 7216 has exited with code 3221225477 (0xc0000005).\nThe thread 17140 has exited with code 3221225477 (0xc0000005).\nThe thread \u0027.NET Tiered Compilation Worker\u0027 (17004) has exited with code 3221225477 (0xc0000005).\nThe thread 16724 has exited with code 3221225477 (0xc0000005).\nThe thread 15424 has exited with code 3221225477 (0xc0000005).\nThe thread \u0027EBWorkerThread\u0027 (7548) has exited with code 3221225477 (0xc0000005).\nThe thread 16280 has exited with code 3221225477 (0xc0000005).\nThe thread \u0027MojoThread\u0027 (11376) has exited with code 3221225477 (0xc0000005).\nThe thread 12012 has exited with code 3221225477 (0xc0000005).\nThe thread 17088 has exited with code 3221225477 (0xc0000005).\nThe thread \u0027.NET Finalizer\u0027 (9248) has exited with code 3221225477 (0xc0000005).\nThe thread \u0027.NET Debugger\u0027 (3088) has exited with code 3221225477 (0xc0000005).\nThe thread \u0027.NET EventPipe\u0027 (3388) has exited with code 3221225477 (0xc0000005).\nThe thread 8748 has exited with code 3221225477 (0xc0000005).\nThe thread 4268 has exited with code 3221225477 (0xc0000005).\nThe thread 15536 has exited with code 3221225477 (0xc0000005).\nThe thread 14404 has exited with code 3221225477 (0xc0000005).\nThe thread 11216 has exited with code 3221225477 (0xc0000005).\nThe thread 1284 has exited with code 3221225477 (0xc0000005).\nThe thread 14392 has exited with code 3221225477 (0xc0000005).\nThe thread 13496 has exited with code 3221225477 (0xc0000005).\nThe thread 7040 has exited with code 3221225477 (0xc0000005).\nThe thread 10460 has exited with code 3221225477 (0xc0000005).\nThe thread 9320 has exited with code 3221225477 (0xc0000005).\nThe thread 11272 has exited with code 3221225477 (0xc0000005).\nThe thread 4528 has exited with code 3221225477 (0xc0000005).\nThe thread 7496 has exited with code 3221225477 (0xc0000005).\nThe thread 16960 has exited with code 3221225477 (0xc0000005).\nThe thread \u0027DManip Delegate Thread\u0027 (772) has exited with code 3221225477 (0xc0000005).\nThe thread 10868 has exited with code 3221225477 (0xc0000005).\nThe thread 4016 has exited with code 3221225477 (0xc0000005).\nThe thread 2024 has exited with code 3221225477 (0xc0000005).\nThe thread 6104 has exited with code 3221225477 (0xc0000005).\nThe thread 4440 has exited with code 3221225477 (0xc0000005).\nThe thread 624 has exited with code 3221225477 (0xc0000005).\nThe thread 10360 has exited with code 3221225477 (0xc0000005).\nThe thread 16956 has exited with code 3221225477 (0xc0000005).\nThe thread 11584 has exited with code 3221225477 (0xc0000005).\nThe thread 12392 has exited with code 3221225477 (0xc0000005).\nThe thread 15752 has exited with code 3221225477 (0xc0000005).\nThe thread 15724 has exited with code 3221225477 (0xc0000005).\nThe thread 16896 has exited with code 3221225477 (0xc0000005).\nThe program \u0027[16080] EXCEL.EXE\u0027 has exited with code 3221225477 (0xc0000005) \u0027Access violation\u0027.\n\n``` \n\n\n",
                                           "updatedAt":  "2025-04-13T13:08:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6m49IC",
                                           "createdAt":  "2025-04-13T13:11:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEOG5qA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2025-04-13T16:12:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ikasou",
                                           "body":  "\u003e FYI for [@govert](https://github.com/govert). No action, but I always think of you when Excel interop comes up :)\n\nHaha, @govert \u0027s repo is always my first go-to source of knowledge when it comes to all things Excel addin, but since he relies on the C Excel interface for user defined function calls, he hasn\u0027t needed this functionality at all as far as I can tell ...",
                                           "updatedAt":  "2025-04-13T13:11:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6m49Tr",
                                           "createdAt":  "2025-04-13T13:14:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "My understanding is that ClassInterfaceType.AutoDual should not be needed here because this class is defined as implementing the COM interface IClass1 and so there\u0027s no need to generate another COM interface for the class.",
                                           "updatedAt":  "2025-04-13T13:14:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6m5NsS",
                                           "createdAt":  "2025-04-13T16:19:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e .NET 10 preview 3 however addresses the exception nicely as you suggested, which is definitely progress in the right direction. Excel seems to try and move ahead with the process of examining type information, and I can see in the native trace oleauth32.dll complaining with ReturnHr(1) tid(4154) 8002801D Library not registered.\n\nWhat Excel is doing is out of our control, but I can say that since we didn\u0027t register/generate a TLB for the interface in question the `HRESULT` tracks. The `IDispatch` that is going to be returned will need to be able to find the registered TLB or else half of the `IDispatch` functions will fail. Can you confirm the registered TLB was loaded? You can use [ProcMon](https://learn.microsoft.com/sysinternals/downloads/procmon) to see what the runtime is looking up.\n\n\u003e My understanding is that ClassInterfaceType.AutoDual should not be needed here because this class is defined as implementing the COM interface IClass1 and so there\u0027s no need to generate another COM interface for the class.\n\nAh, right. The assumption here is `IClass` is already defined.",
                                           "updatedAt":  "2025-04-13T16:19:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6m5O4V",
                                           "createdAt":  "2025-04-13T16:33:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "The look-up logic for the registered TLB of an assembly is\n\nhttps://github.com/dotnet/runtime/blob/e220a94d842524b408c35b381fc326c4159005f0/src/coreclr/vm/stdinterfaces.cpp#L567-L590",
                                           "updatedAt":  "2025-04-13T16:33:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nCcV0",
                                           "createdAt":  "2025-04-14T17:44:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ikasou",
                                           "body":  "\u003e \u003e .NET 10 preview 3 however addresses the exception nicely as you suggested, which is definitely progress in the right direction. Excel seems to try and move ahead with the process of examining type information, and I can see in the native trace oleauth32.dll complaining with ReturnHr(1) tid(4154) 8002801D Library not registered.\n\u003e \n\u003e What Excel is doing is out of our control, but I can say that since we didn\u0027t register/generate a TLB for the interface in question the `HRESULT` tracks. The `IDispatch` that is going to be returned will need to be able to find the registered TLB or else half of the `IDispatch` functions will fail. Can you confirm the registered TLB was loaded? You can use [ProcMon](https://learn.microsoft.com/sysinternals/downloads/procmon) to see what the runtime is looking up.\n\u003e \n\u003e \u003e My understanding is that ClassInterfaceType.AutoDual should not be needed here because this class is defined as implementing the COM interface IClass1 and so there\u0027s no need to generate another COM interface for the class.\n\u003e \n\u003e Ah, right. The assumption here is `IClass` is already defined.\n\nI can confirm Excel looks up the correct key:\n\n![Image](https://github.com/user-attachments/assets/c614317a-c218-46c4-b4dd-f219067fc495)\n\nRegarding AutoDual, although in theory (and in .NET Framework practice) using a custom interface instead of a class interface works correctly and is the recommended way of exporting UDFs, here it looks as though a class interface is a requirement, otherwise we will have the exception inside GetValidatedInterfaceType. But getting the class interface scenario to work properly in Excel automation addins is already a huge step, and the custom interface scenario is just a refinement for our use case (intended to play 100% nicely with COM practices) and not strictly necessary.\n\nOne more thing: I have built the runtime locally but I am a bit perplexed as to how to ensure I build a .comhost.dll that loads the custom runtime in order to debug properly... Any suggestions to speedup the discovery process more than welcome ...",
                                           "updatedAt":  "2025-04-14T17:44:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nChwQ",
                                           "createdAt":  "2025-04-14T17:54:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e I can confirm Excel looks up the correct key:\n\nI assume you\u0027re embedding the TLB into the comhost.\n\n\u003e One more thing: I have built the runtime locally but I am a bit perplexed as to how to ensure I build a .comhost.dll that loads the custom runtime in order to debug properly...\n\nLook at setting `DOTNET_ROOT` for the environment where Excel is running. My normal approach here is to pull down the ZIP file of the .NET runtime version I\u0027m interested in, patch it with the updated coreclr et al bits, and then set `DOTNET_ROOT` to the edited install where `dotnet.exe` resides.",
                                           "updatedAt":  "2025-04-14T17:54:36Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Excel Automation AddIn fails under .NET6+",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114773",
        "createdAt":  "2025-04-17T11:11:16Z",
        "number":  114773,
        "author":  "tfenise",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-22T05:42:08Z",
        "body":  "https://github.com/dotnet/runtime/blob/248d6f422e777219e11762a330405234cbcee156/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Runtime/InteropServices/Marshal.Com.cs#L76-L97\n\nLine 96 should use `typeof(TInterface)` instead of `typeof(T)`. Compare to\n\nhttps://github.com/dotnet/runtime/blob/b40903fbdbe2263db101a6cf7ae4bcc3d4471af9/src/coreclr/System.Private.CoreLib/src/System/Runtime/InteropServices/Marshal.CoreCLR.cs#L461-L463\n\nIn addition, it seems inconsistent that in the NativeAOT version, `GetComInterfaceForObject(object o, Type T, CustomQueryInterfaceMode mode)` throws unconditionally, but `GetComInterfaceForObject(object o, Type T)` may still work (with the help of `ComWrappers.RegisterForMarshalling`).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqBfKnQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6no-In",
                                           "createdAt":  "2025-04-17T11:11:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-17T11:11:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ntDMF",
                                           "createdAt":  "2025-04-17T17:22:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "@MichalStrehovsky and @jkoritzinsky for thoughts",
                                           "updatedAt":  "2025-04-17T17:22:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oF8qd",
                                           "createdAt":  "2025-04-22T05:42:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e [@MichalStrehovsky](https://github.com/MichalStrehovsky) and [@jkoritzinsky](https://github.com/jkoritzinsky) for thoughts\n\nThe fix seems simple enough, but we should probably have a test. This seems to indicate there is a test hole for these APIs with built-in COM interop disabled (i.e. how do we know the code works as-is on CoreCLR-JIT?).",
                                           "updatedAt":  "2025-04-22T05:42:07Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Marshal.GetComInterfaceForObject in NativeAOT",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115094",
        "createdAt":  "2025-04-27T17:12:21Z",
        "number":  115094,
        "author":  "VSadov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-02T15:52:20Z",
        "body":  "We have a number of scenarios that may or may not be reachable with Async methods, but right now do not have a well defined behavior if Async methods get there. A good example is COM interop.\nSuch scenarios are stubbed to throw exceptions and marked with `// TODO: (async) revisit and examine if this needs to be supported` \n\nSome of these places may be truly unreachable, some may need to be made unreachable and in some cases we may need to provide some kind of support for Async. \n\nThis is the tracking issue to make sure that all these TODOs are revisited and removed after providing appropriate behavior.\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqOVZ-A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6o5Jmz",
                                           "createdAt":  "2025-04-27T17:12:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-27T17:12:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6o5Vn4",
                                           "createdAt":  "2025-04-27T19:21:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-27T19:21:29Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[RuntimeAsync] Revisit TODOs in places of questionable intersections of existing scenarios and Async",
        "labels":  [
                       "area-Interop-coreclr",
                       "runtime-async"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116393",
        "createdAt":  "2025-06-06T20:58:53Z",
        "number":  116393,
        "author":  "elinor-fung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:03:42Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1061113\nBuild error leg or test failing: Interop/COM/NativeClients/Dispatch/Dispatch.cmd\nPull request: https://github.com/dotnet/runtime/pull/116342\n\n[console log](https://helixr18s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-116342-merge-e5789a56e11447c4ac/Interop/1/console.3166dbc5.log?helixlogtype=result)\n```\nReturn code:      1\nRaw output file:      C:hwAC05097EwBAE409ECuploadsCOMNativeClientsDispatchoutput.txt\nRaw output:\nBEGIN EXECUTION\nCopying \u0027C:hwAC05097EpCoreShim.dll\u0027...\n        1 file(s) copied.\n COMClientDispatch Dispatch.dll \nInvoke DoubleNumeric_ReturnByRef\nInvoke Add_Float_ReturnAndUpdateByRef\nInvoke Add_Double_ReturnAndUpdateByRef\nInvoke PassThroughLCID\nInvoke GetEnumerator (DISPID_NEWENUM)\n -- Validate returned IEnumVARIANT\nInvoke ExplicitGetEnumerator\n -- Validate returned IEnumVARIANT\nInvoke ManagedArgument\nValidating VT_UI4\nValidating VT_I2\nValidating VT_I8\nValidating VT_R8\nValidating VT_CY\nValidating VT_BSTR\nFAILURE: 0x80131516 = dispatchCoerceTesting-\u003eInvoke( methodId, IID_NULL, lcid, DISPATCH_METHOD, \u0026params, \u0026result, nullptr, nullptr )\nTest Failure: 0x80131516\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nFAILED\nTest failed. Trying to see if dump file was created in C:cores since 6/6/2025 7:17:42 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e C:hwAC05097EwBAE409ECeInteropInterop../COM/NativeClients/Dispatch/Dispatch.cmd\n```\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": \"0x80131516 = dispatchCoerceTesting-\u003eInvoke\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1061113\r\n**Error message validated:** `[0x80131516 = dispatchCoerceTesting-\u003eInvoke`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 6/6/2025 8:59:20 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwShMaA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6v4X_G",
                                           "createdAt":  "2025-06-06T21:03:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-06T21:03:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6z2xCD",
                                           "createdAt":  "2025-06-30T01:45:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr jitstress 20250628.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1081190\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=29393746\u0026resultId=123297\u0026paneView=debug)\n\n**Failed tests:**\n```\ncoreclr windows arm64 Checked jitstress1 @ Windows.11.Arm64.Open\n    - Interop/COM/NativeClients/Dispatch/Dispatch.cmd\n```\n\n**Error message:**\n```\n \nReturn code:      1\nRaw output file:      C:hwB51009C9wB1A7092AuploadsCOMNativeClientsDispatchoutput.txt\nRaw output:\nBEGIN EXECUTION\nCopying \u0027C:hwB51009C9pCoreShim.dll\u0027...\n        1 file(s) copied.\n COMClientDispatch Dispatch.dll \nInvoke DoubleNumeric_ReturnByRef\nInvoke Add_Float_ReturnAndUpdateByRef\nInvoke Add_Double_ReturnAndUpdateByRef\nInvoke PassThroughLCID\nInvoke GetEnumerator (DISPID_NEWENUM)\n -- Validate returned IEnumVARIANT\nInvoke ExplicitGetEnumerator\n -- Validate returned IEnumVARIANT\nInvoke ManagedArgument\nValidating VT_UI4\nValidating VT_I2\nValidating VT_I8\nValidating VT_R8\nValidating VT_CY\nValidating VT_BSTR\nFAILURE: 0x80131516 = dispatchCoerceTesting-\u003eInvoke( methodId, IID_NULL, lcid, DISPATCH_METHOD, \u0026params, \u0026result, nullptr, nullptr )\nTest Failure: 0x80131516\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nFAILED\nTest failed. Trying to see if dump file was created in C:cores since 6/29/2025 5:50:12 AM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e C:hwB51009C9wB1A7092AeInteropInterop../COM/NativeClients/Dispatch/Dispatch.cmd\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor213|0_214(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-06-30T01:45:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68qOPk",
                                           "createdAt":  "2025-08-07T17:50:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "removing blocking-clean-ci as it has not failed in 30 days\n\n24-Hour Hit Count | 7-Day Hit Count | 1-Month Count\n-- | -- | --\n0 | 0 | 0\n",
                                           "updatedAt":  "2025-08-07T17:50:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AhbLE",
                                           "createdAt":  "2025-08-27T22:50:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "Failed in [runtime-coreclr jitstressregs](https://dev.azure.com/dnceng-public/public/_build?definitionId=110\u0026_a=summary)/[20250825.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131151)\n\nFailed test\n```\ncoreclr windows arm64 Checked jitstressregs0x10 @ Windows.11.Arm64.Open\n- Interop/COM/NativeClients/Dispatch/Dispatch.cmd\n```\n\nSame error message as above.\n\n",
                                           "updatedAt":  "2025-08-27T22:50:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BKExo",
                                           "createdAt":  "2025-09-01T01:53:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr jitstress-random 20250831.1](https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1135915)\n\n**Failed tests:**\n```\ncoreclr windows arm64 Checked jitstress_random_1 @ Windows.11.Arm64.Open\n    - Interop/COM/NativeClients/Dispatch/Dispatch.cmd\n```\n\n**Error message:**\n```\n\nReturn code:      1\nRaw output file:      C:hwC3AA0A44wAB1C0959uploadsCOMNativeClientsDispatchoutput.txt\nRaw output:\nBEGIN EXECUTION\nCopying \u0027C:hwC3AA0A44pCoreShim.dll\u0027...\n        1 file(s) copied.\n COMClientDispatch Dispatch.dll \nInvoke DoubleNumeric_ReturnByRef\nInvoke Add_Float_ReturnAndUpdateByRef\nInvoke Add_Double_ReturnAndUpdateByRef\nInvoke PassThroughLCID\nInvoke GetEnumerator (DISPID_NEWENUM)\n -- Validate returned IEnumVARIANT\nInvoke ExplicitGetEnumerator\n -- Validate returned IEnumVARIANT\nInvoke ManagedArgument\nValidating VT_UI4\nValidating VT_I2\nValidating VT_I8\nValidating VT_R8\nValidating VT_CY\nValidating VT_BSTR\nFAILURE: 0x80131516 = dispatchCoerceTesting-\u003eInvoke( methodId, IID_NULL, lcid, DISPATCH_METHOD, \u0026params, \u0026result, nullptr, nullptr )\nTest Failure: 0x80131516\nExpected: 100\nActual: 101\nEND EXECUTION - FAILED\nFAILED\nTest failed. Trying to see if dump file was created in C:cores since 8/31/2025 7:54:39 PM\nTest Harness Exitcode is : 1\nTo run the test:\nSet up CORE_ROOT and run.\n\u003e C:hwC3AA0A44wAB1C0959eInteropInterop../COM/NativeClients/Dispatch/Dispatch.cmd\n```\n\n**Stack trace:**\n```\n   at TestLibrary.OutOfProcessTest.RunOutOfProcessTest(String assemblyPath, String testPathPrefix)\n   at Program.\u003c\u003cMain\u003e$\u003eg__TestExecutor213|0_214(StreamWriter tempLogSw, StreamWriter statsCsvSw, \u003c\u003ec__DisplayClass0_0\u0026)\n```",
                                           "updatedAt":  "2025-09-01T01:53:11Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Interop/COM/NativeClients/Dispatch test failure: 0x80131516 = dispatchCoerceTesting-\u003eInvoke",
        "labels":  [
                       "area-Interop-coreclr",
                       "blocking-clean-ci-optional",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117666",
        "createdAt":  "2025-07-15T15:43:43Z",
        "number":  117666,
        "author":  "tarekgh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:04:07Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1094436\nBuild error leg or test failing: LibraryImportGenerator.Tests.WorkItemExecution\nPull request: https://github.com/dotnet/runtime/pull/117636\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": [\"LibraryImportGenerator.Tests\", \"./RunTests.sh: line 168: 213925 Killed\"],\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1094436\r\n**Error message validated:** `[LibraryImportGenerator.Tests ./RunTests.sh: line 168: 213925 Killed`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 7/15/2025 3:44:07 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvhLDuA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6-EsO4",
                                           "createdAt":  "2025-08-14T15:36:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "removing blocking-clean-ci as this issue has not occurred in 30 days\n\n24-Hour Hit Count | 7-Day Hit Count | 1-Month Count\n-- | -- | --\n0 | 0 | 0\n",
                                           "updatedAt":  "2025-08-14T15:36:44Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "LibraryImportGenerator test get killed on Ubuntu",
        "labels":  [
                       "area-Interop-coreclr",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118115",
        "createdAt":  "2025-07-28T07:06:59Z",
        "number":  118115,
        "author":  "chirndlerks",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-19T06:28:07Z",
        "body":  "**Description**\n\nI am having trouble loading C# assemblies when they are loaded from your C++ -\u003e C++/CLI context. It works fine from a C# -\u003e C++/CLI context.\nAs I understand it, the problem is how the TRUSTED_PLATFORM_ASSEMBLIES are assigned. In the C++ case, despite using version 9.0.0, a path to C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\8.0.18\\ System.Collections.Immutable.dll is included. In the C# case, this line is correctly missing.\n\nSo far, I have not found a way to modify this in the C++ environment.\nIs there any way to make this configuration work?\nI\u0027m ready for anything - even hooks.\n\nRelated to  #95607\nThe solution found here to ship our app with a local DOTNET_ROOT is not a solution for us.\n\n**Reproduction Steps**\n\nClone and build the CppCliFwLoading.sln from https://github.com/chirndlerks/CppCliFwLoading\nRun CSApp, loading System.Collections.Immutable, Version=9.0.0.0 via C# -\u003e C++/CLI -\u003e C# is not a problem\nRun CppApp, loading System.Collections.Immutable, Version=9.0.0.0 via C++ -\u003e C++/CLI -\u003e C# results in a FileLoadException\n\n**Expected behavior**\n\nC++ -\u003e C++/CLI -\u003e C# behaves like C# -\u003e C++/CLI -\u003e C#\n\n**Actual behavior**\n\nC++ -\u003e C++/CLI -\u003e C# throws a FileLoadException\n\n**Configuration**\n\n.NET 8, Windows 10, x64\n\n_Note on the example: Roslyn should actually be used via the C++/CLI context.\nThe new versions of Microsoft.CodeAnalysis.* require System.Collections.Immutable in version 9.0.0.\nFor simplicity\u0027s sake, the example loads System.Collections.Immutable directly._",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvpIttw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc66VMNz",
                                           "createdAt":  "2025-07-28T08:28:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-28T08:28:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66VXxN",
                                           "createdAt":  "2025-07-28T08:42:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Does it work if you add direct NuGet package reference of System.Collections.Immutable 9.0.0 to CppCliLib?\n\nThe referenced version from CSLib is higher version so the framework version will never satisfy. If the package reference isn\u0027t passed transitively, then CppCliLib will lost the information to 9.0.0.0 version.",
                                           "updatedAt":  "2025-07-28T08:42:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66Vhvp",
                                           "createdAt":  "2025-07-28T08:50:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chirndlerks",
                                           "body":  "Unfortunately, that doesn\u0027t work either. Same problem.\nSee: https://github.com/chirndlerks/CppCliFwLoading/commit/8abe0137553dbbd356c4f597c83a778459f58d86",
                                           "updatedAt":  "2025-07-28T08:50:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66bDWs",
                                           "createdAt":  "2025-07-28T15:03:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "/cc @elinor-fung ",
                                           "updatedAt":  "2025-07-28T15:03:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66eMJN",
                                           "createdAt":  "2025-07-28T18:32:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elinor-fung",
                                           "body":  "When a C# app is launched, all the app\u0027s dependencies (and the runtime frameworks it depends on) are added to the TPA. When loading a component (like C++/CLI) in a non-.NET application, only the runtime framework assemblies are added to `TRUSTED_PLATFORM_ASSEMBLIES`. The component\u0027s dependencies are hooked in through the `AssemblyLoadContext.Resolving` event for the default ALC, which is only used when the assembly can\u0027t be found. In this case, this means that the System.Collections.Immutable 8.0 from the framework is in the TPA, so when the component tries to load `System.Collections.Immutable`, the 8.0 version is found based on the TPA (and the `Resolving` event is not called).\n\nWould loading the C++/CLI assembly in a separate AssemblyLoadContext work for you? There is a configuration switch you can set in the C++/CLI assembly that will load the assembly in a separate ALC instead of the default ALC:\n```\n\u003cItemGroup\u003e\n  \u003cRuntimeHostConfigurationOption Include=\"System.Runtime.InteropServices.CppCLI.LoadComponentInIsolatedContext\" Value=\"true\" /\u003e\n\u003c/ItemGroup\u003e\n```\n\nBy loading in a separate ALC, that ALC gets a chance to resolve assemblies for the component before the default ALC comes into play. Adding that item to CppCliLib in the repro project makes CppApp print 84. This does come with the complications of having assemblies living in different ALCs - for example, with multiple different C++/CLI assemblies that all set this configuration, they would each be in their own ALC, so their types and non-framework dependencies would be loaded in different ALCs and therefore [not be the same type]( https://learn.microsoft.com/dotnet/core/dependency-loading/understanding-assemblyloadcontext#type-conversion-issues).",
                                           "updatedAt":  "2025-07-28T18:32:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66n3Jw",
                                           "createdAt":  "2025-07-29T07:11:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chirndlerks",
                                           "body":  "First of all, thank you for your reply @elinor-fung.\nI can confirm that the example with the System.Runtime.InteropServices.CppCLI.LoadComponentInIsolatedContext option works as expected.\n\nUnfortunately, we have many different C++/CLI assemblies in our real environment.\nIn fact, many of them would have to set the option. This would lead us to exactly the problem you described – assemblies living in different ALCs.\nNone of them are designed for this in the current environment.\nWe often have a global state that is shared.\nThe LoadComponentInIsolatedContext option works from the C++ context, but not from the C# case.\nThis is also very confusing in practice.\nI have recreated this here as an example:\nhttps://github.com/chirndlerks/CppCliFwLoading/tree/MultipleCLIAssemblies\n\nThe best solution I could think of would be to load all existing C++/CLI assemblies via a new one that has a separate ALC.\nThis does not seem to work, as LoadComponentInIsolatedContext is really evaluated per assembly, regardless of the loading order.\nExample: https://github.com/chirndlerks/CppCliFwLoading/tree/MultipleCLIAssembliesOneLoader\nBut at this point, I could just load everything dynamically into a separate ALC and wouldn\u0027t need the option anymore.\nThat would have been a huge effort for us too.\n\nI am hoping for another suggestion on how I could solve my problem.",
                                           "updatedAt":  "2025-07-29T07:11:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68M3qA",
                                           "createdAt":  "2025-08-06T05:49:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chirndlerks",
                                           "body":  "@agocke \n\nWith Milestone Future, I can\u0027t assume that anything will happen here anytime soon?\nI really need a solution for our product that does not require us to rewrite our entire assembly loading.\n\nThe problem will only get bigger over time, the more \"nuget assemblies\" increase the version, right?",
                                           "updatedAt":  "2025-08-06T05:49:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69TtcJ",
                                           "createdAt":  "2025-08-11T17:41:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Correct, we don\u0027t plan to change anything in this area in the near term.\n\nWe talked about it and think that the only things that can handle a scenario of your complexity are:\n\n1. Writing a custom ijwhost and removing the framework assemblies you want to override from the TPA.\n2. Write a shim assembly, but only refer to other C++/CLI assemblies from managed code, not native code\n3. Dynamically load everything into a separate ALC.",
                                           "updatedAt":  "2025-08-11T17:41:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-ki23",
                                           "createdAt":  "2025-08-18T14:49:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bilbothebaggins",
                                           "body":  "\u003e handle a scenario of your complexity\n\n@agocke - I want to chime in here to say that this seems not a complex scenario at all. It is simply _one half_ of what C++/CLI promises to do: \n\nThe situation, as I understand it, is exactly as follows:\n\nnative.exe =\u003e cpp_cli.dll =\u003e Bog Standard MS Assembly dependency (in this case System.Collections.Immutable) \n\nAnd this does not work anymore, in case any newer runtime version dependency exists, even though this is totally supported in dotnet.\n\nSo only the other half ( dotnet =\u003e native) of C++/CLI is working without issue, the native=\u003edotnet path seems broken now. (?)\n\n----\n\nExpanding on this, after a night\u0027s sleep: (sorry in advance for the Soap Box)\n\nC++/CLI had two jobs:\n\n* Allow dotnet code to call into pure native code without P/Invoke shenanigans.\n* Allow native code (C++) to call into dotnet code _at all_ without major shenanigans like a COM bridge or some such.\n\nTo enable the second point, that is, calling into a .NET assembly from a \"normal\" native application, obviously first requires the C++/CLI machinery to start/bootstrap a fresh framework/runtime/clr inside the native process. This is certainly non-trivial, but it worked out of the box, surprisingly seamlessly (for us) over the whole lifetime of .NET Framework 4.\n\nAs far as I can tell (and I\u0027m really rather a highlevel observer here), runtimeconfig.json **and** deps.json are [integral parts of the assembly loading mechanism](https://learn.microsoft.com/en-us/dotnet/core/dependency-loading/default-probing) in dotnet core. To have dotnet with C++/CLI handle these two files so differently than when starting normally, _and_ having no way of fixing the clr startup with C++/CLI, seems like a plain old Bug to me.\n\nSo for me the executive summary is: MS, with dotnet core/6/7/8, has **broken** the second point above, i.e. **50% of C++/CLI\u0027s job**, with the way it starts the clr.\n\n",
                                           "updatedAt":  "2025-08-19T06:28:07Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Higher version of a framework assembly works in C# but not in C++/CLI",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118741",
        "createdAt":  "2025-08-14T16:57:24Z",
        "number":  118741,
        "author":  "emmenlau",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-25T20:09:49Z",
        "body":  "### Description\n\nSince updating our C++/CLI application to dotnet 9.0.8 we are affected by a new issue, where the below message is printed always at application end:\n```\nCLR: Assert failure(PID 19224 [0x00004b18], Thread: 7056 [0x1b90]): !\"Attempt to execute managed code after the .NET runtime thread state has been destroyed.\"\n    File: D:\\a\\_work\\1\\s\\src\\coreclr\\vm\\ceemain.cpp:1818\n```\n\nNote: This is a follow-up on my discussion at the end of https://github.com/dotnet/runtime/issues/117538.\n\n### Reproduction Steps\n\nI have created a minimal reproducer, but the behavior is very strange. The following code will trigger the issue.\n\n// The C++/CLI header:\n```\npublic ref class Test {\npublic:\n    static void testMethod();\n};\n```\n\n// The C++/CLI source file:\n```\n#include \u003cTest.hh\u003e\n\n#pragma managed(push, off)\n#include \u003cstring\u003e\nvoid haveString() {\n    static const std::string cString = \"MyClass\";\n}\n#pragma managed(pop)\n\n#include \u003cmsclr/lock.h\u003e\n\nvoid Test::testMethod() {\n    haveString();\n}\n```\n\nWhen a corresponding C# executable now calls `Test::testMethod()` then the above error will be triggered at program end (after the end of main, probably during destruction of static memory). The problem is 100% reproducible for me.\n\n\n### Expected behavior\n\nNo assertion should be raised.\n\n### Actual behavior\n\nAn assertion is raised at program end.\n\n### Regression?\n\nThis worked successfully in .NET 9.0.4, however it is possible that the older .NET did not have the same thorough checks (so maybe the issue was just hidden there).\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nThis is on Microsoft Windows 11 x64.\n\nDotnet installed with Visual Studio:\n```\n.NET SDK:\n Version:           9.0.304\n Commit:            f12f5f689e\n Workload version:  9.0.300-manifests.ad61bb1c\n MSBuild version:   17.14.16+5d8159c5f\n\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.26100\n OS Platform: Windows\n RID:         win-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\9.0.304\\\n\n.NET workloads installed:\nThere are no installed workloads to display.\nConfigured to use loose manifests when installing new manifests.\n\nHost:\n  Version:      9.0.8\n  Architecture: x64\n  Commit:       aae90fa090\n\n.NET SDKs installed:\n  9.0.304 [C:\\Program Files\\dotnet\\sdk]\n\n.NET runtimes installed:\n  Microsoft.AspNetCore.App 8.0.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 9.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 8.0.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 9.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.WindowsDesktop.App 8.0.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n  Microsoft.WindowsDesktop.App 9.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n\nOther architectures found:\n  x86   [C:\\Program Files (x86)\\dotnet]\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\n```\n\nVisual Studio is current latest:\n```\nMicrosoft Visual Studio Professional 2022\nVersion 17.14.12\nVisualStudio.17.Release/17.14.12+36408.4\nMicrosoft .NET Framework\nVersion 4.8.09032\n\nInstalled Version: Professional\n\nVisual C++ 2022   00483-10100-14247-AA184\nMicrosoft Visual C++ 2022\n\nASP.NET and Web Tools   17.14.122.59099\nASP.NET and Web Tools\n\nAzure App Service Tools v3.0.0   17.14.122.59099\nAzure App Service Tools v3.0.0\n\nC# Tools   4.14.0-3.25359.3+6dbcfd2f553ef1ef0ac48878ab17d18c1360735d\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\n\nGitHub Copilot   17.14.995.13737\nGitHub Copilot is an AI pair programmer that helps you write code faster and with less work.\n\nMicrosoft JVM Debugger   1.0\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\n\nNuGet Package Manager   6.14.1\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit https://docs.nuget.org/\n\nTypeScript Tools   17.0.40502.2001\nTypeScript Tools for Microsoft Visual Studio\n\nVisual Basic Tools   4.14.0-3.25359.3+6dbcfd2f553ef1ef0ac48878ab17d18c1360735d\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\n\nVisual F# Tools   17.14.0-beta.25230.7+c1a9d78ad4a474a716ccffb4367ed5151e3f7c9f\nMicrosoft Visual F# Tools\n\nVisual Studio IntelliCode   2.2\nAI-assisted development for Visual Studio.\n```\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvpC8hA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6-F0Ve",
                                           "createdAt":  "2025-08-14T17:00:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "emmenlau",
                                           "body":  "The issue goes away under two conditions:\n\n(1) The issue goes away when the native `haveString()` method is not wrapped in `#pragma managed(push, off)`. For example, the issue goes away when I change the above C++/CLI source file so that the first lines read:\n```\n#include \u003cTest.hh\u003e\n\n#pragma managed(push, off)\n#include \u003cstring\u003e\n#pragma managed(pop)\n\nvoid haveString() {\n    static const std::string cString = \"MyClass\";\n}\n```\n\n(2) The issue goes away when the native `haveString()` method does not contain the string as `static`. For example, the issue goes away when I change the above C++/CLI source file so that the first lines read:\n```\n#include \u003cTest.hh\u003e\n\n#pragma managed(push, off)\n#include \u003cstring\u003e\n\nvoid haveString() {\n    const std::string cString = \"MyClass\";\n}\n#pragma managed(pop)\n```",
                                           "updatedAt":  "2025-08-14T17:13:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-F4KI",
                                           "createdAt":  "2025-08-14T17:05:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "emmenlau",
                                           "body":  "I have tried to generate a dump as suggested by @jkotas in https://github.com/dotnet/runtime/issues/117538#issuecomment-3188959024, but no dumps are generated for me. Am I doing something wrong?\n\nHere are my settings, and explorer showing the corresponding empty folder `C:\\CrashDumps`:\n\n\u003cimg width=\"2369\" height=\"1285\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/c8267476-061c-4933-930d-b6e379ccd44a\" /\u003e",
                                           "updatedAt":  "2025-08-14T17:05:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-Gn13",
                                           "createdAt":  "2025-08-14T18:04:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Check in the Event Viewer. You should see reports of your app crashing. If not, something is not being caught in Windows.",
                                           "updatedAt":  "2025-08-14T18:04:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-GycF",
                                           "createdAt":  "2025-08-14T18:20:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "cc: @VSadov as you made some changes in thread shutdown",
                                           "updatedAt":  "2025-08-14T18:20:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-IEUn",
                                           "createdAt":  "2025-08-14T20:28:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "Could C++/CLI emit calls into managed from DllMain in this scenario for some reason? Would that trigger the error here?",
                                           "updatedAt":  "2025-08-14T20:28:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-Jqgk",
                                           "createdAt":  "2025-08-14T23:39:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "Here is the offending stack. I will take a look at what changed tomorrow.\n\n```\n\u003e\tcoreclr.dll!DbgAssertDialog(const char * szFile, int iLine, const char * szExpr) Line 429\tC++\n \t[Inline Frame] coreclr.dll!OsAttachThread(void *) Line 1705\tC++\n \tcoreclr.dll!EnsureTlsDestructionMonitor() Line 1747\tC++\n \t[Inline Frame] coreclr.dll!SetThread(Thread *) Line 362\tC++\n \tcoreclr.dll!SetupThread() Line 707\tC++\n \tcoreclr.dll!SetupThreadNoThrow(HRESULT * pHR) Line 790\tC++\n \tcoreclr.dll!TheUMEntryPrestubWorker(UMEntryThunkData * pUMEntryThunkData) Line 222\tC++\n \tcoreclr.dll!TheUMEntryPrestub() Line 51\tUnknown\n \tucrtbased.dll!00007ff909812b99()\tUnknown\n \tucrtbased.dll!00007ff9098125c5()\tUnknown\n \tucrtbased.dll!00007ff909812717()\tUnknown\n \tucrtbased.dll!00007ff909812d44()\tUnknown\n \tNativeCLI.dll!__scrt_dllmain_uninitialize_c() Line 398\tC++\n \tNativeCLI.dll!dllmain_crt_process_detach(const bool is_terminating) Line 182\tC++\n \tNativeCLI.dll!dllmain_crt_dispatch(HINSTANCE__ * const instance, const unsigned long reason, void * const reserved) Line 220\tC++\n \tNativeCLI.dll!dllmain_dispatch(HINSTANCE__ * const instance, const unsigned long reason, void * const reserved) Line 293\tC++\n \tNativeCLI.dll!_DllMainCRTStartup(HINSTANCE__ * const instance, const unsigned long reason, void * const reserved) Line 335\tC++\n \tIjwhost.dll!00007ff9da4a1ce8()\tUnknown\n \tntdll.dll!00007ffa39920cee()\tUnknown\n \tntdll.dll!00007ffa398329fe()\tUnknown\n \tntdll.dll!00007ffa397fdc2f()\tUnknown\n \tntdll.dll!00007ffa397fc504()\tUnknown\n \tkernel32.dll!00007ffa386318ab()\tUnknown\n \tcorerun.exe!exit_or_terminate_process(const unsigned int return_code, bool should_call_terminate_proc) Line 142\tC++\n \tcorerun.exe!common_exit(const int return_code, const _crt_exit_cleanup_mode cleanup_mode, const _crt_exit_return_mode return_mode) Line 288\tC++\n \tcorerun.exe!exit(int return_code) Line 302\tC++\n \tcorerun.exe!__scrt_common_main_seh() Line 295\tC++\n \tcorerun.exe!__scrt_common_main() Line 331\tC++\n \tcorerun.exe!wmainCRTStartup(void * __formal) Line 17\tC++\n\n```",
                                           "updatedAt":  "2025-08-14T23:39:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-Jrq5",
                                           "createdAt":  "2025-08-14T23:41:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "This looks like some fallout from https://github.com/dotnet/runtime/pull/112809.",
                                           "updatedAt":  "2025-08-14T23:41:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-JxwQ",
                                           "createdAt":  "2025-08-14T23:58:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEebNTw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "emmenlau",
                                                                               "createdAt":  "2025-08-15T10:39:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e Here is the offending stack. I will take a look at what changed tomorrow.\n\u003e \n\u003e ```\n\u003e \u003e\tcoreclr.dll!DbgAssertDialog(const char * szFile, int iLine, const char * szExpr) Line 429\tC++\n\u003e  \t[Inline Frame] coreclr.dll!OsAttachThread(void *) Line 1705\tC++\n\u003e  \tcoreclr.dll!EnsureTlsDestructionMonitor() Line 1747\tC++\n\u003e  \t[Inline Frame] coreclr.dll!SetThread(Thread *) Line 362\tC++\n\u003e  \tcoreclr.dll!SetupThread() Line 707\tC++\n\u003e  \tcoreclr.dll!SetupThreadNoThrow(HRESULT * pHR) Line 790\tC++\n\u003e  \tcoreclr.dll!TheUMEntryPrestubWorker(UMEntryThunkData * pUMEntryThunkData) Line 222\tC++\n\u003e  \tcoreclr.dll!TheUMEntryPrestub() Line 51\tUnknown\n\u003e  \tucrtbased.dll!00007ff909812b99()\tUnknown\n\u003e  \tucrtbased.dll!00007ff9098125c5()\tUnknown\n\u003e  \tucrtbased.dll!00007ff909812717()\tUnknown\n\u003e  \tucrtbased.dll!00007ff909812d44()\tUnknown\n\u003e  \tNativeCLI.dll!__scrt_dllmain_uninitialize_c() Line 398\tC++\n\u003e  \tNativeCLI.dll!dllmain_crt_process_detach(const bool is_terminating) Line 182\tC++\n\u003e  \tNativeCLI.dll!dllmain_crt_dispatch(HINSTANCE__ * const instance, const unsigned long reason, void * const reserved) Line 220\tC++\n\u003e  \tNativeCLI.dll!dllmain_dispatch(HINSTANCE__ * const instance, const unsigned long reason, void * const reserved) Line 293\tC++\n\u003e  \tNativeCLI.dll!_DllMainCRTStartup(HINSTANCE__ * const instance, const unsigned long reason, void * const reserved) Line 335\tC++\n\u003e  \tIjwhost.dll!00007ff9da4a1ce8()\tUnknown\n\u003e  \tntdll.dll!00007ffa39920cee()\tUnknown\n\u003e  \tntdll.dll!00007ffa398329fe()\tUnknown\n\u003e  \tntdll.dll!00007ffa397fdc2f()\tUnknown\n\u003e  \tntdll.dll!00007ffa397fc504()\tUnknown\n\u003e  \tkernel32.dll!00007ffa386318ab()\tUnknown\n\u003e  \tcorerun.exe!exit_or_terminate_process(const unsigned int return_code, bool should_call_terminate_proc) Line 142\tC++\n\u003e  \tcorerun.exe!common_exit(const int return_code, const _crt_exit_cleanup_mode cleanup_mode, const _crt_exit_return_mode return_mode) Line 288\tC++\n\u003e  \tcorerun.exe!exit(int return_code) Line 302\tC++\n\u003e  \tcorerun.exe!__scrt_common_main_seh() Line 295\tC++\n\u003e  \tcorerun.exe!__scrt_common_main() Line 331\tC++\n\u003e  \tcorerun.exe!wmainCRTStartup(void * __formal) Line 17\tC++\n\u003e ```\n\n\u003cimg width=\"666\" height=\"97\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/39ccf7f5-0e83-4287-bf46-652e5d898800\" /\u003e\n\n`haveString` uses `atexit` to execute the `std::string` destructor when it\u0027s static, which is then called from DllMain.\nIt\u0027s not clear to me however why would the cleanup stub be a managed function though. I assume this is a C++/CLI compiler bug in that it emits stuff that can\u0027t be managed as such.\n\nI assume we only got the new message cause the FLS callbacks are executed before DllMain.",
                                           "updatedAt":  "2025-08-15T00:07:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-SHFT",
                                           "createdAt":  "2025-08-15T18:43:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEehLKQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "emmenlau",
                                                                               "createdAt":  "2025-08-16T15:16:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@emmenlau I\u0027ve chatted with the C++/CLI team and they are going to take a look. I\u0027ve filed a Community Feedback ticket with more details if you\u0027d like to follow: https://developercommunity.visualstudio.com/t/CCLI-function-static-member-causes-ma/10952500",
                                           "updatedAt":  "2025-08-15T18:43:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-XHcd",
                                           "createdAt":  "2025-08-16T15:15:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEehLKw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "emmenlau",
                                                                               "createdAt":  "2025-08-16T15:16:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e [@emmenlau](https://github.com/emmenlau) I\u0027ve chatted with the C++/CLI team and they are going to take a look. I\u0027ve filed a Community Feedback ticket with more details if you\u0027d like to follow: https://developercommunity.visualstudio.com/t/CCLI-function-static-member-causes-ma/10952500\n\nThe ticket appears to be non public FYI.",
                                           "updatedAt":  "2025-08-16T15:15:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-Xi2L",
                                           "createdAt":  "2025-08-16T18:47:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "emmenlau",
                                           "body":  "@AaronRobinsonMSFT the problem is really quite severe, because all program executions now end in a fatal assert. But its great that you all followed up so quickly, highly appreciated!!! Thanks a lot in advance!",
                                           "updatedAt":  "2025-08-16T18:47:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-XjPk",
                                           "createdAt":  "2025-08-16T18:50:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e [@AaronRobinsonMSFT](https://github.com/AaronRobinsonMSFT) the problem is really quite severe, because all program executions now end in a fatal assert. But its great that you all followed up so quickly, highly appreciated!!! Thanks a lot in advance!\n\nFYI executing managed code in DllMain was always illegal, the recent change just added a reliable error message.\nSo this could\u0027ve possibly always crashed, just not reliably.",
                                           "updatedAt":  "2025-08-16T18:50:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-Xy-c",
                                           "createdAt":  "2025-08-16T21:08:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "emmenlau",
                                           "body":  "Makes perfectly sense, and its great that this has come to light! I just hope the C++/CLI team finds a clean solution for this...",
                                           "updatedAt":  "2025-08-16T21:08:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-X5bm",
                                           "createdAt":  "2025-08-16T22:12:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEeh2ww==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "emmenlau",
                                                                               "createdAt":  "2025-08-16T22:35:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e The ticket appears to be non public FYI.\n\nFixed.\n\n\u003e [@AaronRobinsonMSFT](https://github.com/AaronRobinsonMSFT) the problem is really quite severe, because all program executions now end in a fatal assert. But its great that you all followed up so quickly, highly appreciated!!! Thanks a lot in advance!\n\nRight, this is an all-builds assert. We might need to relax this issue for retail builds. There is low possibility this will be addressed by MSVC in the .NET 10 timeframe.\n",
                                           "updatedAt":  "2025-08-16T22:12:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-X7hD",
                                           "createdAt":  "2025-08-16T22:35:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "emmenlau",
                                           "body":  "\u003e Right, this is an all-builds assert. We might need to relax this issue for retail builds. There is low possibility this will be addressed by MSVC in the .NET 10 timeframe.\n\nOh my! This is a nightmare...\n\nCan I ask, is there some certainty that this only affects `static std::string`? Or is it likely that this problem may affect other types? If there is some high probability that this issue is limited to `static std::string` then we may, for now, eliminate all such usage in all our code - a horrible endeavor, but way better than waiting possibly a year before we can continue using C++/CLI...",
                                           "updatedAt":  "2025-08-16T22:35:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-X9dX",
                                           "createdAt":  "2025-08-16T22:57:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e Can I ask, is there some certainty that this only affects static std::string?\n\nIt is possible this only impacts `std::string`, but unlikely. Based on my analysis described in https://developercommunity.visualstudio.com/t/CCLI-function-static-member-causes-ma/10952500, I think this is likely to impact all `static` variables, managed or unmanaged, that are at least compiled in the same translation unit. I\u0027m dubious this has anything to do with a specific type. The gist is about where the C++/CLI compiler is storing the `static` storage instance.\n\nThis is unlikely to be a new code gen pattern for C++/CLI and rather we\u0027ve just now uncovered it. I\u0027ve reached out to the C++/CLI team and asked for a prioritized analysis, but even that will take a bit. While we are waiting for them I will also prepare a mitigation for .NET 10 that relaxes this constraint and see if there is other fallout.\n\n---\n\nAs an aside, I would be interested in why C++/CLI is being used by you and your team. Is this an existing large codebase or is this a new one? In general, C++/CLI pesimizes both .NET and C++, one can\u0027t use the latest .NET goodness (for example, `Span\u003cT\u003e`) or benefit from most ISO C++ optimizations and model guarantees (for example, C++11 or later).",
                                           "updatedAt":  "2025-08-17T00:37:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-X-v9",
                                           "createdAt":  "2025-08-16T23:10:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEeh_yQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2025-08-17T00:37:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e It is possible this only impacts `std::string`, but unlikely. Based on my analysis described in https://developercommunity.visualstudio.com/t/CCLI-function-static-member-causes-ma/10952500, I think this is likely to impact all `static` variables, managed or unmanaged, that are at least compiled in the same translation unit. I\u0027m dubious this has anything to do with a specific type. The gist is about where the C++/CLI compiler is storing the `static` storage instance.\n\nI\u0027d assume the requirement here would be the type having a destructor, would be surprised if it still emitted this for types without one.",
                                           "updatedAt":  "2025-08-16T23:10:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-YPXm",
                                           "createdAt":  "2025-08-17T01:15:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "One of the workarounds is to exit your app using `TerminateProcess(GetCurrentProcess(), 0);` that terminates the app immediately without running `DLL_PROCESS_DETACH` callbacks. It avoids this and other problems with `DLL_PROCESS_DETACH` (including problems with C/C++ destructors). It works only if your app is not doing any critical work inside `DLL_PROCESS_DETACH` callbacks or C/C++ destructors.\n\nFWIW, number of Microsoft own apps use `TerminateProcess(GetCurrentProcess(), 0);` to exit for this reason.",
                                           "updatedAt":  "2025-08-17T01:15:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-Y7S0",
                                           "createdAt":  "2025-08-17T07:47:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "emmenlau",
                                           "body":  "\u003e As an aside, I would be interested in why C++/CLI is being used by you and your team. Is this an existing large codebase or is this a new one? In general, C++/CLI pesimizes both .NET and C++, one can\u0027t use the latest .NET goodness (for example, `Span\u003cT\u003e`) or benefit from most ISO C++ optimizations and model guarantees (for example, C++11 or later).\n\nI have just started six months ago to dive into C++/CLI, for the sole purpose of integrating a large C++ software solution into an equally large C# software product. So all our C++/CLI code will be driven from C# eventually.\n\nTo be fully honest, I would have preferred a P/Invoke based integration. But the two main support libraries that I know of, [Swig](https://www.swig.org/) and [CppSharp](https://github.com/mono/CppSharp) are not easy to handle. Swig has horribly complex parsers, generates poor C++ glue code, and seems not all too actively maintained. CppSharp on the other hand is incredibly powerful, but seems gigantic effort to get started, and development seems also not to move all too fast.\n\nCompared to this P/Invoke situation, our mileage with C++/CLI has been pretty good. Code is ok readable, and seems to work ok. There is significant manual effort in writing and maintaining the code, but currently it seems still favorable to the situation with P/Invoke.\n\nBut I\u0027d be more than happy about suggestions! :-/",
                                           "updatedAt":  "2025-08-17T07:48:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-Y8F0",
                                           "createdAt":  "2025-08-17T07:55:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "emmenlau",
                                           "body":  "\u003e One of the workarounds is to exit your app using `TerminateProcess(GetCurrentProcess(), 0);` that terminates the app immediately without running `DLL_PROCESS_DETACH` callbacks. It avoids this and other problems with `DLL_PROCESS_DETACH` (including problems with C/C++ destructors). It works only if your app is not doing any critical work inside `DLL_PROCESS_DETACH` callbacks or C/C++ destructors.\n\nI\u0027m really happy to learn about any workarounds for this, as the problem is currently fully blocking our work! We are not actively doing any relevant work in `DLL_PROCESS_DETACH`. However we do have our main application in C# with WPF. I will need to check if it is safe to terminate the app at the end of `main()` to understand this better.\n\nFWIW, I guess it is not an option to reduce the severity of this issue by just printing a user warning instead of the current assert in .NET 9 and 10? Just until the underlying issue is fixed in C++/CLI? I\u0027m not specifically asking only for myself, but I guess there must be literally thousands of C++/CLI users that will sooner or later be hit by this problem...",
                                           "updatedAt":  "2025-08-17T07:55:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-aBPB",
                                           "createdAt":  "2025-08-17T16:30:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "\u003e Compared to this P/Invoke situation, our mileage with C++/CLI has been pretty good. Code is ok readable, and seems to work ok. There is significant manual effort in writing and maintaining the code, but currently it seems still favorable to the situation with P/Invoke.\n\nI would avoid writing new code in C++/CLI. I get the integration concept, but the long term costs here are non-trivial. For existing code bases, this makes good sense, but for new ones it is far better to interop with a collection of ISO C++ and the latest tooling for C# via P/Invokes (`LibraryImport`), function pointers, and perhaps writing a custom source generator. C++/CLI is from a different era and was primarily brought into .NET Core as a way to transition from .NET Framework to .NET Core. Note that it will _never_ be cross platform compatible, it will _never_ be as a fast as ISO C++ interoping with C#, and it will _never_ be able to take advantage of native AOT or crossgen options. In short, it will forever be limited to the tooling and langauge experience from what was done between 2005 and 2010.\n\nC++/CLI is a reliable and stable option for moving _existing_ code bases forward, but it is not something we would recommend for a new code base.\n\n\u003e FWIW, I guess it is not an option to reduce the severity of this issue by just printing a user warning instead of the current assert in .NET 9 and 10?\n\nSee my comment in https://github.com/dotnet/runtime/issues/118741#issuecomment-3193952087.",
                                           "updatedAt":  "2025-08-17T16:31:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-aCo6",
                                           "createdAt":  "2025-08-17T16:40:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEejX7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2025-08-17T17:08:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "@emmenlau I\u0027d recommend that you take a look at https://github.com/dotnet/Clangsharp for generating bindings. It\u0027s a more modern option that generates decent code.",
                                           "updatedAt":  "2025-08-17T16:40:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-axWp",
                                           "createdAt":  "2025-08-17T22:19:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "emmenlau",
                                           "body":  "That looks very interesting! But do you have experience with real C++ use cases? Can it wrap methods for exception handling? Do some stl containers work? How about std::string with utf8?\nThe documentation is really sparse, do you have pointers to more insights?\n",
                                           "updatedAt":  "2025-08-17T22:19:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-bT2c",
                                           "createdAt":  "2025-08-18T01:27:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "neon-sunset",
                                           "body":  "\u003e How about std::string with utf8?\n\nFor the best performance, you may want to avoid \"chatty\" interop code. .NET provides quite decent abstractions to work with UTF-8 by now - most primitives implement `IUtf8SpanParsable\u003cT\u003e` and `IUtf8SpanFormattable`, `System.Text.Json` is built around the concept of working with UTF-8 \"natively\" too. There are also UTF-8 literals `\"text\"u8`.\nCalling into C++ to work with (UTF-8) strings over using built-in functionality is a mistake. If you need to construct `std::string` specifically - it is best to prepare the needed state beforehand and then construct the string itself only once it\u0027s needed to be passed across interop. This way you will get both better ergonomics (there are plenty of nuget packages which provide UX improvements like https://www.nuget.org/packages/Utf8StringInterpolation) and better performance.",
                                           "updatedAt":  "2025-08-18T01:31:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-fp7D",
                                           "createdAt":  "2025-08-18T09:53:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "emmenlau",
                                           "body":  "Is it likely that https://github.com/dotnet/runtime/pull/118827 can be merged into .NET 9? That would be really great!",
                                           "updatedAt":  "2025-08-18T09:53:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-kLyE",
                                           "createdAt":  "2025-08-18T14:23:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEeppUw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "emmenlau",
                                                                               "createdAt":  "2025-08-18T15:04:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Yes, that\u0027s our current plan. It is not a fix for this issue - it is likely that your app will still crash or hang during shutdown intermittently, and it will take a few months to ship this workaround. You may still want to look for a better solution, like `TerminateProcess` suggested above or even avoiding managed C++ altogether.\n\n\n\n\n",
                                           "updatedAt":  "2025-08-18T14:23:55Z"
                                       }
                                   ],
                         "totalCount":  26
                     },
        "title":  "Getting `Attempt to execute managed code after the .NET runtime thread state has been destroyed` when a native method holds a `static std::string`?",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118988",
        "createdAt":  "2025-08-22T11:14:22Z",
        "number":  118988,
        "author":  "xtqqczze",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODMShSg==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "Copilot",
                                            "createdAt":  "2025-08-22T13:54:07Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-22T13:54:14Z",
        "body":  "* Replace calls to `Marshal.PtrToStringUni` and `Marshal.StringToCoTaskMemUni` with calls of equivalent methods on `Utf16StringMarshaller` throughout the repository.\n* Improve type consistency by updating method signatures and fields to use `ushort*` instead of `IntPtr` for UTF-16 string pointers, removing unnecessary (IntPtr) casts.\n* Add `unsafe` modifiers to fix unsafe context issues when using unmanaged pointers as appropriate.\n* Do not change interop tests.\n* Preserve original `Utf16StringMarshaller.cs`\n\ncc: @copilot, @jkotas",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv5Hb7g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6_kdvu",
                                           "createdAt":  "2025-08-22T11:15:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-22T11:15:12Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Replace calls to `Marshal.PtrToStringUni` methods with `Utf16StringMarshaller`",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119332",
        "createdAt":  "2025-09-03T20:18:41Z",
        "number":  119332,
        "author":  "elinor-fung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-17T17:53:01Z",
        "body":  "Would it make sense to mark `DllImportSearchPath` values that don\u0027t make sense outside Windows as `[SupportedOSPlatform(\"windows\")]`?\r\n\r\n_Originally posted by @MichalStrehovsky in https://github.com/dotnet/runtime/pull/119287#pullrequestreview-3178965639_\r\n\r\nOnly `DllImportSearchPath.AssemblyDirectory` means anything on non-Windows.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwuayVg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7BwPeE",
                                           "createdAt":  "2025-09-03T20:19:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-03T20:19:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BwR8S",
                                           "createdAt":  "2025-09-03T20:23:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "I\u0027m a bot. Here is a possible related and/or duplicate issue (I may be wrong):\n- https://github.com/dotnet/runtime/issues/11681",
                                           "updatedAt":  "2025-09-03T20:23:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7BzwI3",
                                           "createdAt":  "2025-09-04T02:52:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "A single `DllImportAttribute` can be used for defining P/Invoke for different platforms. Marking something as Windows-only may potentially be confusing.",
                                           "updatedAt":  "2025-09-04T02:52:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7B4UvR",
                                           "createdAt":  "2025-09-04T09:28:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e A single `DllImportAttribute` can be used for defining P/Invoke for different platforms. Marking something as Windows-only may potentially be confusing.\n\nDo you have an example in mind where one would define a DllImport with Windows-specific `DllImportSearchPath` and rely on the fact that these flags don\u0027t really do anything outside Windows?\n\nI do have a counter-example in https://github.com/dotnet/runtime/pull/119287 where there was an assumption that DllImportSearchPath would do the same thing on all platforms and it introduced a bug (that would be preventable since we upgrade notes from SupportedOSPlatform to warning and then to error in this repo).",
                                           "updatedAt":  "2025-09-04T09:28:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Co73w",
                                           "createdAt":  "2025-09-08T09:54:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "I can\u0027t find an example though. Nowadays it\u0027s not recommended to install dll into system32, or does Windows ship open source libraries in system32.",
                                           "updatedAt":  "2025-09-08T09:54:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7C5rJW",
                                           "createdAt":  "2025-09-09T10:00:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e I can\u0027t find an example though. Nowadays it\u0027s not recommended to install dll into system32, or does Windows ship open source libraries in system32.\n\nI\u0027m not worried about people having crossplat bugs with `DllImportSearchPath.System32`. This is more about bugs with `DllImportSearchPath.ApplicationDirectory` that doesn\u0027t sound Windows-specific, but it in fact is Windows specific.",
                                           "updatedAt":  "2025-09-09T10:00:35Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Consider marking `DllImportSearchPath` values that don\u0027t make sense outside Windows as `[SupportedOSPlatform(\"windows\")]`",
        "labels":  [
                       "area-Interop-coreclr"
                   ]
    }
]
