[
    {
        "url":  "https://github.com/dotnet/runtime/issues/36543",
        "createdAt":  "2015-10-16T18:08:04Z",
        "number":  36543,
        "author":  "tillig",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBcGIA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "altso",
                                            "createdAt":  "2022-08-08T20:38:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "queil",
                                            "createdAt":  "2022-08-24T16:13:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "merlinschumacher",
                                            "createdAt":  "2023-04-28T13:01:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xced",
                                            "createdAt":  "2023-11-24T15:32:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "divega",
                                            "createdAt":  "2024-04-29T06:07:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "znakeeye",
                                            "createdAt":  "2024-08-30T13:01:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gimlichael",
                                            "createdAt":  "2024-09-17T11:46:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hey-red",
                                            "createdAt":  "2024-10-06T12:43:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sunghwan2789",
                                            "createdAt":  "2025-04-21T08:02:30Z"
                                        }
                                    ],
                          "totalCount":  9
                      },
        "updatedAt":  "2024-09-27T09:07:18Z",
        "body":  "While you can set a value for a key, if you want to remove an entire subtree of configuration settings the best you can do right now is to recursively iterate through all keys and subkeys and set every value found to null.\n\nIt would be nice to have a remove method to allow complete removal of keys.\n\nI imagine it would be on the `IConfiguration` interface:\n\n``` csharp\npublic interface IConfiguration\n{\n    string this[string key] { get; set; }\n    void Remove(string key);\n    IConfigurationSection GetSection(string key);\n    IEnumerable\u003cIConfigurationSection\u003e GetChildren();\n}\n```\n\nAs well as on the `IConfigurationSource` interface\n\n``` csharp\npublic interface IConfigurationProvider\n{\n    bool TryGet(string key, out string value);\n    void Set(string key, string value);\n    void Remove(string key);\n    void Load();\n    IEnumerable\u003cstring\u003e GetChildKeys(\n            IEnumerable\u003cstring\u003e earlierKeys,\n            string parentPath,\n            string delimiter);\n}\n```\n\nImplementation of the `Remove` method would be similar to the implementation of the `Set` method for `Microsoft.Extensions.Configuration.ConfigurationSection` where it would iterate through each provider and call `Remove`. Providers could each do the appropriate thing as needed to remove the specified key and all children from the source.\n\nA use case this addresses is for providing an administrative interface to modify configuration. Users in the interface may need to add new keys or rename existing ones - you can\u0027t rename keys right now because there\u0027s no way to delete the old keys; only set the values to null. For implementations of `IConfigurationProvider` with a persistent backing store, this makes for a very messy and unmaintainable solution long-term.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjcnIdA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyODkyMjM0Mg==",
                                           "createdAt":  "2016-06-28T01:16:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akatz0813",
                                           "body":  "+1  MSBuild Transforms have this\n",
                                           "updatedAt":  "2016-06-28T01:16:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyODkzOTI4OA==",
                                           "createdAt":  "2016-06-28T03:32:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Would be a breaking API change. \n",
                                           "updatedAt":  "2016-06-28T03:32:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyODkzOTkwNA==",
                                           "createdAt":  "2016-06-28T03:38:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tillig",
                                           "body":  "It would be _now_... But an additional interface could be added with that method and sources could optionally support it.\n",
                                           "updatedAt":  "2016-06-28T03:38:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyODk0MTI0OA==",
                                           "createdAt":  "2016-06-28T03:50:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Yep! We\u0027ll look at this in the future.\n",
                                           "updatedAt":  "2016-06-28T03:50:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MTY2NjEzNQ==",
                                           "createdAt":  "2016-11-18T23:10:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "We are not planning on changing the interface but feel free to submit a PR with this implemented as an extension method.\n",
                                           "updatedAt":  "2016-11-18T23:10:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MTczNzA2MA==",
                                           "createdAt":  "2016-11-19T20:21:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tillig",
                                           "body":  "I don\u0027t think you can do this with an extension method unless you allow the extension method to cast (internally) all of the abstractions down to the concrete implementations and start poking around, which doesn\u0027t seem like the greatest idea. That would be necessary because none of the abstractions like `IConfigurationRoot` have access to the aggregated set of configuration providers. There\u0027d be no way to iterate through the providers to call `Remove` or perform other necessary actions.\n\nAs it stands, the list of providers would have to be made public on `ConfigurationRoot` so you could cast down from `IConfigurationRoot` to `ConfigurationRoot` and act on that list without having to poke around with reflection to get the private field.\n\nWithout something to indicate whether the source supports key removal it may be hard to implement as an extension method. Some sort of `ISupportKeyRemoval` additional interface would work - something that an `IConfigurationProvider` could implement to indicate support.\n\n``` csharp\npublic interface ISupportKeyRemoval\n{\n  void Remove(string key);\n}\n```\n\n`ConfigurationRoot` could implement that interface, as could some of the configuration providers if they allow it. No interface change for the abstractions, just an additional optional implementation for providers that support the concept.\n\n_Then_ the extension method could totally work. It could cast the inbound object _as `ISupportKeyRemoval`_ and if it\u0027s not null, call the `Remove(string)` method.\n\nDoes that sound reasonable?\n",
                                           "updatedAt":  "2016-11-19T20:21:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MTczNzE1NQ==",
                                           "createdAt":  "2016-11-19T20:23:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tillig",
                                           "body":  "It\u0027d be _nice_ if `IConfigurationRoot` added an `IEnumerable\u003cIConfigurationProvider\u003e` property with the list of providers, though I see that\u0027s a breaking change, too. Otherwise I\u0027m not sure how to cleanly get that list of providers without assuming only `ConfigurationRoot`.\n",
                                           "updatedAt":  "2016-11-19T20:23:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjEwMjAyNQ==",
                                           "createdAt":  "2016-11-21T23:35:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "@tillig what I had in mind when @HaoK and I discussed this is that an extension method could recursively walk down the tree (probably using the existing `AsEnumerable()` extension) and set all the values to null. \r\n\r\nThis already sets the value for that key to null on all underlying providers, so you probably wouldn\u0027t need access to list of providers just for this. \r\n\r\nThat said, in the current implementation of our providers setting the value of a section to null just sets the value for that key in an internal dictionary to null. Subsequent calls to `GetChildren()` would still return the descendant sections that have been nulled out. Hence it is more of a way to \"zero out\" a key and its children than it is a removal. \r\n\r\nI think we can discuss/test changing the behavior of setting a null value to remove the entry from the dictionary instead of nulling the value. At least right now I cannot think of any reason that would be fundamentally bad and I cannot think of any way returning dangling null sections that contain null values is useful. My main concern with doing that is that the contract of the interface might be too loose and if third party providers don\u0027t comply with this behavior the `Remove()` method would not have the desired effect.",
                                           "updatedAt":  "2016-11-22T18:59:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjEwMjgwNA==",
                                           "createdAt":  "2016-11-21T23:39:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tillig",
                                           "body":  "The problem with just nulling things out is that if you want to back configuration with something like Redis or another persistence layer, storing \"null\" may actually be valid... as opposed to actually _removing_ the keys, which was the intent of the difference here. This is like the equivalent of a `Dictionary\u003cK,V\u003e` - the configuration interfaces have a set, they have a get, but there\u0027s no _remove_.",
                                           "updatedAt":  "2016-11-21T23:39:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjEwNjQyNw==",
                                           "createdAt":  "2016-11-21T23:59:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "@tillig however `IConfiguration` is not trying to be a dictionary. Yes, it has an accessor and most providers today use a dictionary as an implementation detail, but the metaphor falls short in other ways. ",
                                           "updatedAt":  "2016-11-21T23:59:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjEwNzI3OQ==",
                                           "createdAt":  "2016-11-22T00:03:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tillig",
                                           "body":  "It doesn\u0027t seem any analogy works. If you consider it an arbitrary data source, it has CRU - Create, Read, Update... but no Delete. It just seems incomplete. Hence the desire to make it complete. I found in my own dealings that managing configuration through this thing - not reading, but actually also writing (which is supported) - becomes problematic when you get outside the very simple use cases of the original out-of-the-box providers (XML / JSON / environment). It seems a shame to not add some sort of way to opt in to allow for a complete configuration manager story.",
                                           "updatedAt":  "2016-11-22T00:03:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjExODM4NA==",
                                           "createdAt":  "2016-11-22T01:12:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "@tillig FWIW, the Create operation doesn\u0027t exist in `IConfiguration` either. \r\n\r\nThe following test attempts to demonstrate why it is desirable that setting a key to null removes it from the tree reachable through `GetChildren()` and `AsEnumerable()`. \r\n\r\nFor brevity I used the `Exists()` extension method which was contribute by @andrewlock in https://github.com/aspnet/Configuration/pull/521 and got merged today. IMO the behavior of this method is completely consistent with the semantics of `IConfiguration`: a section exists only if it has a value or if it has children sections.\r\n\r\n``` C#\r\n[Fact]\r\npublic void ConfigurationRemoveTest()\r\n{\r\n    var config = new ConfigurationBuilder()\r\n        .AddInMemoryCollection()\r\n        .Build();\r\n\r\n    var section = config.GetSection(\"a:b:c\"); // represents an arbitrary child key in the key-space\r\n\r\n    Assert.Null(section.Value); // does not have a value\r\n\r\n    Assert.False(section.Exists()); // hence it doesn\u0027t exists yet\r\n\r\n    Assert.Equal(config.AsEnumerable().Count(), 0); // in fact the configuration is still empty\r\n\r\n    section.Value = \"x\"; // same as config[\"a:b:c\"] = \"x\";\r\n\r\n    Assert.True(config.GetSection(\"a\").Exists()); // the grand parent exists because it has a grand child\r\n    Assert.True(config.GetSection(\"a:b\").Exists()); // the parent exists because it has a child\r\n    Assert.True(config.GetSection(\"a:b:c\").Exists()); // and the child exists because it has a value\r\n\r\n    // Unfortunately things start getting inconsistent if you try to set the value to null\r\n\r\n    config[\"a:b:c\"] = null;\r\n\r\n    Assert.True(config.GetSection(\"a\").Exists()); // the grand parent exists because it has a grand child\r\n    Assert.True(config.GetSection(\"a:b\").Exists()); // the parent exists because it has a child\r\n    Assert.False(config.GetSection(\"a:b:c\").Exists()); // but the child doesn\u0027t actually exist!!!\r\n}\r\n```",
                                           "updatedAt":  "2016-11-22T01:14:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjEyMDg4NA==",
                                           "createdAt":  "2016-11-22T01:27:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tillig",
                                           "body":  "@divega The \"Create\" part is what you did in the test by setting a value for a section that didn\u0027t previously exist. That\u0027s sort of how it works in dictionary land, too - you don\u0027t have to call `Add(key, value)` to create a new dictionary entry.\r\n\r\nHowever, I think I\u0027m starting to understand what you\u0027re saying. The inconsistency you point out is part of what I want to avoid; but also that adds the natural implications that \"setting to null == removal\" as well as \"you can\u0027t store a null in configuration\"; which is to say, even if I have a JSON configuration file like this...\r\n\r\n```\r\n{\r\n  \"first\": 123,\r\n  \"second\": null\r\n}\r\n```\r\n\r\n...then changing the semantics to \"null == removed\" would imply that reading the null value (and any child null values) would just be skipped or ignored.\r\n\r\nIt would also mean this yields an empty configuration:\r\n\r\n```\r\n{\r\n  \"parent\": {\r\n    \"child\": null\r\n  }\r\n}\r\n```\r\n\r\n...which is fine, again, as long as the semantics change to be \"a tree of things in which all values are null is effectively removed from configuration.\" Providers could deal with that reasonably.\r\n\r\nIs that what you\u0027re getting at?\r\n\r\nIf so, it would mean the `Exists()` extension would need to be updated to correctly report all three of the final assertions in your test to be false.\r\n\r\n```csharp\r\n  // This should be false, but is currently inconsistently/incorrectly true.\r\n  Assert.True(config.GetSection(\"a\").Exists());\r\n\r\n  // Same here.\r\n  Assert.True(config.GetSection(\"a:b\").Exists());\r\n\r\n  // The leaf is the only one correctly reporting.\r\n  Assert.False(config.GetSection(\"a:b:c\").Exists());\r\n```\r\n\r\nHowever, if that\u0027s not what you\u0027re saying then maybe I\u0027m still misunderstanding. What I want is the ability to get the consistent results out of that unit test. Ideally, the actual call to `GetChildren()` wouldn\u0027t return any children if the entire child tree is null. Effectively removed, not just nulled out. If I need to add it back in, I can do that `GetSection(\"a:b:c\").Value = \"x\"` set operation.",
                                           "updatedAt":  "2016-11-22T01:27:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjEyMTY5OA==",
                                           "createdAt":  "2016-11-22T01:32:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "@tillig I agree the indexer in `Dictionary` has an implicit Create. It is just not reversed when you set the value to `null`, and it makes sense for it not to be reversed in dictionary because `null` is just like any other value for `Dictionary`. In `IConfiguration` we just happen to have stronger semantics for `null`...\r\n\r\nAnd yes, that is what I am getting at. I am still not sure it is feasible :smile:, but I think it would be more consistent.\r\n",
                                           "updatedAt":  "2016-11-22T01:32:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjEyMTk3Mw==",
                                           "createdAt":  "2016-11-22T01:34:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tillig",
                                           "body":  "Excellent. If the semantics can be updated such that tree-of-nulls == removed and is reported that way throughout (e.g., through `GetChildren()` and such), I\u0027d be cool with that over an explicit `Remove()` operation. In that case, you\u0027re right - `Remove()` could totally be an extension method of recursive null value setting operations.",
                                           "updatedAt":  "2016-11-22T01:34:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjEyMjE3Ng==",
                                           "createdAt":  "2016-11-22T01:35:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "\u003e If so, it would mean the Exists() extension would need to be updated to correctly report all three of the final assertions in your test to be false.\r\n\r\nPossibly. But I haven\u0027t tried just changing the implementation of `Set` to do `Data.Remove` when `value == null`. I would need to check what happens with your sample configuration files too.",
                                           "updatedAt":  "2016-11-22T01:35:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MjEyMjI4Nw==",
                                           "createdAt":  "2016-11-22T01:36:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAE5_ng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tillig",
                                                                               "createdAt":  "2016-11-22T01:37:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "divega",
                                           "body":  "@tillig oh and by all means, feel free to experiment with this yourself if you would like to spend a PR.",
                                           "updatedAt":  "2016-11-22T01:36:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNzgxMjk1MA==",
                                           "createdAt":  "2017-07-25T17:38:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODNizfQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "chadkuehn",
                                                                               "createdAt":  "2020-08-27T17:17:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "altso",
                                                                               "createdAt":  "2021-10-28T19:35:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hlovdal",
                                                                               "createdAt":  "2022-03-29T09:47:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xced",
                                                                               "createdAt":  "2023-11-24T15:33:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "lfoust",
                                           "body":  "I would like to +1 the request to support `Remove()`. Another scenario where this is useful is for arrays. If you have:\r\n\r\n```\r\n{\r\n   \"array\": [\r\n        \"item1\",\r\n        \"item2\"\r\n   ]\r\n}\r\n```\r\n\r\nAnd you want to remove an item with:\r\n\r\n`config[\"array:1\"] = null;`\r\n\r\nyou will end up with an array which has two items: \"item1\" and null\r\n\r\nBeing able to remove an entire subtree  or individual keys would be very helpful here. If you want more details on my scenario (why I want to remove items from IConfigurationRoot) feel free to let me know.\r\n",
                                           "updatedAt":  "2017-07-25T17:38:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48HRW1",
                                           "createdAt":  "2022-01-10T04:35:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwbGQg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jpdillingham",
                                                                               "createdAt":  "2022-01-10T04:42:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "altso",
                                                                               "createdAt":  "2022-01-19T01:00:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "romha-tr",
                                                                               "createdAt":  "2022-05-03T00:59:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "codeBestard",
                                                                               "createdAt":  "2022-06-18T23:52:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "merlinschumacher",
                                                                               "createdAt":  "2023-04-28T13:01:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "znakeeye",
                                                                               "createdAt":  "2024-08-30T13:07:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "znakeeye",
                                                                               "createdAt":  "2024-08-30T13:07:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "abspro",
                                           "body":  "How about we change this from `Future` to `.Net 7`.  What do ya say?",
                                           "updatedAt":  "2022-01-10T04:35:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5s1CAG",
                                           "createdAt":  "2023-11-24T15:45:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "0xced",
                                           "body":  "I just stumbled on this issue with a very real use case. In my `appsettings.json` file I have a configuration for the TLS certificate that will be used in production as described on [Kestrel documentation](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel/endpoints#configure-https-in-appsettingsjson):\r\n\r\n```json\r\n{\r\n  \"Kestrel\": {\r\n    \"Certificates\": {\r\n      \"Default\": {\r\n        \"Path\": \"\u003cpath to .pfx file\u003e\",\r\n        \"Password\": \"$CREDENTIAL_PLACEHOLDER$\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nDuring development, I\u0027d like to use the _ASP.NET Core HTTPS development certificate_ but I can\u0027t **remove** the `Certificates` section from the configuration. I can\u0027t craft an `appsettings.Development.json` file that removes it nor can I do it programmatically.\r\n\r\nUnfortunately I still haven\u0027t found a workaround to this issue.\r\n\r\n**Edit** I figured out how to use the ASP.NET Core HTTPS development certificate for development by overriding the `Path` and `Password` to empty strings in the `appsettings.Development.json` file.\r\n```json\r\n{\r\n  \"Kestrel\": {\r\n    \"Certificates\": {\r\n      \"Default\": {\r\n        \"Path\": \"\",\r\n        \"Password\": \"\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nBut that\u0027s just luck because of how the [certificate configuration loader works](https://github.com/dotnet/aspnetcore/blob/v8.0.0/src/Servers/Kestrel/Core/src/Internal/Certificates/CertificateConfigLoader.cs#L26-L82).",
                                           "updatedAt":  "2023-11-24T16:39:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57FIKb",
                                           "createdAt":  "2024-04-18T18:53:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Bertie2011",
                                           "body":  "+1 on a very similar use case.\r\n\r\nI had to recreate HTTPS certificates and found the best way of doing that would be to temporarily allow the website to run in HTTP mode. Preferably I would have liked to accomplish this with a single flag to adjust various settings and middlewares throughout, but I couldn\u0027t find a way to just wipe out the https endpoint without going to my pipeline files to clear the env variables.",
                                           "updatedAt":  "2024-04-18T18:54:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Nych0",
                                           "createdAt":  "2024-09-27T09:07:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEJjFAQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "obones",
                                                                               "createdAt":  "2025-03-12T10:21:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dkjolith",
                                           "body":  "This \"cheat\" works:\r\n\r\n```\r\n    private void RemoveSection(IConfigurationRoot root, IConfigurationSection section)\r\n    {\r\n        var providers = root.Providers.ToList();\r\n\r\n        foreach (var provider in providers)\r\n        {\r\n            var dataProperty = (provider as ConfigurationProvider)?.GetType().GetProperty(\"Data\", BindingFlags.Instance | BindingFlags.NonPublic);\r\n\r\n            if (dataProperty?.GetValue(provider) is Dictionary\u003cstring, string\u003e data)\r\n            {\r\n                data.Remove(section.Path);\r\n            }\r\n        }\r\n    }\r\n```",
                                           "updatedAt":  "2024-09-27T09:07:17Z"
                                       }
                                   ],
                         "totalCount":  22
                     },
        "title":  "Enable removal of a key or subtree",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36544",
        "createdAt":  "2017-01-19T00:27:51Z",
        "number":  36544,
        "author":  "divega",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-06-30T13:36:17Z",
        "body":  "Currently in our configuration provider implementation if the value of a configuration key is set to null, the value of the dictionary entry is set to null, but the key still remains in the dictionary, so checking for existence on the parent keys will return wrong (positive) results.\r\n\r\nI think we can fix this by simply changing the behavior of the setter to remove the key from the dictionary. \r\n\r\nThis should unblock dotnet/extensions#314. From [one of my comments](https://github.com/aspnet/Configuration/issues/314#issuecomment-262118384) there:\r\n\r\nThe following test attempts to demonstrate why it is desirable that setting a key to null removes it from the tree reachable through `GetChildren()` and `AsEnumerable()`. \r\n\r\nFor brevity I used the `Exists()` extension method which was contribute by @andrewlock in https://github.com/aspnet/Configuration/pull/521 and got merged today. IMO the behavior of this method is completely consistent with the semantics of `IConfiguration`: a section exists only if it has a value or if it has children sections.\r\n\r\n``` C#\r\n[Fact]\r\npublic void ConfigurationRemoveTest()\r\n{\r\n    var config = new ConfigurationBuilder()\r\n        .AddInMemoryCollection()\r\n        .Build();\r\n\r\n    var section = config.GetSection(\"a:b:c\"); // represents an arbitrary child key in the key-space\r\n\r\n    Assert.Null(section.Value); // does not have a value\r\n\r\n    Assert.False(section.Exists()); // hence it doesn\u0027t exists yet\r\n\r\n    Assert.Equal(config.AsEnumerable().Count(), 0); // in fact the configuration is still empty\r\n\r\n    section.Value = \"x\"; // same as config[\"a:b:c\"] = \"x\";\r\n\r\n    Assert.True(config.GetSection(\"a\").Exists()); // the grand parent exists because it has a grand child\r\n    Assert.True(config.GetSection(\"a:b\").Exists()); // the parent exists because it has a child\r\n    Assert.True(config.GetSection(\"a:b:c\").Exists()); // and the child exists because it has a value\r\n\r\n    // Unfortunately things start getting inconsistent if you try to set the value to null\r\n\r\n    config[\"a:b:c\"] = null;\r\n\r\n    Assert.True(config.GetSection(\"a\").Exists()); // the grand parent exists because it has a grand child\r\n    Assert.True(config.GetSection(\"a:b\").Exists()); // the parent exists because it has a child\r\n    Assert.False(config.GetSection(\"a:b:c\").Exists()); // but the child doesn\u0027t actually exist!!!\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM_Cswg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxNzIxMzk2Mw==",
                                           "createdAt":  "2018-08-30T07:12:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Moving out to backlog and unassigned since this wasn\u0027t something we were planning on doing in 2.2",
                                           "updatedAt":  "2018-08-30T07:12:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MTQxMDg4Mg==",
                                           "createdAt":  "2021-06-30T13:36:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "Are there any plans to do something here? It\u0027s frustrating to use Configuration to write configs back out with minimal diffs (so no extra keys if they were effectively not set before)",
                                           "updatedAt":  "2021-06-30T13:36:17Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Make Exists() behavior consistent for nulled values",
        "labels":  [
                       "enhancement",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36555",
        "createdAt":  "2017-03-04T16:38:33Z",
        "number":  36555,
        "author":  "brockallen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAywu2g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TylerBrinkley",
                                            "createdAt":  "2019-10-15T17:17:11Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-04-21T13:12:48Z",
        "body":  "It\u0027d be nice to have a `Get\u003cT\u003e(string section)` that looks like this:\r\n\r\n```\r\nnamespace Microsoft.Extensions.Configuration\r\n{\r\n    public static class ConfigurationExtensions\r\n    {\r\n        public static T Get\u003cT\u003e(this IConfiguration section, string key)\r\n        {\r\n            return section.GetSection(key).Get\u003cT\u003e();\r\n        }\r\n    }\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp_0how==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMTY4MDU4OQ==",
                                           "createdAt":  "2017-05-16T05:38:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AmadeusW",
                                           "body":  "This would be very useful. Alternatively, it would be good to have support for arbitrary nesting like so:\r\n`Configuration[\"level1\"][\"level2\"]` or \r\n`Configuration[\"level1.level2\"]` or \r\n`Configuration[\"level1//level2\"]` ",
                                           "updatedAt":  "2017-05-16T05:38:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjI4NDkyOA==",
                                           "createdAt":  "2017-06-30T14:39:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "user1336",
                                           "body":  "@brockallen I believe this method is now available thanks to @HaoK.\r\n```\r\npublic static T GetValue\u003cT\u003e(this IConfiguration configuration, string key)\r\n{\r\n    return GetValue(configuration, key, default(T));\r\n}\r\n```",
                                           "updatedAt":  "2017-06-30T14:39:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxODE0NzMxMg==",
                                           "createdAt":  "2018-09-03T15:36:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smariussorin",
                                           "body":  "Does not work, the GetValue is just for string and primites, use following \u0027hack\u0027\r\n\r\n```\r\n var settings = new MySectionConf();\r\n Config.GetSection(nameof(MySectionConf)).Bind(settings); or Config.GetSection(\"customKey\").Bind(settings);\r\n return settings;\r\n```",
                                           "updatedAt":  "2018-09-03T15:36:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyOTQzMDc4MQ==",
                                           "createdAt":  "2020-05-15T19:10:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-05-15T19:10:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6n_SGj",
                                           "createdAt":  "2025-04-21T13:12:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brockallen",
                                           "body":  "\u003e Due to lack of recent activity\n\nI think there\u0027s no activity since this was opened... ~8 years ago. In any event, this still feels like it would be useful, and I\u0027ve not seen a reason why it\u0027s not feasible or a good idea. ",
                                           "updatedAt":  "2025-04-21T13:12:33Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Consider overload of Get\u003cT\u003e that accepts child section name",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36545",
        "createdAt":  "2017-03-18T01:21:36Z",
        "number":  36545,
        "author":  "kyschouv",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_ZDIg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rcollina",
                                            "createdAt":  "2019-02-24T09:46:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mcm-ham",
                                            "createdAt":  "2019-11-12T08:23:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pdegenhardt",
                                            "createdAt":  "2020-07-15T22:36:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jchannon",
                                            "createdAt":  "2020-10-06T09:29:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SebastianAchatz",
                                            "createdAt":  "2020-12-09T16:46:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "monodop",
                                            "createdAt":  "2021-10-27T00:02:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KalleOlaviNiemitalo",
                                            "createdAt":  "2022-06-11T14:22:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fg-y",
                                            "createdAt":  "2023-11-06T17:38:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2023-11-15T03:50:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lilstar132",
                                            "createdAt":  "2023-11-23T13:41:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hacst",
                                            "createdAt":  "2023-12-06T17:47:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DefinitelyADev",
                                            "createdAt":  "2024-03-14T14:09:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "quinterojose",
                                            "createdAt":  "2024-07-31T20:10:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BladeWise",
                                            "createdAt":  "2024-10-14T23:26:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NightlyRevenger",
                                            "createdAt":  "2025-02-24T08:01:43Z"
                                        }
                                    ],
                          "totalCount":  15
                      },
        "updatedAt":  "2025-05-11T14:17:26Z",
        "body":  "It\u0027s very difficult to add a custom `TypeConverter` for framework types to have them bind correctly within `ConfigurationBinder`. The documentation for `TypeConverterAttribute` specifies that the attribute can be attached to a property, and that property will then use the specified `TypeConverter` during serialization/deserialization. Unfortunately, `ConfigurationBinder` doesn\u0027t take the property\u0027s attributes into consideration during `BindProperty`, instead passing the binding off to `BindInstance` with just the type of the property.\r\n\r\nPresently, the only way to use custom TypeConverters is to register them using `TypeDescriptor.AddAttributes` before any configuration binding occurs, which is inconvenient if your library requires custom TypeConverters for standard types.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqw8d6Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNjU5MDQ1OA==",
                                           "createdAt":  "2017-06-06T19:22:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "@ajcvickers We should retriage this, as I think TypeConverters might be a good option for how we deal with custom config binding of optoins in general.",
                                           "updatedAt":  "2017-06-06T19:22:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwNjYwMjkyMw==",
                                           "createdAt":  "2017-06-06T20:12:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaoK",
                                           "body":  "Also look into general binding for options + config",
                                           "updatedAt":  "2017-06-06T20:12:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzODc2OTAyOQ==",
                                           "createdAt":  "2018-11-14T18:32:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "For anyone interested in contributing this, there is a good start in the PR here: https://github.com/aspnet/Configuration/pull/787",
                                           "updatedAt":  "2018-11-14T18:32:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NjYwODQ5OA==",
                                           "createdAt":  "2019-02-23T02:37:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dgioulakis",
                                           "body":  "I would personally rather see support for Json.net JsonConverter. I prototyped a sample here: https://github.com/Cephei/JsonNetConfigurationBinder\r\n\r\nTypeConverter is a nice to have, however, not very powerful in this context considering it requires the Value of the IConfigurationSection to be present. You can\u0027t use it to parse ConfigurationSection\u0027s with children like in the link above.",
                                           "updatedAt":  "2019-02-23T03:08:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDE0ODk0Mg==",
                                           "createdAt":  "2020-10-06T09:30:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jchannon",
                                           "body":  "Are there any plans to control the deserilaization of IConfiguration, little seems to have been discussed for a while now",
                                           "updatedAt":  "2020-10-06T09:30:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMjQ5NjgwMQ==",
                                           "createdAt":  "2020-10-19T23:29:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "We looked at the PR in https://github.com/aspnet/Configuration/pull/787 again and seems like when this gets addressed again we make the fix works well with all configuration providers",
                                           "updatedAt":  "2020-10-19T23:29:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczODE4OTEzNg==",
                                           "createdAt":  "2020-12-03T18:14:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I can see the value in this change as it allows folks to define custom handling of types at the member level without globally registering the converter.  It also allows the model to specify the converter, rather than the caller to Bind.\r\n\r\nIt looks to me like the PR added this functionality exclusively in the Configuration.Binder.  Would this be used by all Configuration providers? (honest question, I don\u0027t know, but I think it would)\r\n\r\nI do think the support for TypeConverter in Confiugration today and the PR is incomplete.  I think the right way to handle would be to go wholesale through the TypeDescriptor system as a fallback.  Where you get the PropertyDescriptors for the type and use those to  get the converter.  In this way, Configuration never ends up doing the work to find those attributes and the TypeDescriptor infra would do that (along with all of its functionality for overrides).\r\n\r\nI can imagine that a larger dependency on metadata here can be challenging for source-generators for Configuration, so that might be something to consider.  I believe for WPF they determine at design time what converter is used and bake that into generated source  / baml.\r\n\r\nAll this said, I\u0027m not sure if we want to go down a path of tighter coupling of Configuration with some other serialization tech (TypeDescriptor, JSON, or otherwise).  I\u0027d be interested to hear @davidfowl\u0027s opinion.\r\n",
                                           "updatedAt":  "2020-12-03T20:25:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oapOO",
                                           "createdAt":  "2023-10-07T20:49:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I wanted to bind an options class that has a `TimeSpan Timeout` property in which [Timeout.InfiniteTimeSpan](https://learn.microsoft.com//dotnet/api/system.threading.timeout.infinitetimespan?view=netstandard-2.0) makes sense.  This special value could perhaps be configured as \"-00:00:00.001\" but that\u0027s just too ugly.  I\u0027d much prefer being able to set a per-property TypeConverter that recognizes \"Infinite\" or the empty string.\r\n\r\nA nullable property `TimeSpan? Timeout` doesn\u0027t work either, as the constructor of the options class stores a nonzero default value there and ConfigurationBinder does not overwrite this default value if it gets null as `out object result` from TryConvertValue.  \u003chttps://github.com/dotnet/runtime/blob/4822e3c3aa77eb82b2fb33c9321f923cf11ddde6/src/libraries/Microsoft.Extensions.Configuration.Binder/src/ConfigurationBinder.cs#L263-L266\u003e\r\n\r\nI suppose the workaround is to add a sibling `bool UseTimeout` property.",
                                           "updatedAt":  "2023-10-07T20:49:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rDx3p",
                                           "createdAt":  "2025-05-11T14:17:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jvmlet",
                                           "body":  "This seems like very straightforward functionality,  which is missing/not implemented/overlooked. \nAre the teams from  `System.ComponentModel` and `Extensions.Configuration` in  sync at all ?",
                                           "updatedAt":  "2025-05-11T14:17:25Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Support TypeConverterAttribute on bound properties",
        "labels":  [
                       "help wanted",
                       "feature-request",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36540",
        "createdAt":  "2018-03-18T16:42:27Z",
        "number":  36540,
        "author":  "aejay",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAbaLA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "erichiller",
                                            "createdAt":  "2020-09-10T15:35:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andradf",
                                            "createdAt":  "2021-08-18T16:16:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FrankSzendzielarz",
                                            "createdAt":  "2021-08-27T08:09:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AdrianoAE",
                                            "createdAt":  "2021-10-21T15:38:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "monodop",
                                            "createdAt":  "2021-10-26T23:58:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "M-Zuber",
                                            "createdAt":  "2021-10-27T17:04:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xing-zheng",
                                            "createdAt":  "2021-12-15T03:02:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "helto4real",
                                            "createdAt":  "2021-12-20T19:54:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Illivion",
                                            "createdAt":  "2022-04-17T23:09:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "chenxinyanc",
                                            "createdAt":  "2022-04-19T08:48:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dgioulakis",
                                            "createdAt":  "2022-05-19T01:34:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "drauch",
                                            "createdAt":  "2022-07-01T09:33:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mcm-ham",
                                            "createdAt":  "2022-09-20T23:01:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "asylkhan-azat",
                                            "createdAt":  "2023-03-09T11:53:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bart-vmware",
                                            "createdAt":  "2023-03-31T10:41:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rfvgyhn",
                                            "createdAt":  "2023-10-31T19:48:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mneundorfer",
                                            "createdAt":  "2023-11-27T11:02:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "josh-degraw",
                                            "createdAt":  "2023-12-01T06:18:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CSymes",
                                            "createdAt":  "2024-03-04T02:37:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tarmil",
                                            "createdAt":  "2024-06-27T06:39:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andriysavin",
                                            "createdAt":  "2024-06-30T15:35:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexeimatrosov",
                                            "createdAt":  "2025-03-11T07:03:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mdik-sc",
                                            "createdAt":  "2025-03-24T13:04:42Z"
                                        }
                                    ],
                          "totalCount":  23
                      },
        "updatedAt":  "2024-06-30T16:06:19Z",
        "body":  "The ease the Binding portion of this library adds to configuration is very valuable for the projects I\u0027m involved in, but I find a lot of cases where the flexibility of binding seems to be lacking. I might just be approaching problems incorrectly (if so, any help pointing me in the right direction would be nice).\r\n\r\nIt seems like either the binder will work great because you are working with basic types that are easily bound, or the binder is useless because you need some custom logic, so you are left writing a bunch of manual steps to read out of Configuration (especially around Options).\r\n\r\nI know the current Binder code uses the `TypeDescriptor.GetConverter(Type type)` method to attempt to do type conversion, but setting converters for types is a pain and doesn\u0027t cover all scenarios (e.g. there might be other information we need to get, such as from an IConfiguration, that is not available to us from the TypeConverter implementation). Relying on the TypeDescriptor method also relies heavily on ambient details that aren\u0027t always obvious at composition, and are not specific to a particular compositor. Those converters are part of the description of a type, not part of the composition of an application and its configuration/dependencies.\r\n\r\nIt would be nice if there were methods like this available:\r\n\r\n```csharp\r\npublic static IServiceCollection AddConfigurationBinder\u003cT\u003e(\r\n    this IServiceCollection services, \r\n    Func\u003cstring, T\u003e binderFunction)\r\n{\r\n    // Later when Bind() is called, ideally it would check for configured binders\r\n    // before falling back to a default TypeConverter\r\n}\r\n```\r\n\r\nThis would allow us to do things like this:\r\n\r\nappsettings.json\r\n```json\r\n{\r\n    \"ConnectionStrings\": {\r\n        \"SampleConnection\": \"[connection string goes here]\"\r\n    },\r\n    \"SomeLibrarySettings\": {\r\n        \"ShouldDoAThing\": true,\r\n        \"Connection\": \"SampleConnection\"\r\n    }\r\n}\r\n```\r\n\r\nSomeLibraryOptions.cs\r\n```csharp\r\npublic class SomeLibraryOptions\r\n{\r\n    public bool ShouldDoAThing { get; set; }\r\n\t// As an example... directions for how reliant code should build out new connections\r\n\tpublic Func\u003cIDbConnection\u003e Connection { get; set; }\r\n}\r\n```\r\n\r\nStartup.cs\r\n```csharp\r\npublic IConfiguration Configuration { get; }\r\n\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    services.AddOptions();\r\n    services.AddConfigurationBinder\u003cFunc\u003cIDbConnection\u003e\u003e(configValue =\u003e {\r\n        // When my options expects to bind a Func\u003cIDbConnection\u003e, use the string in the settings\r\n        // to find the matching connection string and make a Func that builds a SqlConnection for it.\r\n        var connectionString = Configuration.GetConnectionString(configValue);\r\n        return () =\u003e new SqlConnection(connectionString);\r\n    });\r\n\r\n    services.Configure\u003cSomeLibraryOptions\u003e(Configuration.GetSection(\"SomeLibrarySettings\"));\r\n}\r\n```\r\n\r\nDoes this make sense to do or are there other approaches that exist already (or are being worked on) that are better suited? I know this is a contrived example that would be solved by using the Action\u003cTOptions\u003e version of configure, but when we have common steps to perform on options again and again, I think it might be better to tell the ConfigurationBinder how to handle those type bindings generally vs individually.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgwwZaw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NDAxOTc2Mw==",
                                           "createdAt":  "2018-03-18T17:28:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnfOVQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmaillet",
                                                                               "createdAt":  "2020-10-07T15:36:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JoasE",
                                                                               "createdAt":  "2023-10-18T09:00:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CZEMacLeod",
                                                                               "createdAt":  "2024-06-27T09:50:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "HaoK",
                                           "body":  "This is something we could consider adding to the new BinderOptions introduced with https://github.com/aspnet/Configuration/pull/796\r\n\r\nWe could easily add a `CustomBind\u003cT\u003e(Func\u003cT\u003e func)` to the options, is that basically what you want for more control over a specific type?\r\n```C#\r\n   services.Configure\u003cSomeLibraryOptions\u003e(Configuration.GetSection(\"Settings\", \r\n         o =\u003e o.CustomBind\u003cIDbConnection\u003e(() =\u003e new SqlConnection(Configuration.GetConnectionString(configValue));\r\n```\r\n\r\nThoughts @ajcvickers @davidfowl \r\n",
                                           "updatedAt":  "2018-03-18T17:28:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4NDY5MTM1NQ==",
                                           "createdAt":  "2018-04-26T15:48:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andriysavin",
                                           "body":  "Here are more thoughts on the idea. I have almost the same scenario as @aejay decribes: I want to reference one section from another using section path, e.g.\r\n```\r\n{\r\n\"EmailSender\" : {\r\n   \"FromEmail\": \"...\",\r\n   \"ToEmails\": \"...\",\r\n   \"SmtpServerSettingsReference\" : \"Accounts:Smtp\"\r\n},\r\n\"Accounts\": {\r\n \"Smtp\" : {\r\n      \"ServerName\": \"...\",\r\n      \"ServerPort\": 587\r\n}\r\n}\r\n\r\n}\r\n```\r\nFurther, when I map \"EmailSender\" to a POCO object, I want the \"SmtpServerSettingsReference\" property in POCO to contain a POCO type, which will automatically be mapped from a referenced section. \r\nHowever, for this particular scenario I would use other approach - a `TypeConvertor`, which would check the string in \"SmtpServerSettingsReference\" property if its a config path and would map the section at that path to the target type. But for this to be possible, the converter needs a reference to the whole `IConfiguration`. `TypeConverter` supports passing it some context via `ITypeDescriptorContext `, but its not used in the binder: [(https://github.com/aspnet/Configuration/blob/release/2.0/src/Microsoft.Extensions.Configuration.Binder/ConfigurationBinder.cs#L471](https://github.com/aspnet/Configuration/blob/release/2.0/src/Microsoft.Extensions.Configuration.Binder/ConfigurationBinder.cs#L471)\r\nSo what I suggest is to provide `TypeConverter` with some configuration context to extend its abilities.\r\n",
                                           "updatedAt":  "2018-04-26T15:48:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4NDY5NjA3NQ==",
                                           "createdAt":  "2018-04-26T16:01:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "andriysavin",
                                           "body":  "@HaoK What you suggest is a great idea and I think it should be implemented. However, sometimes (like in the case I described) you will want to configure such behaviour closer to configuration POCOs rather than to top level configuration code. For example, you may want to define a POCO or/and related POCOs with a type converter in a separate library, and have the library consumer to just use it. With your approach every application will require configuration code. Even if you put it into an extension method in the library, you will have to not forget to call it.",
                                           "updatedAt":  "2018-04-26T16:01:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0NDY0ODAxNQ==",
                                           "createdAt":  "2018-12-05T21:06:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODOJJ8A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rfvgyhn",
                                                                               "createdAt":  "2023-10-31T19:48:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "josh-degraw",
                                                                               "createdAt":  "2023-12-01T06:18:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "@HaoK also important for F# users... \r\n\r\nMost F# users usually use F# lists which are seen as non scalar by the binder. The binder then tries to access all properties of list, like Head which will result in an exception if you have a very normal default value, an empty list.",
                                           "updatedAt":  "2018-12-05T21:06:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMTQ2NzczNg==",
                                           "createdAt":  "2020-09-30T15:32:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-30T15:32:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwODA1NDk3OQ==",
                                           "createdAt":  "2020-10-13T23:01:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "\u003e We could easily add a CustomBind\u003cT\u003e(Func\u003cT\u003e func) to the options, is that basically what you want for more control over a specific type?\r\n\r\n`CustomBind` seems like a good API addition for this. The next step for this would be to prepare an API proposal with sample usage on CustomBind. (Guide: https://github.com/dotnet/runtime/blob/master/docs/project/api-review-process.md). Setting as up-for-grabs.\r\n\r\ncc: @davidfowl @safern \r\n\r\n",
                                           "updatedAt":  "2020-10-13T23:01:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42D_Lw",
                                           "createdAt":  "2021-08-27T08:11:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FrankSzendzielarz",
                                           "body":  "Big massive upvote from me. I just looked into how in .NET Core I can use strong typed config but with a legacy config file I am being forced to use. Things like periods and underscores in the config property names, that kind of thing. Seems .NET Core is a \u0027no can do\u0027 when approaching anything other than its opinionated approach",
                                           "updatedAt":  "2021-08-27T08:11:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42EFjH",
                                           "createdAt":  "2021-08-27T08:53:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODOJNXQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "josh-degraw",
                                                                               "createdAt":  "2023-12-01T06:31:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Choc13",
                                           "body":  "@NinoFloris on the F# point I found the lack of support for `Option` (the F# type) also frustrating and so I recently wrote [Symbolica.Extensions.Configuration.FSharp](https://github.com/SymbolicaDev/Symbolica.Extensions.Configuration.FSharp) in which I\u0027ve tried to take a more F# friendly approach to binding config to types.\r\n\r\nMy goals were to make binding config\r\n* \"safer\"\r\n* composable\r\n* explicit\r\n\r\nOn the safety point I\u0027m basically referring to `NullReferenceExceptions`. When config fails to bind and is accessed at runtime it returns `null`. This was particularly frustrating in F# where `NullReferenceException`s are otherwise very rare. \r\n\r\nI suspect some might not like the explicit nature of it at first glance, but my rationale here is that I\u0027d rather know exactly how certain fields were being parsed rather than rely on \"magic\". Removing the \"magic\" also means it\u0027s very easy to extend the library with binders for new fields and plug them into the binder. The library already includes binders for primitive types and other common BCL types and has support for `Option` (the F# type). The composable nature of the library also means that explicitness doesn\u0027t end up being tedious.\r\n\r\nWhilst this code isn\u0027t directly portable to C#, as it makes use of computation expressions to provide a composable DSL (although there\u0027s nothing stopping you from the functions underlying the CE), I\u0027ve mentioned it here, because it might be useful as an alternative design to consider in the future, when redesigning the native .NET config binding API.",
                                           "updatedAt":  "2021-08-27T08:53:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5taEVA",
                                           "createdAt":  "2023-12-01T06:38:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODnUtKA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "m3nax",
                                                                               "createdAt":  "2023-12-06T13:21:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "deadwards90",
                                                                               "createdAt":  "2024-01-16T15:56:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "abogdanov37",
                                                                               "createdAt":  "2024-06-04T10:09:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Ludwintor",
                                                                               "createdAt":  "2024-06-26T23:38:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "josh-degraw",
                                           "body":  "Has there been any traction on this proposal since the last comment? I\u0027m currently running up against this from F# as well.\n\nThe fact that there is no simple way to customize this binding point has been a big frustration point in my current process of modernizing my team\u0027s tech stack (off of app.config and NET Framework), where we have several configuration values expecting `Map\u003c\u0027K, \u0027V\u003e` or `\u0027T list`, and in each case I have to refactor these to at very least read these in as `IDictionary\u003cK, V\u003e` or arrays, before converting them to their F# type. \n\nSure, I have found a workaround, but it took a while to figure out because it\u0027s not very well documented that certain types aren\u0027t fully supported; even non-F#, core types like using a dictionary with `Guid` keys fails because the dictionary binder surprisingly only allows a few key types, and it took me frustratingly long to figure out why my Dictionary config value wasn\u0027t loading even though I could load values as guids elsewhere, because it was just falling back to a null value when the binder wouldn\u0027t work.\n\nIt would be a much nicer experience in situations like mine if this custom configuration option were available. I\u0027d be willing to try and help contribute this feature if it\u0027s not a high priority for the core team, which I would certainly understand.",
                                           "updatedAt":  "2023-12-01T06:38:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CxVMX",
                                           "createdAt":  "2024-06-27T07:17:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tarmil",
                                           "body":  "I would like to see this. Or at least support for TypeConverter from IConfigurationSection.",
                                           "updatedAt":  "2024-06-27T07:17:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C0W31",
                                           "createdAt":  "2024-06-27T13:59:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e I want to reference one section from another using section path, e.g.\r\n\u003e \r\n\u003e ```\r\n\u003e {\r\n\u003e \"EmailSender\" : {\r\n\u003e    \"FromEmail\": \"...\",\r\n\u003e    \"ToEmails\": \"...\",\r\n\u003e    \"SmtpServerSettingsReference\" : \"Accounts:Smtp\"\r\n\u003e },\r\n\u003e \"Accounts\": {\r\n\u003e  \"Smtp\" : {\r\n\u003e       \"ServerName\": \"...\",\r\n\u003e       \"ServerPort\": 587\r\n\u003e }\r\n\u003e }\r\n\u003e \r\n\u003e }\r\n\u003e ```\r\n\r\n@andriysavin have you considered proposing this as a separate issue? It looks to me like it would be a completely independent feature from the custom binding proposed here (or at least, it could be created using the custom binders, but still not be implemented together).\r\n\r\nAlso, something _similar_ but not quite as powerful is possible with this library here, which allows for property \"aliases\" in the config:\r\n- https://www.nuget.org/packages/Workleap.Extensions.Configuration.Substitution\r\n\r\n```json\r\n{\r\n  \"Credentials\": {\r\n    \"Username\": \"alice1\",\r\n    \"Password\": \"P@ssw0rd\"\r\n  },\r\n  \"ConnectionString\": \"usr=${Credentials:Username};pwd=${Credentials:Password}\"\r\n}\r\n```",
                                           "updatedAt":  "2024-06-27T13:59:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DDBlr",
                                           "createdAt":  "2024-06-30T16:06:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODn5gaw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-01T13:36:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "andriysavin",
                                           "body":  "@julealgon It looks like custom binders is more universal and fundamental functionality, which already has gotten lots of votes. So I\u0027m not sure if it makes any sense to have another issue, at least until this one is really implemented, because, as you pointed out, section references can be implemented on top of custom binders. I doubt that the dev team would allocate resources to implement somewhat niche feature I\u0027m interested in (to be precise, my request was just about providing more context information). Usually, dotnet team focuses on providing the bare minimum functionality to cover most developers\u0027 needs with best possible simplicity, quality and performance, leaving more advanced and less requested scenarios  to third-party developers. Bright example of that is dependency injection library.\r\n\r\n\u003e Also, something similar but not quite as powerful is possible with this library here, which allows for property \"aliases\" in the config\r\n\r\nIt\u0027s been 6 years since then, so I had some time to implement something similar in my customer\u0027s codebase :) But thanks anyway, this package looks to provide more rich functionality, will definitely take a look! ",
                                           "updatedAt":  "2024-06-30T16:06:19Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Custom binders for mapping config string values to types known to the composition root",
        "labels":  [
                       "api-suggestion",
                       "help wanted",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36086",
        "createdAt":  "2019-04-30T14:11:27Z",
        "number":  36086,
        "author":  "larslarsson",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqbB_Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "madelson",
                                            "createdAt":  "2022-09-04T20:28:16Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-06-12T03:18:55Z",
        "body":  "ConfigurationBinder .Get\u003cGeneralSettings\u003e() in a lazy/default settings class throws \r\n\"System.InvalidOperationException: \u0027ValueFactory attempted to access the Value property of this instance.\u0027\"\r\n\r\nSuggestion:\r\nDefault ignore static properties or what reason would these be set from configuration?\r\nOr extend option to ignore them (BinderOptions I guess)\r\n\r\n    public class GeneralSettings\r\n    {\r\n        private static readonly Lazy\u003cGeneralSettings\u003e defaultInstance = new Lazy\u003cGeneralSettings\u003e(GeneralSettings.CreateInstance);\r\n\r\n        public string HelloWorld { get; set; }\r\n\r\n        public static GeneralSettings Default { get { return GeneralSettings.defaultInstance.Value; } }\r\n\r\n        private static GeneralSettings CreateInstance()\r\n        {\r\n            var settings = Program.Configuration.GetSection(nameof(GeneralSettings)).Get\u003cGeneralSettings\u003e();\r\n            return settings;\r\n        }\r\n    }",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM0JmdA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNDQ2MTIxMA==",
                                           "createdAt":  "2019-08-23T21:02:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "genriquez",
                                           "body":  "+1. Encountered this issue couple of days ago and was baffled of what was happening. I can\u0027t really see a reason to map to static properties, being that you get an _instance_ of that type. I am curious if such usage exists, and what would it be used for.\r\n\r\n**Edit:**\r\nIt seems it is an intentional behavior, as per test `Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BindCanReadStaticProperty`.",
                                           "updatedAt":  "2019-08-23T21:36:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3Nzg4MTUzOQ==",
                                           "createdAt":  "2020-01-23T21:18:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "It doesn\u0027t appear to have been intention. The test was added in https://github.com/aspnet/Configuration/pull/282 and seems to be unrelated to the original PR content and it got by our reviews. It\u0027s unfortunate but it would breaking to change it now.\r\n\r\n@genriquez \u0027s change to have an opt-out property seems reasonable here.",
                                           "updatedAt":  "2020-01-23T21:18:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU1NzU2OA==",
                                           "createdAt":  "2020-05-08T00:05:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "As part of the migration of components from dotnet/extensions to dotnet/runtime (https://github.com/aspnet/Announcements/issues/411) we will be bulk closing some of the older issues. If you are still interested in having this issue addressed, just comment and the issue will be automatically reactivated (even if you aren\u0027t the author). When you do that, I\u0027ll page the team to come take a look. If you\u0027ve moved on or workaround the issue and no longer need this change, just ignore this and the issue will be closed in **7 days**.\n\nIf you know that the issue affects a package that has moved to a different repo, please consider re-opening the issue in that repo. If you\u0027re unsure, that\u0027s OK, someone from the team can help!",
                                           "updatedAt":  "2020-05-08T02:47:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU5OTY2MQ==",
                                           "createdAt":  "2020-05-08T02:48:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-05-08T02:48:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1OTk0NDY1NA==",
                                           "createdAt":  "2021-06-11T22:46:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SteveDunn",
                                           "body":  "Hi - I\u0027m happy to look at this one.  What is needed?  Another entry in `BinderOptions`, something like `IgnoreStaticProperties`?",
                                           "updatedAt":  "2021-06-11T22:46:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1OTk4OTYyMA==",
                                           "createdAt":  "2021-06-12T03:18:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "@SteveDunn thanks for your interest. Similar to https://github.com/dotnet/runtime/issues/36015 which you are currently involved with, the next step for this issue is to prepare it for API review: The issue description here needs an API proposal, usage example, etc. \r\n\r\nMore info here: https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md",
                                           "updatedAt":  "2021-06-12T03:18:10Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "ConfigurationBinder.Get - ignore static",
        "labels":  [
                       "bug",
                       "api-suggestion",
                       "help wanted",
                       "feature-request",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63312",
        "createdAt":  "2019-05-03T13:25:42Z",
        "number":  63312,
        "author":  "kevbite",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCvaMrA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "harre096",
                                            "createdAt":  "2020-01-10T16:58:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "abilous-ti",
                                            "createdAt":  "2022-03-11T20:50:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "davidhcar",
                                            "createdAt":  "2023-04-11T16:44:16Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2022-01-11T22:51:50Z",
        "body":  "### Describe the bug\r\nWhen a configuration value is set within Azure App Service with a key that includes a dash (`-`). The `Microsoft.Extensions.Configuration.EnvironmentVariables` is unable to load the configuration due to the dash is removed once passed down to the application.\r\n\r\nIt seems that when an app setting is created in Azure App Service it removes all dashes (`-`) out of the name when passed down to the environment. This then causes not to be able to pick up this configuration value.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n\r\n#### Create an Azure Web App (Which is really an App Service 😕)\r\n\r\n1. Search on the port for Web  App and click create\r\n![step-1-create-web-app](https://user-images.githubusercontent.com/5544715/57138984-f04e2880-6dab-11e9-9279-37203b02720f.png)\r\n\r\n2. Fill in all the information and select a docker image running on Linux\r\n![step-2-create-web-app](https://user-images.githubusercontent.com/5544715/57139037-14116e80-6dac-11e9-9b76-3fe337dceb17.png)\r\n\r\n3. Select a quick start docker image\r\n![step-3-create-web-app](https://user-images.githubusercontent.com/5544715/57139059-2390b780-6dac-11e9-8289-6b7e98d36502.png)\r\n\r\n4. Review and create the Web App\r\n![step-4-create-web-app](https://user-images.githubusercontent.com/5544715/57139090-36a38780-6dac-11e9-8197-9e4a78591c28.png)\r\n\r\n#### Add App Setting with Dash (`-`)\r\n\r\n5. Once created, Go to the _Configuration_ page, we\u0027ll add an app setting with a dash (`-`)\r\n![step-5-add-application-setting](https://user-images.githubusercontent.com/5544715/57139114-3efbc280-6dac-11e9-9fa6-9a17ece861c6.png)\r\n\r\n6. We\u0027ll just call ours `With-Dash` and give it a random value of `WithDashValue`\r\n![step-6-add-application-setting](https://user-images.githubusercontent.com/5544715/57139160-5c309100-6dac-11e9-87bb-f576091e1f54.png)\r\n\r\n7. Review that our new app setting is there, then click save at the top\r\n![step-7-add-application-setting](https://user-images.githubusercontent.com/5544715/57139181-710d2480-6dac-11e9-948c-e3990c77ad84.png)\r\n\r\n#### Checking environment variables that are set\r\n\r\n8. Open up Kudu from the _Advanced Tools_ menu\r\n![step-8-open-kudu](https://user-images.githubusercontent.com/5544715/57139291-d103cb00-6dac-11e9-9b9b-e1b1e449b211.png)\r\n\r\n9. Click App Setting so we can view the app settings in json format\r\n![step-9-view-app-settings](https://user-images.githubusercontent.com/5544715/57139336-eaa51280-6dac-11e9-93bd-c0c7adf6a531.png)\r\n\r\n10. Note that app setting that did have a dash, now has the dash removed\r\n![step-10-view-app-settings](https://user-images.githubusercontent.com/5544715/57139367-00b2d300-6dad-11e9-9f5d-3399472c195e.png)\r\n\r\n```json\r\n{\r\n   \"deployment_branch\":\"master\",\r\n   \"SCM_TRACE_LEVEL\":\"1\",\r\n   \"SCM_COMMAND_IDLE_TIMEOUT\":\"60\",\r\n   \"SCM_LOGSTREAM_TIMEOUT\":\"1800\",\r\n   \"SCM_BUILD_ARGS\":\"\",\r\n   \"SCM_GIT_USERNAME\":\"windowsazure\",\r\n   \"SCM_GIT_EMAIL\":\"windowsazure\",\r\n   \"webpages:Version\":\"3.0.0.0\",\r\n   \"webpages:Enabled\":\"true\",\r\n   \"webactivator:assembliesToScan\":\"Kudu.Services.Web\",\r\n   \"SCM_USE_LIBGIT2SHARP_REPOSITORY\":\"0\",\r\n   \"REMOTEDEBUGGINGVERSION\":\"15.0.28307.222\",\r\n   \"WEBSITE_SITE_NAME\":\"1f615c06-7c8e-4a47-b600-f6abe08ae3d3\",\r\n   \"WEBSITE_AUTH_ENABLED\":\"False\",\r\n   \"WEBSITE_AUTH_AUTO_AAD\":\"False\",\r\n   \"ScmType\":\"None\",\r\n   \"WithDash\":\"WithDashValue\",\r\n   \"WEBSITE_AUTH_LOGOUT_PATH\":\"/.auth/logout\"\r\n}\r\n```\r\n\r\n11. Check environment variables set by dropping in to bash and running `printenv`\r\n![step-11-bash-printenv](https://user-images.githubusercontent.com/5544715/57139430-2d66ea80-6dad-11e9-9118-76853cc943e8.png)\r\n\r\n12. Note that the app setting appears twice, one prefix with `APPSETTING_` and the `-` removed\r\n![step-12-bash-printenv](https://user-images.githubusercontent.com/5544715/57139443-322b9e80-6dad-11e9-8ba9-afd3ea80d1ff.png)\r\n\r\n13. And another with just the `-` removed\r\n![step-13-bash-printenv](https://user-images.githubusercontent.com/5544715/57139522-61daa680-6dad-11e9-9bae-5023e3b2c3c8.png)\r\n\r\n\r\n14. Running the following test when trying to access an app setting with a `-` I\u0027d expect the value to be returned when the environment variable is missing the `-`.\r\n\r\n```csharp\r\n[Fact]\r\npublic void LoadKeyValuePairsFromAzureEnvironment()\r\n{\r\n    var dict = new Hashtable { {\"WithDash\", \"WithDashValue\"} };\r\n    var envConfigSrc = new EnvironmentVariablesConfigurationProvider();\r\n\r\n    envConfigSrc.Load(dict);\r\n\r\n    Assert.Equal(\"WithDashValue\", envConfigSrc.Get(\"With-Dash\"));\r\n}\r\n```\r\n\r\n### Expected behavior\r\nThe value to be loaded from the environment variable when we are accessing it using the key with the dash and the environment variable key has the dash removed.\r\n\r\n### Additional context\r\n\r\n#### Package Version\r\n\r\nhttps://www.nuget.org/packages/Microsoft.Extensions.Configuration.EnvironmentVariables/2.2.4\r\n\r\n#### Output of `dotnet --info`\r\n\r\n```bash\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-011223\r\n Commit:    118dd862c8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011223\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27615-11\r\n  Commit:  ee54d4cbd2\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview4-011223 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview4-19216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview4-27615-11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview4-27613-28 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOO-pe_Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4OTEyMzkwNQ==",
                                           "createdAt":  "2019-05-03T14:55:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "If Azure doesn\u0027t support dashes here then why do you continue to use dashes?",
                                           "updatedAt":  "2019-05-03T14:55:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4OTEzNTIwNw==",
                                           "createdAt":  "2019-05-03T15:27:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevbite",
                                           "body":  "Hey @Tratcher,\r\n\r\nWe are **not** using dashes in **our** code, however, **packages that we depend on** use dashes in their configuration sections, and because we want to be able to configure them from the external app settings then it doesn\u0027t currently work.\r\n\r\nA well-known package that does this is [Healthcheck-UI](https://github.com/Xabaril/AspNetCore.Diagnostics.HealthCheck) their configuration block looks like the following:\r\n```json\r\n{\r\n  \"HealthChecks-UI\": {\r\n    \"HealthChecks\": [ ],\r\n    \"Webhooks\": [ ],\r\n    \"EvaluationTimeOnSeconds\": 10,\r\n    \"MinimumSecondsBetweenFailureNotifications\":60\r\n  }\r\n}\r\n```\r\nhttps://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/blob/master/README.md#configuration\r\n\r\nTheir name `HealthChecks-UI` is statically set in their package and not configurable like many other packages.\r\n\r\nHence why this is an issue as it\u0027s out of our control.",
                                           "updatedAt":  "2019-05-03T15:27:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMDAxNjk5NA==",
                                           "createdAt":  "2019-06-07T19:51:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotalik",
                                           "body":  "@kevbite I\u0027m reaching out to the app service folks to figure out why dashes are removed in the first place.",
                                           "updatedAt":  "2019-06-07T19:51:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMDE2MDc4MQ==",
                                           "createdAt":  "2019-06-08T20:33:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevbite",
                                           "body":  "@jkotalik thanks for the update 👍.\r\n\r\nI\u0027m guessing that it\u0027s because environment variables don\u0027t support dashes.\r\n\r\n\u003eEnvironment variable names used by the utilities in the Shell and Utilities volume of IEEE Std 1003.1-2001 consist solely of uppercase letters, digits, and the \u0027_\u0027 (underscore) from the characters defined in Portable Character Set and do not begin with a digit. \r\nhttp://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap08.html\r\n",
                                           "updatedAt":  "2019-06-08T20:33:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwODg4NTc2MQ==",
                                           "createdAt":  "2019-07-06T00:59:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mderriey",
                                           "body":  "@kevbite a bit off topic, but the package supports both the `HealthChecks-UI` and `HealthChecksUI` names for the configuration section.\r\n\r\nSee https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/blob/7ca5744e10bee910ca1a345e8889cf4cedc6f975/src/HealthChecks.UI/Keys.cs#L7-L8\r\n\r\nUsed when retrieving the configuration here: https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/blob/7ca5744e10bee910ca1a345e8889cf4cedc6f975/src/HealthChecks.UI/ConfigurationExtensions.cs#L12-L15",
                                           "updatedAt":  "2019-07-06T01:00:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwOTExMzU3NA==",
                                           "createdAt":  "2019-07-08T07:33:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevbite",
                                           "body":  "@mderriey that\u0027s great to know 👍, looks like they change it on the [30th June](https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/commit/074fb0cad96930081e22eb25b531746608df5b3b#diff-902522b9e2897114bfea3781720448b3). Guessing other people bumped into similar problems. \r\n\r\nIt\u0027s a shame that other package authorizers have to work around this problem instead of it being fixed at source. 😢",
                                           "updatedAt":  "2019-07-08T07:33:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU1NzUzOQ==",
                                           "createdAt":  "2020-05-08T00:05:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "As part of the migration of components from dotnet/extensions to dotnet/runtime (https://github.com/aspnet/Announcements/issues/411) we will be bulk closing some of the older issues. If you are still interested in having this issue addressed, just comment and the issue will be automatically reactivated (even if you aren\u0027t the author). When you do that, I\u0027ll page the team to come take a look. If you\u0027ve moved on or workaround the issue and no longer need this change, just ignore this and the issue will be closed in **7 days**.\n\nIf you know that the issue affects a package that has moved to a different repo, please consider re-opening the issue in that repo. If you\u0027re unsure, that\u0027s OK, someone from the team can help!",
                                           "updatedAt":  "2020-05-08T00:05:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47qRnp",
                                           "createdAt":  "2021-12-24T21:58:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elmonitoboy",
                                           "body":  "Please re-open this issue. Environment variables still do not accept dashes and this limitation should be removed",
                                           "updatedAt":  "2021-12-24T21:58:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47qRn0",
                                           "createdAt":  "2021-12-24T21:58:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Paging @dotnet/extensions-migration ! This issue has been revived from staleness. Please take a look and route to the appropriate repository.",
                                           "updatedAt":  "2021-12-24T21:58:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc473X3N",
                                           "createdAt":  "2022-01-03T21:28:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-01-03T21:28:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc476haH",
                                           "createdAt":  "2022-01-04T21:51:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Describe the bug\r\nWhen a configuration value is set within Azure App Service with a key that includes a dash (`-`). The `Microsoft.Extensions.Configuration.EnvironmentVariables` is unable to load the configuration due to the dash is removed once passed down to the application.\r\n\r\nIt seems that when an app setting is created in Azure App Service it removes all dashes (`-`) out of the name when passed down to the environment. This then causes not to be able to pick up this configuration value.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n\r\n#### Create an Azure Web App (Which is really an App Service 😕)\r\n\r\n1. Search on the port for Web  App and click create\r\n![step-1-create-web-app](https://user-images.githubusercontent.com/5544715/57138984-f04e2880-6dab-11e9-9279-37203b02720f.png)\r\n\r\n2. Fill in all the information and select a docker image running on Linux\r\n![step-2-create-web-app](https://user-images.githubusercontent.com/5544715/57139037-14116e80-6dac-11e9-9b76-3fe337dceb17.png)\r\n\r\n3. Select a quick start docker image\r\n![step-3-create-web-app](https://user-images.githubusercontent.com/5544715/57139059-2390b780-6dac-11e9-8289-6b7e98d36502.png)\r\n\r\n4. Review and create the Web App\r\n![step-4-create-web-app](https://user-images.githubusercontent.com/5544715/57139090-36a38780-6dac-11e9-8197-9e4a78591c28.png)\r\n\r\n#### Add App Setting with Dash (`-`)\r\n\r\n5. Once created, Go to the _Configuration_ page, we\u0027ll add an app setting with a dash (`-`)\r\n![step-5-add-application-setting](https://user-images.githubusercontent.com/5544715/57139114-3efbc280-6dac-11e9-9fa6-9a17ece861c6.png)\r\n\r\n6. We\u0027ll just call ours `With-Dash` and give it a random value of `WithDashValue`\r\n![step-6-add-application-setting](https://user-images.githubusercontent.com/5544715/57139160-5c309100-6dac-11e9-87bb-f576091e1f54.png)\r\n\r\n7. Review that our new app setting is there, then click save at the top\r\n![step-7-add-application-setting](https://user-images.githubusercontent.com/5544715/57139181-710d2480-6dac-11e9-948c-e3990c77ad84.png)\r\n\r\n#### Checking environment variables that are set\r\n\r\n8. Open up Kudu from the _Advanced Tools_ menu\r\n![step-8-open-kudu](https://user-images.githubusercontent.com/5544715/57139291-d103cb00-6dac-11e9-9b9b-e1b1e449b211.png)\r\n\r\n9. Click App Setting so we can view the app settings in json format\r\n![step-9-view-app-settings](https://user-images.githubusercontent.com/5544715/57139336-eaa51280-6dac-11e9-93bd-c0c7adf6a531.png)\r\n\r\n10. Note that app setting that did have a dash, now has the dash removed\r\n![step-10-view-app-settings](https://user-images.githubusercontent.com/5544715/57139367-00b2d300-6dad-11e9-9f5d-3399472c195e.png)\r\n\r\n```json\r\n{\r\n   \"deployment_branch\":\"master\",\r\n   \"SCM_TRACE_LEVEL\":\"1\",\r\n   \"SCM_COMMAND_IDLE_TIMEOUT\":\"60\",\r\n   \"SCM_LOGSTREAM_TIMEOUT\":\"1800\",\r\n   \"SCM_BUILD_ARGS\":\"\",\r\n   \"SCM_GIT_USERNAME\":\"windowsazure\",\r\n   \"SCM_GIT_EMAIL\":\"windowsazure\",\r\n   \"webpages:Version\":\"3.0.0.0\",\r\n   \"webpages:Enabled\":\"true\",\r\n   \"webactivator:assembliesToScan\":\"Kudu.Services.Web\",\r\n   \"SCM_USE_LIBGIT2SHARP_REPOSITORY\":\"0\",\r\n   \"REMOTEDEBUGGINGVERSION\":\"15.0.28307.222\",\r\n   \"WEBSITE_SITE_NAME\":\"1f615c06-7c8e-4a47-b600-f6abe08ae3d3\",\r\n   \"WEBSITE_AUTH_ENABLED\":\"False\",\r\n   \"WEBSITE_AUTH_AUTO_AAD\":\"False\",\r\n   \"ScmType\":\"None\",\r\n   \"WithDash\":\"WithDashValue\",\r\n   \"WEBSITE_AUTH_LOGOUT_PATH\":\"/.auth/logout\"\r\n}\r\n```\r\n\r\n11. Check environment variables set by dropping in to bash and running `printenv`\r\n![step-11-bash-printenv](https://user-images.githubusercontent.com/5544715/57139430-2d66ea80-6dad-11e9-9118-76853cc943e8.png)\r\n\r\n12. Note that the app setting appears twice, one prefix with `APPSETTING_` and the `-` removed\r\n![step-12-bash-printenv](https://user-images.githubusercontent.com/5544715/57139443-322b9e80-6dad-11e9-8ba9-afd3ea80d1ff.png)\r\n\r\n13. And another with just the `-` removed\r\n![step-13-bash-printenv](https://user-images.githubusercontent.com/5544715/57139522-61daa680-6dad-11e9-9bae-5023e3b2c3c8.png)\r\n\r\n\r\n14. Running the following test when trying to access an app setting with a `-` I\u0027d expect the value to be returned when the environment variable is missing the `-`.\r\n\r\n```csharp\r\n[Fact]\r\npublic void LoadKeyValuePairsFromAzureEnvironment()\r\n{\r\n    var dict = new Hashtable { {\"WithDash\", \"WithDashValue\"} };\r\n    var envConfigSrc = new EnvironmentVariablesConfigurationProvider();\r\n\r\n    envConfigSrc.Load(dict);\r\n\r\n    Assert.Equal(\"WithDashValue\", envConfigSrc.Get(\"With-Dash\"));\r\n}\r\n```\r\n\r\n### Expected behavior\r\nThe value to be loaded from the environment variable when we are accessing it using the key with the dash and the environment variable key has the dash removed.\r\n\r\n### Additional context\r\n\r\n#### Package Version\r\n\r\nhttps://www.nuget.org/packages/Microsoft.Extensions.Configuration.EnvironmentVariables/2.2.4\r\n\r\n#### Output of `dotnet --info`\r\n\r\n```bash\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-011223\r\n Commit:    118dd862c8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011223\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27615-11\r\n  Commit:  ee54d4cbd2\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview4-011223 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview4-19216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview4-27615-11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview4-27613-28 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekevbite\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-04T21:51:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc476l79",
                                           "createdAt":  "2022-01-04T22:23:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@elmonitoboy - would it be possible to write a minimal reproduction, i.e. the smallest size of code/configuration required to reproduce the wrong behavior? That would speed up the investigation / understanding here. The repro steps above will take a lot of effort in order to trace down the issue.\r\n\r\nPlease refer to our [contribution guidelines](https://github.com/dotnet/runtime/blob/main/CONTRIBUTING.md#writing-a-good-bug-report) for tips on how to report issues effectively.",
                                           "updatedAt":  "2022-01-04T22:23:36Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Configuration.EnvironmentVariables does not respect dash being removed in the key by Azure App Service.",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36130",
        "createdAt":  "2019-09-24T17:16:49Z",
        "number":  36130,
        "author":  "Kahbazi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_kUag==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shaynevanasperen",
                                            "createdAt":  "2019-09-26T20:14:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TechnoBerry",
                                            "createdAt":  "2019-10-29T19:15:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dzliera",
                                            "createdAt":  "2021-03-19T07:40:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hammypants",
                                            "createdAt":  "2022-03-02T01:27:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "teneko",
                                            "createdAt":  "2022-05-10T18:08:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mahara",
                                            "createdAt":  "2022-11-23T17:32:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-08-30T17:57:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PabloStarOk",
                                            "createdAt":  "2025-02-28T03:10:35Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2022-07-14T21:31:44Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nI have a configuration class which contains over 50 properties. I want to get the new configuration for each request so `IOptionsSnapshot` is my choice, but the problem is that configuration is using `Reflection` to bind the options for each request. And for obvious reasons it can\u0027t be cached like `IOptions`  or `IOptionsMonitor`.\r\n\r\nAlso breaking the configuration class to multiple class is not an option here.\r\n\r\n### Describe the solution you\u0027d like\r\nIs it good idea to create a method using `ILGenerator` at runtime and use that to bind the configuration class? I assume once the method is created it has better performance than reflection.\r\n\r\nP.S. I\u0027m willing to create a PR for this.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKspxNQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU1NjY0Ng==",
                                           "createdAt":  "2020-05-08T00:02:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "As part of the migration of components from dotnet/extensions to dotnet/runtime (https://github.com/aspnet/Announcements/issues/411) we will be bulk closing some of the older issues. If you are still interested in having this issue addressed, just comment and the issue will be automatically reactivated (even if you aren\u0027t the author). When you do that, I\u0027ll page the team to come take a look. If you\u0027ve moved on or workaround the issue and no longer need this change, just ignore this and the issue will be closed in **7 days**.\n\nIf you know that the issue affects a package that has moved to a different repo, please consider re-opening the issue in that repo. If you\u0027re unsure, that\u0027s OK, someone from the team can help!",
                                           "updatedAt":  "2020-05-08T00:02:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTcwOTUwNA==",
                                           "createdAt":  "2020-05-08T08:41:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kahbazi",
                                           "body":  "This could improve the binding performance.\r\n\r\n@davidfowl Can we use the new source generators to bind configs?",
                                           "updatedAt":  "2020-05-08T08:41:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTcwOTUxMw==",
                                           "createdAt":  "2020-05-08T08:41:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Paging @dotnet/extensions-migration ! This issue has been revived from staleness. Please take a look and route to the appropriate repository.",
                                           "updatedAt":  "2020-05-08T08:41:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4OTk2NjgxMA==",
                                           "createdAt":  "2020-09-10T04:09:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "czd890",
                                           "body":  "Any update?",
                                           "updatedAt":  "2020-09-10T04:09:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNzkxMDMyNQ==",
                                           "createdAt":  "2020-10-28T12:48:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I think we need a new API here since we\u0027re going to end up wanting to cache these delegates. We can cache internally but then we need to decide how to properly evict items from the cache (like Activator.CreateInstance) or we can provide an API that returns the bind delegate (I\u0027d prefer that). \r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.Configuration\r\n{\r\n    public class ConfigurationBinder \r\n    {\r\n+        public static Action\u003cIConfiguration, T\u003e CreateBinder\u003cT\u003e(Action\u003cBinderOptions\u003e configureOptions = null);\r\n    }\r\n```\r\n\r\n## Usage Examples\r\n\r\n```C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nvar configuration = new ConfigurationBuilder()\r\n    .AddInMemoryCollection(new Dictionary\u003cstring, string\u003e\r\n    {\r\n        { \"Name\", \"David\" }\r\n    })\r\n    .Build();\r\n\r\nvar p = new Person();\r\nAction\u003cIConfiguration, Person\u003e binder = configuration.CreateBinder\u003cPerson\u003e();\r\n\r\nbinder(configuration, p);\r\n\r\nConsole.WriteLine(p.Name);\r\n\r\npublic class Person\r\n{\r\n    public string Name { get; init; }\r\n}\r\n```\r\n\r\nThis API would allow the calling code to appropriately cache.\r\n\r\n## Alternative Designs\r\n\r\nWe could change the `Action\u003cIConfiguration, T\u003e` to `Func\u003cIConfiguration, T\u003e` and it would return the object instance.",
                                           "updatedAt":  "2020-10-28T13:11:14Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Improve the performance of configuration binding",
        "labels":  [
                       "tenet-performance",
                       "feature-request",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/35989",
        "createdAt":  "2019-10-29T13:33:06Z",
        "number":  35989,
        "author":  "0x53A",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODGeMfw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Balfa",
                                            "createdAt":  "2022-12-14T13:39:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jez9999",
                                            "createdAt":  "2023-02-23T21:35:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gscanlon21",
                                            "createdAt":  "2023-06-28T01:33:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JasonWeinzierl",
                                            "createdAt":  "2023-07-21T20:40:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ChristophePietquin",
                                            "createdAt":  "2023-09-12T13:08:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SimonDraime",
                                            "createdAt":  "2023-09-12T13:32:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dev-0-9",
                                            "createdAt":  "2023-09-12T13:33:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alphac05",
                                            "createdAt":  "2023-09-12T13:59:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Gaetan-Willems",
                                            "createdAt":  "2023-09-12T14:01:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dev0006",
                                            "createdAt":  "2023-09-13T20:30:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlexandreBossard",
                                            "createdAt":  "2023-10-23T16:29:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rbgarcia",
                                            "createdAt":  "2024-09-09T15:28:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kamisoft-fr",
                                            "createdAt":  "2024-10-15T08:25:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "herbatnik",
                                            "createdAt":  "2024-11-29T13:47:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "koryphaee",
                                            "createdAt":  "2024-12-01T20:48:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "asjonos",
                                            "createdAt":  "2025-01-31T12:10:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "samcarswell",
                                            "createdAt":  "2025-07-08T02:55:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gioce90",
                                            "createdAt":  "2025-07-10T09:59:31Z"
                                        }
                                    ],
                          "totalCount":  18
                      },
        "updatedAt":  "2025-01-03T02:39:21Z",
        "body":  "Currently ``EnvironmentVariablesConfigurationProvider`` replaces ``__`` with ``:``.\r\n\r\nhttps://github.com/aspnet/Extensions/blob/192abfdf3e73106e40d7651eecfb621e4f78c344/src/Configuration/Config.EnvironmentVariables/src/EnvironmentVariablesConfigurationProvider.cs#L67-L70\r\n\r\nI propose to do something similar for dot.\r\n\r\n__Use case:__\r\n\r\nI need to configure logging in an asp.net core app hosted in Azure Container Instance.\r\n\r\nI want to set one specific logger to Trace, so I need to set the configuration key ``Logging:LogLevel:Company.Namespace.MyCustomMiddleware`` = ``Trace``.\r\n\r\nLocally on my windows PC I can run\r\n```set Logging__LogLevel__Company.Namespace.MyCustomMiddleware=Trace```\r\nand everything works.\r\n\r\nWhen I try to do it in Azure App Service, it doesn\u0027t allow me to create the container, even though it is a windows container:\r\n\r\n![image](https://user-images.githubusercontent.com/4236651/67771356-6e884080-fa58-11e9-959c-2465a0204ea9.png)\r\n\r\n__Request:__ Please add a replacement for ``.``, similar to ``:``.\r\n\r\n__Workaround:__ I can do a code change to change the name of the logger, this works as long as it is first party code, not third party.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmRogiw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NzgwNDIzNw==",
                                           "createdAt":  "2020-01-23T18:16:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "Putting in the list of *possible* 5.0 candidates (no guarantees!). The fact that logging can\u0027t be fully configured via environment variables because of this is a compelling reason to consider this.",
                                           "updatedAt":  "2020-01-23T18:16:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTI1NTg2MA==",
                                           "createdAt":  "2020-04-24T21:57:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEaEPnQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-22T14:51:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "gioce90",
                                                                               "createdAt":  "2025-07-10T10:00:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "Triage: We think the right approach here is to see if App Service can resolve this blockage. Adding a new replacement pattern would be *extremely* breaking.",
                                           "updatedAt":  "2020-04-24T21:57:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTI1NzE2Ng==",
                                           "createdAt":  "2020-04-24T22:02:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCQMRpQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "doggy8088",
                                                                               "createdAt":  "2022-02-11T17:26:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "ksemele",
                                                                               "createdAt":  "2022-02-24T11:53:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "Turns out macOS and Linux don\u0027t support `.` in env vars either though, so we may need to find a deeper solution for the Logging problem specifically. The problem is it\u0027s also breaking to use a replacement token in Logging because logger names can be any string (they tend to be based on type names but don\u0027t have to be).",
                                           "updatedAt":  "2020-04-24T22:02:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxOTI1ODE3Nw==",
                                           "createdAt":  "2020-04-24T22:05:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "There appear to be lots of characters that aren\u0027t allowed here.  Here are some that I tried: `#^+\u0026|;,` does this require some generic escaping rule?",
                                           "updatedAt":  "2020-04-24T22:05:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42oat6",
                                           "createdAt":  "2021-09-10T01:41:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thohng",
                                           "body":  "I dont see any wrong if input to Azure AppService this configuration:\r\n\r\n```\r\nLogging__LogLevel__Company.Namespace.MyCustomMiddleware\r\nTrace\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/9668549/132784347-9d26e7b7-5169-4df5-bf3e-fab889dcc3d3.png)\r\n\r\nIn the screenshot, I can see that the configuration is not valid because the name contains special char `:`\r\n![image](https://user-images.githubusercontent.com/9668549/132785122-ec437e9f-d0de-4885-b015-68edd5f43fce.png)\r\n\r\n\u003e When I try to do it in Azure App Service, it doesn\u0027t allow me to create the container, even though it is a windows container:\r\n\u003e \r\n\u003e ![image](https://user-images.githubusercontent.com/4236651/67771356-6e884080-fa58-11e9-959c-2465a0204ea9.png)\r\n\r\n",
                                           "updatedAt":  "2021-09-10T01:41:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44XF45",
                                           "createdAt":  "2021-10-18T09:24:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfa5-Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "doggy8088",
                                                                               "createdAt":  "2022-02-11T17:28:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "thohng",
                                                                               "createdAt":  "2023-07-22T03:42:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "VictorioBerra",
                                                                               "createdAt":  "2024-04-24T16:20:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "WernerMairl",
                                           "body":  "Some analysis about this in October 2021:\r\n\r\nI\u0027m using a (alpine) docker container inside Azure AppServices.\r\n\r\nYES: it is possible to use the dot inside Azure UI:\r\n![image](https://user-images.githubusercontent.com/10084630/137704250-82e39205-f1f6-45a0-8b9c-ba10df416726.png)\r\n\r\nBUT internally it remains \"_\" (using IConfigurationRoot.DebugView)\r\n\r\n![image](https://user-images.githubusercontent.com/10084630/137704466-b2d12767-e9d6-4562-a1c0-b5cf860daaa2.png)\r\n\r\nand with this, the LogFiltering basically is not working :-(\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2021-10-18T09:24:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44d1Ox",
                                           "createdAt":  "2021-10-20T05:37:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCOSPLw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "doggy8088",
                                                                               "createdAt":  "2022-02-11T17:23:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "WernerMairl",
                                           "body":  "Hi\r\n\r\nI have implemented my own solution and that may be a idea for solving this without breaking changes (implement a customizing for NormalizeKey inside EnvironmentVariablesConfigurationProvider without modification on the current behavior.\r\n\r\n\r\nI have re-written current (net 6) EnvironmentVariablesConfigurationProvider (copy and rename).\r\n\r\nthe only changes that i have implemented are:\r\n\r\nbefore:\r\n![image](https://user-images.githubusercontent.com/10084630/138032947-ad578130-e926-43ba-b160-56395eb20fd0.png)\r\n\r\nafter:\r\n![image](https://user-images.githubusercontent.com/10084630/138032747-ff88040d-3699-452c-87fa-a974610348bd.png)\r\n\r\nFull source code [here](https://gist.github.com/WernerMairl/4629321baa39e1099adfe365bf933537)\r\n\r\nif someone likes to use this workaround in the meantime, use the gist plus this [snippet](https://gist.github.com/WernerMairl/a26a3df8013c4f8a87da79a16f8ce24e).\r\n\r\nIt replaces the current EnvironmentVariablesProvider with my new workaround implementation and shows how we can inject special cases into the key normalization process.\r\n\r\n![image](https://user-images.githubusercontent.com/10084630/138033831-472d5df1-8e13-4887-bf8b-4396b9a8ff04.png)\r\n\r\nI can provide PR for the runtime sourcecode if we agree on strategy and api details \r\n(assuming we need some other naming there)\r\n\r\nregards\r\nWerner\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2021-10-20T05:37:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GoG6y",
                                           "createdAt":  "2022-07-14T21:39:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCnEDtg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "WernerMairl",
                                                                               "createdAt":  "2022-07-17T07:41:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "We will consider this in a future release. Moving this issue out of the 7.0 milestone. ",
                                           "updatedAt":  "2022-07-14T21:39:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OARiu",
                                           "createdAt":  "2022-11-09T12:42:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCxxpug==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2022-12-24T20:09:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "drothmaler",
                                           "body":  "I think this could be done using: #61169",
                                           "updatedAt":  "2022-11-09T12:42:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5R7cTE",
                                           "createdAt":  "2023-01-07T16:42:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jez9999",
                                           "body":  "Sign me up for this.  One of the reasons I was always uneasy about using env. variables for config is how limited they tend to be because they\u0027re being set in a shell environment.  Linux env var names are *incredibly* limited, being apparently limited to letters, numbers, and underscore.  There should indeed be a generic escape mechanism (which kinda sucks because it\u0027ll make env var names necessarily ugly) implemented in .NET to cater for Linux\u0027s limited env var names.\r\n\r\nI just tried doing this in Linux and unsurprisingly it doesn\u0027t work (not a valid identifier): `export Logging__LogLevel__Microsoft.Hosting.Lifetime=\"Warning\"`\r\n\r\nAs of the time of writing it would seem there\u0027s literally no solution to this.  Environment variables.  Ugh.",
                                           "updatedAt":  "2023-01-07T16:42:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WJiQp",
                                           "createdAt":  "2023-02-26T11:47:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBdbJg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Davilink",
                                                                               "createdAt":  "2023-04-01T00:53:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JasonWeinzierl",
                                                                               "createdAt":  "2023-07-21T20:43:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "thohng",
                                                                               "createdAt":  "2023-07-22T03:43:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "jez9999",
                                           "body":  "Instead of escaping stuff in the environment variable name, would it make more sense to shift everything to the env var value, where you can put far more characters?  I propose that env vars whose name matches a specific pattern - say `DOTNETVAR[integer]` - have their values parsed specially for a `name=value` format.  Then you could say:\r\n\r\n```\r\nDOTNETVAR1=\u0027Logging:LogLevel:Microsoft.Hosting.Lifetime=\"Debug\"\u0027\r\nDOTNETVAR2=\u0027Some:Config:Section=\"It\u0027\\\u0027\u0027s even possible to mix quotes\"\u0027\r\n```",
                                           "updatedAt":  "2023-02-26T12:00:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iHQCc",
                                           "createdAt":  "2023-07-21T18:07:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODqMPHQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "Gonkers",
                                                                               "createdAt":  "2024-07-17T19:46:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "layomia",
                                           "body":  "Triage - moving to future; no strong feedback to prioritize this relative to other work for .NET 8.",
                                           "updatedAt":  "2023-07-21T18:07:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iHfUg",
                                           "createdAt":  "2023-07-21T19:04:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD9H6WA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JasonWeinzierl",
                                                                               "createdAt":  "2023-07-21T20:40:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "thohng",
                                                                               "createdAt":  "2023-07-22T03:40:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ssoldatenkov",
                                                                               "createdAt":  "2023-08-17T18:36:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ChristophePietquin",
                                                                               "createdAt":  "2023-09-12T13:08:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlexandreBossard",
                                                                               "createdAt":  "2023-10-23T16:29:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tro2102",
                                                                               "createdAt":  "2024-02-06T22:16:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DavidBoone",
                                                                               "createdAt":  "2024-04-26T20:45:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Gonkers",
                                                                               "createdAt":  "2024-07-17T19:46:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AelithBlanchett",
                                                                               "createdAt":  "2024-08-21T19:54:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rbgarcia",
                                                                               "createdAt":  "2024-09-09T15:29:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "koryphaee",
                                                                               "createdAt":  "2024-12-01T20:52:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  11
                                                         },
                                           "author":  "jez9999",
                                           "body":  "\u003e Triage - moving to future; no strong feedback to prioritize this relative to other work for .NET 8.\r\n\r\nSeriously?  I\u0027m giving my strong feedback.  It\u0027s ludicrous that there\u0027s still no mechanism to configure log levels in environment variables on non-Windows platforms!  Plenty of people in this bug have expressed a wish for it.  I think it should absolutely be in .NET 8.",
                                           "updatedAt":  "2023-07-21T19:04:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iIsGb",
                                           "createdAt":  "2023-07-22T03:41:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thohng",
                                           "body":  "We really rely on this update, current we have to inject the appsettings.Production.json for those need update configuration with dot (.) on key.\r\n\r\nSuch as below test on Azure AppService:\r\n\r\n```\r\n\"Serilog\": {\r\n  \"MinimumLevel\": {\r\n    \"Override\": {\r\n      \"Microsoft.AspNetCore.Authentication\": \"Information\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nShould become\r\n```\r\nSerilog__MinimumLevel__Override__Microsoft.AspNetCore.Authentication=Information\r\n```\r\n\r\nBut on the application receive `Microsoft_AspNetCore_Authentication` instead of `Microsoft.AspNetCore.Authentication`:\r\n```\r\nSerilog__MinimumLevel__Override__Microsoft_AspNetCore_Authentication=Information\r\n```\r\n",
                                           "updatedAt":  "2023-07-22T03:41:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iPzBH",
                                           "createdAt":  "2023-07-24T17:24:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "layomia",
                                           "body":  "In the meantime see this workaround from @tarekgh in https://github.com/dotnet/runtime/issues/87130#issuecomment-1583859511\r\n\r\n---\r\n\r\nWe are currently tracking the same issue under #35989. I will proceed to close this particular issue, but please feel free to respond here or on the linked issue if you have any further questions or require assistance.\r\n\r\nPlease note that this is a feature request that can only be implemented in a future release. However, I can provide you with a workaround code that you can utilize in your application to temporarily resolve the issue until it is officially supported by the framework. The workaround involves creating a custom configuration provider to handle the replacement of dots in the environment variable. This workaround serves as an extension to the environment variable configuration provider, making it straightforward to implement by replacing the call to `IConfigurationBuilder.AddEnvironmentVariables()` with the new custom method, `IConfigurationBuilder.AddCustomEnvironmentVariables()`.\r\n\r\n```C#\r\npublic class CustomEnvironmentVariablesConfigurationProvider : EnvironmentVariablesConfigurationProvider\r\n{\r\n    internal const string DefaultDotReplacement = \":_\";\r\n    private string _dotReplacement; \r\n    public CustomEnvironmentVariablesConfigurationProvider(string? dotReplacement = DefaultDotReplacement) : base()\r\n    {\r\n        _dotReplacement = dotReplacement ?? DefaultDotReplacement;\r\n    }\r\n\r\n    public CustomEnvironmentVariablesConfigurationProvider(string? prefix, string? dotReplacment = DefaultDotReplacement) : base(prefix)\r\n    {\r\n        _dotReplacement = dotReplacment ?? DefaultDotReplacement;\r\n    }\r\n\r\n    public override void Load()\r\n    {\r\n        base.Load();\r\n\r\n        Dictionary\u003cstring, string?\u003e data = new Dictionary\u003cstring, string?\u003e();\r\n\r\n        foreach (KeyValuePair\u003cstring, string?\u003e kvp in Data)\r\n        {\r\n            if (kvp.Key.Contains(_dotReplacement))\r\n            {\r\n                data.Add(kvp.Key.Replace(_dotReplacement, \".\", StringComparison.OrdinalIgnoreCase), kvp.Value);\r\n            }\r\n            else\r\n            {\r\n                data.Add(kvp.Key, kvp.Value);\r\n            }\r\n        }\r\n\r\n        Data = data;\r\n    }\r\n}\r\n\r\npublic class CustomEnvironmentVariablesConfigurationSource : IConfigurationSource\r\n{\r\n    public string? Prefix { get; set; }\r\n    public string? DotReplacement { get; set; }\r\n\r\n    public IConfigurationProvider Build(IConfigurationBuilder builder)\r\n    {\r\n        return new CustomEnvironmentVariablesConfigurationProvider(Prefix, DotReplacement);\r\n    }\r\n}\r\n\r\npublic static class CustomEnvironmentVariablesExtensions\r\n{\r\n    public static IConfigurationBuilder AddCustomEnvironmentVariables(this IConfigurationBuilder configurationBuilder)\r\n    {\r\n        configurationBuilder.Add(new CustomEnvironmentVariablesConfigurationSource());\r\n        return configurationBuilder;\r\n    }\r\n\r\n    public static IConfigurationBuilder AddCustomEnvironmentVariables(this IConfigurationBuilder configurationBuilder, string? prefix, string? dotReplacement = CustomEnvironmentVariablesConfigurationProvider.DefaultDotReplacement)\r\n    {\r\n        configurationBuilder.Add(new CustomEnvironmentVariablesConfigurationSource { Prefix = prefix, DotReplacement = dotReplacement });\r\n        return configurationBuilder;\r\n    }\r\n\r\n    public static IConfigurationBuilder AddCustomEnvironmentVariables(this IConfigurationBuilder builder, Action\u003cCustomEnvironmentVariablesConfigurationSource\u003e? configureSource) =\u003e builder.Add(configureSource);\r\n}\r\n```\r\n\r\nUsing that, now you can define the environment variable with three underscores `___` in the places you want dot. \r\n\r\n```\r\nLogging__LogLevel__Microsoft___Hosting___Lifetime=Information    \u003c-- Logging:LogLevel:Microsoft.Hosting.Lifetime=Information\r\n```",
                                           "updatedAt":  "2023-07-24T17:24:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jfRaR",
                                           "createdAt":  "2023-08-08T08:20:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "worldspawn",
                                           "body":  "Its not only logging where this comes up. In migrating older apps from windows servers to nix containers this comes up quite a bit. People have named configuration values with periods in them because they could and now... they can\u0027t.  ",
                                           "updatedAt":  "2023-08-08T08:20:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-0S4I",
                                           "createdAt":  "2024-05-23T16:54:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bt-Knodel",
                                           "body":  "@layomia Small bug to note in that workaround, it changes the environment variable provider to be case sensitive.  Data dictionary is normally initialized with StringComparer.OrdinalIgnoreCase.  Might be worth updating that workaround to follow the ignore casing requirement of the provider it inherits.",
                                           "updatedAt":  "2024-05-23T16:54:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FspO2",
                                           "createdAt":  "2024-07-22T14:15:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Angelinsky7",
                                           "body":  "Hello, any news about this ? Is the workaround of @layomia the current way to go ? Thanks for any answer :-)",
                                           "updatedAt":  "2024-07-22T14:15:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GI_-3",
                                           "createdAt":  "2024-07-25T14:41:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODrlhcA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Angelinsky7",
                                                                               "createdAt":  "2024-07-25T17:30:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bt-Knodel",
                                           "body":  "@Angelinsky7 it worked for us if it helps.  Do note the comment I made though, the workaround makes all environment variable settings case-sensitive, which isn\u0027t good.  Line 19 of the workaround should be switched to this to have 1-to-1 functionality with its base class:\r\n\r\n`Dictionary\u003cstring, string\u003e data = new Dictionary\u003cstring, string\u003e(StringComparer.OrdinalIgnoreCase);`",
                                           "updatedAt":  "2024-07-25T14:41:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GLCe9",
                                           "createdAt":  "2024-07-25T17:30:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Angelinsky7",
                                           "body":  "@bt-Knodel thanks for your answer !!!",
                                           "updatedAt":  "2024-07-25T17:30:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ka1eF",
                                           "createdAt":  "2024-08-30T20:28:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEaEPMA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pariesz",
                                                                               "createdAt":  "2024-09-06T11:13:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bt-Knodel",
                                                                               "createdAt":  "2024-09-19T12:31:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "paulbreuler",
                                                                               "createdAt":  "2024-11-01T14:43:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dben",
                                                                               "createdAt":  "2024-11-12T22:22:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "koryphaee",
                                                                               "createdAt":  "2024-12-01T20:49:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nbrosz",
                                                                               "createdAt":  "2025-01-27T16:44:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "toclan",
                                                                               "createdAt":  "2025-02-24T10:04:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gioce90",
                                                                               "createdAt":  "2025-07-10T10:00:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "colinblaise",
                                           "body":  "Wait, has this really been an unresolved issue for 5 years? We just dropped serilog in favor of using Open Telemetry with the .NET logger. Couldn\u0027t figure out why are log verbosities in production were not being honored.  In disbelief this isn\u0027t causing everyone problems.",
                                           "updatedAt":  "2024-08-30T20:28:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Tij5B",
                                           "createdAt":  "2024-11-14T02:57:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEKnEA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nbrosz",
                                                                               "createdAt":  "2025-01-27T16:44:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "antmeehan",
                                           "body":  "I\u0027ve landed here because I\u0027m forced to move to a Linux Web App in Azure so I can [use gRPC](https://learn.microsoft.com/en-us/aspnet/core/grpc/supported-platforms?view=aspnetcore-8.0#azure-services). It blows my mind that this isn\u0027t resolved. We have heaps of configuration which contain `.` since we use full type names for a lot of configuration. I\u0027m surprised that more people haven\u0027t hit this issue? @shanselman don\u0027t you run everything on Linux web apps?",
                                           "updatedAt":  "2024-11-14T02:57:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Vn1XE",
                                           "createdAt":  "2024-12-01T20:54:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "koryphaee",
                                           "body":  "Just spent half an hour googling why `Logging__LogLevel__Microsoft.EntityFrameworkCore.Database.Command=Warning` did not work. Please add this sometime soon, I would really appreciate it ❤ ",
                                           "updatedAt":  "2024-12-01T20:54:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WQ2hI",
                                           "createdAt":  "2024-12-05T17:28:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colinblaise",
                                           "body":  "\u003e Just spent half an hour googling why `Logging__LogLevel__Microsoft.EntityFrameworkCore.Database.Command=Warning` did not work. Please add this sometime soon, I would really appreciate it ❤\n\nYou can use the workaround mentioned above in the meantime",
                                           "updatedAt":  "2024-12-05T17:28:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZGiCL",
                                           "createdAt":  "2025-01-03T02:39:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "doggy8088",
                                           "body":  "workaround here, if you don\u0027t know where it is: https://github.com/dotnet/runtime/issues/87130#issuecomment-1583859511",
                                           "updatedAt":  "2025-01-03T02:39:20Z"
                                       }
                                   ],
                         "totalCount":  25
                     },
        "title":  "[Feature Request] Add a replacement for dot in EnvironmentVariablesConfigurationProvider",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36024",
        "createdAt":  "2019-11-06T16:20:27Z",
        "number":  36024,
        "author":  "jdmallen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODRhrzQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rcollina",
                                            "createdAt":  "2019-11-06T22:19:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EliaSaSe",
                                            "createdAt":  "2020-03-06T16:40:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yariker",
                                            "createdAt":  "2022-06-07T00:26:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CCRcmcpe",
                                            "createdAt":  "2022-06-07T04:21:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "olfek",
                                            "createdAt":  "2023-11-02T22:53:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cschulzsuper",
                                            "createdAt":  "2024-01-27T10:37:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kokosda",
                                            "createdAt":  "2024-03-08T00:34:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "slimshader",
                                            "createdAt":  "2024-06-03T09:37:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrewdbond",
                                            "createdAt":  "2024-09-13T17:08:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PrimalZed",
                                            "createdAt":  "2024-10-09T22:46:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fmaeseele",
                                            "createdAt":  "2025-01-03T14:25:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "uo1",
                                            "createdAt":  "2025-02-16T21:57:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "abalaci",
                                            "createdAt":  "2025-07-10T14:33:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Harmageddon",
                                            "createdAt":  "2025-07-14T14:42:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "akasarto",
                                            "createdAt":  "2025-09-18T08:11:03Z"
                                        }
                                    ],
                          "totalCount":  15
                      },
        "updatedAt":  "2024-06-19T09:52:41Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nSupplying just a switch as a command line argument is ignored...\r\n```\r\n.\\myProgram.exe --help\r\n```\r\n...unless a value was also supplied.\r\n```\r\n.\\myProgram.exe --help=true\r\n.\\myProgram.exe --help true\r\n```\r\n\r\n### Describe the solution you\u0027d like\r\nI suggest changing the CommandLineConfigurationProvider to provide a default value of \"true\" if a value is omitted. It both ensures the key is included in the Configuration for consumption in the app, and allows for it to be more easily bound to an IOptions object as a `bool`, if desired.\r\n\r\n### Describe alternatives you\u0027ve considered\r\nI considered supplying just an empty string or null object for the configuration value, but that seemed a bit less clear. Switches are generally treated as \"true if present,\" so I went with that approach.\r\n\r\n### Additional context\r\n[I did create a branch and implement the change in my fork.](https://github.com/jdmallen/Extensions/commit/d3ecb2276e89657d293546c572e1a69abae689a3) Sorry the diff is a mess-- I\u0027m not sure why things aren\u0027t lining up. There wasn\u0027t nearly as much changed as it\u0027s showing. Here\u0027s a summary of the code changes:\r\n- [removed](https://github.com/jdmallen/Extensions/commit/d3ecb2276e89657d293546c572e1a69abae689a3#diff-21702708a9353f153a198f3092422a10L44) the outer `using (var enumerator)...` scope, reducing the indentation of its original contents (this is probably why diff is freaking out)\r\n- [replaced](https://github.com/jdmallen/Extensions/commit/d3ecb2276e89657d293546c572e1a69abae689a3#diff-21702708a9353f153a198f3092422a10R46-L46) the `while` with the `for` loop\r\n- [changed/added](https://github.com/jdmallen/Extensions/commit/d3ecb2276e89657d293546c572e1a69abae689a3#diff-21702708a9353f153a198f3092422a10R48-R50) a couple variables to capture the current and next args\r\n- [added](https://github.com/jdmallen/Extensions/commit/d3ecb2276e89657d293546c572e1a69abae689a3#diff-21702708a9353f153a198f3092422a10R96-R110) a section to handle the missing value\r\n- [modified](https://github.com/jdmallen/Extensions/commit/d3ecb2276e89657d293546c572e1a69abae689a3#diff-9f087074d1fd503cdba8627b716b0594L205-R216) the test for no value provided to instead check for its value being assigned as \"true\"\r\n\r\nThe rest is the same. I can confirm it works as expected. Since this change requires looking ahead to know if the next arg following a space is a value for the current arg OR the next argument key, which simple enumeration cannot provide, I changed it to a for loop. This seemed the cleanest way to allow for looking ahead (i.e. providing indexed access).\r\n\r\nOne caveat is that this pulls Linq into the `using`s to convert the `IEnumerable\u003cstring\u003e Args` to a `string[]` array using the `System.Linq.ToArray\u003cT\u003e()` command. This is probably not ideal and I am open to alternatives to keep this speedy and appropriate for the repo.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgdWNxg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MDM4Nzc5Nw==",
                                           "createdAt":  "2019-11-06T16:25:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jdmallen",
                                           "body":  "[Here is the Beyond Compare diff of the same](https://i.imgur.com/XsITwkm.png), which is a bit cleaner. I based my branch off of tag v3.0.0.\r\n\r\n\r\n",
                                           "updatedAt":  "2019-11-06T16:25:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMjQ0MzQ3MQ==",
                                           "createdAt":  "2020-10-01T23:12:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "@jdmallen this issue makes sense. Even though this is a breaking change but it\u0027s OK to take it because it is an enhancement.\r\n\r\nWould you like to open a PR?",
                                           "updatedAt":  "2020-10-01T23:12:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMjY3NjU2NA==",
                                           "createdAt":  "2020-10-02T11:19:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBSTPDA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2020-10-02T18:30:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jdmallen",
                                           "body":  "@maryamariyan Sure! Thanks for reviewing.",
                                           "updatedAt":  "2020-10-02T11:19:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzQ5OTc2NA==",
                                           "createdAt":  "2020-10-13T05:34:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jdmallen",
                                           "body":  "@maryamariyan Which branch should I open the PR against so I can rebase?",
                                           "updatedAt":  "2020-10-13T05:34:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwODg1NDIyMw==",
                                           "createdAt":  "2020-10-15T02:27:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "\u003e @maryamariyan Which branch should I open the PR against so I can rebase?\r\n\r\nYou\u0027d need to rebase off master, which is the target branch for future/6.0 work.",
                                           "updatedAt":  "2020-10-15T02:27:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RgapB",
                                           "createdAt":  "2022-12-29T16:36:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dhazel",
                                           "body":  "I see the PR ran into OS interoperability issues and was auto-closed. Pity.\r\n\r\nWhat if, instead, a [switchMapping](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.commandlineconfigurationextensions.addcommandline?view=dotnet-plat-ext-7.0#microsoft-extensions-configuration-commandlineconfigurationextensions-addcommandline(microsoft-extensions-configuration-iconfigurationbuilder-system-string()-system-collections-generic-idictionary((system-string-system-string)))) mechanism like the following was implemented:\r\n```cs\r\nvar config = new ConfigurationBuilder()\r\n    .AddCommandLine(\r\n            Environment.GetCommandLineArgs(),\r\n            new Dictionary\u003cstring,string\u003e {\r\n                { \"--help\", \"Settings:Help=true\" },\r\n            }\r\n        )\r\n    .Build();\r\n```\r\nMight this be simpler to implement?\r\n\r\nAt any rate, once someone is needing these command line flags, a full-fledged argument parser might be a best choice instead.",
                                           "updatedAt":  "2022-12-29T16:41:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5d6j1D",
                                           "createdAt":  "2023-06-04T16:35:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFOTUA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "olfek",
                                                                               "createdAt":  "2023-11-02T22:54:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "martinb69",
                                                                               "createdAt":  "2024-02-22T09:58:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rideckard",
                                                                               "createdAt":  "2024-04-12T10:26:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "slimshader",
                                                                               "createdAt":  "2024-06-03T09:01:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dvdstelt",
                                                                               "createdAt":  "2024-06-19T09:46:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sla89",
                                                                               "createdAt":  "2024-08-13T07:00:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mharrah",
                                                                               "createdAt":  "2025-02-04T17:34:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "kwaclaw",
                                           "body":  "Just ran into this: a command line parser that can\u0027t test for the presence of a switch? Weird!",
                                           "updatedAt":  "2023-06-04T16:35:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B1Y3G",
                                           "createdAt":  "2024-06-19T09:52:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1BaaQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aguzev",
                                                                               "createdAt":  "2024-08-03T07:32:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sla89",
                                                                               "createdAt":  "2024-08-13T06:59:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kabua",
                                                                               "createdAt":  "2024-10-07T02:06:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "dvdstelt",
                                           "body":  "Wow, this is weird! I want to do the following and I just can\u0027t.\r\n\r\n`myApp.exe --runInstallers --populateWithDefaultValues --CleanUpWhenDone`\r\n\r\nBecause it needs to be\r\n\r\n`myApp.exe --runInstallers=true --populateWithDefaultValues=true --CleanUpWhenDone=true`\r\n\r\n🤯 ",
                                           "updatedAt":  "2024-06-19T09:52:40Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Add ability to parse command line switches without a value",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36018",
        "createdAt":  "2019-11-28T12:31:27Z",
        "number":  36018,
        "author":  "mariusGundersen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCwRjbA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "rcollina",
                                            "createdAt":  "2020-01-23T19:29:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tuscen",
                                            "createdAt":  "2020-01-23T20:14:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "slang25",
                                            "createdAt":  "2020-04-03T11:43:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shaynevanasperen",
                                            "createdAt":  "2020-04-03T11:44:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jacobslusser",
                                            "createdAt":  "2020-08-02T04:56:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "acraigbray",
                                            "createdAt":  "2020-10-08T23:11:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "beachwalker",
                                            "createdAt":  "2020-12-18T13:08:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2020-12-22T20:53:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "artyom-p",
                                            "createdAt":  "2020-12-27T18:25:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dkogithub",
                                            "createdAt":  "2021-03-25T12:09:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matrix101",
                                            "createdAt":  "2021-04-28T06:52:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "metoule",
                                            "createdAt":  "2021-04-28T11:33:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MISTikus",
                                            "createdAt":  "2021-06-09T09:44:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mdekrey",
                                            "createdAt":  "2021-06-14T14:26:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eduardgrinberg",
                                            "createdAt":  "2021-07-18T10:18:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "careless6666",
                                            "createdAt":  "2021-08-07T19:21:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gao-artur",
                                            "createdAt":  "2021-08-12T10:14:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cfbao",
                                            "createdAt":  "2021-09-03T03:40:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BalassaMarton",
                                            "createdAt":  "2021-09-21T11:41:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mjolka",
                                            "createdAt":  "2021-10-10T23:20:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Euphoric",
                                            "createdAt":  "2021-11-19T08:35:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkla-dr",
                                            "createdAt":  "2022-01-28T11:01:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ziaulhasanhamim",
                                            "createdAt":  "2022-02-14T13:51:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "timstokman",
                                            "createdAt":  "2022-02-20T00:02:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pihai",
                                            "createdAt":  "2022-02-24T05:08:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "apoulet-olo",
                                            "createdAt":  "2022-03-15T15:27:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JasonBock",
                                            "createdAt":  "2022-04-13T14:42:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nil4",
                                            "createdAt":  "2022-04-13T15:41:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Hawxy",
                                            "createdAt":  "2022-08-08T13:41:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "szaboopeeter",
                                            "createdAt":  "2022-08-19T07:03:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IGx89",
                                            "createdAt":  "2022-08-26T15:54:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xced",
                                            "createdAt":  "2022-09-30T11:18:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kellyrbourg",
                                            "createdAt":  "2022-10-16T05:44:52Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "kellyrbourg",
                                            "createdAt":  "2022-10-16T05:44:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ffMathy",
                                            "createdAt":  "2022-11-16T13:48:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KieranDevvs",
                                            "createdAt":  "2022-11-21T11:30:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "piekstra",
                                            "createdAt":  "2022-12-01T22:40:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aromaa",
                                            "createdAt":  "2022-12-03T20:35:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "radverg",
                                            "createdAt":  "2022-12-30T10:14:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wdolek",
                                            "createdAt":  "2023-01-03T18:19:22Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "tuscen",
                                            "createdAt":  "2023-03-17T17:48:12Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "tuscen",
                                            "createdAt":  "2023-03-17T17:48:17Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "tuscen",
                                            "createdAt":  "2023-03-17T17:48:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Shane32",
                                            "createdAt":  "2023-03-21T22:07:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "azhe403",
                                            "createdAt":  "2023-03-22T00:55:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2023-04-04T18:48:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MDendura",
                                            "createdAt":  "2023-04-13T10:40:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pedoc",
                                            "createdAt":  "2023-05-19T00:16:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Hubert-Rybak",
                                            "createdAt":  "2023-05-19T09:57:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aayjaychan",
                                            "createdAt":  "2023-05-24T14:43:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "waffleshop",
                                            "createdAt":  "2023-06-01T18:02:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DimaMegaMan",
                                            "createdAt":  "2023-06-07T12:40:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "somanysteves",
                                            "createdAt":  "2023-07-05T20:10:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "slick-nic",
                                            "createdAt":  "2023-07-28T16:01:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PatTheHyruler",
                                            "createdAt":  "2023-08-04T16:15:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "quetzalcoatl",
                                            "createdAt":  "2023-08-24T16:14:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GimmeDaKitty",
                                            "createdAt":  "2023-09-16T09:10:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AdamSendible",
                                            "createdAt":  "2023-10-04T01:29:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "siby-george",
                                            "createdAt":  "2023-10-16T21:27:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cmxl",
                                            "createdAt":  "2023-10-20T18:34:42Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "aloraman",
                                            "createdAt":  "2023-10-28T11:40:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BoundedChenn31",
                                            "createdAt":  "2023-10-28T11:46:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Jonathan-hickey-cko",
                                            "createdAt":  "2023-10-31T18:47:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jfloodnet",
                                            "createdAt":  "2023-11-03T00:18:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Edgaras91",
                                            "createdAt":  "2023-11-08T16:31:14Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Edgaras91",
                                            "createdAt":  "2023-11-10T10:30:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rabadash8820",
                                            "createdAt":  "2023-11-10T19:39:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HofmeisterAn",
                                            "createdAt":  "2023-11-15T10:51:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CSymes",
                                            "createdAt":  "2023-11-28T06:11:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xin9le",
                                            "createdAt":  "2023-12-13T16:37:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mgernand",
                                            "createdAt":  "2024-02-23T17:01:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ulfkri",
                                            "createdAt":  "2024-03-09T12:34:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marcrocny",
                                            "createdAt":  "2024-03-11T04:59:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ascott18",
                                            "createdAt":  "2024-03-25T18:36:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SilverioMiranda",
                                            "createdAt":  "2024-04-18T03:16:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mushroomator",
                                            "createdAt":  "2024-06-25T22:30:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alwaqfi",
                                            "createdAt":  "2024-09-25T03:13:54Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Gregro",
                                            "createdAt":  "2024-10-06T15:34:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VitaliAntonov",
                                            "createdAt":  "2024-10-27T19:33:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Bartleby2718",
                                            "createdAt":  "2024-11-14T10:27:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "branislav91srb",
                                            "createdAt":  "2024-12-07T15:58:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Meir017",
                                            "createdAt":  "2025-01-21T05:40:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lucasoares",
                                            "createdAt":  "2025-03-06T18:30:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mirecad",
                                            "createdAt":  "2025-03-11T12:50:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "f1l1ph",
                                            "createdAt":  "2025-03-11T13:01:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aradalvand",
                                            "createdAt":  "2025-04-05T19:27:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2025-05-08T14:27:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "antoniofreire",
                                            "createdAt":  "2025-05-20T14:49:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "im-aIex",
                                            "createdAt":  "2025-06-11T15:07:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aetos382",
                                            "createdAt":  "2025-06-12T08:25:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MCKanpolat",
                                            "createdAt":  "2025-06-16T11:27:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ricardoboss",
                                            "createdAt":  "2025-08-06T20:20:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KuraiAndras",
                                            "createdAt":  "2025-08-11T13:31:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "m-gasser",
                                            "createdAt":  "2025-08-12T09:16:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mope-life",
                                            "createdAt":  "2025-09-08T02:22:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Illivion",
                                            "createdAt":  "2025-09-12T08:49:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "romfir",
                                            "createdAt":  "2025-09-17T14:08:27Z"
                                        }
                                    ],
                          "totalCount":  97
                      },
        "updatedAt":  "2025-08-06T07:04:26Z",
        "body":  "This might be a small or silly thing to ask about/for, but why isn\u0027t [`IConfigurationProvider.Load()`](https://github.com/aspnet/Extensions/blob/d656c4f7e22d1c0b84cab1b453c50ce73c89a071/src/Configuration/Config.Abstractions/src/IConfigurationProvider.cs#L38) async, returning a `Task`? Most configuration loading is going to be async, for example getting something from the filesystem or from the network. Now implementors are forced to use `GetAwaiter().GetResult()` in this method.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvDX_IA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NzgxMjEyNw==",
                                           "createdAt":  "2020-01-23T18:29:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "Honestly, it was probably just an oversight. You are correct that many providers do I/O. Most providers currently do this by doing the I/O synchronously.\r\n\r\nI\u0027ll put this in the backlog, but it\u0027s a fairly high-cost change since it would be extremely viral. It would mean adding `ConfigurationBuilder.BuildAsync`, which would again propagate up to the callers.",
                                           "updatedAt":  "2020-01-23T18:29:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTQ3NjMwOQ==",
                                           "createdAt":  "2020-05-07T20:20:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-05-07T20:20:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMjQzODU2MQ==",
                                           "createdAt":  "2020-10-01T22:55:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "@mariusGundersen thanks for the issue. The best next step on this would be to prepare the API proposal, usage, etc. in the issue page here (following https://github.com/dotnet/runtime/blob/master/docs/project/api-review-process.md).",
                                           "updatedAt":  "2020-10-01T22:56:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNjYxNzMyMA==",
                                           "createdAt":  "2021-03-25T12:08:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD-A71Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "branislav91srb",
                                                                               "createdAt":  "2024-12-07T15:57:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dkogithub",
                                           "body":  "Hi all, any progress on that? \r\nWe are working on our async application improvements and it would be super cool to have it async as well :)",
                                           "updatedAt":  "2021-03-25T12:08:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNzkyNDk4OA==",
                                           "createdAt":  "2021-03-26T04:21:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "@DkozhevnikovConfigit do you have some usage examples in mind to help shape the API? ",
                                           "updatedAt":  "2021-03-26T04:21:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODMzMTYwMw==",
                                           "createdAt":  "2021-03-26T15:59:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEUTO9g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Edgaras91",
                                                                               "createdAt":  "2023-11-14T15:56:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Vitazema",
                                                                               "createdAt":  "2024-05-14T12:55:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Seabizkit",
                                                                               "createdAt":  "2025-05-29T17:28:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "dkogithub",
                                           "body":  "@maryamariyan it\u0027s really simple example. \r\nWe are storing our configuration within the DB, so when we want to load it in async manner we call GetAwaiter().GerResult() in Load and TryGet methods.\r\n\r\n```\r\npublic class OurConfigurationProvider : ConfigurationProvider\r\n{\r\n    public override void Load()\r\n    {\r\n      Data = _db.GetConfigurationsAsync().GetAwaiter().GerResult();\r\n    }\r\n\r\n    public override bool TryGet(string key, out string value)\r\n    {\r\n      if (!Data.Contains(key))\r\n      {\r\n        var configuration = _db.GetConfigurationAsync(key).GetAwaiter().GerResult();\r\n        if (configuration != null)\r\n        {\r\n          Data[key] = configuration;\r\n        }\r\n      }\r\n        \r\n      value = Data[key];\r\n      return true;\r\n    }\r\n}\r\n```\r\nso it would be cool to do it async like:\r\n```\r\n    public class OurConfigurationProvider : ConfigurationProvider\r\n    {\r\n      public override async Task LoadAsync()\r\n      {\r\n        Data = await _db.GetConfigurationsAsync();\r\n      }\r\n\r\n      public override async Task\u003cstring\u003e GetAsync(string key)\r\n      {\r\n        if (!Data.ContainsKey(key))\r\n        {\r\n          var configuration = await _db.GetConfigurationAsync(key);\r\n          if (configuration != null)\r\n          {\r\n            Data[key] = configuration;\r\n          }\r\n          else\r\n          {\r\n            return null;\r\n          }\r\n        }\r\n        return Data[key];\r\n      }\r\n    }\r\n```",
                                           "updatedAt":  "2021-03-26T16:10:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40ksPM",
                                           "createdAt":  "2021-07-18T10:17:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENC8cA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "timstokman",
                                                                               "createdAt":  "2022-02-20T00:02:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mortalvombat",
                                                                               "createdAt":  "2022-02-22T16:03:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AdamCoulterOz",
                                                                               "createdAt":  "2022-02-24T08:57:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "isakengstrom",
                                                                               "createdAt":  "2022-02-27T15:09:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ZEXSM",
                                                                               "createdAt":  "2022-03-08T19:46:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "i4004",
                                                                               "createdAt":  "2022-05-29T15:27:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "oto313",
                                                                               "createdAt":  "2022-06-14T08:08:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BrandoCaserotti",
                                                                               "createdAt":  "2022-07-27T10:02:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "apoulet-olo",
                                                                               "createdAt":  "2022-08-17T21:57:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kellyrbourg",
                                                                               "createdAt":  "2022-10-16T05:44:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zew1me",
                                                                               "createdAt":  "2022-11-01T06:03:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KieranDevvs",
                                                                               "createdAt":  "2022-11-21T11:27:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "radverg",
                                                                               "createdAt":  "2022-12-30T10:14:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Edgaras91",
                                                                               "createdAt":  "2023-11-08T14:10:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-04-05T19:28:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  15
                                                         },
                                           "author":  "eduardgrinberg",
                                           "body":  "Hi, any update on this?\r\n\r\nWe are missing this option as well. We\u0027re loading configuraition from http endpoint and would be really nice if we could use async here.\r\n\r\nThanks",
                                           "updatedAt":  "2021-07-18T10:17:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BdDKv",
                                           "createdAt":  "2022-04-13T14:39:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbxX8g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KieranDevvs",
                                                                               "createdAt":  "2022-11-21T11:33:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "feffe81",
                                                                               "createdAt":  "2024-03-25T13:26:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "JasonBock",
                                           "body":  "FWIW I just ran into this with internal code at my employer. I also would like to see this have async APIs.",
                                           "updatedAt":  "2022-04-13T14:39:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Oyttl",
                                           "createdAt":  "2022-11-21T11:33:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KieranDevvs",
                                           "body":  "This really needs to be added. I\u0027m loading a large configuration from a database, its not nice having to force other async API\u0027s to run synchronously because the .NET has gaps where it doesn\u0027t support it.",
                                           "updatedAt":  "2022-12-02T11:17:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pi3Rc",
                                           "createdAt":  "2022-12-01T22:42:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLu4Pg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sergey-guk-dev",
                                                                               "createdAt":  "2023-03-17T12:54:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "quetzalcoatl",
                                                                               "createdAt":  "2023-08-24T16:15:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "UncleDave",
                                                                               "createdAt":  "2023-11-03T10:07:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "piekstra",
                                           "body":  "I\u0027ve just encountered this as well - we want to have our `appsettings.json` use paths to secrets in AWS Secrets Manager - with a custom `IConfigurationSource` and `ConfigurationProvider`, we are able to resolve those paths to actual secrets but should be able to do so asynchronously.",
                                           "updatedAt":  "2022-12-01T22:42:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Wn4Bs",
                                           "createdAt":  "2023-03-03T10:18:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dominikjeske",
                                           "body":  "I also vote for this.",
                                           "updatedAt":  "2023-03-03T10:18:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5X2FnU",
                                           "createdAt":  "2023-03-17T12:54:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sergey-guk-dev",
                                           "body":  "Yes, i\u0027m waiting for this feature as well",
                                           "updatedAt":  "2023-03-17T12:54:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YGIzX",
                                           "createdAt":  "2023-03-21T15:05:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "niyazz",
                                           "body":  "I agree with the comments above and also need that feature to get a configuration with a custom provider over HTTP calls.",
                                           "updatedAt":  "2023-03-21T15:05:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cnZLo",
                                           "createdAt":  "2023-05-19T00:13:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEUTPJA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Seabizkit",
                                                                               "createdAt":  "2025-05-29T17:28:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "f135ta",
                                           "body":  "At least this ticket has only been open for 3.5 yrs....... ",
                                           "updatedAt":  "2023-05-19T00:13:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cziLs",
                                           "createdAt":  "2023-05-22T11:02:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOERVuMA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stevo-knievo",
                                                                               "createdAt":  "2023-09-20T21:29:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-04-05T19:28:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2025-05-08T14:28:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "MCKanpolat",
                                           "body":  "I\u0027m using Vault for getting secrets via http so async implementation is very useful such this scenarios.",
                                           "updatedAt":  "2023-05-22T11:02:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fr4k5",
                                           "createdAt":  "2023-06-24T09:37:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODEse8w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "quetzalcoatl",
                                                                               "createdAt":  "2023-08-24T16:27:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dazinator",
                                           "body":  "I\u0027ve implemented an async adaptor over [here](https://github.com/dazinator/Dazinator.Extensions.Configuration/blob/master/src/Dazinator.Extensions.Configuration.Tests/Async/AsyncConfigurationProviderTests.cs#L55)\r\n\r\n\u003e I\u0027ll put this in the backlog, but it\u0027s a fairly high-cost change since it would be extremely viral. It would mean adding `ConfigurationBuilder.BuildAsync`, which would again propagate up to the callers.\r\n\r\nIt is possible to use an async provider without the virality, but you have to create an instance of the async provider first and call InitialiseAsync() on it to prefetch the initial values, prior to adding to ConfigurationBuilder. That way when ConfigurationBuilder.Build is called the provider can return its prefetched config synchronously. The other aspect is to write an async version of ChangeToken.OnChange -\u003e this allows the provider to handle change token reloads asynchronously.\r\n",
                                           "updatedAt":  "2023-06-30T12:23:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5nBiNw",
                                           "createdAt":  "2023-09-20T21:32:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stevo-knievo",
                                           "body":  "I have a similar scenario like @MCKanpolat. An `async` implementation would be really useful. Plus one for async!",
                                           "updatedAt":  "2023-09-20T21:32:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rnTbO",
                                           "createdAt":  "2023-11-10T10:25:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Edgaras91",
                                           "body":  "Does anyone know how I could safely fetch config asynchronously from `TryGet` override?\r\n```\r\n     public override bool TryGet(string key, out string value)\r\n      {\r\n          if (Data.ContainsKey(key))\r\n          {\r\n              //can\u0027t await? \r\n              FetchConfigAsync(key).RunSynchronously();\r\n          }\r\n\r\n          return base.TryGet(key, out value);\r\n      }\r\n```",
                                           "updatedAt":  "2023-11-10T10:25:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rqGoV",
                                           "createdAt":  "2023-11-10T18:16:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rabadash8820",
                                           "body":  "@Edgaras91 You should probably open a separate Issue or ask your question on a Q\u0026A site like StackOverflow. I\u0027m not really sure what you\u0027re trying to do. `FetchConfigAsync` is already async, so there\u0027s no need to wrap it in another async call, and your additional `Data.ContainsKey` validation isn\u0027t actually doing anything as written. All that said, if you just declare `TryGet` `async` then you can use `await`.",
                                           "updatedAt":  "2023-11-10T18:16:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rqemM",
                                           "createdAt":  "2023-11-10T19:13:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KieranDevvs",
                                           "body":  "\u003e @Edgaras91 You should probably open a separate Issue or ask your question on a Q\u0026A site like StackOverflow. I\u0027m not really sure what you\u0027re trying to do. `FetchConfigAsync` is already async, so there\u0027s no need to wrap it in another async call, and your additional `Data.ContainsKey` validation isn\u0027t actually doing anything as written. All that said, if you just declare `TryGet` `async` then you can use `await`.\r\n\r\nYou cant declare the overridden method as async because the return type would need to be `Task` or `Task\u003cT\u003e` which wouldn\u0027t match the virtual signature.",
                                           "updatedAt":  "2023-11-10T19:13:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rqgxV",
                                           "createdAt":  "2023-11-10T19:18:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rabadash8820",
                                           "body":  "\u003e You cant declare the overridden method as async because the return type would need to be Task or Task\u003cT\u003e which wouldn\u0027t match the virtual signature.\r\n\r\nGood point. In that case, something like the following could work:\r\n\r\n```cs\r\npublic override bool TryGet(string key, out string value)\r\n{\r\n    if (Data.ContainsKey(key))\r\n    {\r\n            value = FetchConfigAsync(key).Result;\r\n            return true;\r\n    }\r\n\r\n    return base.TryGet(key, out value);\r\n}\r\n```",
                                           "updatedAt":  "2023-11-10T19:18:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rqjbl",
                                           "createdAt":  "2023-11-10T19:23:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Edgaras91",
                                           "body":  "The point is to not use Task.Result or any other approach to \"call async in\r\nsync method\". Is there another workaround?\r\n\r\nOn Fri, 10 Nov 2023, 19:18 Dan Vicarel, ***@***.***\u003e wrote:\r\n\r\n\u003e You cant declare the overridden method as async because the return type\r\n\u003e would need to be Task or Task which wouldn\u0027t match the virtual signature.\r\n\u003e\r\n\u003e Good point. In that case, something like the following could work:\r\n\u003e\r\n\u003e public override bool TryGet(string key, out string value){\r\n\u003e     if (Data.ContainsKey(key))\r\n\u003e     {\r\n\u003e             value = FetchConfigAsync(key).Result;\r\n\u003e             return true;\r\n\u003e     }\r\n\u003e\r\n\u003e     return base.TryGet(key, out value);}\r\n\u003e\r\n\u003e —\r\n\u003e Reply to this email directly, view it on GitHub\r\n\u003e \u003chttps://github.com/dotnet/runtime/issues/36018#issuecomment-1806306389\u003e,\r\n\u003e or unsubscribe\r\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AHV6EK23SRQGPBVMIXEUUVTYDZ4Z7AVCNFSM4M3UEKQ2U5DIOJSWCZC7NNSXTN2JONZXKZKDN5WW2ZLOOQ5TCOBQGYZTANRTHA4Q\u003e\r\n\u003e .\r\n\u003e You are receiving this because you were mentioned.Message ID:\r\n\u003e ***@***.***\u003e\r\n\u003e\r\n",
                                           "updatedAt":  "2023-11-10T19:23:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rqlll",
                                           "createdAt":  "2023-11-10T19:32:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rabadash8820",
                                           "body":  "@Edgaras91 How would callers get the desired `value` then? You either have to synchronously wait on the `FetchConfigAsync` task or use some kind of callback (which is what async/await is essentially doing under the hood). A workaround would probably be to use aggregation instead of inheritance. Then, you wouldn\u0027t be constrained by the `TryGet` signature of your base class and could instead have one that returns `async Task\u003cbool\u003e`.\r\n\r\nBut again, we are de-railing this GitHub Issue. I encourage you to open a separate Issue or StackOverflow question or you can DM me. I will not be discussing it further here and I encourage others to do the same.",
                                           "updatedAt":  "2023-11-10T19:32:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rqm9F",
                                           "createdAt":  "2023-11-10T19:38:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQ8kKg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rabadash8820",
                                                                               "createdAt":  "2023-11-10T19:39:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cpr-steved",
                                                                               "createdAt":  "2024-03-29T19:44:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-04-05T19:29:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mr-pollet",
                                                                               "createdAt":  "2025-05-06T09:03:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "klemmchr",
                                           "body":  "What\u0027s the status of the issue? Almost every configuration provider is async in some way, so this would benefit a lot of providers. Even file providers should take advantage of an async provider.\r\n\r\nSynchronously waiting for a Task result might be fine in a lot of scenarios (like ASP.NET) but is not possible for Blazor apps. This is a huge drawback if you want to load any remote configuration. Loading remote configurations is extremely common in client side apps, it\u0027s almost a must have.",
                                           "updatedAt":  "2023-11-10T19:38:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rquvn",
                                           "createdAt":  "2023-11-10T20:02:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEDXWQQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rabadash8820",
                                                                               "createdAt":  "2023-11-10T20:11:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HofmeisterAn",
                                                                               "createdAt":  "2023-11-15T10:45:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "marcrocny",
                                                                               "createdAt":  "2024-03-11T05:19:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RogerDerekWeiss",
                                                                               "createdAt":  "2024-06-11T11:05:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "voroninp",
                                                                               "createdAt":  "2024-08-30T12:19:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Bartleby2718",
                                                                               "createdAt":  "2024-11-14T10:38:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dkogithub",
                                                                               "createdAt":  "2025-01-21T08:23:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "0xced",
                                           "body":  "There\u0027s already an API proposal for an async configuration provider: https://github.com/dotnet/runtime/issues/79193\n\nMaybe we could try to vote and comment over there to give it some momentum. 🤞",
                                           "updatedAt":  "2023-11-10T20:02:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bLpe1",
                                           "createdAt":  "2025-01-21T02:56:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhF0VA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rabadash8820",
                                                                               "createdAt":  "2025-01-21T03:07:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dkogithub",
                                                                               "createdAt":  "2025-01-21T08:23:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Edgaras91",
                                                                               "createdAt":  "2025-01-21T09:34:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2025-01-21T13:37:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cmxl",
                                                                               "createdAt":  "2025-01-23T12:57:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "actionthomas",
                                                                               "createdAt":  "2025-02-06T12:02:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mreuterDyconTech",
                                                                               "createdAt":  "2025-02-17T15:51:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roald373",
                                                                               "createdAt":  "2025-02-20T14:41:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SilverioMiranda",
                                                                               "createdAt":  "2025-02-25T23:27:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lucasoares",
                                                                               "createdAt":  "2025-03-06T18:30:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PavelMaskevichFromFlynn",
                                                                               "createdAt":  "2025-03-10T14:44:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-04-05T19:29:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "klemmchr",
                                                                               "createdAt":  "2025-04-06T20:28:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2025-05-08T14:28:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antoniofreire",
                                                                               "createdAt":  "2025-05-20T14:50:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "thegreatco",
                                                                               "createdAt":  "2025-05-29T12:55:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Seabizkit",
                                                                               "createdAt":  "2025-05-29T17:29:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JasonBock",
                                                                               "createdAt":  "2025-05-29T17:56:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Usergitbit",
                                                                               "createdAt":  "2025-06-27T01:28:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sklei",
                                                                               "createdAt":  "2025-07-03T13:05:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tom-wolfe",
                                                                               "createdAt":  "2025-07-31T11:19:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sergey-guk-dev",
                                                                               "createdAt":  "2025-08-06T07:17:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "angusbreno",
                                                                               "createdAt":  "2025-09-05T17:01:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  23
                                                         },
                                           "author":  "robertmclaws",
                                           "body":  "@davidfowl Any chance we could make this Async in .NET 10? Both Azure App Settings and AWS Parameter Store ConfigProviders would benefit immensely from this fix.",
                                           "updatedAt":  "2025-01-21T02:56:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lw4Yv",
                                           "createdAt":  "2025-04-05T19:29:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdV52g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Rabadash8820",
                                                                               "createdAt":  "2025-05-29T17:57:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "cfbao",
                                                                               "createdAt":  "2025-05-29T18:56:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tom-wolfe",
                                                                               "createdAt":  "2025-07-31T11:19:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2025-08-06T16:34:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "aradalvand",
                                           "body":  "Yet another ping; configuration loading is almost invariably IO-based. Not having an async `Load` method makes no sense.",
                                           "updatedAt":  "2025-04-05T19:29:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uDQC4",
                                           "createdAt":  "2025-05-29T17:29:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdV5zw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Rabadash8820",
                                                                               "createdAt":  "2025-05-29T17:57:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "cfbao",
                                                                               "createdAt":  "2025-05-29T18:56:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tom-wolfe",
                                                                               "createdAt":  "2025-07-31T11:19:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2025-08-06T16:34:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "Seabizkit",
                                           "body":  "ping",
                                           "updatedAt":  "2025-05-29T17:29:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68Nf8g",
                                           "createdAt":  "2025-08-06T07:04:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdV56Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Rabadash8820",
                                                                               "createdAt":  "2025-08-06T07:34:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2025-08-06T16:34:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "lumimario",
                                           "body":  "ping",
                                           "updatedAt":  "2025-08-06T07:04:26Z"
                                       }
                                   ],
                         "totalCount":  29
                     },
        "title":  "Why doesn\u0027t IConfigurationProvider have an async Load method?",
        "labels":  [
                       "api-suggestion",
                       "feature-request",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36016",
        "createdAt":  "2019-12-05T21:31:07Z",
        "number":  36016,
        "author":  null,
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7SMXg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "chenxinyanc",
                                            "createdAt":  "2023-02-02T17:08:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "huskeynAT",
                                            "createdAt":  "2024-09-24T20:34:43Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2021-07-22T15:26:19Z",
        "body":  "### Describe the bug\r\nWhile converting from JSON configuration files to XML configuration files, I discovered that when the library is allowed to create a `Dictionary\u003cTKey, TValue\u003e` object for a POCO property, it will create one with case sensative keys.  If you explicity set the dictionary property in your POCO to a dictionary that is case insensative, it will use that dictionary and work correctly.\r\n\r\n### To Reproduce\r\n1. Create a configuration system where one property in your POCO is a `Dictionary\u003cstring, TValue\u003e`.\r\n2. In your configuration file create entries with lowercase only keys.\r\n3. In your code that uses the built POCO (i.e. IConfiguration.Get\\\u003cPOCO\\\u003e()), attempt to access any of the objects from the dictionary using an uppercase only key. (fails)\r\n4. Initialize your POCO property with an empty dictionary that is case insensative (i.e. new Dictionary\u003cstring, string\u003e(StringComparer.OrdinalIgnoreCase);)\r\n5. Repeat step 3. (works)\r\n\r\n### Expected behavior\r\nSince the keys in the configuration are case insensative, they should also be case insensative in the dictionary created.  Step 4 (above) is currently a work-around that works.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJUf-CA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTQ3NTA4MA==",
                                           "createdAt":  "2020-05-07T20:17:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eiriktsarpalis\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-05-07T20:17:48Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "IConfiguration binding to Dictionary\u003ckey,value\u003e uses a case sensative key by default",
        "labels":  [
                       "bug",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36056",
        "createdAt":  "2020-02-12T12:13:28Z",
        "number":  36056,
        "author":  "jez9999",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-22T20:58:29Z",
        "body":  "I\u0027ve been trying to add my own XML config using the following:\r\n\r\n```c#\r\nHost.CreateDefaultBuilder(args)\r\n    .ConfigureWebHostDefaults(webBuilder =\u003e {\r\n        webBuilder\r\n            .ConfigureAppConfiguration(builder =\u003e builder.AddXmlFile(\"appsettings.xml\"))\r\n```\r\n\r\nHowever, the wrong appsettings.xml was being read.  I transform my XML file at build time with SlowCheetah, and the transformed version gets copied into the bin\\Debug directory.  After a bit of a hunt, I came across the following line that was setting the base path to the .csproj directory instead:\r\n\r\nhttps://github.com/dotnet/extensions/blob/d656c4f7e22d1c0b84cab1b453c50ce73c89a071/src/Hosting/Hosting/src/HostBuilder.cs#L191\r\n\r\nApparently this didn\u0027t used to happen, and it was inserted because of this bug:\r\n\r\nhttps://github.com/dotnet/extensions/issues/955\r\n\r\nI don\u0027t understand why this was added, it seems wrong to me.  You\u0027re setting the root path for *config* to the *content* base path.  Why should config stuff be at the content base path instead of the base directory of the app context?  The default config files appsettings.json, appsettings.Development.json, etc. get copied over to the output bin directory (along with any transforms that may have been performed), so this would seem to be the correct place for config files to be loaded from.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJUjiGQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTUzMzQ2NQ==",
                                           "createdAt":  "2020-05-07T22:42:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-05-07T22:42:34Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Config shouldn\u0027t be at content root path",
        "labels":  [
                       "bug",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36042",
        "createdAt":  "2020-03-03T17:54:15Z",
        "number":  36042,
        "author":  "shaynevanasperen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-10-04T08:55:29Z",
        "body":  "### Describe the bug\r\nHeavy parallelism of `ConfigurationProvider.OnReload()` combined with building new configuration utilising `ChainedConfigurationSource`, results in exceptions being thrown from `ChangeToken.OnChange` with message `Somebody else set the _disposable field`.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Using version \u0027**3.1.2**\u0027 of package \u0027**Microsoft.Extensions.Configuration**\u0027\r\n2. Run this code:\r\n\r\n```cs\r\nprivate class DummyConfigurationProvider : ConfigurationProvider\r\n{\r\n\tpublic void TriggerReload() =\u003e OnReload();\r\n}\r\n\r\n[Fact]\r\npublic void ChainedConfigurationSupportsHeavyParallelism()\r\n{\r\n\tvar dummyProvider = new DummyConfigurationProvider();\r\n\tvar providers = new IConfigurationProvider[] { dummyProvider };\r\n\r\n\tusing var configuration = new ConfigurationRoot(providers);\r\n\r\n\tconst int loopCount = 100000;\r\n\tvar result = Parallel.For(1, loopCount + 1, x =\u003e\r\n\t{\r\n\t\tdummyProvider.TriggerReload();\r\n\t\t// ReSharper disable once AccessToDisposedClosure\r\n\t\tnew ConfigurationBuilder()\r\n\t\t\t.AddConfiguration(configuration)\r\n\t\t\t.AddInMemoryCollection(new Dictionary\u003cstring, string\u003e\r\n\t\t\t{\r\n\t\t\t\t{ \"foo\", \"bar\" }\r\n\t\t\t})\r\n\t\t\t.Build();\r\n\t});\r\n\tresult.IsCompleted.Should().BeTrue();\r\n}\r\n```\r\n\r\n3. Run this test repeatedly in a test runner to see that it fails within a few seconds\r\n4. See error:\r\n```\r\n\r\nSystem.AggregateException : One or more errors occurred. (Somebody else set the _disposable field)\r\n---- System.InvalidOperationException : Somebody else set the _disposable field\r\n   at System.Threading.Tasks.TaskReplicator.Run[TState](ReplicatableUserAction`1 action, ParallelOptions options, Boolean stopOnFirstFailure)\r\n   at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw(Exception source)\r\n   at System.Threading.Tasks.Parallel.ThrowSingleCancellationExceptionOrOtherException(ICollection exceptions, CancellationToken cancelToken, Exception otherException)\r\n   at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n   at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, Action`1 body)\r\n   at JustEat.Extensions.Configuration.Tests.Layered.ConfigurationExtensionsTests.ChainedConfigurationSupportsHeavyParallelism() in C:\\...\\ConfigurationExtensionsTests.cs:line 130\r\n----- Inner Stack Trace -----\r\n   at Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration`1.SetDisposable(IDisposable disposable)\r\n   at Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration`1.RegisterChangeTokenCallback(IChangeToken token)\r\n   at Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration`1..ctor(Func`1 changeTokenProducer, Action`1 changeTokenConsumer, TState state)\r\n   at Microsoft.Extensions.Primitives.ChangeToken.OnChange(Func`1 changeTokenProducer, Action changeTokenConsumer)\r\n   at Microsoft.Extensions.Configuration.ConfigurationRoot..ctor(IList`1 providers)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBuilder.Build()\r\n   at JustEat.Extensions.Configuration.Tests.Layered.ConfigurationExtensionsTests.\u003c\u003ec__DisplayClass7_0.\u003cChainedConfigurationSupportsHeavyParallelism\u003eb__0(Int32 x) in C:\\...\\ConfigurationExtensionsTests.cs:line 134\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`1.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int32 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw(Exception source)\r\n   at System.Threading.Tasks.Parallel.\u003c\u003ec__DisplayClass19_0`1.\u003cForWorker\u003eb__1(RangeWorker\u0026 currentWorker, Int32 timeout, Boolean\u0026 replicationDelegateYieldedBeforeCompletion)\r\n   at System.Threading.Tasks.TaskReplicator.Replica`1.ExecuteAction(Boolean\u0026 yieldedBeforeCompletion)\r\n   at System.Threading.Tasks.TaskReplicator.Replica.Execute()\r\n\r\n\r\n```\r\n\r\n### Expected behavior\r\nNo exceptions should be thrown.\r\n\r\n### Screenshots\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n### Additional context\r\nAdd any other context about the problem here.\r\nInclude the output of `dotnet --info`\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.102\r\n Commit:    573d158fea\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.102\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.2\r\n  Commit:  916b5cba26\r\n\r\n.NET Core SDKs installed:\r\n  3.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHON6C-YQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NjM3MzkwOQ==",
                                           "createdAt":  "2020-03-09T07:38:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "What scenario would you have a configuration provider that outlives the lifetime of the builder?",
                                           "updatedAt":  "2020-03-09T07:38:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NjYzODE4Mw==",
                                           "createdAt":  "2020-03-09T16:34:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shaynevanasperen",
                                           "body":  "@davidfowl \r\n\u003e What scenario would you have a configuration provider that outlives the lifetime of the builder?\r\n\r\nconfiguration providers always outlive the lifetime of the builder. They stay referenced by `ConfigurationRoot`. The sample code above is contrived just to show the problem. \r\n\r\nI\u0027ve subsequently found that the issue I was experiencing may not actually have been due to that exact contrived situation. But it does happen when I have a web API that repeatedly builds new \"views\" of configuration based on the current `ConfigurationRoot`. When it does this with heavy parallelism, and one of the providers simultaneously self-updates (one based on [this](https://github.com/wintoncode/Winton.Extensions.Configuration.Consul)), then I get an exception with a very similar call stack to that above. I don\u0027t see why that should ever happen.",
                                           "updatedAt":  "2020-03-09T16:34:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NjY0MDI5NA==",
                                           "createdAt":  "2020-03-09T16:38:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I\u0027m not saying it isn\u0027t a bug I just wanted to understand the usage. Seems odd to build a new configuration per request. Can you show the actual usage?",
                                           "updatedAt":  "2020-03-09T16:38:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NjY1MzkyNw==",
                                           "createdAt":  "2020-03-09T17:02:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shaynevanasperen",
                                           "body":  "@davidfowl \r\n\u003eSeems odd to build a new configuration per request. Can you show the actual usage?\r\n\r\nI have a concept of a \"tenant\" that can be different on each request (determined via request header, host or path). Some values of the configuration are required to be different or \"overridden\" for different tenants. So that we can still support standard options binding (like via injecting `IOptionsSnapshot\u003cT\u003e` into a controller), we have some infrastructure code that looks at the tenant in the incoming request and then \"transforms\" the \"main\" `ConfigurationRoot` object to a new one that has an additional provider added, which has the overridden tenant-specific values.\r\n\r\nIn `Startup.cs`:\r\n```cs\r\nservices.AddOptions\u003cSample\u003e().ConfigureTenanted();\r\n```\r\nIn library code:\r\n```cs\r\npublic static OptionsBuilder\u003cTOptions\u003e ConfigureTenanted\u003cTOptions\u003e(this OptionsBuilder\u003cTOptions\u003e builder,\r\n\tstring section = \"layers\") where TOptions : class\r\n{\r\n  return builder.Configure\u003cIConfiguration, ITenantAccessor\u003e((options, configuration, accessor) =\u003e\r\n  {\r\n    if (accessor.TryGetTenant(out var tenant))\r\n      configuration.ForTenant(tenant, section).Bind(options);\r\n    else\r\n      configuration.Bind(options);\r\n  });\r\n}\r\n```\r\nElsewhere in library code:\r\n```cs\r\npublic static IConfiguration ForTenant(this IConfiguration configuration,\r\n    string tenant,\r\n    string section = \"layers\")\r\n{\r\n  var cache = Caches.GetOrAdd(configuration, x =\u003e new MemoryCache(Options.Options.Create(TenantSpecificConfigurationSettings.CacheOptions)));\r\n  return cache.GetOrCreate($\"{section}|{tenant}\", entry =\u003e\r\n  {\r\n    var flattenedData = configuration\r\n\t  .GetSection(section)\r\n\t  .FlattenLayeredData(tenant); // defined elsewhere\r\n\r\n    entry.AbsoluteExpirationRelativeToNow = TenantSpecificConfigurationSettings.AbsoluteExpiration;\r\n    entry.ExpirationTokens.Add(configuration.GetReloadToken());\r\n\r\n    return new ConfigurationBuilder()\r\n\t  .AddConfiguration(configuration)\r\n\t  .AddInMemoryCollection(flattenedData)\r\n\t  .Build();\r\n  });\r\n}\r\n```\r\nIn appsettings.json:\r\n```js\r\n\"Foo\": \"foo-value\",\r\n\"Bar\": \"bar-value\",\r\n\"layers\": \r\n  \"tenants\": {\r\n    \"no\": {\r\n      \"Foo\": \"foo-value|no\",\r\n      \"Bar\": \"bar-value|no\"\r\n    },\r\n    \"it\": {\r\n      \"Foo\": \"foo-value|it\",\r\n      \"Bar\": \"bar-value|it\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAs you can see, I\u0027ve added some caching around it, which alleviates the problem, but doesn\u0027t completely guarantee it won\u0027t happen.",
                                           "updatedAt":  "2020-03-09T20:04:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTUyNTQxMQ==",
                                           "createdAt":  "2020-05-07T22:18:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-05-07T22:18:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43oL5h",
                                           "createdAt":  "2021-10-04T08:55:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCk1Wfw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "shaynevanasperen",
                                                                               "createdAt":  "2021-10-04T12:59:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "karshinlin",
                                                                               "createdAt":  "2022-07-01T19:05:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Alamaster99",
                                           "body":  "Any updated on this issue? We are using version 5.0.0 of the Microsoft.Extensions.Configuration library and we have run into almost exactly same issue. InvalidOperationException: Somebody else set the _disposable field when using per tenant configuration.",
                                           "updatedAt":  "2021-10-04T08:55:29Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Building chained configuration throws InvalidOperationException",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/35578",
        "createdAt":  "2020-04-28T18:11:43Z",
        "number":  35578,
        "author":  "markm77",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-03T05:43:32Z",
        "body":  "[Possible label: area-Extensions-Configuration]\r\n\r\nCurrently in ASP.NET Core apps we can use local secrets created in a secrets.json for local dev. But PowerShell is currently previewing a cross-platform Secrets Management feature which will allow creating local secrets in CredMan (Windows), keychain (macOS) and keyring (Linux). Remote secrets can also be created with the same interface allowing creation of scripts that work in either situation.\r\n\r\nSee https://devblogs.microsoft.com/powershell/secret-management-preview-2-release/.\r\n\r\nWould be great if we could easily use such local secrets as an alternative to secrets.json secrets for local development purposes. I believe this would require updating AddUserSecrets (https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.usersecretsconfigurationextensions.addusersecrets?view=dotnet-plat-ext-3.1) to retrieve PowerShell Secrets Management local secrets as an alternative to secrets.json local secrets??\r\n\r\nPosting here since my original post was re-directed here: https://github.com/dotnet/aspnetcore/issues/21287",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpWBQPw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMDc3MDY0Nw==",
                                           "createdAt":  "2020-04-28T18:11:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-04-28T18:11:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMDc3MTM5Mw==",
                                           "createdAt":  "2020-04-28T18:13:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markm77",
                                           "body":  "Just to be clear that this request is for a way to access PowerShell local secrets in C#. The secrets can be created and managed in PowerShell but currently there is no way to access them in C#. It is not a request for any command line functionality.",
                                           "updatedAt":  "2020-04-28T18:13:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMDc4MjkwMg==",
                                           "createdAt":  "2020-04-28T18:34:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markm77",
                                           "body":  "\u003e I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).\r\n\r\narea-Extensions-Configuration",
                                           "updatedAt":  "2020-04-28T18:34:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNDEwMDk4NQ==",
                                           "createdAt":  "2020-05-05T14:49:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markm77",
                                           "body":  "Hi @maryamariyan, can you possibly add the suggested label if correct?? BR, Mark\r\n\r\n\r\n",
                                           "updatedAt":  "2020-05-05T14:49:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjI0MjM3OA==",
                                           "createdAt":  "2020-05-09T22:15:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markm77",
                                           "body":  "Thanks @jeffschwMSFT for adding the label.",
                                           "updatedAt":  "2020-05-09T22:15:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NjMyNzU4NQ==",
                                           "createdAt":  "2020-06-18T22:01:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Would it make sense for powershell to implement a Configuration provider that exposes their Secrets Management feature?\r\n\r\nTypically we don\u0027t take dependency on non-platform API from dotnet/runtime, but we have cases in Microsoft.Extensions where we\u0027ve helped other technology providers (Azure, Sql, etc) implement the extensions interfaces.  @SteveL-MSFT is this something you\u0027d consider exposing in powershell packages?",
                                           "updatedAt":  "2020-06-18T22:01:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMjQyODk1OA==",
                                           "createdAt":  "2020-10-01T22:24:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "friendly ping @SteveL-MSFT is this something you guys could consider? (referring to https://github.com/dotnet/runtime/issues/35578#issuecomment-646327585)",
                                           "updatedAt":  "2020-10-01T22:24:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lYFA_",
                                           "createdAt":  "2025-04-03T05:43:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I\u0027d still appreciate this kind of feature, but I think it should be a separate package rather than part of Microsoft.Extensions.Configuration.UserSecrets.",
                                           "updatedAt":  "2025-04-03T05:43:20Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Get local secrets created by PowerShell Secrets Management in C# as alternative to secrets.json secrets",
        "labels":  [
                       "discussion",
                       "feature-request",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/42035",
        "createdAt":  "2020-06-24T13:02:30Z",
        "number":  42035,
        "author":  "armandjnbg",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-11T14:15:43Z",
        "body":  "Hello everybody,\r\n\r\nI defined the following configuration option class for use with Options pattern:\r\n```c#\r\npublic class RouteOptions\r\n{\r\n   public string Name { get; set; }\r\n   public string Local { get; set; }\r\n   public string Remote { get; set; }\r\n   public string HttpClientName { get; set; }\r\n   . . .\r\n   public IConfiguration Extra { get; set; }\r\n}\r\n```\r\nThe \"Extra\" field by my design would include various extra settings that will be accessed by business logic located outside of my code, e.g. plugins written by other developers. I was expecting this to work, but to my surprise, this property is never assigned.\r\n\r\nProbably it is very easy to bind this field it does not require any conversion, just assign GetSection(\"propertyName\") to the property.\r\n\r\nIs it possible to introduce this functionality?\r\n\r\nI think it is essential.\r\n\r\nWith best regards,\r\nArman",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORLhmHQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4OTgxMDcxNA==",
                                           "createdAt":  "2020-09-09T20:42:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-09-09T20:42:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4OTg5Nzc0MQ==",
                                           "createdAt":  "2020-09-10T00:34:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-10T00:34:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MDEyNDgwNQ==",
                                           "createdAt":  "2020-09-10T09:56:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pinkfloydx33",
                                           "body":  "You can register an `I[Post]ConfigureOptions` implementation that assigns to your property:\r\n\r\n```csharp\r\npublic class ConfigureRouteOptions : IConfigureOptions\u003cRouteOptions\u003e, IPostConfigureOptions\u003cRouteOptions\u003e\r\n{\r\n   private readonly IConfiguration _config;\r\n   public ConfigureRouteOptions(IConfiguration config)\r\n      =\u003e _config = config.GetSection(\"Whatever\"); // 4\r\n\r\n   public void Configure(RouteOptions opts) // 1\r\n   {\r\n         _config.Bind(opts); // 3\r\n         opts.Extra = _config.GetSection(\"Extra\"); \r\n   }\r\n\r\n  public void PostConfigure(string name, RouteOptions opts) // 2\r\n  {\r\n        if(opts.Extra is null) \r\n           opts.Extra = _config.GetSection(\"Extra\");\r\n  } \r\n}\r\n```\r\n\r\nYou can either user `IConfigureOptions` (1) *or* `IPostConfigureOptions` (2)--or technically both. You register this with the service collections as:\r\n\r\n```csharp\r\nservices.ConfigureOptions\u003cConfigureRouteOptions\u003e();\r\n```\r\n\r\nIf you\u0027ve already bound your configuration (via a call to `Configure\u003cRouteOptions\u003e`) then binding the \"main\" properties manually (3) wouldn\u0027t be necessary. In fact you\u0027d probably need to guard properly against that case to be sure you don\u0027t discard any prior configuration. All `IConfigureOptions` run first, followed by all `IPostConfigureOptions`--so just something to keep in mind. I\u0027d probably select the Post-Configure version myself. \r\n\r\nThe only downside here is that your root section name (4) is hard-coded. That may not be a problem, but if it is you can provide the configurator with *its own* options class. Something like:\r\n\r\n```csharp\r\npublic class ConfiguratorOpts\r\n{\r\n   public string RootSection { get; set; } = \"DefaultValue\";\r\n}\r\n\r\npublic class ConfigureRouteOptions : IConfigureOptions\u003cRouteOptions\u003e, IPostConfigureOptions\u003cRouteOptions\u003e\r\n{\r\n   private readonly IConfiguration _config;\r\n   public ConfigureRouteOptions(IConfiguration config, IOptions\u003cConfiguratorOpts\u003e opts /* 5 */)\r\n      =\u003e _config = config.GetSection(opts.Value.RootSection); // 4\r\n\r\n   public void Configure(RouteOptions opts) // 1\r\n   {\r\n         _config.Bind(opts); // 3\r\n         opts.Extra = _config.GetSection(\"Extra\"); \r\n   }\r\n\r\n  public void PostConfigure(string name, RouteOptions opts) // 2\r\n  {\r\n        if(opts.Extra is null) \r\n           opts.Extra = _config.GetSection(\"Extra\");\r\n  } \r\n}\r\n```\r\nThe section name can then be read from your configuration (5)--or the default value. You\u0027d register it using:\r\n\r\n```csharp\r\nservices.Configure\u003cConfiguratorOpts\u003e(o =\u003e o.RootSection = \"SomethingElse\");\r\nservices.ConfigureOptions\u003cConfigureRouteOptions\u003e();\r\n```\r\n\r\nWhile it\u0027s not built-in and automatic, it\u0027s definitely a way to achieve what you are looking to accomplish. ",
                                           "updatedAt":  "2020-09-10T09:56:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MTk3ODc2OA==",
                                           "createdAt":  "2020-09-14T10:57:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "armandjnbg",
                                           "body":  "Thanks, \r\n\r\nYour solution is applicable in my case, but my case is a bit more complex because RouteOptions include inner RouteOptions.\r\nPlus RootOptions themself reside inside of another configuration element RouteMap. So it a tree-like structure in the config. So I don\u0027t have a section name for reading each of that RouteOption representation in the configuration.\r\n\r\n        public class RouteOptions\r\n\t{\r\n\t\tpublic string Name { get; set; }\r\n\t\tpublic string Local { get; set; }\r\n\t\tpublic string Remote { get; set; }\r\n\t\tpublic string HttpClientName { get; set; }\r\n\r\n\t\tpublic bool Validate { get; set; } = true;\r\n\t\tpublic bool Audit { get; set; } = true;\r\n\r\n\t\tpublic ClaimValidationOptions[] Claims { get; set; }\r\n\r\n\t\tIConfigurationSection Extra { get; set; }\r\n\r\n                // inner elements here\r\n\t\tpublic List\u003cRouteOptions\u003e Inner { get; set; }\r\n\t}\r\n\r\nI will write a custom code for reading this tree from the configuration, based on recursive call to IPostConfigureOptions probably.\r\n\r\nBut I was thinking that it would be good to include out of the box IConfigurationSection binding somewhere in the next versions of .NET Core, this doesn\u0027t seem like require significant changes to the existing code of configuration binder.\r\n\r\nSo I guess this is a feature request. :-)\r\n\r\nWith best regards,\r\nArman\r\n",
                                           "updatedAt":  "2020-09-14T10:57:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EuGYd",
                                           "createdAt":  "2022-06-11T14:15:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e it would be good to include out of the box IConfigurationSection binding somewhere in the next versions of .NET Core\r\n\r\nIConfigurationSection binding works in .NET 6.0 already, although IConfiguration binding doesn\u0027t:\r\n\r\n```C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nIConfiguration configuration = new ConfigurationBuilder()\r\n    .AddInMemoryCollection(\r\n        new KeyValuePair\u003cstring, string\u003e[]\r\n        {\r\n            new KeyValuePair\u003cstring, string\u003e(\"Name\", \"Kaur\"),\r\n            new KeyValuePair\u003cstring, string\u003e(\"Extra:hello\", \"world\"),\r\n        })\r\n     .Build();\r\nvar routeOptions = configuration.Get\u003cRouteOptions\u003e();\r\n\r\nConsole.WriteLine(routeOptions.Name);\r\nConsole.WriteLine(routeOptions.Extra[\"hello\"]);\r\n\r\npublic class RouteOptions\r\n{\r\n   public string Name { get; set; }\r\n   public string Local { get; set; }\r\n   public string Remote { get; set; }\r\n   public string HttpClientName { get; set; }\r\n   public IConfigurationSection Extra { get; set; }\r\n}\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nKaur\r\nworld\r\n```\r\n\r\nImplemented here: \u003chttps://github.com/dotnet/runtime/blob/4822e3c3aa77eb82b2fb33c9321f923cf11ddde6/src/libraries/Microsoft.Extensions.Configuration.Binder/src/ConfigurationBinder.cs#L344-L348\u003e\r\n\r\nIt originally came from \u003chttps://github.com/aspnet/Configuration/commit/3480095916a8937748137a74c9db0377590446b0\u003e.",
                                           "updatedAt":  "2022-06-11T14:15:43Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "IConfiguration type binding for properties in Options pattern.",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38536",
        "createdAt":  "2020-06-29T11:11:40Z",
        "number":  38536,
        "author":  "fredrikhr",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCYOW3A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aayjaychan",
                                            "createdAt":  "2022-04-15T05:43:37Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-07-29T22:42:49Z",
        "body":  "## Background and Motivation\r\n\r\n\u003c!--\r\nWe welcome API proposals! We have a process to evaluate the value and shape of new API. There is an overview of our process [here](https://github.com/dotnet/runtime/blob/master/docs/project/api-review-process.md). This template will help us gather the information we need to start the review process.\r\nFirst, please describe the purpose and value of the new API here.\r\n--\u003e\r\n\r\nIt is common for Configuration providers (such as `Microsoft.Extensions.Configuration.Json`) to provide extension methods that add configuration sources to a `IConfigurationBuilder`.\r\n\r\nThe .NET Generic Host utility method `Host.CreateDefaultBuilder` also adds configuration sources as part of the Generic Host infrastructure. However, there are cases where you\u0027d like to keep all the defaults but add your own configuration sources **in front** of the defaults, for example by adding constant in-memory configurations or assembly-embedded configuration sources.\r\n\r\nIn order to avoid that all configuration source providers need to implement this functionality themselves, the new API should try to cope with the existing API structure.\r\n\r\n## Proposed API\r\n\r\n``` cs\r\n#nullable enable\r\nusing System;\r\n\r\nnamespace Microsoft.Extensions.Configuration\r\n{\r\n    // Existing extension holder class\r\n    public static partial class ConfigurationExtensions\r\n    {\r\n        // NEW proposed API\r\n        public static IConfigurationBuilder Insert(\r\n            this IConfigurationBuilder configBuilder, int index,\r\n            Action\u003cIConfigurationBuilder\u003e? configAction) =\u003e null!;\r\n    }\r\n}\r\n```\r\n\r\nPropsed API would be added to the `Microsoft.Extensions.Configuration.Abstractions` package.\r\n\r\n## Usage Examples\r\n\r\nThe following example shows the usage of the `Insert` method inside the `ConfigureAppConfiguration` method of the .NET Generic Host.\r\n\r\nThe example configures the configuration value `SampleAppSetting` coming from a static in-memory source. The `Host.CreateDefaultBuilder` adds additional configuration sources (like Command-line, Environment variables, `appsettings.json`, etc.). These additional sources would now all be able to override the static value `ConstantValue` defined here.\r\n\r\n``` cs\r\nusing System.Collections.Generic;\r\nusing System.Threading.Tasks;\r\n\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace Sample\r\n{\r\n    public static class Program\r\n    {\r\n        public static Task Main(string[] args)\r\n        {\r\n            return Host.CreateDefaultBuilder(args)\r\n                .ConfigureAppConfiguration(config =\u003e\r\n                {\r\n                    // Insert at 1, because host-configuration is placed at 0.\r\n                    config.Insert(1, c =\u003e\r\n                    {\r\n                        c.AddInMemoryCollection(new Dictionary\u003cstring, string\u003e\r\n                        {\r\n                            [\"SampleAppSetting\"] = \"ConstantValue\",\r\n                        });\r\n                    });\r\n                })\r\n                .RunConsoleAsync();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIf `Insert` was not used here, and `AddInMemoryCollection` was used directly, the in-memory collection would be added last, as thus be the defining source for the configuration value.\r\n\r\n## Why a callback parameter?\r\n\r\nThe existing implementors for Configuration infrastructure usually implement their functionality by providing extension methods that all somehow end up calling `Add` on the `IConfigurationBuilder`. Examples of these are:\r\n\r\n- `AddInMemoryCollection`\r\n- `AddJsonFile`\r\n- `AddIniFile`\r\n- ...\r\n\r\nWhile we also could add an `Insert` method that better matches the signature of `Add` there would be less value in doing so, since that would force all extensions to now also provide Insert extension methods for that to be useful.\r\n\r\nInstead this proposal takes a callback instead, in which the user is expected to `Add` configuration sources (either by calling `Add` directly [uncommon], or by calling the one or multiple of the `Add`-extension methods listed above.\r\n\r\nAn implementation of the proposal would simply capture the count before invoking the callback, and then subsequently move all newly added configuration sources to the desired index.\r\n\r\n## Risks\r\n\r\n**None**\r\n\r\nThe proposed method will mutate the list of Configuration sources using API surface that is already publicly available.\r\n\r\n~Using the `Insert` method could potentially break configuration providers that rely on a specific ordering of configuration sources. It would be the callers responsibility to ensure that configurations sources are added with a sensible value for the `index` parameter.~\r\n\r\n~For example, one configuration provider (`provider-a`) could implement an `Add`-extension method that adds two configuration sources to the builder consecutively. Ad subsequent call to insert could insert itself between those two configuration source, potentially breaking the implementation of `provider-a` that relies on its two sources to directly follow each other in the list of sources. Such an example should be a very rare occurence, and in such cases the implementation of `provider-a` is non-ideal.~",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM6cL_g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MTA0NDk3OQ==",
                                           "createdAt":  "2020-06-29T11:11:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-06-29T11:11:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNzQxNTUzMA==",
                                           "createdAt":  "2020-10-27T17:49:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Thanks @fredrikhr. Before moving ahead with this API proposal I think we would need to explore the risks it would introduce on each of the different configuration providers in Microsoft.Extensions.Configuration.*.",
                                           "updatedAt":  "2020-10-27T17:52:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNzQyMTA5Mg==",
                                           "createdAt":  "2020-10-27T17:59:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "[Video](https://www.youtube.com/watch?v=viYdlWGUiro\u0026t=0h50m15s)\n\n@maryamariyan request to table this for now so that they can think through the potential breaking changes first.",
                                           "updatedAt":  "2020-10-27T19:09:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MzI5ODY5Nw==",
                                           "createdAt":  "2021-06-17T14:40:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "menees",
                                           "body":  "I came across this issue while looking for an API to insert a new configuration source in front of the defaults. Ultimately, I just added a new source and used the mutable list returned by `IConfigurationBuilder.Sources` to move the last item to be first:\r\n\r\n``` C#\r\n// Inside ConfigureAppConfiguration:\r\nbyte[] jsonBytes = EmbeddedFile.ReadAllBytes\u003cStartup\u003e(\"appsettings.Embedded.json\");\r\nconfig.AddJsonStream(new MemoryStream(jsonBytes)); // The builder will close the stream on Build().\r\nIList\u003cIConfigurationSource\u003e sources = config.Sources;\r\nint removeIndex = sources.Count - 1;\r\nIConfigurationSource embeddedJsonSource = sources[removeIndex];\r\nsources.RemoveAt(removeIndex);\r\nsources.Insert(0, embeddedJsonSource);\r\n```\r\n\r\nSince almost all IConfigurationBuilder extensions work in an Add (last) mode, an Insert extension goes a little against the grain. If anything it would probably be safer to add an extension API like `MoveSource(int fromIndex, int toIndex)`. Then moving the last source to first would just be `config.MoveSource(config.Sources.Count - 1, 0)`. You could fancy it up with other extensions like `MoveLastSourceFirst()` and possibly overloads to take Index instances instead of int (e.g., `MoveSource(^1, 0)`).",
                                           "updatedAt":  "2021-06-17T14:40:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NjMzODM0OA==",
                                           "createdAt":  "2021-06-22T21:14:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fredrikhr",
                                           "body":  "@menees Well, I have a working implementation. And it indeed uses the mutable list in the way you describe. I first save the count of the list, then call Add, then infer the indicies to move (by comparing the new Count to the old count).\r\n\r\nThe intent of my proposal is that no IConfiguration implementor needs to change Add-logic and all the extensions that all already exist. The proposal here is to subsequently move the added sources to the desired position.",
                                           "updatedAt":  "2021-06-22T21:14:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NjM2MTA5Mg==",
                                           "createdAt":  "2021-06-22T21:51:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "menees",
                                           "body":  "Cool. Then this extension method doesn\u0027t _introduce_ any risk (using @maryamariyan\u0027s term). The existing, public mutable API could already break an order-dependent provider. That\u0027s a provider problem not an extension problem. Reviewing the existing providers should be independent of this extension proposal.\r\n\r\nPlus, it already [works on my machine](https://blog.codinghorror.com/the-works-on-my-machine-certification-program/). ;-)",
                                           "updatedAt":  "2021-06-22T21:51:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NjU4NTU5OA==",
                                           "createdAt":  "2021-06-23T07:04:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBwEj3g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2021-06-24T18:14:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fredrikhr",
                                           "body":  "@maryamariyan I agree with @menees here and have updated the `Risks` section of the proposal stating that this API would only use already existing publicly available API and thus does not introduce any new risk.\r\n\r\nUnless someone has additional concerns, I\u0027d suggest you want to re-review?",
                                           "updatedAt":  "2021-06-23T07:04:43Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "API proposal: Add Insert extension method for IConfigurationBuilder",
        "labels":  [
                       "api-needs-work",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/39429",
        "createdAt":  "2020-07-16T11:44:21Z",
        "number":  39429,
        "author":  "alfkonee",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-03-22T17:25:16Z",
        "body":  "## Background and Motivation\r\nThis API will enable using Arrays as Root for Json Files and Still be able to Import then into the Configuration System \r\n\u003c!--\r\nWe welcome API proposals! We have a process to evaluate the value and shape of new API. There is an overview of our process [here](https://github.com/dotnet/runtime/blob/master/docs/project/api-review-process.md). This template will help us gather the information we need to start the review process.\r\nFirst, please describe the purpose and value of the new API here.\r\n--\u003e\r\n\r\n## Proposed API\r\nI envision something like \r\n``` diff\r\nnamespace Microsoft.Extensions.Configuration.Json\r\n{\r\n    public static class JsonConfigurationExtensions\r\n    {\r\n-          public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, string path, bool optional = true, bool reloadOnChange = false)\r\n+         public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, string path, bool optional = true, bool reloadOnChange = false, string rootElement = string.Empty)\r\n        {\r\n            //Implementation\r\n        }\r\n    }\r\n}\r\n```\r\nThe `rootElement` will need not to be empty when the file is detected. This is what the parser will use as the top level Node for the Array\r\n\r\n\u003c!--\r\nPlease provide the specific public API signature diff that you are proposing. For example:\r\n```diff\r\nnamespace System.Collections.Generic\r\n{\r\n-    public class HashSet\u003cT\u003e : ICollection\u003cT\u003e, ISet\u003cT\u003e {\r\n+    public class HashSet\u003cT\u003e : ICollection\u003cT\u003e, ISet\u003cT\u003e, IReadOnlySet\u003cT\u003e {\r\n     }\r\n```\r\nYou may find the [Framework Design Guidelines](https://github.com/dotnet/runtime/blob/master/docs/coding-guidelines/framework-design-guidelines-digest.md) helpful.\r\n--\u003e\r\n\r\n## Usage Examples\r\n### Objects Array\r\nFor a Json File `data.json` with contents\r\n``` json\r\n[\r\n    {\r\n        \"Key1\":\"Value1\"\r\n    }\r\n]\r\n```\r\nupon calling \r\n``` csharp\r\n#Ommited for Brevity\r\n config.AddJsonFile(\"data,json\",rootElement: \"Data\");\r\n\r\n //where config is IConfigurationBuilder\r\n```\r\nUpon calling Build on Config the Resulting Config Provider will containe the Following Dictionary Data\r\n``` \r\n{\"Data:0\", }\r\n{\"Data:0:Key1\",\"Value1\"}\r\n\r\n```\r\n\r\n### Scalar Array\r\nFor a Json File `data.json` with contents\r\n``` json\r\n[\r\n   \"Data1\",\r\n   \"Data2\"   \r\n]\r\n```\r\nupon calling \r\n``` csharp\r\n//Ommited for Brevity\r\n config.AddJsonFile(\"data.json\",rootElement: \"Data\");\r\n\r\n //where config is IConfigurationBuilder\r\n```\r\nUpon calling Build on Config the Resulting Config Provider will containe the Following Dictionary Data\r\n``` \r\n{\"Data:0\",\"Data1\"}\r\n{\"Data:1\",\"Data2\"}\r\n```\r\n\r\n\u003c!--\r\nPlease provide code examples that highlight how the proposed API additions are meant to be consumed.\r\nThis will help suggest whether the API has the right shape to be functional, performant and useable.\r\nYou can use code blocks like this:\r\n``` C#\r\n// some lines of code here\r\n```\r\n--\u003e\r\n\r\n## Alternative Designs\r\nWe can also decide to Use the File name as the Root Object where no Root Element is provided.\r\nAlso this can enable Parsing of Json Files in Folder Possiblly\r\n```config.AddJsonConfigFolder(...)```\r\n\u003c!--\r\nWere there other options you considered, such as alternative API shapes?\r\nHow does this compare to analogous APIs in other ecosystems and libraries?\r\n--\u003e\r\n\r\n## Risks\r\nPossible breaking Changes in the AddJsonFile API but with Defaults for the Root Element this can be minimized\r\n\u003c!--\r\nPlease mention any risks that to your knowledge the API proposal might entail, such as breaking changes, performance regressions, etc.\r\n--\u003e\r\n\r\n## Notes \r\nI\u0027m willing to Provide Coded Proof on concepts for This as a PR Upon acceptance\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWDagSg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1OTM1NzY4NA==",
                                           "createdAt":  "2020-07-16T11:44:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-07-16T11:44:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1OTUyNzA1Nw==",
                                           "createdAt":  "2020-07-16T16:32:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FiniteReality",
                                           "body":  "I also have a use for something like this - loading a MIME type database as a configuration parameter. (The contents are static, and not expected to change during application runtime, but are configurable as users may want to \"teach\" the database about new MIME types.) The current structure means the JSON file is an array of entries, which I map using a custom configuration provider to a subkey so that I can navigate the database in a convenient format.\r\n\r\nThis API would mean that I could easily replace:\r\n```cs\r\n        public static IHostBuilder CreateHostBuilder(string[] args) =\u003e\r\n            Host.CreateDefaultBuilder(args)\r\n                .ConfigureAppConfiguration(builder =\u003e\r\n                {\r\n                    _ = builder.Add\u003cMimeTypeDatabaseConfigurationSource\u003e(\r\n                        source =\u003e\r\n                        {\r\n                            source.ConfigurationPath = new[]\r\n                            {\r\n                                \"Upload\",\r\n                                \"MimeTypeDatabase\"\r\n                            };\r\n                            source.Path = \"mimetypes.json\";\r\n                            source.Optional = false;\r\n                            source.ReloadOnChange = false;\r\n                            source.ResolveFileProvider();\r\n                        });\r\n                })\r\n                .ConfigureWebHostDefaults(\r\n                    webBuilder =\u003e webBuilder.UseStartup\u003cStartup\u003e());\r\n```\r\nand the associated implementation of `MimeTypeDatabaseConfigurationSource` (which is basically just a copy+paste of the JsonConfigurationSource and JsonConfigurationProvider), with something more like this:\r\n```\r\n        public static IHostBuilder CreateHostBuilder(string[] args) =\u003e\r\n            Host.CreateDefaultBuilder(args)\r\n                .ConfigureAppConfiguration(builder =\u003e\r\n                {\r\n                    _ = builder.AddJsonFile(\"mimetypes.json\", rootElement: \"Upload:MimeTypeDatabase\");\r\n                })\r\n                .ConfigureWebHostDefaults(\r\n                    webBuilder =\u003e webBuilder.UseStartup\u003cStartup\u003e());\r\n```",
                                           "updatedAt":  "2020-07-16T16:32:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NTIyNzEwMQ==",
                                           "createdAt":  "2020-07-28T19:17:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Is there a reason this needs a name specified by the caller?  Could it be some token value like `$index` or something?  /cc @davidfowl @maryamariyan ",
                                           "updatedAt":  "2020-07-28T19:17:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2ODg0MTIwMA==",
                                           "createdAt":  "2020-08-04T21:47:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alfkonee",
                                           "body":  "\u003e \r\n\u003e \r\n\u003e Is there a reason this needs a name specified by the caller? Could it be some token value like `$index` or something? /cc @davidfowl @maryamariyan\r\n\r\nI Suppose a Token can be used as the Default but the main Aim of this is to help the user specify the Root Object path from which the user would like the Json Data be placed on. \r\nSo for instance if I\u0027d like the data of a specific Json file into a specific root object like in @FiniteReality \u0027s example it should be possible to do so",
                                           "updatedAt":  "2020-08-04T22:52:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2ODg3MTMwOA==",
                                           "createdAt":  "2020-08-04T23:10:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "My comment was motivated by the fact that this was phrased as it must have API to use it.  That implies that the existing API is still broken when providing a root level array.  Wouldn\u0027t it make sense to define a behavior for the the existing API rather than force someone to use new API to deal with this input?",
                                           "updatedAt":  "2020-08-04T23:10:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MDg1NTc2NA==",
                                           "createdAt":  "2020-08-08T10:23:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alfkonee",
                                           "body":  "I\u0027m all for resuing existing API while adding new functionality. I\u0027d also like to make it possible for users to be able to specify the Root Object using the new overload for the Extension thats why if you llok at the implementation the rootElement argument is optional to make sure that existing API\u0027s work without any Code Changes.",
                                           "updatedAt":  "2020-08-10T22:08:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fgirh",
                                           "createdAt":  "2022-06-25T00:57:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alfkonee",
                                           "body":  "Hello there,\r\nWow almost two years on this. @ericstj can we revisit this API spec?\r\n\r\nTo reignite the conversation I think your last thought was also a very valid point to make this work seamlessly we\u0027ll need to have an opinionated default rootElement. I\u0027d suggest using a token like $index say $arrRoot to define and override where the rootElement is Set\r\n\r\nAlso with the rootElement parameter it would inherently allow overriding normal object based Json files to regroup them based on the callers preferences\r\n\r\n ",
                                           "updatedAt":  "2022-06-25T00:57:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GNt9g",
                                           "createdAt":  "2022-07-07T17:54:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@dotnet/area-extensions-configuration can you consider @alfkonee\u0027s suggestion?",
                                           "updatedAt":  "2022-07-07T17:54:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UICXO",
                                           "createdAt":  "2023-02-01T03:06:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "christopherpross",
                                           "body":  "Hey,\r\n\r\nis there any updates on this?\r\nWe are trying to migrate our configuration to IConfiguration/Ioptions but are blocked by the fact, that ourer jsonfiles have top-level arrays.\r\n",
                                           "updatedAt":  "2023-02-01T03:06:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UR_Xb",
                                           "createdAt":  "2023-02-02T16:15:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@christopherpross we didn\u0027t get chance to priorities this yet. Even if we introduced a new API will be in the future release. Would it be possible to process the config json files to convert the root arrays to child arrays with desired name?",
                                           "updatedAt":  "2023-02-02T16:15:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UkK0x",
                                           "createdAt":  "2023-02-06T09:24:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGhamQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2023-02-06T16:37:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Gn3po4g",
                                                                               "createdAt":  "2025-02-17T01:28:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "christopherpross",
                                           "body":  "@tarekgh\r\nWe have now written an extension to the json parser, provider and so on to support a custom root-element as it was suggested in the original issue description. When the api is changed and dotnet will support this from scratch, we will refactor this. Thank you for your answer.\r\n",
                                           "updatedAt":  "2023-02-06T09:24:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YM6Yh",
                                           "createdAt":  "2023-03-22T15:28:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alfkonee",
                                           "body":  "Hello @dotnet/area-extensions-configuration \r\n\r\nPlease I\u0027ve created a draft PR as a proof of concept for this Proposal. Can someone help with the discussion there",
                                           "updatedAt":  "2023-03-22T15:28:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YNqBK",
                                           "createdAt":  "2023-03-22T17:23:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@alfkonee \r\n\r\n\u003e\u003e @alfkonee thanks for your submission. The overall change looks reasonable, but this will need more work from our side as there is a public APIs changes which need to go through the process for design reviews. I am closing this PR for now as no more action can be taken on it. I am curious to know, does this issue is currently is blocking you? I am asking because we have more higher priority work and are trying to understand if this can wait till, we get a chance to do it.\r\n\r\n\u003e Yes this is Blocking Me on creating a Dynamic Configuration Loader in some projects me and my team are working on\r\nI understand there are lot of task to here so please can this discussion be made be made in the .NET 8 timeframe?? or DO I have to wait another Year\r\n\r\nI am just wondering if you can use the workaround that was mentioned here https://github.com/dotnet/runtime/issues/39429#issuecomment-1418767665? We\u0027ll try to get into this at the first chance. I am just trying to unblock you till we have the feature. \r\n\r\n@christopherpross do you mind sharing the workaround you did? \r\n",
                                           "updatedAt":  "2023-03-22T17:25:16Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Support Top Level Json Array Files in Json Configuration ",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/40559",
        "createdAt":  "2020-08-08T00:23:15Z",
        "number":  40559,
        "author":  "vinaychandra",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-23T00:09:53Z",
        "body":  "- The current XML Configuration Provider is hardcoded to consider `Name` as the [demultiplexing attribute](https://github.com/dotnet/runtime/blob/master/src/libraries/Microsoft.Extensions.Configuration.Xml/src/XmlStreamConfigurationProvider.cs#L17). Please make it a configurable parameter so that users can choose which attribute will act as such\r\n- The current XML Configuration Provider doesn\u0027t allow [namespaces](https://github.com/dotnet/runtime/blob/master/src/libraries/Microsoft.Extensions.Configuration.Xml/src/XmlStreamConfigurationProvider.cs#L159). Please allow an option to disable namespace validation or ignore namespaces altogether.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKpr5YA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MDc5NDEyMg==",
                                           "createdAt":  "2020-08-08T00:23:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-08-08T00:23:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MDc5OTgzOQ==",
                                           "createdAt":  "2020-08-08T00:58:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-08T00:58:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNDc5OTQ1Ng==",
                                           "createdAt":  "2020-10-22T22:33:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Related to https://github.com/dotnet/runtime/issues/36561 \r\n\r\n@vinaychandra this sounds like a good addition. Would you be open to providing an API proposal and sample usage for this using the guidelines in [api-review-process.md)](https://github.com/dotnet/runtime/blob/master/docs/project/api-review-process.md)",
                                           "updatedAt":  "2020-10-22T22:33:32Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "XML Configuration Provider - More Configuration options",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/40695",
        "createdAt":  "2020-08-12T05:39:42Z",
        "number":  40695,
        "author":  "TraceLD",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-14T21:33:55Z",
        "body":  "## Background and Motivation\r\n\r\nOften times when we do configuration of an application via `Microsoft.Extensions.Configuration` using `OptionsConfigurationServiceCollectionExtensions.Configure\u003cT\u003e(IConfiguration.GetSection(key))` we would like to have it validated with an exception being thrown if a key doesn\u0027t exist or doesn\u0027t match our model `T` instead of just setting default values. This is especially the case if the configuration is critical to the application\u0027s core functionality, as is often the case with for example ASP.NET Core apps.\r\n\r\n## Proposed API\r\n\r\nMy proposal is to introduce something akin to `ServiceProviderServiceExtensions.GetRequiredService`, in this case `GetRequiredSection\u003cT\u003e(key)` that would make sure that a key exists and validate it against our model `T`.\r\n```diff\r\nnamespace Microsoft.Extensions.Configuration\r\n{\r\n      public interface IConfiguration \r\n      {\r\n+          public IConfigurationSection GetRequiredSection\u003cT\u003e (string key);\r\n      }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\nBy itself:\r\n``` C#\r\n// our model;\r\npublic class MyConfigSection { ... }\r\n\r\n// usage;\r\nvar myConfigSection = Configuration.GetRequiredSection\u003cMyConfigSection\u003e(nameof(MyConfigSection));\r\n```\r\n\r\nWith DI:\r\n```C#\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n      // ...\r\n      \r\n      services.Configure\u003cMyConfigSection\u003e(Configuration.GetRequiredSection\u003cMyConfigSection\u003e(nameof(MyConfigSection)));\r\n      services.AddSingleton(provider =\u003e provider.GetRequiredService\u003cIOptions\u003cMyConfigSection\u003e\u003e().Value);\r\n\r\n      // ...\r\n}\r\n```\r\n\r\n## Alternative Designs\r\n\r\nDo not have the method return `IConfigurationSection` after validation but instead directly bind it to the `T` model, like so:\r\n```diff\r\nnamespace Microsoft.Extensions.Configuration\r\n{\r\n      public interface IConfiguration \r\n      {\r\n+          public T GetRequiredSection\u003cT\u003e (string key);\r\n      }\r\n}\r\n```\r\n\r\nThen the usage becomes:\r\nBy itself:\r\n``` C#\r\n// our model;\r\npublic class MyConfigSection { ... }\r\n\r\n// usage;\r\nvar myConfigSection = Configuration.GetRequiredSection\u003cMyConfigSection\u003e(nameof(MyConfigSection));\r\n```\r\n\r\nWith DI:\r\n```C#\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n      // ...\r\n      \r\n      services.AddSingleton(Configuration.GetRequiredSection\u003cMyConfigSection\u003e(nameof(MyConfigSection));\r\n\r\n      // ...\r\n}\r\n```\r\n\r\n## Risks\r\n\r\nI don\u0027t see any significant risks as this method would be an addition and would not change the behaviour of the existing `GetSection`  method.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKsMESA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MjYwMTkzNA==",
                                           "createdAt":  "2020-08-12T05:39:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-08-12T05:39:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MjkyNTAyMA==",
                                           "createdAt":  "2020-08-12T14:58:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-12T14:58:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNzE5NDIwMw==",
                                           "createdAt":  "2020-10-27T11:58:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I don\u0027t think these 2 things should be coupled together. GetRequiredSection and binding to a model should be decoupled operations. \r\n\r\nThis seems to be asking for configuration \"validation\" earlier than consumed (like at startup), which is reasonable but I don\u0027t think that means we should be double validating the object (it seems like the work being done to validate the section is thrown away as an IConfigurationSection) is returned.",
                                           "updatedAt":  "2020-10-27T12:04:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNzQxMjM2OA==",
                                           "createdAt":  "2020-10-27T17:44:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "I was looking at these two blog posts:\r\n\r\n- https://www.stevejgordon.co.uk/asp-net-core-2-2-options-validation\r\n- https://andrewlock.net/adding-validation-to-strongly-typed-configuration-objects-in-asp-net-core/\r\n\r\nThe first one explains using using IValidateOptions in Microsoft.Extensions.Options and the second one explains another approach using IStartupFilter in Microsoft.AspNetCore.Hosting for configuration validation.\r\n\r\n@TraceLD is there a reason any of the above approaches would not be sufficient approaches to follow? Is there a certain scenario requiring pre-startup validation?",
                                           "updatedAt":  "2020-10-27T17:44:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNzQyMzY4OA==",
                                           "createdAt":  "2020-10-27T18:03:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "[Video](https://www.youtube.com/watch?v=viYdlWGUiro\u0026t=0h55m7s)\n\nAccording to the discussion, this seems to warrant more though first.",
                                           "updatedAt":  "2020-10-27T19:09:36Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Add method to Microsoft.Extensions.Configuration.IConfiguration that gets a section and then validates it against a model",
        "labels":  [
                       "api-needs-work",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50041",
        "createdAt":  "2020-09-23T19:34:38Z",
        "number":  50041,
        "author":  "javitolin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-04-01T16:29:24Z",
        "body":  "### The problem\r\nUsing the same value in different places in the configuration can cause a copy-paste error and it can also make the configuration less readable. \r\n\r\n### My proposed feature\r\nAllow users to use the same value in different keys using template-like values.\r\nFor example, if a user would set its configuration to this:\r\n{\r\n    \"first_name\" : \"Will\",\r\n    \"last_name\" : \"Smith\",\r\n     \"full_name\" : \"{first_name} {last_name}\"\r\n}\r\n\r\nThe result should be: `configuration[\"full_name\"] == \"Will Smith\"`\r\nI\u0027ve already written this feature as an external Nuget.\r\n\r\nI would like to start a discussion around it and hear your opinion if needed.\r\nWe\u0027ve been working on some projects where some configuration are repeated and this feature will make the configuration easier to read.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOL-_89Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5Nzk1MDU1OQ==",
                                           "createdAt":  "2020-09-23T20:19:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "This doesn\u0027t seem like something we would do. It\u0027s a great external add-on though!",
                                           "updatedAt":  "2020-09-23T20:19:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5ODgwNzg2OA==",
                                           "createdAt":  "2020-09-25T08:49:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "javitolin",
                                           "body":  "Thanks for the response.\r\nThe nuget I\u0027ve created is [here](https://www.nuget.org/packages/TemplateFormattedConfiguration/) if anyone would like to use it\r\n",
                                           "updatedAt":  "2020-09-25T08:49:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNDI1NzAxMw==",
                                           "createdAt":  "2021-03-22T17:34:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### The problem\r\nUsing the same value in different places in the configuration can cause a copy-paste error and it can also make the configuration less readable. \r\n\r\n### My proposed feature\r\nAllow users to use the same value in different keys using template-like values.\r\nFor example, if a user would set its configuration to this:\r\n{\r\n    \"first_name\" : \"Will\",\r\n    \"last_name\" : \"Smith\",\r\n     \"full_name\" : \"{first_name} {last_name}\"\r\n}\r\n\r\nThe result should be: `configuration[\"full_name\"] == \"Will Smith\"`\r\nI\u0027ve already written this feature as an external Nuget.\r\n\r\nI would like to start a discussion around it and hear your opinion if needed.\r\nWe\u0027ve been working on some projects where some configuration are repeated and this feature will make the configuration easier to read.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejavitolin\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-22T17:34:00Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Configuration - Use the same value in multiple keys",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43788",
        "createdAt":  "2020-10-21T17:44:37Z",
        "number":  43788,
        "author":  "xantari",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9xzpg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mr-davidc",
                                            "createdAt":  "2024-06-15T10:43:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "benmccallum",
                                            "createdAt":  "2024-07-23T05:24:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "azhar0106",
                                            "createdAt":  "2024-12-30T04:29:07Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-07-23T06:25:11Z",
        "body":  "### Describe the bug\r\n\r\n1. Add a configuration via AddJsonStream()\r\n2. Call .Build() on the configuration object\r\n3. Add another configuration via .AddJsonStream()\r\n4. Call .Build() again\r\n\r\nYou will get a \"stream was not readable\" issue. It seems the first .Build() will destroy the streams for any further usage, which causes subsequent .Build() calls to fail with \"stream was not readable\" error.\r\n\r\nThis is similar to the repro you already received here: dotnet/extensions#1979\r\nBasically what happens is after .Build() is called all the streams are destroyed and the configuration bombs out.\r\n\r\nThis basically prevents you from putting configuration .json data as embedded resources.\r\n\r\n### To Reproduce\r\n\r\nRepro is here:\r\ndotnet/extensions#1979\r\n\r\n\r\n### Expected behavior\r\n\r\nStreams should still be able to be read by the IConfigurationBuilder even after multiple .Build() calls.\r\n\r\n### Additional context\r\n.NET Core 3.1.7",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhcW9AQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMzg1OTQ4OA==",
                                           "createdAt":  "2020-10-21T20:29:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD5gU1g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "GeorgeLee134",
                                                                               "createdAt":  "2024-11-05T14:02:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "\u003e This basically prevents you from putting configuration .json data as embedded resources.\r\n\r\nCould you explain what you are doing that is causing build to be called twice?",
                                           "updatedAt":  "2020-10-21T20:29:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNDAxNjUyMA==",
                                           "createdAt":  "2020-10-21T23:56:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xantari",
                                           "body":  "Needing to get the configuration data in full framework projects is one of the reasons. So we call .Build() in our API client library so that we can get the endpoint configuration data in full framework projects. This makes our API clients full framework and .NET Core friendly.\r\n\r\nThe other case that ran into this same issue was unit test related in dotnet/extensions#1979 already referenced here.\r\n\r\nIf we are not supposed to call build more than once, should the framework indicate that as such and throw an error instead?\r\n\r\nNeeding to get configuration data earlier in the startup process like follows is another reason.\r\n\r\nHere is an example of a scenario where we need to load one config, build it so it binds the values, in order to know how to chain to subsequent config files. Using JsonStream completely breaks this capability, works fine though with json files:\r\n\r\n```\r\n        public static IHostBuilder CreateHostBuilder(string[] args) =\u003e\r\n            Host.CreateDefaultBuilder(args)\r\n                .ConfigureAppConfiguration((hostingContext, config) =\u003e\r\n                {\r\n                    var env = hostingContext.HostingEnvironment;\r\n\r\n                    config.LoadApiClientConfigs(env);\r\n\r\n                    var settings = config.Build();\r\n                    var projectOptions = new ProjectOptions();\r\n                    settings.Bind(projectOptions);\r\n\r\n                    config.AddJsonFile(projectOptions.WebnoticeFilePath, optional: false, reloadOnChange: true);\r\n                })\r\n                .UseSerilog()\r\n                .UseContentRoot(Directory.GetCurrentDirectory())\r\n                .ConfigureWebHostDefaults(webBuilder =\u003e\r\n                {\r\n                    webBuilder.UseStartup\u003cStartup\u003e();\r\n                });\r\n```",
                                           "updatedAt":  "2020-10-21T23:57:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNDAyOTk5MA==",
                                           "createdAt":  "2020-10-22T00:08:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "Could you verify if switching to https://www.nuget.org/packages/Microsoft.Extensions.Configuration.NewtonsoftJson fixes the issue? (`AddNewtonsoftJsonStream`) I think I see what is happening and it\u0027s specific to the Configuration.Json package.",
                                           "updatedAt":  "2020-10-22T00:18:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNTYwMzk3Nw==",
                                           "createdAt":  "2020-10-23T21:44:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "Configuration.Json passes the stream to `StreamReader` without passing `leaveOpen = true` so the stream is closed.\r\nhttps://github.com/dotnet/runtime/blob/e82f4af06623fb489e2a55b10e16c5fb20d373cb/src/libraries/Microsoft.Extensions.Configuration.Json/src/JsonConfigurationFileParser.cs#L33\r\n\r\nNote: using the same stream multiple times wont work unless you manually seek backwards.",
                                           "updatedAt":  "2020-10-23T21:45:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNTYwNDA1Mw==",
                                           "createdAt":  "2020-10-23T21:44:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-23T21:44:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNTYwNDY2NQ==",
                                           "createdAt":  "2020-10-23T21:46:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xantari",
                                           "body":  "@BrennanConroy Sorry, I haven\u0027t had a chance to test NewtonsoftJson yet. Did you still want me to do that? It looks like you already identified the problem...",
                                           "updatedAt":  "2020-10-23T21:46:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNTYwNjQ3NA==",
                                           "createdAt":  "2020-10-23T21:52:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "If it\u0027s easy enough to try out, sure.",
                                           "updatedAt":  "2020-10-23T21:52:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNjQwNDA5OA==",
                                           "createdAt":  "2020-11-12T23:28:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "@xantari did you get a chance to test it out?",
                                           "updatedAt":  "2020-11-12T23:28:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNjQxMjQ2Mg==",
                                           "createdAt":  "2020-11-12T23:49:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xantari",
                                           "body":  "@maryamariyan Nope, looks like BrennanConroy already found the issue so didn\u0027t see the point and I had already got rid of that code branch so i\u0027d have to re-do everything.",
                                           "updatedAt":  "2020-11-12T23:49:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczOTYyMTUzMw==",
                                           "createdAt":  "2020-12-07T02:14:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@danmosemsft, another example.",
                                           "updatedAt":  "2020-12-10T22:30:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NTg2MjYzNQ==",
                                           "createdAt":  "2021-01-23T04:10:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DL444",
                                           "body":  "I would say it might be necessary for Build() method to close the stream so some patterns can work well. For example, in cases where I leave a hook for external code to add additional configurations, closing streams on calling Build() means external parties do not have to worry about closing them themselves. Otherwise, they would have to maintain the streams they opened, and I would have to add another hook after building to notify them so they can close the streams.",
                                           "updatedAt":  "2021-01-23T04:10:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNzE4MjA2OA==",
                                           "createdAt":  "2021-03-25T17:52:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kdaveid",
                                           "body":  "I tested this out with both \r\n`Microsoft.Extensions.Configuration.Json` (Version 5.0.0.0) as well as \r\n`Microsoft.Extensions.Configuration.NewtonsoftJson` (Version 5.0.1.0) \r\n\r\nHere is what I did:\r\n\r\n```\r\n WebHost.CreateDefaultBuilder(args)\r\n    .ConfigureAppConfiguration((ctx, builder) =\u003e\r\n    {\r\n        using var securityMem = new System.IO.MemoryStream(System.Text.Encoding.UTF8.GetBytes(JsonSerializer.Serialize(settingsObject)));\r\n        builder.AddNewtonsoftJsonStream(securityMem);\r\n    })\r\n    .UseKestrel();\r\n```\r\n\r\nUnfortunately the same results.\r\n\r\nIf its under my control it works as expected: \r\n```\r\nusing var mem = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(JsonSerializer.Serialize(settingsObject)));\r\nvar config = new ConfigurationBuilder().AddJsonStream(mem).Build();\r\nvar children = config.GetSection(\"SettingsKey\").GetChildren();    // yay!\r\n```",
                                           "updatedAt":  "2021-03-25T17:52:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNzkyMzY0Nw==",
                                           "createdAt":  "2021-03-26T04:16:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBk87QA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HaoK",
                                                                               "createdAt":  "2021-03-26T07:06:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "\u003e If we are not supposed to call build more than once, should the framework indicate that as such and throw an error instead?\r\n\r\nIn general using Build() twice on configuration builder is not in the realm of recommended workflows and how we expect callers to use it. We could add a note in the documentation stating this specific limitation.\r\n\r\ncc: @HaoK @safern ",
                                           "updatedAt":  "2021-03-26T04:17:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H7FUY",
                                           "createdAt":  "2022-08-05T17:10:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "broll",
                                           "body":  "I solved this by wrapping the stream that seeks to origin on dispose",
                                           "updatedAt":  "2022-08-05T17:10:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZssR9",
                                           "createdAt":  "2023-04-12T08:40:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SpringHgui",
                                           "body":  "not solve yet?",
                                           "updatedAt":  "2023-04-12T08:40:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Zvjx-",
                                           "createdAt":  "2023-04-12T17:17:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@SpringHgui as mentioned in comment https://github.com/dotnet/runtime/issues/43788#issuecomment-807923647 this is not the recommended workflows and how we expect callers to use it. Also, in this thread there is a workaround mentioned in the comment https://github.com/dotnet/runtime/issues/43788#issuecomment-1206670616 . This makes this issue a low priority compared to the other work we are currently doing. ",
                                           "updatedAt":  "2023-04-12T17:18:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fagtO",
                                           "createdAt":  "2023-06-21T12:55:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marhja",
                                           "body":  "I also ran in to this and would appreciate to have a solution. Maybe just add an overload of AddJsonStream(Stream stream, bool shouldDispose) so I can prevent the stream from being closed/disposed by Build() and do it myself?\r\n\r\nThe use case is that I first load some initial config which holds configurable directives to other config, so I need to do an intermediate Build() to get the initial config from my custom config provider.",
                                           "updatedAt":  "2023-06-21T13:10:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jv1D_",
                                           "createdAt":  "2023-08-10T15:47:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODM_TaA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "dtoriki",
                                                                               "createdAt":  "2023-11-19T03:19:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "andrii-riabchun",
                                           "body":  "I didn\u0027t succeed with the approach mentioned in comment [#43788 (comment)](https://github.com/dotnet/runtime/issues/43788#issuecomment-1206670616)\r\nI\u0027ve managed to solve this problem by implementing a custom `IFileProvider` that stores JSON contents as a byte array in memory:\r\n\r\n```cs\r\ninternal record InMemoryFileProvider(byte[] Contents) : IFileProvider\r\n{\r\n    public static readonly string FileName = \"FILE\";\r\n\r\n    public IDirectoryContents GetDirectoryContents(string subpath) =\u003e new NotFoundDirectoryContents();\r\n\r\n    public IFileInfo GetFileInfo(string subpath)\r\n    {\r\n        return subpath == FileName \r\n            ? new InMemoryFileInfo(FileName, Contents) \r\n            : new NotFoundFileInfo(subpath);\r\n    }\r\n\r\n    public IChangeToken Watch(string filter) =\u003e default;\r\n}\r\n\r\ninternal record InMemoryFileInfo(string FileName, byte[] Data) : IFileInfo\r\n{\r\n    public bool Exists =\u003e true;\r\n\r\n    public long Length =\u003e Data.LongLength;\r\n\r\n    public string PhysicalPath =\u003e null;\r\n\r\n    public string Name =\u003e FileName;\r\n\r\n    public DateTimeOffset LastModified =\u003e DateTimeOffset.MinValue;\r\n\r\n    public bool IsDirectory =\u003e false;\r\n\r\n    public Stream CreateReadStream() =\u003e new MemoryStream(Data);\r\n}\r\n```\r\n\r\nAnd usage:\r\n```cs\r\npublic static class ConfigurationBuilderExtensions\r\n{\r\n    private static readonly HttpClient _httpClient = new();\r\n\r\n    public static IConfigurationBuilder AddDefaultConfiguration(this IConfigurationBuilder config)\r\n    {\r\n        config.AddEnvironmentVariables();\r\n        config.AddUserSecrets\u003cProgram\u003e();\r\n        config.AddRemoteJson(config.Build().GetConnectionString(\"AppConfiguration\"));\r\n        return config;\r\n    }\r\n\r\n    public static IConfigurationBuilder AddRemoteJson(this IConfigurationBuilder config, string url)\r\n    {\r\n        var response = _httpClient.Send(new(HttpMethod.Get, url));\r\n\r\n        var ms = new MemoryStream();\r\n        response.Content.ReadAsStream().CopyTo(ms);\r\n\r\n        return config.AddJsonFile(\r\n            new InMemoryFileProvider(ms.ToArray()), \r\n            InMemoryFileProvider.FileName, \r\n            false, \r\n            false);\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2023-08-10T15:47:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Fxb0B",
                                           "createdAt":  "2024-07-23T06:09:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEAh4uA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KaFo",
                                                                               "createdAt":  "2024-10-17T07:58:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "azhar0106",
                                                                               "createdAt":  "2024-12-30T04:29:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "benmccallum",
                                           "body":  "For reference, @broll \u0027s solution would look like this I believe, which is a bit shorter.\r\n\r\n```csharp\r\nprivate sealed class NeverClosingMemoryStream : MemoryStream\r\n{\r\n    protected override void Dispose(bool disposing)\r\n    {\r\n        Seek(0, SeekOrigin.Begin);\r\n    }\r\n\r\n    public override ValueTask DisposeAsync()\r\n    {\r\n        Seek(0, SeekOrigin.Begin);\r\n        return default;\r\n    }\r\n}\r\n```\r\n\r\nThen you can do the following and if you\u0027re host startup has multiple Build calls everything should still be OK:\r\n```\r\nvar ms = new NeverClosingMemoryStream();\r\n\r\n// Write to the ms\r\n\r\nvar config = new ConfigurationBuilder()\r\n    .AddJsonStream(ms);\r\n```",
                                           "updatedAt":  "2024-07-23T06:25:11Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "System.ArgumentException: Stream was not readable ",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44517",
        "createdAt":  "2020-11-11T09:25:54Z",
        "number":  44517,
        "author":  "maryamariyan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-18T05:48:48Z",
        "body":  "Found two key handling issues:\r\n\r\ncc: @safern \r\n\r\n\r\n---\r\n\r\n# Work Items\r\n- [ ] #42643 Json Configuration Provider - Handling of keys with \":\"\r\n- [ ] #35989 Environment Variable Configuration Provider - Handling of keys with \".\"\r\n- [ ] https://github.com/dotnet/runtime/issues/67616\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgaTcCw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNTMxMDAyNQ==",
                                           "createdAt":  "2020-11-11T09:25:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\u003cdetails\u003e\n  \u003chr\u003e\n  \u003cb\u003eIssue meta data\u003c/b\u003e\n  \u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eIssue content:\u003c/td\u003e\n    \u003ctd\u003eFound two key handling issues:\r\n\r\n- [ ] #42643 Json Configuration Provider - Handling of keys with \":\"\r\n- [ ] #35989 Environment Variable Configuration Provider - Handling of keys with \".\"\r\n\r\ncc: @safern \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eIssue author:\u003c/td\u003e\n    \u003ctd\u003emaryamariyan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eAssignees:\u003c/td\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eMilestone:\u003c/td\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003c/details\u003e",
                                           "updatedAt":  "2020-11-11T09:25:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MzA5NTY3Ng==",
                                           "createdAt":  "2021-03-08T21:33:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "Particularly #35989 would be a wonderful fix for 6.0. \r\n\r\nIt\u0027s a major hindrance that most logging (beyond first namespace level) cannot be configured ad-hoc once a unix container has been built. (without mucking about with tools like confd or manual fix-ups inside the app)\r\n\r\nThe feature to change log levels (and other keys) via env vars is really nice and cloud native, it just falls short in polish of the last 5%.",
                                           "updatedAt":  "2021-03-08T21:39:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GoG_s",
                                           "createdAt":  "2022-07-14T21:39:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "We will consider this in a future release. Moving this issue out of the 7.0 milestone. ",
                                           "updatedAt":  "2022-07-14T21:39:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BpNwL",
                                           "createdAt":  "2024-06-18T05:48:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODmJB1w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "D3-LucaPiombino",
                                                                               "createdAt":  "2024-06-18T19:24:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "SteveDunn",
                                           "body":  "Hi,\r\nI\u0027ve got a bit of spare time again, so I\u0027m happy to continue with any of these if they\u0027re planned for .NET 9? The \u0027[allow keys with colons](https://github.com/dotnet/runtime/issues/67616)\u0027 was a biggies as I remember.",
                                           "updatedAt":  "2024-06-18T05:48:47Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Built-in configuration providers can do more robust key handling",
        "labels":  [
                       "Epic",
                       "area-Extensions-Configuration",
                       "User Story",
                       "Priority:3",
                       "Bottom Up Work",
                       "Team:Libraries"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45391",
        "createdAt":  "2020-11-26T09:43:56Z",
        "number":  45391,
        "author":  "dziedrius",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-12-15T15:51:33Z",
        "body":  "If I do configuration like this:\r\n```\r\nconfigurationBuilder.AddConfiguration(startupConfig);\r\nconfigurationBuilder.AddCustomConfigurationProvider(options);\r\n```\r\n\r\nstartup configuration ends up being registered in ChainedConfigurationProvider - and that means it is no longer reloadable.\r\nWhy?\r\n\r\nConfigurationRoot reload method looks like this:\r\n```\r\n/// \u003csummary\u003e\r\n/// Force the configuration values to be reloaded from the underlying sources.\r\n/// \u003c/summary\u003e\r\npublic void Reload()\r\n{\r\n    foreach (var provider in _providers)\r\n    {\r\n       provider.Load();\r\n     }\r\n     RaiseChanged();\r\n}\r\n```\r\nand ChainedConfigurationProvider Load method looks like:\r\n```\r\n/// \u003csummary\u003e\r\n/// Loads configuration values from the source represented by this \u003csee cref=\"IConfigurationProvider\"/\u003e.\r\n/// \u003c/summary\u003e\r\npublic void Load() { }\r\n```\r\nand I kind of understand why - it does not have access to IConfigurationRoot, only to IConfiguration, hence it can not chain reloading. Problem, that this is obvious only when you familiar with all the source code behind it - [docs](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.chainedbuilderextensions.addconfiguration?view=dotnet-plat-ext-5.0#Microsoft_Extensions_Configuration_ChainedBuilderExtensions_AddConfiguration_Microsoft_Extensions_Configuration_IConfigurationBuilder_Microsoft_Extensions_Configuration_IConfiguration_) are silent about this limitation.\r\n\r\nOn the other hand - there\u0027s no good way to overcome this limitation, the only way I\u0027m seeing currently is to do part of configuration building twice, which kind of defeats having AddConfiguration method in general?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHON_LSjg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNjEwMDAwOQ==",
                                           "createdAt":  "2020-11-30T22:42:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIf I do configuration like this:\r\n```\r\nconfigurationBuilder.AddConfiguration(startupConfig);\r\nconfigurationBuilder.AddCustomConfigurationProvider(options);\r\n```\r\n\r\nstartup configuration ends up being registered in ChainedConfigurationProvider - and that means it is no longer reloadable.\r\nWhy?\r\n\r\nConfigurationRoot reload method looks like this:\r\n```\r\n/// \u003csummary\u003e\r\n/// Force the configuration values to be reloaded from the underlying sources.\r\n/// \u003c/summary\u003e\r\npublic void Reload()\r\n{\r\n    foreach (var provider in _providers)\r\n    {\r\n       provider.Load();\r\n     }\r\n     RaiseChanged();\r\n}\r\n```\r\nand ChainedConfigurationProvider Load method looks like:\r\n```\r\n/// \u003csummary\u003e\r\n/// Loads configuration values from the source represented by this \u003csee cref=\"IConfigurationProvider\"/\u003e.\r\n/// \u003c/summary\u003e\r\npublic void Load() { }\r\n```\r\nand I kind of understand why - it does not have access to IConfigurationRoot, only to IConfiguration, hence it can not chain reloading. Problem, that this is obvious only when you familiar with all the source code behind it - [docs](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.chainedbuilderextensions.addconfiguration?view=dotnet-plat-ext-5.0#Microsoft_Extensions_Configuration_ChainedBuilderExtensions_AddConfiguration_Microsoft_Extensions_Configuration_IConfigurationBuilder_Microsoft_Extensions_Configuration_IConfiguration_) are silent about this limitation.\r\n\r\nOn the other hand - there\u0027s no good way to overcome this limitation, the only way I\u0027m seeing currently is to do part of configuration building twice, which kind of defeats having AddConfiguration method in general?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edziedrius\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-11-30T22:42:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMzE1MjU1OA==",
                                           "createdAt":  "2021-03-19T21:47:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Each configuration hierarchy has its own change notification but doesn\u0027t notify the parent one. \r\n\r\nSo seems like when the chained configuration changes the parent configuration also needs to listen to the notification and that part was never implemented.\r\n\r\nThe fix would be to come up with a way to have chained configuration hook up to reload by registering to a change notification and to set up the callback such that when the chained configuration changes, we trigger a change notification to notify the parent.",
                                           "updatedAt":  "2021-03-19T21:48:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc438tKO",
                                           "createdAt":  "2021-10-08T13:51:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wzchua",
                                           "body":  "the reload token from the inner configuration is passed to the ChainedConfigurationProvider .\r\n\r\nIf you have something like\r\n```cs\r\n\r\nvar source = new ConfigurationBuilder();\r\nsource.AddJsonFile(\"appsettings.json\", false,true);\r\nvar config = source.Build();\r\nusing var a = config.GetReloadToken().RegisterChangeCallback(_ =\u003e Console.WriteLine(\"config changed\"), null);\r\n\r\nvar source2 = new ConfigurationBuilder();\r\nsource2.AddConfiguration(config);\r\n\r\nvar config2 = source2.Build();\r\nusing var b = config2.GetReloadToken().RegisterChangeCallback(_ =\u003e Console.WriteLine(\"config2 changed\"), null);\r\n\r\nawait Task.Delay(600);\r\n```\r\n\r\nwhen you edit `appsettings.json` \r\nyou will see both\r\n```\r\nconfig2 changed\r\nconfig changed\r\n```",
                                           "updatedAt":  "2021-10-08T13:51:32Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "ChainedConfigurationProvider does not support reload",
        "labels":  [
                       "bug",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/74195",
        "createdAt":  "2020-12-05T02:37:36Z",
        "number":  74195,
        "author":  "Nilotaviano",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4elfw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "abbeycode",
                                            "createdAt":  "2024-06-08T05:08:46Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-06-08T05:08:41Z",
        "body":  "The code below works perfectly on Windows, but doesn\u0027t work when deployed on Ubuntu 16.10. The `configuration` is initially loaded, but is never reloaded afterwards when `appsettings.json` is modified on Ubuntu (it works on Windows and I get to see the `App Settings reloaded` log message).\r\n\r\n```\r\nprivate static AppSettings GetAppSettings()\r\n{\r\n    var configuration = new ConfigurationBuilder()\r\n        .AddJsonFile(Path.Combine(System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName, \"..\", \"appsettings.json\"), optional: false, reloadOnChange: true)\r\n        .Build();\r\n\r\n    ChangeToken.OnChange(() =\u003e configuration.GetReloadToken(), () =\u003e\r\n    {\r\n        Logger.LogMessage(\"App Settings reloaded\");\r\n    });\r\n\r\n    return appSettings;\r\n}\r\n```\r\n\r\n.csproj:\r\n```\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enetcoreapp3.1\u003c/TargetFramework\u003e\r\n    \u003cRuntimeIdentifiers\u003ewin10-x64;ubuntu.16.10-x64\u003c/RuntimeIdentifiers\u003e\r\n    \u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.AspNet.SignalR.Client\" Version=\"2.4.1\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"5.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"5.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"5.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"RestSharp\" Version=\"106.11.4\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n\r\n```\r\n\r\nPublish profile:\r\n```\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003c!--\r\nhttps://go.microsoft.com/fwlink/?LinkID=208121. \r\n--\u003e\r\n\u003cProject ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cConfiguration\u003eRelease\u003c/Configuration\u003e\r\n    \u003cPlatform\u003eAny CPU\u003c/Platform\u003e\r\n    \u003cPublishDir\u003ebin\\Release\\netcoreapp3.1\\publish\\\u003c/PublishDir\u003e\r\n    \u003cPublishProtocol\u003eFileSystem\u003c/PublishProtocol\u003e\r\n    \u003cTargetFramework\u003enetcoreapp3.1\u003c/TargetFramework\u003e\r\n    \u003cRuntimeIdentifier\u003eubuntu.16.10-x64\u003c/RuntimeIdentifier\u003e\r\n    \u003cSelfContained\u003etrue\u003c/SelfContained\u003e\r\n    \u003cPublishSingleFile\u003eTrue\u003c/PublishSingleFile\u003e\r\n    \u003cPublishTrimmed\u003eTrue\u003c/PublishTrimmed\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\u003c/Project\u003e\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgH8V6A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5IuHS1",
                                           "createdAt":  "2022-08-18T22:43:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-08-18T22:43:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IxCM3",
                                           "createdAt":  "2022-08-19T15:34:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe code below works perfectly on Windows, but doesn\u0027t work when deployed on Ubuntu 16.10. The `configuration` is initially loaded, but is never reloaded afterwards when `appsettings.json` is modified on Ubuntu (it works on Windows and I get to see the `App Settings reloaded` log message).\r\n\r\n```\r\nprivate static AppSettings GetAppSettings()\r\n{\r\n    var configuration = new ConfigurationBuilder()\r\n        .AddJsonFile(Path.Combine(System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName, \"..\", \"appsettings.json\"), optional: false, reloadOnChange: true)\r\n        .Build();\r\n\r\n    ChangeToken.OnChange(() =\u003e configuration.GetReloadToken(), () =\u003e\r\n    {\r\n        Logger.LogMessage(\"App Settings reloaded\");\r\n    });\r\n\r\n    return appSettings;\r\n}\r\n```\r\n\r\n.csproj:\r\n```\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enetcoreapp3.1\u003c/TargetFramework\u003e\r\n    \u003cRuntimeIdentifiers\u003ewin10-x64;ubuntu.16.10-x64\u003c/RuntimeIdentifiers\u003e\r\n    \u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.AspNet.SignalR.Client\" Version=\"2.4.1\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"5.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"5.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"5.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"RestSharp\" Version=\"106.11.4\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n\r\n```\r\n\r\nPublish profile:\r\n```\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n\u003c!--\r\nhttps://go.microsoft.com/fwlink/?LinkID=208121. \r\n--\u003e\r\n\u003cProject ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cConfiguration\u003eRelease\u003c/Configuration\u003e\r\n    \u003cPlatform\u003eAny CPU\u003c/Platform\u003e\r\n    \u003cPublishDir\u003ebin\\Release\\netcoreapp3.1\\publish\\\u003c/PublishDir\u003e\r\n    \u003cPublishProtocol\u003eFileSystem\u003c/PublishProtocol\u003e\r\n    \u003cTargetFramework\u003enetcoreapp3.1\u003c/TargetFramework\u003e\r\n    \u003cRuntimeIdentifier\u003eubuntu.16.10-x64\u003c/RuntimeIdentifier\u003e\r\n    \u003cSelfContained\u003etrue\u003c/SelfContained\u003e\r\n    \u003cPublishSingleFile\u003eTrue\u003c/PublishSingleFile\u003e\r\n    \u003cPublishTrimmed\u003eTrue\u003c/PublishTrimmed\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\u003c/Project\u003e\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNilotaviano\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-19T15:34:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IxNNL",
                                           "createdAt":  "2022-08-19T16:18:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "https://github.com/dotnet/runtime/issues/71386\r\nhttps://github.com/dotnet/runtime/issues/43129",
                                           "updatedAt":  "2022-08-19T16:18:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AfxXo",
                                           "createdAt":  "2024-06-08T05:08:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODl8wmA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "OrionSoftwareSupport",
                                                                               "createdAt":  "2024-06-11T15:27:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Nilotaviano",
                                                                               "createdAt":  "2024-06-17T15:41:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "abbeycode",
                                           "body":  "I\u0027m seeing this too, with an easily reproducible xUnit test case. This unit test always passes in Windows and Mac environments, but fails on Ubuntu-based Docker images (like the official Microsoft images). Is there any chance of this getting looked at?\r\n\r\n    [Fact]\r\n    public void BasicTest()\r\n    {\r\n        var configFilePath = Path.GetTempFileName();\r\n        File.WriteAllText(configFilePath, \"{ \\\"MyValue\\\": 5 }\");\r\n    \r\n        var config = new ConfigurationBuilder()\r\n            .AddJsonFile(configFilePath, optional: false, reloadOnChange: true)\r\n            .Build();\r\n    \r\n        var invokeWasCalled = false;\r\n    \r\n        _ = ChangeToken.OnChange\u003cobject\u003e(\r\n            config.GetReloadToken,\r\n            _ =\u003e invokeWasCalled = true,\r\n            null!);\r\n    \r\n        File.WriteAllText(configFilePath, \"{ \\\"MyValue\\\": 15 }\");\r\n        Thread.Sleep(TimeSpan.FromMilliseconds(500));\r\n    \r\n        invokeWasCalled.Should().BeTrue();\r\n    }",
                                           "updatedAt":  "2024-06-08T05:08:40Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "ChangeToken.OnChange consumer callback isn\u0027t being triggered on Ubuntu when used in conjunction with IConfiguration.GetReloadToken()",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/46475",
        "createdAt":  "2020-12-14T22:24:06Z",
        "number":  46475,
        "author":  "kalaskarsanket",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-04-26T18:46:14Z",
        "body":  "---\r\n**Issue moved from microsoft/dotnet#1248**\r\n- Please respond to @manoj-choudhari-git.\r\n\r\n---\r\n\r\n_From @manoj-choudhari-git on Wednesday, September 9, 2020 4:31:06 PM_\r\n\r\nI realized this while working on a code where I had to add transformations on very complex JSON object. \r\nThe transformation required were very simple.  \r\n\r\n_For ex.  I just wanted environment name to be present in a setting._  \r\n\r\nThe issue was that setting was not at top level... there was an array at top level and inside one of the object, there was another array and I wanted to replace the placeholder for only one entry in this nested array. \r\n\r\nIn appsettings.json transformation files, there is no support yet to have a placeholder.  The value of placehoder can come either from same appsettings.json file or it can come from some environment variable.\r\n\r\nFor ex. if my appsettings.json is as shown below:\r\n```\r\n{\r\n     \"AppSettings\": {\r\n            \"ApplicationName\": \"MyWebApp\"\r\n      },\r\n     \"SomeDependentSetting\": \"Current environment is {env::ASPNETCORE_ENVIRONMENT}\",\r\n      \"AnotherSetting\": \"Current Application is {config::AppSettings:ApplicationName}\"\r\n}\r\n\r\n```\r\nThis feature would really make configuration transformations easy. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMP-Kog==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1MDQzNTc2NA==",
                                           "createdAt":  "2020-12-23T19:12:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-12-23T19:12:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1MDQzNTg3Mw==",
                                           "createdAt":  "2020-12-23T19:12:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "Transferring to dotnet/runtime as it should likely be in json configuration area",
                                           "updatedAt":  "2020-12-23T19:12:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1MDk0MzgyNw==",
                                           "createdAt":  "2020-12-24T18:44:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n---\r\n**Issue moved from microsoft/dotnet#1248**\r\n- Please respond to @manoj-choudhari-git.\r\n\r\n---\r\n\r\n_From @manoj-choudhari-git on Wednesday, September 9, 2020 4:31:06 PM_\r\n\r\nI realized this while working on a code where I had to add transformations on very complex JSON object. \r\nThe transformation required were very simple.  \r\n\r\n_For ex.  I just wanted environment name to be present in a setting._  \r\n\r\nThe issue was that setting was not at top level... there was an array at top level and inside one of the object, there was another array and I wanted to replace the placeholder for only one entry in this nested array. \r\n\r\nIn appsettings.json transformation files, there is no support yet to have a placeholder.  The value of placehoder can come either from same appsettings.json file or it can come from some environment variable.\r\n\r\nFor ex. if my appsettings.json is as shown below:\r\n```\r\n{\r\n     \"AppSettings\": {\r\n            \"ApplicationName\": \"MyWebApp\"\r\n      },\r\n     \"SomeDependentSetting\": \"Current environment is {env::ASPNETCORE_ENVIRONMENT}\",\r\n      \"AnotherSetting\": \"Current Application is {config::AppSettings:ApplicationName}\"\r\n}\r\n\r\n```\r\nThis feature would really make configuration transformations easy. \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekalaskarsanket\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-12-24T18:44:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1Mjc4MDEyMw==",
                                           "createdAt":  "2020-12-30T22:42:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBbYjHw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2021-01-04T19:25:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mkArtakMSFT",
                                           "body":  "@vitek-karas this is configuration related, which I believe is now owned by @ericstj and is now part of the dotnet/runtime repo.\r\n@ericstj can you please confirm or involve the correct owner? Thanks!\r\n",
                                           "updatedAt":  "2020-12-30T22:42:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1Mjc4MDQwNw==",
                                           "createdAt":  "2020-12-30T22:43:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-12-30T22:43:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1MjgwMTA1Ng==",
                                           "createdAt":  "2020-12-31T00:31:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n---\r\n**Issue moved from microsoft/dotnet#1248**\r\n- Please respond to @manoj-choudhari-git.\r\n\r\n---\r\n\r\n_From @manoj-choudhari-git on Wednesday, September 9, 2020 4:31:06 PM_\r\n\r\nI realized this while working on a code where I had to add transformations on very complex JSON object. \r\nThe transformation required were very simple.  \r\n\r\n_For ex.  I just wanted environment name to be present in a setting._  \r\n\r\nThe issue was that setting was not at top level... there was an array at top level and inside one of the object, there was another array and I wanted to replace the placeholder for only one entry in this nested array. \r\n\r\nIn appsettings.json transformation files, there is no support yet to have a placeholder.  The value of placehoder can come either from same appsettings.json file or it can come from some environment variable.\r\n\r\nFor ex. if my appsettings.json is as shown below:\r\n```\r\n{\r\n     \"AppSettings\": {\r\n            \"ApplicationName\": \"MyWebApp\"\r\n      },\r\n     \"SomeDependentSetting\": \"Current environment is {env::ASPNETCORE_ENVIRONMENT}\",\r\n      \"AnotherSetting\": \"Current Application is {config::AppSettings:ApplicationName}\"\r\n}\r\n\r\n```\r\nThis feature would really make configuration transformations easy. \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekalaskarsanket\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-12-31T00:31:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMjA1MzUzOA==",
                                           "createdAt":  "2021-04-18T20:12:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Chapnik13",
                                           "body":  "I would like to add this feature, this will be my first contribution to the .net runtime :) \r\nDo you think that this feature should be implemented across all configuration options (environment variables, xml, etc..) or only for appsettings.json?\r\n\r\n@safern @maryamariyan ",
                                           "updatedAt":  "2021-04-26T18:46:14Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[New Feature Request] appsettings.json should have syntax support to enable usage of placeholders for Environment Variables (or any other setting from same config)",
        "labels":  [
                       "help wanted",
                       "feature-request",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/46725",
        "createdAt":  "2021-01-06T21:21:38Z",
        "number":  46725,
        "author":  null,
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-10T11:39:52Z",
        "body":  "The StringDictionary class is a prefect representation of a Dictionary that is represented by an IConfiguration interface, as the keys are case insensitive in both objects.\r\n\r\nI propose that either of the following options be implemented:\r\n\r\n1. The StringDictionary class implements the IDictionary\u003cstring, string\u003e interface.\r\n2. The Microsoft.Extensions.Configuration.ConfigurationBinder.BindInstance() method adds support for StringDictionary.\r\n\r\nThis would make it much simpler, and cleaner, when using IConfiguration.\r\n\r\nAdditionally, there is a fatal flaw in the current design as Microsoft.Extensions.Configuration.ConfigurationBinder.CreateInstance() does not create a case insensitive dictionary, thus lookups for keys that vary only in case, fail.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwy3waw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjQ5OTYxNw==",
                                           "createdAt":  "2021-01-08T02:04:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe StringDictionary class is a prefect representation of a Dictionary that is represented by an IConfiguration interface, as the keys are case insensitive in both objects.\r\n\r\nI propose that either of the following options be implemented:\r\n\r\n1. The StringDictionary class implements the IDictionary\u003cstring, string\u003e interface.\r\n2. The Microsoft.Extensions.Configuration.ConfigurationBinder.BindInstance() method adds support for StringDictionary.\r\n\r\nThis would make it much simpler, and cleaner, when using IConfiguration.\r\n\r\nAdditionally, there is a fatal flaw in the current design as Microsoft.Extensions.Configuration.ConfigurationBinder.CreateInstance() does not create a case insensitive dictionary, thus lookups for keys that vary only in case, fail.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eKaelum\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-01-08T02:04:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NzQzMDc0OQ==",
                                           "createdAt":  "2021-01-10T07:22:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  "StringDictionary will be marked as obsolete #889",
                                           "updatedAt":  "2021-01-10T07:22:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NzQzODkxOA==",
                                           "createdAt":  "2021-01-10T08:35:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "@iSazonov I responded in the other thread, but you are aware that this, and several other of these specialized classes, are heavily used by ASP.NET, correct?  This class alone is used as the basis for the entire configuration system.",
                                           "updatedAt":  "2021-01-10T08:41:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NzQ3MTYyNA==",
                                           "createdAt":  "2021-01-10T12:53:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "iSazonov",
                                           "body":  " @Kaelum  This can be actively used, but it does not reject the possibility of an new alternative based on generic Dictionary.",
                                           "updatedAt":  "2021-01-10T12:53:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NzQ3NDQ5Ng==",
                                           "createdAt":  "2021-01-10T13:15:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "ASP.NET Core doesn\u0027t use any of the specialized collections ",
                                           "updatedAt":  "2021-01-10T13:15:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DLfBr",
                                           "createdAt":  "2025-09-10T11:39:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-10T11:39:52Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "StringDictionary is not supported by Microsoft.Extensions.Configuration.Binder.ConfigurationBinder",
        "labels":  [
                       "area-Extensions-Configuration",
                       "no-recent-activity",
                       "backlog-cleanup-candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/47455",
        "createdAt":  "2021-01-26T05:07:17Z",
        "number":  47455,
        "author":  "mcm-ham",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-14T21:44:42Z",
        "body":  "We built support for encrypted appsettings.json in our app by using encrypted xml support built into .NET. To integrate this we use JsonConfigurationSource with a custom File Provider to return custom IFileInfo with CreateReadStream overriden to decrypt file. Like code below:\r\n\r\n```cs\r\npublic static IConfigurationBuilder AddJsonFileProtectedByEncryptedXml(this IConfigurationBuilder builder, string path, bool optional = false, ILoggerFactory loggerFactory = null)\r\n{\r\n    var source = new JsonConfigurationSource\r\n    {\r\n        Path = path,\r\n        // Specify file provider to use so that JsonConfigurationSource can read the decrypted form of config file.\r\n        // Note config file does not need to be XML, only the container that contains the config file should be XML.\r\n        FileProvider = new EncryptedXmlContainerFileProvider(loggerFactory),\r\n        Optional = optional\r\n    };\r\n    builder.Add(source);\r\n    return builder;\r\n}\r\n```\r\n\r\nAfter upgrading to .NET 5.0 this stopped working.\r\n\r\nWorkaround: return null from PhysicalFilePath in custom IFileInfo.\r\nhttps://github.com/dotnet/runtime/blob/9b9303678de0f5573fef580f3f52404ea0a20dd4/src/libraries/Microsoft.Extensions.Configuration.FileExtensions/src/FileConfigurationProvider.cs#L87\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMkWksA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NzI5OTE4MA==",
                                           "createdAt":  "2021-01-26T05:07:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe built support for encrypted appsettings.json in our app by using encrypted xml support built into .NET. To integrate this we use JsonConfigurationSource with a custom File Provider to return custom IFileInfo with CreateReadStream overriden to decrypt file. Like code below:\r\n\r\n```cs\r\npublic static IConfigurationBuilder AddJsonFileProtectedByEncryptedXml(this IConfigurationBuilder builder, string path, bool optional = false, ILoggerFactory loggerFactory = null)\r\n{\r\n    var source = new JsonConfigurationSource\r\n    {\r\n        Path = path,\r\n        // Specify file provider to use so that JsonConfigurationSource can read the decrypted form of config file.\r\n        // Note config file does not need to be XML, only the container that contains the config file should be XML.\r\n        FileProvider = new EncryptedXmlContainerFileProvider(loggerFactory),\r\n        Optional = optional\r\n    };\r\n    builder.Add(source);\r\n    return builder;\r\n}\r\n```\r\n\r\nAfter upgrading to .NET 5.0 this stopped working.\r\n\r\nWorkaround: return null from PhysicalFilePath in custom IFileInfo.\r\nhttps://github.com/dotnet/runtime/blob/9b9303678de0f5573fef580f3f52404ea0a20dd4/src/libraries/Microsoft.Extensions.Configuration.FileExtensions/src/FileConfigurationProvider.cs#L87\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emcm-ham\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-01-26T05:07:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NzczMjIwMg==",
                                           "createdAt":  "2021-01-26T18:16:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe built support for encrypted appsettings.json in our app by using encrypted xml support built into .NET. To integrate this we use JsonConfigurationSource with a custom File Provider to return custom IFileInfo with CreateReadStream overriden to decrypt file. Like code below:\r\n\r\n```cs\r\npublic static IConfigurationBuilder AddJsonFileProtectedByEncryptedXml(this IConfigurationBuilder builder, string path, bool optional = false, ILoggerFactory loggerFactory = null)\r\n{\r\n    var source = new JsonConfigurationSource\r\n    {\r\n        Path = path,\r\n        // Specify file provider to use so that JsonConfigurationSource can read the decrypted form of config file.\r\n        // Note config file does not need to be XML, only the container that contains the config file should be XML.\r\n        FileProvider = new EncryptedXmlContainerFileProvider(loggerFactory),\r\n        Optional = optional\r\n    };\r\n    builder.Add(source);\r\n    return builder;\r\n}\r\n```\r\n\r\nAfter upgrading to .NET 5.0 this stopped working.\r\n\r\nWorkaround: return null from PhysicalFilePath in custom IFileInfo.\r\nhttps://github.com/dotnet/runtime/blob/9b9303678de0f5573fef580f3f52404ea0a20dd4/src/libraries/Microsoft.Extensions.Configuration.FileExtensions/src/FileConfigurationProvider.cs#L87\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emcm-ham\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `area-Extensions-FileSystem`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-01-26T18:16:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NzczMzE0Nw==",
                                           "createdAt":  "2021-01-26T18:18:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "cc: @carlossanlop ",
                                           "updatedAt":  "2021-01-26T18:18:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MTE4Njk3NA==",
                                           "createdAt":  "2021-02-01T21:57:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "The `fileInfo.PhysicalPath != null` check was introduced in https://github.com/dotnet/runtime/pull/37846.\r\n\r\n@davidfowl is that PR missing a breaking change doc? Should the user behavior be re-enabled by default or should the workaround suffice? \r\n\r\n@maryamariyan this looks to me more on the ground of `Extensions.Configuration`; what\u0027s the reason for changing the area to `Extensions.FileSystem`?\r\n\r\n",
                                           "updatedAt":  "2021-02-01T21:57:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MTE4NzE0MQ==",
                                           "createdAt":  "2021-02-01T21:57:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe built support for encrypted appsettings.json in our app by using encrypted xml support built into .NET. To integrate this we use JsonConfigurationSource with a custom File Provider to return custom IFileInfo with CreateReadStream overriden to decrypt file. Like code below:\r\n\r\n```cs\r\npublic static IConfigurationBuilder AddJsonFileProtectedByEncryptedXml(this IConfigurationBuilder builder, string path, bool optional = false, ILoggerFactory loggerFactory = null)\r\n{\r\n    var source = new JsonConfigurationSource\r\n    {\r\n        Path = path,\r\n        // Specify file provider to use so that JsonConfigurationSource can read the decrypted form of config file.\r\n        // Note config file does not need to be XML, only the container that contains the config file should be XML.\r\n        FileProvider = new EncryptedXmlContainerFileProvider(loggerFactory),\r\n        Optional = optional\r\n    };\r\n    builder.Add(source);\r\n    return builder;\r\n}\r\n```\r\n\r\nAfter upgrading to .NET 5.0 this stopped working.\r\n\r\nWorkaround: return null from PhysicalFilePath in custom IFileInfo.\r\nhttps://github.com/dotnet/runtime/blob/9b9303678de0f5573fef580f3f52404ea0a20dd4/src/libraries/Microsoft.Extensions.Configuration.FileExtensions/src/FileConfigurationProvider.cs#L87\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emcm-ham\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eJozkee\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-01T21:57:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MTIxOTAxMg==",
                                           "createdAt":  "2021-02-01T22:56:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODyo8tQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ondrejtucny",
                                                                               "createdAt":  "2024-09-18T08:42:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "We should fix it by checking if the FileProvider is exactly the PhysicalFileProvider and not a derived type.",
                                           "updatedAt":  "2021-02-01T22:56:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMzE4MjA1NA==",
                                           "createdAt":  "2021-03-19T23:05:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "niemyjski",
                                           "body":  "We are also running into this and we have a fully custom implementation of IFileProvider, returning null for PhysicalFile seemed to work",
                                           "updatedAt":  "2021-03-19T23:05:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzQyNDk0NA==",
                                           "createdAt":  "2021-05-18T18:28:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "This issue is marked `up-for-grabs`. The fix was prepared in PR https://github.com/dotnet/runtime/pull/47934. Left to do is adding a test for the failing use case.",
                                           "updatedAt":  "2021-05-18T18:28:59Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Json Configuration custom IFileProvider stopped working for .NET 5.0",
        "labels":  [
                       "bug",
                       "help wanted",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48051",
        "createdAt":  "2021-02-09T12:35:40Z",
        "number":  48051,
        "author":  "NilFusion",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCEpmwQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LazyBonez",
                                            "createdAt":  "2021-02-09T13:02:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SlimRG",
                                            "createdAt":  "2021-11-19T14:40:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "millworm",
                                            "createdAt":  "2021-11-30T21:06:35Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2021-07-22T20:31:32Z",
        "body":  "### Description\r\n\r\nI have this classes (for compatibility reasons):\r\n```\r\npublic class ConfigurationList : List\u003cConfigurationElement\u003e\r\n{\r\n\tpublic string DefaultConfigurationValue { get; set; }\r\n}\r\n\r\npublic class ConfigurationElement\r\n{\r\n\tpublic string ConfigurationValue { get; set; }\r\n}\r\n```\r\n\r\nand i want to bind them to the following configuration\r\n\r\n```\r\nvar configurationBuilder = new ConfigurationBuilder();\r\nconfigurationBuilder.AddInMemoryCollection(new Dictionary\u003cstring, string\u003e\r\n{\r\n\t[\"DefaultConfigurationValue\"] = \"!\",\r\n\t[\"0:ConfigurationValue\"] = \"1\",\r\n\t[\"1:ConfigurationValue\"] = \"2\",\r\n});\r\nvar configurationRoot = configurationBuilder.Build();\r\n```\r\n\r\nWhat i do\r\n```\r\nvar list = new ConfigurationList();\r\nconfigurationRoot.Bind(list);\r\n```\r\n\r\nWhat i expect:\r\n```\r\nAssert.AreEqual(\"!\", list.DefaultConfigurationValue);\r\nAssert.AreEqual(2, list.Count);\r\nAssert.AreEqual(\"1\", list[0].ConfigurationValue);\r\nAssert.AreEqual(\"2\", list[1].ConfigurationValue);\r\n```\r\n\r\nWhat i get:\r\n`list.DefaultConfigurationValue` is `null`\r\n\r\n### Other information\r\n\r\nI managed to temporarely (hopefully) fix this by \"forking\" `ConfigurationBinder` class and adding call `BindNonScalar(config, instance, options)` to `IDictionary\u003c,\u003e` and `ICollection\u003c\u003e` branches in method `BindInstance`, but i don\u0027t know how valid this solution is, and how it fits Binder design\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eFull test for this case (mstest-based)\u003c/summary\u003e\r\n\r\n  ```\r\n  [TestClass]\r\n  public class BinderCustomTests\r\n  {\r\n  \t[TestMethod]\r\n  \tpublic void ListWithPropertyBindingTest()\r\n  \t{\r\n  \t\tvar configurationBuilder = new ConfigurationBuilder();\r\n  \t\tconfigurationBuilder.AddInMemoryCollection(new Dictionary\u003cstring, string\u003e\r\n  \t\t{\r\n  \t\t\t[\"DefaultConfigurationValue\"] = \"!\",\r\n  \t\t\t[\"0:ConfigurationValue\"] = \"1\",\r\n  \t\t\t[\"1:ConfigurationValue\"] = \"2\",\r\n  \t\t});\r\n  \t\tvar configurationRoot = configurationBuilder.Build();\r\n\r\n  \t\tvar list = new ConfigurationList();\r\n  \t\tconfigurationRoot.Bind(list);\r\n\r\n  \t\tAssert.AreEqual(\"!\", list.DefaultConfigurationValue);\r\n  \t\tAssert.AreEqual(2, list.Count);\r\n  \t\tAssert.AreEqual(\"1\", list[0].ConfigurationValue);\r\n  \t\tAssert.AreEqual(\"2\", list[1].ConfigurationValue);\r\n  \t}\r\n\r\n  \tpublic class ConfigurationList : List\u003cConfigurationElement\u003e\r\n  \t{\r\n  \t\tpublic string DefaultConfigurationValue { get; set; }\r\n  \t}\r\n\r\n  \tpublic class ConfigurationElement\r\n  \t{\r\n  \t\tpublic string ConfigurationValue { get; set; }\r\n  \t}\r\n  }\r\n  ```\r\n\u003c/details\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOL-WPNA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NTkwNTcyNw==",
                                           "createdAt":  "2021-02-09T12:35:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI have this classes (for compatibility reasons):\r\n```\r\npublic class ConfigurationList : List\u003cConfigurationElement\u003e\r\n{\r\n\tpublic string DefaultConfigurationValue { get; set; }\r\n}\r\n\r\npublic class ConfigurationElement\r\n{\r\n\tpublic string ConfigurationValue { get; set; }\r\n}\r\n```\r\n\r\nand i want to bind them to the following configuration\r\n\r\n```\r\nvar configurationBuilder = new ConfigurationBuilder();\r\nconfigurationBuilder.AddInMemoryCollection(new Dictionary\u003cstring, string\u003e\r\n{\r\n\t[\"DefaultConfigurationValue\"] = \"!\",\r\n\t[\"0:ConfigurationValue\"] = \"1\",\r\n\t[\"1:ConfigurationValue\"] = \"2\",\r\n});\r\nvar configurationRoot = configurationBuilder.Build();\r\n```\r\n\r\nWhat i do\r\n```\r\nvar list = new ConfigurationList();\r\nconfigurationRoot.Bind(list);\r\n```\r\n\r\nWhat i expect:\r\n```\r\nAssert.AreEqual(\"!\", list.DefaultConfigurationValue);\r\nAssert.AreEqual(2, list.Count);\r\nAssert.AreEqual(\"1\", list[0].ConfigurationValue);\r\nAssert.AreEqual(\"2\", list[1].ConfigurationValue);\r\n```\r\n\r\nWhat i get:\r\n`list.DefaultConfigurationValue` is `null`\r\n\r\n### Other information\r\n\r\nI managed to temporarely (hopefully) fix this by \"forking\" `ConfigurationBinder` class and adding call `BindNonScalar(config, instance, options)` to `IDictionary\u003c,\u003e` and `ICollection\u003c\u003e` branches in method `BindInstance`, but i don\u0027t know how valid this solution is, and how it fits Binder design\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eFull test for this case (mstest-based)\u003c/summary\u003e\r\n\r\n  ```\r\n  [TestClass]\r\n  public class BinderCustomTests\r\n  {\r\n  \t[TestMethod]\r\n  \tpublic void ListWithPropertyBindingTest()\r\n  \t{\r\n  \t\tvar configurationBuilder = new ConfigurationBuilder();\r\n  \t\tconfigurationBuilder.AddInMemoryCollection(new Dictionary\u003cstring, string\u003e\r\n  \t\t{\r\n  \t\t\t[\"DefaultConfigurationValue\"] = \"!\",\r\n  \t\t\t[\"0:ConfigurationValue\"] = \"1\",\r\n  \t\t\t[\"1:ConfigurationValue\"] = \"2\",\r\n  \t\t});\r\n  \t\tvar configurationRoot = configurationBuilder.Build();\r\n\r\n  \t\tvar list = new ConfigurationList();\r\n  \t\tconfigurationRoot.Bind(list);\r\n\r\n  \t\tAssert.AreEqual(\"!\", list.DefaultConfigurationValue);\r\n  \t\tAssert.AreEqual(2, list.Count);\r\n  \t\tAssert.AreEqual(\"1\", list[0].ConfigurationValue);\r\n  \t\tAssert.AreEqual(\"2\", list[1].ConfigurationValue);\r\n  \t}\r\n\r\n  \tpublic class ConfigurationList : List\u003cConfigurationElement\u003e\r\n  \t{\r\n  \t\tpublic string DefaultConfigurationValue { get; set; }\r\n  \t}\r\n\r\n  \tpublic class ConfigurationElement\r\n  \t{\r\n  \t\tpublic string ConfigurationValue { get; set; }\r\n  \t}\r\n  }\r\n  ```\r\n\u003c/details\u003e\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNilFusion\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-09T12:35:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMzU3MzU1Ng==",
                                           "createdAt":  "2021-03-21T12:51:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wzchua",
                                           "body":  "for `IDictionary\u003c,\u003e` should we prefer the property or populate both property and dictionary collection?",
                                           "updatedAt":  "2021-03-21T12:51:54Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Microsoft.Extensions.Configuration binding to collection with custom properties",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48839",
        "createdAt":  "2021-02-26T18:28:04Z",
        "number":  48839,
        "author":  "TofuBug",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-10T11:39:51Z",
        "body":  "## Background and Motivation\r\n\r\nAs spelled out in [https://github.com/dotnet/runtime/issues/42364](url) the use of a `.UseStartup\u003cTStartup\u003e` for `IHostBuilder `was it seems morphed into more of a `IServiceConfigurer`.\r\n\r\nBut why stop there why not make this a patterns for ALL of the `I(Something)Builder` Interfaces\r\n\r\nHave a Configurer for\r\n\r\n- `ILoggingBuilder`\r\n- `IServicesCollection`\r\n- `IHostBuilder`\r\n- `IConfigurationBuilder`\r\n- `IConfiguration`\r\n- Etc\r\n\r\n## Proposed API\r\n\r\nThis is just copied from my code where I had a need to use `HostBuilder `in a .NET Core console app and I ended up seeing how far I could push the concept within the bounds of what I needed at the time so I\u0027m probably missing whole areas that could get the same treatment\r\n\r\nEssentially I have \r\n\r\nFirst out separate on its own so we have a way to separate JUST populating `IConfiguration`\r\n\r\n**IIConfigurationInitializer.cs**\r\n\r\n```\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace Configurers.IConfigurationInitializer {\r\n    public interface IIConfigurationInitializer {\r\n        IConfiguration Configuration { get; set; }\r\n    }\r\n}\r\n```\r\n\r\nThen the rest are mostly the same concepts repeated\r\n\r\n**Services**\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Configurers.Services {\r\n    public interface IServicesInitializer {\r\n\r\n        IHostBuilder InitializeServices(IHostBuilder hostbuilder, params string[] args);\r\n\r\n        IHostBuilder InitializeServices\u003cTServicesConfiguration\u003e(IHostBuilder hostBuilder, params string[] args) \r\n            where TServicesConfiguration : IIConfigurationInitializer, new();\r\n\r\n        IHostBuilder InitializeServices(IHostBuilder hostBuilder, IConfiguration configuration, params string[] args);\r\n\r\n    }\r\n}\r\n```\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace Configurers.Services {\r\n    public interface IServicesConfigurer {\r\n        IServiceCollection ConfigureServices(IServiceCollection services,params string[] args);\r\n\r\n        IServiceCollection ConfigureServices\u003cTServiceConfiguration\u003e(IServiceCollection services, params string[] args) \r\n            where TServiceConfiguration : IIConfigurationInitializer, new();\r\n\r\n        IServiceCollection ConfigureServices(IServiceCollection services, IConfiguration configuration, params string[] args);\r\n    }\r\n}\r\n```\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Configurers.Services {\r\n    public static class ServicesExtensions {\r\n        public static IHostBuilder InitializeServices\u003cTServicesInitializer\u003e(this IHostBuilder builder, params string[] args)\r\n            where TServicesInitializer : IServicesInitializer, new()\r\n            =\u003e new TServicesInitializer().InitializeServices(builder, args);\r\n\r\n        public static IHostBuilder InitializeServices\u003cTServicesInitializer\u003e(this IHostBuilder builder, IConfiguration configuration, params string[] args)\r\n            where TServicesInitializer : IServicesInitializer, new()\r\n            =\u003e new TServicesInitializer().InitializeServices(builder, configuration, args);\r\n\r\n        public static IHostBuilder InitializeServices\u003cTServicesInitializer, TServiceConfiguration\u003e(this IHostBuilder builder, params string[] args)\r\n            where TServicesInitializer : IServicesInitializer, new()\r\n            where TServiceConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e new TServicesInitializer().InitializeServices\u003cTServiceConfiguration\u003e(builder, args);\r\n\r\n        public static IServiceCollection ConfigureServices\u003cTServiceConfigurer\u003e(this IServiceCollection services, params string[] args)\r\n            where TServiceConfigurer : IServicesConfigurer, new()\r\n            =\u003e new TServiceConfigurer().ConfigureServices(services, args);\r\n\r\n        public static IServiceCollection ConfigureServices\u003cTServiceConfigurer\u003e(this IServiceCollection services, IConfiguration configuration, params string[] args)\r\n            where TServiceConfigurer : IServicesConfigurer, new()\r\n            =\u003e new TServiceConfigurer().ConfigureServices(services, configuration, args);\r\n        \r\n        public static IServiceCollection ConfigureServices\u003cTServiceConfigurer, TServiceConfiguration\u003e(this IServiceCollection services, params string[] args)\r\n            where TServiceConfigurer : IServicesConfigurer, new()\r\n            where TServiceConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e new TServiceConfigurer().ConfigureServices\u003cTServiceConfiguration\u003e(services, args);\r\n    }\r\n}\r\n```\r\n\r\n**Logging**\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nnamespace Configurers.Logging {\r\n    public interface ILoggingConfigurer {\r\n        ILoggingBuilder ConfigureLogging(ILoggingBuilder builder, params string[] args);\r\n\r\n        public ILoggingBuilder ConfigureLogging\u003cTLoggingConfiguration\u003e(ILoggingBuilder builder, params string[] args)\r\n            where TLoggingConfiguration : IIConfigurationInitializer, new();\r\n\r\n        ILoggingBuilder ConfigureLogging(ILoggingBuilder builder, IConfiguration config, params string[] args);\r\n    }\r\n}\r\n```\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace Configurers.Logging {\r\n    public interface ILoggingInitializer {\r\n        IServiceCollection InitializeLogging(IServiceCollection services, params string[] args);\r\n\r\n        IServiceCollection InitializeLogging\u003cTLoggingConfiguration\u003e(IServiceCollection services, params string[] args) \r\n            where TLoggingConfiguration : IIConfigurationInitializer, new();\r\n\r\n        IServiceCollection InitializeLogging(IServiceCollection services, IConfiguration configuration, params string[] args);\r\n    }\r\n}\r\n```\r\n\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Logging;\r\n\r\n```\r\nnamespace Configurers.Logging {\r\n    public static class LoggingExtensions {\r\n        public static IServiceCollection InitializeLogging\u003cTLoggingInitializer\u003e(this IServiceCollection services, params string[] args)\r\n            where TLoggingInitializer : ILoggingInitializer, new()\r\n            =\u003e new TLoggingInitializer().InitializeLogging(services, args);\r\n\r\n        public static IServiceCollection InitializeLogging\u003cTLoggingInitializer\u003e(this IServiceCollection services, IConfiguration configuration, params string[] args)\r\n            where TLoggingInitializer : ILoggingInitializer, new()\r\n            =\u003e new TLoggingInitializer().InitializeLogging(services, configuration, args);\r\n\r\n        public static IServiceCollection InitializeLogging\u003cTloggingInitializer, TLoggingConfiguration\u003e(this IServiceCollection services, params string[] args)\r\n            where TloggingInitializer : ILoggingInitializer, new()\r\n            where TLoggingConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e new TloggingInitializer().InitializeLogging\u003cTLoggingConfiguration\u003e(services, args);\r\n\r\n        public static ILoggingBuilder ConfigureLogging\u003cTLoggingConfigurer\u003e(this ILoggingBuilder builder, params string[] args)\r\n            where TLoggingConfigurer : ILoggingConfigurer, new()\r\n            =\u003e new TLoggingConfigurer().ConfigureLogging(builder, args);\r\n\r\n        public static ILoggingBuilder ConfigureLogging\u003cTLoggingConfigurer\u003e(this ILoggingBuilder builder, IConfiguration configuration, params string[] args)\r\n            where TLoggingConfigurer : ILoggingConfigurer, new()\r\n            =\u003e new TLoggingConfigurer().ConfigureLogging(builder, configuration , args);\r\n\r\n        public static ILoggingBuilder ConfigureLogging\u003cTLoggingConfigurer, TLoggingConfiguration\u003e(this ILoggingBuilder builder, params string[] args)\r\n            where TLoggingConfigurer : ILoggingConfigurer, new()\r\n            where TLoggingConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e new TLoggingConfigurer().ConfigureLogging\u003cTLoggingConfiguration\u003e(builder, args);\r\n    }\r\n}\r\n```\r\n\r\n**Configuration**\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace Configurers.Configuration {\r\n    public interface IConfigurationConfigurer {\r\n        IConfigurationBuilder ConfigureConfiguration(IConfigurationBuilder builder,params string[] args);\r\n\r\n        IConfigurationBuilder ConfigureConfiguration\u003cTConfigurationConfiguration\u003e(IConfigurationBuilder builder, params string[] args)\r\n            where TConfigurationConfiguration : IIConfigurationInitializer, new();\r\n\r\n        IConfigurationBuilder ConfigureConfiguration(IConfigurationBuilder builder, IConfiguration configuration, params string[] args);\r\n    }\r\n}\r\n```\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace Configurers.Configuration {\r\n    public interface IConfigurationInitializer {\r\n        IConfigurationRoot InitializeConfiguration(IConfigurationBuilder builder, params string[] args);\r\n\r\n        IConfigurationRoot InitializeConfiguration\u003cTConfigurationConfiguration\u003e(IConfigurationBuilder builder, params string[] args)\r\n            where TConfigurationConfiguration : IIConfigurationInitializer, new();\r\n\r\n        IConfigurationRoot InitializeConfiguration(IConfigurationBuilder builder, IConfiguration configuration, params string[] args);\r\n    }\r\n}\r\n```\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace Configurers.Configuration {\r\n    public static class ConfigurationExtensions {\r\n\r\n        public static IConfigurationRoot InitializeConfiguration\u003cTConfigurationInitializer\u003e(this IConfigurationBuilder builder, params string[] args)\r\n            where TConfigurationInitializer : IConfigurationInitializer, new()\r\n            =\u003e new TConfigurationInitializer().InitializeConfiguration(builder, args);\r\n\r\n        public static IConfigurationRoot InitializeConfiguration\u003cTConfigurationInitializer\u003e(this IConfigurationBuilder builder, IConfiguration configuration, params string[] args)\r\n            where TConfigurationInitializer : IConfigurationInitializer, new()\r\n            =\u003e new TConfigurationInitializer().InitializeConfiguration(builder, configuration, args);\r\n\r\n        public static IConfigurationRoot InitializeConfiguration\u003cTConfigurationInitializer, TConfigurationConfiguration\u003e(this IConfigurationBuilder builder, params string[] args)\r\n            where TConfigurationInitializer : IConfigurationInitializer, new()\r\n            where TConfigurationConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e new TConfigurationInitializer().InitializeConfiguration\u003cTConfigurationConfiguration\u003e(builder, args);\r\n        \r\n        public static IConfigurationBuilder ConfigureConfiguration\u003cTConfigurationConfigurer\u003e(this IConfigurationBuilder builder, params string[] args)\r\n            where TConfigurationConfigurer : IConfigurationConfigurer, new()\r\n            =\u003e new TConfigurationConfigurer().ConfigureConfiguration(builder, args);\r\n\r\n        public static IConfigurationBuilder ConfigureConfiguration\u003cTConfigurationConfigurer\u003e(this IConfigurationBuilder builder, IConfiguration configuration, params string[] args)\r\n            where TConfigurationConfigurer : IConfigurationConfigurer, new()\r\n            =\u003e new TConfigurationConfigurer().ConfigureConfiguration(builder, configuration, args);\r\n\r\n        public static IConfigurationBuilder ConfigureConfiguration\u003cTConfigurationConfigurer, TConfigurationConfiguration\u003e(this IConfigurationBuilder builder, params string[] args)\r\n            where TConfigurationConfigurer : IConfigurationConfigurer, new()\r\n            where TConfigurationConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e new TConfigurationConfigurer().ConfigureConfiguration\u003cTConfigurationConfiguration\u003e(builder, args);\r\n    }\r\n}\r\n```\r\n\r\n**AppConfiguration**\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Configurers.AppConfiguration {\r\n    public interface IAppConfigurationInitializer {\r\n        IHostBuilder InitializeAppConfiguration(IHostBuilder hostBuilder, params string[] args);\r\n\r\n        IHostBuilder InitializeAppConfiguration\u003cTAppConfiguration\u003e(IHostBuilder hostBuilder, params string[] args)\r\n            where TAppConfiguration : IIConfigurationInitializer, new();\r\n\r\n        IHostBuilder InitializeAppConfiguration(IHostBuilder hostBuilder, IConfiguration configuration, params string[] args);\r\n    }\r\n}\r\n```\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Configurers.AppConfiguration {\r\n    public static class AppConfigurationExtensions {\r\n        public static IHostBuilder InitializeAppConfiguration\u003cTAppConfigurationInitializer\u003e(this IHostBuilder builder, params string[] args)\r\n            where TAppConfigurationInitializer : IAppConfigurationInitializer, new()\r\n            =\u003e new TAppConfigurationInitializer().InitializeAppConfiguration(builder, args);\r\n\r\n        public static IHostBuilder InitializeAppConfiguration\u003cTAppConfigurationInitializer\u003e(this IHostBuilder builder, IConfiguration configuration, params string[] args)\r\n            where TAppConfigurationInitializer : IAppConfigurationInitializer, new()\r\n            =\u003e new TAppConfigurationInitializer().InitializeAppConfiguration(builder, configuration, args);\r\n\r\n        public static IHostBuilder InitializeAppConfiguration\u003cTAppConfigurationInitializer, TAppConfigurationConfiguration\u003e(this IHostBuilder builder, params string[] args)\r\n            where TAppConfigurationInitializer : IAppConfigurationInitializer, new()\r\n            where TAppConfigurationConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e new TAppConfigurationInitializer().InitializeAppConfiguration\u003cTAppConfigurationConfiguration\u003e(builder, args);\r\n    }\r\n}\r\n```\r\n\r\n**HostConfiguration**\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Configurers.HostConfiguration {\r\n    public interface IHostConfigurationInitializer {\r\n        IHostBuilder InitializeHostConfiguration(IHostBuilder hostBuilder, params string[] args);\r\n\r\n        IHostBuilder InitializeHostConfiguration\u003cTHostConfiguration\u003e(IHostBuilder hostBuilder, params string[] args)\r\n            where THostConfiguration : IIConfigurationInitializer, new();\r\n\r\n        IHostBuilder InitializeHostConfiguration(IHostBuilder hostBuilder, IConfiguration configuration, params string[] args);\r\n    }\r\n}\r\n```\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Configurers.HostConfiguration {\r\n    public static class HostConfigurersExtensions {\r\n\r\n        public static IHostBuilder InitializeHostConfiguration\u003cTHostConfigurationInitializer\u003e(this IHostBuilder builder, params string[] args)\r\n            where THostConfigurationInitializer : IHostConfigurationInitializer, new()\r\n            =\u003e new THostConfigurationInitializer().InitializeHostConfiguration(builder, args);\r\n\r\n        public static IHostBuilder InitializeHostConfiguration\u003cTHostConfigurationInitializer\u003e(this IHostBuilder builder, IConfiguration configuration, params string[] args)\r\n            where THostConfigurationInitializer : IHostConfigurationInitializer, new()\r\n            =\u003e new THostConfigurationInitializer().InitializeHostConfiguration(builder, configuration, args);\r\n\r\n        public static IHostBuilder InitializeHostConfiguration\u003cTHostConfigurationInitializer, THostConfigurationConfiguration\u003e(this IHostBuilder builder, params string[] args)\r\n            where THostConfigurationInitializer : IHostConfigurationInitializer, new()\r\n            where THostConfigurationConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e new THostConfigurationInitializer().InitializeHostConfiguration\u003cTHostConfigurationConfiguration\u003e(builder, args);\r\n    }\r\n}\r\n```\r\n\r\n**Host**\r\n\r\n```\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Configurers.Host {\r\n    public interface IHostConfigurer {\r\n        IHostBuilder ConfigureHost(IHostBuilder hostBuilder,params string[] args);\r\n    }\r\n}\r\n```\r\n\r\n```\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Configurers.Host {\r\n    public interface IHostConfigurationInitializer {\r\n        IHost InitializeHost(IHostBuilder hostBuilder,params string[] args);\r\n    }\r\n}\r\n```\r\n\r\n```\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Configurers.Host {\r\n    public static class HostConfigurersExtensions {\r\n\r\n        public static IHostBuilder ConfigureHost\u003cTHostConfigurer\u003e(this IHostBuilder builder, params string[] args)\r\n            where THostConfigurer : IHostConfigurer, new()\r\n            =\u003e new THostConfigurer().ConfigureHost(builder, args);\r\n\r\n        public static IHost InitializeHost\u003cTHostInitializer\u003e(this IHostBuilder hostBuilder, params string[] args)\r\n            where THostInitializer : IHostConfigurationInitializer, new()\r\n            =\u003e new THostInitializer().InitializeHost(hostBuilder, args);\r\n    }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\n**Program.cs**\r\n\r\n```\r\nusing Configurers.Host;\r\nusing ConsoleHost;\r\nusing daemon_console.Initializers;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace daemon_console {\r\n    class Program {\r\n        static void Main(string[] args) \r\n            =\u003e Host\r\n                .CreateDefaultBuilder()\r\n                .InitializeHost\u003cHostInitializer\u003e(args)\r\n                .RunConsole();\r\n    }\r\n}\r\n```\r\n\r\n**HostInitializer.cs**\r\n\r\n```\r\nusing Configurers.Host;\r\nusing ConsoleHost;\r\nusing daemon_console.Configurers;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace daemon_console.Initializers {\r\n    class HostInitializer : IHostConfigurationInitializer {\r\n        public IHost InitializeHost(IHostBuilder hostBuilder, params string[] args) {\r\n            var host = hostBuilder.ConfigureHost\u003cHostConfigurer\u003e(args).Build();\r\n            host.Services.GetService\u003cIEntryPoint\u003e().Arguments = args;\r\n            return host;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**HostConfigurer.cs**\r\n\r\n```\r\nusing Configurers.AppConfiguration;\r\nusing Configurers.Host;\r\nusing Configurers.Services;\r\nusing daemon_console.AllTogether;\r\nusing daemon_console.Configurations;\r\nusing daemon_console.Initializers;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace daemon_console.Configurers {\r\n    class HostConfigurer : IHostConfigurer {\r\n        public IHostBuilder ConfigureHost(IHostBuilder hostBuilder, params string[] args)\r\n            =\u003e hostBuilder\r\n                // You can either separate out functionality into individual Classes\r\n                .InitializeAppConfiguration\u003cAppConfigurationInitializer,AppConfiguration\u003e(args)\r\n                // Or inherit multiple interfaces and reuse the Class for multiple functions\r\n                .InitializeServices\u003cServices, Services\u003e(args);\r\n    }\r\n}\r\n```\r\n\r\n**AppConfigurationInitializer.cs**\r\n\r\n```\r\nusing Configurers.AppConfiguration;\r\nusing Configurers.Configuration;\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace daemon_console.Initializers {\r\n    class AppConfigurationInitializer : IAppConfigurationInitializer {\r\n        public IHostBuilder InitializeAppConfiguration(IHostBuilder hostBuilder, params string[] args)\r\n            =\u003e hostBuilder.ConfigureAppConfiguration(builder =\u003e builder.InitializeConfiguration\u003cAppConfigurationConfigurationInitializer\u003e(args));\r\n\r\n        public IHostBuilder InitializeAppConfiguration\u003cTAppConfigurationConfiguration\u003e(IHostBuilder hostBuilder, params string[] args)\r\n            where TAppConfigurationConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e hostBuilder.ConfigureAppConfiguration(builder =\u003e builder.InitializeConfiguration\u003cAppConfigurationConfigurationInitializer,TAppConfigurationConfiguration\u003e(args));\r\n\r\n        public IHostBuilder InitializeAppConfiguration(IHostBuilder hostBuilder, IConfiguration configuration, params string[] args)\r\n            =\u003e hostBuilder.ConfigureAppConfiguration(builder =\u003e builder.InitializeConfiguration\u003cAppConfigurationConfigurationInitializer\u003e(configuration, args));\r\n    }\r\n}\r\n```\r\n\r\n**AppConfigurationConfigurationInitializer.cs**\r\n\r\n```\r\nusing Configurers.Configuration;\r\nusing Configurers.IConfigurationInitializer;\r\nusing daemon_console.Configurers;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace daemon_console.Initializers {\r\n    class AppConfigurationConfigurationInitializer : IConfigurationInitializer {\r\n        public IConfigurationRoot InitializeConfiguration(IConfigurationBuilder builder, params string[] args)\r\n            =\u003e builder.ConfigureConfiguration\u003cAppConfigurationConfigurationConfigurer\u003e(args).Build();\r\n\r\n        public IConfigurationRoot InitializeConfiguration\u003cTConfigurationConfiguration\u003e(IConfigurationBuilder builder, params string[] args)\r\n            where TConfigurationConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e builder.ConfigureConfiguration\u003cAppConfigurationConfigurationConfigurer, TConfigurationConfiguration\u003e(args).Build();\r\n\r\n        public IConfigurationRoot InitializeConfiguration(IConfigurationBuilder builder, IConfiguration configuration, params string[] args)\r\n            =\u003e builder.ConfigureConfiguration\u003cAppConfigurationConfigurationConfigurer\u003e(configuration, args).Build();\r\n    }\r\n}\r\n```\r\n\r\n**AppConfigurationConfigurationConfigurer.cs**\r\n\r\n```\r\nusing Configurers.Configuration;\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace daemon_console.Configurers {\r\n\r\n    public class AppConfigurationConfigurationConfigurer : IConfigurationConfigurer {\r\n\r\n        public IConfigurationBuilder ConfigureConfiguration(IConfigurationBuilder builder, params string[] args)\r\n            =\u003e builder\r\n                .SetBasePath(System.IO.Directory.GetCurrentDirectory())\r\n                .AddJsonFile(\"appsettings.json\", false, true);\r\n\r\n        public IConfigurationBuilder ConfigureConfiguration\u003cTConfigurationConfiguration\u003e(IConfigurationBuilder builder, params string[] args)\r\n            where TConfigurationConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e builder\r\n                .SetBasePath(System.IO.Directory.GetCurrentDirectory())\r\n                .AddJsonFile(\"appsettings.json\", false, true);\r\n\r\n        public IConfigurationBuilder ConfigureConfiguration(IConfigurationBuilder builder, IConfiguration configuration, params string[] args)\r\n            =\u003e builder\r\n                .SetBasePath(System.IO.Directory.GetCurrentDirectory())\r\n                .AddJsonFile(\"appsettings.json\", false, true);\r\n    }\r\n}\r\n```\r\n\r\n**Services.cs**\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Configurers.Logging;\r\nusing Configurers.Services;\r\nusing ConsoleHost;\r\nusing daemon_console.Configurations;\r\nusing daemon_console.EntryPoints;\r\nusing daemon_console.Initializers;\r\nusing GraphConnector;\r\nusing GraphConnector.Interfaces;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace daemon_console.AllTogether {\r\n    class Services : IServicesInitializer, IServicesConfigurer, IIConfigurationInitializer {\r\n        public IConfiguration Configuration { get; set; }\r\n\r\n        public IHostBuilder InitializeServices(IHostBuilder hostbuilder, params string[] args)\r\n                =\u003e hostbuilder.ConfigureServices(services =\u003e services.ConfigureServices\u003cServices\u003e(args));\r\n\r\n        public IHostBuilder InitializeServices\u003cTServicesConfiguration\u003e(IHostBuilder hostBuilder, params string[] args) where TServicesConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e hostBuilder.ConfigureServices(services =\u003e services.ConfigureServices\u003cServices, TServicesConfiguration\u003e(args));\r\n\r\n        public IHostBuilder InitializeServices(IHostBuilder hostBuilder, IConfiguration configuration, params string[] args)\r\n            =\u003e hostBuilder.ConfigureServices(services =\u003e services.ConfigureServices\u003cServices\u003e(configuration, args));\r\n\r\n        public IServiceCollection ConfigureServices(IServiceCollection services, params string[] args)\r\n            =\u003e services\r\n                .InitializeLogging\u003cLoggingInitializer\u003e(args)\r\n                .AddScoped\u003cIDirectoryAccess, WebAADGraph\u003e()\r\n                .AddConsoleEntryPoint\u003cConsoleAppEntryPoint\u003e();\r\n\r\n        public IServiceCollection ConfigureServices\u003cTServicesConfiguration\u003e(IServiceCollection services, params string[] args)\r\n            where TServicesConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e services\r\n                .InitializeLogging\u003cLoggingInitializer, LoggingConfiguration\u003e(args)\r\n                .AddScoped\u003cIDirectoryAccess, WebAADGraph\u003e()\r\n                .AddConsoleEntryPoint\u003cConsoleAppEntryPoint\u003e();\r\n\r\n        public IServiceCollection ConfigureServices(IServiceCollection services, IConfiguration configuration, params string[] args)\r\n            =\u003e services\r\n                .InitializeLogging\u003cLoggingInitializer\u003e(configuration,args)\r\n                .AddScoped\u003cIDirectoryAccess, WebAADGraph\u003e()\r\n                .AddConsoleEntryPoint\u003cConsoleAppEntryPoint\u003e();\r\n    }\r\n}\r\n```\r\n\r\n**LoggingInitializer.cs**\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Configurers.Logging;\r\nusing daemon_console.Configurations;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace daemon_console.Initializers {\r\n    class LoggingInitializer : ILoggingInitializer {\r\n        public IServiceCollection InitializeLogging(IServiceCollection services, params string[] args)\r\n            =\u003e services.AddLogging(builder =\u003e builder.ConfigureLogging\u003cLoggingConfigurer\u003e(args));\r\n\r\n        public IServiceCollection InitializeLogging\u003cTLoggingConfiguration\u003e(IServiceCollection services, params string[] args)\r\n            where TLoggingConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e services.AddLogging(builder =\u003e builder.ConfigureLogging\u003cLoggingConfigurer, TLoggingConfiguration\u003e(args));\r\n\r\n        public IServiceCollection InitializeLogging(IServiceCollection services, IConfiguration configuration, params string[] args)\r\n            =\u003e services.AddLogging(builder =\u003e builder.ConfigureLogging\u003cLoggingConfigurer\u003e());\r\n    }\r\n}\r\n```\r\n\r\n**LoggingConfigurer.cs**\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Configurers.Logging;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Logging;\r\nusing Microsoft.Extensions.Logging.EventLog;\r\n\r\nnamespace daemon_console.Configurations {\r\n    class LoggingConfigurer : ILoggingConfigurer {\r\n\r\n        public ILoggingBuilder ConfigureLogging(ILoggingBuilder builder, IConfiguration config, params string[] args) \r\n            =\u003e builder\r\n                .ClearProviders()\r\n                .AddEventSourceLogger()\r\n                .AddConsole()\r\n                .AddDebug()\r\n                .AddEventLog(config.GetSection(\"Logging:EventLog\").Get\u003cEventLogSettings\u003e())\r\n                .AddConfiguration(config.GetSection(\"Logging\"));\r\n\r\n        public ILoggingBuilder ConfigureLogging\u003cTLoggingConfiguration\u003e(ILoggingBuilder builder, params string[] args)\r\n            where TLoggingConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e builder\r\n                .ClearProviders()\r\n                .AddEventSourceLogger()\r\n                .AddConsole()\r\n                .AddDebug()\r\n                .AddEventLog(new TLoggingConfiguration().Configuration.GetSection(\"Logging:EventLog\").Get\u003cEventLogSettings\u003e())\r\n                .AddConfiguration(new TLoggingConfiguration().Configuration.GetSection(\"Logging\"));\r\n\r\n        public ILoggingBuilder ConfigureLogging(ILoggingBuilder builder, params string[] args) =\u003e builder;\r\n    }\r\n}\r\n```\r\n\r\n**LoggingConfiguration.cs**\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace daemon_console.Configurations {\r\n    class LoggingConfiguration : IIConfigurationInitializer {\r\n        public IConfiguration Configuration { get; set; }\r\n\r\n        public LoggingConfiguration() {\r\n            Configuration = new ConfigurationBuilder()\r\n               .SetBasePath(System.IO.Directory.GetCurrentDirectory())\r\n               .AddJsonFile(\"appsettings.json\", false, true)\r\n               .Build();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Alternative Designs\r\n\r\nNone\r\n\r\n## Risks\r\n\r\nI feel like I don\u0027t know enough to accurately define the risks. I specifically separated things into _Initializers_ and _Configurers_ so that you could slot either into an existing Chain of methods building out a host or logging, etc.\r\n\r\nI\u0027m really muddy on how things work down where things reuse the IConfigurationBuilder such as HostConfiguration and AppConfiguration so it\u0027s possible some of what I did could be refactored better.\r\n\r\nI guess the biggest risk I could see is having 3 overloads for most of the _Initializers_ and _Configurers_ needing to be implemented when you create a class based on the contract.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwy3v9A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NjgxNzg4Mw==",
                                           "createdAt":  "2021-02-26T18:28:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\nAs spelled out in [https://github.com/dotnet/runtime/issues/42364](url) the use of a `.UseStartup\u003cTStartup\u003e` for `IHostBuilder `was it seems morphed into more of a `IServiceConfigurer`.\r\n\r\nBut why stop there why not make this a patterns for ALL of the `I(Something)Builder` Interfaces\r\n\r\nHave a Configurer for\r\n\r\n- `ILoggingBuilder`\r\n- `IServicesCollection`\r\n- `IHostBuilder`\r\n- `IConfigurationBuilder`\r\n- `IConfiguration`\r\n- Etc\r\n\r\n## Proposed API\r\n\r\nThis is just copied from my code where I had a need to use `HostBuilder `in a .NET Core console app and I ended up seeing how far I could push the concept within the bounds of what I needed at the time so I\u0027m probably missing whole areas that could get the same treatment\r\n\r\nEssentially I have \r\n\r\nFirst out separate on its own so we have a way to separate JUST populating `IConfiguration`\r\n\r\n**IIConfigurationInitializer.cs**\r\n\r\n```\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace Configurers.IConfigurationInitializer {\r\n    public interface IIConfigurationInitializer {\r\n        IConfiguration Configuration { get; set; }\r\n    }\r\n}\r\n```\r\n\r\nThen the rest are mostly the same concepts repeated\r\n\r\n**Services**\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Configurers.Services {\r\n    public interface IServicesInitializer {\r\n\r\n        IHostBuilder InitializeServices(IHostBuilder hostbuilder, params string[] args);\r\n\r\n        IHostBuilder InitializeServices\u003cTServicesConfiguration\u003e(IHostBuilder hostBuilder, params string[] args) \r\n            where TServicesConfiguration : IIConfigurationInitializer, new();\r\n\r\n        IHostBuilder InitializeServices(IHostBuilder hostBuilder, IConfiguration configuration, params string[] args);\r\n\r\n    }\r\n}\r\n```\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace Configurers.Services {\r\n    public interface IServicesConfigurer {\r\n        IServiceCollection ConfigureServices(IServiceCollection services,params string[] args);\r\n\r\n        IServiceCollection ConfigureServices\u003cTServiceConfiguration\u003e(IServiceCollection services, params string[] args) \r\n            where TServiceConfiguration : IIConfigurationInitializer, new();\r\n\r\n        IServiceCollection ConfigureServices(IServiceCollection services, IConfiguration configuration, params string[] args);\r\n    }\r\n}\r\n```\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Configurers.Services {\r\n    public static class ServicesExtensions {\r\n        public static IHostBuilder InitializeServices\u003cTServicesInitializer\u003e(this IHostBuilder builder, params string[] args)\r\n            where TServicesInitializer : IServicesInitializer, new()\r\n            =\u003e new TServicesInitializer().InitializeServices(builder, args);\r\n\r\n        public static IHostBuilder InitializeServices\u003cTServicesInitializer\u003e(this IHostBuilder builder, IConfiguration configuration, params string[] args)\r\n            where TServicesInitializer : IServicesInitializer, new()\r\n            =\u003e new TServicesInitializer().InitializeServices(builder, configuration, args);\r\n\r\n        public static IHostBuilder InitializeServices\u003cTServicesInitializer, TServiceConfiguration\u003e(this IHostBuilder builder, params string[] args)\r\n            where TServicesInitializer : IServicesInitializer, new()\r\n            where TServiceConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e new TServicesInitializer().InitializeServices\u003cTServiceConfiguration\u003e(builder, args);\r\n\r\n        public static IServiceCollection ConfigureServices\u003cTServiceConfigurer\u003e(this IServiceCollection services, params string[] args)\r\n            where TServiceConfigurer : IServicesConfigurer, new()\r\n            =\u003e new TServiceConfigurer().ConfigureServices(services, args);\r\n\r\n        public static IServiceCollection ConfigureServices\u003cTServiceConfigurer\u003e(this IServiceCollection services, IConfiguration configuration, params string[] args)\r\n            where TServiceConfigurer : IServicesConfigurer, new()\r\n            =\u003e new TServiceConfigurer().ConfigureServices(services, configuration, args);\r\n        \r\n        public static IServiceCollection ConfigureServices\u003cTServiceConfigurer, TServiceConfiguration\u003e(this IServiceCollection services, params string[] args)\r\n            where TServiceConfigurer : IServicesConfigurer, new()\r\n            where TServiceConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e new TServiceConfigurer().ConfigureServices\u003cTServiceConfiguration\u003e(services, args);\r\n    }\r\n}\r\n```\r\n\r\n**Logging**\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nnamespace Configurers.Logging {\r\n    public interface ILoggingConfigurer {\r\n        ILoggingBuilder ConfigureLogging(ILoggingBuilder builder, params string[] args);\r\n\r\n        public ILoggingBuilder ConfigureLogging\u003cTLoggingConfiguration\u003e(ILoggingBuilder builder, params string[] args)\r\n            where TLoggingConfiguration : IIConfigurationInitializer, new();\r\n\r\n        ILoggingBuilder ConfigureLogging(ILoggingBuilder builder, IConfiguration config, params string[] args);\r\n    }\r\n}\r\n```\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace Configurers.Logging {\r\n    public interface ILoggingInitializer {\r\n        IServiceCollection InitializeLogging(IServiceCollection services, params string[] args);\r\n\r\n        IServiceCollection InitializeLogging\u003cTLoggingConfiguration\u003e(IServiceCollection services, params string[] args) \r\n            where TLoggingConfiguration : IIConfigurationInitializer, new();\r\n\r\n        IServiceCollection InitializeLogging(IServiceCollection services, IConfiguration configuration, params string[] args);\r\n    }\r\n}\r\n```\r\n\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Logging;\r\n\r\n```\r\nnamespace Configurers.Logging {\r\n    public static class LoggingExtensions {\r\n        public static IServiceCollection InitializeLogging\u003cTLoggingInitializer\u003e(this IServiceCollection services, params string[] args)\r\n            where TLoggingInitializer : ILoggingInitializer, new()\r\n            =\u003e new TLoggingInitializer().InitializeLogging(services, args);\r\n\r\n        public static IServiceCollection InitializeLogging\u003cTLoggingInitializer\u003e(this IServiceCollection services, IConfiguration configuration, params string[] args)\r\n            where TLoggingInitializer : ILoggingInitializer, new()\r\n            =\u003e new TLoggingInitializer().InitializeLogging(services, configuration, args);\r\n\r\n        public static IServiceCollection InitializeLogging\u003cTloggingInitializer, TLoggingConfiguration\u003e(this IServiceCollection services, params string[] args)\r\n            where TloggingInitializer : ILoggingInitializer, new()\r\n            where TLoggingConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e new TloggingInitializer().InitializeLogging\u003cTLoggingConfiguration\u003e(services, args);\r\n\r\n        public static ILoggingBuilder ConfigureLogging\u003cTLoggingConfigurer\u003e(this ILoggingBuilder builder, params string[] args)\r\n            where TLoggingConfigurer : ILoggingConfigurer, new()\r\n            =\u003e new TLoggingConfigurer().ConfigureLogging(builder, args);\r\n\r\n        public static ILoggingBuilder ConfigureLogging\u003cTLoggingConfigurer\u003e(this ILoggingBuilder builder, IConfiguration configuration, params string[] args)\r\n            where TLoggingConfigurer : ILoggingConfigurer, new()\r\n            =\u003e new TLoggingConfigurer().ConfigureLogging(builder, configuration , args);\r\n\r\n        public static ILoggingBuilder ConfigureLogging\u003cTLoggingConfigurer, TLoggingConfiguration\u003e(this ILoggingBuilder builder, params string[] args)\r\n            where TLoggingConfigurer : ILoggingConfigurer, new()\r\n            where TLoggingConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e new TLoggingConfigurer().ConfigureLogging\u003cTLoggingConfiguration\u003e(builder, args);\r\n    }\r\n}\r\n```\r\n\r\n**Configuration**\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace Configurers.Configuration {\r\n    public interface IConfigurationConfigurer {\r\n        IConfigurationBuilder ConfigureConfiguration(IConfigurationBuilder builder,params string[] args);\r\n\r\n        IConfigurationBuilder ConfigureConfiguration\u003cTConfigurationConfiguration\u003e(IConfigurationBuilder builder, params string[] args)\r\n            where TConfigurationConfiguration : IIConfigurationInitializer, new();\r\n\r\n        IConfigurationBuilder ConfigureConfiguration(IConfigurationBuilder builder, IConfiguration configuration, params string[] args);\r\n    }\r\n}\r\n```\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace Configurers.Configuration {\r\n    public interface IConfigurationInitializer {\r\n        IConfigurationRoot InitializeConfiguration(IConfigurationBuilder builder, params string[] args);\r\n\r\n        IConfigurationRoot InitializeConfiguration\u003cTConfigurationConfiguration\u003e(IConfigurationBuilder builder, params string[] args)\r\n            where TConfigurationConfiguration : IIConfigurationInitializer, new();\r\n\r\n        IConfigurationRoot InitializeConfiguration(IConfigurationBuilder builder, IConfiguration configuration, params string[] args);\r\n    }\r\n}\r\n```\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace Configurers.Configuration {\r\n    public static class ConfigurationExtensions {\r\n\r\n        public static IConfigurationRoot InitializeConfiguration\u003cTConfigurationInitializer\u003e(this IConfigurationBuilder builder, params string[] args)\r\n            where TConfigurationInitializer : IConfigurationInitializer, new()\r\n            =\u003e new TConfigurationInitializer().InitializeConfiguration(builder, args);\r\n\r\n        public static IConfigurationRoot InitializeConfiguration\u003cTConfigurationInitializer\u003e(this IConfigurationBuilder builder, IConfiguration configuration, params string[] args)\r\n            where TConfigurationInitializer : IConfigurationInitializer, new()\r\n            =\u003e new TConfigurationInitializer().InitializeConfiguration(builder, configuration, args);\r\n\r\n        public static IConfigurationRoot InitializeConfiguration\u003cTConfigurationInitializer, TConfigurationConfiguration\u003e(this IConfigurationBuilder builder, params string[] args)\r\n            where TConfigurationInitializer : IConfigurationInitializer, new()\r\n            where TConfigurationConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e new TConfigurationInitializer().InitializeConfiguration\u003cTConfigurationConfiguration\u003e(builder, args);\r\n        \r\n        public static IConfigurationBuilder ConfigureConfiguration\u003cTConfigurationConfigurer\u003e(this IConfigurationBuilder builder, params string[] args)\r\n            where TConfigurationConfigurer : IConfigurationConfigurer, new()\r\n            =\u003e new TConfigurationConfigurer().ConfigureConfiguration(builder, args);\r\n\r\n        public static IConfigurationBuilder ConfigureConfiguration\u003cTConfigurationConfigurer\u003e(this IConfigurationBuilder builder, IConfiguration configuration, params string[] args)\r\n            where TConfigurationConfigurer : IConfigurationConfigurer, new()\r\n            =\u003e new TConfigurationConfigurer().ConfigureConfiguration(builder, configuration, args);\r\n\r\n        public static IConfigurationBuilder ConfigureConfiguration\u003cTConfigurationConfigurer, TConfigurationConfiguration\u003e(this IConfigurationBuilder builder, params string[] args)\r\n            where TConfigurationConfigurer : IConfigurationConfigurer, new()\r\n            where TConfigurationConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e new TConfigurationConfigurer().ConfigureConfiguration\u003cTConfigurationConfiguration\u003e(builder, args);\r\n    }\r\n}\r\n```\r\n\r\n**AppConfiguration**\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Configurers.AppConfiguration {\r\n    public interface IAppConfigurationInitializer {\r\n        IHostBuilder InitializeAppConfiguration(IHostBuilder hostBuilder, params string[] args);\r\n\r\n        IHostBuilder InitializeAppConfiguration\u003cTAppConfiguration\u003e(IHostBuilder hostBuilder, params string[] args)\r\n            where TAppConfiguration : IIConfigurationInitializer, new();\r\n\r\n        IHostBuilder InitializeAppConfiguration(IHostBuilder hostBuilder, IConfiguration configuration, params string[] args);\r\n    }\r\n}\r\n```\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Configurers.AppConfiguration {\r\n    public static class AppConfigurationExtensions {\r\n        public static IHostBuilder InitializeAppConfiguration\u003cTAppConfigurationInitializer\u003e(this IHostBuilder builder, params string[] args)\r\n            where TAppConfigurationInitializer : IAppConfigurationInitializer, new()\r\n            =\u003e new TAppConfigurationInitializer().InitializeAppConfiguration(builder, args);\r\n\r\n        public static IHostBuilder InitializeAppConfiguration\u003cTAppConfigurationInitializer\u003e(this IHostBuilder builder, IConfiguration configuration, params string[] args)\r\n            where TAppConfigurationInitializer : IAppConfigurationInitializer, new()\r\n            =\u003e new TAppConfigurationInitializer().InitializeAppConfiguration(builder, configuration, args);\r\n\r\n        public static IHostBuilder InitializeAppConfiguration\u003cTAppConfigurationInitializer, TAppConfigurationConfiguration\u003e(this IHostBuilder builder, params string[] args)\r\n            where TAppConfigurationInitializer : IAppConfigurationInitializer, new()\r\n            where TAppConfigurationConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e new TAppConfigurationInitializer().InitializeAppConfiguration\u003cTAppConfigurationConfiguration\u003e(builder, args);\r\n    }\r\n}\r\n```\r\n\r\n**HostConfiguration**\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Configurers.HostConfiguration {\r\n    public interface IHostConfigurationInitializer {\r\n        IHostBuilder InitializeHostConfiguration(IHostBuilder hostBuilder, params string[] args);\r\n\r\n        IHostBuilder InitializeHostConfiguration\u003cTHostConfiguration\u003e(IHostBuilder hostBuilder, params string[] args)\r\n            where THostConfiguration : IIConfigurationInitializer, new();\r\n\r\n        IHostBuilder InitializeHostConfiguration(IHostBuilder hostBuilder, IConfiguration configuration, params string[] args);\r\n    }\r\n}\r\n```\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Configurers.HostConfiguration {\r\n    public static class HostConfigurersExtensions {\r\n\r\n        public static IHostBuilder InitializeHostConfiguration\u003cTHostConfigurationInitializer\u003e(this IHostBuilder builder, params string[] args)\r\n            where THostConfigurationInitializer : IHostConfigurationInitializer, new()\r\n            =\u003e new THostConfigurationInitializer().InitializeHostConfiguration(builder, args);\r\n\r\n        public static IHostBuilder InitializeHostConfiguration\u003cTHostConfigurationInitializer\u003e(this IHostBuilder builder, IConfiguration configuration, params string[] args)\r\n            where THostConfigurationInitializer : IHostConfigurationInitializer, new()\r\n            =\u003e new THostConfigurationInitializer().InitializeHostConfiguration(builder, configuration, args);\r\n\r\n        public static IHostBuilder InitializeHostConfiguration\u003cTHostConfigurationInitializer, THostConfigurationConfiguration\u003e(this IHostBuilder builder, params string[] args)\r\n            where THostConfigurationInitializer : IHostConfigurationInitializer, new()\r\n            where THostConfigurationConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e new THostConfigurationInitializer().InitializeHostConfiguration\u003cTHostConfigurationConfiguration\u003e(builder, args);\r\n    }\r\n}\r\n```\r\n\r\n**Host**\r\n\r\n```\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Configurers.Host {\r\n    public interface IHostConfigurer {\r\n        IHostBuilder ConfigureHost(IHostBuilder hostBuilder,params string[] args);\r\n    }\r\n}\r\n```\r\n\r\n```\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Configurers.Host {\r\n    public interface IHostConfigurationInitializer {\r\n        IHost InitializeHost(IHostBuilder hostBuilder,params string[] args);\r\n    }\r\n}\r\n```\r\n\r\n```\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace Configurers.Host {\r\n    public static class HostConfigurersExtensions {\r\n\r\n        public static IHostBuilder ConfigureHost\u003cTHostConfigurer\u003e(this IHostBuilder builder, params string[] args)\r\n            where THostConfigurer : IHostConfigurer, new()\r\n            =\u003e new THostConfigurer().ConfigureHost(builder, args);\r\n\r\n        public static IHost InitializeHost\u003cTHostInitializer\u003e(this IHostBuilder hostBuilder, params string[] args)\r\n            where THostInitializer : IHostConfigurationInitializer, new()\r\n            =\u003e new THostInitializer().InitializeHost(hostBuilder, args);\r\n    }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\n**Program.cs**\r\n\r\n```\r\nusing Configurers.Host;\r\nusing ConsoleHost;\r\nusing daemon_console.Initializers;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace daemon_console {\r\n    class Program {\r\n        static void Main(string[] args) \r\n            =\u003e Host\r\n                .CreateDefaultBuilder()\r\n                .InitializeHost\u003cHostInitializer\u003e(args)\r\n                .RunConsole();\r\n    }\r\n}\r\n```\r\n\r\n**HostInitializer.cs**\r\n\r\n```\r\nusing Configurers.Host;\r\nusing ConsoleHost;\r\nusing daemon_console.Configurers;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace daemon_console.Initializers {\r\n    class HostInitializer : IHostConfigurationInitializer {\r\n        public IHost InitializeHost(IHostBuilder hostBuilder, params string[] args) {\r\n            var host = hostBuilder.ConfigureHost\u003cHostConfigurer\u003e(args).Build();\r\n            host.Services.GetService\u003cIEntryPoint\u003e().Arguments = args;\r\n            return host;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**HostConfigurer.cs**\r\n\r\n```\r\nusing Configurers.AppConfiguration;\r\nusing Configurers.Host;\r\nusing Configurers.Services;\r\nusing daemon_console.AllTogether;\r\nusing daemon_console.Configurations;\r\nusing daemon_console.Initializers;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace daemon_console.Configurers {\r\n    class HostConfigurer : IHostConfigurer {\r\n        public IHostBuilder ConfigureHost(IHostBuilder hostBuilder, params string[] args)\r\n            =\u003e hostBuilder\r\n                // You can either separate out functionality into individual Classes\r\n                .InitializeAppConfiguration\u003cAppConfigurationInitializer,AppConfiguration\u003e(args)\r\n                // Or inherit multiple interfaces and reuse the Class for multiple functions\r\n                .InitializeServices\u003cServices, Services\u003e(args);\r\n    }\r\n}\r\n```\r\n\r\n**AppConfigurationInitializer.cs**\r\n\r\n```\r\nusing Configurers.AppConfiguration;\r\nusing Configurers.Configuration;\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace daemon_console.Initializers {\r\n    class AppConfigurationInitializer : IAppConfigurationInitializer {\r\n        public IHostBuilder InitializeAppConfiguration(IHostBuilder hostBuilder, params string[] args)\r\n            =\u003e hostBuilder.ConfigureAppConfiguration(builder =\u003e builder.InitializeConfiguration\u003cAppConfigurationConfigurationInitializer\u003e(args));\r\n\r\n        public IHostBuilder InitializeAppConfiguration\u003cTAppConfigurationConfiguration\u003e(IHostBuilder hostBuilder, params string[] args)\r\n            where TAppConfigurationConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e hostBuilder.ConfigureAppConfiguration(builder =\u003e builder.InitializeConfiguration\u003cAppConfigurationConfigurationInitializer,TAppConfigurationConfiguration\u003e(args));\r\n\r\n        public IHostBuilder InitializeAppConfiguration(IHostBuilder hostBuilder, IConfiguration configuration, params string[] args)\r\n            =\u003e hostBuilder.ConfigureAppConfiguration(builder =\u003e builder.InitializeConfiguration\u003cAppConfigurationConfigurationInitializer\u003e(configuration, args));\r\n    }\r\n}\r\n```\r\n\r\n**AppConfigurationConfigurationInitializer.cs**\r\n\r\n```\r\nusing Configurers.Configuration;\r\nusing Configurers.IConfigurationInitializer;\r\nusing daemon_console.Configurers;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace daemon_console.Initializers {\r\n    class AppConfigurationConfigurationInitializer : IConfigurationInitializer {\r\n        public IConfigurationRoot InitializeConfiguration(IConfigurationBuilder builder, params string[] args)\r\n            =\u003e builder.ConfigureConfiguration\u003cAppConfigurationConfigurationConfigurer\u003e(args).Build();\r\n\r\n        public IConfigurationRoot InitializeConfiguration\u003cTConfigurationConfiguration\u003e(IConfigurationBuilder builder, params string[] args)\r\n            where TConfigurationConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e builder.ConfigureConfiguration\u003cAppConfigurationConfigurationConfigurer, TConfigurationConfiguration\u003e(args).Build();\r\n\r\n        public IConfigurationRoot InitializeConfiguration(IConfigurationBuilder builder, IConfiguration configuration, params string[] args)\r\n            =\u003e builder.ConfigureConfiguration\u003cAppConfigurationConfigurationConfigurer\u003e(configuration, args).Build();\r\n    }\r\n}\r\n```\r\n\r\n**AppConfigurationConfigurationConfigurer.cs**\r\n\r\n```\r\nusing Configurers.Configuration;\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace daemon_console.Configurers {\r\n\r\n    public class AppConfigurationConfigurationConfigurer : IConfigurationConfigurer {\r\n\r\n        public IConfigurationBuilder ConfigureConfiguration(IConfigurationBuilder builder, params string[] args)\r\n            =\u003e builder\r\n                .SetBasePath(System.IO.Directory.GetCurrentDirectory())\r\n                .AddJsonFile(\"appsettings.json\", false, true);\r\n\r\n        public IConfigurationBuilder ConfigureConfiguration\u003cTConfigurationConfiguration\u003e(IConfigurationBuilder builder, params string[] args)\r\n            where TConfigurationConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e builder\r\n                .SetBasePath(System.IO.Directory.GetCurrentDirectory())\r\n                .AddJsonFile(\"appsettings.json\", false, true);\r\n\r\n        public IConfigurationBuilder ConfigureConfiguration(IConfigurationBuilder builder, IConfiguration configuration, params string[] args)\r\n            =\u003e builder\r\n                .SetBasePath(System.IO.Directory.GetCurrentDirectory())\r\n                .AddJsonFile(\"appsettings.json\", false, true);\r\n    }\r\n}\r\n```\r\n\r\n**Services.cs**\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Configurers.Logging;\r\nusing Configurers.Services;\r\nusing ConsoleHost;\r\nusing daemon_console.Configurations;\r\nusing daemon_console.EntryPoints;\r\nusing daemon_console.Initializers;\r\nusing GraphConnector;\r\nusing GraphConnector.Interfaces;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace daemon_console.AllTogether {\r\n    class Services : IServicesInitializer, IServicesConfigurer, IIConfigurationInitializer {\r\n        public IConfiguration Configuration { get; set; }\r\n\r\n        public IHostBuilder InitializeServices(IHostBuilder hostbuilder, params string[] args)\r\n                =\u003e hostbuilder.ConfigureServices(services =\u003e services.ConfigureServices\u003cServices\u003e(args));\r\n\r\n        public IHostBuilder InitializeServices\u003cTServicesConfiguration\u003e(IHostBuilder hostBuilder, params string[] args) where TServicesConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e hostBuilder.ConfigureServices(services =\u003e services.ConfigureServices\u003cServices, TServicesConfiguration\u003e(args));\r\n\r\n        public IHostBuilder InitializeServices(IHostBuilder hostBuilder, IConfiguration configuration, params string[] args)\r\n            =\u003e hostBuilder.ConfigureServices(services =\u003e services.ConfigureServices\u003cServices\u003e(configuration, args));\r\n\r\n        public IServiceCollection ConfigureServices(IServiceCollection services, params string[] args)\r\n            =\u003e services\r\n                .InitializeLogging\u003cLoggingInitializer\u003e(args)\r\n                .AddScoped\u003cIDirectoryAccess, WebAADGraph\u003e()\r\n                .AddConsoleEntryPoint\u003cConsoleAppEntryPoint\u003e();\r\n\r\n        public IServiceCollection ConfigureServices\u003cTServicesConfiguration\u003e(IServiceCollection services, params string[] args)\r\n            where TServicesConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e services\r\n                .InitializeLogging\u003cLoggingInitializer, LoggingConfiguration\u003e(args)\r\n                .AddScoped\u003cIDirectoryAccess, WebAADGraph\u003e()\r\n                .AddConsoleEntryPoint\u003cConsoleAppEntryPoint\u003e();\r\n\r\n        public IServiceCollection ConfigureServices(IServiceCollection services, IConfiguration configuration, params string[] args)\r\n            =\u003e services\r\n                .AddLogging(loggingBuilder =\u003e loggingBuilder.ConfigureLogging\u003cLoggingConfigurer, LoggingConfiguration\u003e(args))\r\n                .AddScoped\u003cIDirectoryAccess, WebAADGraph\u003e()\r\n                .AddConsoleEntryPoint\u003cConsoleAppEntryPoint\u003e();\r\n    }\r\n}\r\n```\r\n\r\n**LoggingInitializer.cs**\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Configurers.Logging;\r\nusing daemon_console.Configurations;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace daemon_console.Initializers {\r\n    class LoggingInitializer : ILoggingInitializer {\r\n        public IServiceCollection InitializeLogging(IServiceCollection services, params string[] args)\r\n            =\u003e services.AddLogging(builder =\u003e builder.ConfigureLogging\u003cLoggingConfigurer\u003e(args));\r\n\r\n        public IServiceCollection InitializeLogging\u003cTLoggingConfiguration\u003e(IServiceCollection services, params string[] args)\r\n            where TLoggingConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e services.AddLogging(builder =\u003e builder.ConfigureLogging\u003cLoggingConfigurer, TLoggingConfiguration\u003e(args));\r\n\r\n        public IServiceCollection InitializeLogging(IServiceCollection services, IConfiguration configuration, params string[] args)\r\n            =\u003e services.AddLogging(builder =\u003e builder.ConfigureLogging\u003cLoggingConfigurer\u003e());\r\n    }\r\n}\r\n```\r\n\r\n**LoggingConfigurer.cs**\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Configurers.Logging;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Logging;\r\nusing Microsoft.Extensions.Logging.EventLog;\r\n\r\nnamespace daemon_console.Configurations {\r\n    class LoggingConfigurer : ILoggingConfigurer {\r\n\r\n        public ILoggingBuilder ConfigureLogging(ILoggingBuilder builder, IConfiguration config, params string[] args) \r\n            =\u003e builder\r\n                .ClearProviders()\r\n                .AddEventSourceLogger()\r\n                .AddConsole()\r\n                .AddDebug()\r\n                .AddEventLog(config.GetSection(\"Logging:EventLog\").Get\u003cEventLogSettings\u003e())\r\n                .AddConfiguration(config.GetSection(\"Logging\"));\r\n\r\n        public ILoggingBuilder ConfigureLogging\u003cTLoggingConfiguration\u003e(ILoggingBuilder builder, params string[] args)\r\n            where TLoggingConfiguration : IIConfigurationInitializer, new()\r\n            =\u003e builder\r\n                .ClearProviders()\r\n                .AddEventSourceLogger()\r\n                .AddConsole()\r\n                .AddDebug()\r\n                .AddEventLog(new TLoggingConfiguration().Configuration.GetSection(\"Logging:EventLog\").Get\u003cEventLogSettings\u003e())\r\n                .AddConfiguration(new TLoggingConfiguration().Configuration.GetSection(\"Logging\"));\r\n\r\n        public ILoggingBuilder ConfigureLogging(ILoggingBuilder builder, params string[] args) =\u003e builder;\r\n    }\r\n}\r\n```\r\n\r\n**LoggingConfiguration.cs**\r\n\r\n```\r\nusing Configurers.IConfigurationInitializer;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace daemon_console.Configurations {\r\n    class LoggingConfiguration : IIConfigurationInitializer {\r\n        public IConfiguration Configuration { get; set; }\r\n\r\n        public LoggingConfiguration() {\r\n            Configuration = new ConfigurationBuilder()\r\n               .SetBasePath(System.IO.Directory.GetCurrentDirectory())\r\n               .AddJsonFile(\"appsettings.json\", false, true)\r\n               .Build();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Alternative Designs\r\n\r\nNone\r\n\r\n## Risks\r\n\r\nI feel like I don\u0027t know enough to accurately define the risks. I specifically separated things into _Initializers_ and _Configurers_ so that you could slot either into an existing Chain of methods building out a host or logging, etc.\r\n\r\nI\u0027m really muddy on how things work down where things reuse the IConfigurationBuilder such as HostConfiguration and AppConfiguration so it\u0027s possible some of what I did could be refactored better.\r\n\r\nI guess the biggest risk I could see is having 3 overloads for most of the _Initializers_ and _Configurers_ needing to be implemented when you create a class based on the contract.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTofuBug\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Configuration`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-26T18:28:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DLe_0",
                                           "createdAt":  "2025-09-10T11:39:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-10T11:39:49Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Expand out the idea proposed in #42364",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration",
                       "no-recent-activity",
                       "backlog-cleanup-candidate"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49667",
        "createdAt":  "2021-03-12T21:50:29Z",
        "number":  49667,
        "author":  "karolz-ms",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODFj9Zg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jotosmurf",
                                            "createdAt":  "2021-03-14T01:20:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jongio",
                                            "createdAt":  "2021-06-21T22:17:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pakrym",
                                            "createdAt":  "2021-12-01T18:59:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pakrym-stripe",
                                            "createdAt":  "2022-03-14T15:45:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "neilrees",
                                            "createdAt":  "2023-03-28T16:00:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "spboyer",
                                            "createdAt":  "2023-04-25T22:01:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "morg08",
                                            "createdAt":  "2024-02-22T17:58:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bugproof",
                                            "createdAt":  "2024-05-04T11:40:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MrDave1999",
                                            "createdAt":  "2024-06-23T20:32:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IEvangelist",
                                            "createdAt":  "2025-06-30T20:14:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "boukenka",
                                            "createdAt":  "2025-07-01T05:55:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KennethHoff",
                                            "createdAt":  "2025-07-03T09:19:48Z"
                                        }
                                    ],
                          "totalCount":  12
                      },
        "updatedAt":  "2025-06-30T20:22:32Z",
        "body":  "### Summary\r\nI propose that we add a configuration provider for .env files.\r\n\r\nThey are very popular and convenient in the [Linux/Docker/Docker Compose world](https://docs.docker.com/compose/env-file/). It would significantly simplify development environment configuration for services that use ASP.NET Core and require dependencies (supporting services) that run as containers. These application- and supporting services often require shared pieces of configuration, and keeping them in a single .env file is very convenient.\r\n \r\n### Describe the solution you\u0027d like\r\nA Microsoft-authored file configuration provider, similar to [existing](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-5.0#file-configuration-provider) file configuration providers like the INI- or JSON ones.\r\n\r\nI have a prototype:\r\n```csharp\r\nclass EnvFileConfigurationProvider : FileConfigurationProvider\r\n    {\r\n        public EnvFileConfigurationProvider(EnvFileConfigurationSource source) : base(source) { }\r\n\r\n        public override void Load(Stream stream)\r\n        {\r\n            var data = new Dictionary\u003cstring, string\u003e(StringComparer.OrdinalIgnoreCase);\r\n            var doubleQuotedValueRegex = new Regex(@\"\"\"([^\"\"\\\\]*(?:\\\\.[^\"\"\\\\]*)*)\"\"\");\r\n            var singleQuotedValueRegex = new Regex(@\"\u0027([^\u0027\\\\]*(?:\\\\.[^\u0027\\\\]*)*)\u0027\");\r\n\r\n            using (var reader = new StreamReader(stream))\r\n            {\r\n                while (reader.Peek() != -1)\r\n                {\r\n                    string line = reader.ReadLine().Trim();\r\n                    if (string.IsNullOrWhiteSpace(line))\r\n                    {\r\n                        continue;\r\n                    }\r\n\r\n                    if (line.StartsWith(\"#\", StringComparison.Ordinal))\r\n                    {\r\n                        continue; // It is a comment\r\n                    }\r\n\r\n                    int separator = line.IndexOf(\u0027=\u0027, StringComparison.Ordinal);\r\n                    if (separator \u003c= 0 || separator == (line.Length-1))\r\n                    {\r\n                        continue; // Multi-line values are not supported by this implementation.\r\n                    }\r\n\r\n                    string key = line.Substring(0, separator).Trim();\r\n                    if (string.IsNullOrWhiteSpace(key))\r\n                    {\r\n                        throw new FormatException(\"Configuration setting name should not be empty\");\r\n                    }\r\n\r\n                    string value = line.Substring(separator + 1).Trim();\r\n\r\n                    var doubleQuotedValue = doubleQuotedValueRegex.Match(value);\r\n                    if (doubleQuotedValue.Success)\r\n                    {\r\n                        value = doubleQuotedValue.Groups[1].Value;\r\n                    }\r\n                    else\r\n                    {\r\n                        var singleQuotedValue = singleQuotedValueRegex.Match(value);\r\n                        if (singleQuotedValue.Success)\r\n                        {\r\n                            value = singleQuotedValue.Groups[1].Value;\r\n                        }\r\n                        else\r\n                        {\r\n                            int commentStart = value.IndexOf(\" #\", StringComparison.Ordinal);\r\n                            if (commentStart \u003e 0)\r\n                            {\r\n                                value = value.Substring(0, commentStart);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    data[key] = value;\r\n                }\r\n            }\r\n\r\n            Data = data;\r\n        }\r\n    }\r\n```\r\n\r\n### Additional context\r\nIn https://github.com/hashicorp/terraform/issues/23906 a user is asking to add support for .env files to Terraform and they also list libraries that allow .env files to be consumed from Node, Python, Ruby, and Go. The Node package has 15M weekly downloads and 13k GH stars.\r\n\r\nThere is a [community NuGet package](https://www.nuget.org/packages/dotenv.net/) to parse .env files, but I propose we go a step further and have a Microsoft-authored configuration provider for these files added. It would make it much simpler to take dependency on this configuration provider from project templates for VS/VS Code, and incorporate it in examples.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtApQOw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5Nzc3NjE5Mg==",
                                           "createdAt":  "2021-03-12T21:51:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karolz-ms",
                                           "body":  "@davidfowl @glennc  FYI",
                                           "updatedAt":  "2021-03-12T21:51:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5OTcyMTExMA==",
                                           "createdAt":  "2021-03-15T20:15:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-03-15T20:15:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5OTcyMjQ2OA==",
                                           "createdAt":  "2021-03-15T20:17:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Summary\r\nI propose that we add a configuration provider for .env files.\r\n\r\nThey are very popular and convenient in the [Linux/Docker/Docker Compose world](https://docs.docker.com/compose/env-file/). It would significantly simplify development environment configuration for services that use ASP.NET Core and require dependencies (supporting services) that run as containers. These application- and supporting services often require shared pieces of configuration, and keeping them in a single .env file is very convenient.\r\n \r\n### Describe the solution you\u0027d like\r\nA Microsoft-authored file configuration provider, similar to [existing](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-5.0#file-configuration-provider) file configuration providers like the INI- or JSON ones.\r\n\r\nI have a prototype:\r\n```csharp\r\nclass EnvFileConfigurationProvider : FileConfigurationProvider\r\n    {\r\n        public EnvFileConfigurationProvider(EnvFileConfigurationSource source) : base(source) { }\r\n\r\n        public override void Load(Stream stream)\r\n        {\r\n            var data = new Dictionary\u003cstring, string\u003e(StringComparer.OrdinalIgnoreCase);\r\n            var doubleQuotedValueRegex = new Regex(@\"\"\"([^\"\"\\\\]*(?:\\\\.[^\"\"\\\\]*)*)\"\"\");\r\n            var singleQuotedValueRegex = new Regex(@\"\u0027([^\u0027\\\\]*(?:\\\\.[^\u0027\\\\]*)*)\u0027\");\r\n\r\n            using (var reader = new StreamReader(stream))\r\n            {\r\n                while (reader.Peek() != -1)\r\n                {\r\n                    string line = reader.ReadLine().Trim();\r\n                    if (string.IsNullOrWhiteSpace(line))\r\n                    {\r\n                        continue;\r\n                    }\r\n\r\n                    if (line.StartsWith(\"#\", StringComparison.Ordinal))\r\n                    {\r\n                        continue; // It is a comment\r\n                    }\r\n\r\n                    int separator = line.IndexOf(\u0027=\u0027, StringComparison.Ordinal);\r\n                    if (separator \u003c= 0 || separator == (line.Length-1))\r\n                    {\r\n                        continue; // Multi-line values are not supported by this implementation.\r\n                    }\r\n\r\n                    string key = line.Substring(0, separator).Trim();\r\n                    if (string.IsNullOrWhiteSpace(key))\r\n                    {\r\n                        throw new FormatException(\"Configuration setting name should not be empty\");\r\n                    }\r\n\r\n                    string value = line.Substring(separator + 1).Trim();\r\n\r\n                    var doubleQuotedValue = doubleQuotedValueRegex.Match(value);\r\n                    if (doubleQuotedValue.Success)\r\n                    {\r\n                        value = doubleQuotedValue.Groups[1].Value;\r\n                    }\r\n                    else\r\n                    {\r\n                        var singleQuotedValue = singleQuotedValueRegex.Match(value);\r\n                        if (singleQuotedValue.Success)\r\n                        {\r\n                            value = singleQuotedValue.Groups[1].Value;\r\n                        }\r\n                        else\r\n                        {\r\n                            int commentStart = value.IndexOf(\" #\", StringComparison.Ordinal);\r\n                            if (commentStart \u003e 0)\r\n                            {\r\n                                value = value.Substring(0, commentStart);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    data[key] = value;\r\n                }\r\n            }\r\n\r\n            Data = data;\r\n        }\r\n    }\r\n```\r\n\r\n### Additional context\r\nIn https://github.com/hashicorp/terraform/issues/23906 a user is asking to add support for .env files to Terraform and they also list libraries that allow .env files to be consumed from Node, Python, Ruby, and Go. The Node package has 15M weekly downloads and 13k GH stars.\r\n\r\nThere is a [community NuGet package](https://www.nuget.org/packages/dotenv.net/) to parse .env files, but I propose we go a step further and have a Microsoft-authored configuration provider for these files added. It would make it much simpler to take dependency on this configuration provider from project templates for VS/VS Code, and incorporate it in examples.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekarolz-ms\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-15T20:17:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NTM4MjYxNg==",
                                           "createdAt":  "2021-06-21T22:20:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jongio",
                                           "body":  "Suggestions:\r\n1. Include env var expansion. If the file contains a reference to an env var, then auto-expand it or provide an option to do so if not done by default\r\n\r\ni.e.\r\n\r\n  ```bash\r\n  export BASENAME=foo\r\n  ```\r\n  \r\n  ```\r\n  BASENAME=${BASENAME}\r\n  ```\r\n  \r\n  will auto expand to:\r\n  \r\n  ```\r\n  BASENAME=foo\r\n  ```\r\n\r\n2. Implement a generic .env file parser so it can be used stand-alone.",
                                           "updatedAt":  "2021-06-21T22:20:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5avy6z",
                                           "createdAt":  "2023-04-25T22:04:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "spboyer",
                                           "body":  "@davidfowl @glennc - +1 \r\n\r\nWould compliment Azure Developer CLI patterns and meet other language stack support for .env files.",
                                           "updatedAt":  "2023-04-25T22:04:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5awYvL",
                                           "createdAt":  "2023-04-26T01:30:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@spboyer How do you imagine this would be used in practice?",
                                           "updatedAt":  "2023-04-26T01:30:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a1E-p",
                                           "createdAt":  "2023-04-26T18:24:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "spboyer",
                                           "body":  "@davidfowl the tldr; is much like it is used for JS or Python. It is a good compliment to what dotnet is already doing with INI, JSON, etc in Microsoft.Extensions.Configuration. A community OSS project [DotEnv](https://github.com/MrDave1999/dotenv.core) is a start.\r\n\r\nSuch as API keys and database credentials, separate from the codebase. JavaScript and Python developers use the .env file in a similar way. I would suggest primarily for local dev and shared .env for polyglot devs usind .env files.\r\n\r\n Here are a few examples:\r\n\r\nSetting up environment variables: Developers use the .env file to store environment variables that are specific to the project, such as the database connection URL, API keys, and authentication tokens.\r\n\r\nKeeping sensitive information secure: Sensitive information such as passwords, keys, and other secrets are kept in the .env file, which is not committed to version control. This ensures that the information is kept safe and secure.\r\n\r\nConfiguring application settings: Developers can use the .env file to store application settings that can be easily configured, such as the port number, the log level, and other application-specific settings.\r\n\r\nTo use the .env file in JavaScript or Python, developers typically use a package such as [dotenv](https://www.npmjs.com/package/dotenv?activeTab=readme) or [python-dotenv](https://pypi.org/project/python-dotenv/) to load the environment variables from the file into the application. Once loaded, the variables can be accessed like any other environment variable within the code.",
                                           "updatedAt":  "2023-04-26T18:24:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a1bdI",
                                           "createdAt":  "2023-04-26T19:47:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jongio",
                                           "body":  "@davidfowl - Here\u0027s where we discussed this: https://youtu.be/YkEl16UsuHA?t=367",
                                           "updatedAt":  "2023-04-26T19:47:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a1gG0",
                                           "createdAt":  "2023-04-26T20:01:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I\u0027m looking for what the application would look like with this feature? Does the app check in code that references a file that isn\u0027t in the repository? Is that what people typically do? ",
                                           "updatedAt":  "2023-04-26T20:01:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a1zi4",
                                           "createdAt":  "2023-04-26T21:14:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "spboyer",
                                           "body":  "They wouldn\u0027t check in the .env files, similar to how .net uses secrets. In Python you\u0027d load the \"dot\" files and refer to the ENV and either their loaded from the .env or ENV \r\n\r\n```python\r\n# Load environment variables from .env file\r\nload_dotenv()\r\n\r\n# Access environment variables\r\ndb_host = os.getenv(\u0027DB_HOST\u0027)\r\ndb_user = os.getenv(\u0027DB_USER\u0027)\r\ndb_pass = os.getenv(\u0027DB_PASS\u0027)\r\n```",
                                           "updatedAt":  "2023-04-26T21:14:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a14eu",
                                           "createdAt":  "2023-04-26T21:36:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e They wouldn\u0027t check in the .env files, similar to how .net uses secrets. \r\n\r\nUser secrets are in a well known path. What do you suggest for env files?\r\n",
                                           "updatedAt":  "2023-04-26T21:36:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a17as",
                                           "createdAt":  "2023-04-26T21:48:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "spboyer",
                                           "body":  "Typically the .env files would be at the root, by practice this is easiest to exclude from source but obviously could be in any subdirectory, but then you need to specify the path in `dotenv` similar to dotnet with INI etc.\r\n\r\n```python\r\ndotenv_path = os.path.join(os.getcwd(), \u0027config\u0027, \u0027.env\u0027)\r\nload_dotenv(dotenv_path)\r\n```",
                                           "updatedAt":  "2023-04-26T21:48:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a18XO",
                                           "createdAt":  "2023-04-26T21:53:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "So the issue is asking for a configuration provider. This is your typical ASP.NET Core application:\r\n\r\n```C#\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// builder.Configuration.AddEnvFile( what path goes here?)\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\"/\", () =\u003e \"Hello World!\");\r\n\r\napp.Run();\r\n```\r\n\r\nWhat would the configuration provider wire up look like in this case? ",
                                           "updatedAt":  "2023-04-26T21:53:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a8lEz",
                                           "createdAt":  "2023-04-27T14:46:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "spboyer",
                                           "body":  "```\r\nvar envFilePath = @\"C:\\path\\to\\file.env\"\r\nbuilder.Configuration.AddEnvFile(envFilePath)\r\n```\r\n\r\nI think that it is simply modeled after how we handle .AddIniFile initially.",
                                           "updatedAt":  "2023-04-27T14:46:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a8lh-",
                                           "createdAt":  "2023-04-27T14:47:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "So in practice, you commit code that points to files outside of the repository. I\u0027m not a fan of this approach. What happens if I move across platforms? Should the path be relative?\r\n\r\nI see the dotenv project either does a directory search for the env file or allows you to optionally copy the env file to the output (which would make it more portable), but maybe less useful? I don\u0027t know. I know env files are commonly used in other stacks (including dock\r\n\r\n",
                                           "updatedAt":  "2023-04-27T14:54:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a8pCu",
                                           "createdAt":  "2023-04-27T14:54:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "spboyer",
                                           "body":  "Sorry perhaps poor file location sample path. Here is better what I was trying to covey.\r\n\r\n```\r\nvar builder = new ConfigurationBuilder()\r\n    .SetBasePath(AppContext.BaseDirectory)\r\n    .AddEnvFile(\"file.env\", optional: true, reloadOnChange: true);\r\n```\r\n\r\nthis being at the root of the project, as mentioned being normal practice for other languages. We would promote reaching outside of the repo.\r\n",
                                           "updatedAt":  "2023-04-27T14:54:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a8wLT",
                                           "createdAt":  "2023-04-27T15:11:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This dotenv project looks so much more complete than what\u0027s being suggested here, and works in general for all environment variables. Do you still think this is valuable to add as a config provider?",
                                           "updatedAt":  "2023-04-27T15:11:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a8-HJ",
                                           "createdAt":  "2023-04-27T15:47:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "spboyer",
                                           "body":  ".NET has great support for Environment variables already, but is missing .env support. I believe that \"in the box\" to extend known file type/pattern across stacks is a good choice. ",
                                           "updatedAt":  "2023-04-27T15:47:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a9DoL",
                                           "createdAt":  "2023-04-27T16:03:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "That doesn\u0027t answer the question though. IMO the dotenv OSS project does a better job of adding .env support to .NET than what is being suggested here. \r\n\r\nTo be specific:\r\n- This would be a configuration provider, it doesn\u0027t match what dotenv generally (setting environment variables)\r\n- I\u0027m not sure how the .env file is discovered. It seems like there needs to be a convention around how these files are discovered that doesn\u0027t lead users into a pattern where they end up checking in physical paths.",
                                           "updatedAt":  "2023-04-27T16:03:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a9IO3",
                                           "createdAt":  "2023-04-27T16:11:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6vMcg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spboyer",
                                                                               "createdAt":  "2023-04-27T17:53:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "karolz-ms",
                                           "body":  "The dotenv OSS project is not integrated with the .NET configuration system, that is the main drawback of this OSS package and the core value prop of what this proposal is about.\r\n\r\nThe pattern that would be great to enable is that .env is an optional configuration source, overriding/augmenting other sources as necessary. By \"optional\" I mean if the file is not found, well then nothing is contributed, but execution continues. The file itself is located in a program-specific, but well-known location using a relative path. This would be very useful for development scenarios.",
                                           "updatedAt":  "2023-04-27T16:11:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a9Jxu",
                                           "createdAt":  "2023-04-27T16:16:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e The dotenv OSS project is not integrated with the .NET configuration system, that is the main drawback of this OSS package and the core value prop of what this proposal is about.\r\n\r\nUnderstood, but it does is much more complete than the above. Adding this provider to .NET would be fine as it wouldn\u0027t have any dependencies, but it\u0027s missing some important details.\r\n\r\n\u003e By \"optional\" I mean if the file is not found, well then nothing is contributed, but execution continues. The file itself is located in a program-specific, but well-known location using a relative path. This would be very useful for development scenarios.\r\n\r\nThats how most of the configuration providers work, but I\u0027m asking some very specific questions that I think need to be answered if we are to move this forward.",
                                           "updatedAt":  "2023-04-27T16:16:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a9naO",
                                           "createdAt":  "2023-04-27T17:55:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "spboyer",
                                           "body":  "While dotenv.net may be a more comprehensive solution, it can also add complexity to a project by introducing another third-party dependency. By providing a native configuration provider for .env files, .NET can offer a simple, built-in solution that doesn\u0027t require additional dependencies. \r\n\r\nWhat other questions do you need to have answered to move this forward beyond why we support file formats like INI, JSON, XML in a similar way?",
                                           "updatedAt":  "2023-04-27T17:55:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a-_25",
                                           "createdAt":  "2023-04-27T21:03:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Are you thinking that these files would be in source control then? Like the JSON and ini files are checked in..",
                                           "updatedAt":  "2023-04-27T21:03:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bMbdi",
                                           "createdAt":  "2023-05-01T17:31:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jongio",
                                           "body":  ".env files aren\u0027t committed.  Usually people will commit a .env.template and ask people to rename and populate it.  That way they have the expected key names.",
                                           "updatedAt":  "2023-05-01T17:31:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bNA2o",
                                           "createdAt":  "2023-05-01T19:59:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I know, that\u0027s why I\u0027m challenging the end-to-end experience here. We\u0027re saying it\u0027s just like JSON and XML and on the other hand, it\u0027s different in that you don\u0027t use them in a similar way. Or maybe you\u0027re just saying that we would show them in the project folder but always in the gitignore ....",
                                           "updatedAt":  "2023-05-01T19:59:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc587bIw",
                                           "createdAt":  "2024-05-06T12:53:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1nP_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mastrauckas",
                                                                               "createdAt":  "2024-06-13T12:14:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "thisispaulsmith",
                                                                               "createdAt":  "2024-06-19T19:59:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "balemoc",
                                                                               "createdAt":  "2024-10-10T14:59:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "bugproof",
                                           "body":  ".env files are very common in non .NET ecosystems (you got .env and .env.local) for example in next.js. I also think they\u0027re much easier during development than user secrets. Yeah they can leak but you will most likely use only sandbox/development keys with them. I find it mind-boggling that official parser /configuration provider is not available for it",
                                           "updatedAt":  "2024-05-06T12:55:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60ClA7",
                                           "createdAt":  "2025-06-30T20:22:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IEvangelist",
                                           "body":  "\u003e Or maybe you\u0027re just saying that we would show them in the project folder but always in the gitignore ....\n\nYes, show them the file and its contents, like you would user secrets...but they\u0027re usually ignored already. [Look at the default .gitignore files here](https://github.com/search?q=repo%3Agithub%2Fgitignore%20.env\u0026type=code). Visual Studio\u0027s .gitignore already has it ignored too.",
                                           "updatedAt":  "2025-06-30T20:22:32Z"
                                       }
                                   ],
                         "totalCount":  27
                     },
        "title":  "Add configuration provider for environment (.env) files",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49929",
        "createdAt":  "2021-03-20T08:41:23Z",
        "number":  49929,
        "author":  "TETYYS",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-04-04T03:03:40Z",
        "body":  "### Description\r\n\r\n```using System;\r\nusing System.Collections.Generic;\r\nusing Microsoft.Extensions.Configuration;\r\nusing System.IO;\r\nusing System.Text;\r\n\t\t\t\t\t\r\npublic class Program\r\n{\r\n\tpublic class A\r\n\t{\r\n\t\tpublic Dictionary\u003cstring, dynamic\u003e B { get; set; } = new Dictionary\u003cstring, dynamic\u003e();\r\n\t}\r\n\t\r\n\tpublic static void Main()\r\n\t{\r\n\t\tvar builder = new ConfigurationBuilder();\r\n\t\tvar mem = new MemoryStream();\r\n\t\tmem.Write(Encoding.UTF8.GetBytes(\"{ \\\"B\\\": { \\\"A\\\": [ \\\"asd\\\" ] } }\").AsSpan());\r\n\t\tmem.Seek(0, SeekOrigin.Begin);\r\n\t\tbuilder.AddJsonStream(mem);\r\n\t\tvar config = builder.Build();\r\n\t\tvar a = new A();\r\n\t\tconfig.Bind(a);\r\n\t}\r\n}\r\n```\r\n\r\nCrashes with `Unhandled exception. System.ArgumentNullException: Value cannot be null. (Parameter \u0027type\u0027)`. If binding is not possible, it should throw exception with a proper description. Same thing happens with `object` instead of `dynamic`.\r\n\r\nTry it here: https://dotnetfiddle.net/5EkGGe\r\n\r\n### Configuration\r\n\r\n* Which version of .NET is the code running on? .NET 5\r\n* What OS and version, and what distro if applicable? Windows 20H2\r\n* What is the architecture (x64, x86, ARM, ARM64)? x64\r\n* Do you know whether it is specific to that configuration? Doubt it",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOL-D5tA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMzI3MzE0MA==",
                                           "createdAt":  "2021-03-20T08:41:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\n```using System;\r\nusing System.Collections.Generic;\r\nusing Microsoft.Extensions.Configuration;\r\nusing System.IO;\r\nusing System.Text;\r\n\t\t\t\t\t\r\npublic class Program\r\n{\r\n\tpublic class A\r\n\t{\r\n\t\tpublic Dictionary\u003cstring, dynamic\u003e B { get; set; } = new Dictionary\u003cstring, dynamic\u003e();\r\n\t}\r\n\t\r\n\tpublic static void Main()\r\n\t{\r\n\t\tvar builder = new ConfigurationBuilder();\r\n\t\tvar mem = new MemoryStream();\r\n\t\tmem.Write(Encoding.UTF8.GetBytes(\"{ \\\"B\\\": { \\\"A\\\": [ \\\"asd\\\" ] } }\").AsSpan());\r\n\t\tmem.Seek(0, SeekOrigin.Begin);\r\n\t\tbuilder.AddJsonStream(mem);\r\n\t\tvar config = builder.Build();\r\n\t\tvar a = new A();\r\n\t\tconfig.Bind(a);\r\n\t}\r\n}\r\n```\r\n\r\nCrashes with `Unhandled exception. System.ArgumentNullException: Value cannot be null. (Parameter \u0027type\u0027)`. If binding is not possible, it should throw exception with a proper description.\r\n\r\nTry it here: https://dotnetfiddle.net/5EkGGe\r\n\r\n### Configuration\r\n\r\n* Which version of .NET is the code running on? .NET 5\r\n* What OS and version, and what distro if applicable? Windows 20H2\r\n* What is the architecture (x64, x86, ARM, ARM64)? x64\r\n* Do you know whether it is specific to that configuration? Doubt it\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTETYYS\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-20T08:41:28Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Microsoft.Extensions.Configuration.Binder crashes when binding to dynamic dictionary value",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50867",
        "createdAt":  "2021-04-07T20:01:31Z",
        "number":  50867,
        "author":  "mdh1418",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-22T18:06:39Z",
        "body":  "One test from Microsoft.Extensions.Configuration.Ini.Tests fails on Android\r\n\r\nMicrosoft.Extensions.Configuration.Ini.Tests\r\n- [ ] Microsoft.Extensions.Configuration.Ini.Test.IniConfigurationExtensionsTest.AddIniFile_ThrowsIfFilePathIsNullOrEmpty\r\n\r\nEdit: New failures\r\nMicrosoft.Extensions.Configuration.Ini.Test.IniConfigurationTest.IniConfiguration_Throws_On_Missing_Configuration_File\r\nMicrosoft.Extensions.Configuration.Ini.Test.IniConfigurationExtensionsTest.AddIniFile_ThrowsIfFileDoesNotExistAtPath\r\n\r\n```\r\nTest collection for Microsoft.Extensions.Configuration.Ini.Test.IniConfigurationExtensionsTest\r\nMicrosoft.Extensions.Configuration.Ini.Test.IniConfigurationExtensionsTest.AddIniFile_ThrowsIfFilePathIsNullOrEmpty(path: \\\"\\\")\r\n    Assert.StartsWith() Failure:\\nExpected: File path must be a non-empty string.\\nActual:   Error_InvalidFilePath Arg_ParamName_N...\r\nMicrosoft.Extensions.Configuration.Ini.Test.IniConfigurationExtensionsTest.AddIniFile_ThrowsIfFilePathIsNullOrEmpty(path: null)\r\n    Assert.StartsWith() Failure:\\nExpected: File path must be a non-empty string.\\nActual:   Error_InvalidFilePath Arg_ParamName_N...\r\n```\r\n\r\n```\r\nTest collection for Microsoft.Extensions.Configuration.Ini.Test.IniConfigurationTest\r\nMicrosoft.Extensions.Configuration.Ini.Test.IniConfigurationTest.IniConfiguration_Throws_On_Missing_Configuration_File\r\n    Assert.StartsWith() Failure:\\nExpected: The configuration file \u0027NotExistingConfig.ini\u0027 was not found and is not optional. The expected physical path was \u0027\\nActual:   Error_FileNotFound, NotExistingConfig.iniError_ExpectedPhysicalPath, /data/user/0/net.dot.Microsoft.Extensions.Con...\r\n\r\nTest collection for Microsoft.Extensions.Configuration.Ini.Test.IniConfigurationExtensionsTest\r\nMicrosoft.Extensions.Configuration.Ini.Test.IniConfigurationExtensionsTest.AddIniFile_ThrowsIfFileDoesNotExistAtPath\r\n    Assert.StartsWith() Failure:\\nExpected: The configuration file \u0027file-does-not-exist.ini\u0027 was not found and is not optional. The expected physical path was \u0027\\nActual:   Error_FileNotFound, file-does-not-exist.iniError_ExpectedPhysicalPath, /data/user/0/net.dot.Microsoft.Extensions.Con...\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMJb8wQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNTIwMTQ3Mw==",
                                           "createdAt":  "2021-04-07T20:01:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nOne test from Microsoft.Extensions.Configuration.Ini.Tests fails on Android\r\n\r\nMicrosoft.Extensions.Configuration.Ini.Tests\r\n- [ ] Microsoft.Extensions.Configuration.Ini.Test.IniConfigurationExtensionsTest.AddIniFile_ThrowsIfFilePathIsNullOrEmpty\r\n\r\n```\r\nTest collection for Microsoft.Extensions.Configuration.Ini.Test.IniConfigurationExtensionsTest\r\nMicrosoft.Extensions.Configuration.Ini.Test.IniConfigurationExtensionsTest.AddIniFile_ThrowsIfFilePathIsNullOrEmpty(path: \\\"\\\")\r\n    Assert.StartsWith() Failure:\\nExpected: File path must be a non-empty string.\\nActual:   Error_InvalidFilePath Arg_ParamName_N...\r\nMicrosoft.Extensions.Configuration.Ini.Test.IniConfigurationExtensionsTest.AddIniFile_ThrowsIfFilePathIsNullOrEmpty(path: null)\r\n    Assert.StartsWith() Failure:\\nExpected: File path must be a non-empty string.\\nActual:   Error_InvalidFilePath Arg_ParamName_N...\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emdh1418\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `os-android`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-07T20:01:36Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Microsoft.Extensions.Configuration.Ini.Tests fails on Android",
        "labels":  [
                       "os-android",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/52319",
        "createdAt":  "2021-05-05T18:23:35Z",
        "number":  52319,
        "author":  "mdh1418",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-01T13:58:09Z",
        "body":  "Microsoft.Extensions.Configuration.FileExtensions.Test.FileConfigurationProviderTest.ProviderThrowsInvalidDataExceptionWhenLoadFails\r\n```\r\nMicrosoft.Extensions.Configuration.FileExtensions.Test.FileConfigurationProviderTest.ProviderThrowsInvalidDataExceptionWhenLoadFails\r\n    Assert.Contains() Failure\\nNot found: Failed to load configuration from file \u0027/data/user/0/net.dot.Microsoft.Extensions.Configuration.FileExtensions.Tests/cache/tmpUdkBdA.tmp\u0027\\nIn value:  Error_FailedToLoad, /data/user/0/net.dot.Microsoft.Extensions.Configuration.FileExtensions.Tests/cache/tmpUdkBdA.tmp",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMaUx4A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMjkwOTc5Mg==",
                                           "createdAt":  "2021-05-05T18:23:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nMicrosoft.Extensions.Configuration.FileExtensions.Test.FileConfigurationProviderTest.ProviderThrowsInvalidDataExceptionWhenLoadFails\r\n```\r\nMicrosoft.Extensions.Configuration.FileExtensions.Test.FileConfigurationProviderTest.ProviderThrowsInvalidDataExceptionWhenLoadFails\r\n    Assert.Contains() Failure\\nNot found: Failed to load configuration from file \u0027/data/user/0/net.dot.Microsoft.Extensions.Configuration.FileExtensions.Tests/cache/tmpUdkBdA.tmp\u0027\\nIn value:  Error_FailedToLoad, /data/user/0/net.dot.Microsoft.Extensions.Configuration.FileExtensions.Tests/cache/tmpUdkBdA.tmp\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emdh1418\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `os-android`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-05T18:23:39Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[Android] Microsoft.Extensions.Configuration.FileExtensions.Tests Fails on Android",
        "labels":  [
                       "os-android",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53725",
        "createdAt":  "2021-06-04T14:52:56Z",
        "number":  53725,
        "author":  "Dasein732",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-14T21:49:54Z",
        "body":  "### Description\r\n\r\nI\u0027ve got a suite of projects sharing 90%~ of configuration parameters between them, so I\u0027m trying to extract shared parameters into a base class. Base class looks something like this:\r\n\r\n```c#\r\npublic class AppSettings\r\n{\r\n        public BaseEmailConfig EmailSettings { get; set; } = new  BaseEmailConfig();\r\n        // additional properties ommited\r\n}\r\n```\r\n\r\nI\u0027m loading this with `services.Configure\u003cT\u003e(appSetting.GetSection(typeof(T).Name))` where `T` is `AppSettings` and fetching it via `IOptions\u003cT\u003e`, this part works fine.\r\n\r\nUpdating appsettings.json section name from \u0027AppSettings\u0027 to \u0027ExtendedAppSettings\u0027 and loading this instead\r\n\r\n```c#\r\npublic class ExtendedAppSettings : AppSettings\r\n{\r\n        public new ExtendedEmailConfig EmailSettings { get; set; } = new ExtendedEmailConfig();\r\n}\r\n\r\npublic class ExtendedEmailConfig  : BaseEmailConfig \r\n{\r\n        // 2-3 extra string properties\r\n}\r\n```\r\n\r\nreturns the object populated but the properties using inheritance + new(ExtendedEmailConfig in this case) are null. Looking into the object via debugger, the object being returned from `IOptions\u003cExtendedAppSettings\u003e` has AppSettings type, all of the properties using inheritance in the extended type are either null if they\u0027re initialized with \u0027new ExtendedX()\u0027 or have the value of \u0027BaseT\u0027 if they\u0027re initialized with \u0027default!\u0027.\r\n\r\nI Assume there\u0027s some reflection involved and its targeting a wrong type? \r\n### Configuration\r\n\r\n* Which version of .NET is the code running on? \r\n        .NET Framework 4.8 \r\n        Microsoft.Extensions.Configuration 5.0.0\r\n        Microsoft.Extensions.Configuration.Json 5.0.0\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n        X64\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMvMRWg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDc5MDQ5MA==",
                                           "createdAt":  "2021-06-04T14:53:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\r\n\r\n### Description\r\n\r\nI\u0027ve got a suite of projects sharing 90%~ of configuration parameters between them, so I\u0027m trying to extract shared parameters into a base class. Base class looks something like this:\r\n\r\n```\r\npublic class AppSettings\r\n{\r\n        public BaseEmailConfig EmailSettings { get; set; } = new  BaseEmailConfig();\r\n        // additional properties ommited\r\n}\r\n```\r\n\r\nI\u0027m loading this with services.Configure\\\u003cT\u003e(appSetting.GetSection(typeof(T).Name)) where T is AppSettings and fetching it via IOptions\u003cT\u003e, this part works fine.\r\n\r\nUpdating appsettings.json section name from \u0027AppSettings\u0027 to \u0027ExtendedAppSettings\u0027 and loading this instead\r\n\r\n```\r\npublic class ExtendedAppSettings : AppSettings\r\n{\r\n        public new ExtendedEmailConfig EmailSettings { get; set; } = new ExtendedEmailConfig();\r\n}\r\n\r\npublic class ExtendedEmailConfig  : BaseEmailConfig \r\n{\r\n        // 2-3 extra string properties\r\n}\r\n```\r\n\r\nreturns the object populated but the properties using inheritance + new(ExtendedEmailConfig in this case) are null. Looking into the object via debugger, the object being returned from IOptions\\\u003cExtendedAppSettings\u003e has AppSettings type, all of the properties using inheritance in the extended type are either null if they\u0027re initialzied with \u0027new ExtendedX()\u0027 or have the value of \u0027BaseT\u0027 if they\u0027re initialized with \u0027default!\u0027.\r\n\r\nI Assume there\u0027s some reflection involved and its targeting a wrong type? \r\n### Configuration\r\n\r\n* Which version of .NET is the code running on? \r\n        .NET Framework 4.8 \r\n        Microsoft.Extensions.Configuration 5.0.0\r\n        Microsoft.Extensions.Configuration.Json 5.0.0\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n        X64\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDasein732\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-04T14:53:00Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Strongly typed configuration file doesn\u0027t load properly when hiding a member from a base class and/or using inheritance ",
        "labels":  [
                       "bug",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54525",
        "createdAt":  "2021-06-21T23:05:27Z",
        "number":  54525,
        "author":  "dylanbeattie",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBx-KzA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2021-06-22T07:53:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adipolak",
                                            "createdAt":  "2021-07-09T19:14:05Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2021-07-08T23:08:40Z",
        "body":  "### Description\r\n\r\nOn Windows, it is possible to create two environment variables called `some:variable` and `some__variable`. When using the `EnvironmentVariablesConfigurationProvider`, accessing `config[\"some:variable\"]` will return one or the other variable, apparently at random. \r\n\r\nSimilar behaviour occurs on all .NET runtime platforms if multiple environment variables are defined that differ only by the [connection string prefixes defined in the .NET configuration system](https://docs.microsoft.com/en-us/azure/app-service/configure-common#configure-connection-strings).\r\n\r\n#### Reproduction steps (Windows 10) - Configuration Variables:\r\n\r\nSet two environment variables:\r\n\r\n```\r\nset zzz:test=alpha\r\nset zzz__test=zappa\r\n```\r\n\r\nCreate a dotnet console app. Install `Microsoft.Extensions.Configuration` and  `Microsoft.Extensions.Configuration.EnvironmentVariables` \r\n\r\nPaste in the following program:\r\n\r\n```\r\nusing System;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nclass Program {\r\n    static void Main(string[] args) {        \r\n        var config = new ConfigurationBuilder().AddEnvironmentVariables().Build();\r\n        Console.WriteLine(config[\"zzz:test\"]);\r\n    }\r\n}\r\n```\r\n\r\nNow open a terminal and run the program multiple times:\r\n\r\n```\r\nD:\\Projects\\ConfigBug\u003edotnet run\r\nalpha\r\n\r\nD:\\Projects\\ConfigBug\u003edotnet run\r\nzappa\r\n\r\nD:\\Projects\\ConfigBug\u003edotnet run\r\nzappa\r\n\r\nD:\\Projects\\ConfigBug\u003edotnet run\r\nzappa\r\n\r\nD:\\Projects\\ConfigBug\u003edotnet run\r\nalpha\r\n\r\nD:\\Projects\\ConfigBug\u003edotnet run\r\nalpha\r\n\r\nD:\\Projects\\ConfigBug\u003edotnet run\r\nalpha\r\n\r\nD:\\Projects\\ConfigBug\u003edotnet run\r\nzappa\r\n```\r\n\r\n### Reproduction Steps - Connection Strings\r\n\r\nCreate multiple environment variables as follows:\r\n\r\n```\r\nset SQLCONNSTR_TEST=alpha\r\nset MYSQLCONNSTR_TEST=bravo\r\nset SQLAZURECONNSTR_TEST=charlie\r\nset CUSTOMCONNSTR_TEST=delta\r\n```\r\n\r\nor on Linux:\r\n\r\n```\r\nexport SQLCONNSTR_TEST=alpha\r\nexport MYSQLCONNSTR_TEST=bravo\r\nexport SQLAZURECONNSTR_TEST=charlie\r\nexport CUSTOMCONNSTR_TEST=delta\r\n```\r\n\r\nNow run the following dotnet program multiple times:\r\n\r\n```\r\nusing System;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nclass Program {\r\n    static void Main(string[] args) {        \r\n        var config = new ConfigurationBuilder().AddEnvironmentVariables().Build();\r\n        Console.WriteLine(config.GetConnectionString(\"test\"));\r\n    }\r\n}\r\n```\r\n\r\nThe program will randomly print one of `alpha`, `bravo`, `charlie` or `delta` each time it runs.\r\n\r\n### Expected Behaviour\r\n\r\nIn both scenarios, the same code is running in the same environment and so I expect the program to print the same value every time. (I\u0027d expect this to be the value of `some:variable`, since it seems logical that the normalization should only kick in when no variable exists with the non-normalized key, but really the problem here is that the same code returns different values each time it\u0027s run)\r\n\r\n### Configuration\r\n\r\n* Microsoft Windows [Version 10.0.19043.1081]\r\n* dotnet 5.0.204\r\n* x64\r\n\r\nThe connection string behaviour has also been verified on Linux (Ubuntu 20.04.2 LTS / GNU/Linux 5.8.0-1033-azure x86_64) and macOS (Big Sur 11.2.3), although since bash doesn\u0027t allow setting environment variables whose names contain the `:` separator, the normalization bug does not appear to affect these platforms.\r\n\r\n### Regression?\r\n\r\nVerified on `netcoreapp31` and `net5.0`. I suspect it has always been like this.\r\n\r\n### Other information\r\n\r\nI discovered the bug while trying to use local environment variables to replicate Azure connection string settings. I had a web app that would work about 50% of the time; other times it would randomly fail saying it was unable to connect to SQL Server. I eventually worked out that I had inadvertently created two environment variables - one called `SQLCONNSTR_MyDatabase` and the other `SQLAZURECONNSTR_MyDatabase`; one had a valid localhost connection string, the other had a typo in the password.\r\n\r\nAfter doing some investigation, it appears that `Environment.GetEnvironmentVariables` returns the environment variables in a different order for each process that calls it; calling this multiple times in the same running program yields the same variables *in the same order* each time, but running the same program multiple times in the same environment will return the variables in a different (and apparently random) order. This behaviour occurs on Windows, macOS and Linux.\r\n\r\nThe `EnvironmentVariablesConfigurationProvider`\u0027s `Load()` method ([link](https://github.com/dotnet/runtime/blob/01b7e73cd378145264a7cb7a09365b41ed42b240/src/libraries/Microsoft.Extensions.Configuration.EnvironmentVariables/src/EnvironmentVariablesConfigurationProvider.cs#L45)) calls `Load(Environment.GetEnvironmentVariables())`, and then uses `envVariables.GetEnumerator()` to build the `data` dictionary of configuration variables, but the environment variable names are normalized before populating the dictionary – and **different variable names will normalize to the same key**. Since the order is nondeterministic, the \"last one wins\", and so the same code, running in the same environment, on the same platform, can yield different results.\r\n\r\nModifying ` EnvironmentVariablesConfigurationProvider` to sort environment variables by key before populating the dictionary would be one solution; we\u0027d still get multiple variable names normalizing to the same key but the behaviour would be consistent across processes. A reverse ordinal sort would also mean that `foo:bar` always took priority over `foo__bar` on platforms that allow both variables to exist. Alternatively, `EnvironmentVariablesConfigurationProvider` could check for existing values and only populate a value which doesn\u0027t already exist. There would be a minor performance cost to this, but since the existing behaviour is nondeterministic I don\u0027t see how it could be a breaking change. I can open a PR for either of these (or something similar) if there\u0027s consensus around the approach.\r\n\r\n(The underlying `GetEnvironmentVariables` method is platform-specific, and on Windows is a wrapper around `extern unsafe Interop.Kernel32.GetEnvironmentStringsW()` ([link](https://github.com/dotnet/runtime/blob/01b7e73cd378145264a7cb7a09365b41ed42b240/src/libraries/System.Private.CoreLib/src/System/Environment.Variables.Windows.cs#L74)) so… probably not a good idea to mess with that unless there\u0027s some other justification for modifying it to return variables in a stable order.)\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM55m9A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NTQwMDU3OQ==",
                                           "createdAt":  "2021-06-21T23:05:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-06-21T23:05:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NjAxOTA2MA==",
                                           "createdAt":  "2021-06-22T14:11:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nOn Windows, it is possible to create two environment variables called `some:variable` and `some__variable`. When using the `EnvironmentVariablesConfigurationProvider`, accessing `config[\"some:variable\"]` will return one or the other variable, apparently at random. \r\n\r\nSimilar behaviour occurs on all .NET runtime platforms if multiple environment variables are defined that differ only by the [connection string prefixes defined in the .NET configuration system](https://docs.microsoft.com/en-us/azure/app-service/configure-common#configure-connection-strings).\r\n\r\n#### Reproduction steps (Windows 10) - Configuration Variables:\r\n\r\nSet two environment variables:\r\n\r\n```\r\nset zzz:test=alpha\r\nset zzz__test=zappa\r\n```\r\n\r\nCreate a dotnet console app. Install `Microsoft.Extensions.Configuration` and  `Microsoft.Extensions.Configuration.EnvironmentVariables` \r\n\r\nPaste in the following program:\r\n\r\n```\r\nusing System;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nclass Program {\r\n    static void Main(string[] args) {        \r\n        var config = new ConfigurationBuilder().AddEnvironmentVariables().Build();\r\n        Console.WriteLine(config[\"zzz:test\"]);\r\n    }\r\n}\r\n```\r\n\r\nNow open a terminal and run the program multiple times:\r\n\r\n```\r\nD:\\Projects\\ConfigBug\u003edotnet run\r\nalpha\r\n\r\nD:\\Projects\\ConfigBug\u003edotnet run\r\nzappa\r\n\r\nD:\\Projects\\ConfigBug\u003edotnet run\r\nzappa\r\n\r\nD:\\Projects\\ConfigBug\u003edotnet run\r\nzappa\r\n\r\nD:\\Projects\\ConfigBug\u003edotnet run\r\nalpha\r\n\r\nD:\\Projects\\ConfigBug\u003edotnet run\r\nalpha\r\n\r\nD:\\Projects\\ConfigBug\u003edotnet run\r\nalpha\r\n\r\nD:\\Projects\\ConfigBug\u003edotnet run\r\nzappa\r\n```\r\n\r\n### Reproduction Steps - Connection Strings\r\n\r\nCreate multiple environment variables as follows:\r\n\r\n```\r\nset SQLCONNSTR_TEST=alpha\r\nset MYSQLCONNSTR_TEST=bravo\r\nset SQLAZURECONNSTR_TEST=charlie\r\nset CUSTOMCONNSTR_TEST=delta\r\n```\r\n\r\nor on Linux:\r\n\r\n```\r\nexport SQLCONNSTR_TEST=alpha\r\nexport MYSQLCONNSTR_TEST=bravo\r\nexport SQLAZURECONNSTR_TEST=charlie\r\nexport CUSTOMCONNSTR_TEST=delta\r\n```\r\n\r\nNow run the following dotnet program multiple times:\r\n\r\n```\r\nusing System;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nclass Program {\r\n    static void Main(string[] args) {        \r\n        var config = new ConfigurationBuilder().AddEnvironmentVariables().Build();\r\n        Console.WriteLine(config.GetConnectionString(\"test\"));\r\n    }\r\n}\r\n```\r\n\r\nThe program will randomly print one of `alpha`, `bravo`, `charlie` or `delta` each time it runs.\r\n\r\n### Expected Behaviour\r\n\r\nIn both scenarios, the same code is running in the same environment and so I expect the program to print the same value every time. (I\u0027d expect this to be the value of `some:variable`, since it seems logical that the normalization should only kick in when no variable exists with the non-normalized key, but really the problem here is that the same code returns different values each time it\u0027s run)\r\n\r\n### Configuration\r\n\r\n* Microsoft Windows [Version 10.0.19043.1081]\r\n* dotnet 5.0.204\r\n* x64\r\n\r\nThe connection string behaviour has also been verified on Linux (Ubuntu 20.04.2 LTS / GNU/Linux 5.8.0-1033-azure x86_64) and macOS (Big Sur 11.2.3), although since bash doesn\u0027t allow setting environment variables whose names contain the `:` separator, the normalization bug does not appear to affect these platforms.\r\n\r\n### Regression?\r\n\r\nVerified on `netcoreapp31` and `net5.0`. I suspect it has always been like this.\r\n\r\n### Other information\r\n\r\nI discovered the bug while trying to use local environment variables to replicate Azure connection string settings. I had a web app that would work about 50% of the time; other times it would randomly fail saying it was unable to connect to SQL Server. I eventually worked out that I had inadvertently created two environment variables - one called `SQLCONNSTR_MyDatabase` and the other `SQLAZURECONNSTR_MyDatabase`; one had a valid localhost connection string, the other had a typo in the password.\r\n\r\nAfter doing some investigation, it appears that `Environment.GetEnvironmentVariables` returns the environment variables in a different order for each process that calls it; calling this multiple times in the same running program yields the same variables *in the same order* each time, but running the same program multiple times in the same environment will return the variables in a different (and apparently random) order. This behaviour occurs on Windows, macOS and Linux.\r\n\r\nThe `EnvironmentVariablesConfigurationProvider`\u0027s `Load()` method ([link](https://github.com/dotnet/runtime/blob/01b7e73cd378145264a7cb7a09365b41ed42b240/src/libraries/Microsoft.Extensions.Configuration.EnvironmentVariables/src/EnvironmentVariablesConfigurationProvider.cs#L45)) calls `Load(Environment.GetEnvironmentVariables())`, and then uses `envVariables.GetEnumerator()` to build the `data` dictionary of configuration variables, but the environment variable names are normalized before populating the dictionary – and **different variable names will normalize to the same key**. Since the order is nondeterministic, the \"last one wins\", and so the same code, running in the same environment, on the same platform, can yield different results.\r\n\r\nModifying ` EnvironmentVariablesConfigurationProvider` to sort environment variables by key before populating the dictionary would be one solution; we\u0027d still get multiple variable names normalizing to the same key but the behaviour would be consistent across processes. A reverse ordinal sort would also mean that `foo:bar` always took priority over `foo__bar` on platforms that allow both variables to exist. Alternatively, `EnvironmentVariablesConfigurationProvider` could check for existing values and only populate a value which doesn\u0027t already exist. There would be a minor performance cost to this, but since the existing behaviour is nondeterministic I don\u0027t see how it could be a breaking change. I can open a PR for either of these (or something similar) if there\u0027s consensus around the approach.\r\n\r\n(The underlying `GetEnvironmentVariables` method is platform-specific, and on Windows is a wrapper around `extern unsafe Interop.Kernel32.GetEnvironmentStringsW()` ([link](https://github.com/dotnet/runtime/blob/01b7e73cd378145264a7cb7a09365b41ed42b240/src/libraries/System.Private.CoreLib/src/System/Environment.Variables.Windows.cs#L74)) so… probably not a good idea to mess with that unless there\u0027s some other justification for modifying it to return variables in a stable order.)\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edylanbeattie\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-22T14:11:27Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Normalizing variable names causes nondeterministic behaviour in EnvironmentVariablesConfigurationProvider",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54773",
        "createdAt":  "2021-06-26T04:39:18Z",
        "number":  54773,
        "author":  "YuKitsune",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-08T23:09:43Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nBy default, the `PhysicalFileProvider` filters out any sensitive files (dot-prefixed, hidden, and system files).\r\nIf I wanted to read from a file called `.env`, the following exception would be thrown:\r\n```\r\nSystem.IO.FileNotFoundException\r\nThe configuration file \u0027.env\u0027 was not found and is not optional.\r\n   at Microsoft.Extensions.Configuration.FileConfigurationProvider.HandleException(ExceptionDispatchInfo info)\r\n   at Microsoft.Extensions.Configuration.FileConfigurationProvider.Load(Boolean reload)\r\n   at Microsoft.Extensions.Configuration.FileConfigurationProvider.Load()\r\n   at Microsoft.Extensions.Configuration.ConfigurationRoot..ctor(IList`1 providers)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBuilder.Build()\r\n```\r\n\r\nThis exception is misleading. The file _can_ be found, it\u0027s just been filtered out by the `ExclusionFilters` flags.\r\n\r\nThis caused quite a bit of confusion when writing my own configuration provider, as I kept getting the \"not found\" error despite being able to read and write to the file perfectly fine. It wasn\u0027t until I started looking into the `FileConfigurationSource` source code that I realised my config files were being filtered by default.\r\n\r\n### Proposal\r\n\r\nI\u0027d like to propose one of two changes.\r\n\r\n1. Add `IsExcluded` property to `NotFoundFileInfo`. This would help provide more clarity to exception messages with minimal impact. This will however require either the `NotFoundFileInfo` or the `ExclusionFilter` enum to move, since they\u0027re in different libs and can\u0027t currently reference each other.\r\n\r\n2. Add a new `ExcludedFileInfo` implementation for `IFileInfo`. I think this would be preferable as it\u0027s an additive change.\r\n\r\nHappy to discuss this further to see which solution would be more desirable.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM8sTSw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2ODk0Njc2Mw==",
                                           "createdAt":  "2021-06-26T04:39:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nBy default, the `PhysicalFileProvider` filters out any sensitive files (dot-prefixed, hidden, and system files).\r\nIf I wanted to read from a file called `.env`, the following exception would be thrown:\r\n```\r\nSystem.IO.FileNotFoundException\r\nThe configuration file \u0027.env\u0027 was not found and is not optional.\r\n   at Microsoft.Extensions.Configuration.FileConfigurationProvider.HandleException(ExceptionDispatchInfo info)\r\n   at Microsoft.Extensions.Configuration.FileConfigurationProvider.Load(Boolean reload)\r\n   at Microsoft.Extensions.Configuration.FileConfigurationProvider.Load()\r\n   at Microsoft.Extensions.Configuration.ConfigurationRoot..ctor(IList`1 providers)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBuilder.Build()\r\n```\r\n\r\nThis exception is misleading. The file _can_ be found, it\u0027s just been filtered out by the `ExclusionFilters` flags.\r\n\r\nThis caused quite a bit of confusion when writing my own configuration provider, as I kept getting the \"not found\" error despite being able to read and write to the file perfectly fine. It wasn\u0027t until I started looking into the `FileConfigurationSource` source code that I realised my config files were being filtered by default.\r\n\r\n### Considered solutions\r\n\r\n1. Update the exception message to mention that the file may be excluded. This would be the quickest solution, but it wouldn\u0027t be very clear if the file was not found or just excluded.\r\n2. Add `IsExcluded` property to `IFileInfo`. This would help provide more clarity to exception messages, but would also mean all other `IFileInfo` implementations would need to be updated.\r\n\r\n### Proposal\r\n\r\nI\u0027d like to propose a new `ExcludedFileInfo` implementation for `IFileInfo`. This will let us provide a clearer exception message without any _\"breaking\"_ changes to existing implementations.\r\nHappy to discuss this further.\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eYuKitsune\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-26T04:39:24Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Misleading exception messages when file matches an `ExclusionFilter` flag.",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54892",
        "createdAt":  "2021-06-29T07:21:37Z",
        "number":  54892,
        "author":  "axylophon",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-07-08T23:13:23Z",
        "body":  "### Description\r\n\r\nUsing the Microsoft.Extensions.Configuration (5.0.0). When using the following settings classes and .json config no exception is thrown when loading the config via `var testSettings = conf.GetSection(\"SettingsExample\").Get\u003cSettingsExample\u003e();`. Instead the third SubSettings Element is omitted silently. When for example the bool Setting1 of SettingsExample is invalid an exception is thrown as expected.\r\n\r\nWhen Using an Array instead of a List the third element is null. When using a Dictionary\u003cstring, SubSettings\u003e an exception is thrown as expected.\r\n\r\nLists of primitive values are filled with the default value if an error occurs. In this case an exception would also be preferable.\r\n\r\n```\r\npublic class SettingsExample\r\n{\r\n    public bool Setting1 { get; set; }\r\n    public bool Setting2 { get; set; }\r\n    public List\u003cSubSettings\u003e SubSettings { get; set; }\r\n}\r\n```\r\n\r\n```\r\npublic class SubSettings\r\n{\r\n    public bool SubSetting1 { get; set; }\r\n    public bool SubSetting2 { get; set; }\r\n}\r\n```\r\n```\r\n{\r\n  \"SettingsExample\": {\r\n    \"Setting1\": true,\r\n    \"Setting2\": false,\r\n    \"SubSettings\": [\r\n      {\r\n        \"SubSetting1\": true,\r\n        \"SubSetting2\": false\r\n      },\r\n      {\r\n        \"SubSetting1\": false,\r\n        \"SubSetting2\": true\r\n      },\r\n      {\r\n        \"SubSetting1\": true,\r\n        \"SubSetting2\": \"foo\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM-Bdzw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MDM0MjA5NQ==",
                                           "createdAt":  "2021-06-29T07:21:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nUsing the Microsoft.Extensions.Configuration (5.0.0). When using the following settings classes and .json config no exception is thrown when loading the config via `var testSettings = conf.GetSection(\"SettingsExample\").Get\u003cSettingsExample\u003e();`. Instead the third SubSettings Element is omitted silently. When for example the bool Setting1 of SettingsExample is invalid an exception is thrown as expected.\r\n\r\nWhen Using an Array instead of a List the third element is null. When using a Dictionary\u003cstring, SubSettings\u003e an exception is thrown as expected.\r\n\r\n```\r\npublic class SettingsExample\r\n{\r\n    public bool Setting1 { get; set; }\r\n    public bool Setting2 { get; set; }\r\n    public List\u003cSubSettings\u003e SubSettings { get; set; }\r\n}\r\n```\r\n\r\n```\r\npublic class SubSettings\r\n{\r\n    public bool SubSetting1 { get; set; }\r\n    public bool SubSetting2 { get; set; }\r\n}\r\n```\r\n```\r\n{\r\n  \"SettingsExample\": {\r\n    \"Setting1\": true,\r\n    \"Setting2\": false,\r\n    \"SubSettings\": [\r\n      {\r\n        \"SubSetting1\": true,\r\n        \"SubSetting2\": false\r\n      },\r\n      {\r\n        \"SubSetting1\": false,\r\n        \"SubSetting2\": true\r\n      },\r\n      {\r\n        \"SubSetting1\": true,\r\n        \"SubSetting2\": \"foo\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eaxylophon\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-29T07:21:44Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "No exception thrown on nested configuration",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/55197",
        "createdAt":  "2021-07-06T10:15:21Z",
        "number":  55197,
        "author":  "medelbbalci",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBxY3eg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "toomanylevels",
                                            "createdAt":  "2021-07-06T10:22:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "odmedel",
                                            "createdAt":  "2021-07-06T10:46:36Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-01-14T00:58:17Z",
        "body":  "As the title states, the bug occurs when an empty configuration section is defined. It is not picked up when `GetChildren()` or `GetSection(string)` is called on `IConfiguration` I believe it is a known issue and seems it is not handled. A link to the [comment](https://github.com/aspnet/Configuration/issues/292#issuecomment-311087455) discussed previously. \r\n\r\nIn our case, the appsettings.json defines various logging providers. We would like to provide default logging levels in case the section is defined but not given any configuration.\r\n```\r\n\"Logging\": { \r\n    \"Console\": { },\r\n    \"ApplicationInsights\": { }\r\n }\r\n```\r\n\r\nThe current workaround is to define a flag in the configuration to state whether the default log levels will be used. Defining a key-value under the section makes it picked up by `GetChildren()` or `GetSection(string)`.\r\n```\r\n\"Logging\": { \r\n    \"Console\": { \r\n        UseDefaultLoggingLevels: true\r\n      },\r\n    \"ApplicationInsights\": {\r\n        UseDefaultLoggingLevels:  true\r\n      }\r\n }\r\n```\r\nCould you please provide a solution how to solve this issue properly? \r\nBR,\r\nBoran",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONCHrAQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NDYzODA4MQ==",
                                           "createdAt":  "2021-07-06T10:15:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAs the title states, the bug occurs when an empty configuration section is defined. It is not picked up when `GetChildren()` or `GetSection(string)` is called on `IConfiguration` I believe it is a known issue and seems it is not handled. A link to the [comment](https://github.com/aspnet/Configuration/issues/292#issuecomment-311087455) discussed previously. \r\n\r\nIn our case, the appsettings.json defines various logging providers. We would like to provide default logging levels in case the section is defined but not given any configuration.\r\n```\r\n\"Logging\": { \r\n    \"Console\": { },\r\n    \"ApplicationInsights\": { }\r\n }\r\n```\r\n\r\nThe current workaround is to define a flag in the configuration to state whether the default log levels will be used. Defining a key-value under the section makes it picked up by `GetChildren()` or `GetSection(string)`.\r\n```\r\n\"Logging\": { \r\n    \"Console\": { \r\n        UseDefaultLoggingLevels: true\r\n      },\r\n    \"ApplicationInsights\": {\r\n        UseDefaultLoggingLevels:  true\r\n      }\r\n }\r\n```\r\nCould you please provide a solution how to solve this issue properly? \r\nBR,\r\nBoran\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emedelbbalci\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-06T10:15:28Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Configuration does not recognize empty sections",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56765",
        "createdAt":  "2021-08-03T04:35:24Z",
        "number":  56765,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-01-14T00:43:16Z",
        "body":  "### Description\r\nIt\u0027s currently impossible to represent `=` in the key of the arguments passed as a `string[]` to the command line configuration provider.\r\n\r\n### Configuration\r\n\r\n```C#\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nvar config = new ConfigurationBuilder()\r\n                .AddCommandLine(new[] { \"---key==helloword\" })\r\n                .Build();\r\n\r\nforeach (var (key, value) in config.AsEnumerable())\r\n{\r\n    Console.WriteLine($\"Key: {key}, Value: {value}\");\r\n}\r\n```\r\n\r\n### Regression?\r\n\r\nNo\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONSN3mQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41I3eZ",
                                           "createdAt":  "2021-08-03T04:35:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\nIt\u0027s currently impossible to represent `=` in the key of the arguments passed as a `string[]` to the command line configuration provider.\r\n\r\n### Configuration\r\n\r\n```\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nvar config = new ConfigurationBuilder()\r\n                .AddCommandLine(new[] { \"---key==helloword\" })\r\n                .Build();\r\n\r\nforeach (var (key, value) in config.AsEnumerable())\r\n{\r\n    Console.WriteLine($\"Key: {key}, Value: {value}\");\r\n}\r\n```\r\n\r\n### Regression?\r\n\r\nNo\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavidfowl\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-03T04:35:31Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Support escaping special characters in command line configuration provider",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57325",
        "createdAt":  "2021-08-12T23:24:36Z",
        "number":  57325,
        "author":  "safern",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAtmsg==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "Nirmal4G",
                                            "createdAt":  "2021-08-18T04:21:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Nirmal4G",
                                            "createdAt":  "2021-08-18T04:21:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BulGhost",
                                            "createdAt":  "2023-03-20T04:39:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Greg-Smulko",
                                            "createdAt":  "2023-10-18T20:24:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xiety",
                                            "createdAt":  "2024-11-29T21:01:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "flibustier7seas",
                                            "createdAt":  "2025-04-01T09:21:04Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2024-06-29T19:08:46Z",
        "body":  "### Background and motivation\r\n\r\nCurrently with the JSON Configuration Provider you can do:\r\n```json\r\n{\r\n   \"tvshow\": {\r\n        \"metadata\": [\r\n            {\r\n               \"name\": \"PrisonBreak\"\r\n            }\r\n         ]\r\n    }\r\n}\r\n```\r\n\r\nand then bind to without any problem:\r\n```cs\r\npublic class TvShow\r\n{\r\n  public Metadata[] Metadata { get; set; }\r\n}\r\n\r\npublic class Metadata\r\n{\r\n  public string Name { get; set; }\r\n}\r\n```\r\n\r\nHowever if we want to bind to this from the xml configuration provider using:\r\n```xml\r\n\u003cTvShow\u003e\r\n  \u003cMetadata\u003e\r\n    \u003cName\u003ePrison Break\u003c/Name\u003e\r\n  \u003c/Metadata\u003e\r\n\u003c/TvShow\u003e\r\n```\r\n\r\nWe don\u0027t have a way to know that `TvShows` can contain multiple `Metadata` elements and that is bound to an array, so we fail to bind when a single element is provided as the key doesn\u0027t contain any `index` in the target array as the binder expects when binding to an array, and we return a `Metadata[]` with a `null` object.\r\n\r\nIn order to fix this we would need to change the binder to account for a `key` without the `index` suffix when the child elements don\u0027t contain any index (a single element); but this would be breaking for other providers where this is not expected. Consider changing the original JSON so that `tvshows` is an object with a single `metadata`, this would bind even though json is not specifying an array:\r\n```json\r\n{\r\n   \"tvshow\": {\r\n        \"metadata\": {\r\n            \"name\": \"PrisonBreak\"\r\n          }\r\n    }\r\n```\r\n\r\nWe want to introduce a new flag to enable this behavior.\r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace Microsoft.Extensions.Configuration\r\n{\r\n     public class BinderOptions\r\n     {\r\n          public bool BindSingleElementsToArray { get; set; }\r\n     }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\nWith the given xml example above.\r\n\r\n```C#\r\nvar configuration = new ConfigurationBuilder().AddXmlFile(\"MyFile.xml\").Build();\r\n\r\nvar tvShow = new tvShow();\r\nconfiguration.Bind(tvShow, o =\u003e { o.BindSingleElementsToArray = true });\r\n```     \r\n\r\n\r\n### Risks\r\n\r\nThis would be a breaking change and could impact perf a little bit but only if the flag is set to `true`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgweXMg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41hvjr",
                                           "createdAt":  "2021-08-12T23:24:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-08-12T23:24:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41hv6L",
                                           "createdAt":  "2021-08-12T23:28:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nCurrently with the JSON Configuration Provider you can do:\r\n```json\r\n{\r\n   \"tvshow\": {\r\n        \"metadata\": [\r\n            {\r\n               \"name\": \"PrisonBreak\"\r\n            }\r\n         ]\r\n    }\r\n}\r\n```\r\n\r\nand then bind to without any problem:\r\n```cs\r\npublic class TvShow\r\n{\r\n  public Metadata[] Metadata { get; set; }\r\n}\r\n\r\npublic class Metadata\r\n{\r\n  public string Name { get; set; }\r\n}\r\n```\r\n\r\nHowever if we want to bind to this from the xml configuration provider using:\r\n```xml\r\n\u003cTvShow\u003e\r\n  \u003cMetadata\u003e\r\n    \u003cName\u003ePrison Break\u003c/Name\u003e\r\n  \u003c/Metadata\u003e\r\n\u003c/TvShow\u003e\r\n```\r\n\r\nWe don\u0027t have a way to know that `TvShows` can contain multiple `Metadata` elements and that is bound to an array, so we fail to bind when a single element is provided as the key doesn\u0027t contain any `index` in the target array as the binder expects when binding to an array, and we return a `Metadata[]` with a `null` object.\r\n\r\nIn order to fix this we would need to change the binder to account for a `key` without the `index` suffix when the child elements don\u0027t contain any index (a single element); but this would be breaking for other providers where this is not expected. Consider changing the original JSON so that `tvshows` is an object with a single `metadata`, this would bind even though json is not specifying an array:\r\n```json\r\n{\r\n   \"tvshow\": {\r\n        \"metadata\": {\r\n            \"name\": \"PrisonBreak\"\r\n          }\r\n    }\r\n```\r\n\r\nWe want to introduce a new flag to enable this behavior.\r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace Microsoft.Extensions.Configuration\r\n{\r\n     public class BinderOptions\r\n     {\r\n          public bool BindSingleElementsToArray { get; set; }\r\n     }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\nWith the given xml example above.\r\n\r\n```C#\r\nvar configuration = new ConfigurationBuilder().AddXmlFile(\"MyFile.xml\").Build();\r\n\r\nvar tvShow = new tvShow();\r\nconfiguration.Bind(tvShow, o =\u003e { o.BindSingleElementsToArray = true });\r\n```     \r\n\r\n\r\n### Risks\r\n\r\nThis would be a breaking change and could impact perf a little bit but only if the flag is set to `true`.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esafern\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `blocking-release`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-12T23:28:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41hv7g",
                                           "createdAt":  "2021-08-12T23:28:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safern",
                                           "body":  "cc: @maryamariyan @eerhardt @davidfowl ",
                                           "updatedAt":  "2021-08-12T23:28:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41hwko",
                                           "createdAt":  "2021-08-12T23:35:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB2jHAw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2021-08-16T23:13:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "safern",
                                           "body":  "I marked it as blocking release as a couple of 1st party costumers need this in order to be able to consume this and move to .NET 6.",
                                           "updatedAt":  "2021-08-12T23:35:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41rKvG",
                                           "createdAt":  "2021-08-17T17:49:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "[Video](https://www.youtube.com/watch?v=ztrfSfgXjFU\u0026t=0h8m16s)\n\nWe feel that the behavior isn\u0027t something that people really want to switch on/off, this is just for compatibility across an upgrade boundary.\r\n\r\nEither just make the breaking change, or use an AppContext switch to provide \"temporary\" access to the previous behavior.  (API can be added if we\u0027re proven wrong).",
                                           "updatedAt":  "2021-08-17T19:25:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43dgqf",
                                           "createdAt":  "2021-09-29T19:35:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safern",
                                           "body":  "Reopening as we reverted the change introduced in: https://github.com/dotnet/runtime/pull/57204. \r\n\r\nLet\u0027s try to tackle this on 7.0.0 and consider the two issues this change caused: https://github.com/dotnet/runtime/issues/58330 and https://github.com/dotnet/runtime/issues/58852",
                                           "updatedAt":  "2021-09-29T19:35:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49K6RU",
                                           "createdAt":  "2022-01-31T22:20:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Use cases to consider including as test cases for this issue:\r\n\r\nTwo use cases shown in comments under: https://github.com/dotnet/runtime/issues/58330#issue-982143010 and https://github.com/dotnet/runtime/issues/58330#issuecomment-912745146\r\n\r\nAnd from original PR https://github.com/dotnet/runtime/pull/57204/files [here ](https://github.com/vidommet/runtime/blob/cfb5c6937a3e0dc7fdc47652a7a3870a351c6b0f/src/libraries/Microsoft.Extensions.Configuration.Binder/tests/ConfigurationBinderTests.cs#L970-L974)\r\n\r\nAnd another use case is when binding to empty value: https://github.com/dotnet/runtime/issues/58852#issue-991813251",
                                           "updatedAt":  "2022-01-31T22:20:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49aLnl",
                                           "createdAt":  "2022-02-04T19:10:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "\u003e Either just make the breaking change, or use an AppContext switch to provide \"temporary\" access to the previous behavior. (API can be added if we\u0027re proven wrong).\r\n\r\nUpdate on this issue, to fix this in release 7.0, we decided to go with the BinderOptions flag as proposed in the description.",
                                           "updatedAt":  "2022-02-04T19:11:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_rWXC",
                                           "createdAt":  "2022-03-15T18:34:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "[Video](https://www.youtube.com/watch?v=BMz1BmMASVA\u0026t=1h25m7s)\n\nThe feature area didn\u0027t seem convinced that this is the approach they wanted to take, marking as needs-work until they are.",
                                           "updatedAt":  "2022-03-15T21:12:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_rWhd",
                                           "createdAt":  "2022-03-15T18:35:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "Related: #64840",
                                           "updatedAt":  "2022-03-15T18:35:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YxzSe",
                                           "createdAt":  "2023-03-29T23:01:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODYmvqw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Greg-Smulko",
                                                                               "createdAt":  "2023-10-18T21:57:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ThorstenReichert",
                                                                               "createdAt":  "2024-02-28T14:02:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "SiliconFiend",
                                           "body":  "Until this is solved upstream, I came up with a workaround. Assume an XML config like this:\r\n```xml\r\n\u003croot\u003e\r\n\t\u003cparameter_set\u003e\r\n\t\t\u003cparameter\u003e\r\n\t\t\t\u003cname\u003eTest1\u003c/name\u003e\r\n\t\t\u003c/parameter\u003e\r\n\t\t\u003cparameter\u003e\r\n\t\t\t\u003cname\u003eTest2\u003c/name\u003e\r\n\t\t\u003c/parameter\u003e\r\n\t\u003c/parameter_set\u003e\r\n\u003c/root\u003e\r\n```\r\nwhere `\u003cparameter\u003e` could be one or more entries. Then you define your POCOs/Option pattern objects as such:\r\n```C#\r\nclass Parameter_Set\r\n{\r\n\t[ConfigurationKeyName(\"parameter\")]\r\n\tpublic Parameter ParameterSingle { get; set; } = new Parameter();\r\n\t[ConfigurationKeyName(\"parameter\")]\r\n\tpublic Parameter[] Parameters { get; set; } = Array.Empty\u003cParameter\u003e();\r\n}\r\n\r\nclass Parameter\r\n{\r\n\tpublic string Name { get; set; } = string.Empty;\r\n\t...\r\n}\r\n```\r\nRetrieve the `Parameter_Set` object as follows:\r\n```C#\r\nvar paramSet = config.GetSection(\"parameter_set\").Get\u003cParameter_Set\u003e();\r\n```\r\n\r\nThe part that makes this work is the duplicated attribute `[ConfigurationKeyName(...)]`, which will either map to the array or the single instance, depending on the source configuration structure. When there is more than one `\u003cparameter\u003e` elements nested under `\u003cparameter_set\u003e`, the `Parameter_Set.ParameterSingle` will be a default instance of `Parameter` (this is true even if `ParameterSingle` is declared nullable and is null by default), and `Parameter_Set.Parameters` will have a length equal to the number of `\u003cparameter\u003e` elements. Alternatively, if there is only one `\u003cparameter\u003e` element, the `Parameter_Set.Parameters` array will have a length of 1 where element 0 (eezo?) is a default instance of `Parameter`, and `Parameter_Set.ParameterSingle` will have the actual configuration values . If there are no `\u003cparameter\u003e` elements, the `Parameter_Set.Parameters` array will have a length of 0.\r\n\r\nIt\u0027s not awesome and the resultant structure requires special handling by the `IConfiguration` consumers, but it does work and allows you to leverage the Configuration infrastructure instead of completely rolling your own config reader, etc.",
                                           "updatedAt":  "2023-03-29T23:01:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51XVJ8",
                                           "createdAt":  "2024-02-28T14:02:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ThorstenReichert",
                                           "body":  "\u003e Alternatively, if there is only one `\u003cparameter\u003e` element, the `Parameter_Set.Parameters` array will have a length of 1 where element 0 (eezo?) is a default instance of `Parameter`, and `Parameter_Set.ParameterSingle` will have the actual configuration values .\r\n\r\nAfter playing around with this a bit, it seems that in the single-element case, `Parameter_Set.Parameters` contains as many default-instances of `Parameter`, as there are child nodes in `\u003cparameter\u003e`. So for example the XML\r\n```xml\r\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\r\n\u003croot\u003e\r\n    \u003cparameter_set\u003e\r\n        \u003cparameter\u003e\r\n            \u003cname\u003eTest1\u003c/name\u003e\r\n            \u003cdata1\u003e1\u003c/data1\u003e\r\n            \u003cdata2\u003e2\u003c/data2\u003e\r\n        \u003c/parameter\u003e\r\n    \u003c/parameter_set\u003e\r\n\u003c/root\u003e\r\n```\r\nwill cause `Parameter_Set.Parameters` to contain **three** default-instances of `Parameter`. Might be because the config provider now has three entries under `parameter_set:parameter:*`?\r\n```\r\nparameter_set\r\nparameter_set:parameter\r\nparameter_set:parameter:data1\r\nparameter_set:parameter:data2\r\nparameter_set:parameter:name\r\n```\r\n@safern, @maryamariyan  this behavior certainly looks weird, is this intentional, simply not supported, or a bug?",
                                           "updatedAt":  "2024-02-28T14:02:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DB5cy",
                                           "createdAt":  "2024-06-29T19:08:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "horato",
                                           "body":  "I belive the issue comes from the XML parser which has no information about the structure of the xml file and so the only way to recognize a collection is to count the number of elements with the same name.\r\nhttps://github.com/dotnet/runtime/blob/9906682033b4fee6aadc12ac878ffa8fde1edfe1/src/libraries/Microsoft.Extensions.Configuration.Xml/src/XmlStreamConfigurationProvider.cs#L334\r\n\r\nThis could be solved (at the very least as a workaround) by providing a way to tell the the parser which elements are to be treated as a collection. Simple string collection in the format of \"a:b:c\" would be more than enough\r\n```cs\r\n            bool IsCollection(Prefix prefix, ICollection\u003cXmlConfigurationElement\u003e collection, ICollection\u003cstring\u003e collectionDefinitions)\r\n            {\r\n                if (collection.Count \u003e 1)\r\n                    return true;\r\n                if (collection.Count != 1)\r\n                    return false;\r\n\r\n                var child = collection.Single();\r\n                var elementFullPath = prefix.AsString + ConfigurationPath.KeyDelimiter + child.ElementName;\r\n                return collectionDefinitions.Contains(elementFullPath);\r\n            }\r\n```\r\n\r\nOr by providing a way to override the parser\u0027s default behavior, so that we could implement the detection ourselves.",
                                           "updatedAt":  "2024-06-29T19:08:45Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Add feature to bind a single element to an array on ConfigurationBinder.",
        "labels":  [
                       "api-needs-work",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58104",
        "createdAt":  "2021-08-25T11:21:56Z",
        "number":  58104,
        "author":  "IanKemp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAqy8Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "flibustier7seas",
                                            "createdAt":  "2025-03-31T07:54:14Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-08-15T05:57:51Z",
        "body":  "### Description\r\n\r\nGiven the following `appsettings.json` file that is loaded into an application via the standard configuration loading mechanisms:\r\n\r\n```json\r\n{\r\n    \"Foo\": {\r\n    }\r\n}\r\n```\r\n\r\nThe following C# code will print `false`, but should reasonably be expected to print `true`; the section may be *empty*, but it certainly **exists**:\r\n\r\n```csharp\r\nIConfiguration configuration = ...; // e.g. in Startup.ConfigureServices\r\n\r\nvar fooSection = configuration.GetSection(\"Foo\");\r\nvar doesFooSectionExist = fooSection.Exists(); // via Microsoft.Extensions.Configuration.ConfigurationExtensions.Exists()\r\n\r\nConsole.WriteLine(doesFooSectionExist); // false\r\n```\r\n\r\nFurther, if you actually remove the section from the JSON file:\r\n\r\n```json\r\n{\r\n}\r\n```\r\n\r\nthen `Exists()` **still** returns false, so there\u0027s no way to distinguish between the \"section exists but is empty\" case and \"section exists at all\" case. That makes it a poor API.\r\n\r\nDesired outcome:\r\n* a new method that *actually* does an existence check should be created\r\n* the documentation comment of the current `Exists()` should be updated to indicate it doesn\u0027t do what it says, and that consumers should prefer the new method instead\r\n* the current `Exists()` should be annotated with the same information as the previous point\r\n\r\n### Configuration\r\n\r\n.NET Core 3.1.18\r\nTested with both v3.1.18 and v5.0.0 of https://www.nuget.org/packages/Microsoft.Extensions.Configuration.Binder\r\nTested with latest code of Microsoft.Extensions.Configuration.ConfigurationExtensions.Exists() from https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Configuration.Abstractions/src/ConfigurationExtensions.cs#L76",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPITljg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc419332",
                                           "createdAt":  "2021-08-25T11:22:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nGiven the following `appsettings.json` file that is loaded into an application via the standard configuration loading mechanisms:\r\n\r\n```json\r\n{\r\n    \"Foo\": {\r\n    }\r\n}\r\n```\r\n\r\nThe following C# code will print `false`, but should reasonably be expected to print `true`; the section may be *empty*, but it certainly **exists**:\r\n\r\n```csharp\r\nIConfiguration configuration = ...; // e.g. in Startup.ConfigureServices\r\n\r\nvar fooSection = configuration.GetSection(\"Foo\");\r\nvar doesFooSectionExist = fooSection.Exists(); // via Microsoft.Extensions.Configuration.ConfigurationExtensions.Exists()\r\n\r\nConsole.WriteLine(doesFooSectionExist); // false\r\n```\r\n\r\nFurther, if you actually remove the section from the JSON file:\r\n\r\n```json\r\n{\r\n}\r\n```\r\n\r\nthen `Exists()` **still** returns false, so there\u0027s no way to distinguish between the \"section exists but is empty\" case and \"section exists at all\" case. That makes it a poor API.\r\n\r\nDesired outcome:\r\n* a new method that *actually* does an existence check should be created\r\n* the documentation comment of the current `Exists()` should be updated to indicate it doesn\u0027t do what it says, and that consumers should prefer the new method instead\r\n* the current `Exists()` should be annotated with the same information as the previous point\r\n\r\n### Configuration\r\n\r\n.NET Core 3.1.18\r\nTested with both v3.1.18 and v5.0.0 of https://www.nuget.org/packages/Microsoft.Extensions.Configuration.Binder\r\nTested with latest code of Microsoft.Extensions.Configuration.ConfigurationExtensions.Exists() from https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Configuration.Abstractions/src/ConfigurationExtensions.cs#L76\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eIanKemp\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-25T11:22:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48hOWO",
                                           "createdAt":  "2022-01-18T11:59:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wzchua",
                                           "body":  "Given \r\n```\r\n{\r\n  \"foo\": {\r\n    \"p\": \"\",\r\n    \"p2\": null,\r\n    \"p3\": { }\r\n  }\r\n}\r\n```\r\nThe key value pair are:\r\n![image](https://user-images.githubusercontent.com/13881045/149932014-671e80db-9abe-4a1d-b56a-7cecce18227b.png)\r\n\r\nThere doesn\u0027t seem to be enough info unless `{ }` is represented as `\"\"`",
                                           "updatedAt":  "2022-01-18T11:59:11Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Microsoft.Extensions.Configuration.ConfigurationExtensions.Exists() returns false in cases where true would be expected",
        "labels":  [
                       "bug",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58384",
        "createdAt":  "2021-08-30T09:09:57Z",
        "number":  58384,
        "author":  "lonix1",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODD0A8Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matt1munich",
                                            "createdAt":  "2021-09-23T16:52:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lonix1",
                                            "createdAt":  "2021-11-03T18:43:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "troplin",
                                            "createdAt":  "2022-03-18T16:17:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SamuelSA",
                                            "createdAt":  "2022-05-17T00:33:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sreitbauer",
                                            "createdAt":  "2022-06-16T14:50:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lexey-evergreen",
                                            "createdAt":  "2022-07-19T18:36:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tscbp",
                                            "createdAt":  "2022-09-22T17:39:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sbochoa",
                                            "createdAt":  "2022-09-23T18:10:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "willnationsdev",
                                            "createdAt":  "2022-10-02T18:17:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "amannan-123",
                                            "createdAt":  "2022-10-22T19:22:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "7702244",
                                            "createdAt":  "2022-10-31T20:49:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bart-vmware",
                                            "createdAt":  "2023-03-31T11:17:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EugeneTitarchuk",
                                            "createdAt":  "2023-04-14T14:52:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ondrejtucny",
                                            "createdAt":  "2023-07-08T17:28:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Jetski5822",
                                            "createdAt":  "2023-12-11T02:02:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vtomskih",
                                            "createdAt":  "2024-04-02T09:48:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mwiesenbauer",
                                            "createdAt":  "2024-08-06T21:21:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sakno",
                                            "createdAt":  "2024-12-27T15:42:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fh-yuxiao-zeng",
                                            "createdAt":  "2025-04-23T07:44:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alasdair-cooper",
                                            "createdAt":  "2025-06-05T15:29:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aritma-fredrikef",
                                            "createdAt":  "2025-06-13T06:35:08Z"
                                        }
                                    ],
                          "totalCount":  21
                      },
        "updatedAt":  "2025-03-24T10:26:41Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\n\r\nI\u0027m using the Options service to bind hierarchical [configuration](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-5.0#bind-hierarchical-configuration) data.\r\n\r\nSuppose I have this class:\r\n````cs\r\npublic class PersonOptions\r\n{\r\n\r\n  public string Name { get; set; }\r\n\r\n  public int Age { get; set; }\r\n\r\n  public bool Foo {                                // \u003c--- I want binder to ignore this\r\n    get {\r\n      // ... do stuff\r\n    }\r\n  }\r\n\r\n  public bool IgnoreMe =\u003e throw new Exception();   // \u003c--- I want binder to ignore this\r\n\r\n}\r\n````\r\n\r\nBecause the `Foo` property is `public`, the binder runs it (which leads to various problems - why is it run?). My design requires it to be `public`, and I prefer not to change it to a method.\r\n\r\nI hoped I could force the binder to ignore that property, e.g. using an attribute. I tried `[JsonIgnore]` but that didn\u0027t work.\r\n\r\n### Describe the solution you\u0027d like\r\nPlease consider adding an attribute for this - if the property is decorated by that attribute, then don\u0027t try bind it, and don\u0027t run it.\r\n\r\n### Additional context\r\nThank you!",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOo8VftQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42JunM",
                                           "createdAt":  "2021-08-30T17:07:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is your feature request related to a problem? Please describe.\r\n\r\nI\u0027m using the Options service to bind hierarchical [configuration](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-5.0#bind-hierarchical-configuration) data.\r\n\r\nSuppose I have this class:\r\n````cs\r\npublic class PersonOptions\r\n{\r\n\r\n  public string Name { get; set; }\r\n\r\n  public int Age { get; set; }\r\n\r\n  public bool Foo {                                // \u003c--- I want binder to ignore this\r\n    get {\r\n      // ... do stuff\r\n    }\r\n  }\r\n\r\n  public bool IgnoreMe =\u003e throw new Exception();   // \u003c--- I want binder to ignore this\r\n\r\n}\r\n````\r\n\r\nBecause the `Foo` property is `public`, the binder runs it (which leads to various problems - why is it run?). My design requires it to be `public`, and I prefer not to change it to a method.\r\n\r\nI hoped I could force the binder to ignore that property, e.g. using an attribute. I tried `[JsonIgnore]` but that didn\u0027t work.\r\n\r\n### Describe the solution you\u0027d like\r\nPlease consider adding an attribute for this - if the property is decorated by that attribute, then don\u0027t try bind it, and don\u0027t run it.\r\n\r\n### Additional context\r\nThank you!\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elonix1\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-30T17:07:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GrGpG",
                                           "createdAt":  "2022-07-15T16:29:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pfeigl",
                                           "body":  "Why has this been dropped from 7.0? \r\n\r\nLooking at the `BinderOptions` property\r\n```csharp\r\n        /// \u003csummary\u003e\r\n        /// When false (the default), the binder will only attempt to set public properties.\r\n        /// If true, the binder will attempt to set all non read-only properties.\r\n        /// \u003c/summary\u003e\r\n        public bool BindNonPublicProperties { get; set; }\r\n```\r\n\r\nThis issue even looks more like a bug than a feature request, because a property with only a getter is `read-only` from the perspective of the binder.\r\n\r\nThe code behind the `ConfigurationBinder` changed quite some bit from 6 to 7, but I think based on these lines it\u0027ll still suffer from the same problem.\r\n```csharp\r\n\r\n                // If we don\u0027t have an instance, try to create one\r\n                if (bindingPoint.Value is null)\r\n                {\r\n                    // if the binding point doesn\u0027t let us set a new instance, there\u0027s nothing more we can do\r\n                    if (bindingPoint.IsReadOnly)\r\n                    {\r\n                        return;\r\n                    }\r\n```` \r\n\r\nIt\u0027ll first try to access the bindingpoint value (which trys to resolve via the property getter) before it checks on the `IsReadOnly`. By doing the check earlier, the whole problem would resolve itself I think, because it wouldn\u0027t even read the value, when it\u0027s not going to set it anyways.",
                                           "updatedAt":  "2022-07-15T16:29:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GsXt1",
                                           "createdAt":  "2022-07-16T00:23:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lonix1",
                                           "body":  "Agreed, it doesn\u0027t work as expected, it\u0027s a bug. And I still don\u0027t understand why it *runs* my non-bindable properties.\r\n\r\nIf you have a better name for the issue so it gets more attention, let me know and I\u0027ll rename it.",
                                           "updatedAt":  "2022-07-16T00:23:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K0xqB",
                                           "createdAt":  "2022-09-22T17:41:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOELKcCw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matt1munich",
                                                                               "createdAt":  "2022-09-22T18:32:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lonix1",
                                                                               "createdAt":  "2022-09-28T12:29:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "crozone",
                                                                               "createdAt":  "2025-03-24T10:26:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "tscbp",
                                           "body":  "Agreed, this is a bug - read-only properties (i.e. get-only) should not attempt to be bound by `Configure`.",
                                           "updatedAt":  "2022-09-22T17:41:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LJrJP",
                                           "createdAt":  "2022-09-28T12:25:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "turowicz",
                                           "body":  "They should use System.Text.Json to read the config files... would make it so much easier.",
                                           "updatedAt":  "2022-09-28T12:25:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hAKwT",
                                           "createdAt":  "2023-07-08T17:27:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7f4jQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Kkamikadzee",
                                                                               "createdAt":  "2024-11-19T08:11:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ondrejtucny",
                                           "body":  "This is clearly a short-coming. A `ConfigurationIgnoreAttribute` should be added for sure; at least for the sake of parity considering `ConfigurationKeyNameAttribute` was implemented (see #36010).\r\n\r\nSimple cases for supporting this cause:\r\n\r\n- backwards compatibility\r\n- post-load value conversion\r\n- post-load options derivatives\r\n\r\nExample — my current issue due to the absence of such an attribute is the need to bind values specified in a nested `IConfigurationSection` into a pre-created object followed by additional processing of the loaded values and selection of some specific defaults (code simplified; in the real case the post-processing is more complicated):\r\n\r\n```\r\n    /// \u003csummary\u003e\r\n    /// CSV ingestion options describing various CSV formats ingested (loaded) by the system.\r\n    /// \u003c/summary\u003e\r\n    public class CsvIngestionOptions\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// Default CSV format options.\r\n        /// \u003c/summary\u003e\r\n        [ConfigurationKeyName(\"__ingored_\"+nameof(DefaultFormat))] // BUG .NET has no attribute to ignore a particular property; see also https://github.com/dotnet/runtime/issues/58384\r\n        public CsvFormatOptions DefaultFormat { get; set; }\r\n\r\n        /// \u003csummary\u003e\r\n        /// Default CSV format options; for the sake of sparse JSON deserialization.\r\n        /// \u003c/summary\u003e\r\n        [ConfigurationKeyName(nameof(DefaultFormat))]\r\n        public IConfigurationSection? DefaultFormatSection { get; set; }\r\n\r\n        /// \u003csummary\u003e\r\n        /// Invoked when the configuration is loaded from the file.\r\n        /// \u003c/summary\u003e\r\n        internal void OnConfigurationLoaded()\r\n        {\r\n            // load default format, ensuring that at least the default encoding is set\r\n            DefaultFormat = new CsvFormatOptions();\r\n            if (DefaultFormatSection != null) DefaultFormatSection.Bind(DefaultFormat);\r\n            DefaultFormat.EnsureEncodingDefined();\r\n        }\r\n    }\r\n```\r\n\r\nNote: For the options being loaded from a JSON file, I would assume things as `[JsonIgnore]`, `[JsonPropertyName]`, and `IJsonOnDeserialized` to work naturally. However, they don\u0027t. This behavior deserves a mention in the docs, at least.",
                                           "updatedAt":  "2023-07-08T17:27:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uC4Uc",
                                           "createdAt":  "2023-12-07T23:13:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "odyth",
                                           "body":  "The `[BindNever]` attribute also doesn\u0027t work to suppress the all powerful binder from evaluating readonly properties as of .netcore 6",
                                           "updatedAt":  "2023-12-07T23:13:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jxV-1",
                                           "createdAt":  "2025-03-24T10:26:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVf0ww==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "ondrejtucny",
                                                                               "createdAt":  "2025-03-24T10:31:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "karmeye",
                                                                               "createdAt":  "2025-04-04T03:55:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "fortender",
                                                                               "createdAt":  "2025-05-16T14:48:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "alasdair-cooper",
                                                                               "createdAt":  "2025-06-05T15:31:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "crozone",
                                           "body":  "Any movement on this?",
                                           "updatedAt":  "2025-03-24T10:26:40Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[Bug] Ignore properties when binding with Options service",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58683",
        "createdAt":  "2021-09-04T15:00:17Z",
        "number":  58683,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOB5D-yA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2021-09-04T15:03:28Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-02-18T21:15:27Z",
        "body":  "### Description\r\n\r\nThis was found as a part of investigating https://github.com/dotnet/aspnetcore/issues/36181. It seems like manually calling IConfigurationRoot.Reload on a chained configuration source [doesn\u0027t work](https://github.com/dotnet/runtime/blob/9f6da559949d4f591ff87b1cef543278997d5576/src/libraries/Microsoft.Extensions.Configuration/src/ChainedConfigurationProvider.cs#L65).\r\n\r\n### Configuration\r\n\r\n```C#\r\nvar config = new ConfigurationBuilder()\r\n        .Add(new RandomConfigurationSource())\r\n        .Build();\r\n\r\nvar config2 = new ConfigurationBuilder()\r\n            .AddConfiguration(config)\r\n            .Build();\r\n\r\nConsole.WriteLine(config2[\"Random\"]);\r\n\r\nconfig2.Reload();\r\n\r\nConsole.WriteLine(config2[\"Random\"]);\r\n\r\npublic class RandomConfigurationSource : IConfigurationSource\r\n{\r\n    public IConfigurationProvider Build(IConfigurationBuilder builder)\r\n    {\r\n        return new RandomConfigurationProvider();\r\n    }\r\n}\r\n\r\npublic class RandomConfigurationProvider : ConfigurationProvider\r\n{\r\n    public override void Load()\r\n    {\r\n        Data[\"Random\"] = Guid.NewGuid().ToString();\r\n    }\r\n}\r\n```\r\n\r\nThis should print 2 random guids, instead it prints the same guid. If you used a single configuration root (not chained), it would work.\r\n\r\n### Regression?\r\n\r\nNope",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVY_Rjg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Vj9GO",
                                           "createdAt":  "2023-02-18T05:23:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "OwnageIsMagic",
                                           "body":  "I\u0027m actually (ab)using this behavior to reorder configuration providers, without rebuilding the whole tree.\r\n```c#\r\nvar builder = WebApplication.CreateBuilder(Args);\r\nbuilder.Configuration.InsertConsul( new Uri(\"...\"),\r\n ^2, // insert before before env and args\r\n \"config1\", \"config2\", \"config3\"\r\n);\r\n// ...\r\n\r\nstatic IConfigurationBuilder InsertConsul(this IConfigurationBuilder builder, Uri consulUri,\r\n    Index insertPosition, params string[] cfgNodes)\r\n{\r\n    IConfigurationBuilder? oldBuilder = null;\r\n    if (!insertPosition.Equals(^0)) // not to the end\r\n    {\r\n        oldBuilder = builder;\r\n        builder = new ConfigurationBuilder();\r\n    }\r\n\r\n    foreach (var cfgNode in cfgNodes)\r\n    {\r\n        builder.AddConsul(cfgNode, options =\u003e\r\n        {\r\n            options.ConsulConfigurationOptions = cco =\u003e cco.Address = consulUri;\r\n        });\r\n    }\r\n\r\n    if (oldBuilder != null)\r\n    {\r\n        // WebApplication\u0027s ConfigurationManager eagerly rebuilds configuration on Sources modification\r\n        // Create ChainedSource wrapper to add them as one item; as side effect it also disables reload\r\n        // Otherwise (inserting directly into ConfigurationManager.Sources) it will\r\n        // rebuild configuration tree on each Insert (makes 1+2+3+N blocking HTTP calls, instead of N)\r\n        var source = new ChainedConfigurationSource { Configuration = builder.Build(), ShouldDisposeConfiguration = true };\r\n        builder = oldBuilder;\r\n        var sources = builder.Sources;\r\n        sources.Insert(insertPosition.GetOffset(sources.Count), source);\r\n    }\r\n\r\n    return builder;\r\n}\r\n```\r\nIt would be nice to have some API to temporally pause eager configuration evaluation. Or some other way to reorder providers.\r\nCan we just reorder providers and rebuild lazily (on first access)?",
                                           "updatedAt":  "2023-02-18T21:15:27Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ChainedConfigurationSource doesn\u0027t support reloading manually",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58930",
        "createdAt":  "2021-09-10T10:13:54Z",
        "number":  58930,
        "author":  "ptjuanramos",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODKGS9g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "t00",
                                            "createdAt":  "2022-04-07T07:43:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DVN237294",
                                            "createdAt":  "2025-02-21T13:58:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ileksa",
                                            "createdAt":  "2025-07-03T13:07:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LevYas",
                                            "createdAt":  "2025-08-06T13:15:30Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-02-09T13:43:50Z",
        "body":  "### Description\r\n\r\nBy having a JSON element in appSettings, disregarding the environment. It seems that the binder can\u0027t map the \"ContentSecurityPolicy\" children elements:\r\n\r\n```JSON\r\n\"ContentSecurityPolicy\": {\r\n    \"DefaultSrc\": [],\r\n    \"ScriptSrc\": [],\r\n    \"FrameAncestors\": [],\r\n    \"PluginTypes\": [],\r\n    \"ReportTo\": [],\r\n    \"NavigateTo\": []\r\n  }\r\n```\r\n\r\nE.g:\r\n\r\n```C#\r\nIConfiguration configuration = ... ;\r\nIConfigurationSection cspSection = _configuration?.GetSection(\"ContentSecurityPolicy\");\r\nAssert.IsFalse(cspSection.GetChildren().Any()); //passed\r\n```\r\n\r\n### Other information\r\n\r\nIs this somehow related with this closed [issue](https://github.com/aspnet/Configuration/issues/788)? ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnbt8NQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42pSZn",
                                           "createdAt":  "2021-09-10T10:13:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nBy having a JSON element in appSettings, disregarding the environment. It seems that the binder can\u0027t map the \"ContentSecurityPolicy\" children elements:\r\n\r\n```JSON\r\n\"ContentSecurityPolicy\": {\r\n    \"DefaultSrc\": [],\r\n    \"ScriptSrc\": [],\r\n    \"FrameAncestors\": [],\r\n    \"PluginTypes\": [],\r\n    \"ReportTo\": [],\r\n    \"NavigateTo\": []\r\n  }\r\n```\r\n\r\nE.g:\r\n\r\n```C#\r\nIConfiguration configuration = ... ;\r\nIConfigurationSection cspSection = _configuration?.GetSection(\"ContentSecurityPolicy\");\r\nAssert.IsNull(cspSection.Value); //passed\r\n```\r\n\r\n### Other information\r\n\r\nIs this somehow related with this closed [issue](https://github.com/aspnet/Configuration/issues/788)? \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eptjuanramos\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-10T10:13:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42rDXC",
                                           "createdAt":  "2021-09-10T22:45:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "what version of package `Microsoft.Extensions.Configuration` are you using? and is this a regression from 5.0?",
                                           "updatedAt":  "2021-09-10T22:46:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42sdnD",
                                           "createdAt":  "2021-09-12T12:17:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ptjuanramos",
                                           "body":  "@maryamariyan there was no regression from .NET 5.0, all package are related with that version.",
                                           "updatedAt":  "2021-09-12T12:17:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43BumD",
                                           "createdAt":  "2021-09-20T19:06:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safern",
                                           "body":  "@maryamariyan are we sure we want this to be fixed on 6.0.0 given that it was not a regression? ",
                                           "updatedAt":  "2021-09-20T19:06:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Zd9e",
                                           "createdAt":  "2021-09-28T17:14:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB94-bQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2021-09-29T21:43:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ptjuanramos",
                                                                               "createdAt":  "2021-10-12T08:27:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "safern",
                                           "body":  "Moving to 7.0.0 as this issue exists since previous versions of the package. ",
                                           "updatedAt":  "2021-09-28T17:14:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BCofq",
                                           "createdAt":  "2022-04-07T07:43:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "t00",
                                           "body":  "Is there a workaround, so that empty array can be enumerated by GetChildren() or is there a way to determine keys of all empty arrays present in a section?",
                                           "updatedAt":  "2022-04-07T07:43:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B1dy3",
                                           "createdAt":  "2022-04-20T23:02:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "\u003e Is there a workaround, so that empty array can be enumerated by GetChildren() or is there a way to determine keys of all empty arrays present in a section?\r\n\r\nwhat benefit would we get out of adding this capability? do you have a specific use case?",
                                           "updatedAt":  "2022-04-20T23:02:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B2fhi",
                                           "createdAt":  "2022-04-21T07:15:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEHqU_A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nik312123",
                                                                               "createdAt":  "2023-11-09T20:46:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RobertPepkaSEL",
                                                                               "createdAt":  "2025-02-26T03:32:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "t00",
                                           "body":  "\u003e what benefit would we get out of adding this capability? do you have a specific use case?\r\n\r\nOn the surface since the configuration arrays are additive (elements are merged from multiple sources/files), having an empty array does not seem useful.\r\n\r\nProblem is that with not being able to establish if the empty array is present in the configuration or not, information is lost for no apparent purpose (than possibly some internal optimizations), and it seems without ability to recover it since IConfiguration ignores empty arrays and there is no way to enumerate them.\r\n\r\nMoreover, having empty arrays declared will allow overriding some predefined collections with an empty list items. Think for example about a default list of email recipients which can be cleared or replaced by providing an empty array or an array with new rules. Yes, we can add a boolean or declare array as [ null ] (this is my workaround) but surely you can agree it is an ugly hack rather than a proper solution.\r\n\r\nOur another use case is that we use appsettings.json to pass configuration to an external tool (plist xml format). Empty arrays are simply ignored and we need to pass config as-is, including empty arrays as the software expects it this way. Again, we can deserialize configuration file manually but it would be counter-productive since we use IFileProvider extension to load configuration from different sources, including a central server - all configuration loading logic would need to be duplicated just to cater for no support of empty arrays.\r\n\r\nFixing this issue should not be a breaking change - empty array should not greatly affect existing code as Bind can just skip it yet manual GetValue might break on empty arrays expected to be ignored.",
                                           "updatedAt":  "2022-04-21T07:15:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6du3w1",
                                           "createdAt":  "2025-02-09T13:43:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdT_8g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rychlym",
                                                                               "createdAt":  "2025-03-06T11:10:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mpdunlop",
                                                                               "createdAt":  "2025-07-29T06:16:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "LevYas",
                                                                               "createdAt":  "2025-08-06T13:15:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "bzd3y",
                                           "body":  "\u003e what benefit would we get out of adding this capability? do you have a specific use case?\n\nThe benefit would be the ability to tell if an array was configured as empty. The languages people are using to consume the API here makes the same differentiation: `null` is not `[]`. The configuration system should work the same way and not return ambiguous configurations.\n\nNot to sound flippant, but is the argument here really that the configuration system should be ambiguous?\n\nAs for a specific use case, it would come handy in explicitly clearing out configured/defaulted properties. Imagine an app that needs the user to authenticate with their device, like your banking app probably does.\n\nIt might have a configured property like: `\"RequiredTypes\": [ \"Face\", \"Fingerprint\", \"Passcode\" ]`.\n\nRight now, we have to do extra work to even tell the difference between an omitted property and one set explicitly to `null`.\n\nAnd then on top of that, there has to be extra work to handle the `null` differently from an empty array.\n\nI give more justification here: https://github.com/dotnet/extensions/issues/5858. It\u0027s rather long, so the gist of it in terms of JSON configuration, is that I think it is a problem if we are to configure something using JSON, but then it does not get treated as actual JSON. `null` and `[]` are not the same thing in JSON anymore than they are in C#.\n\nBut fortunately, other providers like for environment variables can also benefit from this and allow people to configure empty arrays.",
                                           "updatedAt":  "2025-02-09T13:43:49Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "IConfiguration with empty array elements",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60042",
        "createdAt":  "2021-09-19T23:05:16Z",
        "number":  60042,
        "author":  "TheHunter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC25Lxg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aeb-dev",
                                            "createdAt":  "2024-03-30T12:36:21Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-01-14T00:42:04Z",
        "body":  "\u003c!--\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003e\r\n\r\n### Describe the bug\r\nI have my custom asspsettings.json, which is deserialized with a custom type, and it works well, but if my custom type contains a property of type IDictionary\u003cstring, object\u003e, I realize that all values of this dictionary are translated as strings, so the original types (example, numeric boolean etc) are lost.\r\n\r\n### To Reproduce\r\n\u003c!--\r\nWe ❤ code! Point us to a minimalistic repro project hosted in a GitHub repo, Gist snippet, or other means to see the isolated behavior.\r\n\r\nWe may close this issue if:\r\n- the repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\r\n- if we will not be able to repro the behavior you\u0027re reporting\r\n--\u003e\r\n\r\nTake this example of appsetings.json\r\n\r\n![image](https://user-images.githubusercontent.com/992665/133945466-146675e4-95a3-409c-9795-612996a0cd4b.png)\r\n\r\nThen this class used to deserialize my appsettings.json\r\n\r\n![image](https://user-images.githubusercontent.com/992665/133945490-3415708c-c96d-4384-b350-83233d46d864.png)\r\n\r\nAs you can see, the values of the dictionary are 2 numeric, and one boolean.\r\n\r\nNow, if  you try to deserialize, everything is ok, but my dictionary not at all, so:\r\n\r\n![image](https://user-images.githubusercontent.com/992665/133945554-10f07b63-44f2-4507-b349-926687cf20f5.png)\r\n\r\nSo, this is a wrong because there are many cases when you cannot deserialize some sections on appsettings in custom types, because applications cannot use types for them, and surely because the structure could be dynamic, in fact in my case those  arguments are different and can be changed anytime.\r\n\r\nIf you try to deserialize a dictionary\u003cstring, object\u003e with other serializer like Json.net, this problem doesn\u0027t exist, so I think It could be possible to keep orginal types of dictionary values.\r\n\r\n### Exceptions (if any)\r\n\u003c!-- \r\nInclude the exception you get when facing this issue\r\n--\u003e\r\nNo exceptions are thrown.\r\n\r\n### Further technical details\r\n- Example done in Visual studio 2019\r\n- use these nuget packages to this example:\r\nMicrosoft.Extensions.Configuration\r\nMicrosoft.Extensions.Configuration.Binder\r\nMicrosoft.Extensions.Configuration.FileExtensions\r\nMicrosoft.Extensions.Configuration.Json\r\nMicrosoft.Extensions.Configuration.EnvironmentVariables\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHON809KQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43vFuv",
                                           "createdAt":  "2021-10-05T23:46:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-json\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003e\r\n\r\n### Describe the bug\r\nI have my custom asspsettings.json, which is deserialized with a custom type, and it works well, but if my custom type contains a property of type IDictionary\u003cstring, object\u003e, I realize that all values of this dictionary are translated as strings, so the original types (example, numeric boolean etc) are lost.\r\n\r\n### To Reproduce\r\n\u003c!--\r\nWe ❤ code! Point us to a minimalistic repro project hosted in a GitHub repo, Gist snippet, or other means to see the isolated behavior.\r\n\r\nWe may close this issue if:\r\n- the repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\r\n- if we will not be able to repro the behavior you\u0027re reporting\r\n--\u003e\r\n\r\nTake this example of appsetings.json\r\n\r\n![image](https://user-images.githubusercontent.com/992665/133945466-146675e4-95a3-409c-9795-612996a0cd4b.png)\r\n\r\nThen this class used to deserialize my appsettings.json\r\n\r\n![image](https://user-images.githubusercontent.com/992665/133945490-3415708c-c96d-4384-b350-83233d46d864.png)\r\n\r\nAs you can see, the values of the dictionary are 2 numeric, and one boolean.\r\n\r\nNow, if  you try to deserialize, everything is ok, but my dictionary not at all, so:\r\n\r\n![image](https://user-images.githubusercontent.com/992665/133945554-10f07b63-44f2-4507-b349-926687cf20f5.png)\r\n\r\nSo, this is a wrong because there are many cases when you cannot deserialize some sections on appsettings in custom types, because applications cannot use types for them, and surely because the structure could be dynamic, in fact in my case those  arguments are different and can be changed anytime.\r\n\r\nIf you try to deserialize a dictionary\u003cstring, object\u003e with other serializer like Json.net, this problem doesn\u0027t exist, so I think It could be possible to keep orginal types of dictionary values.\r\n\r\n### Exceptions (if any)\r\n\u003c!-- \r\nInclude the exception you get when facing this issue\r\n--\u003e\r\nNo exceptions are thrown.\r\n\r\n### Further technical details\r\n- Example done in Visual studio 2019\r\n- use these nuget packages to this example:\r\nMicrosoft.Extensions.Configuration\r\nMicrosoft.Extensions.Configuration.Binder\r\nMicrosoft.Extensions.Configuration.FileExtensions\r\nMicrosoft.Extensions.Configuration.Json\r\nMicrosoft.Extensions.Configuration.EnvironmentVariables\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTheHunter\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003emarcpopMSFT\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Json`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-05T23:46:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43y1wu",
                                           "createdAt":  "2021-10-06T11:43:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "System.Text.Json by design does not support roundtripping `object` types, but it will deserialize `object` types using `JsonElement` or `JsonNode` representations, not string. So there might be something else going on with the `ConfigurationBuilder` implementation.\r\n\r\nIt would help if you could provide a standalone console app that reproduces the issue you are experiencing (screenshots are ok, but a full program would be more helpful :-))",
                                           "updatedAt":  "2021-10-06T11:43:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43y11R",
                                           "createdAt":  "2021-10-06T11:43:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003e\r\n\r\n### Describe the bug\r\nI have my custom asspsettings.json, which is deserialized with a custom type, and it works well, but if my custom type contains a property of type IDictionary\u003cstring, object\u003e, I realize that all values of this dictionary are translated as strings, so the original types (example, numeric boolean etc) are lost.\r\n\r\n### To Reproduce\r\n\u003c!--\r\nWe ❤ code! Point us to a minimalistic repro project hosted in a GitHub repo, Gist snippet, or other means to see the isolated behavior.\r\n\r\nWe may close this issue if:\r\n- the repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\r\n- if we will not be able to repro the behavior you\u0027re reporting\r\n--\u003e\r\n\r\nTake this example of appsetings.json\r\n\r\n![image](https://user-images.githubusercontent.com/992665/133945466-146675e4-95a3-409c-9795-612996a0cd4b.png)\r\n\r\nThen this class used to deserialize my appsettings.json\r\n\r\n![image](https://user-images.githubusercontent.com/992665/133945490-3415708c-c96d-4384-b350-83233d46d864.png)\r\n\r\nAs you can see, the values of the dictionary are 2 numeric, and one boolean.\r\n\r\nNow, if  you try to deserialize, everything is ok, but my dictionary not at all, so:\r\n\r\n![image](https://user-images.githubusercontent.com/992665/133945554-10f07b63-44f2-4507-b349-926687cf20f5.png)\r\n\r\nSo, this is a wrong because there are many cases when you cannot deserialize some sections on appsettings in custom types, because applications cannot use types for them, and surely because the structure could be dynamic, in fact in my case those  arguments are different and can be changed anytime.\r\n\r\nIf you try to deserialize a dictionary\u003cstring, object\u003e with other serializer like Json.net, this problem doesn\u0027t exist, so I think It could be possible to keep orginal types of dictionary values.\r\n\r\n### Exceptions (if any)\r\n\u003c!-- \r\nInclude the exception you get when facing this issue\r\n--\u003e\r\nNo exceptions are thrown.\r\n\r\n### Further technical details\r\n- Example done in Visual studio 2019\r\n- use these nuget packages to this example:\r\nMicrosoft.Extensions.Configuration\r\nMicrosoft.Extensions.Configuration.Binder\r\nMicrosoft.Extensions.Configuration.FileExtensions\r\nMicrosoft.Extensions.Configuration.Json\r\nMicrosoft.Extensions.Configuration.EnvironmentVariables\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTheHunter\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-06T11:43:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43zT0p",
                                           "createdAt":  "2021-10-06T13:03:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wzchua",
                                           "body":  "Configuration is basically a key value string store.\r\nThe json is converted to a key value pair list to work inside configuration ",
                                           "updatedAt":  "2021-10-06T13:03:16Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Values after deserialization IDictionary\u003cstring, object\u003e on appsettings.json are always strings",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60583",
        "createdAt":  "2021-10-18T21:22:59Z",
        "number":  60583,
        "author":  "steveisok",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-25T21:50:27Z",
        "body":  "Most likely a problem with where files are trying to be written.\r\n\r\nThe [test](https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/Microsoft.Extensions.Configuration/tests/FunctionalTests/ArrayTests.cs#L51-L76) fails with:\r\n\r\n```\r\nSystem.IO.FileNotFoundException : The configuration file \u0027aj21wvwu.d1m\u0027 was not found and is not optional. The expected physical path was \u0027/private/var/containers/Bundle/Application/417AB637-17AD-4E92-8AE8-1F6DDF069E1D/Microsoft.Extensions.Configuration.Functional.Tests.app/aj21wvwu.d1m\u0027.\r\nStack trace\r\n   at Microsoft.Extensions.Configuration.FileConfigurationProvider.HandleException(ExceptionDispatchInfo info)\r\n   at Microsoft.Extensions.Configuration.FileConfigurationProvider.Load(Boolean reload)\r\n   at Microsoft.Extensions.Configuration.FileConfigurationProvider.Load()\r\n   at Microsoft.Extensions.Configuration.ConfigurationRoot..ctor(IList`1 providers)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBuilder.Build()\r\n   at Microsoft.Extensions.Configuration.FunctionalTests.ArrayTests.BuildConfig()\r\n   at Microsoft.Extensions.Configuration.FunctionalTests.ArrayTests.DifferentConfigSources_Merged_KeysAreSorted()\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR-7KYQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5H7sph",
                                           "createdAt":  "2022-08-05T20:19:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "Still fails. Moving to 8",
                                           "updatedAt":  "2022-08-05T20:19:57Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[iOS/tvOS] FunctionalTests.ArrayTests.DifferentConfigSources_Merged_KeysAreSorted \u0026 WithOverwrites fail on devices",
        "labels":  [
                       "os-ios",
                       "area-Extensions-Configuration",
                       "os-tvos"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60584",
        "createdAt":  "2021-10-18T21:27:58Z",
        "number":  60584,
        "author":  "steveisok",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-31T13:58:08Z",
        "body":  "The [test](https://github.com/dotnet/runtime/blob/1c949ace34b913e3d5e3070f132c87b670cac8c9/src/libraries/Microsoft.Extensions.Configuration.UserSecrets/tests/ConfigurationExtensionTest.cs#L125-L134) fails with:\r\n\r\n```\r\nSystem.UnauthorizedAccessException : Access to the path \u0027/private/var/mobile/Containers/Data/Application/23FFD2C4-8226-4FCD-A938-6043BA920C7E/.microsoft/usersecrets/29dfe5f3-363f-4c6a-bf88-358fe2605ae7\u0027 is denied.\r\n---- System.IO.IOException : Operation not permitted\r\nStack trace\r\n   at System.IO.FileSystem.CreateDirectory(String fullPath)\r\n   at System.IO.Directory.CreateDirectory(String path)\r\n   at Microsoft.Extensions.Configuration.UserSecrets.Test.ConfigurationExtensionTest.SetSecret(String id, String key, String value)\r\n   at Microsoft.Extensions.Configuration.UserSecrets.Test.ConfigurationExtensionTest.AddUserSecrets_With_SecretsId_Passed_Explicitly()\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n```\r\n\r\nThe problem on iOS/tvOS is that the HOME directory is not writeable.  The value returned from https://github.com/dotnet/runtime/blob/1c949ace34b913e3d5e3070f132c87b670cac8c9/src/libraries/Microsoft.Extensions.Configuration.UserSecrets/src/PathHelper.cs#L48 will trigger the failure.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOGWUSw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44ZZRL",
                                           "createdAt":  "2021-10-18T21:28:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe [test](https://github.com/dotnet/runtime/blob/1c949ace34b913e3d5e3070f132c87b670cac8c9/src/libraries/Microsoft.Extensions.Configuration.UserSecrets/tests/ConfigurationExtensionTest.cs#L125-L134) fails with:\r\n\r\n```\r\nSystem.UnauthorizedAccessException : Access to the path \u0027/private/var/mobile/Containers/Data/Application/23FFD2C4-8226-4FCD-A938-6043BA920C7E/.microsoft/usersecrets/29dfe5f3-363f-4c6a-bf88-358fe2605ae7\u0027 is denied.\r\n---- System.IO.IOException : Operation not permitted\r\nStack trace\r\n   at System.IO.FileSystem.CreateDirectory(String fullPath)\r\n   at System.IO.Directory.CreateDirectory(String path)\r\n   at Microsoft.Extensions.Configuration.UserSecrets.Test.ConfigurationExtensionTest.SetSecret(String id, String key, String value)\r\n   at Microsoft.Extensions.Configuration.UserSecrets.Test.ConfigurationExtensionTest.AddUserSecrets_With_SecretsId_Passed_Explicitly()\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n```\r\n\r\nThe problem on iOS/tvOS is that the HOME directory is not writeable.  The value returned from https://github.com/dotnet/runtime/blob/1c949ace34b913e3d5e3070f132c87b670cac8c9/src/libraries/Microsoft.Extensions.Configuration.UserSecrets/src/PathHelper.cs#L48 will trigger the failure.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esteveisok\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-18T21:28:03Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[iOS/tvOS] UserSecrets.Test.ConfigurationExtensionTest.AddUserSecrets_With_SecretsId_Passed_Explicitly fails on devices",
        "labels":  [
                       "test-bug",
                       "os-ios",
                       "area-Extensions-Configuration",
                       "os-tvos"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60630",
        "createdAt":  "2021-10-19T15:31:11Z",
        "number":  60630,
        "author":  "GranatenUdo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-10-20T09:45:31Z",
        "body":  "### Description\r\n\r\nWe have an Azure Function running in production that reads a dictionary from the configuration of the azure environment. Since the function is running on linux the dictionary is described like this:\r\n```json\r\n{\r\n    \"name\": \"DictionaryName__item1\",\r\n    \"value\": \"value1\",\r\n    \"slotSetting\": false\r\n}.\r\n```\r\n\r\nThere is a unit test and test console application that use a local json file to read the dictionary. The dictionary has been implemented at the beginning of september (about 6 weeks).\r\n\r\nThe dictionary was persisted as json array like this:\r\n\r\n```json\r\n\"Array\": [\r\n    { \"key1\": \"value1\" },\r\n    { \"key2\": \"value2\" }\r\n  ],\r\n```\r\n\r\nAnd deserialized by the Get\u003cT\u003e extension method of the ConfigurationBinder to Dictionary\u003cstring, string\u003e.\r\n\r\nThis however no longer works. The following exception is raised: \"Cannot create instance of type \u0027System.String\u0027 because it is missing a public parameterless constructor.\"\r\n\r\n### Reproduction Steps\r\n\r\n```json\r\n{\r\n  \"Array\": [\r\n    { \"key1\": \"value1\" },\r\n    { \"key2\": \"value2\" }\r\n  ],\r\n  \"Object\": {\r\n    \"key1\": \"value1\",\r\n    \"key2\": \"value2\"\r\n  } \r\n}\r\n```\r\n\r\n```csharp\r\nvar config = new ConfigurationBuilder()\r\n                .SetBasePath(Directory.GetCurrentDirectory())\r\n                .AddJsonFile(settingsFileName, optional: true, reloadOnChange: true)\r\n                .AddEnvironmentVariables()\r\n                .Build();\r\n\r\nvar jsonObject = config.GetSection(\"Object\").Get\u003cDictionary\u003cstring, string\u003e\u003e();\r\nvar jsonArray = config.GetSection(\"Array\").Get\u003cDictionary\u003cstring, string\u003e\u003e();\r\n```\r\n\r\n[I have added a reproduction repository](https://github.com/GranatenUdo/Net5.JsonArrayDictionarySerializationIssue)\r\n\r\n### Expected behavior\r\n\r\nJson array and json object are deserialized to Dictionary\u003cstring, string\u003e\r\n\r\n### Actual behavior\r\n\r\n\"Cannot create instance of type \u0027System.String\u0027 because it is missing a public parameterless constructor.\" is thrown when deserializing json array to Dictionary\u003cstring, string\u003e\r\n\r\n### Regression?\r\n\r\nWorked about 6 weeks ago, the tests succeeded in our pipeline.\r\n\r\n### Known Workarounds\r\n\r\nI have noticed that changing from json array to json object description fixes that problem:\r\n```json\r\n\"Object\": {\r\n    \"key1\": \"value1\",\r\n    \"key2\": \"value2\"\r\n  } \r\n```\r\n\r\n### Configuration\r\n\r\ndotnet-5.0.402\r\narchitecture: x64\r\nos: windows 21h1 19043.1288\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOHnGfg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44b63c",
                                           "createdAt":  "2021-10-19T15:31:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-json\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWe have an Azure Function running in production that reads a dictionary from the configuration of the azure environment. Since the function is running on linux the dictionary is described like this:\r\n```json\r\n{\r\n    \"name\": \"DictionaryName__item1\",\r\n    \"value\": \"value1\",\r\n    \"slotSetting\": false\r\n}.\r\n```\r\n\r\nThere is a unit test and test console application that use a local json file to read the dictionary. The dictionary has been implemented at the beginning of september (about 6 weeks).\r\n\r\nThe dictionary was persisted as json array like this:\r\n\r\n```json\r\n\"Array\": [\r\n    { \"key1\": \"value1\" },\r\n    { \"key2\": \"value2\" }\r\n  ],\r\n```\r\n\r\nAnd deserialized by the Get\u003cT\u003e extension method of the ConfigurationBinder to Dictionary\u003cstring, string\u003e.\r\n\r\nThis however no longer works. The following exception is raised: \"Cannot create instance of type \u0027System.String\u0027 because it is missing a public parameterless constructor.\"\n\n### Reproduction Steps\n\n```json\r\n{\r\n  \"Array\": [\r\n    { \"key1\": \"value1\" },\r\n    { \"key2\": \"value2\" }\r\n  ],\r\n  \"Object\": {\r\n    \"key1\": \"value1\",\r\n    \"key2\": \"value2\"\r\n  } \r\n}\r\n```\r\n\r\n```csharp\r\nvar config = new ConfigurationBuilder()\r\n                .SetBasePath(Directory.GetCurrentDirectory())\r\n                .AddJsonFile(settingsFileName, optional: true, reloadOnChange: true)\r\n                .AddEnvironmentVariables()\r\n                .Build();\r\n\r\nvar jsonObject = config.GetSection(\"Object\").Get\u003cDictionary\u003cstring, string\u003e\u003e();\r\nvar jsonArray = config.GetSection(\"Array\").Get\u003cDictionary\u003cstring, string\u003e\u003e();\r\n```\r\n\r\n[I have added a reproduction repository](https://github.com/GranatenUdo/Net5.JsonArrayDictionarySerializationIssue)\n\n### Expected behavior\n\nJson array and json object are deserialized to Dictionary\u003cstring, string\u003e\n\n### Actual behavior\n\n\"Cannot create instance of type \u0027System.String\u0027 because it is missing a public parameterless constructor.\" is thrown when deserializing json array to Dictionary\u003cstring, string\u003e\n\n### Regression?\n\nWorked about 6 weeks ago.\n\n### Known Workarounds\n\nI have noticed that changing from json array to json object description fixes that problem:\r\n```json\r\n\"Object\": {\r\n    \"key1\": \"value1\",\r\n    \"key2\": \"value2\"\r\n  } \r\n```\n\n### Configuration\n\ndotnet-5.0.402\r\narchitecture: x64\r\nos: windows 21h1 19043.1288\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eGranatenUdo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Json`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-19T15:31:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44cnNf",
                                           "createdAt":  "2021-10-19T19:06:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWe have an Azure Function running in production that reads a dictionary from the configuration of the azure environment. Since the function is running on linux the dictionary is described like this:\r\n```json\r\n{\r\n    \"name\": \"DictionaryName__item1\",\r\n    \"value\": \"value1\",\r\n    \"slotSetting\": false\r\n}.\r\n```\r\n\r\nThere is a unit test and test console application that use a local json file to read the dictionary. The dictionary has been implemented at the beginning of september (about 6 weeks).\r\n\r\nThe dictionary was persisted as json array like this:\r\n\r\n```json\r\n\"Array\": [\r\n    { \"key1\": \"value1\" },\r\n    { \"key2\": \"value2\" }\r\n  ],\r\n```\r\n\r\nAnd deserialized by the Get\u003cT\u003e extension method of the ConfigurationBinder to Dictionary\u003cstring, string\u003e.\r\n\r\nThis however no longer works. The following exception is raised: \"Cannot create instance of type \u0027System.String\u0027 because it is missing a public parameterless constructor.\"\r\n\r\n### Reproduction Steps\r\n\r\n```json\r\n{\r\n  \"Array\": [\r\n    { \"key1\": \"value1\" },\r\n    { \"key2\": \"value2\" }\r\n  ],\r\n  \"Object\": {\r\n    \"key1\": \"value1\",\r\n    \"key2\": \"value2\"\r\n  } \r\n}\r\n```\r\n\r\n```csharp\r\nvar config = new ConfigurationBuilder()\r\n                .SetBasePath(Directory.GetCurrentDirectory())\r\n                .AddJsonFile(settingsFileName, optional: true, reloadOnChange: true)\r\n                .AddEnvironmentVariables()\r\n                .Build();\r\n\r\nvar jsonObject = config.GetSection(\"Object\").Get\u003cDictionary\u003cstring, string\u003e\u003e();\r\nvar jsonArray = config.GetSection(\"Array\").Get\u003cDictionary\u003cstring, string\u003e\u003e();\r\n```\r\n\r\n[I have added a reproduction repository](https://github.com/GranatenUdo/Net5.JsonArrayDictionarySerializationIssue)\r\n\r\n### Expected behavior\r\n\r\nJson array and json object are deserialized to Dictionary\u003cstring, string\u003e\r\n\r\n### Actual behavior\r\n\r\n\"Cannot create instance of type \u0027System.String\u0027 because it is missing a public parameterless constructor.\" is thrown when deserializing json array to Dictionary\u003cstring, string\u003e\r\n\r\n### Regression?\r\n\r\nWorked about 6 weeks ago, the tests succeeded in our pipeline.\r\n\r\n### Known Workarounds\r\n\r\nI have noticed that changing from json array to json object description fixes that problem:\r\n```json\r\n\"Object\": {\r\n    \"key1\": \"value1\",\r\n    \"key2\": \"value2\"\r\n  } \r\n```\r\n\r\n### Configuration\r\n\r\ndotnet-5.0.402\r\narchitecture: x64\r\nos: windows 21h1 19043.1288\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eGranatenUdo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Json`, `untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-19T19:06:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ct8s",
                                           "createdAt":  "2021-10-19T19:47:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safern",
                                           "body":  "\u003e Worked about 6 weeks ago, the tests succeeded in our pipeline.\r\n\r\n@GranatenUdo do you know if the version of the package changed and then it stopped working? If so could you share the package version that changed? ",
                                           "updatedAt":  "2021-10-19T19:47:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ecZ-",
                                           "createdAt":  "2021-10-20T09:45:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GranatenUdo",
                                           "body":  "@safern two relevant packages were updated:\r\nMicrosoft.Azure.Functions.Worker.Extensions.Abstractions 1.0.0 -\u003e 1.1.0\r\nMicrosoft.Azure.Functions.Worker 1.4.0 -\u003e 1.5.2",
                                           "updatedAt":  "2021-10-20T09:45:31Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "ConfigurationBinder cannot deserialize json array to dictionary",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61169",
        "createdAt":  "2021-11-03T16:13:27Z",
        "number":  61169,
        "author":  "marknadig",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCsAQJg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "apoulet-olo",
                                            "createdAt":  "2022-11-09T16:01:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aetos382",
                                            "createdAt":  "2022-12-01T12:29:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aradalvand",
                                            "createdAt":  "2022-12-24T19:45:53Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2022-11-09T13:03:43Z",
        "body":  "### Background and motivation\r\n\r\nI would like to be able to store environment variables in an encrypted form. To facilitate this I need to be able to mutate the values after they are read. I\u0027m proposing the EnvironmentVariablesConfigurationProvider support an optional translator lambda that accepts a DictionaryKey which would mutate the key/value, or perhaps two `ref` strings would be cleaner since DictionaryKey\u0027s Key and Value are `object`.\r\n\r\nFor example, environment variable:\r\n`SET MyProduct_SecretEnc=RE9UTkVUUk9DS1M=`\r\n\r\nshould result in a key `Secret` with value `DOTNETROCKS` with Translator:\r\n```\r\n(ref key, rev value) =\u003e {\r\n    if (key.EndsWith(\"Enc\") {\r\n       key = key.Substring(0, key.Length - 3);\r\n       value = Encoding.UTF8.GetString(Convert.FromBase64String(value));\r\n    }\r\n}\r\n```\r\n\r\nI\u0027d like to see if this is something you\u0027d consider in a PR before I submit.\r\n\r\n\r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace Microsoft.Extensions.Configuration.EnvironmentVariables\r\n{\r\n    /// \u003csummary\u003e\r\n    /// Represents environment variables as an \u003csee cref=\"IConfigurationSource\"/\u003e.\r\n    /// \u003c/summary\u003e\r\n    public class EnvironmentVariablesConfigurationSource : IConfigurationSource\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// A method to translate the key and value before storing in the collection.\r\n        /// \u003c/summary\u003e\r\n        public Action\u003cref string, ref string\u003e Translator { get; set; }\r\n\r\n... pass Translator in provider\u0027s ctor and apply in AddIfPrefixed()\r\n\r\nnamespace Microsoft.Extensions.Configuration.EnvironmentVariables\r\n{\r\n    /// \u003csummary\u003e\r\n    /// An environment variable based \u003csee cref=\"ConfigurationProvider\"/\u003e.\r\n    /// \u003c/summary\u003e\r\n    public class EnvironmentVariablesConfigurationProvider : ConfigurationProvider\r\n    {\r\n\r\n        private void AddIfPrefixed(Dictionary\u003cstring, string\u003e data, string key, string value)\r\n        {\r\n            if (key.StartsWith(_prefix, StringComparison.OrdinalIgnoreCase))\r\n            {\r\n                key = key.Substring(_prefix.Length);\r\n                data[key] = value;\r\n                if (_translator is not null)  {\r\n                   _translator(ref key, ref value)\r\n                }\r\n            }\r\n        }\r\n\r\n```     \r\n\r\n\r\n### API Usage\r\n\r\n```C#\r\npublic static IHostBuilder CreateHostBuilder(string[] args) =\u003e\r\n    Host.CreateDefaultBuilder(args)\r\n        .ConfigureAppConfiguration((hostingContext, config) =\u003e\r\n        {\r\n            config.AddEnvironmentVariables(prefix: \"MyProduct_\", translator: (ref key, rev value) =\u003e {\r\n                if (key.EndsWith(\"Enc\") {\r\n                   key = key.Substring(0, key.Length - 3);\r\n                   value = Encoding.UTF8.GetString(Convert.FromBase64String(value));\r\n                }\r\n            });\r\n})\r\n```     \r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nGiven this would be a new optional parameter, seems risk is low.\r\n\r\n@area-Extensions-Configuration\r\n\r\n@maryamariyan @michaelgsharp @safern @tarekgh\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTgF5ig==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc45MlO5",
                                           "createdAt":  "2021-11-03T16:13:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-11-03T16:13:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45P7Lx",
                                           "createdAt":  "2021-11-04T05:48:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nI would like to be able to store environment variables in an encrypted form. To facilitate this I need to be able to mutate the values after they are read. I\u0027m proposing the EnvironmentVariablesConfigurationProvider support an optional translator lambda that accepts a DictionaryKey which would mutate the key/value, or perhaps two `ref` strings would be cleaner since DictionaryKey\u0027s Key and Value are `object`.\r\n\r\nFor example, environment variable:\r\n`SET MyProduct_SecretEnc=RE9UTkVUUk9DS1M=`\r\n\r\nshould result in a key `Secret` with value `DOTNETROCKS` with Translator:\r\n```\r\n(ref key, rev value) =\u003e {\r\n    if (key.EndsWith(\"Enc\") {\r\n       key = key.Substring(0, key.Length - 3);\r\n       value = Encoding.UTF8.GetString(Convert.FromBase64String(value));\r\n    }\r\n}\r\n```\r\n\r\nI\u0027d like to see if this is something you\u0027d consider in a PR before I submit.\r\n\r\n\r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace Microsoft.Extensions.Configuration.EnvironmentVariables\r\n{\r\n    /// \u003csummary\u003e\r\n    /// Represents environment variables as an \u003csee cref=\"IConfigurationSource\"/\u003e.\r\n    /// \u003c/summary\u003e\r\n    public class EnvironmentVariablesConfigurationSource : IConfigurationSource\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// A method to translate the key and value before storing in the collection.\r\n        /// \u003c/summary\u003e\r\n        public Action\u003cref string, ref string\u003e Translator { get; set; }\r\n\r\n... pass Translator in provider\u0027s ctor and apply in AddIfPrefixed()\r\n\r\nnamespace Microsoft.Extensions.Configuration.EnvironmentVariables\r\n{\r\n    /// \u003csummary\u003e\r\n    /// An environment variable based \u003csee cref=\"ConfigurationProvider\"/\u003e.\r\n    /// \u003c/summary\u003e\r\n    public class EnvironmentVariablesConfigurationProvider : ConfigurationProvider\r\n    {\r\n\r\n        private void AddIfPrefixed(Dictionary\u003cstring, string\u003e data, string key, string value)\r\n        {\r\n            if (key.StartsWith(_prefix, StringComparison.OrdinalIgnoreCase))\r\n            {\r\n                key = key.Substring(_prefix.Length);\r\n                data[key] = value;\r\n                if (_translator is not null)  {\r\n                   _translator(ref key, ref value)\r\n                }\r\n            }\r\n        }\r\n\r\n```     \r\n\r\n\r\n### API Usage\r\n\r\n```C#\r\npublic static IHostBuilder CreateHostBuilder(string[] args) =\u003e\r\n    Host.CreateDefaultBuilder(args)\r\n        .ConfigureAppConfiguration((hostingContext, config) =\u003e\r\n        {\r\n            config.AddEnvironmentVariables(prefix: \"MyProduct_\", translator: (ref key, rev value) =\u003e {\r\n                if (key.EndsWith(\"Enc\") {\r\n                   key = key.Substring(0, key.Length - 3);\r\n                   value = Encoding.UTF8.GetString(Convert.FromBase64String(value));\r\n                }\r\n            });\r\n})\r\n```     \r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nGiven this would be a new optional parameter, seems risk is low.\r\n\r\n@area-Extensions-Configuration\r\n\r\n@maryamariyan @michaelgsharp @safern @tarekgh\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emarknadig\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-04T05:48:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45Rn6U",
                                           "createdAt":  "2021-11-04T13:25:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwgklg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "marknadig",
                                                                               "createdAt":  "2021-11-04T14:52:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pinkfloydx33",
                                                                               "createdAt":  "2021-11-04T19:02:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aetos382",
                                                                               "createdAt":  "2022-12-01T12:29:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This seems like it should be more general purpose than environment variables.",
                                           "updatedAt":  "2021-11-04T13:25:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46qAAz",
                                           "createdAt":  "2021-12-01T21:55:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e I would like to be able to store environment variables in an encrypted form.\r\n\r\nI don\u0027t fully understand the motivation here. If you have secret stored in an environment variable of the process, what\u0027s the value in encrypting it elsewhere? The secret is still available in the environment variable.",
                                           "updatedAt":  "2021-12-01T21:55:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EuFAa",
                                           "createdAt":  "2022-06-11T13:39:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Perhaps this can be implemented as a wrapper similar to [ChainedConfigurationProvider](https://docs.microsoft.com/dotnet/api/microsoft.extensions.configuration.chainedconfigurationprovider?view=dotnet-plat-ext-6.0). The [IConfigurationProvider.Set(string key, string value)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.iconfigurationprovider.set?view=dotnet-plat-ext-6.0) implementation would have to decide whether to encode the value if neither the original key nor the \"Enc\" suffixed key exists already.",
                                           "updatedAt":  "2022-06-11T13:39:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OAXmK",
                                           "createdAt":  "2022-11-09T13:03:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCxxpCg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2022-12-24T19:46:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "drothmaler",
                                           "body":  "Another use case for this would be, a casing conversion (or at least \u0027_\u0027, \u0027-\u0027 or \u0027.\u0027 replacement) of a key... \r\n\r\nEspecially with option binding, I would normally want to configure `record ExportOptions(string FileFormat)` using `{\"Export\":{\"FileFormat\":\"pdf\"}}` from JSON based appsettings, but would like to use `MY_APP__EXPORT__FILE_FORMAT=txt` as an env variable.\r\n",
                                           "updatedAt":  "2022-11-09T13:03:42Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal]: EnvironmentVariablesConfigurationProvider support custom key and value mutation",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61314",
        "createdAt":  "2021-11-08T15:13:14Z",
        "number":  61314,
        "author":  "BalassaMarton",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCBvaCQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2021-11-09T09:54:19Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-01-09T22:27:52Z",
        "body":  "I noticed that `IConfigurationSection` has a settable `Value` property, and the value propagates back to __all__ the providers. Can someone explain why? For me, this is counter-intuitive and dangerous: configuration is loaded in a layered fashion, but saved to every source. It is unclear if these changes should be persisted, trigger reload events, etc. Documentation and examples don\u0027t cover it, there are seemingly no use cases for it, and it\u0027s behavior is inconsistent with the rest of the API.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOWoiPg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc45aiI-",
                                           "createdAt":  "2021-11-08T15:13:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI noticed that `IConfigurationSection` has a settable `Value` property, and the value propagates back to __all__ the providers. Can someone explain why? For me, this is counter-intuitive and dangerous: configuration is loaded in a layered fashion, but saved to every source. It is unclear if these changes should be persisted, trigger reload events, etc. Documentation and examples don\u0027t cover it, there are seemingly no use cases for it, and it\u0027s behavior is inconsistent with the rest of the API.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eBalassaMarton\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-08T15:13:19Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[Discussion] Setting config values in `IConfigurationSection`",
        "labels":  [
                       "question",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62112",
        "createdAt":  "2021-11-28T14:39:36Z",
        "number":  62112,
        "author":  "cervengoc",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4Q0Qg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JustusGreiberORGADATA",
                                            "createdAt":  "2024-05-27T16:40:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JuliusPC",
                                            "createdAt":  "2024-05-30T10:33:13Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-07-26T17:39:13Z",
        "body":  "### Background and motivation\r\n\r\nCurrently, the configuration binder only appends to existing collections. There might be cases when the developer would like to give a *default content* for a collection of configuration items, but would like to apply these *defaults* only if no configuration is provided for that part.\r\n\r\nExample:\r\n\r\n```\r\npublic class MyImageProcessingOptions {\r\n\r\n    ...\r\n    public IList\u003cint\u003e ResizeWidths { get; } = new List\u003cint\u003e { 100, 200, 400, 800 }; \r\n    ...\r\n\r\n}\r\n```\r\n\r\nIn the example I\u0027d like to express that *by default* (aka. if no explicit configuration is given) use these four image widths for creating thumbnails.\r\n\r\nWhen binding the configuration to this instance, the integers specified in the configuration are appended to the list which obviously makes no sense in this scenario. Instead, I\u0027d like to *overwrite* the existing content whenever explicit configuration is specified.\r\n\r\nWorkarounds I\u0027ve tried:\r\n- Setting the option `BindNonPublicProperties` to `true` makes no difference\r\n- Exposing a public setter to the collection neither makes any difference (and it would even be a coding anti-pattern AFAIK)\r\n\r\n### Proposal description\r\n\r\nIntroduce a new binder option to allow *overwriting mutable collection content*. It would technically mean clearing the existing collection instance prior to appending the new items created from configuration source.\r\n\r\nThis option would be by default `false`, making this feature fully backward compatible as far as I can see.\r\n\r\n### API Proposal\r\n\r\n```C#\r\npublic class BinderOptions\r\n{\r\n        /// \u003csummary\u003e\r\n        /// When false (the default), the binder will try to append items from configuration sections to any existing collection.\r\n        /// If true, the binder will attempt to clear the existing mutable collection before appending the items from configuration sections.\r\n        /// \u003c/summary\u003e\r\n        public bool OverwriteExistingMutableCollectionItems { get; set; }\r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```C#\r\nconfiguration.Bind(systemConfig, options =\u003e\r\n{\r\n    options.OverwriteExistingMutableCollectionItems = true;\r\n});\r\n```\r\n\r\n### Alternative Designs\r\n\r\nI cannot see a direct alternative for now, but happy to discuss.\r\n\r\n### Risks\r\n\r\nAs it would be an *incremental*, non-breaking change, I don\u0027t see any risks.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR0Y3MA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc46elly",
                                           "createdAt":  "2021-11-28T14:39:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\n### Motivation\r\n\r\nCurrently, the configuration binder only appends to existing collections. There might be cases when the developer would like to give a *default content* for a collection of configuration items, but would like to apply these *defaults* only if no configuration is provided for that part.\r\n\r\nExample:\r\n\r\n```\r\npublic class MyImageProcessingOptions {\r\n\r\n    ...\r\n    public IList\u003cint\u003e ResizeWidths { get; } = new List\u003cint\u003e { 100, 200, 400, 800 }; \r\n    ...\r\n\r\n}\r\n```\r\n\r\nIn the example I\u0027d like to express that *by default* (aka. if no explicit configuration is given) use these four image widths for creating thumbnails.\r\n\r\nWhen binding the configuration to this instance, the integers specified in the configuration are appended to the list which obviously makes no sense in this scenario. Instead, I\u0027d like to *overwrite* the existing content whenever explicit configuration is specified.\r\n\r\nWorkarounds I\u0027ve tried:\r\n- Setting the option `BindNonPublicProperties` to `true` makes no difference\r\n- Exposing a public setter to the collection neither makes any difference (and it would even be a coding anti-pattern AFAIK)\r\n\r\n### Proposal\r\n\r\nIntroduce a new binder option to allow *overwriting mutable collection content*. It would technically mean clearing the existing collection instance prior to appending the new items created from configuration source.\r\n\r\nThis option would be by default `false`, making this feature fully backward compatible as far as I can see.\r\n\n\n### API Proposal\n\n```C#\r\npublic class BinderOptions\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// When false (the default), the binder will try to append items from configuration sections to any existing collection.\r\n        /// If true, the binder will attempt to clear the existing mutable collection before appending the items from configuration sections.\r\n        /// \u003c/summary\u003e\r\n        public bool OverwriteExistingMutableCollectionItems { get; set; }\r\n}\r\n```\r\n\n\n### API Usage\n\n```C#\r\nconfiguration.Bind(systemConfig, options =\u003e\r\n{\r\n    options.OverwriteExistingMutableCollectionItems = true;\r\n});\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecervengoc\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-28T14:39:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46els1",
                                           "createdAt":  "2021-11-28T14:42:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cervengoc",
                                           "body":  "Hi, just wanted to note that if we can agree on this, I\u0027m happy to put together a Pull Request with this.",
                                           "updatedAt":  "2021-11-28T14:42:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_Kegz",
                                           "createdAt":  "2022-03-05T07:14:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SteveDunn",
                                           "body":  "@cervengoc - I can see the use of this, although I\u0027ve personally never needed such a feature.  However, I can envisage some confusion on larger config sets where developers wonder why their collections are not being appended to, and **then** discovering this flag.\r\n\r\nPerhaps an attribute would be better suited?  It would be perfectly clear of your intentions with an attribute.\r\n\r\nOr, just keep it \u0027old school\u0027 and create a `DefaultableCollection` type:\r\n\r\n```csharp\r\npublic class DefaultableCollection\u003cT\u003e : ICollection\u003cT\u003e\r\n{\r\n    private readonly List\u003cT\u003e _items;\r\n    private bool _overridden;\r\n\r\n    public DefaultableCollection(params T[] defaults) =\u003e _items = defaults.ToList();\r\n\r\n    public void Add(T value)\r\n    {\r\n        if (!_overridden)\r\n        {\r\n            _overridden = true;\r\n            _items.Clear();\r\n        }\r\n        \r\n        _items.Add(value);\r\n    }\r\n\r\n    public void Clear() =\u003e _items.Clear();\r\n\r\n    public bool Contains(T item) =\u003e _items.Contains(item);\r\n\r\n    public void CopyTo(T[] array, int arrayIndex) =\u003e _items.CopyTo(array, arrayIndex);\r\n\r\n    public bool Remove(T item) =\u003e _items.Remove(item);\r\n\r\n    public int Count =\u003e _items.Count;\r\n    \r\n    public bool IsReadOnly =\u003e false;\r\n\r\n    public IEnumerator\u003cT\u003e GetEnumerator() =\u003e _items.GetEnumerator();\r\n\r\n    IEnumerator IEnumerable.GetEnumerator() =\u003e GetEnumerator();\r\n}\r\n```\r\nI\u0027ve added this [to a gist](https://gist.github.com/SteveDunn/a03953236e08c4818cd992dc0101aa23) and also created a github [repo with a simple example project](https://github.com/SteveDunn/BindingToDefaultableList).\r\n\r\n",
                                           "updatedAt":  "2022-03-05T08:07:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_KeoF",
                                           "createdAt":  "2022-03-05T07:18:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SteveDunn",
                                           "body":  "But if it is decided to implement this, then my [blog post](https://dunnhq.com/posts/2021/contributing-to-dotnet/) on how I implement [something very similar](https://github.com/dotnet/runtime/pull/53852) might help.",
                                           "updatedAt":  "2022-03-05T07:18:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FHm6x",
                                           "createdAt":  "2022-06-19T05:44:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCij85w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SteveDunn",
                                                                               "createdAt":  "2022-06-19T06:30:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "cervengoc",
                                           "body":  "Hi @SteveDunn,\r\n\r\nSorry for the very late reply. I get your points, but for me it would be a valuable thing to keep my configuration model clean from needing to introduce quite specific custom collections for this scenario, and describe this logic in the binder.\r\n\r\nBut I\u0027ll consider your suggestions if I see no hope for a library-level support, and thank you for putting your efforts into this.",
                                           "updatedAt":  "2022-06-19T05:54:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FHoAT",
                                           "createdAt":  "2022-06-19T06:24:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cervengoc",
                                           "body":  "An alternative, lighter and more flexible solution would be to introduce an extension point in `BinderOptions` like `Action\u003cXY\u003e OnBindProperty`. It would pass the context to the implementor, having the current property value, the new one coming from the configuration (in a settable way), and possibly a settable `bool` property like `SetPropertyValue`, which when set to `false`, could instruct the binder to **not set** this property.\r\n\r\nThis way the implementor can for example use this for custom parsing, conversion, and also in my case, for re-populating collection properties.\r\n\r\n@SteveDunn What do you think, could this be a better approach?",
                                           "updatedAt":  "2022-06-19T06:24:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FHoXY",
                                           "createdAt":  "2022-06-19T06:33:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SteveDunn",
                                           "body":  "No worries @cervengoc, I think your suggestions are viable approaches. It would be good to get the opinions of @halter73 , @eerhardt , and @maryamariyan.",
                                           "updatedAt":  "2022-06-19T06:33:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HRjcw",
                                           "createdAt":  "2022-07-26T17:39:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "I do like the idea of making Configuration binding more extensible, so we don\u0027t need to add one-off options for every behavior all users want.",
                                           "updatedAt":  "2022-07-26T17:39:13Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[API Proposal]: Microsoft.Extensions.Configuration.Binder: Allow optional overwriting existing mutable collection instances",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62532",
        "createdAt":  "2021-12-08T10:16:03Z",
        "number":  62532,
        "author":  "FynZ",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCvJSAg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jraufeisen",
                                            "createdAt":  "2023-03-29T13:26:10Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-03-17T20:57:22Z",
        "body":  "### Describe the bug\r\n\r\nBinding configuration with empty string as value (\"\") will result in `null` if the section it binds to comes from a nested configuration.\r\n\r\n### To Reproduce\r\n\r\n```c#\r\n// code\r\n\r\nusing Microsoft.AspNetCore;\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.AspNetCore.Hosting;\r\n\r\n// we build the configuration upfront to configure stuff (logging, ..)\r\nvar configuration = new ConfigurationBuilder()\r\n    .AddJsonFile(\"appsettings.NotIncluedByDefault.json\")\r\n    .AddEnvironmentVariables()\r\n    .AddCommandLine(args)\r\n    .Build();\r\n\r\nvar host = WebHost.CreateDefaultBuilder(args)\r\n    .UseStartup\u003cStartup\u003e()\r\n    .UseUrls(configuration[\"Urls\"])\r\n    .UseConfiguration(configuration)\r\n    // we add the previously built configuration manually\r\n    .ConfigureAppConfiguration(builder =\u003e builder.AddConfiguration(configuration));\r\n\r\nawait host.Build().RunAsync();\r\n\r\npublic class Startup\r\n{\r\n    private readonly IConfiguration _configuration;\r\n\r\n    public Startup(IConfiguration configuration)\r\n    {\r\n        _configuration = configuration;\r\n    }\r\n\r\n    /// \u003csummary\u003e\r\n    ///     This method gets called by the runtime. Use this method to add services to the container.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cparam name=\"services\"\u003eCollection of service descriptors.\u003c/param\u003e\r\n    public void ConfigureServices(IServiceCollection services)\r\n    {\r\n        // This configuration binds from the main settings files\r\n        var ok = new WorkingConfiguration();\r\n        _configuration.GetSection(\"BindingOk\").Bind(ok);\r\n\r\n        // This configuration binds from a settings files added \"manually\"\r\n        var faulted = new FaultedConfiguration();\r\n        _configuration.GetSection(\"BindingNotOk\").Bind(faulted);\r\n\r\n        services.AddSingleton(ok);\r\n        services.AddSingleton(faulted);\r\n    }\r\n\r\n    /// \u003csummary\u003e\r\n    ///     Application configuration.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cparam name=\"app\"\u003eThe application builder.\u003c/param\u003e\r\n    public void Configure(IApplicationBuilder app)\r\n    {\r\n    }\r\n}\r\n\r\npublic class WorkingConfiguration\r\n{\r\n    public string ThisBindingWillBindToString { get; set; }\r\n}\r\n\r\npublic class FaultedConfiguration\r\n{\r\n    public string ThisBindingWillBindToNull { get; set; }\r\n}\r\n\r\n// appsettings.json\r\n{\r\n  \"Logging\": {\r\n    \"LogLevel\": {\r\n      \"Default\": \"Information\",\r\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\r\n    }\r\n  },\r\n  \"BindingOk\": {\r\n    \"ThisBindingWillBindToString\": \"\"\r\n  }\r\n}\r\n\r\n// appsettings.NotIncluedByDefault.json\r\n{\r\n  \"BindingNotOk\": {\r\n    \"ThisBindingWillBindToNull\": \"\" \r\n  }\r\n}\r\n```\r\n\r\n### Further technical details\r\n- ASP.NET Core version: 6.0.100\r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version:  VisualStudioProfessional 2022 17.0.2, also observed in Rider from a colleague (dont know the version) and in production (base image is mcr.microsoft.com/dotnet/aspnet:6.0)\r\n- Include the output of `dotnet --info`:\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003edotnet --info Output\u003c/summary\u003e\r\n\r\n```\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100\r\n Commit:    9e8b04bbff\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19043\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.100\\\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0\r\n  Commit:  4822e3c3aa\r\n\r\n.NET SDKs installed:\r\n  5.0.403 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\u003c/details\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOP91BZQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc468U-c",
                                           "createdAt":  "2021-12-08T15:03:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Describe the bug\r\n\r\nBinding configuration with empty string as value (\"\") will result in `null` if the section it binds to comes from a nested configuration.\r\n\r\n### To Reproduce\r\n\r\n```\r\n// code\r\n\r\nusing Microsoft.AspNetCore;\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.AspNetCore.Hosting;\r\n\r\n// we build the configuration upfront to configure stuff (logging, ..)\r\nvar configuration = new ConfigurationBuilder()\r\n    .AddJsonFile(\"appsettings.NotIncluedByDefault.json\")\r\n    .AddEnvironmentVariables()\r\n    .AddCommandLine(args)\r\n    .Build();\r\n\r\nvar host = WebHost.CreateDefaultBuilder(args)\r\n    .UseStartup\u003cStartup\u003e()\r\n    .UseUrls(configuration[\"Urls\"])\r\n    .UseConfiguration(configuration)\r\n    // we add the previously built configuration manually\r\n    .ConfigureAppConfiguration(builder =\u003e builder.AddConfiguration(configuration));\r\n\r\nawait host.Build().RunAsync();\r\n\r\npublic class Startup\r\n{\r\n    private readonly IConfiguration _configuration;\r\n\r\n    public Startup(IConfiguration configuration)\r\n    {\r\n        _configuration = configuration;\r\n    }\r\n\r\n    /// \u003csummary\u003e\r\n    ///     This method gets called by the runtime. Use this method to add services to the container.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cparam name=\"services\"\u003eCollection of service descriptors.\u003c/param\u003e\r\n    public void ConfigureServices(IServiceCollection services)\r\n    {\r\n        // This configuration binds from the main settings files\r\n        var ok = new WorkingConfiguration();\r\n        _configuration.GetSection(\"BindingOk\").Bind(ok);\r\n\r\n        // This configuration binds from a settings files added \"manually\"\r\n        var faulted = new FaultedConfiguration();\r\n        _configuration.GetSection(\"BindingNotOk\").Bind(faulted);\r\n\r\n        services.AddSingleton(ok);\r\n        services.AddSingleton(faulted);\r\n    }\r\n\r\n    /// \u003csummary\u003e\r\n    ///     Application configuration.\r\n    /// \u003c/summary\u003e\r\n    /// \u003cparam name=\"app\"\u003eThe application builder.\u003c/param\u003e\r\n    public void Configure(IApplicationBuilder app)\r\n    {\r\n    }\r\n}\r\n\r\npublic class WorkingConfiguration\r\n{\r\n    public string ThisBindingWillBindToString { get; set; }\r\n}\r\n\r\npublic class FaultedConfiguration\r\n{\r\n    public string ThisBindingWillBindToNull { get; set; }\r\n}\r\n\r\n// appsettings.json\r\n{\r\n  \"Logging\": {\r\n    \"LogLevel\": {\r\n      \"Default\": \"Information\",\r\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\r\n    }\r\n  },\r\n  \"BindingOk\": {\r\n    \"ThisBindingWillBindToString\": \"\"\r\n  }\r\n}\r\n\r\n// appsettings.NotIncluedByDefault.json\r\n{\r\n  \"BindingNotOk\": {\r\n    \"ThisBindingWillBindToNull\": \"\" \r\n  }\r\n}\r\n```\r\n\r\n### Further technical details\r\n- ASP.NET Core version: 6.0.100\r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version:  VisualStudioProfessional 2022 17.0.2, also observed in Rider from a colleague (dont know the version) and in production (base image is mcr.microsoft.com/dotnet/aspnet:6.0)\r\n- Include the output of `dotnet --info`:\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003edotnet --info Output\u003c/summary\u003e\r\n\r\n```\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100\r\n Commit:    9e8b04bbff\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19043\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.100\\\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0\r\n  Commit:  4822e3c3aa\r\n\r\n.NET SDKs installed:\r\n  5.0.403 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\u003c/details\u003e\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eFynZ\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-08T15:03:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_22nd",
                                           "createdAt":  "2022-03-17T20:09:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC43XsQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2022-03-17T20:11:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sunghwan2789",
                                                                               "createdAt":  "2023-03-30T08:43:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "halter73",
                                           "body":  "Here\u0027s a simpler repro:\r\n\r\n#### test.json\r\n```js\r\n{\r\n  \"NullIfChained\": \"\" \r\n}\r\n```\r\n\r\n#### Program.cs\r\n```csharp\r\nvar config1 = new ConfigurationBuilder().AddJsonFile(\"test.json\").Build();\r\nvar config2 = new ConfigurationBuilder().AddConfiguration(config1).Build();\r\n\r\nConsole.WriteLine($\"config1[\\\"NullIfChained\\\"] = \\\"{config1[\"NullIfChained\"] ?? \"(null)\"}\\\"\");\r\nConsole.WriteLine($\"config2[\\\"NullIfChained\\\"] = \\\"{config2[\"NullIfChained\"] ?? \"(null)\"}\\\"\");\r\n```\r\n\r\n#### Output\r\n```\r\nconfig1[\"NullIfChained\"] = \"\"\r\nconfig2[\"NullIfChained\"] = \"(null)\"\r\n```\r\n\r\nThis appears to be caused by this logic in ChainedConfigurationProvider:\r\n\r\nhttps://github.com/dotnet/runtime/blob/a1bc0f34fc8ad77c31a1682841d92dbb20e39dd8/src/libraries/Microsoft.Extensions.Configuration/src/ChainedConfigurationProvider.cs#L39-L43\r\n\r\nMost ConfigurationProviders will just look for the presence of a string in the `Dictionary\u003cstring, string?\u003e Data` and return `true` even if the `string?` is `null` as long as an entry exists in the dictionary.\r\n\r\nhttps://github.com/dotnet/runtime/blob/a1bc0f34fc8ad77c31a1682841d92dbb20e39dd8/src/libraries/Microsoft.Extensions.Configuration/src/ConfigurationProvider.cs#L38-L39\r\n\r\nChainedConfigurationProvider doesn\u0027t have access to a dictionary, just the nested `IConfiguration` and it assumes an empty string is equivalent to null. I\u0027m not sure why. This seems wrong, so I\u0027m very tempted to change this. Unfortunately, this could be pretty breaking because it would stop `Configuration` and `ConfigurationManager` from falling back to the next config source if a chained `IConfiguration` returns an empty string like it does today.",
                                           "updatedAt":  "2022-03-17T20:18:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_3EFu",
                                           "createdAt":  "2022-03-17T20:34:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCTgnWg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "halter73",
                                                                               "createdAt":  "2022-03-17T20:46:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2022-03-17T20:54:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e ChainedConfigurationProvider doesn\u0027t have access to a dictionary, just the nested IConfiguration and it assumes an empty string is equivalent to null. I\u0027m not sure why.\r\n\r\nSee also https://github.com/dotnet/runtime/issues/65594",
                                           "updatedAt":  "2022-03-17T20:34:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_3UFl",
                                           "createdAt":  "2022-03-17T20:57:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "If we decided it is an OK breaking change, it would make sense to fix as long as the behavior between Configuration and ConfigurationManager stays consistent.\r\n\r\n",
                                           "updatedAt":  "2022-03-17T20:57:22Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "IConfiguration binding behave unexpectedly when binding empty strings from nested configurations",
        "labels":  [
                       "bug",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62751",
        "createdAt":  "2021-12-12T02:28:37Z",
        "number":  62751,
        "author":  "PonchoPowers",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-01-04T15:41:28Z",
        "body":  "At the moment, the way the command line arguments are parsed makes sense on Windows, however on *nix, if you were to use **-k1** as a command line argument, this would typically equate to `-k -1` on a *nix machine.\r\n\r\nThe change I propose will make the parsing more consistent with a *nix machine.\r\n\r\nThis would be a breaking change, which is limited to those using command line switches.\r\n\r\nIt would be good if when a single letter/number is used, instead of being mapped to a longer command line argument, it is instead mapped to a config setting.\r\n\r\nSo say for instance `-v` was mapped to:\r\n`--Logging:LogLevel:Default=Trace`\r\n\r\nAnd `-d` was mapped to:\r\n`--environment \"Development\"`\r\n\r\nTherefore, `-vd`, would be mapped to:\r\n`--Logging:LogLevel:Default=Trace --environment \"Development\"`\r\n\r\nThis would be much more in keeping with *nix machines.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOO-XRuQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc47Hglz",
                                           "createdAt":  "2021-12-12T02:40:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PonchoPowers",
                                           "body":  "A breaking change could be avoided come to think about it, if a 3rd parameter could be passed to `CommandLineConfigurationExtensions.AddCommandLine` allowing for single character flags to be mapped to a command line argument, so that `-vd AnotherArg=test` can be parsed correctly, this would prevent the ambiguity whereby -vd could be a shortand switch, or multiple shorthand switches.",
                                           "updatedAt":  "2021-12-12T02:40:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47Lsky",
                                           "createdAt":  "2021-12-13T21:21:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Please move this to https://github.com/dotnet/command-line-api",
                                           "updatedAt":  "2021-12-13T21:21:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47L8JV",
                                           "createdAt":  "2021-12-13T22:55:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PonchoPowers",
                                           "body":  "This relates to the configuration though so should it be moved?",
                                           "updatedAt":  "2021-12-13T22:55:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47L8fB",
                                           "createdAt":  "2021-12-13T22:58:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCGeebg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PonchoPowers",
                                                                               "createdAt":  "2021-12-14T08:17:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Ah, that one\u0027s over here: https://github.com/dotnet/runtime/blob/8b1a0c865799e45208dfa20f8b74e53e9c9c2484/src/libraries/Microsoft.Extensions.Configuration.CommandLine/src/CommandLineConfigurationExtensions.cs",
                                           "updatedAt":  "2021-12-13T22:58:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47L_jm",
                                           "createdAt":  "2021-12-13T23:17:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-12-13T23:17:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47L_mc",
                                           "createdAt":  "2021-12-13T23:17:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAt the moment, the way the command line arguments are parsed makes sense on Windows, however on *nix, if you were to use **-k1** as a command line argument, this would typically equate to `-k -1` on a *nix machine.\r\n\r\nThe change I propose will make the parsing more consistent with a *nix machine.\r\n\r\nThis would be a breaking change, which is limited to those using command line switches.\r\n\r\nIt would be good if when a single letter/number is used, instead of being mapped to a longer command line argument, it is instead mapped to a config setting.\r\n\r\nSo say for instance `-v` was mapped to:\r\n`--Logging:LogLevel:Default=Trace`\r\n\r\nAnd `-d` was mapped to:\r\n`--environment \"Development\"`\r\n\r\nTherefore, `-vd`, would be mapped to:\r\n`--Logging:LogLevel:Default=Trace --environment \"Development\"`\r\n\r\nThis would be much more in keeping with *nix machines.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eBonnieSoftware\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-13T23:17:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc473eU_",
                                           "createdAt":  "2022-01-03T22:21:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Another possibility would be to add an option to \r\n\r\nhttps://github.com/dotnet/runtime/blob/8b1a0c865799e45208dfa20f8b74e53e9c9c2484/src/libraries/Microsoft.Extensions.Configuration.CommandLine/src/CommandLineConfigurationSource.cs#L12-L22\r\n\r\nWhich would put it in this \"PosixCompatible\" mode. If someone wanted to opt in, they would use:\r\n\r\n```C#\r\n    IConfigurationBuilder configurationBuilder = ...;\r\n    configurationBuilder.Add(new CommandLineConfigurationSource { Args = args, SwitchMappings = switchMappings, PosixCompatible = true });\r\n```\r\n\r\nThen we could optionally add the parameter to the convenience `AddCommandLine` method, which would set `PosixCompatible` (or whatever we called the option).",
                                           "updatedAt":  "2022-01-03T22:21:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc475ZCQ",
                                           "createdAt":  "2022-01-04T15:20:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PonchoPowers",
                                           "body":  "I\u0027d prefer a more general solution that gives intent into what it is doing rather than using `PosixCompatible` as **PosixCompatible** does not really give any intent into what differs whether it is `true` or `false`.",
                                           "updatedAt":  "2022-01-04T15:20:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc475dG5",
                                           "createdAt":  "2022-01-04T15:41:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@BonnieSoftware - Do you have a concrete proposal?",
                                           "updatedAt":  "2022-01-04T15:41:28Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Proposal to change the way shorthand command line arguments are parsed",
        "labels":  [
                       "api-suggestion",
                       "feature-request",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63508",
        "createdAt":  "2022-01-07T18:19:09Z",
        "number":  63508,
        "author":  "ogxd",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-01-11T23:25:30Z",
        "body":  "Currently, according to the documentation, with the binding option [BindNonPublicProperties](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.binderoptions.bindnonpublicproperties?view=dotnet-plat-ext-6.0#definition) the binder will attempt to set all non-read-only properties.   \r\nHowever, this is not true for set-only properties (it\u0027s not a read-only property).   \r\n\r\nI took a look at [the code](https://github.com/dotnet/runtime/blob/c0dabb527176d1fdb6ba7bdca75fd80d69482be2/src/libraries/Microsoft.Extensions.Configuration.Binder/src/ConfigurationBinder.cs#L244) to see why this does not work, and it seems this is intentional:\r\n```csharp\r\n// We don\u0027t support set only, non public, or indexer properties\r\nif (property.GetMethod == null ||\r\n    (!options.BindNonPublicProperties \u0026\u0026 !property.GetMethod.IsPublic) ||\r\n    property.GetMethod.GetParameters().Length \u003e 0)\r\n{\r\n    return;\r\n}\r\n```\r\nI am not sure why this is so because by removing the null check it still works, tests are passing and it is now closer to the behavior documentation describes.     \r\n\r\nRemoving this allows nice things such as leveraging set-only properties for custom types in configuration, built from primitive types supported by the binder.\r\nHere is one example with `TimeSpan`, a type very commonly used in configurations:\r\n```csharp\r\npublic class MyConfiguration\r\n{\r\n    public double TimeoutSeconds { set =\u003e Interval = TimeSpan.FromSeconds(value); }\r\n    public TimeSpan Timeout { get; private set; }\r\n}\r\n```\r\nWith this example, we can use `\"TimeoutSeconds\"` for configuration keys with integer values while having a `TimeSpan` in the code and a setter for the tests.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPA9dUw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc48DzRd",
                                           "createdAt":  "2022-01-07T18:19:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCurrently, according to the documentation, with the binding option [BindNonPublicProperties](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.binderoptions.bindnonpublicproperties?view=dotnet-plat-ext-6.0#definition) the binder will attempt to set all non-read-only properties.   \r\nHowever, this is not true for set-only properties (it\u0027s not a read-only property).\r\nI took a look at the code so see why this does not work, and it seems it was made so on purpose:\r\n```csharp\r\n// We don\u0027t support set only, non public, or indexer properties\r\nif (property.GetMethod == null ||\r\n    (!options.BindNonPublicProperties \u0026\u0026 !property.GetMethod.IsPublic) ||\r\n    property.GetMethod.GetParameters().Length \u003e 0)\r\n{\r\n    return;\r\n}\r\n```\r\nHowever, I am not sure why this is so because by removing the null check it still works, tests are passing and it is now closer to the behavior documentation describes.   \r\nRemoving this allows nice things such as leveraging set-only properties for custom types in configuration, built from primitive types supported by the binder.\r\nHere is one example with `TimeSpan`, a type very commonly used in configurations:\r\n```csharp\r\npublic class MyConfiguration\r\n{\r\n    public double TimeoutSeconds { set =\u003e Interval = TimeSpan.FromSeconds(value); }\r\n    public TimeSpan Timeout { get; private set; }\r\n}\r\n```\r\nWith this example, we can use `\"TimeoutSeconds\"` for configuration keys with integer values while having a `TimeSpan` in the code and a setter for the tests.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eogxd\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-07T18:19:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48D11T",
                                           "createdAt":  "2022-01-07T18:33:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I am seeing @natemcmaster is the one added this code in the [commit](https://github.com/dotnet/runtime/commit/9a294cd4188eab33f420d9d1cad4298d0fa791a4). He may remember why we did that?",
                                           "updatedAt":  "2022-01-07T18:33:01Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Allow configuration binding to set-only properties",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64840",
        "createdAt":  "2022-02-05T01:48:54Z",
        "number":  64840,
        "author":  "maryamariyan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODATkZw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mohsenhosseinalizadeh",
                                            "createdAt":  "2025-03-20T09:54:23Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-07-14T21:52:21Z",
        "body":  "Based on docs for **Interchangeable collections** in [Collection Types in Data Contracts](https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/collection-types-in-data-contracts#interchangeable-collections), we see that:\r\n\r\n```c#\r\n[DataContract(Name = \"PurchaseOrder\")]\r\npublic class PurchaseOrder1\r\n{\r\n    [DataMember]\r\n    public string customerName;\r\n    [DataMember]\r\n    public Collection\u003cItem\u003e items;\r\n    [DataMember]\r\n    public string[] comments;\r\n}\r\n```\r\nand \r\n```c#\r\n[DataContract(Name = \"PurchaseOrder\")]\r\npublic class PurchaseOrder2\r\n{\r\n    [DataMember]\r\n    public string customerName;\r\n    [DataMember]\r\n    public List\u003cItem\u003e items;\r\n    [DataMember]\r\n    public BindingList\u003cstring\u003e comments;\r\n}\r\n```\r\nboth get an XML data contract similar to the following code:\r\n\r\n```xml\r\n\u003cPurchaseOrder\u003e\r\n    \u003ccustomerName\u003e...\u003c/customerName\u003e\r\n    \u003citems\u003e\r\n        \u003cItem\u003e...\u003c/Item\u003e\r\n        \u003cItem\u003e...\u003c/Item\u003e\r\n        \u003cItem\u003e...\u003c/Item\u003e\r\n        ...\r\n    \u003c/items\u003e\r\n    \u003ccomments\u003e\r\n        \u003cstring\u003e...\u003c/string\u003e\r\n        \u003cstring\u003e...\u003c/string\u003e\r\n        \u003cstring\u003e...\u003c/string\u003e\r\n        ...\r\n    \u003c/comments\u003e\r\n\u003c/PurchaseOrder\u003e\r\n```\r\n\r\nHowever, using `Microsoft.Extensions.Configuration.Xml` to deserialize to XML we require a wrapping class like `ItemList` similar to the format below:\r\n\r\n```c#\r\nclass PurchaseOrder {\r\n                public string CustomerName {get; set;}\r\n                public ItemList Items {get;set;}\r\n}\r\nclass ItemList {\r\n                public Item[] Item\r\n} \r\nclass Item {…}\r\n```\r\n\r\nTo help with developers trying to migrate from Data Contract to `Microsoft.Extensions.Configuration`, we are looking to update the extensions library to deserialize without the need of `ItemList`, like below:\r\n\r\n```c#\r\n[DataContract]\r\nclass PurchaseOrder {\r\n                [DataMember]\r\n                public string CustomerName {get; set;}\r\n                [DataMember] \r\n                public Item[] Items {get;set;}\r\n}\r\n[DataContract]\r\nclass Item {…}\r\n```\r\n\r\n## API Proposal\r\n\r\nWith the new behaviour of XML deserialization, this wrapping class `ItemList` would no longer be needed.\r\n\r\nTo accomplish this :\r\n\r\n1 - We add a new configuration flag called `IgnoreElementNameForRepeats` this way we avoid introducing a breaking change to existing deserialization behaviour.\r\n2 - On unexpected xml input for this special migration use case, when the configuration flag is enabled we throw exception. The following is the unexpected case:\r\n\r\n```xml\r\n\u003cPurchaseOrder\u003e\r\n    \u003ccustomerName\u003e...\u003c/customerName\u003e\r\n  \r\n    \u003cItem\u003e...\u003c/Item\u003e\r\n    \u003cItem\u003e...\u003c/Item\u003e\r\n    \u003cItem\u003e...\u003c/Item\u003e\r\n    ... \r\n    \u003cstring\u003e...\u003c/string\u003e\r\n    \u003cstring\u003e...\u003c/string\u003e\r\n    \u003cstring\u003e...\u003c/string\u003e\r\n    ...\r\n\u003c/PurchaseOrder\u003e\r\n```\r\n\r\n```diff\r\n    public partial class XmlConfigurationSource : Microsoft.Extensions.Configuration.FileConfigurationSource\r\n    {\r\n        public XmlConfigurationSource() { }\r\n+        public bool IgnoreElementNameForRepeats { get; set; }\r\n        public override Microsoft.Extensions.Configuration.IConfigurationProvider Build(Microsoft.Extensions.Configuration.IConfigurationBuilder builder) { throw null; }\r\n    }\r\n    public partial class XmlStreamConfigurationProvider : Microsoft.Extensions.Configuration.StreamConfigurationProvider\r\n    {\r\n        public XmlStreamConfigurationProvider(Microsoft.Extensions.Configuration.Xml.XmlStreamConfigurationSource source) : base (default(Microsoft.Extensions.Configuration.StreamConfigurationSource)) { }\r\n        public override void Load(System.IO.Stream stream) { }\r\n        public static System.Collections.Generic.IDictionary\u003cstring, string\u003e Read(System.IO.Stream stream, Microsoft.Extensions.Configuration.Xml.XmlDocumentDecryptor decryptor) { throw null; }\r\n+        public static System.Collections.Generic.IDictionary\u003cstring, string\u003e Read(System.IO.Stream stream, Microsoft.Extensions.Configuration.Xml.XmlDocumentDecryptor decryptor, bool ignoreElementNameForRepeats) { throw null; }\r\n    }\r\n    public partial class XmlStreamConfigurationSource : Microsoft.Extensions.Configuration.StreamConfigurationSource\r\n    {\r\n        public XmlStreamConfigurationSource() { }\r\n+        public bool IgnoreElementNameForRepeats { get; set; }\r\n        public override Microsoft.Extensions.Configuration.IConfigurationProvider Build(Microsoft.Extensions.Configuration.IConfigurationBuilder builder) { throw null; }\r\n    }\r\n```\r\n\r\nRefer to drafted prototype PR by @vidommet: https://github.com/dotnet/runtime/pull/64686\r\n\r\n## Risk\r\nLow. Since with this solution we are adding a configuration flag, disabled by default, we would not introduce a breaking change to the existing deserialization behaviour.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOP1QZaA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49bBU0",
                                           "createdAt":  "2022-02-05T01:48:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nBased on docs for **Interchangeable collections** in [Collection Types in Data Contracts](https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/collection-types-in-data-contracts#interchangeable-collections), we see that:\r\n\r\n```c#\r\n[DataContract(Name = \"PurchaseOrder\")]\r\npublic class PurchaseOrder1\r\n{\r\n    [DataMember]\r\n    public string customerName;\r\n    [DataMember]\r\n    public Collection\u003cItem\u003e items;\r\n    [DataMember]\r\n    public string[] comments;\r\n}\r\n```\r\nand \r\n```c#\r\n[DataContract(Name = \"PurchaseOrder\")]\r\npublic class PurchaseOrder2\r\n{\r\n    [DataMember]\r\n    public string customerName;\r\n    [DataMember]\r\n    public List\u003cItem\u003e items;\r\n    [DataMember]\r\n    public BindingList\u003cstring\u003e comments;\r\n}\r\n```\r\nboth get an XML data contract similar to the following code:\r\n\r\n```xml\r\n\u003cPurchaseOrder\u003e\r\n    \u003ccustomerName\u003e...\u003c/customerName\u003e\r\n    \u003citems\u003e\r\n        \u003cItem\u003e...\u003c/Item\u003e\r\n        \u003cItem\u003e...\u003c/Item\u003e\r\n        \u003cItem\u003e...\u003c/Item\u003e\r\n        ...\r\n    \u003c/items\u003e\r\n    \u003ccomments\u003e\r\n        \u003cstring\u003e...\u003c/string\u003e\r\n        \u003cstring\u003e...\u003c/string\u003e\r\n        \u003cstring\u003e...\u003c/string\u003e\r\n        ...\r\n    \u003c/comments\u003e\r\n\u003c/PurchaseOrder\u003e\r\n```\r\n\r\nHowever, using `Microsoft.Extensions.Configuration.Xml` to deserialize to XML we require a wrapping class like `ItemList` similar to the format below:\r\n\r\n```c#\r\nclass PurchaseOrder {\r\n                public string CustomerName {get; set;}\r\n                public ItemList Items {get;set;}\r\n}\r\nclass ItemList {\r\n                public Item[] Item\r\n} \r\nclass Item {…}\r\n```\r\n\r\nTo help with developers trying to migrate from Data Contract to `Microsoft.Extensions.Configuration`, we are looking to update the extensions library to deserialize without the need of `ItemList`, like below:\r\n\r\n```c#\r\n[DataContract]\r\nclass PurchaseOrder {\r\n                [DataMember]\r\n                public string CustomerName {get; set;}\r\n                [DataMember] \r\n                public Item[] Items {get;set;}\r\n}\r\n[DataContract]\r\nclass Item {…}\r\n```\r\n\r\n## API Proposal\r\n\r\nWith the new behaviour of XML deserialization, this wrapping class `ItemList` would no longer be needed.\r\n\r\nTo accomplish this :\r\n\r\n1 - We add a new configuration flag called `IgnoreElementNameForRepeats` this way we avoid introducing a breaking change to existing deserialization behaviour.\r\n2 - On unexpected xml input for this special migration use case, when the configuration flag is enabled we throw exception.\r\n\r\n```diff\r\n    public partial class XmlConfigurationSource : Microsoft.Extensions.Configuration.FileConfigurationSource\r\n    {\r\n        public XmlConfigurationSource() { }\r\n+        public bool IgnoreElementNameForRepeats { get; set; }\r\n        public override Microsoft.Extensions.Configuration.IConfigurationProvider Build(Microsoft.Extensions.Configuration.IConfigurationBuilder builder) { throw null; }\r\n    }\r\n    public partial class XmlStreamConfigurationProvider : Microsoft.Extensions.Configuration.StreamConfigurationProvider\r\n    {\r\n        public XmlStreamConfigurationProvider(Microsoft.Extensions.Configuration.Xml.XmlStreamConfigurationSource source) : base (default(Microsoft.Extensions.Configuration.StreamConfigurationSource)) { }\r\n        public override void Load(System.IO.Stream stream) { }\r\n        public static System.Collections.Generic.IDictionary\u003cstring, string\u003e Read(System.IO.Stream stream, Microsoft.Extensions.Configuration.Xml.XmlDocumentDecryptor decryptor) { throw null; }\r\n+        public static System.Collections.Generic.IDictionary\u003cstring, string\u003e Read(System.IO.Stream stream, Microsoft.Extensions.Configuration.Xml.XmlDocumentDecryptor decryptor, bool ignoreElementNameForRepeats) { throw null; }\r\n    }\r\n    public partial class XmlStreamConfigurationSource : Microsoft.Extensions.Configuration.StreamConfigurationSource\r\n    {\r\n        public XmlStreamConfigurationSource() { }\r\n+        public bool IgnoreElementNameForRepeats { get; set; }\r\n        public override Microsoft.Extensions.Configuration.IConfigurationProvider Build(Microsoft.Extensions.Configuration.IConfigurationBuilder builder) { throw null; }\r\n    }\r\n```\r\n\r\nRefer to drafted prototype PR by @vidommet: https://github.com/dotnet/runtime/pull/64686\r\n\r\n## Risk\r\nLow. Since with this solution we are adding a configuration flag, disabled by default, we would not introduce a breaking change to the existing deserialization behaviour.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emaryamariyan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-05T01:48:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49cvv1",
                                           "createdAt":  "2022-02-07T00:02:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCNTfJw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "amoerie",
                                                                               "createdAt":  "2022-02-07T03:15:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "@vidommet could you please elaborate more on this migration scenario? \r\n\r\nIs there a good indication for us to know if this kind of problem is something many developers wanting to use extension\u0027s xml configuration library today might find this feature useful? \r\n\r\ncc @amoerie seems like this feature new addition is in the same area as the feature you included last year in https://github.com/dotnet/runtime/pull/44608 ",
                                           "updatedAt":  "2022-02-07T00:02:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49dEes",
                                           "createdAt":  "2022-02-07T03:15:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "amoerie",
                                           "body":  "I can\u0027t speak for everyone, but our use case was mixing JSON and XML configuration files, mostly because our installer did not support JSON files out of the box.\n\nThis meant that the produced keys had to be similar to what the JSON configuration provider produces. This was a big focus of my PR, which tried to consolidate how parsing arrays worked between XML and JSON.\n\nHere, the author seems to be looking for symmetry between generating XML from C# classes and subsequently using that as a configuration source. I can understand the idea, but we never generated our config files programmatically, so this was not relevant for our use case.\n\nI also wonder: if you\u0027re generating your config files anyway, why use XML at all?",
                                           "updatedAt":  "2022-02-07T03:15:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49dd5-",
                                           "createdAt":  "2022-02-07T07:01:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vidommet",
                                           "body":  "Our current situation is do migrate from existing `DataContractSerializer` to `Extensions.Configuration.Xml`. Most of the XML in this situation is hand-crafted for easy readability. This feature makes it straightforward from existing [format](https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/collection-types-in-data-contracts#interchangeable-collections) rather than modifying each of the XML files one by one to the format required by `Configuration.Xml`.\r\n\r\nAlso, this feature improves the readability of XML and its corresponding POCO configuration classes. Simple items with arrays woudn\u0027t need an enclosing array as written in the proposal.\r\n\r\nThe situation is similar with teams trying to migrate from existing Data contract serialization to the extensions libraries.",
                                           "updatedAt":  "2022-02-07T07:01:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49dmcC",
                                           "createdAt":  "2022-02-07T07:57:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCR7t_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2022-03-08T16:30:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "amoerie",
                                           "body":  "@vidommet I\u0027m still trying to figure out what you mean by migration. \r\nExtensions.Configuration.Xml is just another provider in the Extensions.Configuration ecosystem that produces a list of key values for a given XML file. \r\nDataContractSerializer on the other hand is a serialization / deserialization mechanism that can turn C# POCOs into XML and vice versa.\r\nThe example XML input files that you give are perfectly supported by the existing implementation of the XML provider in .NET 6. So should I assume that the produced keys are not what you expect/want? \r\n\r\nYour example file\r\n\r\n```xml\r\n\u003cPurchaseOrder\u003e\r\n    \u003ccustomerName\u003e...\u003c/customerName\u003e\r\n    \u003citems\u003e\r\n        \u003cItem\u003e...\u003c/Item\u003e\r\n        \u003cItem\u003e...\u003c/Item\u003e\r\n        \u003cItem\u003e...\u003c/Item\u003e\r\n        ...\r\n    \u003c/items\u003e\r\n    \u003ccomments\u003e\r\n        \u003cstring\u003e...\u003c/string\u003e\r\n        \u003cstring\u003e...\u003c/string\u003e\r\n        \u003cstring\u003e...\u003c/string\u003e\r\n        ...\r\n    \u003c/comments\u003e\r\n\u003c/PurchaseOrder\u003e\r\n```\r\n\r\nWould produce the following key values (IIRC):\r\n\r\n```\r\ncustomerName = ..\r\nitems:item:0 = ...\r\nitems:item:1 = ...\r\nitems:item:2 = ...\r\ncomments:string:0 = ...\r\ncomments:string:1 = ...\r\ncomments:string:2 = ...\r\n```\r\n",
                                           "updatedAt":  "2022-02-07T07:57:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49fkwx",
                                           "createdAt":  "2022-02-07T16:50:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEMXITA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "flibustier7seas",
                                                                               "createdAt":  "2025-04-01T09:36:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vidommet",
                                           "body":  "@amoerie that is correct. In the sample, you provided, `items:item:0` requires two classes for us to be able to bind to a POCO. Compare this to data contract serializer, which only needs one. This makes migration from one system to another much harder because we have to maintain two sets of POCOs.\r\n\r\nThe proposal here is to make the sample you provided into something like the following which will remove the need for two sets of POCOs.\r\n```\r\ncustomerName = ..\r\nitems:0 = ...\r\nitems:1 = ...\r\nitems:2 = ...\r\ncomments:0 = ...\r\ncomments:1 = ...\r\ncomments:2 = ..\r\n```",
                                           "updatedAt":  "2022-02-07T16:50:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_U7hd",
                                           "createdAt":  "2022-03-09T01:12:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "\u003e Extensions.Configuration.Xml is just another provider in the Extensions.Configuration ecosystem that produces a list of key values for a given XML file.\r\nDataContractSerializer on the other hand is a serialization / deserialization mechanism that can turn C# POCOs into XML and vice versa.\r\n\r\nI agree with this 💯.  We\u0027ll never get parity with DCS -- that\u0027s a non-goal.  Just like it\u0027s a non-goal to get to parity with features of other serializers like System.Text.Json or Newtonsoft.Json.  Those are serializers.  This is a configuration API.\r\n\r\n\u003e This makes migration from one system to another\r\n\r\nCan you tell us why you\u0027re trying to migrate from one to the other?  DataContractSerializer should work just fine on .NETCore and give you better performance for this sort of task than Configuration.",
                                           "updatedAt":  "2022-03-09T01:12:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_U-ML",
                                           "createdAt":  "2022-03-09T01:30:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vidommet",
                                           "body":  "DataContractSerializer forces us to use XML and doesn’t provide all the flexibilities of Extensions.Configuration including OOB support for non-XML formats. We are expanding the capabilities of our library to support a broad list of formats and validation options. Extensions.Configuration is a much better option with this when compared to DataContractSerializer.\r\n\r\nI am not trying to bring feature parity with DCS. The aim is to provide interoperability of the POCOs so that switching between them is simpler. Currently POCOs accepted by both are similar with a few differences. I am trying to reduce them so that there is a path for the switch.\r\n\r\nPerformance is not a problem here because we don\u0027t load configurations for every request. We load them once and reuse the objects throughout the lifetime of the application until the next change in the configuration.",
                                           "updatedAt":  "2022-03-09T01:30:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_VBlo",
                                           "createdAt":  "2022-03-09T01:58:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCSA2yg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2022-03-09T02:00:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "The problem here is that configuration is never going to have the sort of features that serializers do.  Things that let folks be opinionated about the format of the input files or how conversions are done.  Its purpose is simpler.  Why should we add policy to the provider for this one case?  Others will certainly have more.\r\n\r\nCan\u0027t the path be \"convert your XML file by removing this node\"?  If your goal is a one time move from DCS to some new solution that seems like a better tradeoff.  I imagine a tool could easily identify nodes to remove or even a do it at runtime if you didn\u0027t care much about the performance.  Lots of potential solutions.",
                                           "updatedAt":  "2022-03-09T01:58:12Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "XML Deserialization in Microsoft.Extensions.Configuration - Parity with Data Contracts",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65593",
        "createdAt":  "2022-02-18T22:13:33Z",
        "number":  65593,
        "author":  "msedi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBH5kw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "par00036",
                                            "createdAt":  "2022-03-04T19:47:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aayjaychan",
                                            "createdAt":  "2022-04-14T10:53:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Arthri",
                                            "createdAt":  "2022-05-13T16:59:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Squirrelies",
                                            "createdAt":  "2022-05-28T21:25:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jamsoft",
                                            "createdAt":  "2022-06-02T16:10:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "knd775",
                                            "createdAt":  "2022-06-18T02:09:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ahdung",
                                            "createdAt":  "2022-08-03T09:05:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IncPlusPlus",
                                            "createdAt":  "2022-08-27T15:10:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jamesshenry",
                                            "createdAt":  "2022-12-10T16:39:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PassivePicasso",
                                            "createdAt":  "2023-06-09T17:34:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "burakt91",
                                            "createdAt":  "2023-08-22T12:13:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gvkries",
                                            "createdAt":  "2023-08-23T07:28:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "oolleegg55",
                                            "createdAt":  "2023-08-28T13:50:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JonDouglas",
                                            "createdAt":  "2023-10-23T00:23:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ttoomm318",
                                            "createdAt":  "2023-11-03T16:18:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "brayden-dowson",
                                            "createdAt":  "2024-01-19T13:57:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2024-03-25T14:50:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rolfik-mycronic",
                                            "createdAt":  "2024-06-10T12:25:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maxkatz6",
                                            "createdAt":  "2024-09-23T23:28:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Timberfang",
                                            "createdAt":  "2024-10-17T18:02:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iwenr",
                                            "createdAt":  "2024-12-13T01:38:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BrycensRanch",
                                            "createdAt":  "2024-12-26T00:42:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "doxxx",
                                            "createdAt":  "2025-02-14T22:05:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cyraid",
                                            "createdAt":  "2025-04-11T19:12:33Z"
                                        }
                                    ],
                          "totalCount":  24
                      },
        "updatedAt":  "2025-04-11T19:15:20Z",
        "body":  "### Background and motivation\r\n\r\nThis proposal is about to enable saving and manipulating configurations in `Microsoft.Extensions.Configuration.`*. \r\n\r\nThis request has been brought up many times in https://github.com/dotnet/AspNetApiDocs/issues/89, https://github.com/aspnet/Configuration/issues/385 and others, but has been discussed away by stating that it was intended to be immutable for many reasons that have to do with ASP.NET.\r\n\r\nWhile all the arguments might partially be true for ASP.NET for deployments reasons, etc. this statement is wrong for desktop applications. Here you have dialogs or other options where you change settings in your UI. Sometimes you event have to, for example if you want to remember if the application has started for the first time, or other user settings that you have to persist. I think all of us agree that there are countless things that need to be stored.\r\n\r\nThere is also `System.Configuration` which has the ability to save, but there is not chance to configure where you want to load it.\r\n\r\nIn the end, the proposal is all about adding a possibility to simply store the configuration.\r\n\r\n\r\n\r\n\r\n\r\n\r\n### API Proposal\r\n\r\nInstead of having a `IConfigurationSource ` we need an `IConfigurationSink` that has the inverse behavior of `IConfigurationSource`\r\n\r\nThe IConfiguration gets a new method for persisting configuration:\r\n\r\n```cs\r\nIConfiguration.Save(IConfigurationSink sink)\r\n```\r\n\r\n\r\n\r\n### API Usage\r\n\r\n```cs\r\nvar config = ConfigurationBuilder().AddIniFIle(\"c:\\test.ini\").Build(); config[\"test\"] = \"ok\";\r\n\r\nconfig.Save(new JsonConfigurationSink(\"D:\\\\test.user.ini\"));\r\n```\r\n\r\n### Alternative Designs\r\n\r\nSurely there a many things to discuss, so please just see this as a starter.\r\n\r\n### Risks\r\n\r\nThe problem currently is that there are many providers from different sources. So the question is if it should be saved back to the individual providers, or if there is a single configuration file.\r\n\r\nIf you ask me I would go with a single configuration file that can be saved with a _single provider_ this provider can be added additionally to the configuration which would cause loading the configuration from many sources using different providers. As a last step all current data is overwritten by the last provider (which could als made a bit more explicit so that it can easily be seen from the builder what is an overriding configuration).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpsOCig==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-TXDA",
                                           "createdAt":  "2022-02-18T22:13:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nThis proposal is about to enable saving and manipulating configurations in `Microsoft.Extensions.Configuration.`*. \r\n\r\nThis request has been brought up many times in https://github.com/dotnet/AspNetApiDocs/issues/89, https://github.com/aspnet/Configuration/issues/385 and others, but has been discussed away by stating that it was intended to be immutable for many reasons that have to do with ASP.NET.\r\n\r\nWhile all the arguments might partially be true for ASP.NET for deployments reasons, etc. this statement is wrong for desktop applications. Here you have dialogs or other options where you change settings in your UI. Sometimes you event have to, for example if you want to remember if the application has started for the first time, or other user settings that you have to persist. I think all of us agree that there are countless things that need to be stored.\r\n\r\nThere is also `System.Configuration` which has the ability to save, but there is not chance to configure where you want to load it.\r\n\r\nIn the end, the proposal is all about adding a possibility to simply store the configuration.\r\n\r\n\r\n\r\n\r\n\n\n### API Proposal\n\nInstead of having a `IConfigurationSource ` we need an `IConfigurationSink` that has the inverse behavior of `IConfigurationSource`\r\n\r\nThe IConfiguration gets a new method for persisting configuration:\r\n\r\n```cs\r\nIConfiguration.Save(IConfigurationSink sink)\r\n```\r\n\r\n\n\n### API Usage\n\nvar config = ConfigurationBuilder().AddIniFIle(\"c:\\test.ini\").Build(); config[\"test\"] = \"ok\";\r\n\r\nconfig.Save(new JsonConfigurationSink(\"D:\\\\test.user.ini\"));\n\n### Alternative Designs\n\nSurely there a many things to discuss, so please just see this as a starter.\n\n### Risks\n\nThe problem currently is that there are many providers from different sources. So the question is if it should be saved back to the individual providers, or if there is a single configuration file.\r\n\r\nIf you ask me I would go with a single configuration file that can be saved with a _single provider_ this provider can be added additionally to the configuration which would cause loading the configuration from many sources using different providers. As a last step all current data is overwritten by the last provider (which could als made a bit more explicit so that it can easily be seen from the builder what is an overriding configuration).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emsedi\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-18T22:13:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HvsXp",
                                           "createdAt":  "2022-08-03T09:06:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ahdung",
                                           "body":  "Any news?",
                                           "updatedAt":  "2022-08-03T09:06:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HxEz3",
                                           "createdAt":  "2022-08-03T14:45:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEN4tlQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "HKunogi",
                                                                               "createdAt":  "2024-02-27T16:35:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "doxxx",
                                                                               "createdAt":  "2024-03-07T14:50:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "MaxMahem",
                                                                               "createdAt":  "2024-06-03T15:50:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "litalidev",
                                                                               "createdAt":  "2024-09-24T04:10:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "ibocon",
                                                                               "createdAt":  "2025-02-09T08:42:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "LAHS-git",
                                                                               "createdAt":  "2025-02-25T00:37:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "cyraid",
                                                                               "createdAt":  "2025-04-11T19:12:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@ahdung - we don\u0027t have any plans on addressing this in the near future.\r\n\r\nIf you need to persist preference/config data in your application, my suggestion is to do it some other way than through IConfiguration. Your app can write to your appsettings.json file (or whatever config location you chose) through normal I/O APIs. Then you can reload your config using the new file contents.",
                                           "updatedAt":  "2022-08-03T14:45:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hyk4v",
                                           "createdAt":  "2022-08-03T20:27:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEN4tsw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ahdung",
                                                                               "createdAt":  "2022-08-04T00:54:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "docbender",
                                                                               "createdAt":  "2022-10-17T13:04:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Prunkles",
                                                                               "createdAt":  "2022-12-28T22:55:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gvkries",
                                                                               "createdAt":  "2023-08-23T07:28:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "oolleegg55",
                                                                               "createdAt":  "2023-08-28T13:52:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PFight",
                                                                               "createdAt":  "2023-12-08T08:18:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "brayden-dowson",
                                                                               "createdAt":  "2024-01-19T13:54:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MaxMahem",
                                                                               "createdAt":  "2024-02-05T10:08:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HKunogi",
                                                                               "createdAt":  "2024-02-27T16:35:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BrycensRanch",
                                                                               "createdAt":  "2024-12-26T00:43:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ibocon",
                                                                               "createdAt":  "2025-02-09T08:42:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cyraid",
                                                                               "createdAt":  "2025-04-11T19:13:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  12
                                                         },
                                           "author":  "msedi",
                                           "body":  "@eerhardt: I assuming mostly every desktop application needs to read and write configuration settings. Currently both solution that are presented by .NET do not fully support common scenarios. System.Configuration does not allow to load the config from a user-defined place, Microsoft.Extensions.Configuration do not allow to be saved.\r\n\r\nI would really be good to have one solution that fits common use cases. In the current state I can use neither nor of both solutions which is a bit sad since only for this \"little\" feature they cannot be used in widespread scenarios.",
                                           "updatedAt":  "2022-08-03T20:27:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hynxk",
                                           "createdAt":  "2022-08-03T20:32:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEN4tug==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "docbender",
                                                                               "createdAt":  "2022-10-17T13:05:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "CrsRocky",
                                                                               "createdAt":  "2023-01-09T00:51:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "oolleegg55",
                                                                               "createdAt":  "2023-08-28T13:52:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "HKunogi",
                                                                               "createdAt":  "2024-02-27T16:35:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "ohsorry",
                                                                               "createdAt":  "2024-04-10T02:30:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "litalidev",
                                                                               "createdAt":  "2024-09-24T04:11:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "BrycensRanch",
                                                                               "createdAt":  "2024-12-26T00:43:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "doxxx",
                                                                               "createdAt":  "2025-02-14T22:02:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "cyraid",
                                                                               "createdAt":  "2025-04-11T19:13:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Can you explain why writing to the file directly doesn\u0027t work for you?",
                                           "updatedAt":  "2022-08-03T20:32:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HytHd",
                                           "createdAt":  "2022-08-03T20:56:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCp-tMA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "msedi",
                                                                               "createdAt":  "2022-08-03T21:15:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "DPetersen257",
                                           "body":  "@msedi \r\nAn example provided to me a week ago on the C# discord that has worked pretty well:\r\n\r\nhttps://pastie.io/pqertx.cs\r\nThen just register it in dependency injection with\r\nbuilder.Services.AddSingleton(OgmaConfig.Init(\"MyConfig.json\"))\r\n\r\nYou then have the ability to bind it to an object and save as desired",
                                           "updatedAt":  "2022-08-03T20:56:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hyy17",
                                           "createdAt":  "2022-08-03T21:22:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODkXAwg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HKunogi",
                                                                               "createdAt":  "2024-02-27T16:36:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "freesj",
                                                                               "createdAt":  "2024-05-16T14:11:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MaxMahem",
                                                                               "createdAt":  "2024-06-03T15:51:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "msedi",
                                           "body":  "\u003e Can you explain why writing to the file directly doesn\u0027t work for you?\r\n\r\nI\u0027m not exactly sure what you mean. Do you mean simply saving the configuration via a Json file writer? I could save each configuration to a separate file, thats true but my own solution (not using one of the two *.Configuration classes) has a structured subfolders like a filesystem, so I can bind any hierachical object in substructure.\r\n\r\nAs you see, I already have a working solution but I wanted to go with some more maintained and more features 3rd party class. Its not that I personally urgently need it. Its just something more people for sure need ;-)",
                                           "updatedAt":  "2022-08-03T21:22:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HzXcY",
                                           "createdAt":  "2022-08-04T01:11:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEAMjLg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "HKunogi",
                                                                               "createdAt":  "2024-02-27T16:36:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BrycensRanch",
                                                                               "createdAt":  "2024-12-26T00:43:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ahdung",
                                           "body":  "@eerhardt As a configuration solution, just can only read, can\u0027t store, then it is a disabled solution, isn\u0027t it?",
                                           "updatedAt":  "2022-08-04T01:11:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hzb5t",
                                           "createdAt":  "2022-08-04T01:49:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Yes, it is, but it was designed to be mostly read only. There are lots of strange behaviors to work out when persisting back to the configuration provider is allowed (order, multiple, etc etc). While I don\u0027t want to downplay the use cases, they pale in comparison to the reading cases, so this work isn\u0027t going to be prioritized over other configuration work.\r\n\r\nPS: This API proposal should really come after a full implementation spike has been done and lots of hard questions answered. The team does not see the value so will not be doing that work, but this API proposal is premature.\r\n\r\nI would expect something like this https://github.com/dotnet/runtime/issues/43359#issuecomment-894860862, for a feature of this magnitude.",
                                           "updatedAt":  "2022-08-04T01:52:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55-RvO",
                                           "createdAt":  "2024-04-10T02:32:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFoZyA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "rolfik-mycronic",
                                                                               "createdAt":  "2024-06-10T12:26:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "BrycensRanch",
                                                                               "createdAt":  "2024-12-26T00:43:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "vladopandzic",
                                                                               "createdAt":  "2025-02-07T13:14:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "ohsorry",
                                           "body":  "it is .NET9 now! you have `Load` and a bunch of help method but no `Save`, what\u0027s that design??",
                                           "updatedAt":  "2024-04-10T02:32:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mw4KK",
                                           "createdAt":  "2025-04-11T19:15:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cyraid",
                                           "body":  "Any movement/consideration on this? .NET core really should have a way to store configuration data if a nice loading system is in place, it only makes sense to write any changes back.",
                                           "updatedAt":  "2025-04-11T19:15:18Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "[API Proposal]: Allow to save configurations in IConfiguration",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65594",
        "createdAt":  "2022-02-18T22:24:54Z",
        "number":  65594,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODL2ITQ==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "maxkoshevoi",
                                            "createdAt":  "2022-02-18T23:03:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jraufeisen",
                                            "createdAt":  "2023-03-29T13:26:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cschulznethaus",
                                            "createdAt":  "2024-04-10T12:40:38Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "jnoordsij",
                                            "createdAt":  "2025-01-09T11:21:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RezaJooyandeh",
                                            "createdAt":  "2025-08-19T21:22:14Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-01-08T23:54:02Z",
        "body":  "See the conversation here: https://github.com/dotnet/core/pull/7211#discussion_r810110664.\r\n\r\n`IConfigurationProvider.TryGet(string key, out string? value);` is nullable annotated as\r\n\r\nhttps://github.com/dotnet/runtime/blob/cf6dbde9955426d9fbed107cd30140fe3f71027b/src/libraries/Microsoft.Extensions.Configuration.Abstractions/ref/Microsoft.Extensions.Configuration.Abstractions.cs#L66\r\n\r\nThis means that a ConfigurationProvider can have a `null` value for a key. So it would return `true` and the `value == null`.\r\n\r\nHowever, ChainedConfigurationProvider doesn\u0027t seem to support this:\r\n\r\nhttps://github.com/dotnet/runtime/blob/cf6dbde9955426d9fbed107cd30140fe3f71027b/src/libraries/Microsoft.Extensions.Configuration/src/ChainedConfigurationProvider.cs#L39-L42\r\n\r\nIf the inner configuration returned `null`, ChainedConfigurationProvider would return `false`, even though the it is possible the inner configuration provider returned `true` and `value == null`.\r\n\r\nThis feels like an issue with our API design here. Can `null` be a valid configuration value or not? If it can, should `ChainedConfigurationProvider` respect it?\r\n\r\ncc @maxkoshevoi @halter73 @HaoK",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmbbn9g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-TaN8",
                                           "createdAt":  "2022-02-18T22:24:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSee the conversation here: https://github.com/dotnet/core/pull/7211#discussion_r810110664.\r\n\r\n`IConfigurationProvider.TryGet(string key, out string? value);` is nullable annotated as\r\n\r\nhttps://github.com/dotnet/runtime/blob/cf6dbde9955426d9fbed107cd30140fe3f71027b/src/libraries/Microsoft.Extensions.Configuration.Abstractions/ref/Microsoft.Extensions.Configuration.Abstractions.cs#L66\r\n\r\nThis means that a ConfigurationProvider can have a `null` value for a key. So it would return `true` and the `value == null`.\r\n\r\nHowever, ChainedConfigurationProvider doesn\u0027t seem to support this:\r\n\r\nhttps://github.com/dotnet/runtime/blob/cf6dbde9955426d9fbed107cd30140fe3f71027b/src/libraries/Microsoft.Extensions.Configuration/src/ChainedConfigurationProvider.cs#L39-L42\r\n\r\nIf the inner configuration returned `null`, ChainedConfigurationProvider would return `false`, even though the it is possible the inner configuration provider returned `true` and `value == null`.\r\n\r\nThis feels like an issue with our API design here. Can `null` be a valid configuration value or not? If it can, should `ChainedConfigurationProvider` respect it?\r\n\r\ncc @maxkoshevoi @halter73 @HaoK\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-18T22:24:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-WcD5",
                                           "createdAt":  "2022-02-19T17:40:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maxkoshevoi",
                                           "body":  "Found the reason of why `out string? value` wasn\u0027t annotated with `[NotNullWhen(true)]`: https://github.com/dotnet/runtime/pull/57414#discussion_r726256198",
                                           "updatedAt":  "2022-02-19T17:40:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_3MWz",
                                           "createdAt":  "2022-03-17T20:44:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "I think the right behavior is for `TryGet` to return `false` if `_config[key]` is `null` but return `true` if its `\"\"`. I\u0027m not how much code out there today relies on falling back from chained config sources that return `\"\"`. Hopefully not a lot.",
                                           "updatedAt":  "2022-03-17T20:44:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56CWEg",
                                           "createdAt":  "2024-04-10T12:39:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cschulznethaus",
                                           "body":  "I just ran into this behavior of the `ChainedConfigurationProvider`.\r\n\r\nWe have a configuration system that get its values from a database, but all values can be overwritten per environment or secrets. Environment and secrets come from the ChainedConfigurationProvider, while the database values have their own `IConfigurationProvider` implementation.\r\n\r\nI wanted to overwrite one value with `\"\"` in the environment, but that did not happen due to the string.IsNullOrEmpty(value)` check of the `ChainedConfigurationProvider`.\r\n\r\nI agree with @halter73 that `\"\"` should return `true`, but we also had an internal discussion that this would probably not be fixed in the near future as it could harm existing code. 🙄 ",
                                           "updatedAt":  "2024-04-10T12:39:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ztuf2",
                                           "createdAt":  "2025-01-08T23:54:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jamescrosswell",
                                           "body":  "Just adding a vote here. \n\nThe current design results in a discrepancy between how Web Host and Generic Host read configuration data from appsettings.json files (presumably Generic Host uses ChainedConfigurationProvider). Web Host supports/returns empty strings verbatim as valid configuration values whereas Generic host interprets these as null. \n\nThis breaks the Sentry SDK when using Generic Host (which allows you to set the URL of your sentry server to string.Empty to disable the SDK):\n- https://github.com/getsentry/sentry-dotnet/issues/3875\n\nArguably the current behavioural inconsistencies are a bug then.",
                                           "updatedAt":  "2025-01-08T23:54:01Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Configuration data allows nullable values, but ChainedConfigurationProvider.TryGet doesn\u0027t work correctly with them",
        "labels":  [
                       "bug",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65885",
        "createdAt":  "2022-02-25T10:15:04Z",
        "number":  65885,
        "author":  "LeoHexspoor",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAl9Ng==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rjgotten",
                                            "createdAt":  "2022-02-25T10:36:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cduivis",
                                            "createdAt":  "2022-02-25T10:37:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "madelson",
                                            "createdAt":  "2022-02-25T18:21:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2022-02-25T23:02:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SteveDunn",
                                            "createdAt":  "2022-03-05T05:39:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mhangan",
                                            "createdAt":  "2022-03-16T15:11:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VisualBean",
                                            "createdAt":  "2022-05-25T08:47:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wangyuantao",
                                            "createdAt":  "2022-08-20T02:16:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kwaazaar",
                                            "createdAt":  "2023-04-14T11:00:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "litenova",
                                            "createdAt":  "2023-06-15T14:18:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cklutz",
                                            "createdAt":  "2023-11-17T12:42:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-11-04T15:27:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2025-03-28T04:55:44Z"
                                        }
                                    ],
                          "totalCount":  13
                      },
        "updatedAt":  "2025-02-01T06:44:00Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the performance problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n  --\u003e\r\n\r\nA large set of configuration keys provided by the built-in .NET IConfigurationProvider\u0027s negatively affect performance significantly.\r\n\r\nI\u0027ve created a benchmark project here: https://github.com/NetMatch/dotnet-config-performance-issue\r\n\r\n### Configuration\r\n\r\n\u003c!--\r\n(If you are posting Benchmark.NET results, this info will be included.)\r\n* Which version of .NET is the code running on?\r\n* What OS version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* If relevant, what are the specs of the machine?\r\n  --\u003e\r\n```\r\nBenchmarkDotNet=v0.13.1, OS=Windows 10.0.19044.1526 (21H2)\r\nAMD Ryzen 9 5900X, 1 CPU, 24 logical and 12 physical cores\r\n.NET SDK=6.0.102\r\n  [Host]     : .NET 6.0.2 (6.0.222.6406), X64 RyuJIT\r\n  DefaultJob : .NET 6.0.2 (6.0.222.6406), X64 RyuJIT\r\n```\r\n\r\n### Regression?\r\n\r\n\u003c!--\r\n* Is this a regression from a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\nWe encountered this issue in .NET Core 3.1, the benchmark project shows it still reproduces in .NET 6.\r\n\r\n### Data\r\n\r\n\u003c!--\r\n* Please include any benchmark results, images of graphs, timings or measurements, or callstacks that are relevant.\r\n* If possible please include text as text rather than images (so it shows up in searches).\r\n* If applicable please include before and after measurements.\r\n* There is helpful information about measuring code in this repo [here](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md).\r\n  --\u003e\r\n```\r\n\r\n|                     Method |        ConfigFile | UseCache |      Mean |     Error |    StdDev |\r\n|--------------------------- |------------------ |--------- |----------:|----------:|----------:|\r\n| GetObjectFromConfiguration | /largeconfig.json |    False | 89.062 us | 0.8921 us | 0.8345 us |\r\n| GetObjectFromConfiguration | /largeconfig.json |     True |  1.945 us | 0.0093 us | 0.0087 us |\r\n| GetObjectFromConfiguration | /smallconfig.json |    False |  1.910 us | 0.0077 us | 0.0072 us |\r\n| GetObjectFromConfiguration | /smallconfig.json |     True |  2.015 us | 0.0075 us | 0.0070 us |\r\n```\r\n\r\n### Analysis\r\n\r\n\u003c!--\r\n* If you have an idea where the problem might lie, let us know that here.\r\n* Please include any pointers to code, relevant changes, or related issues you know of.\r\n* If you don\u0027t know, you can delete this section.\r\n  --\u003e\r\nWe have a large web application in which we have a significant amount of configuration, this adds up to about 20k configuration keys. We have a non-trivial amount of IOptionsSnapshot instances that are resolved per request via DI. We noticed that as configuration got added, performance and CPU usage went up across the board. Digging deeper we found that this is due to how the `Microsoft.Extensions.Configuration.ConfigurationProvider` and `Microsoft.Extensions.Configuration.ConfigurationBinder` work. \r\n\r\nEvery request the IOptionsSnapshots are constructed via the `ConfigurationBinder`. The `ConfigurationBinder` is passed an `IConfiguration` which is actually a `IConfigurationSection` instance that is scoped to a certain path in the configuration. Based on the public API, using `GetSection`, one expects that the `IConfigurationSection` instance is optimized to access the child keys of a certain section. But this is not the case. Whenever the `ConfigurationBinder` accesses the configuration and calls `GetChildren()` it ends up going to the `ConfigurationRoot` and calls into each registered `IConfigurationProvider` to fetch child keys for the path of the `ConfigurationSection`.\r\n\r\nAll of the default `IConfigurationProvider` implementations inherit from `ConfigurationProvider` which has a `GetChildKeys` method where things get troublesome. This methods does a loop over *ALL* registered keys in the provider to find a prefix match for the given path. This means that for every call of `GetChildren()` on an `IConfiguration` instance, it scans every possible key in all the providers. On top of that various code paths in the binder lead it to call `GetChildren()` multiple times on the same `IConfiguration`. All of this combined adds up to a lot of scans.\r\n\r\nWhen you have a lot of configuration and a non-trivial amount of Options that get bound per request you end up with a serious amount of scanning over keys for no reason. And that gave us *big* performance issues. After identifying this issue, we added a new  `IConfigurationSource` and `IConfigurationProvider` that caches calls into `GetChildKeys` before going to the underlying `IConfigurationProvider`. The implementation in the linked repo is a simplified combined version of this which should not be used in production. However for the benchmark it shows its effects well enough, it\u0027s used when the `UseCache` option is set to true. With this deployed in our application, our 95 percentile response times were 4 times lower and we are using 10 times(!) less CPU during load, at the cost of slightly higher memory usage.\r\n\r\nIMO the problem is twofold. The `ConfigurationBinder` is suboptimal by calling into the `GetChildren()` method so often. But most important is the fact that the IConfiguration(Section) implementation seems flawed. ConfigurationSection\u0027s are not really optimized to access the keys in their section, it always goes to the root and scans all keys without any caching or optimizations. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnLCABA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-oLed",
                                           "createdAt":  "2022-02-25T10:15:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the performance problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n  --\u003e\r\n\r\nA large set of configuration keys provided by the built-in .NET IConfigurationProvider\u0027s negatively affect performance significantly.\r\n\r\nI\u0027ve created a benchmark project here: https://github.com/NetMatch/dotnet-config-performance-issue\r\n\r\n### Configuration\r\n\r\n\u003c!--\r\n(If you are posting Benchmark.NET results, this info will be included.)\r\n* Which version of .NET is the code running on?\r\n* What OS version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* If relevant, what are the specs of the machine?\r\n  --\u003e\r\n```\r\nBenchmarkDotNet=v0.13.1, OS=Windows 10.0.19044.1526 (21H2)\r\nAMD Ryzen 9 5900X, 1 CPU, 24 logical and 12 physical cores\r\n.NET SDK=6.0.102\r\n  [Host]     : .NET 6.0.2 (6.0.222.6406), X64 RyuJIT\r\n  DefaultJob : .NET 6.0.2 (6.0.222.6406), X64 RyuJIT\r\n```\r\n\r\n### Regression?\r\n\r\n\u003c!--\r\n* Is this a regression from a previous build or release of .NET Core, or from .NET Framework? If you can try a previous release or build to find out, that can help us narrow down the problem. If you don\u0027t know, that\u0027s OK.\r\n  --\u003e\r\nWe encountered this issue in .NET Core 3.1, the benchmark project shows it still reproduces in .NET 6.\r\n\r\n### Data\r\n\r\n\u003c!--\r\n* Please include any benchmark results, images of graphs, timings or measurements, or callstacks that are relevant.\r\n* If possible please include text as text rather than images (so it shows up in searches).\r\n* If applicable please include before and after measurements.\r\n* There is helpful information about measuring code in this repo [here](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md).\r\n  --\u003e\r\n```\r\n\r\n|                     Method |        ConfigFile | UseCache |      Mean |     Error |    StdDev |\r\n|--------------------------- |------------------ |--------- |----------:|----------:|----------:|\r\n| GetObjectFromConfiguration | /largeconfig.json |    False | 89.062 us | 0.8921 us | 0.8345 us |\r\n| GetObjectFromConfiguration | /largeconfig.json |     True |  1.945 us | 0.0093 us | 0.0087 us |\r\n| GetObjectFromConfiguration | /smallconfig.json |    False |  1.910 us | 0.0077 us | 0.0072 us |\r\n| GetObjectFromConfiguration | /smallconfig.json |     True |  2.015 us | 0.0075 us | 0.0070 us |\r\n```\r\n\r\n### Analysis\r\n\r\n\u003c!--\r\n* If you have an idea where the problem might lie, let us know that here.\r\n* Please include any pointers to code, relevant changes, or related issues you know of.\r\n* If you don\u0027t know, you can delete this section.\r\n  --\u003e\r\nWe have a large web application in which we have a significant amount of configuration, this adds up to about 20k configuration keys. We have a non-trivial amount of IOptionsSnapshot instances that are resolved per request via DI. We noticed that as configuration got added, performance and CPU usage went up across the board. Digging deeper we found that this is due to how the `Microsoft.Extensions.Configuration.ConfigurationProvider` and `Microsoft.Extensions.Configuration.ConfigurationBinder` work. \r\n\r\nEvery request the IOptionsSnapshots are constructed via the `ConfigurationBinder`. The `ConfigurationBinder` is passed an `IConfiguration` which is actually a `IConfigurationSection` instance that is scoped to a certain path in the configuration. Based on the public API, using `GetSection`, one expects that the `IConfigurationSection` instance is optimized to access the child keys of a certain section. But this is not the case. Whenever the `ConfigurationBinder` accesses the configuration and calls `GetChildren()` it ends up going to the `ConfigurationRoot` and calls into each registered `IConfigurationProvider` to fetch child keys for the path of the `ConfigurationSection`.\r\n\r\nAll of the default `IConfigurationProvider` implementations inherit from `ConfigurationProvider` which has a `GetChildKeys` method where things get troublesome. This methods does a loop over *ALL* registered keys in the provider to find a prefix match for the given path. This means that for every call of `GetChildren()` on an `IConfiguration` instance, it scans every possible key in all the providers. On top of that various code paths in the binder lead it to call `GetChildren()` multiple times on the same `IConfiguration`. All of this combined adds up to a lot of scans.\r\n\r\nWhen you have a lot of configuration and a non-trivial amount of Options that get bound per request you end up with a serious amount of scanning over keys for no reason. And that gave us *big* performance issues. After identifying this issue, we added a new  `IConfigurationSource` and `IConfigurationProvider` that caches calls into `GetChildKeys` before going to the underlying `IConfigurationProvider`. The implementation in the linked repo is a simplified combined version of this which should not be used in production. However for the benchmark it shows its effects well enough, it\u0027s used when the `UseCache` option is set to true. With this deployed in our application, our 95 percentile response times were 4 times lower and we are using 10 times(!) less CPU during load, at the cost of slightly higher memory usage.\r\n\r\nIMO the problem is twofold. The `ConfigurationBinder` is suboptimal by calling into the `GetChildren()` method so often. But most important is the fact that the IConfiguration(Section) implementation seems flawed. ConfigurationSection\u0027s are not really optimized to access the keys in their section, it always goes to the root and scans all keys without any caching or optimizations. \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLeoHexspoor\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`tenet-performance`, `untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-25T10:15:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-oS6C",
                                           "createdAt":  "2022-02-25T10:56:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOECBiPQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wangyuantao",
                                                                               "createdAt":  "2022-08-25T05:07:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kwaazaar",
                                                                               "createdAt":  "2023-04-14T10:50:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-11-04T15:28:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NowhereRx7",
                                                                               "createdAt":  "2025-01-11T18:21:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "rjgotten",
                                           "body":  "The design of passing `earlierKeys` into each `GetChildKeys` call is kind of bad as well: nothing more than a leaky abstraction of the LINQ `Aggregate` that\u0027s internally being used to pull up the full set of child keys across all providers. The `earlierKeys` being passed in places burden on each individual configuration provider to combine child-key results of a previous provider with the current\u0027s.\r\n\r\nAnd because the final combined result is internally _not_ sorted by  [`InternalConfigurationRootExtensions.GetChildrenImplementation`](https://github.com/dotnet/runtime/blob/afc2f118e7177107655c5f7bf5d02df9953a2742/src/libraries/Microsoft.Extensions.Configuration/src/InternalConfigurationRootExtensions.cs#L21), it requires each individual provider to combine its results with the previous set, and re-sort the running total list as it is being grown out. _**N**_ providers means _**N**_ times resorting that list.\r\n\r\nThat design could be improved by moving the sort operation into `GetChildrenImplementation` and removing that burden from the individual providers. Same for the responsibility of having to combine `earlierKeys` and create additional intermediate `List\u003c\u003e` instances.\r\n\r\nIt _could_ just be a basic `IEnumerable\u003c\u003e.Concat` which chains together enumerators for the lists returned by the various providers; runs `Distinct` over them; shoves it into one big `List\u003c\u003e` with `ToList()`; and then sorts that in-place -- _once_.\r\n\r\nWonder if it shouldn\u0027t actually use an array instead of a list though.  Given that classes consuming the result are not expected to actually go and add/remove elements here? And that an array iterator is cheaper than a list iterator?\r\n",
                                           "updatedAt":  "2022-02-25T11:17:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-7_BK",
                                           "createdAt":  "2022-03-01T22:14:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Related to #62510",
                                           "updatedAt":  "2022-03-01T22:14:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IyjCx",
                                           "createdAt":  "2022-08-20T02:19:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wangyuantao",
                                           "body":  "Add a similar benchmark at https://github.com/dotnet/performance/pull/2572 and hope the performance can be improved in net7.0",
                                           "updatedAt":  "2022-08-20T02:19:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IymIA",
                                           "createdAt":  "2022-08-20T03:30:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  ".NET 7 is done.",
                                           "updatedAt":  "2022-08-20T03:30:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5I7kPK",
                                           "createdAt":  "2022-08-23T05:43:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wangyuantao",
                                           "body":  "@davidfowl you are right. If not planned, I would like to contribute to improve it in net8.0.",
                                           "updatedAt":  "2022-08-23T05:43:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5I7lFH",
                                           "createdAt":  "2022-08-23T05:48:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD5Vv-A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wangyuantao",
                                                                               "createdAt":  "2022-08-25T05:00:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kwaazaar",
                                                                               "createdAt":  "2023-04-14T10:51:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-11-04T15:29:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@wangyuantao I think the first change would be to get this into our performance tests.\r\n\r\ncc @eerhardt ",
                                           "updatedAt":  "2022-08-23T05:48:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Z502R",
                                           "createdAt":  "2023-04-14T10:59:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kwaazaar",
                                           "body":  "So that PR #74736 was never completed?\r\n\r\nOur application is already performance bad because of this. Now we want to make it multi-tenant, makeing the problem even worse :-(\r\n",
                                           "updatedAt":  "2023-04-14T10:59:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aDuRX",
                                           "createdAt":  "2023-04-17T08:31:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rjgotten",
                                           "body":  "@kwaazaar \r\nHave a look at the benchmark application mentioned in the initial issue report.\r\nIt contains a `ConfigurationSourceCacheDecorator` that can be used to mitigate the problem somewhat.",
                                           "updatedAt":  "2023-04-17T08:31:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SVMwi",
                                           "createdAt":  "2024-11-04T15:34:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "Reading this issue makes me super skeptical about introducing more `IOptionsSnapshot` usages in our solution...\n\nWe also have a fairly large monolith with centralized configuration coming from a custom db source and Azure AppConfiguration in addition to the other standard sources, and we have been ramping up usages of `IOptionsSnapshot` as we migrate from legacy code that was not using the Options pattern.\n\nSeems like this missed .NET9 too... oh well 😞\n\nI might have to start recommending developers to _not_ use `IOptionsSnapshot` while these problems are not resolved and live with the need for a full application deployment to refresh some of the settings. It would degrade our dev experience quite a bit though.",
                                           "updatedAt":  "2024-11-04T15:34:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SVctt",
                                           "createdAt":  "2024-11-04T16:00:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kwaazaar",
                                           "body":  "You could still use IOptionSnapshot in all code and use your own implementation for DI. That way your code still adheres to a standard approach and the impact is minimal in the future to swap back to the improved implementation in .NET 10 (or later :-()",
                                           "updatedAt":  "2024-11-04T16:00:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SbC9g",
                                           "createdAt":  "2024-11-05T08:44:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD5gG2Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-11-05T13:40:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rjgotten",
                                           "body":  "\u003e @kwaazaar\n\u003e Have a look at the benchmark application mentioned in the initial issue report. It contains a `ConfigurationSourceCacheDecorator` that can be used to mitigate the problem somewhat.\n\nOh I know it helps mitigating the issue. I helped write it to do just that.\n(@LeoHexspoor and I are colleagues. 😉 )\n\nAnd indeed: _mitigates_ - It\u0027s not an end solution.\nI\u0027m hoping still that at some point `Microsoft.Extensions.Configuration` itself will be fixed, _regardless_ of what it will mean for backwards compatibility, which is likely to be on some minor edge cases only - not the major usage surface of the API.",
                                           "updatedAt":  "2025-01-16T10:15:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aZ92Y",
                                           "createdAt":  "2025-01-14T16:39:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Falco20019",
                                           "body":  "I just spent 2 hours finding out why importing a big JSON file takes 14 minutes... We need multiple calls to `config.GetChildren().Any()` during binding and since `GetChildren()` is ALWAYS creating the full list, even though `Any()` is only interested in finding out if it\u0027s a leaf or not, this sums up pretty hugely... So looking forward to this getting fixed.\n\nWe sadly need to keep using it, since it\u0027s not distinguishable if a section is not existing or if it was only empty. Only `GetChildren` will list it with `null` as value. When using `GetSection(...).Value`, both cases are `null` :(",
                                           "updatedAt":  "2025-01-14T16:43:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6akgXB",
                                           "createdAt":  "2025-01-15T15:40:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEDr8fQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "D3-LucaPiombino",
                                                                               "createdAt":  "2025-01-15T19:16:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rjgotten",
                                                                               "createdAt":  "2025-01-16T10:14:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2025-01-16T14:46:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NowhereRx7",
                                                                               "createdAt":  "2025-01-23T03:57:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "Falco20019",
                                           "body":  "I was able to improve my loading from 14 minutes to 675 milliseconds. The main bottleneck is this:\nhttps://github.com/dotnet/runtime/blob/dda0d4ea906a5a87f3ad2025ebaa3de89a0da16d/src/libraries/Microsoft.Extensions.Configuration/src/ConfigurationProvider.cs#L61-L93\nhttps://github.com/dotnet/runtime/blob/dda0d4ea906a5a87f3ad2025ebaa3de89a0da16d/src/libraries/Microsoft.Extensions.Configuration/src/InternalConfigurationRootExtensions.cs#L21-L41\n\nIt is basically adding one string for each entry that contains the substring. For our big config file, this were 53k of `stations` (top level of an array with 1.7k stations having each a couple data points to it). Those are getting reduced to one `stations` entry by `Distinct(StringComparer.OrdinalIgnoreCase)`.\n\nFor testing purposes, I changed the `IDictionary\u003cstring, string?\u003e Data` to a simple data tree. I used `ConfigurationPath.KeyDelimiter` to split the levels as there was a hard assumption in the existing code for it anyway. I also replaced it with a real `IEnumerable` implementation that uses `yield return` and drops sorting at each `GetChildKeys` since the xmldocs never stated that it must be sorted in the first place. So it is a breaking change, but fixed my problems. I did the whole thing just through extension methods and added a cache to avoid re-processing the `Data` for a provider unless reloaded.\n\nIn case someone also has problems and is interested in the workaround, let me know and I will extract it into a MCVE. The better solution would be to fix the original implementation and maybe take the hit for the sorting to not take place. An feasable alternative would be to just add new methods that return the `GetChildKeys` sorted as before but also offer a property `GetChildKeysUnsorted` method that is used by the old one for compatability but offers proper usage to anyone who wants/needs it fast.\n\nSadly any change to `Data` in `ConfigurationProvider` is a breaking change. `JsonConfigurationProvider` could overwrite everything accordingly, but since even that is technically not `sealed`, anyone could rely on the current implementation as-well.",
                                           "updatedAt":  "2025-01-15T15:48:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ceim7",
                                           "createdAt":  "2025-01-30T18:22:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEL0yKA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Falco20019",
                                                                               "createdAt":  "2025-02-01T06:44:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rjgotten",
                                                                               "createdAt":  "2025-02-14T09:49:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2025-03-28T04:55:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "leo-labs",
                                           "body":  "It is possible to use the official configuration binding source generator that generates binding code and circumvents the reflection-based implementation. This resulted in a huge speed-up for us. See https://learn.microsoft.com/en-us/dotnet/core/extensions/configuration-generator ",
                                           "updatedAt":  "2025-01-30T18:22:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6csIAE",
                                           "createdAt":  "2025-02-01T06:43:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Falco20019",
                                           "body":  "This sadly only works in cases where you know the bound types. As I get the type though a generic of runtime loaded plugins, it can\u0027t be used for us. So even though the generators help in many (if not lost) cases, it will not replace the need for a fix of the reflection based code.",
                                           "updatedAt":  "2025-02-01T06:43:59Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "A large set of configuration keys provided by the built-in .NET IConfigurationProvider\u0027s negatively affect performance significantly",
        "labels":  [
                       "tenet-performance",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66448",
        "createdAt":  "2022-03-10T13:06:11Z",
        "number":  66448,
        "author":  "markm77",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-03-15T21:22:16Z",
        "body":  "### Background and motivation\n\nI am using the ASP.NET Core options pattern for configuration in an open-source library/web app product.\r\n\r\nSome options classes contain very sensitive configuration (e.g. private keys) which should not be provided by `appsettings.json` files but only key secrets providers or environment variables (depends on customer production environment). On the other hand, it is fine for things like logging levels to be configured via shared `appsettings.json` files.\r\n\r\nIs it possible to have e.g. a class or property-level attribute that allows an option to be only populated from secure/selected providers?\r\n\r\nThis would help ensure users don\u0027t add sensitive key secrets to `appsettings.json` files in the repo!! (And, for example, accidentally push them into the public domain.) It would provide a safeguard to aid better security practice.\n\n### API Proposal\n\nSuggest a new attribute on options classes or their properties but there may be a better way. The new attribute would specify a subset of valid configuration providers for that option (e.g. blacklist or whitelist or filter).\r\n\n\n### API Usage\n\nIndividual options or options classes could be tagged to use a subset of configuration providers when setting values.\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOP2vnfA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4_a-d8",
                                           "createdAt":  "2022-03-10T13:06:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nI am using the ASP.NET Core options pattern for configuration in an open-source library/web app product.\r\n\r\nSome options classes contain very sensitive configuration (e.g. private keys) which should not be provided by `appsettings.json` files but only key secrets providers or environment variables (depends on customer production environment). On the other hand, it is fine for things like logging levels to be configured via shared `appsettings.json` files.\r\n\r\nIs it possible to have e.g. a class or property-level attribute that allows an option to be only populated from secure/selected providers?\r\n\r\nThis would help ensure users don\u0027t add sensitive key secrets to `appsettings.json` files in the repo!! (And, for example, accidentally push them into the public domain.) It would provide a safeguard to aid better security practice.\n\n### API Proposal\n\nSuggest a new attribute on options classes or their properties but there may be a better way. The new attribute would specify a subset of valid configuration providers for that option (e.g. blacklist or whitelist or filter).\r\n\n\n### API Usage\n\nIndividual options or options classes could be tagged to use a subset of configuration providers when setting values.\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emarkm77\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-10T13:06:16Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: Ensure configuration secrets come from appropriate provider (e.g. key secret provider)",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67616",
        "createdAt":  "2022-04-05T20:07:39Z",
        "number":  67616,
        "author":  "SteveDunn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_JEmw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vw-cmilde",
                                            "createdAt":  "2023-07-18T09:25:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marc-weber1",
                                            "createdAt":  "2024-02-28T22:26:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mdekrey",
                                            "createdAt":  "2024-09-05T21:36:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vukelich",
                                            "createdAt":  "2024-09-18T15:49:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wiktor-golonka",
                                            "createdAt":  "2025-02-16T20:46:56Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2024-11-08T20:37:39Z",
        "body":  "### Background and motivation\r\n\r\nAs described in issue https://github.com/dotnet/runtime/issues/42643, some users want to be able to have configuration keys that contain a colon character.\r\n\r\nHowever, the colon character is the default separator for config keys, so if I had a config key named `https://google.es`, that would be translated to a composite key, the first being `https`, and the second being `//google.es`.\r\n\r\nThe purpose of this API suggestion is to enable users to specify their own separator character for configuration so that they can have keys containing colons, or any other character they wish.\r\n\r\n\r\n### API Proposal\r\n\r\nThe API changes are listed in the PR: https://github.com/dotnet/runtime/pull/66886/files#diff-ec34a58f9fd18f4d4fccabf4efc22dd555b9d32963b26419ed107c872b67356f . \r\n\r\nWe want overloads to provide the separator character:\r\n\r\n```diff\r\npublic static partial class JsonConfigurationExtensions\r\n{\r\n    public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, Microsoft.Extensions.FileProviders.IFileProvider? provider, string path, bool optional, bool reloadOnChange) { throw null; }\r\n+   public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, Microsoft.Extensions.FileProviders.IFileProvider? provider, string path, bool optional, bool reloadOnChange, string separator = \":\") { throw null; }\r\n    public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, System.Action\u003cMicrosoft.Extensions.Configuration.Json.JsonConfigurationSource\u003e? configureSource) { throw null; }\r\n    public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, string path) { throw null; }\r\n+   public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, string path, string separator) { throw null; }\r\n    public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, string path, bool optional) { throw null; }\r\n+   public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, string path, bool optional, string separator) { throw null; }\r\n    public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, string path, bool optional, bool reloadOnChange) { throw null; }\r\n+   public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, string path, bool optional, bool reloadOnChange, string separator) { throw null; }\r\n    public static IConfigurationBuilder AddJsonStream(this IConfigurationBuilder builder, System.IO.Stream stream) { throw null; }\r\n+   public static IConfigurationBuilder AddJsonStream(this IConfigurationBuilder builder, System.IO.Stream stream, string separator = \":\") { throw null; }\r\n}\r\n```\r\n\r\n`ConfigurationPath.cs` would have [a new method](https://github.com/dotnet/runtime/pull/66886/files#diff-551465ef4a5dddea48cbbf8f141cc0f67b0ca1c86952a03473e28a2f1cfdcedf) to complement `Combine`, named `CombineWith`:\r\n```diff\r\n  public static string Combine(params string[] pathSegments) { throw null; }\r\n+ public static string CombineWith(string separator, params string[] pathSegments) { throw null; }\r\n```\r\n\r\n... and a new method to complement `GetSectionKey`, named `GetSectionKeyWith`:\r\n```diff\r\n  public static string? GetSectionKey(string? path) { throw null; }\r\n+ public static string? GetSectionKeyWith(string separator, string? path) { throw null; }\r\n```\r\n\r\n`ConfigurationKeyComparer.cs` will have an overloaded constructor to specify the separator:\r\n\r\n```diff\r\npublic partial class ConfigurationKeyComparer : System.Collections.Generic.IComparer\u003cstring\u003e\r\n{\r\n        public ConfigurationKeyComparer() { }\r\n+       public ConfigurationKeyComparer(string separator) { }\r\n        public static Microsoft.Extensions.Configuration.ConfigurationKeyComparer Instance { get { throw null; } }\r\n        public static Microsoft.Extensions.Configuration.ConfigurationKeyComparer GetInstanceFor(string separator){ throw null; }\r\n        public int Compare(string? x, string? y) { throw null; }\r\n}\r\n```\r\n\r\n`ConfigurationProvider.cs`  will have a new method to expose the key separator that it\u0027s using:\r\n\r\n```diff\r\npublic abstract partial class ConfigurationProvider : Microsoft.Extensions.Configuration.IConfigurationProvider\r\n{\r\n    protected ConfigurationProvider() { }\r\n+   public virtual string GetDelimiter() { throw null; }\r\n    protected System.Collections.Generic.IDictionary\u003cstring, string?\u003e Data { get { throw null; } set { } }\r\n    public virtual System.Collections.Generic.IEnumerable\u003cstring\u003e GetChildKeys(System.Collections.Generic.IEnumerable\u003cstring\u003e earlierKeys, string? parentPath) { throw null; }\r\n    public Microsoft.Extensions.Primitives.IChangeToken GetReloadToken() { throw null; }\r\n```\r\n\r\n`ConfigurationSection.cs` will have an overload that takes the separator:\r\n\r\n```diff\r\npublic partial class ConfigurationSection : Microsoft.Extensions.Configuration.IConfiguration, Microsoft.Extensions.Configuration.IConfigurationSection\r\n{\r\n        public ConfigurationSection(Microsoft.Extensions.Configuration.IConfigurationRoot root, string path,) { }\r\n+       public ConfigurationSection(Microsoft.Extensions.Configuration.IConfigurationRoot root, string path, string separator = \":\") { }\r\n        public string? this[string key] { get { throw null; } set { } }\r\n        ...\r\n}\r\n```\r\n\r\n### API Usage\r\n\r\nTaken from [this test](https://github.com/dotnet/runtime/pull/66886/files#diff-5c1b852db0091a5cc734ec45f3657250fb04c43ba89590b3aa75932b71f58f57R42-R63), if we had some JSON config:\r\n\r\n\r\n```json\r\n{\r\n    \"auths\": {\r\n        \"http://google\": {\r\n            \"uri\": \"https://www.google.es\"\r\n        },\r\n        \"http://microsoft\": {\r\n            \"uri\": \"https://www.microsoft.es\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWe could specify a different separator when loading it, e.g. a backtick (`` ` ``), as that is different to the default separator of colon:\r\n\r\n```csharp\r\n\r\npublic class MyClass\r\n{\r\n    public Dictionary\u003cstring, OtherType\u003e Auths { get; set; }\r\n}\r\n\r\npublic class OtherType\r\n{\r\n    public string Uri { get; set; }\r\n}\r\n\r\nvar config = new ConfigurationBuilder()\r\n    .AddJsonFile(\"json_with_colons_in_keys.json\", optional: false, reloadOnChange: true, separator: \"`\").Build();\r\n\r\nvar settings = new MyClass();\r\n\r\nconfig.Bind(settings);\r\nAssert.Equal(\"https://www.google.es\", settings.Auths[\"http://google\"].Uri);\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nI can\u0027t see any risks. The default separator is colon (`:`), so the changes are backwards compatible.\r\n\r\nThe [PR I did for this Issue](https://github.com/dotnet/runtime/pull/66886) has this new functionality, and all of the existing tests still pass, without modification.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkve-zQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5A7QiM",
                                           "createdAt":  "2022-04-05T20:07:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nAs described in issue https://github.com/dotnet/runtime/issues/42643, some users want to be able to have configuration keys that contain a colon character.\r\n\r\nHowever, the colon character is the default separator for config keys, so if I had a config key named `https://google.es`, that would be translated to a composite key, the first being `https`, and the second being `//google.es`.\r\n\r\nThe purpose of this API suggestion is to enable users to specify their own separator character for configuration so that they can have keys containing colons, or any other character they wish.\r\n\n\n### API Proposal\n\nThe API changes are listed in the PR: https://github.com/dotnet/runtime/pull/66886/files#diff-ec34a58f9fd18f4d4fccabf4efc22dd555b9d32963b26419ed107c872b67356f . \r\n\r\nWe want overloads to provide the separator character:\r\n\r\n```C#\r\npublic static partial class JsonConfigurationExtensions\r\n{\r\n    public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, Microsoft.Extensions.FileProviders.IFileProvider? provider, string path, bool optional, bool reloadOnChange) { throw null; }\r\n==\u003e public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, Microsoft.Extensions.FileProviders.IFileProvider? provider, string path, bool optional, bool reloadOnChange, string separator = \":\") { throw null; }\r\n    public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, System.Action\u003cMicrosoft.Extensions.Configuration.Json.JsonConfigurationSource\u003e? configureSource) { throw null; }\r\n    public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, string path) { throw null; }\r\n==\u003e public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, string path, string separator) { throw null; }\r\n    public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, string path, bool optional) { throw null; }\r\n==\u003e public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, string path, bool optional, string separator) { throw null; }\r\n    public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, string path, bool optional, bool reloadOnChange) { throw null; }\r\n==\u003e public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, string path, bool optional, bool reloadOnChange, string separator) { throw null; }\r\n    public static IConfigurationBuilder AddJsonStream(this IConfigurationBuilder builder, System.IO.Stream stream) { throw null; }\r\n==\u003e public static IConfigurationBuilder AddJsonStream(this IConfigurationBuilder builder, System.IO.Stream stream, string separator = \":\") { throw null; }\r\n}\r\n```\r\n\r\n`ConfigurationPath.cs` would have [a new method](https://github.com/dotnet/runtime/pull/66886/files#diff-551465ef4a5dddea48cbbf8f141cc0f67b0ca1c86952a03473e28a2f1cfdcedf) to complement `Combine`, named `CombineWith`:\r\n```csharp\r\npublic static string Combine(params string[] pathSegments) { throw null; }\r\n==\u003e public static string CombineWith(string separator, params string[] pathSegments) { throw null; }\r\n```\r\n\r\n... and a new method to complement `GetSectionKey`, named `GetSectionKeyWith`:\r\n```csharp\r\npublic static string? GetSectionKey(string? path) { throw null; }\r\n==\u003e public static string? GetSectionKeyWith(string separator, string? path) { throw null; }\r\n```\r\n\r\n`ConfigurationKeyComparer.cs` will have an overloaded constructor to specify the separator:\r\n\r\n```csharp\r\npublic partial class ConfigurationKeyComparer : System.Collections.Generic.IComparer\u003cstring\u003e\r\n{\r\n        public ConfigurationKeyComparer() { }\r\n==\u003e public ConfigurationKeyComparer(string separator) { }\r\n        public static Microsoft.Extensions.Configuration.ConfigurationKeyComparer Instance { get { throw null; } }\r\n        public static Microsoft.Extensions.Configuration.ConfigurationKeyComparer GetInstanceFor(string separator){ throw null; }\r\n        public int Compare(string? x, string? y) { throw null; }\r\n}\r\n```\r\n\r\n`ConfigurationProvider.cs`  will have a new method to expose the key separator that it\u0027s using:\r\n\r\n```csharp\r\npublic abstract partial class ConfigurationProvider : Microsoft.Extensions.Configuration.IConfigurationProvider\r\n{\r\n    protected ConfigurationProvider() { }\r\n==\u003e public virtual string GetDelimiter() { throw null; }\r\n    protected System.Collections.Generic.IDictionary\u003cstring, string?\u003e Data { get { throw null; } set { } }\r\n    public virtual System.Collections.Generic.IEnumerable\u003cstring\u003e GetChildKeys(System.Collections.Generic.IEnumerable\u003cstring\u003e earlierKeys, string? parentPath) { throw null; }\r\n    public Microsoft.Extensions.Primitives.IChangeToken GetReloadToken() { throw null; }\r\n```\r\n\r\n`ConfigurationSection.cs` will have an overload that takes the separator:\r\n\r\n```csharp\r\npublic partial class ConfigurationSection : Microsoft.Extensions.Configuration.IConfiguration, Microsoft.Extensions.Configuration.IConfigurationSection\r\n{\r\n        public ConfigurationSection(Microsoft.Extensions.Configuration.IConfigurationRoot root, string path,) { }\r\n==\u003e  public ConfigurationSection(Microsoft.Extensions.Configuration.IConfigurationRoot root, string path, string separator = \":\") { }\r\n        public string? this[string key] { get { throw null; } set { } }\r\n        ...\r\n}\r\n```\n\n### API Usage\n\nTaken from [this test](https://github.com/dotnet/runtime/pull/66886/files#diff-5c1b852db0091a5cc734ec45f3657250fb04c43ba89590b3aa75932b71f58f57R42-R63), if we had some JSON config:\r\n\r\n\r\n```json\r\n{\r\n    \"auths\": {\r\n        \"http://google\": {\r\n            \"uri\": \"https://www.google.es\"\r\n        },\r\n        \"http://microsoft\": {\r\n            \"uri\": \"https://www.microsoft.es\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWe could specify a different separator when loading it, e.g. a backtick (`` ` ``), as that is different to the default separator of colon:\r\n\r\n```csharp\r\n\r\npublic class MyClass\r\n{\r\n    public Dictionary\u003cstring, OtherType\u003e Auths { get; set; }\r\n}\r\n\r\npublic class OtherType\r\n{\r\n    public string Uri { get; set; }\r\n}\r\n\r\nvar config = new ConfigurationBuilder()\r\n    .AddJsonFile(\"json_with_colons_in_keys.json\", optional: false, reloadOnChange: true, separator: \"`\").Build();\r\n\r\nvar settings = new MyClass();\r\n\r\nconfig.Bind(settings);\r\nAssert.Equal(\"https://www.google.es\", settings.Auths[\"http://google\"].Uri);\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nI can\u0027t see any risks. The default separator is colon (`:`), so the changes are backwards compatible.\r\n\r\nThe [PR I did for this Issue](https://github.com/dotnet/runtime/pull/66886) has this new functionality, and all of the existing tests still pass, without modification.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eSteveDunn\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-05T20:07:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FIM5B",
                                           "createdAt":  "2022-06-19T17:09:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SteveDunn",
                                           "body":  "@maryamariyan - is there any update on this one?",
                                           "updatedAt":  "2022-06-19T17:09:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FSGf8",
                                           "createdAt":  "2022-06-21T21:14:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "This isn\u0027t planned for .NET 7 according to https://github.com/dotnet/runtime/issues/64015. We can consider it in the future.",
                                           "updatedAt":  "2022-06-21T21:14:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FoXjq",
                                           "createdAt":  "2022-06-28T04:35:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SteveDunn",
                                           "body":  "\u003e This isn\u0027t planned for .NET 7 according to #64015. We can consider it in the future.\r\n\r\n@eerhardt - I think it is. That page (https://github.com/dotnet/runtime/issues/64015) links to https://github.com/dotnet/runtime/issues/44517\r\n\r\n\u003e Built-in configuration providers can do more robust key handling\r\n\r\nThat page links to Bug https://github.com/dotnet/runtime/issues/42643\r\n\r\n\u003e ConfigurationBuilder - Configuration.Json: Binding a Dictionary\u003cstring,string\u003e error when Key contains an string url like http://www.google.es\r\n\r\nThat has a PR https://github.com/dotnet/runtime/pull/66886. \r\n\r\nThat PR is closed until this API Proposal is accepted.",
                                           "updatedAt":  "2022-06-28T04:44:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Fqo7d",
                                           "createdAt":  "2022-06-28T14:32:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCkIFEw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SteveDunn",
                                                                               "createdAt":  "2022-06-28T14:38:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Thanks @SteveDunn, I had missed that one.\r\n\r\nI\u0027ll move it back to 7.0 for now, but feature complete is in 2 weeks, so I\u0027m not confident this will make it for 7.0.",
                                           "updatedAt":  "2022-06-28T14:32:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GoIcU",
                                           "createdAt":  "2022-07-14T21:48:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "The \"Built-in configuration providers can do more robust key handling\" feature #44517 has been moved out of 7.0.\r\n\r\nWe will consider this in a future release. Moving this issue out of the 7.0 milestone as well.",
                                           "updatedAt":  "2022-07-14T21:48:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NWXTd",
                                           "createdAt":  "2022-10-31T21:28:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SteveDunn",
                                           "body":  "Glad to see this one back.",
                                           "updatedAt":  "2022-10-31T21:28:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iHl7J",
                                           "createdAt":  "2023-07-21T19:34:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "layomia",
                                           "body":  "Inlining a user scenario for this API proposal where it is desired for string dictionary keys - https://github.com/dotnet/runtime/issues/42643.",
                                           "updatedAt":  "2023-07-21T19:34:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iHmbv",
                                           "createdAt":  "2023-07-21T19:37:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "layomia",
                                           "body":  "Triage: moving to future given we\u0027re in a late period in the release \u0026 this would need API review.",
                                           "updatedAt":  "2023-07-21T19:37:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BpOLy",
                                           "createdAt":  "2024-06-18T05:50:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODmCEuw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "jmevel",
                                                                               "createdAt":  "2024-06-18T06:01:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "SteveDunn",
                                           "body":  "@layomia - is this being considered for .NET 9?",
                                           "updatedAt":  "2024-06-18T05:50:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BtEEN",
                                           "createdAt":  "2024-06-18T13:13:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "The way this issue is named feels a bit misleading/reductive to me. Could someone consider a rename to something like: \r\n\u003e [API Proposal]: Support configurable section delimiter in `IConfiguration`\r\n\r\n?",
                                           "updatedAt":  "2024-06-18T13:13:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S977N",
                                           "createdAt":  "2024-11-08T20:37:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGgxAg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "jmevel",
                                                                               "createdAt":  "2024-11-12T10:35:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "arielmoraes",
                                                                               "createdAt":  "2025-02-14T00:45:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "wiktor-golonka",
                                                                               "createdAt":  "2025-02-16T20:47:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "SteveDunn",
                                           "body":  "\u003e @layomia - is this being considered for .NET 9?\n\n.net 10 then?",
                                           "updatedAt":  "2024-11-08T20:37:38Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "[API Proposal]: Allow keys with colons in config",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/69163",
        "createdAt":  "2022-05-10T23:01:52Z",
        "number":  69163,
        "author":  "MattKotsenas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDeELA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Eli-Black-Work",
                                            "createdAt":  "2022-05-23T08:38:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2022-08-26T14:47:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "travisty-",
                                            "createdAt":  "2023-01-28T07:51:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "collinstevens",
                                            "createdAt":  "2023-01-30T23:29:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattfrear",
                                            "createdAt":  "2023-07-05T05:37:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TheCodingCanal",
                                            "createdAt":  "2023-09-13T20:41:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Juliusz",
                                            "createdAt":  "2023-09-25T08:37:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lwestfall",
                                            "createdAt":  "2023-10-06T10:37:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "damianh",
                                            "createdAt":  "2023-10-25T17:32:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aayjaychan",
                                            "createdAt":  "2023-12-01T17:15:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TahirAhmadov",
                                            "createdAt":  "2023-12-28T14:02:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gioce90",
                                            "createdAt":  "2024-01-08T14:42:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "manuel-fernandez-rodriguez",
                                            "createdAt":  "2024-02-01T17:02:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "luryus",
                                            "createdAt":  "2024-03-18T11:36:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "heathprovost",
                                            "createdAt":  "2024-03-29T18:55:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tmc101",
                                            "createdAt":  "2024-04-10T16:57:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gdperkins",
                                            "createdAt":  "2024-05-03T06:53:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sliekens",
                                            "createdAt":  "2024-07-25T12:48:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-07-25T15:11:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hrrrrustic",
                                            "createdAt":  "2024-08-05T18:27:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jesperkristensen",
                                            "createdAt":  "2024-08-19T12:40:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Jure-BB",
                                            "createdAt":  "2024-10-02T11:36:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kz-gonzalo-curbelo",
                                            "createdAt":  "2024-11-05T18:35:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aetos382",
                                            "createdAt":  "2024-11-19T08:58:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dreamescaper",
                                            "createdAt":  "2024-12-22T20:22:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rcdailey",
                                            "createdAt":  "2025-01-15T16:51:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cimnine",
                                            "createdAt":  "2025-01-17T10:46:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichaelSL",
                                            "createdAt":  "2025-01-27T20:55:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "asidorowicz-fa",
                                            "createdAt":  "2025-03-12T15:02:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iperevoschikov",
                                            "createdAt":  "2025-03-24T12:17:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "davisnw",
                                            "createdAt":  "2025-03-27T01:43:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "abc-rpg",
                                            "createdAt":  "2025-05-02T11:10:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WhiteTomX",
                                            "createdAt":  "2025-05-07T11:09:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jdutkiewicz-krk",
                                            "createdAt":  "2025-06-09T14:29:34Z"
                                        }
                                    ],
                          "totalCount":  34
                      },
        "updatedAt":  "2025-06-09T14:37:06Z",
        "body":  "### Background\r\n\r\n`ConfigurationBinder` has a method `GetValue\u003cT\u003e`, which is a simple way of getting a single value from configuration and converting it to the specified type ([docs](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-6.0#getvalue)). The API optionally accepts a default value if the configuration key cannot be found. If the key is not found and no default is specified, `default(T)` is returned. If the value is found but cannot be converted to the target type, an exception is thrown.\r\n\r\n### Motivation\r\n\r\nIn some cases, silently returning `default(T)` can lead to subtle bugs. For example, consider an example app that requires a timeout value, which _should_ always be specified in `appsettings.json`, and is retrieved like this `var timeout = configuration.GetValue\u003cTimeSpan\u003e(\"Timeout\")`. In our example the config value is missing. Since no default is specified, the default `TimeSpan` is returned, which is... `00:00:00`! As a result, all operations time out instantly rather that what we might expect, which is some type of exception that the configuration key wasn\u0027t found.\r\n\r\n.NET 6 introduced a [GetRequiredSection](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.configurationextensions.getrequiredsection?view=dotnet-plat-ext-6.0) extension that performs similar validation for configuration sections, so I thought it may be appropriate to extend that convenience to the single value case as well.\r\n\r\nNote that the proposed APIs would be on the `ConfigurationBinder` class in `Microsoft.Extensions.Configuration.Binder` and not `ConfigurationExtensions` in `Microsoft.Extensions.Configuration.Abstractions` since `GetValue` is exposed through Binder and isn\u0027t part of the Abstractions layer.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.Configuration\r\n{\r\n    public partial static class ConfigurationBinder\r\n    {\r\n        public static T GetRequiredValue\u003cT\u003e(this IConfiguration configuration, string key);\r\n        public static object GetRequiredValue(this IConfiguration configuration, Type type, string key);\r\n    }\r\n}\r\n```\r\n\r\nI propose that the exception if the configuration key isn\u0027t found is an `InvalidOperationException`, since that\u0027s what `GetRequiredSection` throws, but am open to other suggestions.\r\n\r\n### API Usage\r\n\r\nConfiguration:\r\n```json\r\n{\r\n    \"MyTimeout\": \"00:00:10\"\r\n}\r\n````\r\n\r\nComparison of usage (generic):\r\n```csharp\r\nvar endpoint = configuration.GetRequiredValue\u003cTimeSpan\u003e(\"MyTimeout\"); // returns \u002700:00:10\u0027\r\n\r\nvar endpoint = configuration.GetRequiredValue\u003cTimeSpan\u003e(\"MyMispelledTimeout\"); // throws exception\r\nvar endpoint = configuration.GetValue\u003cTimeSpan\u003e(\"MyMispelledTimeout\"); // returns \u002700:00:00\u0027\r\n```\r\n\r\nComparison of usage (non-generic):\r\n```csharp\r\nvar endpoint = configuration.GetRequiredValue(typeof(TimeSpan), \"MyTimeout\"); // returns \u002700:00:10\u0027\r\n\r\nvar endpoint = configuration.GetRequiredValue(typeof(TimeSpan), \"MyMispelledTimeout\"); // throws exception\r\nvar endpoint = configuration.GetValue(typeof(TimeSpan), \"MyMispelledTimeout\"); // returns \u0027null\u0027\r\n```\r\n\r\n### Alternative Designs\r\n\r\nThe non-generic case can be simulated with a one-liner like this:\r\n\r\n```csharp\r\nvar timeout = configuration.GetValue(typeof(TimeSpan), \"MyTimeout\") ?? throw new InvalidOperationException();\r\n```\r\n\r\nwhich could then be made generic with another cast, but seems a bit unwieldy, especially if used in multiple places.\r\n\r\nThe generic version is more important in my opinion, since it\u0027s the case that can introduce confusion by coercing a missing value to the default (especially for value types). The non-generic version is proposed mostly for symmetry and reflection scenarios, and thus if it\u0027s decided that the non-generic version is not wanted, I wouldn\u0027t be opposed to dropping it.\r\n\r\n### Risks\r\n\r\nLow as far as I can see. It\u0027s a new, opt-in API that follows an existing naming convention, and that increases type safety, so the likelihood of misuse or abuse seems low.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsDDcTQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5C74Zw",
                                           "createdAt":  "2022-05-10T23:01:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\n`ConfigurationBinder` has a method `GetValue\u003cT\u003e`, which is a simple way of getting a single value from configuration and converting it to the specified type ([docs](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-6.0#getvalue)). The API optionally accepts a default value if the configuration key cannot be found. If the key is not found and no default is specified, `default(T)` is returned.\r\n\r\nIn some cases, silently returning `default(T)` can lead to subtle bugs. For example, consider an app that requires a timeout value, which _should_ always be specified in `appsettings.json`, and is retrieved like this `var timeout = configuration.GetValue\u003cTimeSpan\u003e(\"Timeout\")`. In this example the config value is missing. Since no default is specified, the default `TimeSpan` is returned, which is... `00:00:00`. As a result, all operations time out instantly rather that what one might expect, which is some type of exception that the configuration key wasn\u0027t found.\r\n\r\n.NET 6 introduced a [GetRequiredSection](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.configurationextensions.getrequiredsection?view=dotnet-plat-ext-6.0) extension that performs similar validation for configuration sections, so I thought it may be appropriate to extend that convenience to the single value case as well.\n\n### API Proposal\n\n```csharp\r\nnamespace Microsoft.Extensions.Configuration\r\n{\r\n    public partial static class ConfigurationExtensions\r\n    {\r\n        public static T GetRequiredValue\u003cT\u003e(this IConfiguration configuration, string key);\r\n        public static object GetRequiredValue(this IConfiguration configuration, Type type, string key);\r\n    }\r\n}\r\n```\r\n\r\nI propose that the exception if the configuration key isn\u0027t found by an `InvalidOperationException`, since that\u0027s what `GetRequiredSection` throws, but am open to other suggestions.\n\n### API Usage\n\nConfiguration:\r\n```json\r\n{\r\n    \"MyEndpoint\": \"http://localhost\"\r\n}\r\n````\r\n\r\nComparison of usage (generic):\r\n```csharp\r\nvar endpoint = configuration.GetRequiredValue\u003cstring\u003e(\"MyEndpoint\"); // returns \u0027http://localhost\u0027\r\nvar endpoint = configuration.GetRequiredValue\u003cstring\u003e(\"MyMispelledEndpoint\"); // throws exception\r\nvar endpoint = configuration.GetValue\u003cstring\u003e(\"MyMispelledEndpoint\"); // returns \u0027null\u0027\r\n```\r\n\r\nComparison of usage (non-generic):\r\n```csharp\r\nvar endpoint = configuration.GetRequiredValue(typeof(string), \"MyEndpoint\"); // returns \u0027http://localhost\u0027\r\nvar endpoint = configuration.GetRequiredValue(typeof(string), \"MyMispelledEndpoint\"); // throws exception\r\nvar endpoint = configuration.GetValue(typeof(string), \"MyMispelledEndpoint\"); // returns \u0027null\u0027\r\n```\r\n\n\n### Alternative Designs\n\nThe non-generic case can be simulated with a one-liner like this:\r\n\r\n```csharp\r\nvar timeout = configuration.GetValue(typeof(string), \"MyEndpoint\") ?? throw new InvalidOperationException();\r\n```\r\n\r\nwhich could then be made generic with another cast, but that seems a bit unwieldy, especially if used in multiple places.\r\n\r\nThe generic version is more important in my opinion, since it\u0027s the case that can introduce confusion by coercing a missing value to the default (especially for value types). The non-generic version is proposed mostly for symmetry and reflection scenarios, and thus if it\u0027s decided that the non-generic version is not wanted, I wouldn\u0027t be opposed to dropping it.\n\n### Risks\n\nLow as far as I can see. It\u0027s a new, opt-in API that follows an existing naming convention, and that increases type safety, so the likelihood of misuse or abuse seems low.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMattKotsenas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-10T23:01:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C77B-",
                                           "createdAt":  "2022-05-10T23:20:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DrkWzrd",
                                           "body":  "What should the function return or do  if key is found but the value cannot be parsed/bound to the introduced type?",
                                           "updatedAt":  "2022-05-10T23:20:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C7727",
                                           "createdAt":  "2022-05-10T23:26:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEV5_AQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Eli-Black-Work",
                                                                               "createdAt":  "2022-05-23T08:38:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-25T15:11:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jdutkiewicz-krk",
                                                                               "createdAt":  "2025-06-09T14:30:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "MattKotsenas",
                                           "body":  "\u003e What should the function return or do if key is found but the value cannot be parsed/bound to the introduced type?\r\n\r\nToday `GetValue\u003cT\u003e` throws an `InvalidOperationException` with a message of the format `Failed to convert configuration value at \u0027{key}\u0027 to type \u0027{type}\u0027.`\r\n\r\nSo I would suggest doing the same. I\u0027ll update the proposal to make that explicit.",
                                           "updatedAt":  "2022-05-10T23:28:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C8gFQ",
                                           "createdAt":  "2022-05-11T03:58:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MattKotsenas",
                                           "body":  "After looking at how I would implement this code a bit more, it seems that the Abstractions package doesn\u0027t expose `GetValue`, it\u0027s exposed from Binder, so I\u0027ve updated the proposal to have the new method on `ConfigurationBinder`.\r\n\r\nAlso here\u0027s a sample implementation on my fork: https://github.com/dotnet/runtime/compare/main...MattKotsenas:feature/get-required-value-69163?expand=0",
                                           "updatedAt":  "2022-05-11T04:11:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DqQk_",
                                           "createdAt":  "2022-05-23T21:24:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MattKotsenas",
                                           "body":  "Hi there! I believe the proposal is ready for feedback, and the sample implementation has been updated with tests. Any suggestions on how to proceed is greatly appreciated. Thanks!",
                                           "updatedAt":  "2022-05-23T21:24:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DrAL1",
                                           "createdAt":  "2022-05-24T02:58:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eli-Black-Work",
                                           "body":  "Would it make sense to go ahead and open a PR, so the .NET team can review it that way?",
                                           "updatedAt":  "2022-05-24T02:58:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DrAQ3",
                                           "createdAt":  "2022-05-24T02:59:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eli-Black-Work",
                                           "body":  "(We\u0027d also be interested in a feature like this 🙂)",
                                           "updatedAt":  "2022-05-24T02:59:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N_POk",
                                           "createdAt":  "2022-11-09T08:56:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEDXZcg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "i8beef",
                                                                               "createdAt":  "2022-12-24T17:22:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "collinstevens",
                                                                               "createdAt":  "2023-01-30T23:30:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rogerjak",
                                                                               "createdAt":  "2023-02-21T11:02:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gioce90",
                                                                               "createdAt":  "2024-01-08T14:40:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "gioce90",
                                                                               "createdAt":  "2024-01-08T14:43:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-25T15:11:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aa-dit-yuh",
                                                                               "createdAt":  "2024-11-18T09:21:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aetos382",
                                                                               "createdAt":  "2025-01-21T08:27:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "teemka",
                                           "body":  "In .NET 7 nullable reference types have been enabled in `ConfigurationBinder` so `GetValue` method is now marked that it can return null. After migration to .NET 7 I get a warning almost everywhere I use `GetValue\u003cT\u003e` because of the possible null. The solution to this is to add `!` null forgiving operator everywhere I use `GetValue` but it\u0027s not an elegant solution.\r\n\r\nThis change should\u0027ve been shipped with .NET 7 :(",
                                           "updatedAt":  "2022-11-09T08:56:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QJMnv",
                                           "createdAt":  "2022-12-09T17:47:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCxDzKw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Eli-Black-Work",
                                                                               "createdAt":  "2022-12-12T02:40:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MattKotsenas",
                                           "body":  "@maryamariyan , @terrajobst , this proposal seems to have stalled out; is there anything we can do to get an approval / rejection and move forward?\r\n\r\nIf you have any questions, please let me know. Thanks!",
                                           "updatedAt":  "2022-12-09T17:47:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QJN3E",
                                           "createdAt":  "2022-12-09T17:53:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "@maryamariyan didn\u0027t we just add validation to configuration? Could this be achieved more generally with that?",
                                           "updatedAt":  "2022-12-09T17:53:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QNZRr",
                                           "createdAt":  "2022-12-11T23:27:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@MattKotsenas how blocking this scenario for you? This is not a high priority for us which we have marked for the future, and we can consider it later. ",
                                           "updatedAt":  "2022-12-11T23:27:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QNxAF",
                                           "createdAt":  "2022-12-12T02:41:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eli-Black-Work",
                                           "body":  "@MattKotsenas I remember you had a fork open with a sample implementation. Would it make sense to open a PR for the .NET team to review?",
                                           "updatedAt":  "2022-12-12T02:41:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QNxg5",
                                           "createdAt":  "2022-12-12T02:46:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEe1EJA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Eli-Black-Work",
                                                                               "createdAt":  "2022-12-12T02:53:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Peace7",
                                                                               "createdAt":  "2025-02-21T14:28:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Getinge-Dumitru",
                                                                               "createdAt":  "2025-08-19T16:38:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "We cannot accept a PR before design review any proposal. The issue is not about the implementation. I need to figure out the priority for that request to allocate time for that to investigate and analyze the proposal. ",
                                           "updatedAt":  "2022-12-12T02:46:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QNyPY",
                                           "createdAt":  "2022-12-12T02:53:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Eli-Black-Work",
                                           "body":  "Ah, got it 🙂",
                                           "updatedAt":  "2022-12-12T02:53:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GIEWA",
                                           "createdAt":  "2024-07-25T12:58:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sliekens",
                                           "body":  "What is the currently the recommended usage pattern for required configuration? e.g. for HttpClient base addresses.\r\n\r\n``` json\r\n{\r\n    \"CoolService\": {\r\n        \"BaseAddress\": \"https://cool-stuff/\"\r\n    }\r\n}\r\n```\r\n\r\nWhat is the pattern for turning this into a not-null `System.Uri`, or throw when the config is missing (or invalid format)?\r\n\r\n``` csharp\r\n// a\r\nUri a = new Uri(Configuration.GetRequiredSection(\"CoolService:BaseAddress\").Value ?? throw new Exception());\r\n\r\n// b\r\nUri b = Configuration.GetRequiredSection(\"CoolService\").GetValue\u003cUri\u003e(\"BaseAddress\") ?? throw new Exception();\r\n\r\n// c\r\nUri c = new Uri(Configuration.GetRequiredSection(\"CoolService\")[\"BaseAddress\"] ?? throw new Exception());\r\n\r\n// d\r\nUri d = new Uri(Configuration.GetSection(\"CoolService\")[\"BaseAddress\"] ?? throw new Exception());\r\n\r\n// e\r\nUri e = Configuration.GetSection(\"CoolService\").GetValue\u003cUri\u003e(\"BaseAddress\") ?? throw new Exception();\r\n\r\n// f\r\nUri f = new Uri(Configuration.GetSection(\"CoolService:BaseAddress\").Value ?? throw new Exception());\r\n\r\n// g\r\nUri g = new Uri(Configuration[\"CoolService:BaseAddress\"] ?? throw new Exception());\r\n```\r\n\r\n---\r\n\r\nI think the proposed design looks good, it would simplify my code.\r\n\r\n``` csharp\r\nUri future = Configuration.GetRequiredValue\u003cUri\u003e(\"CoolService:BaseAddress\");\r\n```",
                                           "updatedAt":  "2024-07-26T06:57:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GJi7P",
                                           "createdAt":  "2024-07-25T15:17:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "I think this is a good suggestion that aligns well with other APIs such as `IServiceProvider.GetService` vs `IServiceProvider.GetRequiredService`.\r\n\r\nIt is particularly annoying how it plays out with NRT and the added runtime protection against typos and misconfiguration is nice.\r\n\r\nThe only aspect I find annoying with this is the indexer access that `IConfiguration` exposes, which _cannot_ have an equivalent \"required\" version:\r\n```csharp\r\npublic void Method(IConfiguration configuration)\r\n{\r\n    var option = configuration[\"MySection:MyOption\"]; // returns `null` if option is not present\r\n    ...\r\n}\r\n```\r\n\r\nWould it be a best practice then, moving forward, to never use the indexer access for \"normal\" mandatory options and prefer `GetRequiredValue\u003cstring\u003e` instead?",
                                           "updatedAt":  "2024-07-25T15:17:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YgO_f",
                                           "createdAt":  "2024-12-22T20:25:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEBMaxw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2025-01-06T15:40:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Dreamescaper",
                                           "body":  "I would suggest to add a non-generic overload, returning string:\n```csharp\npublic static string GetRequiredValue(this IConfiguration configuration, string key);\n```",
                                           "updatedAt":  "2024-12-22T20:25:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bNVBx",
                                           "createdAt":  "2025-01-21T08:30:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEJixPA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jthydsb",
                                                                               "createdAt":  "2025-03-12T09:43:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "aetos382",
                                           "body":  "Please also consider the `Required` variants of [ConfigurationBinder.Get](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.configurationbinder.get) methods.",
                                           "updatedAt":  "2025-01-21T08:30:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6boR_k",
                                           "createdAt":  "2025-01-23T21:12:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEV6BtQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "jdutkiewicz-krk",
                                                                               "createdAt":  "2025-06-09T14:35:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "raky291",
                                           "body":  "I created a extension in case someone is interested\n\n```\nusing Microsoft.Extensions.Configuration;\n\npublic static class ConfigurationExtensions\n{\n    public static T GetRequiredValue\u003cT\u003e(this IConfiguration configuration, string key)\n    {\n        var value = configuration.GetValue\u003cT\u003e(key);\n        \n        if (value is null)\n        {\n            throw new InvalidOperationException($\"Configuration value for key \u0027{key}\u0027 is required but not found\");\n        }\n\n        return value;\n    }\n}\n```",
                                           "updatedAt":  "2025-01-23T21:12:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wMNxN",
                                           "createdAt":  "2025-06-09T14:37:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jdutkiewicz-krk",
                                           "body":  "\u003e I created a extension in case someone is interested\n\u003e \n\u003e ```\n\u003e using Microsoft.Extensions.Configuration;\n\u003e \n\u003e public static class ConfigurationExtensions\n\u003e {\n\u003e     public static T GetRequiredValue\u003cT\u003e(this IConfiguration configuration, string key)\n\u003e     {\n\u003e         var value = configuration.GetValue\u003cT\u003e(key);\n\u003e         \n\u003e         if (value is null)\n\u003e         {\n\u003e             throw new InvalidOperationException($\"Configuration value for key \u0027{key}\u0027 is required but not found\");\n\u003e         }\n\u003e \n\u003e         return value;\n\u003e     }\n\u003e }\n\u003e ```\n\n`.GetValue\u003cstring\u003e(..)` returns `string.Empty` for values that are null\n",
                                           "updatedAt":  "2025-06-09T14:37:05Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "[API Proposal]: ConfigurationBinder.GetRequiredValue",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70326",
        "createdAt":  "2022-06-07T02:57:06Z",
        "number":  70326,
        "author":  "mcm-ham",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-09T22:29:14Z",
        "body":  "### Description\r\n\r\n.\r\n\r\n### Reproduction Steps\r\n\r\nappsettings.json\r\n```json\r\n{ \"test\": \"value\" }\r\n```\r\n\r\nlaunchSettings.json\r\n```json\r\n{ \"environmentVariables\": { \"E_test\": \"\" } }\r\n```\r\n\r\nProgram.cs\r\n```cs\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Configuration.AddEnvironmentVariables(\"E_\");\r\nvar app = builder.Build();\r\nvar test = app.Configuration[\"test\"];\r\nConsole.WriteLine(test);\r\n```\r\n\r\n### Expected behavior\r\n\r\nI\u0027d expect the variable `test` to be the same whether I run the app normally or debug. Ideally empty since I override it with environment variable.\r\n\r\n### Actual behavior\r\n\r\nIf I debug test is `value`, if I run normally test is ``.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET 6.0\r\nMac M1\r\n\r\n### Other information\r\n\r\nI\u0027m debugging using VSCode.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORPLdpQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5EbzFp",
                                           "createdAt":  "2022-06-07T02:57:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\n.\n\n### Reproduction Steps\n\nappsettings.json\r\n```json\r\n{ \"test\": \"value\" }\r\n```\r\n\r\nlaunchSettings.json\r\n```json\r\n{ \"environmentVariables\": { \"E_test\": \"\" } }\r\n```\r\n\r\nProgram.cs\r\n```cs\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Configuration.AddEnvironmentVariables(\"E_\");\r\nvar app = builder.Build();\r\nvar test = app.Configuration[\"test\"];\r\nConsole.WriteLine(test);\r\n```\n\n### Expected behavior\n\nI\u0027d expect the variable `test` to be the same whether I run the app normally or debug.\n\n### Actual behavior\n\nIf I debug test is `value`, if I run normally test is ``.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 6.0\r\nMac M1\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emcm-ham\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-07T02:57:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E48DS",
                                           "createdAt":  "2022-06-14T22:37:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "In both debug and release the value of test shows up the same, I am not getting your repro.",
                                           "updatedAt":  "2022-06-14T22:37:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E49u0",
                                           "createdAt":  "2022-06-14T22:49:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mcm-ham",
                                           "body":  "Thanks for investigating. I\u0027m not referring to build configuration, I\u0027m referring to when you have the debugger attached or not. Here are some screenshots:\r\n\r\nDebugging\r\n\u003cimg width=\"927\" alt=\"Screen Shot 2022-06-15 at 11 55 54 AM\" src=\"https://user-images.githubusercontent.com/8325692/173708625-71ca4cf3-6328-426c-93ff-a5a8089949fd.png\"\u003e\r\n\r\nNormal\r\n\u003cimg width=\"917\" alt=\"Screen Shot 2022-06-15 at 12 04 18 PM\" src=\"https://user-images.githubusercontent.com/8325692/173709260-6bfafdf4-b7ca-4415-baa4-82a1e745c0bd.png\"\u003e\r\n",
                                           "updatedAt":  "2022-06-15T00:05:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E8nBB",
                                           "createdAt":  "2022-06-15T17:23:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "When it\u0027s run with VS I see the value. But when I run on command line even when attaching debugger using:\r\n\r\n```c#\r\nif (!System.Diagnostics.Debugger.IsAttached)\r\n{\r\n    System.Diagnostics.Debugger.Launch();\r\n    System.Diagnostics.Debugger.Break();\r\n}\r\n```\r\n\r\nthe value won\u0027t show up. I\u0027m not sure if this is configuration specific per say.\r\n\r\n@tarekgh @eerhardt what do you think?",
                                           "updatedAt":  "2022-06-15T17:23:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E8qXV",
                                           "createdAt":  "2022-06-15T17:38:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "I would assume launchSettings.json isn\u0027t being respected when you run it from the command line.\r\n\r\nTry eliminating any Microsoft.Extensions code from the repro steps and just look to see if the Environment Variable is set or not:\r\n\r\n`Console.WriteLine(Environment.GetEnvironmentVariable(\"E_test\"))`",
                                           "updatedAt":  "2022-06-15T17:38:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E8t2l",
                                           "createdAt":  "2022-06-15T17:54:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "More things you can check is calling `Console.IsOutputRedirected` to see if the output is redirected. Also, try to select the empty line in the output, it could be colors are tampered. ",
                                           "updatedAt":  "2022-06-15T17:54:58Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Configuration override has different behaviour when debugger attached",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73016",
        "createdAt":  "2022-07-28T18:25:21Z",
        "number":  73016,
        "author":  "JokerFunny",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0imKQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mariachi1231",
                                            "createdAt":  "2022-08-03T10:11:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Taron-art",
                                            "createdAt":  "2023-12-10T18:21:04Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-08-03T09:55:46Z",
        "body":  "### Description\r\n\r\nMade an update of all Microsoft.Extensions.* packages to the 6.0.0 version after fix with [\u0027repeated XML elements without a name attribute\u0027](https://github.com/dotnet/runtime/pull/44608) and thought that it would be an easy-peasy journey to complete my task, but faced with the issue that, while using XML configuration, collections couldn\u0027t be properly bound. As a result, your entity is missing some stuff that you expect to see.\r\n\r\nAs the main point: behavior using JSON and XML is different. XML produces wrong binding, and JSON - works as expected.\r\n\r\n### Reproduction Steps\r\n\r\n1. Create a .NET Framework console app;\r\n2. Create a test config file (.cs entity + .xml config), that contains any collection (array, list, etc);\r\n3. Create IConfigurationRoot via ConfigurationBuilder using XML file:\r\n`IConfigurationRoot configuration = new ConfigurationBuilder()`\r\n                `.AddXmlFile(Path.Combine(Environment.CurrentDirectory, \"..\\\\TestConfig.xml\"), optional: false, reloadOnChange: true)`\r\n                `.Build();`\r\n5. Try to configure it via IOptions;\r\n`ServiceCollection sc = new ServiceCollection();`\r\n`sc.AddOptions();`\r\n`sc.Configure\u003cTestConfig\u003e(options =\u003e configuration.Bind(options));`\r\n`ServiceProvider sp = sc.BuildServiceProvider();`\r\n6. Check the result.\r\n`IOptions\u003cTestConfig\u003e test = sp.GetService\u003cIOptions\u003cTestConfig\u003e\u003e();`\r\n\r\nOR\r\n\r\nCheck repo: [*click here*](https://github.com/JokerFunny/XmlConfiguration/tree/master/XmlConfiguration)\r\n\r\n\r\n### Expected behavior\r\n\r\nThe XML-based configuration gives the same result as JSON-based.\r\n\r\nThe reason is that after parsing using JsonConfigurationProvider/XmlConfigurationProvider we have a different structure, that will be handled via the single class - ConfigurationBuilder:\r\n![json-based](https://user-images.githubusercontent.com/31706307/181608223-2ce8b4cb-c224-4e66-bf5b-9ca0aa106e24.png)\r\n![xml-based](https://user-images.githubusercontent.com/31706307/181608226-b22fcee1-f6be-4f8f-b5fb-87ceea944ea4.png)\r\n\r\nI expected that the result should be the same independent of the provider, but it\u0027s not :(\r\n![json-based-1](https://user-images.githubusercontent.com/31706307/181608261-b6512844-84ac-4a94-93b7-d33d5803db32.png)\r\n![xml-based-1](https://user-images.githubusercontent.com/31706307/181608263-1a42dc92-3c9e-4382-9f54-ee12d72b17bf.png)\r\n\r\n### Actual behavior\r\n\r\nJSON configuration works fine, XML - works fine for scalar types only, while collections couldn\u0027t be bound appropriately.\r\n\r\n### Regression?\r\n\r\nWell, in general, such an approach (collections without name attribute) before the latest major (6.0.0) produced an error, so it\u0027s a new bug (after the fix of the old bug :( )\r\n\r\n### Known Workarounds\r\n\r\n- Change your configuration from XML files to JSON.\r\n\r\n- If you can\u0027t/don\u0027t want to use JSON (we use all configurations via XML files, so using JSON is not a panacea for us), so as an ugly workaround we decided to create a new extension, that deserializes the XML-object to the JSON-object on runtime and will work with Binder as JSON (that works well).\r\n\r\n### Configuration\r\n\r\n.NET Framework 4.8\r\nWindows 11 21H2 (OS Build 22000.795)\r\nx64\r\nSeems like this issue is platform-independent\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR7-OAA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Hb4zt",
                                           "createdAt":  "2022-07-28T18:25:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nMade an update of all Microsoft.Extensions.* packages to the 6.0.0 version after fix with [\u0027repeated XML elements without a name attribute\u0027](https://github.com/dotnet/runtime/pull/44608) and thought that it would be an easy-peasy journey to complete my task, but faced with the issue that, while using XML configuration, collections couldn\u0027t be properly bound. As a result, your entity is missing some stuff that you expect to see.\r\n\r\nAs the main point: behavior using JSON and XML is different. XML produces wrong binding, and JSON - works as expected.\n\n### Reproduction Steps\n\n1. Create a .NET Framework console app;\r\n2. Create a test config file (.cs entity + .xml config), that contains any collection (array, list, etc);\r\n3. Create IConfigurationRoot via ConfigurationBuilder using XML file:\r\n`IConfigurationRoot configuration = new ConfigurationBuilder()`\r\n                `.AddXmlFile(Path.Combine(Environment.CurrentDirectory, \"..\\\\TestConfig.xml\"), optional: false, reloadOnChange: true)`\r\n                `.Build();`\r\n5. Try to configure it via IOptions;\r\n`ServiceCollection sc = new ServiceCollection();`\r\n`sc.AddOptions();`\r\n`sc.Configure\u003cTestConfig\u003e(options =\u003e configuration.Bind(options));`\r\n`ServiceProvider sp = sc.BuildServiceProvider();`\r\n6. Check the result.\r\n`IOptions\u003cTestConfig\u003e test = sp.GetService\u003cIOptions\u003cTestConfig\u003e\u003e();`\r\n\r\nOR\r\n\r\nCheck repo: [*click here*](https://github.com/JokerFunny/XmlConfiguration/tree/master/XmlConfiguration)\r\n\n\n### Expected behavior\n\nThe XML-based configuration gives the same result as JSON-based.\r\n\r\nThe reason is that after parsing using JsonConfigurationProvider/XmlConfigurationProvider we have a different structure, that will be handled via the single class - ConfigurationBuilder:\r\n![json-based](https://user-images.githubusercontent.com/31706307/181608223-2ce8b4cb-c224-4e66-bf5b-9ca0aa106e24.png)\r\n![xml-based](https://user-images.githubusercontent.com/31706307/181608226-b22fcee1-f6be-4f8f-b5fb-87ceea944ea4.png)\r\n\r\nI expected that the result should be the same independent of the provider, but it\u0027s not :(\r\n![json-based-1](https://user-images.githubusercontent.com/31706307/181608261-b6512844-84ac-4a94-93b7-d33d5803db32.png)\r\n![xml-based-1](https://user-images.githubusercontent.com/31706307/181608263-1a42dc92-3c9e-4382-9f54-ee12d72b17bf.png)\n\n### Actual behavior\n\nJSON configuration works fine, XML - works fine for scalar types only, while collections couldn\u0027t be bound appropriately.\n\n### Regression?\n\nWell, in general, such an approach (collections without name attribute) before the latest major (6.0.0) produced an error, so it\u0027s a new bug (after the fix of the old bug :( )\n\n### Known Workarounds\n\n- Change your configuration from XML files to JSON.\r\n\r\n- If you can\u0027t/don\u0027t want to use JSON (we use all configurations via XML files, so using JSON is not a panacea for us), so as an ugly \r\nworkaround we decided to create a new extension, that deserializes the XML-object to the JSON-object on runtime and will work with Binder as JSON (that works well).\n\n### Configuration\n\n.NET Framework 4.8\r\nWindows 11 21H2 (OS Build 22000.795)\r\nx64\r\nSeems like this issue is platform-independent\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJokerFunny\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-28T18:25:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ht63b",
                                           "createdAt":  "2022-08-02T21:13:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@JokerFunny how this is strictly blocking you? Is it ok to consider this for the next release?",
                                           "updatedAt":  "2022-08-02T21:13:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hv44A",
                                           "createdAt":  "2022-08-03T09:55:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JokerFunny",
                                           "body":  "Hi @tarekgh \r\nNo, it\u0027s not blocking for us, we handled it via second \u0027Known Workarounds\u0027. But in general, this behavior is unexpected (from just using of existing API) for users and should be fixed.\r\n\r\n\u003e @JokerFunny how this is strictly blocking you? Is it ok to consider this for the next release?",
                                           "updatedAt":  "2022-08-03T09:55:39Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Bug when using XML configuration via ConfigurationBuilder.",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78353",
        "createdAt":  "2022-11-15T00:42:19Z",
        "number":  78353,
        "author":  "Nick-Stanton",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-15T00:45:52Z",
        "body":  "# Summary\r\n\r\nRecent regressions caught in `Microsoft.Extensions.Configuration.Binder` have shown that the `ConfigurationBinder` test coverage is not thorough enough. As type support grows and changes in the Configuration Binder, it makes sense to add an extensible test theory that types can be easily added to. `System.Text.Json` created a test system for serialization that would conceptually translate nicely over to the Configuration Binder. Here\u0027s a brief summary of how it works for the serialization tests:\r\n\r\n### JSON Serialization Tests\r\n\r\n- [Create a folder](https://github.com/dotnet/runtime/tree/main/src/libraries/System.Text.Json/tests/Common/TestClasses) of test classes to feed into the test case. These classes contain a data string to be fed into the serializer, as well as `Initialize()` and `Verify()` methods to populate class properties and assert that expected output occurs.\r\n- [Expose the test classes](https://github.com/dotnet/runtime/blob/fb36ccef4bab6bf69d890c30978daccdb62b5839/src/libraries/System.Text.Json/tests/Common/TestClasses/TestData.cs#L10) as a public `IEnumerable\u003cobject[]\u003e`.\r\n- Feed the `IEnumerable\u003cobject[]\u003e` as Xunit `[MemberData()]`, as [seen here](https://github.com/dotnet/runtime/blob/0c4ee9e749167a2185f59b4a16c8a5c62e0ec5df/src/libraries/System.Text.Json/tests/System.Text.Json.Tests/Serialization/SpanTests.cs#L18-L26).\r\n\r\n## Proposal\r\n\r\nIf a solution is found that replicates the Configuration Binder tests using this methodology, it will be much easier to test a large variety of types in an extensible way. The current test format ([example](https://github.com/dotnet/runtime/blob/9c916ea6d9d24e9311cbaf8298c2334480de2fca/src/libraries/Microsoft.Extensions.Configuration.Binder/tests/ConfigurationBinderTests.cs#L1080-L1102)) instantiates a `Dictionary\u003cstring, string\u003e` as a payload for the `ConfigurationBuilder`. There may be a way to rewrite this process when porting over the serializer test logic to minimize boilerplate for adding new types.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTls2Gg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5OWzYa",
                                           "createdAt":  "2022-11-15T00:42:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n# Summary\r\n\r\nRecent regressions caught in `Microsoft.Extensions.Configuration.Binder` have shown that the `ConfigurationBinder` test coverage is not thorough enough. As type support grows and changes in the Configuration Binder, it makes sense to add an extensible test theory that types can be easily added to. `System.Text.Json` created a test system for serialization that would conceptually translate nicely over to the Configuration Binder. Here\u0027s a brief summary of how it works for the serialization tests:\r\n\r\n### JSON Serialization Tests\r\n\r\n- [Create a folder](https://github.com/dotnet/runtime/tree/main/src/libraries/System.Text.Json/tests/Common/TestClasses) of test classes to feed into the test case. These classes contain a data string to be fed into the serializer, as well as `Initialize()` and `Verify()` methods to populate class properties and assert that expected output occurs.\r\n- [Expose the test classes](https://github.com/dotnet/runtime/blob/fb36ccef4bab6bf69d890c30978daccdb62b5839/src/libraries/System.Text.Json/tests/Common/TestClasses/TestData.cs#L10) as a public `IEnumerable\u003cobject[]\u003e`.\r\n- Feed the `IEnumerable\u003cobject[]\u003e` as Xunit `[MemberData()]`, as [seen here](https://github.com/dotnet/runtime/blob/0c4ee9e749167a2185f59b4a16c8a5c62e0ec5df/src/libraries/System.Text.Json/tests/System.Text.Json.Tests/Serialization/SpanTests.cs#L18-L26).\r\n\r\n## Proposal\r\n\r\nIf a solution is found that replicates the Configuration Binder tests using this methodology, it will be much easier to test a large variety of types in an extensible way. The current test format ([example](https://github.com/dotnet/runtime/blob/9c916ea6d9d24e9311cbaf8298c2334480de2fca/src/libraries/Microsoft.Extensions.Configuration.Binder/tests/ConfigurationBinderTests.cs#L1080-L1102)) instantiates a `Dictionary\u003cstring, string\u003e` as a payload for the `ConfigurationBuilder`. There may be a way to rewrite this process when porting over the serializer test logic to minimize boilerplate for adding new types.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNick-Stanton\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-15T00:42:28Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Proposal: ConfigurationBinder Testing Refactor",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78592",
        "createdAt":  "2022-11-19T13:38:13Z",
        "number":  78592,
        "author":  "ohadschn",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4X62Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "redoz",
                                            "createdAt":  "2023-07-12T09:31:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Stroniax",
                                            "createdAt":  "2023-08-30T04:53:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thomasgalliker",
                                            "createdAt":  "2023-09-26T05:38:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gtbuchanan",
                                            "createdAt":  "2024-04-26T13:57:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CaringDev",
                                            "createdAt":  "2024-06-04T14:28:02Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2022-11-22T21:45:24Z",
        "body":  "Related issue: https://github.com/dotnet/dotnet-api-docs/issues/8658 (_Possible threading issues with non thread safe collections in Options classes_)\r\n\r\nConsider the following app settings and corresponding options class:\r\n\r\n```jsonc\r\n// app.settings\r\n{\r\n    \"MyStrings\": [\"a\", \"b\", \"c\"]\r\n}\r\n```\r\n\r\n```cs\r\npublic class MyOptions\r\n{\r\n    public ImmutableArray\u003cstring\u003e MyStrings { get; set; }\r\n   //or ImmutableHashSet\u003cstring\u003e, or ImmutableDictionary\u003cstring,string\u003e, etc.\r\n}\r\n```\r\n\r\nFollowing a `ConfigurationBinder.Bind` call, the immutable array above is not bound (its `IsDefault` is `true`).\r\nIndeed, this does not seem to be supported, where the closest thing I could find was read-only collection binding: https://github.com/dotnet/runtime/blob/0f3a88b479ddab4899954ba1c2cbdbceb5c23385/src/libraries/Microsoft.Extensions.Configuration.Binder/tests/ConfigurationCollectionBindingTests.cs#L1272\r\n\r\nHowever, even assuming the client does not cast away the immutability, it\u0027s not as good as Immutable without any guarantee on the generated underlying type. This is specifically problematic when considering thread safety (which a [readonly interface does not guarantee](https://web.archive.org/web/20150401000000*/http://blogs.msdn.com/b/ericlippert/archive/2011/05/23/read-only-and-threadsafe-are-different.aspx)). Plus these is no `ReadOnlySet\u003cT\u003e` AFAIK (https://github.com/dotnet/runtime/issues/29387).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTu7PaQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5OuyX3",
                                           "createdAt":  "2022-11-19T13:38:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-collections\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nConsider the following app settings and corresponding options class:\r\n\r\n```jsonc\r\n// app.settings\r\n{\r\n    \"MyStrings\": [\"a\", \"b\", \"c\"]\r\n}\r\n```\r\n\r\n```cs\r\npublic class MyOptions\r\n{\r\n    public ImmutableArray\u003cstring\u003e MyStrings { get; set; }\r\n   //or ImmutableHashSet\u003cstring\u003e, or ImmutableDictionary\u003cstring,string\u003e, etc.\r\n}\r\n```\r\n\r\nFollowing a `ConfigurationBinder.Bind` call, the immutable array above is not bound (its `IsDefault` is `true`).\r\nIndeed, this does not seem to be supported, where the closest thing I could find was read-only collection binding: https://github.com/dotnet/runtime/blob/0f3a88b479ddab4899954ba1c2cbdbceb5c23385/src/libraries/Microsoft.Extensions.Configuration.Binder/tests/ConfigurationCollectionBindingTests.cs#L1272\r\n\r\nHowever, even assuming the client does not cast away the immutability, it\u0027s not as good as Immutable without any guarantee on the generated underlying type. This is specifically problematic when considering thread safety (which a [readonly interface does not guarantee](https://web.archive.org/web/20150401000000*/http://blogs.msdn.com/b/ericlippert/archive/2011/05/23/read-only-and-threadsafe-are-different.aspx)). Plus these is no `ReadOnlySet\u003cT\u003e` AFAIK (https://github.com/dotnet/runtime/issues/29387).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eohadschn\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Collections`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-19T13:38:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O6ttJ",
                                           "createdAt":  "2022-11-22T17:24:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRelated issue: https://github.com/dotnet/dotnet-api-docs/issues/8658 (_Possible threading issues with non thread safe collections in Options classes_)\r\n\r\nConsider the following app settings and corresponding options class:\r\n\r\n```jsonc\r\n// app.settings\r\n{\r\n    \"MyStrings\": [\"a\", \"b\", \"c\"]\r\n}\r\n```\r\n\r\n```cs\r\npublic class MyOptions\r\n{\r\n    public ImmutableArray\u003cstring\u003e MyStrings { get; set; }\r\n   //or ImmutableHashSet\u003cstring\u003e, or ImmutableDictionary\u003cstring,string\u003e, etc.\r\n}\r\n```\r\n\r\nFollowing a `ConfigurationBinder.Bind` call, the immutable array above is not bound (its `IsDefault` is `true`).\r\nIndeed, this does not seem to be supported, where the closest thing I could find was read-only collection binding: https://github.com/dotnet/runtime/blob/0f3a88b479ddab4899954ba1c2cbdbceb5c23385/src/libraries/Microsoft.Extensions.Configuration.Binder/tests/ConfigurationCollectionBindingTests.cs#L1272\r\n\r\nHowever, even assuming the client does not cast away the immutability, it\u0027s not as good as Immutable without any guarantee on the generated underlying type. This is specifically problematic when considering thread safety (which a [readonly interface does not guarantee](https://web.archive.org/web/20150401000000*/http://blogs.msdn.com/b/ericlippert/archive/2011/05/23/read-only-and-threadsafe-are-different.aspx)). Plus these is no `ReadOnlySet\u003cT\u003e` AFAIK (https://github.com/dotnet/runtime/issues/29387).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eohadschn\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Collections`, `untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-22T17:24:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O7LeJ",
                                           "createdAt":  "2022-11-22T19:19:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "layomia",
                                           "body":  "Related to https://github.com/dotnet/runtime/issues/44493.\r\n\r\nThis seems like an enhancement request. @dotnet/area-extensions-configuration @davidfowl @ericerhardt it looks like a [plethora](https://github.com/dotnet/runtime/blob/c8503d39053f9e0d94716a23c406b66f126ca259/src/libraries/Microsoft.Extensions.Configuration.Binder/tests/ConfigurationCollectionBindingTests.cs) of collection types are supported for configuration binding. How do we determine what types to support? Do we want collection support in the .NET 8 version of the `ConfigurationBinder` source generator?",
                                           "updatedAt":  "2022-11-22T19:19:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O7s9p",
                                           "createdAt":  "2022-11-22T21:45:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ohads-MSFT",
                                           "body":  "\u003e How do we determine what types to support? \r\n\r\nIf I could offer my 2 cents, considering the nature of options classes in general and their ASP.NET usage specifically, I think the concurrent readonly scenario is extremely common. \r\n\r\nRecall that [options classes are cached](https://learn.microsoft.com/en-us/dotnet/core/extensions/options#options-interfaces) which means virtually all DI consumers would get the same options class instance (for example, each controller instance created for a request). This basically makes it a concurrent scenario automatically (where readonly is virtually assumed). \r\n\r\nWhile it is true that `IReadOnlyXXX` binding works and [serves this purpose](https://github.com/dotnet/dotnet-api-docs/issues/8658) the gold standard would be immutable collections for sure (for example see https://stackoverflow.com/questions/30165810/why-use-immutablelist-over-readonlycollection).\r\n\r\n",
                                           "updatedAt":  "2022-11-22T21:45:24Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Support immutable collections (System.Collections.Immutable) in options binding (ConfigurationBinder)",
        "labels":  [
                       "enhancement",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79193",
        "createdAt":  "2022-12-03T15:04:03Z",
        "number":  79193,
        "author":  "KieranDevvs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC68t2g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2022-12-05T23:21:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vake93",
                                            "createdAt":  "2022-12-06T09:46:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "artyom-p",
                                            "createdAt":  "2022-12-16T07:49:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cwatson-sidub",
                                            "createdAt":  "2022-12-19T20:47:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cfbao",
                                            "createdAt":  "2023-01-04T14:17:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "azhe403",
                                            "createdAt":  "2023-03-22T00:59:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Peter-Ivan",
                                            "createdAt":  "2023-03-29T09:27:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2023-04-04T18:48:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aayjaychan",
                                            "createdAt":  "2023-05-24T14:43:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "damjan-g",
                                            "createdAt":  "2023-07-05T10:31:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mblichowski",
                                            "createdAt":  "2023-08-09T12:41:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GimmeDaKitty",
                                            "createdAt":  "2023-09-16T09:10:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "siby-george",
                                            "createdAt":  "2023-10-16T21:30:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rabadash8820",
                                            "createdAt":  "2023-11-10T20:11:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "klemmchr",
                                            "createdAt":  "2023-11-10T22:50:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "somanysteves",
                                            "createdAt":  "2023-11-11T10:43:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Edgaras91",
                                            "createdAt":  "2023-11-14T15:56:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HofmeisterAn",
                                            "createdAt":  "2023-11-15T10:45:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "devindran",
                                            "createdAt":  "2023-11-22T09:16:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CSymes",
                                            "createdAt":  "2023-11-28T06:11:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DaveyWood",
                                            "createdAt":  "2023-11-28T17:58:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JeffMathewSyngenta",
                                            "createdAt":  "2023-12-05T17:14:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stevo-knievo",
                                            "createdAt":  "2023-12-06T18:40:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xin9le",
                                            "createdAt":  "2023-12-13T16:32:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bsdayo",
                                            "createdAt":  "2024-01-12T08:14:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fretje",
                                            "createdAt":  "2024-01-12T15:43:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wwalendz-relativity",
                                            "createdAt":  "2024-01-29T15:29:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gasia89",
                                            "createdAt":  "2024-01-31T16:31:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KuraiAndras",
                                            "createdAt":  "2024-02-08T14:35:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alienriver49",
                                            "createdAt":  "2024-02-13T19:05:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jimbojim1997",
                                            "createdAt":  "2024-02-15T14:19:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ulfkri",
                                            "createdAt":  "2024-03-09T12:34:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marcrocny",
                                            "createdAt":  "2024-03-11T05:04:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "clivingston2",
                                            "createdAt":  "2024-03-19T19:08:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "olitomlinson",
                                            "createdAt":  "2024-03-23T21:23:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ascott18",
                                            "createdAt":  "2024-03-25T18:37:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ggzik-copperleaf",
                                            "createdAt":  "2024-05-03T20:52:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SilverioMiranda",
                                            "createdAt":  "2024-05-12T02:20:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maxle5",
                                            "createdAt":  "2024-05-13T13:11:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tovyhnal",
                                            "createdAt":  "2024-05-14T08:56:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sparraguerra",
                                            "createdAt":  "2024-05-14T14:52:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mushroomator",
                                            "createdAt":  "2024-06-25T22:31:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kamilk",
                                            "createdAt":  "2024-06-26T14:51:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "juliankock",
                                            "createdAt":  "2024-07-25T05:26:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Devqon",
                                            "createdAt":  "2024-07-31T07:26:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mutuduxf",
                                            "createdAt":  "2024-08-14T09:40:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alienwareone",
                                            "createdAt":  "2024-08-21T17:07:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "brikibsw",
                                            "createdAt":  "2024-08-23T12:38:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "voroninp",
                                            "createdAt":  "2024-08-30T12:19:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fredppm",
                                            "createdAt":  "2024-09-11T21:54:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alwaqfi",
                                            "createdAt":  "2024-09-25T03:12:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SuricateCan",
                                            "createdAt":  "2024-09-26T18:08:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Gregro",
                                            "createdAt":  "2024-10-06T15:35:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Inx51",
                                            "createdAt":  "2024-10-22T21:49:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VitaliAntonov",
                                            "createdAt":  "2024-10-27T19:33:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KorsG",
                                            "createdAt":  "2024-11-12T07:42:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Bartleby2718",
                                            "createdAt":  "2024-11-14T10:37:19Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Bartleby2718",
                                            "createdAt":  "2024-11-14T10:37:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ulyssetsd",
                                            "createdAt":  "2024-11-29T14:20:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "antoniofreire",
                                            "createdAt":  "2025-01-03T19:11:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexaka1",
                                            "createdAt":  "2025-01-07T14:19:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tschettler",
                                            "createdAt":  "2025-01-17T18:59:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dkogithub",
                                            "createdAt":  "2025-01-21T08:23:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2025-01-21T13:34:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cmxl",
                                            "createdAt":  "2025-01-23T12:57:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MCKanpolat",
                                            "createdAt":  "2025-02-10T16:43:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "olejsc",
                                            "createdAt":  "2025-02-13T13:57:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "neistow",
                                            "createdAt":  "2025-02-14T13:44:56Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "neistow",
                                            "createdAt":  "2025-02-14T13:44:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "msiemens",
                                            "createdAt":  "2025-03-11T16:05:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "benlongo",
                                            "createdAt":  "2025-03-18T18:46:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pascal-pggm",
                                            "createdAt":  "2025-03-21T08:12:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GKEpam",
                                            "createdAt":  "2025-04-03T15:12:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aradalvand",
                                            "createdAt":  "2025-04-05T19:30:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Meir017",
                                            "createdAt":  "2025-04-06T20:27:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "felpel",
                                            "createdAt":  "2025-05-12T12:54:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "im-aIex",
                                            "createdAt":  "2025-06-11T15:26:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Hawxy",
                                            "createdAt":  "2025-09-03T06:27:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mope-life",
                                            "createdAt":  "2025-09-08T02:25:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Illivion",
                                            "createdAt":  "2025-09-12T08:45:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "romfir",
                                            "createdAt":  "2025-09-17T14:09:29Z"
                                        }
                                    ],
                          "totalCount":  81
                      },
        "updatedAt":  "2025-09-09T20:11:50Z",
        "body":  "### Background and motivation\n\nAs it currently stands, configuration sources have no way of being asynchronous (Highlighted in #36018).\nThese new set of types should allow for users to implement asynchronous configuration providers with no breaking changes to the way the existing API\u0027s function.\n\n### API Proposal\n\n```cs\nnamespace Microsoft.Extensions.Configuration;\n\npublic interface IAsyncConfigurationBuilder : IConfigurationBuilder\n{\n    Task\u003cIAsyncConfigurationBuilder\u003e AddAsync(IAsyncConfigurationSource source);\n    Task\u003cIAsyncConfigurationRoot\u003e BuildAsync();\n}\n\npublic interface IAsyncConfigurationManager : IConfigurationManager, IAsyncConfigurationBuilder\n{\n}\n\npublic interface IAsyncConfigurationProvider : IConfigurationProvider\n{\n    Task LoadAsync();\n}\n\npublic interface IAsyncConfigurationRoot : IConfigurationRoot\n{\n    Task ReloadAsync();\n}\n\npublic interface IAsyncConfigurationSource : IConfigurationSource\n{\n    Task\u003cIAsyncConfigurationProvider\u003e BuildAsync(IAsyncConfigurationBuilder builder);\n}\n\npublic static class IConfigurationManagerExtensions\n{\n    public static IAsyncConfigurationManager? AsAsyncManager(this IConfigurationManager configurationManager);\n}\n```\n\n```cs\nnamespace Microsoft.Extensions.Configuration;\n\npublic class AsyncConfigurationBuilder : ConfigurationBuilder, IAsyncConfigurationBuilder\n{\n    public Task\u003cIAsyncConfigurationBuilder\u003e AddAsync(IAsyncConfigurationSource source);\n    public Task\u003cIAsyncConfigurationRoot\u003e BuildAsync();\n}\n\npublic class AsyncConfigurationProvider : ConfigurationProvider, IAsyncConfigurationProvider\n{\n    public virtual Task LoadAsync();\n}\n\npublic class AsyncConfigurationRoot : IAsyncConfigurationRoot, IDisposable\n{\n    public AsyncConfigurationRoot(IList\u003cIConfigurationProvider\u003e providers);\n\n    public IEnumerable\u003cIConfigurationProvider\u003e Providers;\n    public string? this[string key];\n    public IEnumerable\u003cIConfigurationSection\u003e GetChildren();\n    public IChangeToken GetReloadToken();\n    public IConfigurationSection GetSection(string key);\n    public void Reload();\n    public Task ReloadAsync();\n    public void Dispose();\n}\n```\n\n```diff\nnamespace Microsoft.Extensions.Configuration;\n\n-public sealed class ConfigurationManager : IConfigurationManager, IConfigurationRoot, IDisposable\n+public sealed class ConfigurationManager : IAsyncConfigurationManager, IAsyncConfigurationRoot, IDisposable\n{\n+    Task\u003cIAsyncConfigurationBuilder\u003e IAsyncConfigurationBuilder.AddAsync(IAsyncConfigurationSource source);\n+    Task\u003cIAsyncConfigurationRoot\u003e IAsyncConfigurationBuilder.BuildAsync();\n}\n```\n\n### API Usage\n\n**Using `AsyncConfigurationBuilder`:**\nCalling `builder.Build();` will only load synchronous sources.\nCalling `builder.BuildAsync()` will load both sync \u0026 async sources.\n```csharp\ninternal class Program\n{\n    static async Task Main(string[] args)\n    {\n        var builder = new AsyncConfigurationBuilder();\n        builder.Add(new MyConfigurationSource());\n        await builder.AddAsync(new MyAsyncConfigurationSource());\n        var configuration = await builder.BuildAsync();\n    }\n}\n\n\npublic class MyConfigurationSource : IConfigurationSource\n{\n    public IConfigurationProvider Build(IConfigurationBuilder builder)\n    {\n        return new MyConfigurationProvider();\n    }\n}\n\npublic class MyConfigurationProvider : ConfigurationProvider\n{\n    public override void Load()\n    {\n        Data[\"Key\"] = \"Value\";\n    }\n}\n\npublic class MyAsyncConfigurationSource : IAsyncConfigurationSource\n{\n    public IConfigurationProvider Build(IConfigurationBuilder builder)\n    {\n        throw new NotImplementedException();\n    }\n\n    public async Task\u003cIAsyncConfigurationProvider\u003e BuildAsync(IAsyncConfigurationBuilder builder)\n    {\n        await Task.Delay(200); //Simulate some IO work.\n        return new MyAsyncConfigurationProvider();\n    }\n}\n\npublic class MyAsyncConfigurationProvider : AsyncConfigurationProvider\n{\n    public override async Task LoadAsync()\n    {\n        await Task.Delay(1000); //Simulate some IO work.\n        Data[\"Key\"] = \"Value\";\n    }\n}\n```\n\n**Using one of the generic host API\u0027s:**\n```csharp\ninternal class Program\n{\n    static async Task Main(string[] args)\n    {\n        HostApplicationBuilder hostBuilder = Host.CreateApplicationBuilder(args);\n        hostBuilder.Configuration.Add(new MyConfigurationSource());\n\n        var asyncConfigManager = hostBuilder.Configuration.AsAsyncManager();\n        if (asyncConfigManager is not null)\n        {\n            await asyncConfigManager.AddAsync(new MyAsyncConfigurationSource());\n        }\n\n        var host = hostBuilder.Build();\n        host.Run();\n    }\n}\n\n\npublic class MyConfigurationSource : IConfigurationSource\n{\n    public IConfigurationProvider Build(IConfigurationBuilder builder)\n    {\n        return new MyConfigurationProvider();\n    }\n}\n\npublic class MyConfigurationProvider : ConfigurationProvider\n{\n    public override void Load()\n    {\n        Data[\"Key\"] = \"Value\";\n    }\n}\n\npublic class MyAsyncConfigurationSource : IAsyncConfigurationSource\n{\n    public IConfigurationProvider Build(IConfigurationBuilder builder)\n    {\n        throw new NotImplementedException();\n    }\n\n    public async Task\u003cIAsyncConfigurationProvider\u003e BuildAsync(IAsyncConfigurationBuilder builder)\n    {\n        await Task.Delay(200); //Simulate some IO work.\n        return new MyAsyncConfigurationProvider();\n    }\n}\n\npublic class MyAsyncConfigurationProvider : AsyncConfigurationProvider\n{\n    public override async Task LoadAsync()\n    {\n        await Task.Delay(1000); //Simulate some IO work.\n        Data[\"Key\"] = \"Value\";\n    }\n}\n```\n\n\n### Alternative Designs\nNone.\n\n\n \n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp1J_mg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5PpHSZ",
                                           "createdAt":  "2022-12-03T15:04:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nAs it currently stands, configuration sources have no way of being asynchronous (Highlighted in #36018).\r\nThese new set of types should allow for users to implement asynchronous configuration providers without any breaking changes to the way the existing API\u0027s function.\n\n### API Proposal\n\n```diff\r\nnamespace Microsoft.Extensions.Configuration;\r\n\r\npublic partial class ConfigurationBuilder : IConfigurationBuilder\r\n{\r\n+    public IConfigurationBuilder Add(IAsyncConfigurationSource source);\r\n}\r\n```\r\n\r\n```cs\r\nnamespace Microsoft.Extensions.Configuration;\r\n\r\npublic interface IAsyncConfigurationSource\r\n{\r\n    IAsyncConfigurationProvider Build(IConfigurationBuilder builder);\r\n}\r\n```\r\n\r\n```cs\r\nnamespace Microsoft.Extensions.Configuration;\r\n\r\npublic interface IAsyncConfigurationProvider\r\n{\r\n    bool TryGet(string key, out string? value);\r\n    void Set(string key, string? value);\r\n    IChangeToken GetReloadToken();\r\n    Task LoadAsync();\r\n    IEnumerable\u003cstring\u003e GetChildKeys(IEnumerable\u003cstring\u003e earlierKeys, string? parentPath);\r\n}\r\n```\r\n\r\n```cs\r\nnamespace Microsoft.Extensions.Configuration;\r\n\r\npublic abstract class AsyncConfigurationProvider : IAsyncConfigurationProvider\r\n{\r\n    protected IDictionary\u003cstring, string?\u003e Data { get; set; }\r\n    public virtual bool TryGet(string key, out string? value);\r\n    public virtual void Set(string key, string? value);\r\n    public virtual Task LoadAsync();\r\n    public virtual IEnumerable\u003cstring\u003e GetChildKeys(IEnumerable\u003cstring\u003e earlierKeys, string? parentPath);\r\n    public IChangeToken GetReloadToken();\r\n    protected void OnReload()\r\n}\r\n```\n\n### API Usage\n\n```csharp\r\ninternal class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var builder = new ConfigurationBuilder();\r\n        builder.Add(new DatabaseConfigurationSource());\r\n    }\r\n}\r\n\r\npublic class DatabaseConfigurationSource : IAsyncConfigurationSource\r\n{\r\n    public IAsyncConfigurationProvider Build(IConfigurationBuilder builder)\r\n    {\r\n        return new DatabaseConfigurationProvider ();\r\n    }\r\n}\r\n\r\npublic class DatabaseConfigurationProvider : AsyncConfigurationProvider\r\n{\r\n    public override async Task LoadAync()\r\n    {\r\n        Data = await ...\r\n    }\r\n}\r\n```\r\n\n\n### Alternative Designs\n\nIt might be possible to add an async method into the existing type but I\u0027m not sure how the implementation would know to use the asynchronous call.\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.Configuration\r\n\r\npublic abstract partial class ConfigurationProvider : IConfigurationProvider\r\n{\r\n+    public virtual Task LoadAsync();\r\n}\r\n```\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eKieranDevvs\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-03T15:04:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PpKyO",
                                           "createdAt":  "2022-12-03T16:20:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "The alternative design looks better but did you also look at all of the consumers of the Load method to understand what else would need to be changed to async to make this work in practice? What about the generic hosting APIs?",
                                           "updatedAt":  "2022-12-03T16:21:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RDoDd",
                                           "createdAt":  "2022-12-20T17:52:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODaD2Cg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "marcrocny",
                                                                               "createdAt":  "2024-03-11T05:17:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "The current model is fundamentally incompatible with that @jackbond and if we do that then we should make a different type. The current configuration assumes you can access all of the keys in memory. What you\u0027re asking for is asynchronous access to individual keys. If we go that route then we should build a new API that doesn\u0027t overlap with the existing configuration provider.\r\n",
                                           "updatedAt":  "2022-12-20T17:53:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RInIe",
                                           "createdAt":  "2022-12-21T11:44:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KieranDevvs",
                                           "body":  "\u003e The alternative design looks better but did you also look at all of the consumers of the Load method to understand what else would need to be changed to async to make this work in practice? What about the generic hosting APIs?\r\n\r\nOk thanks for the feedback, I\u0027m on xmas holiday at the moment, ill revisit this in the new year.",
                                           "updatedAt":  "2022-12-21T11:44:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RUeiZ",
                                           "createdAt":  "2022-12-23T20:39:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I don’t understand why you need asynchronous access to individual values and how did you get all of the keys in memory. IMO that’s another interface and a different API completely. \r\n\r\n",
                                           "updatedAt":  "2022-12-23T23:56:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RVVR3",
                                           "createdAt":  "2022-12-24T15:38:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Right, and I don\u0027t have a problem with having a new abstraction for stores like keyvault and azure app configuration. Seems very much like https://github.com/dotnet/runtime/issues/36035.\r\n\r\nIf that\u0027s the goal of asynchrony, then I would opt for not polluting the existing API and designing a new one.\r\n",
                                           "updatedAt":  "2022-12-24T15:38:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RVWkO",
                                           "createdAt":  "2022-12-24T16:23:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVy5bg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PatTheHyruler",
                                                                               "createdAt":  "2025-06-07T19:16:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e  For example, even reading a local json config file should be an async operation, it\u0027s doing async IO after all.\r\n\r\nLoading everything up front (async or sync) is fine, and why the original API proposal (though I would change the existing interfaces and classes instead of making new ones) is easier to reason about with the existing configuration model.  \r\n\r\nAnything that requires asynchronous access to values should be a different abstraction. So maybe this `IAsyncConfigurationProvider` proposal should be about accessing values asynchronously. Instead of loading all keys up front somehow (Do most of those systems have a cheap way to query all keys? Do we even want that?).\r\n\r\nI think these providers would be inappropriate for things like configuration binding, which want to know all of the keys (in the entire object hierarchy) before binding. This API would be used directly in the places that need access to individual values at the moment they are queried, without caching from the source.",
                                           "updatedAt":  "2022-12-24T16:23:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RVa5L",
                                           "createdAt":  "2022-12-24T18:36:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e Well I can\u0027t speak for all providers, but Azure.Data.AppConfiguration.ConfigurationClient has a method GetConfigurationSettingsAsync which allows you to read all the keys. It also loads all the values, but some of those values are merely links to the underlying KeyVault. We delay load those, and use .Result (which always bother me) in TryGet.\r\n\r\nRight, to make general abstractions, we need to make sure the pattern holds broadly. I\u0027m making an assumption that enumerating keys without values isn\u0027t common, but if we can find places where it is, then those assumptions can change.",
                                           "updatedAt":  "2022-12-24T18:36:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RVcdz",
                                           "createdAt":  "2022-12-24T19:40:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e But at the same time, I do miss the old Microsoft days when the attitude was, \"If you don\u0027t support our pattern, it\u0027s your problem\" :)\r\n\r\nThat\u0027s ironic because the reason the azure configuration provider and keyvault provider is not ideal today is because the existing abstraction doesn\u0027t work well with the existing model😄 ",
                                           "updatedAt":  "2022-12-24T19:40:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RVeos",
                                           "createdAt":  "2022-12-24T21:20:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e 😄 True enough, although this feels more like an inhouse dispute, where IConfiguration simply hasn\u0027t received the modernization attention it deserves.\r\n\r\nAs one of the creators of this abstraction, that\u0027s not the case. \r\n\r\n\u003e For example, how is the FileInfo class setting its Exists property without sneaking in an async operation?\r\n\r\nFileProviders was never really meant to exist outside of the ASP.NET Core use case of being a readonly file system for web applications. I don\u0027t think it has any of the appropriate features for a general purpose file system abstraction (as much as people want it to be).\r\n\r\n\u003e  ServiceCollection should support BuildServiceProviderAsync\r\n\r\nThis doesn\u0027t make any sense to me and would make everything less efficient.\r\n\r\n\u003e  It\u0027s hard to do async all the way down when some libraries stop you dead in your tracks.\r\n\r\nAgreed. It\u0027s a pain, but everything shouldn\u0027t be async or we can just throw performance out the window.",
                                           "updatedAt":  "2022-12-24T21:21:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RVfzH",
                                           "createdAt":  "2022-12-24T22:14:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e To be clear, not saying it hasn\u0027t been maintained, just not \"asyncified\".\r\n\r\nWe\u0027re reluctant to do it without deeply understanding the usage. That\u0027s where you (customers) come in! \r\n\r\n\u003e In regards to the FileInfo class, I\u0027m not talking anything ASP.NET specific. System.IO.FileInfo.Exists could be potentially more than 50ms (is that still the guidance), I\u0027d argue that it should have been Obsoleted and replaced with ExistsAsync a while back.\r\n\r\nI don\u0027t agree. Unless we\u0027re talking about mapped network storage (cloud or not), file access is usually fast and cached at the layer. Deprecating Exists doesn\u0027t make sense IMO.\r\n\r\n\u003e BuildServiceProvider is not something that you\u0027re running repeatedly in a tight loop (so less concerned about performance), but it is something that more than likely has async operations under the hood. For example, reading a connection string async, and passing that to a service like a db provider (which may actually like to initialize / warm up asynchronously.)\r\n\r\nBuild doesn\u0027t do anything async, [resolution can though](https://github.com/dotnet/runtime/issues/65656).\r\n\r\n\u003e Unless the guidance has changed, async all the way is still the official line, and being forced to use .Result due to an external API doesn\u0027t change that, it just introduces the potential for a deadlock.\r\n\r\nRight and everything shouldn\u0027t be async. The good news is though, making something async that was previously sync should force people to rethink all of the call sites and better understand why async is needed. The fact that it is viral is significant, and if it ends up being expensive (for example configuration binding), then we should re-think the interface and consumption.\r\n\r\n\u003e As a side note, I\u0027d like to thank you for all the work you do, and for taking time out to participate in discussions like this.\r\n\r\nThanks 🙏🏾 ",
                                           "updatedAt":  "2022-12-24T22:14:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rp_If",
                                           "createdAt":  "2023-01-03T16:19:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KieranDevvs",
                                           "body":  "\u003e The current model is fundamentally incompatible with that @jackbond and if we do that then we should make a different type. The current configuration assumes you can access all of the keys in memory. What you\u0027re asking for is asynchronous access to individual keys. If we go that route then we should build a new API that doesn\u0027t overlap with the existing configuration provider.\r\n\r\nI agree with this, if you\u0027re loading the values at the time of request i.e lazy loading, then that should be a new API, or even left to the user to implement as I cant think of many other scenarios where you would also want that behavior?\r\n\r\n\u003e The alternative design looks better but did you also look at all of the consumers of the Load method to understand what else would need to be changed to async to make this work in practice? What about the generic hosting APIs?\r\n\r\nThe only consumer of `Load` as far as I can see, is the `Build` call at the time of building the `IConfigurationRoot`. As for your comment on generic hosting API\u0027s, those API\u0027s as well as anything else that would want to leverage async configuration sources, would need to implement the feature. The approach I\u0027m proposing is such that it would be opt-in and wouldn\u0027t change any existing behavior.",
                                           "updatedAt":  "2023-01-03T16:19:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Wu6QM",
                                           "createdAt":  "2023-03-05T16:25:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jjxtra",
                                           "body":  "Agreed that an async interface and class should be made separately and would be used by a minority of people, but still necessary for those people.",
                                           "updatedAt":  "2023-03-05T16:25:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kdcUd",
                                           "createdAt":  "2023-08-21T00:19:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rabadash8820",
                                           "body":  "Just adding a +1 here. I don\u0027t have strong feelings on whether there\u0027s a new interface or an addition to the existing `IConfigurationBuilder` interface, but some sort of async support is essential for scenarios with custom threading models. For example, I am trying to implement a [configuration provider for Unity RemoteConfig](https://github.com/DerploidEntertainment/UnityUtil/tree/main/src/UnityUtil.Configuration.RemoteConfig). RemoteConfig exposes both a synchronous `FetchConfigs` and an asynchronous `FetchConfigsAsync` method, but I can\u0027t use either:\r\n\r\n- `Wait`ing the `Task` returned by `RemoteConfigService.FetchConfigsAsync` fails as this would lead to a deadlock with the Unity main thread that calls `IConfigurationBuilder.Build()` (as the `UnitySynchronizationContext` essentially queues tasks on that thread, rather than using the thread pool)\r\n- `FetchConfigs` does not synchronously return settings, but invokes a `FetchCompleted` event to which calling code can subscribe, and this callback runs at an indeterminate time. My `IConfigurationSource` implementation could accept a callback and add _that_ as a listener to `FetchCompleted`, but that breaks the encapsulation/contract of configuration sources. Consumers could also wait for a short time after after building configuration to ensure that `FetchCompleted` has been triggered, but the amount of time would be arbitrary--either too short or longer than necessary.\r\n\r\nI\u0027ve [raised the latter concern](https://forum.unity.com/threads/fetchconfigs-synchronously-without-callback-to-support-ms-extensions-configuration.1481922/) on the Unity Forum, but an asynchronous version of `IConfigurationBuilder.Load` would also solve these issues, allowing calling code to `await` and play nicely with the `UnitySynchronizationContext`.",
                                           "updatedAt":  "2023-08-21T00:19:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rrYWJ",
                                           "createdAt":  "2023-11-10T22:51:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "klemmchr",
                                           "body":  "What\u0027s the status on this? Most configuration providers are asynchronous under the hood so this is desperately needed.",
                                           "updatedAt":  "2023-11-10T22:51:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rraxW",
                                           "createdAt":  "2023-11-10T23:05:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KieranDevvs",
                                           "body":  "\u003e What\u0027s the status on this? Most configuration providers are asynchronous under the hood so this is desperately needed.\r\n\r\nYou can see the status. You can always contribute to help push this along. A proof of concept would be a good start, I just don\u0027t have the time to invest right now.",
                                           "updatedAt":  "2023-11-10T23:10:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bMUWf",
                                           "createdAt":  "2025-01-21T05:35:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEDZ_fQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rabadash8820",
                                                                               "createdAt":  "2025-01-21T05:54:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dkogithub",
                                                                               "createdAt":  "2025-01-21T08:23:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2025-01-21T13:36:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "robertmclaws",
                                           "body":  "@davidfowl Would be amazing if this could get into .NET 10...",
                                           "updatedAt":  "2025-01-21T05:35:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bhSzM",
                                           "createdAt":  "2025-01-23T08:51:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dazinator",
                                           "body":  "I [worked around [this](https://github.com/dotnet/runtime/issues/36018#issuecomment-1605339449) by calling an InitialiseAsync() on my provider to async prefetch the configuration values, ahead of adding it and calling ConfigurationBuilder.Build() which it can then return the perfetched configuration synchronously.\n\nHowever this doesn\u0027t solve the issue of `Reload` and change tokens not being asynchronous.\nWhen a configuration provider is signalled to reload that currently is also a synchronous operation. I had to get creative and implement an Async version of a change token to solve this issue. \n\n\n@davidfowl I think this is more about the conflict of\n1. We are often told that network bound io calls should be asynchronous, many libraries provide asynchronous methods to make those calls.\n2. Configuration often has to be fetched from network initially.\n3. The HostBuilder and configuration builder experience doesn\u0027t provide any obvious location for performing this async configuration fetching, either during the initial build, or a config reload. I just create my provider and call InitialiseAsync() in program main before adding it to the builder, but this is \"non standard\".\n4. Change tokens signal config reloads. There is a seperate item somewhere about async change tokens, I think this might help.\n5. Is it OK to fetch config synchronously instead - probably yes, keeping hold of extra cycles for a smallish network call once at application startup or a few times during config reloads are runtime is most likely not a big issue. However its cognitively irksome to make network calls using synchronous api\u0027s and feels \"wrong\". Its also not a problem to do this asynchronously either in terms of \"performance\" that should not be the issue here.\n\n",
                                           "updatedAt":  "2025-01-23T08:54:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6biVz8",
                                           "createdAt":  "2025-01-23T10:43:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "klemmchr",
                                           "body":  "To add another use case where we were facing issues:\n\nWe have a custom configuration provider in Blazor that makes an api call to get the current configuration for the web app. We are forced to do this since we\u0027re having different configurations per environment and do not want to rebuild our whole application when changing these or when rolling out our application.\nWhen using Blazor WASM you cannot use blocking calls because it is running single threaded. Any attempt to use blocking calls (like `GetAwaiter().GetResult()` will yield a `PlatformNotSupportedException` (https://github.com/dotnet/aspnetcore/issues/57429).\n\nOur current approach matches the one from @dazinator: we create the provider beforehand, load the config in the main entry point (where we can use async) and then add it to the configuration builder. While this approach works fine, it has some drawbacks:\n\n1. It\u0027s clunky. We\u0027re bypassing all logic that the configuration provider has for loading configuration and we need to have quite some initialization code in our application just to support that use case.\n2. We cannot use config reloading at all. That\u0027s not the worse thing you could have but it would be great if we could reload our configuration from time to time to ensure that feature flags are up-to-date. \n\nBesides this technical issues, this also feels weird for other reasons:\n\n1. We were told to use async everywhere. From simple file operations to network operations, everything is async these days. It feels counter intuitive to work around this just because the config provider does not support it.\n2. A lot of config providers actually need this. Even simple providers like file config providers should prefer async file APIs. Besides that, there are dozens of config providers that actually make network request that surely should not block a thread while doing this (https://github.com/Azure/AppConfiguration to name one)\n\nHaving support for an async provider should be optional, not mandatory. I don\u0027t think that introducing a breaking change in the `IConfigurationProvider` interface would be a good move, therefore I would go with a new interface `IAsyncConfigurationProvider` that could optionally inherit from `IConfigurationProvider`. Having a breaking change in the host builder would affect a lot of things already so I don\u0027t think breaking all existing configuration providers would be beneficial.\n",
                                           "updatedAt":  "2025-01-23T10:43:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lw6W9",
                                           "createdAt":  "2025-04-05T19:54:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENE7zg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rabadash8820",
                                                                               "createdAt":  "2025-04-05T20:33:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dmillerkeyfive",
                                                                               "createdAt":  "2025-04-06T13:03:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "aradalvand",
                                           "body":  "No `CancellationToken` in this proposal?\nWhy not?",
                                           "updatedAt":  "2025-04-06T13:05:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lzFD3",
                                           "createdAt":  "2025-04-06T20:14:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENGBKw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Meir017",
                                                                               "createdAt":  "2025-04-06T20:25:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-04-06T20:48:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "KieranDevvs",
                                           "body":  "\u003e No `CancellationToken` in this proposal? Why not?\n\nIt should, it was an oversight on my part. I\u0027ve updated the proposal.",
                                           "updatedAt":  "2025-04-06T20:14:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lzJ5y",
                                           "createdAt":  "2025-04-06T20:46:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENGBNA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-04-06T20:48:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KieranDevvs",
                                           "body":  "I\u0027ve decided to revisit this and attempt a proof of concept but I\u0027m struggling to come up with an API surface that doesn\u0027t have breaking changes and that isnt awful.\n\nCurrently, `ConfigurationRoot` \u0027s constructor is the place where the `IConfiguirationProvider.Load()` is called which means further surface area would need to be changed as constructors cannot be asynchronous. An aditional method would need to be added to the `ConfigurationRoot` for it to be able to load data from both both sync and async providers.\n\nWhat is the likelihood that we can have breaking changes in order to properly provide async support? I\u0027m assuming its a near zero chance as this API is widely used?",
                                           "updatedAt":  "2025-04-06T20:46:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lzMmj",
                                           "createdAt":  "2025-04-06T20:55:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENGDYQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "Rabadash8820",
                                                                               "createdAt":  "2025-04-06T21:03:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "0 chance of making a breaking change here. It needs to be additive ",
                                           "updatedAt":  "2025-04-06T20:55:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lzXKi",
                                           "createdAt":  "2025-04-06T22:33:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENKQEg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KieranDevvs",
                                                                               "createdAt":  "2025-04-06T23:03:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-04-07T11:11:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "klemmchr",
                                           "body":  "The only way to make this non-breaking is to synchronously await Tasks in the old implementation which is a big pain point. On the other hand, this is exactly how providers do it right now if they have async operations.  \nTherefore the new provider interface should be an extension of the current one and providers should implement both.\n\nJust keep in mind that this will cause issues on single threaded runtimes like Blazor so the host in these environments should always use the async method.\n\nRegarding the CancellationToken: I don\u0027t see any benefit of adding them since I can\u0027t imagine a scenario where loading a configuration would be cancelled. If two config reloads are triggered at the same time the reload mechanism should rather just ignore the second one than canceling the first (so basically a stampede protection).",
                                           "updatedAt":  "2025-04-06T22:36:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lzZgm",
                                           "createdAt":  "2025-04-06T23:01:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KieranDevvs",
                                           "body":  "So, I got a proof of concept working which would let users opt into adding async sources and building them into a configuration via `BuildAsync()`. This would work ***reasonably*** well for users who are using `ConfigurationBuilder` directly and creating their own configuration, and would not change any behaviour in the existing APIs.\n\nHowever... I would assume 80% of configurations that are built, come from one of the generic hosting API\u0027s that use `IConfigurationManager`. Unfortunately, the `IConfigurationManager` is implemented in a way where it is both a configuration root and its own builder. This wouldn\u0027t be an issue by itself, but rather than relying upon the implemented `IConfigurationBuilder.Build()` method to be called in order to build itself, it loads the providers upon adding them to the config (in a non-async call) (I assume this was hacked in, in order to allow for the configuration to be used while still configuring the host.). This essentially means that adding async support to this API would only be useful to (what I assume is) a small number of people who are using `ConfigurationBuilder` directly.\n\nAt this point, I don\u0027t think this is worth adding if only a subset of people are going to benefit from it, and the configuration API would have different capabilities depending on how you use it which would just be confusing:\n\n| API  | Async Support |\n| ------------- | ------------- |\n| ConfigurationBuilder.Build()  | No  |\n| ConfigurationBuilder.BuildAsync() //Proposed new API | Yes  |\n| WebApplicationBuilder.Build()  | No  |\n| HostApplicationBuilder.Build()  | No  |\n| DistributedApplicationBuilder.Build()  | No  |\n\n@davidfowl I see what you meant in your original comment now\n\u003e did you also look at all of the consumers of the Load method to understand what else would need to be changed to async to make this work in practice? What about the generic hosting APIs?\n",
                                           "updatedAt":  "2025-04-06T23:09:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lzgl0",
                                           "createdAt":  "2025-04-07T00:08:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "klemmchr",
                                           "body":  "Looks like the classical \"this should have been async from the beginning but now the ship has sailed\" scenario. That\u0027s a pity.",
                                           "updatedAt":  "2025-04-07T00:08:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6l4JBO",
                                           "createdAt":  "2025-04-07T11:11:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENLaLg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rabadash8820",
                                                                               "createdAt":  "2025-04-07T12:30:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tuscen",
                                                                               "createdAt":  "2025-04-07T13:30:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "aradalvand",
                                           "body":  "\u003e Regarding the CancellationToken: I don\u0027t see any benefit of adding them since I can\u0027t imagine a scenario where loading a configuration would be cancelled.\n\nIt should be canceled when a stopping signal is received by the application (e.g. the process is shut down) — a la `stoppingToken` in `BackgroundService.ExecuteAsync`.",
                                           "updatedAt":  "2025-04-07T11:12:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6l7-NC",
                                           "createdAt":  "2025-04-07T16:38:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rabadash8820",
                                           "body":  "Thanks for attempting a PoC @KieranDevvs!\n\nA couple thoughts:\n\n\u003e It should be canceled when a stopping signal is received by the application (e.g. the process is shut down) — a la `stoppingToken` in `BackgroundService.ExecuteAsync`.\n\n@aradalvand Agreed. Especially since we\u0027re talking about this new API being used mostly outside of host builders, where the `BuildAsync()` call would be explicit.\n\n\u003e At this point, I don\u0027t think this is worth adding if only a subset of people are going to benefit from it, and the configuration API would have different capabilities depending on how you use it which would just be confusing:\n\n@KieranDevvs I cannot speak to the number of developers using `IConfigurationBuilder` outside of hosts either, but I can definitely think of some example use cases:\n- Adding configuration to legacy apps that aren\u0027t using a host builder\n- Using the `IConfigurationBuilders` purely for file parsing (we are currently doing this at my job to parse INI files!)\n- Adding configuration to Unity projects, as I [described above](https://github.com/dotnet/runtime/issues/79193#issuecomment-1685439773). Again, I can\u0027t speak to how many developers are actually doing this in Unity, but I know I am. 🤷‍♂ Unity is probably one of the larger use cases for MsEx libraries where a host builder is unavailable (along with code in other game engines like Godot).\n- Potentially Xamarin projects also? I know they used to be built with Mono, like Unity, but idk if modern Xamarin projects have a `MobileApplicationBuilder` or similar. Even if they do, my legacy app argument applies here as well. 👌",
                                           "updatedAt":  "2025-04-07T16:48:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6l85fT",
                                           "createdAt":  "2025-04-07T18:26:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENu41A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rabadash8820",
                                                                               "createdAt":  "2025-04-07T18:29:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-04-08T12:58:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cmxl",
                                                                               "createdAt":  "2025-04-10T16:53:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "robertmclaws",
                                           "body":  "Gonna throw this out there: in .NET 10 would it be possible to \n\n- create the future for this API with the new Async pattern,\n- have an Sync-over-Async method that triggers any existing sync registrations for compatibility (which could potentially be called automatically in the Async paths),\n- and puts the old codepaths on a path to deprecation?\n\nSince loading configuration almost always involves file / network IO and this should have been Async from the start (but it likely wasn\u0027t because Program.Main was only made async recently and this pattern is much older), it should be possible to transition the ecosystem to a new world where the entire HostBuilder codepath has Async sypport.",
                                           "updatedAt":  "2025-04-07T18:26:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6l95ed",
                                           "createdAt":  "2025-04-07T19:49:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENYAAA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-04-08T12:58:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KieranDevvs",
                                                                               "createdAt":  "2025-04-08T17:01:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "klemmchr",
                                           "body":  "This would still be a breaking change at some point later on. I\u0027m pretty sure this is also covered by the guideline \"no breaking change\". ",
                                           "updatedAt":  "2025-04-07T19:49:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mjtG8",
                                           "createdAt":  "2025-04-10T16:07:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENvGaw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Rabadash8820",
                                                                               "createdAt":  "2025-04-10T17:10:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dazinator",
                                           "body":  "How about this path\n\n1. Introduce a new `AsyncConfigurationBuilder` alternative to the current subsystem. It can still implement the same [IConfigurationBuilder](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.iconfigurationbuilder?view=net-9.0-pp) interface, but it could also be extended with the necessary async method variants.\n2. A path where users can explicitly use the async variant instead of the sync one, with the host.\n3. The host detects if the async one is in use, and uses its async methods rather than the sync methods.\n\nThe goal here is to think of a way to allow an async alternative builder / provider to be defined and swapped into use for those who need it.\n\n\nThe async builder, could work with a new (extended?) async provider definition. \n\n\n",
                                           "updatedAt":  "2025-04-10T16:07:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mxEg_",
                                           "createdAt":  "2025-04-11T19:44:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KieranDevvs",
                                           "body":  "\u003e How about this path\n\u003e \n\u003e 1. Introduce a new `AsyncConfigurationBuilder` alternative to the current subsystem. It can still implement the same [IConfigurationBuilder](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.iconfigurationbuilder?view=net-9.0-pp) interface, but it could also be extended with the necessary async method variants.\n\u003e 2. A path where users can explicitly use the async variant instead of the sync one, with the host.\n\u003e 3. The host detects if the async one is in use, and uses its async methods rather than the sync methods.\n\u003e \n\u003e The goal here is to think of a way to allow an async alternative builder / provider to be defined and swapped into use for those who need it.\n\u003e \n\u003e The async builder, could work with a new (extended?) async provider definition.\n\nThe issue is point 3.\nWe need to add `Task` based methods to the `IConfigurationManager` but doing so would be a breaking change.\nSo the only available option is to create a superseding interface that implements `IConfigurationManager` and adds the async based methods. Lets call this interface `IAsyncConfigurationManager`.\nWe now want to be able to use this in the generic host APIs. If we take a look at `IHostApplicationBuilder` we can see that it defines the configuration via a property of the type `IConfigurationManager`. We cant change or add to this interface as it would also be a breaking change.\n\nTLDR;\n1) Cant change or add to: `IConfigurationManager`, can only inherit and extend.\n2) Generic host API\u0027s such as `IHostApplicationBuilder` expose their configuration building via `IConfigurationManager`.\n3) The generic host APIs cant be changed or added to, can only inherit and extend.\n4) inheriting and extending it would mean carbon copies of all 3 API\u0027s just to allow async configuration. I don\u0027t think that is a good user experience.",
                                           "updatedAt":  "2025-04-11T19:53:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mzbdC",
                                           "createdAt":  "2025-04-12T05:26:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEN6tNw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KieranDevvs",
                                                                               "createdAt":  "2025-04-12T06:26:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "robertmclaws",
                                           "body":  "Sounds like we just need to introduce an AsyncHost and start over all the way down the Host stack.\n\nWhich is probably a good idea, because it\u0027s really dumb that HostBuilder and WebHostBuilder don\u0027t implement the same interface.",
                                           "updatedAt":  "2025-04-12T05:26:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6m0SIa",
                                           "createdAt":  "2025-04-12T07:58:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "WebHostBuilder is not getting updates, WebApplicationBuilder is what we’ve been evolving, similarly Host.CreateApplicationBuilder (those implement the same interface )",
                                           "updatedAt":  "2025-04-12T07:59:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6m1S0o",
                                           "createdAt":  "2025-04-12T19:22:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KieranDevvs",
                                           "body":  "Id like feedback on this idea:\n\nWe move ahead with `IAsyncConfigurationBuilder` and the other async interface types for the direct usage of configuration builder and the ability to register, and asynchronously load providers.\n\nWe also leave the generic host API\u0027s as they are (exposing `IConfigurationBuilder`).\n\n**Use case 1 - Using ConfigurationBuilder directly:**\nUsers now instanciate AsyncConfigurationBuilder and load their synchronous and asynchronous providers as expected and build returns an `IAsyncConfigurationRoot` (an extension of `ConfigurationRoot` with the ability to asyncronously reload the data soruces).\n\n**Use case 2 - Using one of the generic host API\u0027s:**\nUsers instanciate the relevant host builder.\nThey can either call `.Configuration.Add(...)` to add their synchronous provider types, or they can cast the host configuration manager to `IAsyncConfigurationManager` to access the relevant async API\u0027s\n\nThis is what I have in my current PoC:\n\n![Image](https://github.com/user-attachments/assets/b733032c-1dc1-42a0-ad4a-481e3fb59570)\n\nGranted, I\u0027m fully aware that casting the `ConfigurationManager` isnt discoverable, expected or a nice user experience, but it does solve all of the breaking change issues without having to provide a set of new generic host API\u0027s.\nI\u0027m hoping that seeing as its more of an advanced use case, that if its documented well, it will be sufficient?",
                                           "updatedAt":  "2025-04-12T20:04:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6m1Zp4",
                                           "createdAt":  "2025-04-12T19:49:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rabadash8820",
                                           "body":  "Some thoughts/questions:\n\n1. Instead of casting `ApplicationHistBuilder.Cinfiguration`, could we add an `IAsyncConfigurationBuilder AsyncConfiguration` property? The two properties could even point to the same instance potentially. Still a slightly awkward API, but much more discoverable than casting IMO.\n2. Does `AsyncConfigurationBuilder.AddAsync()` really need to be async? I thought all I/O happened when you actually _build_ the builder; and adding a configuration source would basically just synchronously add it to some private collection.",
                                           "updatedAt":  "2025-04-12T19:49:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6m1aRp",
                                           "createdAt":  "2025-04-12T19:58:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KieranDevvs",
                                           "body":  "\u003e Some thoughts/questions:\n\u003e \n\u003e 1. Instead of casting `ApplicationHistBuilder.Cinfiguration`, could we add an `IAsyncConfigurationBuilder AsyncConfiguration` property? The two properties could even point to the same instance potentially. Still a slightly awkward API, but much more discoverable than casting IMO.\n\u003e 2. Does `AsyncConfigurationBuilder.AddAsync()` really need to be async? I thought all I/O happened when you actually _build_ the builder; and adding a configuration source would basically just synchronously add it to some private collection.\n\n1) ~~I\u0027m happy to have it as an option and see what others think, I don\u0027t feel strongly either way but I think I would prefer the cast as A duplicate property would be confusing. If I were a user discovering them, I personally would assume that the two properties were isolated from each other.~~ Sorry scratch what I said, adding a property to the existing interface isnt possible as it would be a breaking change. It means that anyone who has their own type that implements the interface now has to implement said property. Maybe, we could introduce an extension method on the existing property type to expose the new interface? Something like `.AsAsyncManager()`\n\n```cs\nawait host.Configuration.AsAsyncManager().AddAsync(...);\n```\n\n2) Unfortunately yes. Here\u0027s why:\n    - When using the `AsyncConfigurationBuilder` directly, its not needed as the data is loaded upon the `BuildAsync()` call.\n    - When using `ConfigurationManager` (the type that the generic host API\u0027s expose), the manager itself is its own builder and configuration root. This means that when you add a data source, it immediate loads the data upon the `.Add/.AddAsync` call. This is done to let the user access the configuration values when configuring other parts of the host before it is built (think DI etc).  \n\nExample:\n```cs\n        //Using the config before calling build.\n        HostApplicationBuilder hostBuilder = Host.CreateApplicationBuilder(args);\n        hostBuilder.Configuration.Add(...);\n\n        hostBuilder.Services.Configure\u003cMyType\u003e(() =\u003e hostBuilder.Configuration...);\n\n        var host = hostBuilder.Build();\n```",
                                           "updatedAt":  "2025-04-13T12:36:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6m1cIB",
                                           "createdAt":  "2025-04-12T20:24:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rabadash8820",
                                           "body":  "\u003e It means that anyone who has their own type that implements the interface now has to implement said property\n\nNot necessarily, if we use a [default property implementation](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/default-interface-methods#detailed-design) on the interface. Though idk if the implementation would really be simple enough to be \"default\". Your extension method idea would work too.\n\n\u003e the manager itself is its own builder and configuration root. This means that when you add a data source, it immediate loads the data\n\nI see, thanks for clarifying. I suppose `ConfigurationManager.Add()` could be modified to call `Add()` and then wait on `BuildAsync()`, rather than waiting on an `.AddAsync()` call. This would not be a breaking API change, just a change to internal logic. Though that would mean potentially repeated calls to `AsyncConfigurationBuilder.BuildAsync()` and idk if that\u0027s allowed.",
                                           "updatedAt":  "2025-04-12T20:27:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6m1fS4",
                                           "createdAt":  "2025-04-12T21:07:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KieranDevvs",
                                           "body":  "\u003e \u003e It means that anyone who has their own type that implements the interface now has to implement said property\n\u003e \n\u003e Not necessarily, if we use a [default property implementation](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/default-interface-methods#detailed-design) on the interface. Though idk if the implementation would really be simple enough to be \"default\". Your extension method idea would work too.\n\u003e \n\u003e \u003e the manager itself is its own builder and configuration root. This means that when you add a data source, it immediate loads the data\n\u003e \n\u003e I see, thanks for clarifying. I suppose `ConfigurationManager.Add()` could be modified to call `Add()` and then wait on `BuildAsync()`, rather than waiting on an `.AddAsync()` call. This would not be a breaking API change, just a change to internal logic. Though that would mean potentially repeated calls to `AsyncConfigurationBuilder.BuildAsync()` and idk if that\u0027s allowed.\n\nNote that in my PoC, I\u0027ve also added `IAsyncConfigurationSource` to allow for asynchronous construction of the provider. The await not only loads the data from the source, but it also constructs the source provider asynchronously and adds it to the managers internal sources. Part of this feature extension is to allow users to implement the interface on their own types and asynchronously construct a source if needed.\n\n```cs\n        private async Task AddSourceAsync(IAsyncConfigurationSource source)\n        {\n            IAsyncConfigurationProvider provider = await source.BuildAsync(this).ConfigureAwait(false);\n\n            provider.Load();\n            await provider.LoadAsync().ConfigureAwait(false);\n            _changeTokenRegistrations.Add(ChangeToken.OnChange(provider.GetReloadToken, RaiseChanged));\n\n            _providerManager.AddProvider(provider);\n            RaiseChanged();\n        }\n```\n\nIf we forget about `IAsyncConfigurationSource` for a second. You mean it would look something like this?\n\n```cs\n        HostApplicationBuilder hostBuilder = Host.CreateApplicationBuilder(args);\n        hostBuilder.Configuration.Add(new MyAsyncConfigurationSource());\n\n        await hostBuilder.Configuration.BuildAsync(); //Build before usage.\n        hostBuilder.Services.Configure\u003cMyType\u003e(() =\u003e hostBuilder.Configuration...); //Usage\n\n        var host = hostBuilder.Build();\n```\n\nIf so, I think that would lead to confusion as adding an `IConfigurationSource` would result in available access straight away, but adding an `IAsyncConfigurationSource` would mean your data was missing until you called `BuildAsync` on the configuration.\n",
                                           "updatedAt":  "2025-09-09T20:11:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6m49Bs",
                                           "createdAt":  "2025-04-13T13:10:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KieranDevvs",
                                           "body":  "I\u0027ve updated the proposal to reflect what has been discussed so far.",
                                           "updatedAt":  "2025-04-13T13:10:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6m5o8_",
                                           "createdAt":  "2025-04-13T21:15:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEOQ7mQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "Rabadash8820",
                                                                               "createdAt":  "2025-04-14T20:02:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "robertmclaws",
                                           "body":  "\u003e WebHostBuilder is not getting updates, WebApplicationBuilder is what we’ve been evolving, similarly Host.CreateApplicationBuilder (those implement the same interface )\n\nI will look into this, thanks @davidfowl! Maybe my Host-based extensions have all been supporting the wrong interfaces.",
                                           "updatedAt":  "2025-04-13T21:15:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nUn-a",
                                           "createdAt":  "2025-04-15T19:02:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KieranDevvs",
                                           "body":  "If no one has any comments, can this be marked as ready for review?",
                                           "updatedAt":  "2025-04-15T19:02:47Z"
                                       }
                                   ],
                         "totalCount":  42
                     },
        "title":  "[API Proposal]: AsyncConfigurationProvider",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79957",
        "createdAt":  "2022-12-24T19:27:23Z",
        "number":  79957,
        "author":  "aradalvand",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-12-25T22:27:51Z",
        "body":  "### Background and motivation\r\n\r\nPretty the same as #37378\r\n\r\nThat issue was closed in favor of #36010, which just added a new `ConfigurationKeyName` attribute, but that fails to actually solve the use case described in #37378 in a clean, reasonable way. And this was actually touched upon in the same issue (specifically [the \"Alternative Designs\" section](https://github.com/dotnet/runtime/issues/37378#:~:text=in%20KeyCharsToStrip%20%0A%7D-,Alternative%20Designs,-One%20alternative%20solution))\r\n\r\nIf you want to, for example, use the common \"all-uppercase and words separated with `_`\" naming convention for the environment variables passed to the application as configuration — which is a rather common thing to want to (or even have to) do, you\u0027ll have to decorate every single property in the class to which the configuration will be bound with the `ConfigurationKeyName` attribute, in a very tedious manner, like so (the following is a record type but of course the same applies to classes):\r\n\r\n```csharp\r\npublic record MyAppConfiguration(\r\n    [property: ConfigurationKeyName(\"DB_CONNECTION_STRING\")]\r\n    string DbConnectionString,\r\n    [property: ConfigurationKeyName(\"FOO_API_SECRET_KEY\")]\r\n    string FooApiSecretKey,\r\n    [property: ConfigurationKeyName(\"GRAPHQL_QUERY_MAX_DEPTH\")]\r\n    string GraphQLQueryMaxDepth,\r\n    [property: ConfigurationKeyName(\"CLIENT_APP_ORIGIN\")]\r\n    string ClientAppOrigin\r\n);\r\n```\r\n\r\nIt goes without saying that this is ugly, and it doesn\u0027t make sense to have to do this manually for every single property.\r\nThis is obviously something that could be and should be automated. Currently .NET doesn\u0027t provide any API that lets the developer do so.\r\n\r\n### API Proposal\r\n\r\nSimilar to #37378\r\nThere should ideally be a way to customize the name-matching process competely. Not just stripping characters.\r\n\r\n### API Usage\r\n\r\nSimilar to #37378\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUVXC6w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5RVcLr",
                                           "createdAt":  "2022-12-24T19:27:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nSame as #37378\r\n\r\nThat issue was closed in favor of #36010, which just added a new `ConfigurationKeyName` attribute, but that fails to account for the use case described in #37378 in a clean, reasonable way.\r\n\r\nIf you want to, for example, use the common \"all-uppercase\"+\"words separated with `_`\" for your environment variables, you\u0027ll have to decorate every single property in the class to which the configuration will be bound with the `ConfigurationKeyName` attribute, in a very tedious manner, like so (the following is a record type but of course the same applies to classes):\r\n\r\n```\r\npublic record MyAppConfiguration(\r\n\t[property: ConfigurationKeyName(\"DB_CONNECTION_STRING\")]\r\n\tstring DbConnectionString,\r\n\t[property: ConfigurationKeyName(\"FOO_API_SECRET_KEY\")]\r\n\tstring FooApiSecretKey,\r\n\t[property: ConfigurationKeyName(\"GRAPHQL_QUERY_MAX_DEPTH\")]\r\n\tstring GraphQLQueryMaxDepth,\r\n\t[property: ConfigurationKeyName(\"CLIENT_APP_ORIGIN\")]\r\n\tstring ClientAppOrigin\r\n);\r\n```\r\n\r\nThis is obviously something that should be automated. Currently .NET doesn\u0027t provide any API to do so.\n\n### API Proposal\n\nSimilar to #37378\n\n### API Usage\n\nSimilar to #37378\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003earadalvand\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-24T19:27:32Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Add support for customizing name-matching for all properties when using `ConfigurationBinder`",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79999",
        "createdAt":  "2022-12-27T17:49:49Z",
        "number":  79999,
        "author":  "heldersousa-planetpayment",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-12-28T09:46:10Z",
        "body":  "### Background and motivation\r\n\r\nClarity on the usage of ConfigurationBinder methods.\r\n\r\nWith the implementation of this feature https://github.com/dotnet/runtime/pull/67258/files#diff-2e6f75e1d4f577e1c8c1b6a32d158ce7812a38ad8fcd3b4d762157b92c03e890L13 it is now possible to use a record to bind settings.\r\n\r\nHowever, if a record doesn\u0027t have optional properties, the following logic will never return a default object because it can\u0027t create the instance of the record.\r\n\r\nappsettings.json has the following entry\r\n```json\r\n\"CustomSection\" : {\r\n    \"ConfigA\": \"Value1\"\r\n}\r\n```\r\n\r\ncode:\r\n```csharp\r\n//given record CustomSection\r\nrecord CustomSection(string ConfigA, string ConfigB); \r\n\r\n// this will throw an exception because \"ConfigB\" cannot be null\r\nvar customSection = configuration.GetRequiredSection(\"CustomSection\").Get\u003cCustomSection\u003e();\r\n```\r\n\r\n@SteveDunn since you were implementing the code to support this, would you know if there is an alternative to the proposed API? I couldn\u0027t find anything in docs or comments in the pull request.\r\n\r\n\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.Configuration;\r\n\r\npublic static class ConfigurationBinder\r\n{\r\n    // return non nullable T when T is a record (not really sure how to implement this since records don\u0027t have Generics constraints as per https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/record#generic-constraints)\r\n    public static T Get\u003c[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.All)] T\u003e(this IConfiguration configuration)\r\n\r\n    //or maybe have a GetRequired instead. probably it will be simpler\r\n    public static T GetRequired\u003c[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.All)] T\u003e(this IConfiguration configuration)\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\n//given record CustomSection\r\nrecord CustomSection(string ConfigA, string ConfigB); \r\n\r\n// Get non-nullable CustomSection\r\n//   - either with current Get method \r\nCustomSection customSection = configuration.GetRequiredSection(\"CustomSection\").Get\u003cCustomSection\u003e();\r\n\r\n//   - or with a new method GetRequired\r\nCustomSection customSection = configuration.GetRequiredSection(\"CustomSection\").GetRequired\u003cCustomSection\u003e();\r\n\r\n\r\n// instead of returning nullable. current implementation requires the usage of ! to convert the nullable to non-nullable type\r\nCustomSection customSection = configuration.GetRequiredSection(\"CustomSection\").Get\u003cCustomSection\u003e()!;\r\n\r\n\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUWynPQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5RbKc9",
                                           "createdAt":  "2022-12-27T17:49:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nClarity on the usage of ConfigurationBinder methods.\r\n\r\nWith the implementation of this feature https://github.com/dotnet/runtime/pull/67258/files#diff-2e6f75e1d4f577e1c8c1b6a32d158ce7812a38ad8fcd3b4d762157b92c03e890L13 it is now possible to use a record to bind settings.\r\n\r\nHowever, if a record doesn\u0027t have optional properties, the following logic will never return a default object because it can\u0027t create the instance of the record.\r\n\r\nappsettings.json has the following entry\r\n```json\r\n\"CustomSection\" : {\r\n    \"ConfigA\": \"Value1\"\r\n}\r\n```\r\n\r\ncode:\r\n```csharp\r\n//given record CustomSettings\r\nrecord CustomSettings(string ConfigA, string ConfigB); \r\n\r\n// this will throw an exception because \"ConfigB\" can not be null\r\nvar customSection = configuration.GetRequiredSection(\"CustomSection\").Get\u003cCustomSettings\u003e();\r\n```\r\n\r\n@SteveDunn since you were implementing the code to support this, would you know if there is an alternative to the proposed API? I couldn\u0027t find anything in docs or comments in the pull request.\r\n\r\n\n\n### API Proposal\n\n```csharp\r\nnamespace Microsoft.Extensions.Configuration;\r\n\r\npublic static class ConfigurationBinder\r\n{\r\n    // return non nullable T when T is a record (not really sure how to implement this since records don\u0027t have Generics constraints as per https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/record#generic-constraints)\r\n    public static T Get\u003c[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.All)] T\u003e(this IConfiguration configuration)\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n//given record CustomSettings\r\nrecord CustomSettings(string configA, string configB); \r\n\r\n// Get non-nullable CustomSettings\r\nCustomSettings rulesManagementSettings = configuration.GetRequiredSection(\"CustomSection\").Get\u003cCustomSettings\u003e();\r\n\r\n// instead of returning nullable. current implementation requires the usage of ! to convert the nullable to non-nullable type\r\nCustomSettings rulesManagementSettings = configuration.GetRequiredSection(\"CustomSection\").Get\u003cCustomSettings\u003e()!;\r\n\r\n\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eheldersousa-planetpayment\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-27T17:49:56Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: ConfigurationBinder should have a Get method that returns non nullable T when record type is used",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83599",
        "createdAt":  "2023-03-17T16:47:42Z",
        "number":  83599,
        "author":  "layomia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODMPojw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shoaibshakeel381",
                                            "createdAt":  "2023-06-28T23:11:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "christopherbahr",
                                            "createdAt":  "2023-07-21T17:59:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2023-11-15T03:43:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Oblomoff",
                                            "createdAt":  "2024-12-18T12:16:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rubenprins",
                                            "createdAt":  "2025-08-08T11:45:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tragetaschen",
                                            "createdAt":  "2025-08-22T07:07:00Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-07-26T10:40:39Z",
        "body":  "Initial discussion - https://github.com/dotnet/runtime/issues/44493#issuecomment-1344979388\r\ncc @eerhardt @ericstj @davidfowl \r\n\r\n---\r\n\r\n## Extensibility for Configuration Binding Source Generator\r\n\r\n### Background\r\n\r\nThe configuration binding source generator provides AOT and trim-friendly configuration in ASP.NET Core. It is an alternative to the pre-exising reflection-based implementation. For each type to bind, the reflection implementation checks whether a `TypeConverter` instance exists and uses it if so. This was mainly applicable as a convenient abstraction to bind to built-in primitives such as `int` and `string` which are parsable from string. However, the `TypeConverter` mechanism is not friendly for AOT usage. As a result, the binding generator does not look up `TypeConverter` usage.\r\n\r\n`TypeConverter` inadvertently provided a way for developers to convert binding behavior. We\u0027ve seen partner teams use it to parse non-primitive types such as security certificates. This begs the question of whether we do need to support it, or provide a replacement mechanism to cover customization scenarios.\r\n\r\n### Proposed customization strategies\r\n\r\nWe don\u0027t want to honor `TypeConverter` in the generator implementation. References to it would largely undo the major benefit of the generator, which is AOT and linking friendliness. Since the generator is new, we have an opportunity to provide a better customization experience.\r\n\r\n#### Check and honor `IParsable\u003cT\u003e` implementations.\r\n\r\nThis only works for design-time customization. Does not work for non-owned types.\r\n\r\n#### API proposal: new API for runtime configuration\r\n\r\nWe would add a new converters dictionary to register converter instances. This would be last one wins.\r\n\r\n```cs\r\nnamespace Microsoft.Extensions.Configuration\r\n{\r\n    public class BinderOptions\r\n    {\r\n        public bool BindNonPublicProperties { get; set; }\r\n        public bool ErrorOnUnknownConfiguration { get; set; }\r\n\r\n        // New\r\n        // Note: last one wins, just like with current `TypeConverter` look up behavior.\r\n        // Note: boxing for custom structs. Should be okay since binding generally isn\u0027t in hot path.\r\n        public IDictionary\u003cType, Func\u003cstring, object\u003e\u003e Converters { get; }\r\n    }\r\n}\r\n```\r\n\r\n#### Customization restrictions\r\n\r\n- Like the reflection implementation, and with `IParsable\u003cT\u003e`, we would only support types directly parsable from string.\r\n- We would throw an exception if we detect a converter for a type that is included in the list of \"intrinsic\" types that `TypeConverter` supports \u0026 the generator now handles with hand-written logic.\r\n\r\n### Order of customization preference\r\n\r\n1. Honor runtime converter. \r\n2. Use `IParsable\u003cT\u003e` implementation if detected (replacing generators handwritten logic for intrinsic types).\r\n3. Fallback to built-in binding logic.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrZxTFg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5X3UJs",
                                           "createdAt":  "2023-03-17T16:47:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nInitial discussion - https://github.com/dotnet/runtime/issues/44493#issuecomment-1344979388\r\n\r\ncc @eerhardt @ericstj @davidfowl \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elayomia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `source-generator`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-17T16:47:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5X3XuM",
                                           "createdAt":  "2023-03-17T16:59:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "layomia",
                                           "body":  "From @eerhardt in https://github.com/dotnet/runtime/issues/83533#issuecomment-1474095251:\r\n\r\n\u003e One option for the \"opt in\" model of `TypeConverters` is to respect the `TypeConverterAttribute` if either:\r\n\u003e \r\n\u003e * Directly applied to the property\r\n\u003e * Directly applied to the Type of the property\r\n\u003e \r\n\u003e So, for example:\r\n\u003e \r\n\u003e ```cs\r\n\u003e [TypeConverter(typeof(PointConverter))]\r\n\u003e public struct Point\r\n\u003e {\r\n\u003e    public int X;\r\n\u003e    public int Y;\r\n\u003e }\r\n\u003e \r\n\u003e public class CustomOptions\r\n\u003e {\r\n\u003e     public Point CurrentPoint { get; set }\r\n\u003e }\r\n\u003e ```\r\n\u003e \r\n\u003e or\r\n\u003e \r\n\u003e ```cs\r\n\u003e public struct Point\r\n\u003e {\r\n\u003e    public int X;\r\n\u003e    public int Y;\r\n\u003e }\r\n\u003e \r\n\u003e public class CustomOptions\r\n\u003e {\r\n\u003e     [TypeConverter(typeof(PointConverter))]\r\n\u003e     public Point CurrentPoint { get; set }\r\n\u003e }\r\n\u003e ```\r\n\u003e \r\n\u003e See also:\r\n\u003e \r\n\u003e * [Developers can safely trim apps which need Configuration Binder #44493 (comment)](https://github.com/dotnet/runtime/issues/44493#issuecomment-1425503530)\r\n\u003e * [Support TypeConverterAttribute on bound properties #36545](https://github.com/dotnet/runtime/issues/36545)\r\n\r\n",
                                           "updatedAt":  "2023-03-17T16:59:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5X3ZB_",
                                           "createdAt":  "2023-03-17T17:03:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "layomia",
                                           "body":  "\u003e \u003e One option for the \"opt in\" model of `TypeConverters` is to respect the `TypeConverterAttribute` if either:\r\n\u003e \u003e \r\n\u003e \u003e * Directly applied to the property\r\n\u003e \u003e * Directly applied to the Type of the property\r\n\r\nThis makes sense to me. Just that it doesn\u0027t account for converters registered at runtime i.e. with `TypeDescriptor`. We could document that as an unsupported scenario.",
                                           "updatedAt":  "2023-03-17T17:14:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5X3cyC",
                                           "createdAt":  "2023-03-17T17:12:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "The \"registered at runtime\" may be interesting to a subset of customers. But the way to enable that would mean all the other customers would have to pay for it. My preference would be to only enable it if we get feedback it is required. And if we do, we make it opt-in, somehow.",
                                           "updatedAt":  "2023-03-17T17:12:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5X3e_X",
                                           "createdAt":  "2023-03-17T17:19:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOET766Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "layomia",
                                                                               "createdAt":  "2023-03-17T17:26:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dariusclay",
                                                                               "createdAt":  "2025-05-27T14:16:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I don\u0027t feel great about making any bets on the TypeConverter infrastructure.  It\u0027s pretty old and never designed with AOT and Link-ability in mind.\r\n\r\n\u003e Directly applied to the property\r\n\r\nThis wasn\u0027t previously honored by ConfigurationBinder.  It only looked up the converter for the type.  https://github.com/dotnet/runtime/blob/6ef9d10fd024a88130155997d5de182e472ff101/src/libraries/Microsoft.Extensions.Configuration.Binder/src/ConfigurationBinder.cs#L855\r\n\r\n\u003e Directly applied to the Type of the property\r\n\r\nWhile this would provide a way for folks to extend the system and be consistent with what the binder used to do, it might still be too heavy.  Converters handle more than just String-\u003eT and the linker might not be able to shake out a small enough code-path to make this viable.  \r\n\r\nAn alternative would be to explicitly design some hook for folks to register a lightweight Func\u003cstring,T\u003e conversion that we could honor at runtime.  Heck - if they wanted to, they could even decide to add back in converter that\u0027s driven off the TypeConverter infrastructure.",
                                           "updatedAt":  "2023-03-17T17:19:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5X3hRg",
                                           "createdAt":  "2023-03-17T17:27:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "layomia",
                                           "body":  "Given all these considerations, this whole scenario seems like something we should await customer/stakeholder feedback for before implementing a solution.",
                                           "updatedAt":  "2023-03-17T17:27:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5X3h4Y",
                                           "createdAt":  "2023-03-17T17:29:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "cc @geeknoid. I believe you have used this functionality in the past. Would not supporting customized converting of `string` =\u003e `custom Type` be a blocker for you using the ConfigurationBinder source generator?",
                                           "updatedAt":  "2023-03-17T17:29:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5X3iZ4",
                                           "createdAt":  "2023-03-17T17:31:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e This wasn\u0027t previously honored by ConfigurationBinder. It only looked up the converter for the type.\r\n\r\nCorrect. But this has been an ask from customers. See my \"see also\" above: https://github.com/dotnet/runtime/issues/36545.",
                                           "updatedAt":  "2023-03-17T17:32:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5X3sCU",
                                           "createdAt":  "2023-03-17T18:03:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "We\u0027re asking about existing types we don\u0027t own right? Why wouldn\u0027t we support `IParseable\u003cT\u003e`?",
                                           "updatedAt":  "2023-03-17T18:03:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5X52VD",
                                           "createdAt":  "2023-03-18T09:09:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pinkfloydx33",
                                           "body":  "We **only** use type converters for this purpose, ie. configuration binding. As mentioned in the other issue, `IParseable` support would cover most of our use cases (assuming the interface made it to some inbox types as is currently planned)--but not all.\r\n\r\nA mechanism to provide a `Func\u003cstring, T\u003e`, particularly for _types we don\u0027t own_, would work for us. However those cases mostly revolve around `HashSet\u003c\u003e` (ie. value: \"a,b,c\" =\u003e `HashSet\u003cstring\u003e.Count == 3`). If I recall correctly from reviewing the PRs, I _believe_ the sourcegen is already special-casing target types of `HashSet\u003c\u003e`/`ISet\u003c\u003e`. Assuming some mechanism for customization existed, would that special casing take precedence?\r\n\r\nWe could always create a `HashSet\u003c\u003e` subclass that implemented `IParseable`. It\u0027d be kind of weird, but not _terrible_ if it\u0027s the only workaround. I\u0027d have the same question though: would special-casing of `ISet\u003c\u003e`/`HashSet\u003c\u003e`--or any types for that matter--supercede checks for `IParseable`? ",
                                           "updatedAt":  "2023-03-18T09:09:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YkDp0",
                                           "createdAt":  "2023-03-27T20:54:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "layomia",
                                           "body":  "@pinkfloydx33 AFAIK the goal for the generator in .NET 8 is parity (to the degree possible) with the reflection implementation. Thus `IParseable\u003cT\u003e` based parsing won\u0027t be included now or it will be considered a stretch goal. If you have scenarios that work with reflection that the generator doesn\u0027t support, please file an issue.\r\n\r\nOn a related note `IParseable\u003cT\u003e` might seem like an expedient converter implementation for primitives (https://github.com/dotnet/runtime/issues/83533) but it is not available in .NET Framework or Standard which the generator aims to support.\r\n\r\nIf feedback indicates that there are crucial dependences on `TypeDescriptor` being used at runtime, we could add API (either in source or say an MSBuild property) to determine whether the generator should include code that does the relevant look ups.",
                                           "updatedAt":  "2023-03-27T23:01:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cCsLQ",
                                           "createdAt":  "2023-05-11T15:33:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7kPQA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pinkfloydx33",
                                                                               "createdAt":  "2023-05-11T20:39:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Probably you don\u0027t need to have the IParseable interface to permit types to define their own bind logic.  We could probe IParseable first, then for the method signature that would have been there if it had implemented IParseable (to support frameworks that don\u0027t have IParseable).\r\n\r\nI think the scenario of folks defining bind logic for types they own (maybe IParseable), and folks defining bind logic for types they don\u0027t own are legitimate use cases and things the reflection-based binder supported.  We need to do it in a different way than TypeConverter since that has a large code size and uses a significant amount of refection.",
                                           "updatedAt":  "2023-05-11T15:33:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cC_IV",
                                           "createdAt":  "2023-05-11T16:15:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e Probably you don\u0027t need to have the IParseable interface to permit types to define their own bind logic. We could probe IParseable first, then for the method signature that would have been there if it had implemented IParseable (to support frameworks that don\u0027t have IParseable).\r\n\r\nThis is what minimal APIs does.\r\n\r\n\u003e I think the scenario of folks defining bind logic for types they own (maybe IParseable), and folks defining bind logic for types they don\u0027t own are legitimate use cases and things the reflection-based binder supported. We need to do it in a different way than TypeConverter since that has a large code size and uses a significant amount of refection\r\n\r\nAgreed. There are also language features that will help here (implicit extensions).",
                                           "updatedAt":  "2023-05-11T16:15:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hbQao",
                                           "createdAt":  "2023-07-13T16:22:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODApFuw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "pinkfloydx33",
                                                                               "createdAt":  "2023-07-13T20:10:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "layomia",
                                           "body":  "Triage: given we\u0027re in the later stages of the .NET 8 dev time, we\u0027ve decided to pause on implementing an extensibility feature for the source generator in .NET 8. Effectively, the generator won\u0027t add code to check for `TypeConverter` or `IParsable\u003cT\u003e` implementations for the type. Built-in primitives are already handled with handwritten logic which inlines the core parsing logic that these mechanisms provide.\r\n\r\nWe don\u0027t have a strong signal that these features are needed right now, but we\u0027ll be following feedback here closely and can revisit the decision.",
                                           "updatedAt":  "2023-07-13T16:22:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hcpZA",
                                           "createdAt":  "2023-07-13T20:50:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@pinkfloydx33 I noticed your down-vote.  Would you like to share your scenario with us to see if we\u0027re missing something?  Do you have an application that uses custom bind logic today?",
                                           "updatedAt":  "2023-07-13T20:50:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hdIEz",
                                           "createdAt":  "2023-07-13T22:48:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEHlT_A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2023-07-14T18:06:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2023-11-15T03:46:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bryancrosby",
                                                                               "createdAt":  "2024-05-02T17:39:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "R2D221",
                                                                               "createdAt":  "2025-02-25T15:39:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "pinkfloydx33",
                                           "body":  "I believe I shared it above and in the linked issue. \r\n\r\nParticularly we have a bunch of settings that we pass in as a delimited list rather than an actual array of values. We then use a type converter to convert this to a HashSet of a specific type. We\u0027ve gone this route in some cases as we\u0027ve found it easier to manage layered settings if we are completely overwriting them, versus trying to layer array indexed positions which have non-obvious semantics.\r\n\r\nSay we have a `Setting` array of `[ 1, 2, 3 ]` in our appsettings.json that we bind to a `HashSet\u003cint\u003e`. We then overlay that with `Setting:0=2` and `Setting:1=4` in Azure AppConfig, thus becoming `[ 2, 4, 3 ]`. Our Configuration Managers (non developers) don\u0027t realize there was a third position in the base layer and now we\u0027ve got a rogue value that they\u0027d have to be aware of in the first place and can\u0027t easily null out. \r\n\r\nArray semantics in the overlays can be confusing to a non-dev. They also must make sense of the array index syntax in general. So instead, we require them to specify the **entire desired value** as a comma-delimited string: `Setting=2,4`. We then use a type converter registered at application startup to enable binding this `string` to a `HashSet\u003cint\u003e`. This allows our Config Managers to see/set the full value in a single entry without being aware of the actual implementation and allows us to treat it as a collection in the application itself.\r\n\r\nWithout support for type converters (or IParseable along with our own implementing HashSet subclass) the source gen\u0027d binder is worthless to us and we\u0027ll have to stick with the reflection-based binder. ",
                                           "updatedAt":  "2023-07-13T22:48:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hh1et",
                                           "createdAt":  "2023-07-14T18:44:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMopPQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shoaibshakeel381",
                                                                               "createdAt":  "2023-07-14T19:00:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2023-11-15T03:47:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Could you do the same thing with a poco that had a string value and an accessor that lazily initialized the HashSet from the string?\r\n```C#\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nvar config = new ConfigurationBuilder()\r\n    .AddInMemoryCollection(new Dictionary\u003cstring,string?\u003e\r\n    {\r\n        [\"MyOptions:Value\"] = \"2,3\"\r\n\r\n    }).Build();\r\n\r\nvar converter = config.GetSection(\"MyOptions\").Get\u003cMyHashSetConverter\u003e()!;\r\n\r\nConsole.WriteLine(converter.Converted.Count);\r\n\r\npublic class MyHashSetConverter\r\n{\r\n    private HashSet\u003cint\u003e? _converted;\r\n\r\n    public string? Value { get; set; }\r\n\r\n    public HashSet\u003cint\u003e Converted { get =\u003e _converted ??= Parse(Value!); }\r\n    private HashSet\u003cint\u003e Parse(string value)\r\n    {\r\n        var parts = value.Split(\u0027,\u0027);\r\n        return new HashSet\u003cint\u003e(parts.Select(x =\u003e int.Parse(x)));\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2023-07-14T18:44:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hii9P",
                                           "createdAt":  "2023-07-14T21:07:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@ericstj Are we out of time to implement `IParesable\u003cT\u003e`? ",
                                           "updatedAt":  "2023-07-14T21:07:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hk2y3",
                                           "createdAt":  "2023-07-16T10:52:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pinkfloydx33",
                                           "body":  "@ericstj I hadn\u0027t considered doing that; it should/could work. It\u0027s feels a little unnecessary but is definitely a valid workaround that would work with source gen. Thanks! \r\n\r\nHowever, I believe that another scenario I have won\u0027t work. We bind to `IPAddress` and `IPNetwork` (from aspnetcore though to be replaced with inbox class with net8) in a couple places. The first is some customizations over forwarded headers, but the second and most important is in our YARP gateway where we use addresses/CIDR blocks for whitelisting access with the help of [Firewall](https://www.nuget.org/packages/Firewall). Both of these classes (will) support `IParsable` whereas right now we are using a custom type converter to support both of them.\r\n\r\nI suppose we can use a similar trick and cache the parsed address/network object. I\u0027m not crazy about that--less so than the case cited above. This would be covered with `IParsable` support and it feels like a big gap that it\u0027s not included. I\u0027m sure I can\u0027t have the only two use-cases. I realize any feature starts at -100 points and needs design/dev/testing/doc/etc, but given that there\u0027s prior art around `IParsable`--particularly in aspnet--it feels like it\u0027s something that could\u0027ve been adapted in a manner that offset some of that cost.\r\n\r\nJust my 2cp. We\u0027ve got the work around demonstrated above so I\u0027m not bound to reflection... though I may just wait until it\u0027s supported before trying to switch. ",
                                           "updatedAt":  "2023-07-16T10:52:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hqPlu",
                                           "createdAt":  "2023-07-17T16:20:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODA7XoQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2023-07-17T16:25:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "\u003e @ericstj Are we out of time to implement `IParesable\u003cT\u003e`?\r\n\r\nWe discussed with @tarekgh, @eerhardt, and @layomia [last week](https://github.com/dotnet/runtime/issues/83599#issuecomment-1634535080).  The cut-off for feature work for 8.0 is effectively today.  We don\u0027t have a strong signal that folks are blocked on this extensibility, and we didn\u0027t want to rush something.  We can always add this later, but it\u0027s much more difficult to remove it if we got it wrong.  `IParseable` is less risky than a larger extensibility model  with public API - @layomia already has a prototype - but adding support is still not small.  We wouldn\u0027t want to add it to just the source generator but also the runtime binder.  If `IParseable` is must have for v1 I think it can still be prioritized - but we\u0027ll have less time to do other things important for the quality of the product.\r\n\r\n",
                                           "updatedAt":  "2023-07-17T16:20:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iHNgz",
                                           "createdAt":  "2023-07-21T17:58:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "christopherbahr",
                                           "body":  "I\u0027m the author of #89254 which proposed a mechanism to control binding of types not owned by the application (In my case `TimeSpan`).\r\n\r\nThe API described in the opening of this PR would solve my case perfectly.\r\n```csharp\r\nnamespace Microsoft.Extensions.Configuration\r\n{\r\n    public class BinderOptions\r\n    {\r\n        public bool BindNonPublicProperties { get; set; }\r\n        public bool ErrorOnUnknownConfiguration { get; set; }\r\n\r\n        // New\r\n        // Note: last one wins, just like with current `TypeConverter` look up behavior.\r\n        // Note: boxing for custom structs. Should be okay since binding generally isn\u0027t in hot path.\r\n        public IDictionary\u003cType, Func\u003cstring, object\u003e\u003e Converters { get; }\r\n    }\r\n}\r\n```\r\n\r\nIs there any chance to get just that into .NET 8? That ignores the source generator AOT problem but is still an improvement in customization for configuration binding.  It seems relatively simple to implement, we just need to thread the options object down through the binder to where it\u0027s currently finding the `TypeConverter` and check the `Converters` dictionary.\r\n\r\nThat doesn\u0027t  _feel_ like it adds a lot of risk that we\u0027ve gotten something wrong. A generic override seems compatible with a later, smarter way to handle `IParseable` objects or any other sort of smarter automatic way to do the right thing. Any such system would want to account for the consumer preferring a different parsing method for classes they don\u0027t own for whatever reason.",
                                           "updatedAt":  "2023-07-21T17:58:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iHpmR",
                                           "createdAt":  "2023-07-21T19:52:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "layomia",
                                           "body":  "@christopherbahr right now we\u0027re focused on getting the quality of the release right. Better not to rush this.\r\n\r\nOften times the devil is in the details with features like this -- e.g., we need to get the order of precedence right; would folks need other inputs such as `CultureInfo`?; what\u0027s the nature of any behavior difference between source-gen \u0026 reflection impl? We wouldn\u0027t want to rush such considerations through API review.",
                                           "updatedAt":  "2023-07-21T19:52:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iWDOz",
                                           "createdAt":  "2023-07-25T14:25:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "christopherbahr",
                                           "body":  "@layomia Fair enough, I\u0027m sure you understand the constraints and concerns much better than I do. It sounds like a couple weeks ago you were looking for some signal that people were blocked on this sort of extensibility. It sounds like we\u0027re not going to make .NET 8 but put me down as part of that signal for the next release.",
                                           "updatedAt":  "2023-07-25T14:25:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m5qKZ",
                                           "createdAt":  "2023-09-19T20:00:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODHQ6Hg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2023-09-20T06:18:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@adamsitnik had a scenario described in https://github.com/dotnet/runtime/issues/91324 where he binds to an abstract type and data helps discriminate which derived type to create.",
                                           "updatedAt":  "2023-09-19T20:00:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Haex3",
                                           "createdAt":  "2024-08-06T18:11:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOET77pA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2024-08-06T19:05:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2024-08-08T20:14:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Lapiniot",
                                                                               "createdAt":  "2025-03-03T15:25:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mgnslndh",
                                                                               "createdAt":  "2025-04-18T14:03:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dariusclay",
                                                                               "createdAt":  "2025-05-27T14:17:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "ericstj",
                                           "body":  "We are too late in 9.0 to be adding new extensibility features to Configuration.  I do want us to reconsider this in 10.0.  Would be interested to hear from others like @eerhardt @tarekgh @davidfowl what is most valuable to tackle here.",
                                           "updatedAt":  "2024-08-06T18:11:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SvuhI",
                                           "createdAt":  "2024-11-07T11:23:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "leidegre",
                                           "body":  "AOT support would be very much appreciated for something like this.",
                                           "updatedAt":  "2024-11-07T11:23:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rfUnC",
                                           "createdAt":  "2025-05-13T15:59:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOET77_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dariusclay",
                                                                               "createdAt":  "2025-05-27T14:17:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "TheBrambleShark",
                                           "body":  "Found this when looking at how to customize the deserialization logic. I have a configuration model with a `DirectoryInfo` property which ends up as null currently, despite being populated with a string value.\n\nUnfortunately I\u0027m going to need to set this to a string and then set up an alternative property to get the DirectoryInfo type. However, if we can implement `IParsable` and, ideally, observing `JsonConverterAttribute` as suggested by @eerhardt, that would be fantastic!",
                                           "updatedAt":  "2025-05-13T15:59:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6tnFMW",
                                           "createdAt":  "2025-05-27T14:20:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dariusclay",
                                           "body":  "➕ Plus one from my side that being able to control the parsing logic would help tremendously. Right now, if we enable the binding source generator it will cause many breaking changes to existing customers due to how complex types are bound which prevents many of our packages from being AOT ready.",
                                           "updatedAt":  "2025-05-27T14:20:40Z"
                                       }
                                   ],
                         "totalCount":  28
                     },
        "title":  "Extensibility for Configuration Binding Source Generator",
        "labels":  [
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83692",
        "createdAt":  "2023-03-20T20:03:16Z",
        "number":  83692,
        "author":  "layomia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-19T20:04:59Z",
        "body":  "### Background and motivation\r\n\r\nWe should add a new `HasChildren` property to `IConfiguration`. An implementation given existing APIs might look like this:\r\n\r\n```cs\r\npublic static bool HasChildren(IConfiguration configuration)\r\n{\r\n    foreach (IConfigurationSection section in configuration.GetChildren())\r\n    {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n```\r\n\r\nThis implementation makes allocations which is not ideal. We could get better perf with a new API with a more optimal framework implementation.\r\n\r\n### API Proposal\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.Configuration\r\n{\r\n    public interface IConfiguration\r\n    {\r\n+        public bool HasChildren { get; }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\nA primary user of this feature would be the configuration binding source generator. Sample code it would generate:\r\n\r\n```cs\r\nprivate static void BindCore(IConfiguration configuration, MyClass obj)\r\n{\r\n    ThrowIfNull(obj);\r\n\r\n    if (configuration[\"MyString\"] is string stringValue0)\r\n    {\r\n        obj.MyString = stringValue0;\r\n    }\r\n\r\n    IConfigurationSection section2 = configuration.GetSection(\"MyList\");\r\n    if (section2.HasChildren)\r\n    {\r\n        List\u003cint\u003e temp3 = obj.MyList;\r\n        temp3 ??= new List\u003cint\u003e();\r\n        BindCore(section2, ref temp3);\r\n        obj.MyList = temp3;\r\n    }\r\n\r\n    IConfigurationSection section4 = configuration.GetSection(\"MyDictionary\");\r\n    if (section4.HasChildren)\r\n    {\r\n        Dictionary\u003cstring, string\u003e temp5 = obj.MyDictionary;\r\n        temp5 ??= new Dictionary\u003cstring, string\u003e();\r\n        BindCore(section4, ref temp5);\r\n        obj.MyDictionary = temp5;\r\n    }\r\n\r\n    // Repeat for every object or collection property on MyClass\r\n  }\r\n```\r\n\r\nWe see that the binding performance would improve with a more optimal implementation, particularly for large object graphs.\r\n\r\ncc @tarekgh @eerhardt @davidfowl @dotnet/area-extensions-configuration",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWEow-Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5YBwsL",
                                           "createdAt":  "2023-03-20T20:03:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nWe should add a new `HasChildren` property to `IConfiguration`. An implementation given existing APIs might look like this:\r\n\r\n```cs\r\npublic static bool HasChildren(IConfiguration configuration)\r\n{\r\n    foreach (IConfigurationSection section in configuration.GetChildren())\r\n    {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n```\r\n\r\nThis implementation makes allocations which is not ideal. We could get better perf with a new API with a more optimal framework implementation.\n\n### API Proposal\n\n```diff\r\nnamespace Microsoft.Extensions.Configuration\r\n{\r\n    public interface IConfiguration\r\n    {\r\n+        public bool HasChildren { get; }\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\nA primary user of this feature would be the configuration binding source generator. Sample code it would generate:\r\n\r\n```cs\r\nprivate static void BindCore(IConfiguration configuration, MyClass obj)\r\n{\r\n    ThrowIfNull(obj);\r\n\r\n    if (configuration[\"MyString\"] is string stringValue0)\r\n    {\r\n        obj.MyString = stringValue0;\r\n    }\r\n\r\n    IConfigurationSection section2 = configuration.GetSection(\"MyList\");\r\n    if (section2.HasChildren)\r\n    {\r\n        List\u003cint\u003e temp3 = obj.MyList;\r\n        temp3 ??= new List\u003cint\u003e();\r\n        BindCore(section2, ref temp3);\r\n        obj.MyList = temp3;\r\n    }\r\n\r\n    IConfigurationSection section4 = configuration.GetSection(\"MyDictionary\");\r\n    if (section4.HasChildren)\r\n    {\r\n        Dictionary\u003cstring, string\u003e temp5 = obj.MyDictionary;\r\n        temp5 ??= new Dictionary\u003cstring, string\u003e();\r\n        BindCore(section4, ref temp5);\r\n        obj.MyDictionary = temp5;\r\n    }\r\n\r\n    // Repeat for every object or collection property on MyClass\r\n  }\r\n```\r\n\r\nWe see that the binding performance would improve with a more optimal implementation, particularly for large object graphs.\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elayomia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003elayomia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-20T20:03:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YB1XR",
                                           "createdAt":  "2023-03-20T20:19:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I think this needs to be an extension method on the IConfiguration and not extending the original interface. Right? Can\u0027t we just add this to the internal extensions we have here https://source.dot.net/#Microsoft.Extensions.Configuration/InternalConfigurationRootExtensions.cs,13? I know we need to have a public way to access it though.",
                                           "updatedAt":  "2023-03-20T20:21:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YCN2K",
                                           "createdAt":  "2023-03-20T21:43:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "layomia",
                                           "body":  "\u003e I think this needs to be an extension method on the IConfiguration and not extending the original interface. \r\n\r\n\u003e I know we need to have a public way to access it though.\r\n\r\nWould we be establishing a new pattern for APIs on the type? \r\n\r\n\r\nHaving it be a property on the type itself seemed natural to me since we expect this to be a cheap/cached check. I did a quick scan of what an implementation would look like to verify this assumption, but I\u0027ll have to dive a bit deeper to be sure.\r\n\r\nWe could also consider optimizing `GetChildren()`; there\u0027s a lot of LINQ usage in the implementation.",
                                           "updatedAt":  "2023-03-20T21:43:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YCQWp",
                                           "createdAt":  "2023-03-20T21:55:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "In order for this to actually be beneficial, it would need to be a property on the interface. An extension property could only hard-code our own configuration types - `ConfigurationRoot`, `ConfigurationManager`, etc. For other `IConfiguration` types, it would need to call `GetChildren().Any()`.\r\n\r\n\u003e We could also consider optimizing GetChildren(); there\u0027s a lot of LINQ usage in the implementation.\r\n\r\nNote that in this case we are eagerly building the full list (which we need to do for the reason in the comment):\r\n\r\nhttps://github.com/dotnet/runtime/blob/967250cc86b4c613015066b47b882e7424fdb590/src/libraries/Microsoft.Extensions.Configuration/src/InternalConfigurationRootExtensions.cs#L38-L39",
                                           "updatedAt":  "2023-03-20T21:55:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YCTGQ",
                                           "createdAt":  "2023-03-20T22:04:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e it would need to be a property on the interface. \r\n\r\nIs it possible we can extend this interface? note this interface is supported on the .NET Framework which adding anything there will be a breaking change. ",
                                           "updatedAt":  "2023-03-20T22:04:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YCXDR",
                                           "createdAt":  "2023-03-20T22:15:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "We would either do it the way we IMemoryCache.GetCurrentStatistics:\r\n\r\nhttps://github.com/dotnet/runtime/blob/967250cc86b4c613015066b47b882e7424fdb590/src/libraries/Microsoft.Extensions.Caching.Abstractions/src/IMemoryCache.cs#L34-L40\r\n\r\nOr we could introduce a new interface that had the new property on it. Then an extension method could check for the interface and cast to it. And if the `IConfiguration` didn\u0027t implement the interface, it could fall back to `GetChildren().Any()`. That would still work on .NET Framework.",
                                           "updatedAt":  "2023-03-20T22:15:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YGYN3",
                                           "createdAt":  "2023-03-21T15:40:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Help me understand the case this is optimized for? For a missing section the IConfigurationSection.Value is null, so https://github.com/dotnet/runtime/blob/967250cc86b4c613015066b47b882e7424fdb590/src/libraries/Microsoft.Extensions.Configuration.Abstractions/src/ConfigurationExtensions.cs#L78 would work right? If there is a section then we\u0027re going to enumerating it anyways.",
                                           "updatedAt":  "2023-03-21T15:40:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YH2aE",
                                           "createdAt":  "2023-03-21T19:16:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "layomia",
                                           "body":  "I wasn\u0027t aware of that implementation. I also used `section.GetChildren().Any()` initially but the feedback is that we want to avoid LINQ in the source gen implementation. \r\n\r\n\u003e If there is a section then we\u0027re going to enumerating it anyways.\r\n\r\nI guess it would be helpful in the cases where there are no children so we avoid allocating a section. ",
                                           "updatedAt":  "2023-03-21T19:16:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YLj1G",
                                           "createdAt":  "2023-03-22T11:59:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e I wasn\u0027t aware of that implementation. I also used section.GetChildren().Any() initially but the feedback is that we want to avoid LINQ in the source gen implementation.\r\n\r\nWe should use Exists in the source generator.\r\n\r\n\u003e I guess it would be helpful in the cases where there are no children so we avoid allocating a section.\r\n\r\nIt\u0027d only be helpful in the case where there was a section, but it was empty. \r\n\r\nIn the latter case [this](https://github.com/dotnet/runtime/blob/967250cc86b4c613015066b47b882e7424fdb590/src/libraries/Microsoft.Extensions.Configuration/src/InternalConfigurationRootExtensions.cs#L26-L30) looks like it can be optimized to avoid allocations for empty sections.",
                                           "updatedAt":  "2023-03-22T11:59:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YNJtA",
                                           "createdAt":  "2023-03-22T15:59:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e In the latter case [this](https://github.com/dotnet/runtime/blob/967250cc86b4c613015066b47b882e7424fdb590/src/libraries/Microsoft.Extensions.Configuration/src/InternalConfigurationRootExtensions.cs#L26-L30) looks like it can be optimized to avoid allocations for empty sections.\r\n\r\nhttps://github.com/dotnet/runtime/blob/967250cc86b4c613015066b47b882e7424fdb590/src/libraries/Microsoft.Extensions.Configuration/src/InternalConfigurationRootExtensions.cs#L26-L40\r\n\r\nI\u0027m seeing at least 4 allocations there:\r\n\r\n1. `Aggregate`\r\n2. `Distinct`\r\n3. `Select`\r\n4. Optionally the List being allocated \r\n5. Lastly the enumerator\r\n\r\n(There are actually more under the covers, as `source.GetChildKeys(seed, path)` internally creates a `List\u003cT\u003e`, and so does `Select`.)\r\n\r\nHere\u0027s a benchmark using `7.0.0`:\r\n\r\n```C#\r\n[MemoryDiagnoser]\r\npublic class ConfigurationSectionBenchmarks\r\n{\r\n    private readonly ConfigurationManager config;\r\n    private readonly IConfigurationSection section;\r\n\r\n    public ConfigurationSectionBenchmarks()\r\n    {\r\n        config = new ConfigurationManager();\r\n        section = config.GetSection(\"NotExist\");\r\n    }\r\n\r\n    [Benchmark]\r\n    public bool Exists() =\u003e section.Exists();\r\n}\r\n```\r\n\r\nAnd the results - almost half a KB is allocated every time you call `Exists()` on an empty section:\r\n\r\n| Method |     Mean |   Error |  StdDev |   Gen0 | Allocated |\r\n|------- |---------:|--------:|--------:|-------:|----------:|\r\n| Exists | 232.6 ns | 3.80 ns | 3.55 ns | 0.0765 |     480 B |\r\n\r\n\u003e It\u0027d only be helpful in the case where there was a section\r\n\r\nNote that there is always a section returned, even if it doesn\u0027t exist in the configuration:\r\n\r\nhttps://github.com/dotnet/runtime/blob/967250cc86b4c613015066b47b882e7424fdb590/src/libraries/Microsoft.Extensions.Configuration/src/ConfigurationManager.cs#L62\r\n\r\nWe will create an IConfigurationSection for each property in the object, whether that property has anything in the configuration or not. (Note the other implementations of GetSection are the same.)\r\n\r\n\u003e , but it was empty.\r\n\r\nThis would also help in the case where there is information in the configuration. Calling `GetChildren().Any()` just to check if there are any, and then calling `GetChildren()` again to actually enumerate them throws away the information built up above (the Aggregate, Distinct, Select, and most importantly the `ToList()` at the end).",
                                           "updatedAt":  "2023-03-22T15:59:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YPZFZ",
                                           "createdAt":  "2023-03-23T00:43:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Optimizing for an empty section seems like an edge case? What’s motivating that? ",
                                           "updatedAt":  "2023-03-23T00:43:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YPfQF",
                                           "createdAt":  "2023-03-23T01:26:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e Optimizing for an empty section seems like an edge case?\r\n\r\n1. It is optimizing for both empty and non-empty. When it is non-empty we are throwing the info away.\r\n2. It isn\u0027t really an edge case. Not every property in the object is always filled out in Configuration. For every property in the Type we will get a IConfigurationSection and then call `GetChildren().Any()` on it, whether it has a value in the configuration or not. So unless every property of the Options object has a value in the configuration, it isn\u0027t an edge case.",
                                           "updatedAt":  "2023-03-23T01:26:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YPiVr",
                                           "createdAt":  "2023-03-23T01:46:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e When it is non-empty we are throwing the info away.\r\n\r\nWhat do you mean?\r\n\r\n\u003e For every property in the Type we will get a IConfigurationSection and then call GetChildren().Any() on it, whether it has a value in the configuration or not. So unless every property of the Options object has a value in the configuration, it isn\u0027t an edge case.\r\n\r\nHow? When there\u0027s no section we only allocate the `IConfigurationSection` and the Value is null. Why would we do IConfigurationSection().Any() in that scenario?\r\n\r\nI don\u0027t see how that code above is allocating per call to Exists on an non-existent section... (what am I missing..). Also, how does the above API avoid allocating the `IConfigurationSection` for every property? Doesn\u0027t the code for object binding still call `GetSection(...).HasChildren`?\r\n\r\n",
                                           "updatedAt":  "2023-03-23T01:46:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YPjrk",
                                           "createdAt":  "2023-03-23T01:55:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e\u003e When it is non-empty we are throwing the info away.\r\n\r\n\u003e What do you mean?\r\n\r\nhttps://github.com/dotnet/runtime/blob/967250cc86b4c613015066b47b882e7424fdb590/src/libraries/Microsoft.Extensions.Configuration.Binder/src/ConfigurationBinder.cs#L303\r\n\r\nThat call to `GetChildren().Any()` allocates all the objects I outlined above just to check if there are any, and then throws that all away. Then inside the `if`, it calls`BindArray`, which then calls `GetChildren()` again to enumerate them:\r\n\r\nhttps://github.com/dotnet/runtime/blob/967250cc86b4c613015066b47b882e7424fdb590/src/libraries/Microsoft.Extensions.Configuration.Binder/src/ConfigurationBinder.cs#L734\r\n\r\n\u003e When there\u0027s no section we only allocate the IConfigurationSection and the Value is null. Why would we do IConfigurationSection().Any() in that scenario?\r\n\r\nhttps://github.com/dotnet/runtime/blob/967250cc86b4c613015066b47b882e7424fdb590/src/libraries/Microsoft.Extensions.Configuration.Abstractions/src/ConfigurationExtensions.cs#L78-L84\r\n\r\nNotice the `section.Value != null || section.GetChildren().Any()`. When the Value is null, the left hand side is `false` and the `GetChildren().Any()` will be called.\r\n\r\n\u003e Also, how does the above API avoid allocating the IConfigurationSection for every property?\r\n\r\nIt doesn\u0027t.",
                                           "updatedAt":  "2023-03-23T01:55:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YPk_P",
                                           "createdAt":  "2023-03-23T02:03:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC4oRZw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eerhardt",
                                                                               "createdAt":  "2023-03-23T13:51:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "layomia",
                                                                               "createdAt":  "2023-03-27T15:36:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "\u003e That call to GetChildren().Any() allocates all the objects I outlined above just to check if there are any, and then throws that all away. Then inside the if, it callsBindArray, which then calls GetChildren() again to enumerate them:\r\n\r\nOK I get it, when section.Value is null that isn\u0027t enough to determine that there\u0027s no children. This API is making more sense now 😄 . Sorry for the confusion.",
                                           "updatedAt":  "2023-03-23T02:03:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YSjD5",
                                           "createdAt":  "2023-03-23T14:04:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC4oRXg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "layomia",
                                                                               "createdAt":  "2023-03-27T15:36:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "FWIW, I don\u0027t necessarily see this as a \"must have\" API for .NET 8. Using the ConfigurationBinder source generator is going to give so much performance benefits over the reflection based ConfigurationBinder, these allocations aren\u0027t going to make that much of a difference. And I don\u0027t see ConfigurationBinder being on a \"hot path\" in most apps.",
                                           "updatedAt":  "2023-03-23T14:04:03Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "[API Proposal]: Add IConfiguration.HasChildren",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84240",
        "createdAt":  "2023-04-03T10:29:19Z",
        "number":  84240,
        "author":  "CuteLeon",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-14T10:05:00Z",
        "body":  "### Background and motivation\r\n\r\nHope Microsoft.Extensions.Configuration.Json package supports Saving modified configuration to external json file.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\npublic interface IConfiguration\r\n{\r\n  ISaveToken SetValue(string key, object value);\r\n}\r\n\r\npublic interface IConfigurationSource\r\n{\r\n  void Save(ISaveToken token);\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar configuration = this.serviceProvider.GetRequiredService\u003cIConfiguration\u003e();\r\nvar saveToken1 = configuration.SetValue(\"Appearance.Theme\", \"Dark\");\r\n// Or\r\nvar section = configuration.Get\u003c\u003e(\"Appearance\");\r\nvar saveToken2 = section.SetValue(\"Theme\", \"Dark\");\r\n\r\n// Save modifications to selected external json file source;\r\nvar source = configuration.Sources.Last();\r\nsource.Save(saveToken);\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nUpdate configtion values on IConfiguration object directly, and return a ISaveToken to trace this instruction.\r\nThen call configuration source\u0027s Save method and pass ISaveToken object, to save instrcution to selected configuration source.\r\n\r\n**Hope to support incrementally update of external configuration files: only update modified configurations related rows into the external configuration file, rather than completely overwriting the entire configuration file.**\r\n\r\n### Risks\r\n\r\nSelected configuration source may not support to accept configuration updating, throw an invalid operation exception.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWeZc-g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ZDcKk",
                                           "createdAt":  "2023-04-03T10:29:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nHope Microsoft.Extensions.Configuration.Json package supports Saving modified configuration to external json file.\n\n### API Proposal\n\n```csharp\r\npublic interface IConfiguration\r\n{\r\n  ISaveToken SetValue(string key, object value);\r\n}\r\n\r\npublic interface IConfigurationSource\r\n{\r\n  void Save(ISaveToken token);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvar configuration = this.serviceProvider.GetRequiredService\u003cIConfiguration\u003e();\r\nvar saveToken1 = configuration.SetValue(\"Appearance.Theme\", \"Dark\");\r\n// Or\r\nvar section = configuration.Get\u003c\u003e(\"Appearance\");\r\nvar saveToken2 = section.SetValue(\"Theme\", \"Dark\");\r\n\r\n// Save modifications to selected external json file source;\r\nvar source = configuration.Sources.Last();\r\nsource.Save(saveToken);\r\n```\r\n\n\n### Alternative Designs\n\nUpdate configtion values on IConfiguration object directly, and return a ISaveToken to trace this instruction.\r\nThen call configuration source\u0027s Save method and pass ISaveToken object, to save instrcution to selected configuration source.\n\n### Risks\n\nSelected configuration source may not support to accept configuration updating, throw an invalid operation exception.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCuteLeon\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-03T10:29:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZEojC",
                                           "createdAt":  "2023-04-03T14:04:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5Hu2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "CuteLeon",
                                                                               "createdAt":  "2023-04-03T14:05:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "CuteLeon",
                                           "body":  "Hope to support incrementally update of external configuration files: only update modified configurations related rows into the external configuration file, rather than completely overwriting the entire configuration file.",
                                           "updatedAt":  "2023-04-03T14:04:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Z5lz6",
                                           "createdAt":  "2023-04-14T10:04:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CuteLeon",
                                           "body":  "As Microsoft.Extensions.Configuration.Json already has ability to merge configurations from multiple json files and monitor to reload, it should also have the ability to identify source json file of each configuration item,thereby, save modified configuration items to identified source json file when call Save method and target configuration source file not provided.",
                                           "updatedAt":  "2023-04-14T10:04:59Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Hope Microsoft.Extensions.Configuration.Json package supports Saving modified configuration to external json file.",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85068",
        "createdAt":  "2023-04-19T20:25:36Z",
        "number":  85068,
        "author":  "ddbtrmatic",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-13T18:36:47Z",
        "body":  "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nStyle rule ASP0013 indicates minimal API application should set the base path directly on the builder, e.g. `builder.Configuration.SetBasePath()` for ASP apps. This doesn\u0027t appear to actually do anything at all, and the configuration values from the new base path are not accessible to the services.\r\n\r\n### Expected Behavior\r\n\r\n`builder.Configuration.SetBasePath()` should correctly update the app configuration providers to use the files from the new base path.\r\n\r\n### Steps To Reproduce\r\n\r\n\r\n```c#\r\n// MyConfig.cs\r\npublic class MyConfig {\r\n  public string ConfigKey {get;set;}\r\n}\r\n\r\n\r\n// Program.cs\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Configuration.SetBasePath(@\"C:\\config\");\r\n\r\n// prints nothing\r\nConsole.WriteLine(builder.Configuration[\"SomeSection:ConfigKey\"]);\r\n\r\n// error, section not found\r\nbuilder.Services.Configure\u003cMyConfig\u003e(builder.Configuration.GetRequiredSection(\"SomeSection\"));\r\n\r\nvar app = builder.Build();\r\n```\r\n\r\n```json\r\n// C:\\config\\appsettings.json\r\n{ \r\n  \"SomeSection\": {\r\n    \"ConfigKey\": \"value\" \r\n  }\r\n}\r\n```\r\n\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7.0.103\r\n\r\n### Anything else?\r\n\r\n.NET SDK:\r\n Version:   7.0.103\r\n Commit:    276c71d299\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.103\\\r\n\r\nHost:\r\n  Version:      7.0.3\r\n  Architecture: x64\r\n  Commit:       0a2bda10e8\r\n\r\n.NET SDKs installed:\r\n  7.0.101 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.103 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjA-ThQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5aUl_S",
                                           "createdAt":  "2023-04-19T20:37:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nStyle rule ASP0013 indicates minimal API application should set the base path directly on the builder, e.g. `builder.Configuration.SetBasePath()` for ASP apps. This doesn\u0027t appear to actually do anything at all, and the configuration values from the new base path are not accessible to the services.\r\n\r\n### Expected Behavior\r\n\r\n`builder.Configuration.SetBasePath()` should correctly update the app configuration providers to use the files from the new base path.\r\n\r\n### Steps To Reproduce\r\n\r\n\r\n```c#\r\n// MyConfig.cs\r\npublic class MyConfig {\r\n  public string ConfigKey {get;set;}\r\n}\r\n\r\n\r\n// Program.cs\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Configuration.SetBasePath(@\"C:\\config\");\r\n\r\n// prints nothing\r\nConsole.WriteLine(builder.Configuration[\"SomeSection:ConfigKey\"]);\r\n\r\n// error, section not found\r\nbuilder.Services.Configure\u003cMyConfig\u003e(builder.Configuration.GetRequiredSection(\"SomeSection\"));\r\n\r\nvar app = builder.Build();\r\n```\r\n\r\n```json\r\n// C:\\config\\appsettings.json\r\n{ \r\n  \"SomeSection\": {\r\n    \"ConfigKey\": \"value\" \r\n  }\r\n}\r\n```\r\n\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7.0.103\r\n\r\n### Anything else?\r\n\r\n.NET SDK:\r\n Version:   7.0.103\r\n Commit:    276c71d299\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.103\\\r\n\r\nHost:\r\n  Version:      7.0.3\r\n  Architecture: x64\r\n  Commit:       0a2bda10e8\r\n\r\n.NET SDKs installed:\r\n  7.0.101 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.103 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eddbtrmatic\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-19T20:37:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5adPzg",
                                           "createdAt":  "2023-04-21T10:24:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "feiyun0112",
                                           "body":  "beacuse \"appsettings.json\" file had been loaded when ` WebApplication.CreateBuilder`.\r\n\r\n[https://github.com/dotnet/runtime/blob/dc5a6c8be1644915c14c4a464447b0d54e223a46/src/libraries/Microsoft.Extensions.Hosting/src/HostingHostBuilderExtensions.cs#L234](https://github.com/dotnet/runtime/blob/dc5a6c8be1644915c14c4a464447b0d54e223a46/src/libraries/Microsoft.Extensions.Hosting/src/HostingHostBuilderExtensions.cs#L234)\r\n\r\nyou should load \"appsettings.json\" file after  SetBasePath\r\n\r\n`builder.Configuration.SetBasePath(@\"C:\\config\").AddJsonFile(\"appsettings.json\");`\r\n\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2023-04-21T10:24:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aiGlx",
                                           "createdAt":  "2023-04-22T22:40:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-04-22T22:40:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ajosT",
                                           "createdAt":  "2023-04-24T02:21:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMnS2g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "logavanc",
                                                                               "createdAt":  "2023-11-14T21:05:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ddbtrmatic",
                                           "body":  "\u003e beacuse \"appsettings.json\" file had been loaded when ` WebApplication.CreateBuilder`.\r\n\u003e \r\n\u003e https://github.com/dotnet/runtime/blob/dc5a6c8be1644915c14c4a464447b0d54e223a46/src/libraries/Microsoft.Extensions.Hosting/src/HostingHostBuilderExtensions.cs#L234\r\n\u003e \r\n\u003e you should load \"appsettings.json\" file after SetBasePath\r\n\u003e \r\n\u003e `builder.Configuration.SetBasePath(@\"C:\\config\").AddJsonFile(\"appsettings.json\");`\r\n\r\nThis is very confusing to me.\r\n\r\nWith a background service style application, I can follow this pattern and the default `appsettings` files will be read from the new base path as expected, without having to manually add each of the default settings files after calling `SetBasePath`.\r\n\r\n```c#\r\nIHost host = Host.CreateDefaultBuilder(args)\r\n    .ConfigureAppConfiguration((context, builder) =\u003e\r\n        {\r\n            builder.SetBasePath(@\"C:\\config\");\r\n        });\r\n```\r\n\r\nHowever, calling `ConfigureAppConfiguration` is specifically warned against (ASP0013) when using the minimal API, with direct calls to `builder.Configuration` recommended as a drop-in replacement. There is no documentation explaining the differences in behavior between these two methods.\r\n\r\nThere is also no documentation that I\u0027ve been able to find which indicates `SetBasePath` only effects files added after it is called. On the contrary, the documentation implies the base path is stored in only a single property and the files will be read relative to that property.\r\n\r\n```c#\r\n        /// \u003csummary\u003e\r\n        /// Adds the JSON configuration provider at \u003cparamref name=\"path\"/\u003e to \u003cparamref name=\"builder\"/\u003e.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"builder\"\u003eThe \u003csee cref=\"IConfigurationBuilder\"/\u003e to add to.\u003c/param\u003e\r\n        /// \u003cparam name=\"path\"\u003ePath relative to the base path stored in\r\n        /// \u003csee cref=\"IConfigurationBuilder.Properties\"/\u003e of \u003cparamref name=\"builder\"/\u003e.\u003c/param\u003e\r\n        /// \u003cparam name=\"optional\"\u003eWhether the file is optional.\u003c/param\u003e\r\n        /// \u003creturns\u003eThe \u003csee cref=\"IConfigurationBuilder\"/\u003e.\u003c/returns\u003e\r\n        public static IConfigurationBuilder AddJsonFile(this IConfigurationBuilder builder, string path, bool optional)\r\n        {\r\n            return AddJsonFile(builder, provider: null, path: path, optional: optional, reloadOnChange: false);\r\n        }\r\n```\r\n\r\n\r\nI\u0027m looking for clarification on this issue. Is it working as intended and the documentation is lacking clarity? Or is it a bug?\r\n\r\n\u003e This issue has been marked `needs-author-action` and may be missing some important information.\r\n\r\nI don\u0027t understand why this tag was added, or what action is required by me.",
                                           "updatedAt":  "2023-04-24T02:21:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5aoa6r",
                                           "createdAt":  "2023-04-24T17:14:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6ewow==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ddbtrmatic",
                                                                               "createdAt":  "2023-04-24T17:15:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e I\u0027m looking for clarification on this issue. Is it working as intended and the documentation is lacking clarity? Or is it a bug?\r\n\r\nThis is a documentation issue. I can see there is a chance to enhance the documentation to explain more how `SetBasePath` behave and affect the configuration. as indicated above, it is expected you call `AddJsonFile` to allow the configuration reading the added json file after setting the base path. I\u0027ll keep this issue open to track the documentation. ",
                                           "updatedAt":  "2023-04-24T17:14:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bVsKX",
                                           "createdAt":  "2023-05-03T03:25:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "cc @halter73 ",
                                           "updatedAt":  "2023-05-03T03:25:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5m1Vaq",
                                           "createdAt":  "2023-09-19T10:41:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Russell-Horwood",
                                           "body":  "Is there any method to re-add the default files (appsettings.json, appsettings.{Environment}.json)?\r\n\r\nOr, if I want the default files and behavior in a non-default folder, do I need to do the following?\r\n1. Remove the default files.\r\n2. Set a new base path.\r\n3. Reinvent the code in my app to add the default files.\r\n\r\n\u003chr/\u003e\r\n\r\nI suppose (1) isn\u0027t that important. This seems to do what I need.\r\n\r\n```cs\r\nWebApplicationBuilder builder = WebApplication.CreateBuilder(args);\r\nbuilder.Configuration.SetBasePath($\"{Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)}/Config\");\r\nbuilder.Configuration.AddJsonFile(\"appsettings.json\", true, true);\r\nbuilder.Configuration.AddJsonFile($\"appsettings.{builder.Environment.EnvironmentName}.json\", true, true);\r\n```",
                                           "updatedAt":  "2023-09-19T10:51:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wNJlP",
                                           "createdAt":  "2024-01-09T06:43:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PurplestViper",
                                           "body":  "@Russell-Horwood There is a way to reuse JsonConfigurationSource, this is what I use:\r\n```cs\r\nvar builder = WebApplication.CreateBuilder(args);\r\nvar oldFileProvider = builder.Configuration.GetFileProvider();\r\nforeach (var source in builder.Configuration.Sources)\r\n    if (source is FileConfigurationSource fileSource \u0026\u0026 fileSource.FileProvider == oldFileProvider)\r\n        fileSource.FileProvider = null;\r\nbuilder.Configuration.SetBasePath($\"{Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)}/Config\");\r\n```\r\n@tarekgh Request a feature to simply specify the configuration file directory when calling `WebApplication.CreateBuilder()`.",
                                           "updatedAt":  "2024-01-09T07:08:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6L983V",
                                           "createdAt":  "2024-09-13T07:51:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Russell-Horwood",
                                           "body":  "Thanks @PurplestViper. However, this approach unfortunately means that the file providers are loaded last and will override providers originally loaded after them.\r\n\r\nE.g. The default builder adds appsettings.json, then overrides with environment variables. I use this approach to specify to load appsettings.json from a custom folder then the values in the file will now take precedence over environment variables.\r\n\r\nI\u0027m looking for a way to have the default builder behavior exactly, but load files from a different folder. I want to containerize my app and allow users to configure it by mounting the folder that contains the settings file(s).\r\n\r\nI don\u0027t think this is currently possible without clearing and re-adding all the configuration sources in sequence.\r\n\r\n```cs\r\nWebApplicationBuilder? builder = WebApplication.CreateBuilder(args);\r\n\r\nstring configFolderPath = Path.Join\r\n(\r\n\tPath.GetDirectoryName(Assembly.GetExecutingAssembly().Location),\r\n\t\"Config\"\r\n);\r\n\r\nbuilder.Configuration.Sources.Clear();\r\nbuilder.Configuration.SetBasePath(configFolderPath);\r\nbuilder.Configuration.AddEnvironmentVariables(\"ASPNETCORE_\");\r\nbuilder.Configuration.AddInMemoryCollection([new KeyValuePair\u003cstring, string?\u003e(WebHostDefaults.WebRootKey, builder.Environment.ContentRootPath)]);\r\nbuilder.Configuration.AddEnvironmentVariables(\"DOTNET_\");\r\nbuilder.Configuration.AddJsonFile(\"appsettings.json\", optional: true);\r\nbuilder.Configuration.AddJsonFile($\"appsettings.{builder.Environment.EnvironmentName}.json\", optional: true);\r\nbuilder.Configuration.AddUserSecrets(Assembly.Load(builder.Environment.ApplicationName));\r\nbuilder.Configuration.AddEnvironmentVariables();\r\nbuilder.Configuration.AddCommandLine(args);\r\n```",
                                           "updatedAt":  "2024-09-13T08:12:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MDN3V",
                                           "createdAt":  "2024-09-13T17:49:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODyL2_A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Russell-Horwood",
                                                                               "createdAt":  "2024-09-13T18:33:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "PurplestViper",
                                           "body":  "@Russell-Horwood No, the sample code replaces the original `PhysicalFileProvider` with almost no side effects. If you read the source code, you will know that `SetBasePath` method replaces the original instance with a new instance of `PhysicalFileProvider`.\r\nhttps://github.com/dotnet/runtime/blob/924fc2a313c038a5b686b9775f8d66049b05f68e/src/libraries/Microsoft.Extensions.Configuration.FileExtensions/src/FileConfigurationExtensions.cs#L55-L61\r\nhttps://github.com/dotnet/runtime/blob/924fc2a313c038a5b686b9775f8d66049b05f68e/src/libraries/Microsoft.Extensions.Configuration.FileExtensions/src/FileConfigurationExtensions.cs#L23-L30\r\nThen reloads the `ConfigurationSources` list in order. \r\nhttps://github.com/dotnet/runtime/blob/924fc2a313c038a5b686b9775f8d66049b05f68e/src/libraries/Microsoft.Extensions.Configuration/src/ConfigurationManager.cs#L273-L281\r\nhttps://github.com/dotnet/runtime/blob/924fc2a313c038a5b686b9775f8d66049b05f68e/src/libraries/Microsoft.Extensions.Configuration/src/ConfigurationManager.cs#L144-L147\r\nWhen reloading `FileConfigurationSource`, you need to clear the `FileProvider` property to use the newly created `PhysicalFileProvider` instance.\r\nhttps://github.com/dotnet/runtime/blob/924fc2a313c038a5b686b9775f8d66049b05f68e/src/libraries/Microsoft.Extensions.Configuration.Json/src/JsonConfigurationSource.cs#L18-L22\r\nhttps://github.com/dotnet/runtime/blob/924fc2a313c038a5b686b9775f8d66049b05f68e/src/libraries/Microsoft.Extensions.Configuration.FileExtensions/src/FileConfigurationSource.cs#L59-L63\r\nThe above process does not destroy the order of the `ConfigurationSources` list, but reloads all configuration resources. If Microsoft is willing to read environment variables or command line parameters here, it can switch the loading location of `appsettings.json` during the initialization phase.\r\nhttps://github.com/dotnet/runtime/blob/924fc2a313c038a5b686b9775f8d66049b05f68e/src/libraries/Microsoft.Extensions.Hosting/src/HostingHostBuilderExtensions.cs#L241-L242",
                                           "updatedAt":  "2024-09-13T18:36:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MD5OF",
                                           "createdAt":  "2024-09-13T18:34:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Russell-Horwood",
                                           "body":  "@PurplestViper \r\n\r\nShut my mouth. I thought I tested this earlier and observed the behavior I stated, but upon revisiting after your reply it appears that I was wrong. \r\n\r\nThank you.",
                                           "updatedAt":  "2024-09-13T18:35:18Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "builder.SetBasePath does not work as expected",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86456",
        "createdAt":  "2023-05-18T17:46:50Z",
        "number":  86456,
        "author":  "adamsitnik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCwLSJw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MaceWindu",
                                            "createdAt":  "2023-05-19T09:21:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "campersau",
                                            "createdAt":  "2023-05-19T10:32:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ShreyasJejurkar",
                                            "createdAt":  "2023-05-19T12:14:32Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-04-26T17:13:39Z",
        "body":  "### Background and motivation\r\n\r\nWhen working on https://github.com/dotnet/runtime/issues/86146 I\u0027ve realized that  `ConfigurationBuilder.Build` returns an instance of `IConfigurationRoot`, which does not derive from `IDisposable`, but all implementations of `IConfigurationRoot` implement `IDisposable`. So the users need to cast the result returned by `ConfigurationBuilder.Build`  to `IDisposable` and call `Dispose` themselves to cleanup the resources properly.\r\n\r\n```cs\r\nIConfigurationRoot config = new ConfigurationBuilder().AddXmlFile(\"settings.xml\", false, true).Build();\r\n\r\n(config as IDisposable)?.Dispose();\r\n```\r\n\r\n### API Proposal\r\n\r\n```diff\r\nnamespace Microsoft.Extensions.Configuration;\r\n\r\n- public interface IConfigurationRoot : IConfiguration\r\n+ public interface IConfigurationRoot : IConfiguration, IDisposable\r\n{\r\n    /// \u003csummary\u003e\r\n    /// Force the configuration values to be reloaded from the underlying \u003csee cref=\"IConfigurationProvider\"/\u003es.\r\n    /// \u003c/summary\u003e\r\n    void Reload();\r\n\r\n    /// \u003csummary\u003e\r\n    /// The \u003csee cref=\"IConfigurationProvider\"/\u003es for this configuration.\r\n    /// \u003c/summary\u003e\r\n    IEnumerable\u003cIConfigurationProvider\u003e Providers { get; }\r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```csharp\r\nusing IConfigurationRoot config = new ConfigurationBuilder().AddXmlFile(\"settings.xml\", false, true).Build();\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nAny custom implementations of `IConfigurationRoot` that don\u0027t implement `IDisposable` will have to implement it, moreover users of `IConfigurationRoot` will most likely get a compiler warning about not disposing the instance.\r\n\r\nWithout introducing the mentioned changes we risk common resource leaks like in #86146.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOe_bjZw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5clxgb",
                                           "createdAt":  "2023-05-18T17:46:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nWhen working on https://github.com/dotnet/runtime/issues/86146 I\u0027ve realized that  `ConfigurationBuilder.Build` returns an instance of `IConfigurationRoot`, which does not derive from `IDisposable`, but all implementations of `IConfigurationRoot` implement `IDisposable`. So the users need to cast the result returned by `ConfigurationBuilder.Build`  to `IDisposable` and call `Dispose` themselves to cleanup the resources properly.\r\n\r\n```cs\r\nIConfigurationRoot config = new ConfigurationBuilder().AddXmlFile(\"settings.xml\", false, true).Build();\r\n\r\n(config as IDisposable)?.Dispose();\r\n```\n\n### API Proposal\n\n```diff\r\nnamespace Microsoft.Extensions.Configuration;\r\n\r\n- public interface IConfigurationRoot : IConfiguration\r\n+ public interface IConfigurationRoot : IConfiguration, IDisposable\r\n{\r\n    /// \u003csummary\u003e\r\n    /// Force the configuration values to be reloaded from the underlying \u003csee cref=\"IConfigurationProvider\"/\u003es.\r\n    /// \u003c/summary\u003e\r\n    void Reload();\r\n\r\n    /// \u003csummary\u003e\r\n    /// The \u003csee cref=\"IConfigurationProvider\"/\u003es for this configuration.\r\n    /// \u003c/summary\u003e\r\n    IEnumerable\u003cIConfigurationProvider\u003e Providers { get; }\r\n}\r\n```\n\n### API Usage\n\n```csharp\r\nusing IConfigurationRoot config = new ConfigurationBuilder().AddXmlFile(\"settings.xml\", false, true).Build();\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nAny custom implementations of `IConfigurationRoot` that don\u0027t implement `IDisposable` will have to implement it.\r\n\r\nWithout introducing the mentioned changes we risk common resource leaks like in #86146.\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eadamsitnik\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-18T17:46:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55m9I4",
                                           "createdAt":  "2024-04-05T16:51:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I\u0027m not sure the IConfigurationRoot is solely responsible for owning the FileProvider.  Instead I think we should try to look at what\u0027s the best practice for lifetime management (and instance management) of the FileProvider.  IMO it should be higher in the stack here.  Might make sense to ask the original architects what they had in mind @davidfowl @eerhardt @halter73",
                                           "updatedAt":  "2024-04-05T16:51:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc553BKh",
                                           "createdAt":  "2024-04-09T08:44:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e I\u0027m not sure the IConfigurationRoot is solely responsible for owning the FileProvider.\r\n\r\nMy main goal of this proposal was to prevent similar resource leaks by letting the users know that `ConfigurationBuilder.Build` always returns something that implements `IDisposable`. I expect that very few users perform following `IDisposable` check:\r\n\r\n```cs\r\nIConfigurationRoot config = new ConfigurationBuilder().Build();\r\n\r\n(config as IDisposable)?.Dispose(); // this is the problem\r\n```\r\n\r\nIn most cases it\u0027s probably fine, as the config usually lives as long as the app does. But it\u0027s definitely not 100% of all the use cases (a good example are test projects which may create a lot of such instances). ",
                                           "updatedAt":  "2024-04-09T08:44:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc579uNn",
                                           "createdAt":  "2024-04-26T17:13:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "My point was that I\u0027m not convinced that `IConfigurationRoot` / `IConfigurationProvider` should be the one\u0027s who own the file provider.  For them to solely own it - that\u0027s an awful lot of `FileProviders` we end up creating.  So if they don\u0027t own it then some other component would own it and these would need to implement ref-counting.  \r\n\r\nI think a better solution is that we have a single `FileProvider` and try to plumb the lifetime of that into some part of the app model so that we don\u0027t need ref counting.",
                                           "updatedAt":  "2024-04-26T17:13:39Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: IConfigurationRoot should derive from IDisposable",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88110",
        "createdAt":  "2023-06-27T21:18:45Z",
        "number":  88110,
        "author":  "layomia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCw-GRg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eerhardt",
                                            "createdAt":  "2023-06-27T22:02:41Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-26T10:40:40Z",
        "body":  "From @eerhardt in https://github.com/dotnet/runtime/pull/88067#discussion_r1242904960:\r\n\r\n\u003e The new code genn\u0027d code looks like:\r\n\u003e \r\n\u003e ```cs\r\n\u003e             foreach (IConfigurationSection section in configuration.GetChildren())\r\n\u003e             {\r\n\u003e                 switch (section.Key)\r\n\u003e                 {\r\n\u003e                     case \"IncludeScopes\":\r\n\u003e                         {\r\n\u003e                             if (configuration[\"IncludeScopes\"] is string stringValue21)\r\n\u003e                             {\r\n\u003e                                 obj.IncludeScopes = ParseBool(stringValue21, () =\u003e section.Path)!;\r\n\u003e                             }\r\n\u003e                         }\r\n\u003e                         break;\r\n\u003e ```\r\n\u003e \r\n\u003e Why do we need a `foreach` through all the children, a switch statement, and then the indexer for the specific property? That is too much overhead (For example, GetChildren always allocs - a lot - because it uses LINQ). I would think the code genn\u0027d code should look like this hand-written code.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZMKvKA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5f-jo8",
                                           "createdAt":  "2023-06-27T21:18:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFrom @eerhardt in https://github.com/dotnet/runtime/pull/88067#discussion_r1242904960:\r\n\r\n\u003e The new code genn\u0027d code looks like:\r\n\u003e \r\n\u003e ```cs\r\n\u003e             foreach (IConfigurationSection section in configuration.GetChildren())\r\n\u003e             {\r\n\u003e                 switch (section.Key)\r\n\u003e                 {\r\n\u003e                     case \"IncludeScopes\":\r\n\u003e                         {\r\n\u003e                             if (configuration[\"IncludeScopes\"] is string stringValue21)\r\n\u003e                             {\r\n\u003e                                 obj.IncludeScopes = ParseBool(stringValue21, () =\u003e section.Path)!;\r\n\u003e                             }\r\n\u003e                         }\r\n\u003e                         break;\r\n\u003e ```\r\n\u003e \r\n\u003e Why do we need a `foreach` through all the children, a switch statement, and then the indexer for the specific property? That is too much overhead (For example, GetChildren always allocs - a lot - because it uses LINQ). I would think the code genn\u0027d code should look like this hand-written code.\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elayomia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003elayomia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `source-generator`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-27T21:18:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gDcST",
                                           "createdAt":  "2023-06-28T14:25:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Would it make sense to generate code similar to how the reflection based ConfigurationBinder handles `ErrorOnUnknownConfiguration`?\r\n\r\nhttps://github.com/dotnet/runtime/blob/e5ddc6c9b7e481d36d6350960868188d7b275ef7/src/libraries/Microsoft.Extensions.Configuration.Binder/src/ConfigurationBinder.cs#L218-L234\r\n\r\nWe could generate the set of property names into the HashSet, loop over all GetChildren(), and check the HashSet.\r\n\r\nDoing this outside of the property binding (and only when `ErrorOnUnknownConfiguration` is true) means that for the default case, the code can just be generated like the hand-written code in #88067.",
                                           "updatedAt":  "2023-06-28T14:25:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gEnDE",
                                           "createdAt":  "2023-06-28T17:32:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "You might even be able to interleave the handling of `ErrorOnUnknownConfiguration` by creating the hashset up front, removing as you bind each property, then erroring at the end if anything was left in the set.",
                                           "updatedAt":  "2023-06-28T17:32:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iHPJQ",
                                           "createdAt":  "2023-07-21T18:03:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "layomia",
                                           "body":  "Closing as fixed in https://github.com/dotnet/runtime/pull/88338. There\u0027s now minimal impact to perf and size given the updated code to honor `BinderOptions`.",
                                           "updatedAt":  "2023-07-21T18:03:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kwpQN",
                                           "createdAt":  "2023-08-23T18:51:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "layomia",
                                           "body":  "From @stephentoub in https://github.com/dotnet/runtime/issues/90973:\r\n\r\n---\r\n\r\nFor a use like:\r\n```C#\r\ninternal class C1\r\n{\r\n    public int Value { get; set; }\r\n\r\n    public static void M(IConfiguration configuration, C1 c) =\u003e configuration.Bind(c);\r\n}\r\n```\r\nthe config generator emits:\r\n```C#\r\n        public static void Bind_C1(this IConfiguration configuration, object? obj)\r\n        {\r\n            ...\r\n            var typedObj = (C1)obj;\r\n            BindCore(configuration, ref typedObj, binderOptions: null);\r\n        }\r\n```\r\nwhere the `BindCore` method is always called with `binderOptions: null` (it\u0027s only non-null when a different overload of `Bind` is used).  In turn, `BindCore` is emitted as:\r\n```C#\r\n        public static void BindCore(IConfiguration configuration, ref C1 obj, BinderOptions? binderOptions)\r\n        {\r\n            ValidateConfigurationKeys(typeof(C1), s_configKeys_C1, configuration, binderOptions);\r\n\r\n            if (configuration[\"Value\"] is string value15)\r\n            {\r\n                obj.Value = ParseInt(value15, () =\u003e configuration.GetSection(\"Value\").Path);\r\n            }\r\n        }\r\n```\r\nIf for a given type (in this case `C1`), binderOptions is always going to be null, there\u0027s no need to accept a BinderOptions, which also means there\u0027s no need to emit a call to `ValidateConfigurationKeys`, which is a nop if a null BinderOptions is used, and it means there\u0027s no need for the `private readonly static Lazy\u003cHashSet\u003cstring\u003e\u003e s_configKeys_C1 = new(() =\u003e new HashSet\u003cstring\u003e(StringComparer.OrdinalIgnoreCase) { \"Value\" });`, which is only used as an argument to `ValidateConfigurationKeys`.  And if nothing in the assembly needs `ValidateConfigurationKeys` it doesn\u0027t need to be emitted, either.",
                                           "updatedAt":  "2023-08-23T18:51:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kwq8o",
                                           "createdAt":  "2023-08-23T18:56:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "layomia",
                                           "body":  "Generation can be improved here; not inclined to address in 8.0. I\u0027m considering transitive cases where the same root type appears transitively in the graph of a different call. Conditional generation might regress the handling of such cases.",
                                           "updatedAt":  "2023-08-23T18:56:18Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Avoid emitting code that honors BinderOptions when not specified in binding call",
        "labels":  [
                       "enhancement",
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88240",
        "createdAt":  "2023-06-30T11:03:10Z",
        "number":  88240,
        "author":  "bmatatuk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCNWWQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KorsG",
                                            "createdAt":  "2024-10-23T11:11:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Trivivium",
                                            "createdAt":  "2025-05-09T13:20:19Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-07-02T21:03:23Z",
        "body":  "### Description\r\n\r\nMy .net core webapi, when run locally under kestrel or on IIS detects appsettings.json change and I can see the same in the logs in the console. But, when I host this as an Azure App Service (Linux), the change log entry is not seen under the log. I have to restart the app service for it to reload the changed settings.\r\n\r\n\r\n**Findings**\r\nI am attaching a my startup.cs code and also a screenshot of the logs on the console screen.\r\n![image](https://github.com/dotnet/runtime/assets/17520551/73b414fb-e48e-4038-805a-08bcc9a8abb7)\r\nThe logs inside the red box does not appear when run as Azure App Service.\r\n\r\n**My Startup.cs**\r\n\r\n```C#\r\n    public class Startup\r\n    {\r\n        public IConfiguration Configuration { get; }\r\n        private readonly ILogger _logger ;\r\n\r\n        public Startup(IConfiguration configuration)\r\n        {                     \r\n            using var loggerFactory = LoggerFactory.Create(builder =\u003e\r\n            {\r\n                builder.SetMinimumLevel(LogLevel.Information);\r\n                builder.AddConsole();\r\n                builder.AddEventSourceLogger();\r\n            });\r\n\r\n            _logger = loggerFactory.CreateLogger\u003cStartup\u003e(); \r\n            \r\n            Configuration = configuration;\r\n            _logger.LogInformation(\"*** In Startup Constructor *** \");\r\n            var tokenChange = Configuration.GetReloadToken();\r\n            \r\n            tokenChange.RegisterChangeCallback(LogConfigChange, default);\r\n            \r\n        }\r\n        private void LogConfigChange(object state)\r\n        {\r\n            _logger.LogInformation(\"*** Config changed detected *** \");\r\n        }\r\n\r\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\r\n        {\r\n            if (env.IsDevelopment())\r\n            {\r\n                app.UseDeveloperExceptionPage();\r\n            }\r\n            \r\n            app.UseRouting();\r\n      \r\n            app.UseEndpoints(endpoints =\u003e\r\n            {\r\n                endpoints.MapGet(\"/\", async context =\u003e\r\n                {\r\n                    await context.Response.WriteAsync(\"Hello World!\");\r\n                });\r\n                \r\n                \r\n            });\r\n        }\r\n    }\r\n```\r\n### Reproduction Steps\r\n\r\nWrite a .net core webapi in net 6 or 7 and use the startup.cs code provided. Host it on Azure App Service (Linux) on UK South region.\r\nChange the appsettings.json and upload using SFTP and check the Log Stream on Azure portal to check log entries.\r\n\r\n### Expected behavior\r\n\r\nLike locally hosted or on IIS, as soon as the appsettings.json is changed, it must find detect the change.\r\n\r\n### Actual behavior\r\n\r\nWhen hosted localled or running under IIS, when appsettings.json is change (using any editor), as soon as a change is saved, it detects the change and is logged in the console. But, the same app runnning as Azure app service does not detect any setting changes. Also tried to change the setting file using bash \u003e vi editor. But that too didn\u0027t work.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nSo far, I had to restart the app service to refetch or reload the new setting changes.\r\n\r\n### Configuration\r\n\r\ndotnet version: 6.0\r\nAzure App Service (Linux), UK South\r\nappsettings.json is changed and uploaded using SFTP.\r\nAppSetting is just the default system generated one\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYF5Yyw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5gXljL",
                                           "createdAt":  "2023-07-02T19:38:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nMy .net core webapi, when run locally under kestrel or on IIS detects appsettings.json change and I can see the same in the logs in the console. But, when I host this as an Azure App Service (Linux), the change log entry is not seen under the log. I have to restart the app service for it to reload the changed settings.\r\n\r\n\r\n**Findings**\r\nI am attaching a my startup.cs code and also a screenshot of the logs on the console screen.\r\n![image](https://github.com/dotnet/runtime/assets/17520551/73b414fb-e48e-4038-805a-08bcc9a8abb7)\r\nThe logs inside the red box does not appear when run as Azure App Service.\r\n\r\n**My Startup.cs**\r\n\r\n`    public class Startup\r\n    {\r\n        public IConfiguration Configuration { get; }\r\n        private readonly ILogger _logger ;\r\n\r\n        public Startup(IConfiguration configuration)\r\n        {                     \r\n            using var loggerFactory = LoggerFactory.Create(builder =\u003e\r\n            {\r\n                builder.SetMinimumLevel(LogLevel.Information);\r\n                builder.AddConsole();\r\n                builder.AddEventSourceLogger();\r\n            });\r\n\r\n            _logger = loggerFactory.CreateLogger\u003cStartup\u003e(); \r\n            \r\n            Configuration = configuration;\r\n            _logger.LogInformation(\"*** In Startup Constructor *** \");\r\n            var tokenChange = Configuration.GetReloadToken();\r\n            \r\n            tokenChange.RegisterChangeCallback(LogConfigChange, default);\r\n            \r\n        }\r\n        private void LogConfigChange(object state)\r\n        {\r\n            _logger.LogInformation(\"*** Config changed detected *** \");\r\n        }\r\n\r\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\r\n        {\r\n            if (env.IsDevelopment())\r\n            {\r\n                app.UseDeveloperExceptionPage();\r\n            }\r\n            \r\n            app.UseRouting();\r\n      \r\n            app.UseEndpoints(endpoints =\u003e\r\n            {\r\n                endpoints.MapGet(\"/\", async context =\u003e\r\n                {\r\n                    await context.Response.WriteAsync(\"Hello World!\");\r\n                });\r\n                \r\n                \r\n            });\r\n        }\r\n    }`\n\n### Reproduction Steps\n\nWrite a .net core webapi in net 6 or 7 and use the startup.cs code provided. Host it on Azure App Service (Linux) on UK South region.\r\nChange the appsettings.json and upload using SFTP and check the Log Stream on Azure portal to check log entries.\n\n### Expected behavior\n\nLike locally hosted or on IIS, as soon as the appsettings.json is changed, it must find detect the change.\n\n### Actual behavior\n\nWhen hosted localled or running under IIS, when appsettings.json is change (using any editor), as soon as a change is saved, it detects the change and is logged in the console. But, the same app runnning as Azure app service does not detect any setting changes. Also tried to change the setting file using bash \u003e vi editor. But that too didn\u0027t work.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nSo far, I had to restart the app service to refetch or reload the new setting changes.\n\n### Configuration\n\ndotnet version: 6.0\r\nAzure App Service (Linux), UK South\r\nappsettings.json is changed and uploaded using SFTP.\r\nAppSetting is just the default system generated one\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebmatatuk\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-02T19:38:33Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "AppSettings.json change detection not working on Azure App Service (Linux)",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89043",
        "createdAt":  "2023-07-17T20:14:24Z",
        "number":  89043,
        "author":  "layomia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:40:41Z",
        "body":  "Matching concrete type = actual type to instantiate when binding if needed, e.g.\r\nIList\u003cT\u003e -\u003e List\u003cT\u003e\r\nIDictionary\u003c,\u003e -\u003e Dictionary\u003c,\u003e\r\n\r\n---\r\n\r\nUsing the `Geolocation` type from @martincostello\u0027s repro for https://github.com/dotnet/runtime/issues/89010, if an interface such as `IList\u003cT\u003e` or `IDictionary\u003c,\u003e` is the target binding type, the generator emits logic for both the interfaces and matching config types e.g.\r\n\r\n```cs\r\n[Fact]\r\npublic void Struct_As_Dictionary_Element()\r\n{\r\n    var configuration = TestHelpers.GetConfigurationFromJsonString(\"\"\"\r\n        {\r\n            \"First\":\r\n            {\r\n                \"Latitude\": 3,\r\n                \"Longitude\": 4,\r\n            }\r\n        }\r\n        \"\"\");\r\n\r\n    Geolocation obj = configuration.Get\u003cIDictionary\u003cstring, Geolocation\u003e\u003e()[\"First\"];\r\n    Assert.Equal(3, obj.Latitude);\r\n    Assert.Equal(4, obj.Longitude);\r\n}\r\n```\r\n\r\nGenerated (buggy output per https://github.com/dotnet/runtime/issues/89010): \r\n\r\n```cs\r\npublic static void BindCore(IConfiguration configuration, ref IDictionary\u003cstring, ConfigurationBinderTests.Geolocation\u003e obj, BinderOptions? binderOptions)\r\n{\r\n    if (obj is null)\r\n    {\r\n        throw new ArgumentNullException(nameof(obj));\r\n    }\r\n\r\n    foreach (IConfigurationSection section in configuration.GetChildren())\r\n    {\r\n        if (!(obj.TryGetValue(section.Key, out ConfigurationBinderTests.Geolocation element)))\r\n        {\r\n            element = InitializeConfigurationBinderTestsGeolocation(section, binderOptions);\r\n        }\r\n        var temp439 = InitializeConfigurationBinderTestsGeolocation(section, binderOptions);\r\n        BindCore(section, ref temp439, binderOptions);\r\n        element! = temp439;\r\n        obj[section.Key] = element;\r\n    }\r\n}\r\n\r\npublic static void BindCore(IConfiguration configuration, ref Dictionary\u003cstring, ConfigurationBinderTests.Geolocation\u003e obj, BinderOptions? binderOptions)\r\n{\r\n    if (obj is null)\r\n    {\r\n        throw new ArgumentNullException(nameof(obj));\r\n    }\r\n\r\n    foreach (IConfigurationSection section in configuration.GetChildren())\r\n    {\r\n        if (!(obj.TryGetValue(section.Key, out ConfigurationBinderTests.Geolocation element)))\r\n        {\r\n            element = InitializeConfigurationBinderTestsGeolocation(section, binderOptions);\r\n        }\r\n        var temp438 = InitializeConfigurationBinderTestsGeolocation(section, binderOptions);\r\n        BindCore(section, ref temp438, binderOptions);\r\n        element! = temp438;\r\n        obj[section.Key] = element;\r\n    }\r\n}\r\n```\r\n\r\nWe only need one of these methods.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh6ztFw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5hrjDa",
                                           "createdAt":  "2023-07-17T20:14:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027size-reduction\u0027: @eerhardt, @SamMonoRT, @marek-safar\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nUsing the `Geolocation` type from @martincostello\u0027s repro for https://github.com/dotnet/runtime/issues/89010, if a interface such as `IList\u003cT\u003e` or `IDictionary\u003c,\u003e` is the target binding type, the generator emits logic for both the interfaces and mapping config types e.g.\r\n\r\n```cs\r\n[Fact]\r\npublic void Struct_As_Dictionary_Element()\r\n{\r\n    var configuration = TestHelpers.GetConfigurationFromJsonString(\"\"\"\r\n        {\r\n            \"First\":\r\n            {\r\n                \"Latitude\": 3,\r\n                \"Longitude\": 4,\r\n            }\r\n        }\r\n        \"\"\");\r\n\r\n    Geolocation obj = configuration.Get\u003cIDictionary\u003cstring, Geolocation\u003e\u003e()[\"First\"];\r\n    Assert.Equal(3, obj.Latitude);\r\n    Assert.Equal(4, obj.Longitude);\r\n}\r\n```\r\n\r\nGenerated (buggy output per https://github.com/dotnet/runtime/issues/89010): \r\n\r\n```cs\r\npublic static void BindCore(IConfiguration configuration, ref IDictionary\u003cstring, ConfigurationBinderTests.Geolocation\u003e obj, BinderOptions? binderOptions)\r\n{\r\n    if (obj is null)\r\n    {\r\n        throw new ArgumentNullException(nameof(obj));\r\n    }\r\n\r\n    foreach (IConfigurationSection section in configuration.GetChildren())\r\n    {\r\n        if (!(obj.TryGetValue(section.Key, out ConfigurationBinderTests.Geolocation element)))\r\n        {\r\n            element = InitializeConfigurationBinderTestsGeolocation(section, binderOptions);\r\n        }\r\n        var temp439 = InitializeConfigurationBinderTestsGeolocation(section, binderOptions);\r\n        BindCore(section, ref temp439, binderOptions);\r\n        element! = temp439;\r\n        obj[section.Key] = element;\r\n    }\r\n}\r\n\r\npublic static void BindCore(IConfiguration configuration, ref Dictionary\u003cstring, ConfigurationBinderTests.Geolocation\u003e obj, BinderOptions? binderOptions)\r\n{\r\n    if (obj is null)\r\n    {\r\n        throw new ArgumentNullException(nameof(obj));\r\n    }\r\n\r\n    foreach (IConfigurationSection section in configuration.GetChildren())\r\n    {\r\n        if (!(obj.TryGetValue(section.Key, out ConfigurationBinderTests.Geolocation element)))\r\n        {\r\n            element = InitializeConfigurationBinderTestsGeolocation(section, binderOptions);\r\n        }\r\n        var temp438 = InitializeConfigurationBinderTestsGeolocation(section, binderOptions);\r\n        BindCore(section, ref temp438, binderOptions);\r\n        element! = temp438;\r\n        obj[section.Key] = element;\r\n    }\r\n}\r\n```\r\n\r\nWe only need one of these methods.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elayomia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003elayomia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`enhancement`, `area-Extensions-Configuration`, `size-reduction`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-17T20:14:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HrO0X",
                                           "createdAt":  "2024-08-08T16:49:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I looked at this and it will be more than just a small fix - we don\u0027t always generated duplicates - instead we should change what bind methods we produce when we know we will treat the concreate type as it\u0027s interface and move the interface cast up above the bindcore call.",
                                           "updatedAt":  "2024-08-08T16:49:50Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "When binding to interface collections, config generator shouldn\u0027t generate logic for both interface \u0026 mapping collection type.",
        "labels":  [
                       "enhancement",
                       "area-Extensions-Configuration",
                       "size-reduction",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89318",
        "createdAt":  "2023-07-21T17:25:30Z",
        "number":  89318,
        "author":  "layomia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJCDFw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "BasicallyIAmFox",
                                            "createdAt":  "2023-08-20T17:20:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "viceroypenguin",
                                            "createdAt":  "2023-08-20T19:18:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AntonC9018",
                                            "createdAt":  "2023-08-20T19:23:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nike4613",
                                            "createdAt":  "2023-08-20T19:24:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jscarle",
                                            "createdAt":  "2024-03-08T03:03:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Myliak",
                                            "createdAt":  "2024-08-15T11:28:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MitchRazga",
                                            "createdAt":  "2025-07-29T20:18:14Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2025-07-26T10:40:42Z",
        "body":  "Based on [feedback](https://github.com/layomia/dotnet_runtime/commit/34db20bbec3e9965b8b8e7777caae59684f8ccb4#r122314896) from @eiriktsarpalis.\r\n\r\n`ImmutableEquatableArray\u003cT\u003e`  implements sequence equality. The JSON generator uses it in its [specs](https://github.com/dotnet/runtime/tree/a864ec70925181f00c38e15e4b1896f2584953c4/src/libraries/System.Text.Json/gen/Model) to make incremental generation possible. However, spec collections often need to have [set-like semantics](https://github.com/dotnet/runtime/blob/a864ec70925181f00c38e15e4b1896f2584953c4/src/libraries/System.Text.Json/gen/JsonSourceGenerator.Parser.cs#L148) to retain equality \u0026 avoid regeneration when there are compilation diffs that don\u0027t affect the effective inputs to the generator. IOW we want to avoid false negatives in the incremental cache.\r\n\r\nAn upcoming PR to enable incremental generation for the config binding generator (https://github.com/dotnet/runtime/issues/83534) will share this type. As a follow up to that PR, we should create a new type (say `ImmutableEquatableSet\u003cT\u003e`) that guarantees set semantics by construction, following the implementation of `SortedList\u003cT\u003e`. This would avoid false negatives in the incremental cache.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh3vP8g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5iHFbd",
                                           "createdAt":  "2023-07-21T17:25:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nBased on [feedback](https://github.com/layomia/dotnet_runtime/commit/34db20bbec3e9965b8b8e7777caae59684f8ccb4#r122314896) from @eiriktsarpalis.\r\n\r\n`ImmutableEquatableArray\u003cT\u003e`  implements sequence equality. The JSON generator uses it in its [specs](https://github.com/dotnet/runtime/tree/a864ec70925181f00c38e15e4b1896f2584953c4/src/libraries/System.Text.Json/gen/Model) to make incremental generation possible. However, the lists often need to have [set-like semantics](https://github.com/dotnet/runtime/blob/a864ec70925181f00c38e15e4b1896f2584953c4/src/libraries/System.Text.Json/gen/JsonSourceGenerator.Parser.cs#L148) to retain equality \u0026 avoid regeneration when there are compilation diffs that don\u0027t affect the effective inputs to the generator. Currently, parsed elements (cached in intermediary data structures) are sorted before construction of the incremental lists / containing specs.\r\n\r\nAn upcoming PR to enable incremental generation for the config binding generator (https://github.com/dotnet/runtime/issues/83534) will share this type, and also needs to sort elements before construction. As a follow up to that PR, we should create a new type (say `ImmutableEquatableSortedList\u003cT\u003e`) that guarantees set semantics by construction following the implementation of `SortedList\u003cT\u003e`. This would avoid intermediate lists, pre-sorting, and avoiding false negatives in the incremental cache.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elayomia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `source-generator`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-21T17:25:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iHHA1",
                                           "createdAt":  "2023-07-21T17:32:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODuP_TA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "layomia",
                                                                               "createdAt":  "2023-07-21T17:40:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Myliak",
                                                                               "createdAt":  "2024-08-15T11:30:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "For simplicity we might just call it `ImmutableEquatableSet\u003cT\u003e` and I suspect we might eventually need an `ImmutableEquatableDictionary` too.",
                                           "updatedAt":  "2023-07-21T17:32:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iJFFh",
                                           "createdAt":  "2023-07-22T09:58:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODuP_Sg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pinkfloydx33",
                                                                               "createdAt":  "2023-07-22T13:50:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TrayanZapryanov",
                                                                               "createdAt":  "2023-10-08T16:01:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Myliak",
                                                                               "createdAt":  "2024-08-15T11:30:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Tornhoof",
                                           "body":  "Can we get an oob nuget package with the sources of such collections as content files?\r\n\r\nAt the moment most src gens simply copy the Array type around or fail to understand that they are practically necessary for proper caching.\r\n\r\nWhy Nuget with source files as content? Binary Nugets with src gens are quite complicated to get them working properly.",
                                           "updatedAt":  "2023-07-22T09:58:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iNb9M",
                                           "createdAt":  "2023-07-24T10:58:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e Can we get an oob nuget package with the sources of such collections as content files?\r\n\r\nWe should definitely consider something like this eventually, once the proposed new types have been tried and tested internally.",
                                           "updatedAt":  "2023-07-24T10:59:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jsOxq",
                                           "createdAt":  "2023-08-10T04:34:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AaronRobinsonMSFT",
                                           "body":  "@jkoritzinsky Any possibility to share with the interop source generators?",
                                           "updatedAt":  "2023-08-10T04:34:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jwqR0",
                                           "createdAt":  "2023-08-10T18:24:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDVnzQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Sergio0694",
                                                                               "createdAt":  "2023-08-10T18:58:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "We have a collection today that has this behavior, `SequentialEqualImmutableArray\u003cT\u003e`. We also had one for dictionary at one point, but dropped it as we were only using it in cases where some of the types would never be equal anyway. @Sergio0694 also has an implementation with a better API surface in the .NET Community Toolkit.",
                                           "updatedAt":  "2023-08-10T18:24:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jw20y",
                                           "createdAt":  "2023-08-10T19:01:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcYyOQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DoctorKrolic",
                                                                               "createdAt":  "2023-08-21T07:22:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Ghost4Man",
                                                                               "createdAt":  "2023-08-21T09:07:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Myliak",
                                                                               "createdAt":  "2024-08-15T11:15:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JasonBock",
                                                                               "createdAt":  "2025-07-29T17:23:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MitchRazga",
                                                                               "createdAt":  "2025-07-29T20:18:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "Yeah I\u0027ve been usig my own `EquatableArray\u003cT\u003e` type ([here](https://github.com/CommunityToolkit/dotnet/blob/b0d6c4f9c0cfb5d860400abb00b0ca1b3e94dfa4/src/CommunityToolkit.Mvvm.SourceGenerators/Helpers/EquatableArray%7BT%7D.cs#L13)) across all of my repositories (.NET Community Toolkit, ComputeSharp, PolySharp, a whole bunch of generators I wrote for the Microsoft Store, etc.). It\u0027s effectively one of the absolute must have building blocks when writing a new source generator. I will say — I love the idea of adding something like this to the BCL (provided it has an equivalent API surface), though along with that of course we\u0027d have to make this available through some OOB package (eg. `System.Collections.Immutable`?) so that you\u0027d automatically get this as well in every source generator project as a transitive dependency from Roslyn. That would be pretty nice.\r\n\r\nWorth noting — that\u0027s just one of the many missing APIs you have to manually polyfill every single time you\u0027re writing a generator, but this one in particular feels like something should really just be built-in, as it\u0027s also perf-critical 😅",
                                           "updatedAt":  "2023-08-10T19:01:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HaFSv",
                                           "createdAt":  "2024-08-06T17:12:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODtGJSA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2024-08-07T09:42:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Moving out all the incremental source gen work to 10.0",
                                           "updatedAt":  "2024-08-06T17:12:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6He8_y",
                                           "createdAt":  "2024-08-07T09:32:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "FWIW I\u0027ve been using equatable sets and dictionaries with success in typeshape-csharp: \r\n\r\nhttps://github.com/eiriktsarpalis/typeshape-csharp/tree/6a6c68c76829fb26b8aaec42b8a3bdff02018423/src/TypeShape.Roslyn/IncrementalTypes",
                                           "updatedAt":  "2024-08-07T09:32:24Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Create an internal sorted equatable collection type for incremental source generators",
        "labels":  [
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89487",
        "createdAt":  "2023-07-22T11:39:57Z",
        "number":  89487,
        "author":  "Nairda015",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODEmENg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wzuqui",
                                            "createdAt":  "2023-10-20T17:09:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stamminator",
                                            "createdAt":  "2024-11-04T20:03:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "erwinkramer",
                                            "createdAt":  "2024-12-23T12:34:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Trivivium",
                                            "createdAt":  "2025-06-24T07:43:47Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2023-08-02T20:46:39Z",
        "body":  "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\n_No response_\n\n### Describe the solution you\u0027d like\n\nHey \r\nThere is an issue about this already but it is closed and I think approached in the wrong way. https://github.com/dotnet/aspnetcore/issues/13070\r\n\r\nInstead of changing from JSON to JSONC, I propose to extend the supported extensions list for all appsettings and usersecrets.\r\nI know JSON with comments works so the only reason to add this is to remove red underlines.\r\n\r\n\u003cimg width=\"861\" alt=\"image\" src=\"https://github.com/dotnet/aspnetcore/assets/44712992/af8cea9d-f552-4dc8-ab02-2aa66a4326e1\"\u003e\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYx6Ecw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5iZps7",
                                           "createdAt":  "2023-07-24T00:19:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEAArHg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "erwinkramer",
                                                                               "createdAt":  "2024-12-23T12:34:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "I don\u0027t think the juice is worth the squeeze on this one. Adding support for ```.jsonc``` extensions in addition to ```.json``` would lead to a fair amount of confusion in terms of which one takes precedence if the other exists (do we take one or the other, or do we merge them, and what happens when there are conflicts, and what happens if the result of the merge is invalid configuration).\r\n\r\nI\u0027m not sure which IDE you are using (Rider?). I\u0027m surprised it doesn\u0027t at least give you the option to suppress these warnings?",
                                           "updatedAt":  "2023-07-24T00:19:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iZps_",
                                           "createdAt":  "2023-07-24T00:19:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Hi @Nairda015. We have added the \"Needs: Author Feedback\" label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
                                           "updatedAt":  "2023-07-24T00:19:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iZptC",
                                           "createdAt":  "2023-07-24T08:08:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Nairda015",
                                           "body":  "I don\u0027t think that using/merging appsettings.json with appsettings.jsonc is a good idea but applying appsettings.Dev.jsonc on top of appsettigns.json don\u0027t raise any concerns in my opinion ",
                                           "updatedAt":  "2023-07-24T08:08:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iZptJ",
                                           "createdAt":  "2023-07-26T02:36:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "Having comments in JSON files is a very common practice. Doing an overhaul of the configuration system to allow people to use *.jsonc files instead of *.json files doesn\u0027t seem worth it to me. But we can put this on the backlog and see if we get more feedback about it.",
                                           "updatedAt":  "2023-07-26T02:36:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iZptM",
                                           "createdAt":  "2023-07-26T02:36:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
                                           "updatedAt":  "2023-07-26T02:36:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iZptO",
                                           "createdAt":  "2023-07-26T02:46:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODB0X8w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Nairda015",
                                                                               "createdAt":  "2023-07-26T07:16:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "Actually, upon further reflection this issue is filed in the wrong place. Whilst ASP.NET Core does use the configuration system; this is really controlled by the config APIs and host model. So you might like to follow up in dotnet/runtime. I\u0027ll transfer the issue there for you.",
                                           "updatedAt":  "2023-07-26T02:46:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iZpul",
                                           "createdAt":  "2023-07-26T02:47:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-json, @gregsdennis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\n_No response_\n\n### Describe the solution you\u0027d like\n\nHey \r\nThere is an issue about this already but it is closed and I think approached in the wrong way. https://github.com/dotnet/aspnetcore/issues/13070\r\n\r\nInstead of changing from JSON to JSONC, I propose to extend the supported extensions list for all appsettings and usersecrets.\r\nI know JSON with comments works so the only reason to add this is to remove red underlines.\r\n\r\n\u003cimg width=\"861\" alt=\"image\" src=\"https://github.com/dotnet/aspnetcore/assets/44712992/af8cea9d-f552-4dc8-ab02-2aa66a4326e1\"\u003e\n\n### Additional context\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNairda015\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003emitchdenny\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Json`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-26T02:47:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iZvGj",
                                           "createdAt":  "2023-07-26T03:16:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregsdennis",
                                           "body":  "@mitchdenny what is the runtime team supposed to do with this?  Parsing commented JSON is already supported via the [JsonCommentingHandling](https://learn.microsoft.com/en-us/dotnet/api/system.text.json.jsoncommenthandling?view=netcore-3.1) enum.",
                                           "updatedAt":  "2023-07-26T03:16:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iaNye",
                                           "createdAt":  "2023-07-26T06:11:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODB0MlA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gregsdennis",
                                                                               "createdAt":  "2023-07-26T06:50:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mitchdenny",
                                           "body":  "@gregsdennis: I think the bot mis filed it as a JSON issue, its actually a configuration feature request by @Nairda015. I was going to backlog it in aspnetcore to see whether we got more demand for it but then realized that the implementation probably exists  in the runtime repo rather than the aspnetcore repo.",
                                           "updatedAt":  "2023-07-26T06:11:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iaN44",
                                           "createdAt":  "2023-07-26T06:11:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\n_No response_\n\n### Describe the solution you\u0027d like\n\nHey \r\nThere is an issue about this already but it is closed and I think approached in the wrong way. https://github.com/dotnet/aspnetcore/issues/13070\r\n\r\nInstead of changing from JSON to JSONC, I propose to extend the supported extensions list for all appsettings and usersecrets.\r\nI know JSON with comments works so the only reason to add this is to remove red underlines.\r\n\r\n\u003cimg width=\"861\" alt=\"image\" src=\"https://github.com/dotnet/aspnetcore/assets/44712992/af8cea9d-f552-4dc8-ab02-2aa66a4326e1\"\u003e\n\n### Additional context\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNairda015\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Json`, `untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-26T06:11:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iahPC",
                                           "createdAt":  "2023-07-26T07:18:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Nairda015",
                                           "body":  "Thank you @mitchdenny ",
                                           "updatedAt":  "2023-07-26T07:18:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jHh1P",
                                           "createdAt":  "2023-08-02T20:21:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "layomia",
                                           "body":  "\u003e I\u0027m not sure which IDE you are using (Rider?). I\u0027m surprised it doesn\u0027t at least give you the option to suppress these warnings?\r\n\r\n@Nairda015 -- re: @mitchdenny\u0027s question, which IDE are you using and can the warning be suppressed there? Seems like the way to go since configuration binding already [supports JSON comments](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0#comments-in-appsettingsjson).",
                                           "updatedAt":  "2023-08-02T20:21:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jHoRz",
                                           "createdAt":  "2023-08-02T20:46:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdTvNw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "caopuzheng",
                                                                               "createdAt":  "2024-09-02T19:49:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "FranjoMindekPixion",
                                                                               "createdAt":  "2025-01-22T13:51:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aronne",
                                                                               "createdAt":  "2025-07-29T18:40:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matyasbach",
                                                                               "createdAt":  "2025-08-06T12:46:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "Nairda015",
                                           "body":  "You are right I can suppress this errors in Rider but I\u0027m not sure if this is the way how this problem should be approached by everyone",
                                           "updatedAt":  "2023-08-02T20:46:38Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Extend support for user secrets and appsettings to use .jsonc",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89761",
        "createdAt":  "2023-08-01T07:09:16Z",
        "number":  89761,
        "author":  "tebeco",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-01T15:25:29Z",
        "body":  "### Background and motivation\r\n\r\nThis affects teams working in organizations which works on multiple (micro or not) services.\r\n\r\nWhen working with multiple Project/Api, the chance is hight that most services will share the same monitoring cluster / cache / SignalR / etc....\r\nThe result is that\r\n- it\u0027s quite frequent to have common / shared secret value between `ServiceA` and `ServiceB` while clone few douzen of repo at work.\r\n- It\u0027s possible that some secret require an override, like testing `ServiceA` new Redis code in a local redis container etc ...\r\n- At the same time `ServiceA` might have key specific to `ServiceA` which are not desired to be loaded or could conflict in `ServiceB`\r\n\r\nHopefully, the `Configuration` Api handle adding multiple source of configurations for that.\r\nThe limitation today is that `UserSecrets` can only ever loaded once which make it impossible to re-use shared key:\r\n* Sharing the secret id: possible conflict / no local override\r\n* Manually duplicating file locally on disk\r\n\r\nWhen a key is edited:\r\n* Open all repo\r\n* Find the secret id\r\n* Find the file, \r\n* Search the key, + edit all manually\r\n\r\n### API Proposal\r\n\r\nUnsure if we should add `UserSecretsIds` (with an `s`) in addition to `UserSecretsIds`.\r\nI\u0027m guessing both are probably possible\r\n\r\n```csharp\r\n[AttributeUsage(AttributeTargets.Assembly, Inherited = false, AllowMultiple = false)]\r\npublic class UserSecretsIdAttribute : Attribute\r\n{\r\n    public UserSecretsIdAttribute(string userSecretId)\r\n    {\r\n        // it\u0027s probably the easiest way to integrate with msbuild\r\n        // Trim empty entries\r\n        // De-dup\r\n        UserSecretsIds = userSecretId\r\n            .Split(new string[] { \";\" }, StringSplitOptions.RemoveEmptyEntries)\r\n            .Distinct()\r\n            .ToArray();\r\n    }\r\n\r\n    public string[] UserSecretsIds { get; }\r\n}\r\n```\r\n\r\nWill load `foo` and then `bar`.\r\nJust like all `Configuration provider the order matters, nothing changes here\r\n\r\n### API Usage\r\nsingle:\r\n```xml\r\n\u003cPropertyGroup\u003e\r\n  \u003cUserSecretsId\u003efoo\u003c/UserSecretsId\u003e\r\n\u003cPropertyGroup\u003e\r\n```\r\nmultiple:\r\n```xml\r\n\u003cPropertyGroup\u003e\r\n  \u003cUserSecretsId\u003efoo;bar\u003c/UserSecretsId\u003e\r\n\u003cPropertyGroup\u003e\r\n```\r\n\r\n### Alternative Designs\r\n\r\nIt\u0027s unclear for me what\u0027s the best solution here between:\r\n* Change existing `UserSecretsIdAttribute` from `string` to `string[]` in `property` only and split + dedup in ctor\r\n* Change existing `UserSecretsIdAttribute` from `string` to `string[]` in `ctor` + `property`\r\n  Impact: will create clear/direct breaking code at build time\r\n* Adding a new `UserSecretsIdsAttribute`\r\n  Impact: might create runtime bug on existing code/third part not updating how to list attributes\r\n* Changing `AllowMultiple = false` to `AllowMultiple = true` on existing `UserSecretsIdsAttribute`\r\n  Impact: might create runtime bug on existing code/third part not updating how to list attributes\r\n\r\n\r\nSticking with the proposal would allow to not change this part of the code:\r\n`.\\src\\libraries\\Microsoft.Extensions.Configuration.UserSecrets\\src\\buildTransitive\\Microsoft.Extensions.Configuration.UserSecrets.targets`\r\n\r\n```cs\r\n[assembly:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute(UserSecretsId)]\r\n```\r\n```xml\r\n\u003cProject xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cMSBuildAllProjects\u003e$(MSBuildAllProjects);$(MSBuildThisFileFullPath)\u003c/MSBuildAllProjects\u003e\r\n    \u003cGenerateUserSecretsAttribute Condition=\"\u0027$(GenerateUserSecretsAttribute)\u0027==\u0027\u0027\"\u003etrue\u003c/GenerateUserSecretsAttribute\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup Condition=\" \u0027$(UserSecretsId)\u0027 != \u0027\u0027 AND \u0027$(GenerateUserSecretsAttribute)\u0027 != \u0027false\u0027 \"\u003e\r\n    \u003cAssemblyAttribute Include=\"Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute\"\u003e\r\n      \u003c_Parameter1\u003e$(UserSecretsId.Trim())\u003c/_Parameter1\u003e\r\n    \u003c/AssemblyAttribute\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n### Risks\r\nIf MsBuild pluralization is asked, then we would need to consider that consumers could have conflict such as:\r\n```xml\r\n\u003cUserSecretsId\u003efoo\u003c/UserSecretsId\u003e\r\n\u003cUserSecretsIds\u003efoo\u003c/UserSecretsIds\u003e\r\n```\r\n```xml\r\n\u003cUserSecretsId\u003efoo\u003c/UserSecretsId\u003e\r\n\u003cUserSecretsIds\u003ebar\u003c/UserSecretsIds\u003e\r\n```\r\n```xml\r\n\u003cUserSecretsId\u003efoo\u003c/UserSecretsId\u003e\r\n\u003cUserSecretsIds\u003efoo;foo\u003c/UserSecretsIds\u003e\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYu7lrg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5i7uWu",
                                           "createdAt":  "2023-08-01T08:28:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nThis affects teams working in organizations which works on multiple (micro or not) services.\r\n\r\nWhen working with multiple Project/Api, the chance is hight that most services will share the same monitoring cluster / cache / SignalR / etc....\r\nThe result is that\r\n- it\u0027s quite frequent to have common / shared secret value between `ServiceA` and `ServiceB` while clone few douzen of repo at work.\r\n- It\u0027s possible that some secret require an override, like testing `ServiceA` new Redis code in a local redis container etc ...\r\n- At the same time `ServiceA` might have key specific to `ServiceA` which are not desired to be loaded or could conflict in `ServiceB`\r\n\r\nHopefully, the `Configuration` Api handle adding multiple source of configurations for that.\r\nThe limitation today is that `UserSecrets` can only ever loaded once which make it impossible to re-use shared key:\r\n* Sharing the secret id: possible conflict / no local override\r\n* Manually duplicating file locally on disk\r\n\r\nWhen a key is edited:\r\n* Open all repo\r\n* Find the secret id\r\n* Find the file, \r\n* Search the key, + edit all manually\r\n\r\n### API Proposal\r\n\r\nUnsure if we should add `UserSecretsIds` (with an `s`) in addition to `UserSecretsIds`.\r\nI\u0027m guessing both are probably possible\r\n\r\n```csharp\r\n[AttributeUsage(AttributeTargets.Assembly, Inherited = false, AllowMultiple = false)]\r\npublic class UserSecretsIdAttribute : Attribute\r\n{\r\n    public UserSecretsIdAttribute(string userSecretId)\r\n    {\r\n        // it\u0027s probably the easiest way to integrate with msbuild\r\n        // Trim empty entries\r\n        // De-dup\r\n        UserSecretsIds = userSecretId\r\n            .Split(new string[] { \";\" }, StringSplitOptions.RemoveEmptyEntries)\r\n            .Distinct()\r\n            .ToArray();\r\n    }\r\n\r\n    public string[] UserSecretsIds { get; }\r\n}\r\n```\r\n\r\nWill load `foo` and then `bar`.\r\nJust like all `Configuration provider the order matters, nothing changes here\r\n\r\n### API Usage\r\nsingle:\r\n```xml\r\n\u003cPropertyGroup\u003e\r\n  \u003cUserSecretsId\u003efoo\u003c/UserSecretsId\u003e\r\n\u003cPropertyGroup\u003e\r\n```\r\nmultiple:\r\n```xml\r\n\u003cPropertyGroup\u003e\r\n  \u003cUserSecretsId\u003efoo;bar\u003c/UserSecretsId\u003e\r\n\u003cPropertyGroup\u003e\r\n```\r\n\r\n### Alternative Designs\r\n\r\nIt\u0027s unclear for me what\u0027s the best solution here between:\r\n* Change existing `UserSecretsIdAttribute` from `string` to `string[]` in `property` only and split + dedup in ctor\r\n* Change existing `UserSecretsIdAttribute` from `string` to `string[]` in `ctor` + `property`\r\n  Impact: will create clear/direct breaking code at build time\r\n* Adding a new `UserSecretsIdsAttribute`\r\n  Impact: might create runtime bug on existing code/third part not updating how to list attributes\r\n* Changing `AllowMultiple = false` to `AllowMultiple = true` on existing `UserSecretsIdsAttribute`\r\n  Impact: might create runtime bug on existing code/third part not updating how to list attributes\r\n\r\n\r\nSticking with the proposal would allow to not change this part of the code:\r\n`.\\src\\libraries\\Microsoft.Extensions.Configuration.UserSecrets\\src\\buildTransitive\\Microsoft.Extensions.Configuration.UserSecrets.targets`\r\n\r\n```cs\r\n[assembly:Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute(UserSecretsId)]\r\n```\r\n```xml\r\n\u003cProject xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cMSBuildAllProjects\u003e$(MSBuildAllProjects);$(MSBuildThisFileFullPath)\u003c/MSBuildAllProjects\u003e\r\n    \u003cGenerateUserSecretsAttribute Condition=\"\u0027$(GenerateUserSecretsAttribute)\u0027==\u0027\u0027\"\u003etrue\u003c/GenerateUserSecretsAttribute\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup Condition=\" \u0027$(UserSecretsId)\u0027 != \u0027\u0027 AND \u0027$(GenerateUserSecretsAttribute)\u0027 != \u0027false\u0027 \"\u003e\r\n    \u003cAssemblyAttribute Include=\"Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute\"\u003e\r\n      \u003c_Parameter1\u003e$(UserSecretsId.Trim())\u003c/_Parameter1\u003e\r\n    \u003c/AssemblyAttribute\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n### Risks\r\nIf MsBuild pluralization is asked, then we would need to consider that consumers could have conflict such as:\r\n```xml\r\n\u003cUserSecretsId\u003efoo\u003c/UserSecretsId\u003e\r\n\u003cUserSecretsIds\u003efoo\u003c/UserSecretsIds\u003e\r\n```\r\n```xml\r\n\u003cUserSecretsId\u003efoo\u003c/UserSecretsId\u003e\r\n\u003cUserSecretsIds\u003ebar\u003c/UserSecretsIds\u003e\r\n```\r\n```xml\r\n\u003cUserSecretsId\u003efoo\u003c/UserSecretsId\u003e\r\n\u003cUserSecretsIds\u003efoo;foo\u003c/UserSecretsIds\u003e\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etebeco\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-01T08:28:08Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: Allow multiple UserSecretIds for shared secret accross mutliple local repositories",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90574",
        "createdAt":  "2023-08-15T05:53:43Z",
        "number":  90574,
        "author":  "Maximys",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAqzNA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "flibustier7seas",
                                            "createdAt":  "2025-03-31T07:55:37Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-08-17T19:13:00Z",
        "body":  "### Background and motivation\r\n\r\nCurrently IConfigurationSection have [Exists](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.configurationextensions.exists?view=dotnet-plat-ext-7.0) extension method, which determines whether the section has a Value or has children, but sometimes people want check is the section has just a Value or not (#58104 ).\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.Configuration;\r\n\r\npublic static class ConfigurationExtensions\r\n{\r\n    public static bool IsPresent(this IConfigurationSection? section)\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nIConfiguration configuration = ...;\r\n\r\nvar fooSection = configuration.GetSection(\"Foo\");\r\nvar isFooSectionPresent = fooSection.IsPresent();\r\n\r\nConsole.WriteLine(isFooSectionPresent);\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nLow",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZAtAAw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5kC0AD",
                                           "createdAt":  "2023-08-15T05:53:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nCurrently IConfigurationSection have [Exists](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.configurationextensions.exists?view=dotnet-plat-ext-7.0) extension method, which determines whether the section has a Value or has children, but sometimes people want check is the section has just a Value or not (#58104 ).\n\n### API Proposal\n\n```csharp\r\nnamespace Microsoft.Extensions.Configuration;\r\n\r\npublic static class ConfigurationExtensions\r\n{\r\n    public static bool IsPresent(this IConfigurationSection? section)\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nIConfiguration configuration = ...;\r\n\r\nvar fooSection = configuration.GetSection(\"Foo\");\r\nvar isFooSectionPresent = fooSection.IsPresent();\r\n\r\nConsole.WriteLine(isFooSectionPresent);\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nLow\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMaximys\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-15T05:53:50Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: ConfigurationExtensions.IsPresent(this IConfigurationSection?)",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91348",
        "createdAt":  "2023-08-30T18:33:26Z",
        "number":  91348,
        "author":  "layomia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:45:18Z",
        "body":  "Per https://github.com/dotnet/sdk/pull/34485/files#r1299417912, the current logic doesn\u0027t work for \"user-defined framework aliases: `TargetFramework` strings that .NET SDK does not recognize, if the project translates them to `TargetFrameworkIdentifier` and `TargetFrameworkVersion`.\"\r\n\r\nEvaluate the recommendations in that thread to resolve this issue. Relevant logic https://github.com/dotnet/runtime/blob/3c3f49958f93edba4e899f292a876bd47fdbeca6/src/libraries/Microsoft.Extensions.Configuration.Binder/src/buildTransitive/Microsoft.Extensions.Configuration.Binder.targets#L14-L21.\r\n\r\nDoesn\u0027t seem like a common enough consideration/issue to block release. cc @ViktorHofer @dotnet/area-extensions-configuration @eerhardt.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZU-FUw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5lTrF8",
                                           "createdAt":  "2023-08-30T18:33:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nPer https://github.com/dotnet/sdk/pull/34485/files#r1299417912, the current logic doesn\u0027t work for \"user-defined framework aliases\": `TargetFramework` strings that .NET SDK does not recognize, if the project translates them to `TargetFrameworkIdentifier` and `TargetFrameworkVersion`.\r\n\r\nEvaluate the recommendations in that thread to resolve this issue. Relevant logic https://github.com/dotnet/runtime/blob/3c3f49958f93edba4e899f292a876bd47fdbeca6/src/libraries/Microsoft.Extensions.Configuration.Binder/src/buildTransitive/Microsoft.Extensions.Configuration.Binder.targets#L14-L21.\r\n\r\nDoesn\u0027t seem like a common enough consideration/issue to block release. cc @ViktorHofer @dotnet/area-extensions-configuration @eerhardt.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elayomia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003elayomia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-30T18:33:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lT4VT",
                                           "createdAt":  "2023-08-30T19:20:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "The first condition could be replaced with TFI == \u0027.NETCoreApp\u0027 and TFV \u003c v6.0 and the second condition with TFI == \u0027.NETFramework\u0027 and TFV \u003c v4.6.2. Definitely non release blocking.",
                                           "updatedAt":  "2023-08-30T19:20:04Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "TFM compat logic for binding generator NuPkg doesn\u0027t account for custom TFM strings",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92079",
        "createdAt":  "2023-09-14T19:30:26Z",
        "number":  92079,
        "author":  "layomia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:45:18Z",
        "body":  "https://github.com/dotnet/runtime/pull/91967 fixed issues with formatting binding helper identifiers, which caused compilation errors for certain type name conflicts. We feel that new behavior is in good shape for 8.0\r\n\r\nThe fix consolidated some logic with the JSON generator. For 9.0, we should audit both the algorithms \u0026 the shared logic, particularly to see if the abstraction makes sense in the long term. Further discussion in https://github.com/dotnet/runtime/pull/91967#discussion_r1325706995.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZoWBCw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5mhYEL",
                                           "createdAt":  "2023-09-14T19:30:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nhttps://github.com/dotnet/runtime/pull/91967 fixed issues with formatting binding helper identifiers, which caused compilation errors for certain type name conflicts. We feel that new behavior is in good shape for 8.0\r\n\r\nThe fix consolidated some logic with the JSON generator. For 9.0, we should audit both the algorithms \u0026 the shared logic, particularly to see if the abstraction makes sense in the long term. Further discussion in https://github.com/dotnet/runtime/pull/91967#discussion_r1325706995.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elayomia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003elayomia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `source-generator`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-14T19:30:37Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Audit identifier formatting algorithm in config binding \u0026 JSON generators",
        "labels":  [
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92151",
        "createdAt":  "2023-09-15T20:00:21Z",
        "number":  92151,
        "author":  "ericstj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:44:34Z",
        "body":  "### Description\n\nI noticed the following empty method when reviewing the codegen for the repro in https://github.com/dotnet/runtime/issues/91324\r\n\r\n```\r\n        public static void BindCore(IConfiguration configuration, ref EndPointCollection instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)\r\n        {\r\n            foreach (IConfigurationSection section in configuration.GetChildren())\r\n            {\r\n            }\r\n        }\r\n```\r\n\r\nI tried this with an empty class, and it seems we\u0027ll skip that, so this might be more specific to collection initialization.\n\n### Reproduction Steps\n\nCompile the repro in https://github.com/dotnet/runtime/issues/91324 when setting `\u003cEmitCompilerGeneratedFiles\u003etrue\u003c/EmitCompilerGeneratedFiles\u003e`.\r\n\r\nObserve the generated code.\n\n### Expected behavior\n\nOnly meaninful methods are generated, methods that do nothing should be avoided.\n\n### Actual behavior\n\nMethod generated that merely enumerates the configuration children of section.\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZuGMnw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5m4Yyf",
                                           "createdAt":  "2023-09-19T16:39:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "This is not necessary for 8.0.",
                                           "updatedAt":  "2023-09-19T16:39:02Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ConfigurationBinder source generator shouldn\u0027t generate empty methods",
        "labels":  [
                       "enhancement",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92509",
        "createdAt":  "2023-09-22T22:44:40Z",
        "number":  92509,
        "author":  "layomia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3FUrA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "CodeBlanch",
                                            "createdAt":  "2024-04-08T19:22:20Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-26T10:44:35Z",
        "body":  "When testing the configuration binder source generator we discovered that the way the runtime source generators emit diagnostics is not suppressible in source.  This is a regression from previous releases (see attached sample) however we\u0027ve yet to scenario where a user would have a pragma suppression for one of these existing diagnostics - most are errors or informational.\r\n\r\nSee attached project: [generatorWarnings.zip](https://github.com/dotnet/runtime/files/12783979/generatorWarnings.zip)\r\n\r\nWe also discovered that even in previous releases, when a warning is praga suppressed the IDE analyzer flags the suppression as unnecessary.\r\n\r\nWe also discovered that in 8.0, the diagnostics (at least in Regex generator) no longer seem to honor .editorconfig severity setting.\r\n\r\nRelated: https://github.com/dotnet/roslyn/issues/68291\r\n\r\nCC @eiriktsarpalis, @stephentoub ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiCUFVg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5nPcvA",
                                           "createdAt":  "2023-09-22T22:44:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nPlaceholder to address related feedback in  https://github.com/dotnet/runtime/pull/89587.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elayomia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003elayomia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `source-generator`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-22T22:44:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5n6L3z",
                                           "createdAt":  "2023-10-02T16:10:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I\u0027d mentioned this to @sharwell last week, and he wasn\u0027t sure why the diagnostics we\u0027re outputting in this way wouldn\u0027t be suppressible with a pragma. He suggested it might be a Roslyn bug.",
                                           "updatedAt":  "2023-10-02T16:10:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oCJrt",
                                           "createdAt":  "2023-10-03T17:11:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I think that bug is https://github.com/dotnet/roslyn/issues/68291 based on my discussions with @eiriktsarpalis.  I think there\u0027s some concern that there might not be a safe way for incremental generators to emit diagnostics at all.",
                                           "updatedAt":  "2023-10-03T17:11:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5op95L",
                                           "createdAt":  "2023-10-10T16:44:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "We understand that this change is a regression from 7.0 for some generators, but we haven\u0027t been able to identify a case where a user would have suppressed a diagnostic in source.\r\n\r\n@eiriktsarpalis Still need to prototype a solution to this.  Depending on what that looks like we could service it if someone is blocked by this.\r\n\r\nWorkaround: NoWarn at the project level.",
                                           "updatedAt":  "2023-10-10T16:44:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q3qs7",
                                           "createdAt":  "2023-11-03T19:20:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "It seems that something deeper is at play here. I tried fixing the issue by [removing the trimming logic](https://github.com/eiriktsarpalis/runtime/commit/4d55c023e4ef2f036202e55ad453fd560219947e) for `Location` instances but it appears that this still doesn\u0027t fix pragma suppressions. At this point I\u0027m not sure what could be causing this but I\u0027ll try creating a minimal reproduction using the Roslyn APIs.",
                                           "updatedAt":  "2023-11-03T19:20:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q38F1",
                                           "createdAt":  "2023-11-03T20:21:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Actually, disregard the above. The unit test I added is actually incorrect because it relied on the assumption that suppressing the issue in source would make it go away from the list of diagnostics reported by the `GeneratorDriver`. The suppression does actually work if I try to test it manually in the IDE.",
                                           "updatedAt":  "2023-11-03T20:21:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55zUuA",
                                           "createdAt":  "2024-04-08T19:25:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CodeBlanch",
                                           "body":  "\u003e but we haven\u0027t been able to identify a case where a user would have suppressed a diagnostic in source.\r\n\r\nJust FYI we ran into this here: https://github.com/open-telemetry/opentelemetry-dotnet/pull/5520/files#r1556221048",
                                           "updatedAt":  "2024-04-08T19:25:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58Ysqo",
                                           "createdAt":  "2024-04-30T19:35:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Do we know who owns the next \"action\" here? Is this a Roslyn issue? Or a problem with our source generators? It would be really great if this could be addressed in .NET 9.\r\n\r\nThis issue really affects the dev experience using the Configuration Binder source generator. There are so many places where libraries use Options classes that have \"extra properties\" on them that aren\u0027t expected to be configured using the configuration, but instead set through code. In every instance of that, we need to globally suppress `SYSLIB1100, SYSLIB1101` in the .csproj, but that means we won\u0027t ever see these warnings again in the project. So if we add a new Options class and configure it, we won\u0027t know if there are properties that don\u0027t work with the ConfigBinder.\r\n\r\ncc @jasonmalinowski (who is assigned the linked Roslyn issue)",
                                           "updatedAt":  "2024-04-30T19:35:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58ftgm",
                                           "createdAt":  "2024-05-01T16:05:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e Do we know who owns the next \"action\" here? Is this a Roslyn issue? Or a problem with our source generators? It would be really great if this could be addressed in .NET 9.\r\n\r\nThe issue fundamentally is that diagnostic instances pointing to `SimpleLocation` are not suppressible, it only works if they are made to point to [`SourceLocation` instances](https://github.com/dotnet/roslyn/blob/main/src/Compilers/Core/Portable/Diagnostic/SourceLocation.cs). The problem is that our source generators are [intentionally converting `SourceLocation` instances to equivalent `SimpleLocation` values](https://github.com/dotnet/runtime/pull/83868/) since the former encapsulates the full `Compilation` object, making it unsuitable for incremental caching. I think this needs to be addressed at the Roslyn/source gen API level.",
                                           "updatedAt":  "2024-05-01T16:05:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58gHa8",
                                           "createdAt":  "2024-05-01T17:18:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@jaredpar - is this on the radar of getting addressed in Roslyn in the .NET 9 timeframe?",
                                           "updatedAt":  "2024-05-01T17:18:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58gRMV",
                                           "createdAt":  "2024-05-01T17:47:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "@eerhardt is there a roslyn issue you\u0027re referring to?",
                                           "updatedAt":  "2024-05-01T17:47:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58gbkv",
                                           "createdAt":  "2024-05-01T18:19:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e @eerhardt is there a roslyn issue you\u0027re referring to?\r\n\r\nI _think_ it\u0027s https://github.com/dotnet/roslyn/issues/68291 based on the above discussion. But @eiriktsarpalis and/or @ericstj would need to confirm.\r\n\r\nThe uber scenario I\u0027m interested in having work is described in https://github.com/dotnet/runtime/issues/100785. You can\u0027t suppress `SYSLIB1100 and SYSLIB1101` in code. They can only be suppressed globally in the project.",
                                           "updatedAt":  "2024-05-01T18:19:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58gckZ",
                                           "createdAt":  "2024-05-01T18:22:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I think it\u0027s https://github.com/dotnet/roslyn/issues/68291 based on the above discussion\r\n\r\nYes.\r\n\r\nEffectively, with incremental source generators as they exist today, you can choose to either:\r\na) have it actually be incremental (only recomputing stuff when the relevant code changes), or\r\nb) have suppressible diagnostics via pragmas\r\nbut you can\u0027t have both: if a diagnostic includes the real location information, then it breaks incrementality, and if the diagnostic doesn\u0027t include the real location information, then it\u0027s not suppressible via pragmas.\r\n\r\nThe feedback thus far has then been \"well, source generators probably shouldn\u0027t be raising diagnostics... duplicate the relevant checking into separate analyzers\".",
                                           "updatedAt":  "2024-05-01T18:23:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58hWXY",
                                           "createdAt":  "2024-05-01T20:48:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Addressing https://github.com/dotnet/roslyn/issues/68291 would fix `Diagnostic` equality for the purposes of incremental compilation, but it wouldn\u0027t address incremental `Diagnostic` values encapsulating `SyntaxTree` instances.\r\n\r\nTaking a step back, it would be worth pointing out that the issue stems from the fact that diagnostics in generators can only be reported in the final `SourceProductionContext` phase. This creates the necessity for any conforming source generator to incorporate the diagnostics that it does report into the incremental model -- but today this isn\u0027t possible without hacks because the `Diagnostic` type isn\u0027t amenable to incremental caching.",
                                           "updatedAt":  "2024-05-01T20:48:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HrGXR",
                                           "createdAt":  "2024-08-08T16:28:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@eiriktsarpalis - do you think we can do something in 9.0 to improve this?  Do we have what we need from Roslyn?",
                                           "updatedAt":  "2024-08-08T16:28:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HrJyp",
                                           "createdAt":  "2024-08-08T16:37:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "We\u0027re still blocked on account of\r\n\r\n1. `Diagnostic` instances not being amenable to incremental caching and\r\n2. Diagnostics pointing to `SimpleLocation` instances not being suppressible by pragmas.\r\n\r\nAddressing either of the two issues would unblock this issue.",
                                           "updatedAt":  "2024-08-08T16:37:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HrdLf",
                                           "createdAt":  "2024-08-08T17:25:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@jaredpar - is this something that can get into the .NET 10 plan early? This is a pretty impactful issue with warnings coming from source generators. You can\u0027t suppress the warnings in a constrained location. You can only suppress the warning globally in a project.",
                                           "updatedAt":  "2024-08-08T17:25:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hriz5",
                                           "createdAt":  "2024-08-08T17:37:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "@eerhardt I\u0027m not entirely sure what the problem is at this point. The discussion is about ability to suppress but references this issue in roslyn https://github.com/dotnet/roslyn/issues/68291. That issue is effectively \"By Design\". \r\n\r\nThink a concrete example would help here. ",
                                           "updatedAt":  "2024-08-08T17:37:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HrjZ1",
                                           "createdAt":  "2024-08-08T17:39:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODtZ3sw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2024-08-09T08:51:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e Think a concrete example would help here.\r\n\r\nThe uber scenario I\u0027m interested in having work is described in https://github.com/dotnet/runtime/issues/100785. You can\u0027t suppress SYSLIB1100 and SYSLIB1101 in code. They can only be suppressed globally in the project.",
                                           "updatedAt":  "2024-08-08T17:39:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HwVkF",
                                           "createdAt":  "2024-08-09T10:00:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODteXRA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephentoub",
                                                                               "createdAt":  "2024-08-09T12:20:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eerhardt",
                                                                               "createdAt":  "2024-08-09T18:52:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "@jaredpar here\u0027s an overview of the situation. TL;DR it\u0027s a product of three separate issues:\r\n\r\n1. Incremental source generators can only emit diagnostics in the final stage of their pipeline, via the\r\n[SourceProductionContext type](https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.sourceproductioncontext.reportdiagnostic?view=roslyn-dotnet-4.7.0). This implies that any diagnostic must be incorporated into the incremental model used by the generator so that it can be fed to the `SourceProductionContext`. It further implies that `Diagnostics` objects must have structural equality semantics.\r\n2. We can\u0027t cache `Diagnostic` objects in incremental values because:\r\n    1. [their equality implementation is broken](https://github.com/dotnet/roslyn/issues/68291) and\r\n    2. they transitively hold a reference to the `Compilation` via the `SourceLocation` object that they typically encapsulate.\r\n    \r\n    We work around this issue by storing diagnostic data [in an intermediate record](https://github.com/dotnet/runtime/blob/72d6467c16fe8afb3fca7ac71f98cfdb27a53913/src/libraries/Common/src/SourceGenerators/DiagnosticInfo.cs#L11-L15) that has the expected equality semantics and also [trims any references to the compilation object](https://github.com/dotnet/runtime/blob/72d6467c16fe8afb3fca7ac71f98cfdb27a53913/src/libraries/Common/src/SourceGenerators/DiagnosticInfo.cs#L32-L34). The [final diagnostic object is rehydrated](https://github.com/dotnet/runtime/blob/72d6467c16fe8afb3fca7ac71f98cfdb27a53913/src/libraries/Common/src/SourceGenerators/DiagnosticInfo.cs#L37-L38) once the `SourceProductionContext` is available.\r\n4. This issue; `Diagnostics` that point to `Location`s created via the [`Location.Create` method](https://github.com/dotnet/runtime/blob/72d6467c16fe8afb3fca7ac71f98cfdb27a53913/src/libraries/Common/src/SourceGenerators/DiagnosticInfo.cs#L32-L34) are not pragma-suppressible.\r\n\r\nThis is a problem that every well-behaved incremental source generator is going to stumble into, and authors are forced to trade off between incremental performance and emitting warnings that aren\u0027t locally suppressible. ",
                                           "updatedAt":  "2024-08-09T10:00:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ICjQ7",
                                           "createdAt":  "2024-08-11T03:16:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODtk74w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "0xfeeddeadbeef",
                                                                               "createdAt":  "2024-08-11T09:37:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e We work around this issue by storing diagnostic data in an intermediate record that has the expected equality semantics and also trims any references to the compilation object. The final diagnostic object is rehydrated once the SourceProductionContext is available.\n\nFwiw, this is the right way to do things. \n\nNote: if I had my way, diagnostics would not be possible in generators at all.  Definitionally, they are never incremental as any edit invalidates them. \n\nIt is much better on every metric to just use an analyzer for diagnostics.  There, being incremental does not matter, and no semantic operations are gated on this code executing (like with generators).\n\nThe best design is to separate out concerns and leave generators for generating and analyzers for analyzing. ",
                                           "updatedAt":  "2024-08-11T03:16:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IDw3W",
                                           "createdAt":  "2024-08-11T09:12:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e Definitionally, they are never incremental as any edit invalidates them.\r\n\r\nLet me see if I can try to unpack that statement. A `Diagnostic` object is essentially a triple consisting of a `DiagnosticDescriptor`, a `Location` and an array of arguments. There is nothing inherently non-incremental about the first and final components, so I presume the problem sits with `Location` which is not incremental because it needs to be pointing to the current syntax tree. By trimming away the syntax tree from our incremental diagnostic model we lose the ability to locally suppress it.\r\n\r\nOne possible solution might be to use the current `Compilation` to recover the `SourceLocation` corresponding to the `Location` stored in the incremental model, however `SourceProductionContext` doesn\u0027t expose any information beyond what is stored in the incremental values.\r\n\r\n\u003e It is much better on every metric to just use an analyzer for diagnostics.\r\n\r\nThat might be good advice when building a new generator, but I don\u0027t think it\u0027s workable for the ones we (or customers) have already shipped. In my view we should try to come up with a mitigation and document guidance to users (potentially even deprecating `SourceProductionContext.ReportDiagnostic`?).",
                                           "updatedAt":  "2024-08-11T09:21:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IEn1x",
                                           "createdAt":  "2024-08-11T22:44:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e which is not incremental because it needs to be pointing to the current syntax tree\n\nThat\u0027s one part. The other is simply that a diagnostic literally says it is at a particular location. So practically 50% of edits changes that location. This is not what you want with incremental. You want like 99.99% of edits to have no effect. \n\nIf 50% of edits break incrementality, you might as well not be incremental. \n\n\u003e That might be good advice when building a new generator, but I don\u0027t think it\u0027s workable for the ones we (or customers) have already shipped\n\nI\u0027m not sure why. We shipped all these systems knowing that we had no idea the best way to do things, and that w would revise later. I had meetings with runtime directly on that issue. We decided it was better to ship, then find and fix things, than to try to solve the problem up front.  \n\nBut we\u0027ve learned in several places that the patterns we hoped would work don\u0027t actually work :-(\n\n\u003e potentially even deprecating SourceProductionContext.ReportDiagnostic\n\nThat would be my strong preference. We can probably align with the deprecation and removal of support for v1 generators. ",
                                           "updatedAt":  "2024-08-11T22:44:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IGvsr",
                                           "createdAt":  "2024-08-12T09:14:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e The other is simply that a diagnostic literally says it is at a particular location. So practically 50% of edits changes that location. This is not what you want with incremental. You want like 99.99% of edits to have no effect.\r\n\r\nIf a particular edit changes the location of a diagnostic, then presumably the effect of updating the diagnostic is desirable. Conversely, if you have a well-behaved incremental model that incorporates location/diagnostic data, then producing an equal model must imply that the previously issued set of diagnostics is still applicable. We have written a number of unit tests validating the behaviour of incremental models in the presence of diagnostics.\r\n\r\n\u003e We shipped all these systems knowing that we had no idea the best way to do things, and that w would revise later. I had meetings with runtime directly on that issue. We decided it was better to ship, then find and fix things, than to try to solve the problem up front.\r\n\r\nWhile I agree with the approach in principle, a rewrite of our source generators is going to be expensive and risky, so I would think this should be kept as a move of last resort and provided that the stated goals justify the costs. For the case of diagnostics, my impression is that it\u0027s a 95% solved problem (using the techniques described earlier) so coming up with a smart (quoted or unquoted) mitigation to this current issue is something we should want to consider.",
                                           "updatedAt":  "2024-08-12T09:14:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IJGfn",
                                           "createdAt":  "2024-08-12T14:07:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e If a particular edit changes the location of a diagnostic, then presumably the effect of updating the diagnostic is desirable.\n\nNo. The desire of incremental generators is to take 99.99% of edits down to no ops. That\u0027s exactly why diagnostics are a problem. They encode *positional* information (something practically no other generators need), which effectively makes them *non* incremental, defeating the purpose. \n\nJust don\u0027t do diagnostics here.  We have the right system for them already. Just use that. :-)\n\n\u003e a rewrite of our source generators is going to be expensive and risky\n\nYes. That was definitely discussed in the meetings.  That\u0027s the cost of running ahead fast on tech that was definitely still being baked :-)\n\nI\u0027m just telling you my recommendations. It\u0027s up to you what you want to end up doing. ",
                                           "updatedAt":  "2024-08-12T14:07:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IJQVW",
                                           "createdAt":  "2024-08-12T14:23:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e \u003e If a particular edit changes the location of a diagnostic, then presumably the effect of updating the diagnostic is desirable.\r\n\u003e \r\n\u003e No. The desire of incremental generators is to take 99.99% of edits down to no ops. That\u0027s exactly why diagnostics are a problem. They encode _positional_ information (something practically no other generators need), which effectively makes them _non_ incremental, defeating the purpose.\r\n\r\nPoint taken, but you\u0027d be surprised how many positional attributes of source code impact generation and this is especially true for generators acting on type graphs. While the presence of diagnostics did turn out to be the primary contributor to bad SG performance in STJ, this was only because we were naively storing `Diagnostics` directly on the incremental model. Once we switched to using the intermediate equatable representation it\u0027s become an issue of least concern.\r\n\r\n\u003e It\u0027s up to you what you want to end up doing.\r\n\r\nUnless you can recommend a way in which we could look up a `SourceLocation` from the `SourceProductionContext`, I don\u0027t think there is really much we can do on our side.",
                                           "updatedAt":  "2024-08-12T14:24:23Z"
                                       }
                                   ],
                         "totalCount":  26
                     },
        "title":  "Address diagnostic issues in runtime incremental source generators",
        "labels":  [
                       "blocked",
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92594",
        "createdAt":  "2023-09-25T15:53:13Z",
        "number":  92594,
        "author":  "layomia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:44:35Z",
        "body":  "Per @eerhardt in https://github.com/dotnet/runtime/pull/89587.\r\n\r\n\u003e ints are pretty common in config. It might make sense to keep this near the top of the check, so we don\u0027t have to check a bunch of other (less common) types first.\r\n\r\n@dotnet/area-extensions-configuration.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh2fHkw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5nWynA",
                                           "createdAt":  "2023-09-25T15:53:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nPer @eerhardt in https://github.com/dotnet/runtime/pull/89587.\r\n\r\n\u003e ints are pretty common in config. It might make sense to keep this near the top of the check, so we don\u0027t have to check a bunch of other (less common) types first.\r\n\r\n@dotnet/area-extensions-configuration.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elayomia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003elayomia\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`tenet-performance`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-25T15:53:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HZ8eT",
                                           "createdAt":  "2024-08-06T16:50:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "This is a nice-to-have perf improvement.  Moving out.",
                                           "updatedAt":  "2024-08-06T16:50:46Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Sort object properties optimally in emitted config binding gen logic",
        "labels":  [
                       "tenet-performance",
                       "help wanted",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92638",
        "createdAt":  "2023-09-26T11:54:58Z",
        "number":  92638,
        "author":  "eduherminio",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-06T16:49:34Z",
        "body":  "### Description\r\n\r\nThe code generated by Configuration-binding source generator on `IConfigurationSection.Bind()` doesn\u0027t override the section children/inner values of a sub-section if they\u0027re not null.\r\n\r\nIt\u0027s probably faster to have a look at the repro, https://github.com/eduherminio/dotnet-runtime-issue-92638, than to try to understand the rest, but here\u0027s a summary;\r\n\r\nRelevant part of the generated code:\r\n```csharp\r\nif (AsConfigWithChildren(configuration.GetSection(\"SubSection1\")) is IConfigurationSection section47)\r\n{\r\n       SubSection? temp49 = obj.SubSection1;\r\n       temp49 ??= InitializeSubSection(section47, binderOptions); // Doesn\u0027t update temp49\r\n       BindCore(section47, ref temp49, binderOptions);\r\n       obj.SubSection = temp49;\r\n}\r\n```\r\n\r\nGiven: a config class hierarchy like this;\r\n```csharp\r\npublic static class MyConfiguration { public static Section Section1 { get; set; } = new(); }\r\n\r\npublic sealed class Section\r\n{\r\n    public int Value1 { get; set; } = 1;\r\n    public SubSection SubSection1 { get; set; } = new(1, 2);\r\n    public SubSection? SubSection2 { get; set; } = null;\r\n}\r\n\r\npublic class SubSection\r\n{\r\n    public int A { get; }\r\n    public int B { get; }\r\n    public SubSection(int a, int b) { A = a; B = b; }\r\n}\r\n```\r\n\r\nand a settings file like this:\r\n```json\r\n{\r\n  \"Section1\": {\r\n    \"Value1\": 10,\r\n    \"SubSection1\": {\r\n      \"A\": 100,\r\n      \"B\": 200\r\n    },\r\n    \"SubSection2\": {\r\n      \"A\": 1000,\r\n      \"B\": 2000\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWhen doing:\r\n```csharp\r\nconfig.GetSection(\"Section1\").Bind(MyConfiguration.Section1);\r\n```\r\n\r\n### Reproduction Steps\r\n\r\nMinimal reproducible example:\r\nhttps://github.com/eduherminio/dotnet-runtime-issue-92638\r\n\r\n### Expected behavior\r\n\r\nBoth `SubSection1` and `SubSection2` get overwritten, as well as Value1\r\n\r\n```\r\nValue1: 10\r\nSubSection1: {100, 200}\r\nSubSection2: {1000, 2000}\r\n```\r\n\r\n### Actual behavior\r\n\r\n**`SubSection1`, with a default, non-null value doesn\u0027t get overwrritten.**\r\n`SubSection2`, with a default null value, does.\r\nValue1, since it\u0027s not a sub-section, does\r\n\r\n```\r\nValue1: 10\r\nSubSection1: {1, 2}\r\nSubSection2: [{000, 2000}\r\n```\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nAdding setter properties to the fields instead of relying on the constructor to be invoked\r\nThat is, doing something like\r\n```csharp\r\npublic class SubSection\r\n{\r\n    public int A { get; set; }\r\n    public int B { get; set; }\r\n    public SubSection(int a, int b)\r\n    {\r\n        A = a;\r\n        B = b;\r\n    }\r\n}\r\n```\r\n\r\n### Configuration\r\n\r\n8.0.100-rc.1.23463.5\r\nMicrosoft.Extensions.Configuration.Binder 8.0.0-rc.1.23419.4\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZ47QJQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5nb-4m",
                                           "createdAt":  "2023-09-26T11:55:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThe code generated by Configuration-binding source generator on `IConfigurationSection.Bind()` doesn\u0027t override the section children/inner values of a sub-section if they\u0027re not null.\r\n\r\nIt\u0027s probably faster to have a look at the repro, https://github.com/eduherminio/SettingsPreference, than to try to understand the rest, but here\u0027s a summary;\r\n\r\nRelevant part of the generated code:\r\n```csharp\r\nif (AsConfigWithChildren(configuration.GetSection(\"SubSection1\")) is IConfigurationSection section47)\r\n{\r\n       SubSection? temp49 = obj.SubSection1;\r\n       temp49 ??= InitializeSubSection(section47, binderOptions); // Doesn\u0027t update temp49\r\n       BindCore(section47, ref temp49, binderOptions);\r\n       obj.SubSection = temp49;\r\n}\r\n```\r\n\r\nGiven: a config class hierarchy like this;\r\n```csharp\r\npublic static class MyConfiguration { public static Section Section1 { get; set; } = new(); }\r\n\r\npublic sealed class Section\r\n{\r\n    public int Value1 { get; set; } = 1;\r\n    public SubSection SubSection1 { get; set; } = new(1, 2);\r\n    public SubSection? SubSection2 { get; set; } = null;\r\n}\r\n\r\npublic class SubSection\r\n{\r\n    public int A { get; }\r\n    public int B { get; }\r\n    public SubSection(int a, int b) { A = a; B = b; }\r\n}\r\n```\r\n\r\nand a settings file like this:\r\n```json\r\n{\r\n  \"Section1\": {\r\n    \"Value1\": 10,\r\n    \"SubSection1\": {\r\n      \"A\": 100,\r\n      \"B\": 200\r\n    },\r\n    \"SubSection2\": {\r\n      \"A\": 1000,\r\n      \"B\": 2000\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWhen doing:\r\n```csharp\r\nconfig.GetSection(\"Section1\").Bind(MyConfiguration.Section1);\r\n```\n\n### Reproduction Steps\n\nMinimal reproducible example:\r\nhttps://github.com/eduherminio/SettingsPreference\n\n### Expected behavior\n\nBoth `SubSection1` and `SubSection2` get overwritten, as well as Value1\r\n\r\nValue1: 10\r\nSubSection1: {100, 200}\r\nSubSection2: {1000, 2000}\n\n### Actual behavior\n\n**`SubSection1`, with a default, non-null value doesn\u0027t get overwrritten.**\r\n`SubSection2`, with a default null value, does.\r\nValue1, since it\u0027s not a sub-section, does\r\n\r\nValue1: 10\r\nSubSection1: {1, 2}\r\nSubSection2: [{000, 2000}\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n8.0.100-rc.1.23463.5\r\nMicrosoft.Extensions.Configuration.Binder 8.0.0-rc.1.23419.4\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeduherminio\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-09-26T11:55:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ndsuQ",
                                           "createdAt":  "2023-09-26T16:00:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@layomia could you please have a look and triage it if need to be in 8.0 or later?",
                                           "updatedAt":  "2023-09-26T16:00:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ngXtk",
                                           "createdAt":  "2023-09-27T01:41:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I tried this repo and while I confirm the _actual_ behavior described, however I don\u0027t see a difference with the reflection binder.  I could even roll back the reference of Microsoft.Extensions.Configuration.Binder to 7.0.0 and I still see the behavior `SubSection1: [1, 2]`\r\n\r\n@eduherminio Can you please double check your repro and make sure you have the _expected_ case reproducing?  Or clarify if this issue is not reporting a difference in source generation, but perhaps something that never worked as expected. ",
                                           "updatedAt":  "2023-09-27T12:39:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ngXvk",
                                           "createdAt":  "2023-09-27T01:41:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2023-09-27T01:41:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5njnzq",
                                           "createdAt":  "2023-09-27T13:23:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eduherminio",
                                           "body":  "\u003e I tried this repo and while I confirm the _actual_ behavior described, however I don\u0027t see a difference with the reflection binder. I could even roll back the reference of Microsoft.Extensions.Configuration.Binder to 7.0.0 and I still see the behavior `SubSection1: [1, 2]`\r\n\u003e \r\n\u003e @eduherminio Can you please double check your repro and make sure you have the _expected_ case reproducing? Or clarify if this issue is not reporting a difference in source generation, but perhaps something that never worked as expected.\r\n\r\nHey, @ericstj, sorry if my wording was not precise enough, I didn\u0027t have the chance to compare the source-generated binder behavior with the reflection binder one (mainly due to the latter not being trim-friendly) and assumed the desired behavior was happening in the reflection scenario..\r\n\r\nSo after your verification that such behavior is the same in v7.0.0, maybe this is a more general, not-expected behavior?\r\n\r\nPD: please note that, as a workaround, adding public setters to the class fields (and therefore not relying on the constructor) makes everything work as expected. which in my view doesn\u0027t prevent it from looking like unexpected behavior, but there\u0027s that.",
                                           "updatedAt":  "2023-09-27T13:23:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5njtAl",
                                           "createdAt":  "2023-09-27T13:35:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODH-8tw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "layomia",
                                                                               "createdAt":  "2023-09-27T16:04:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eduherminio",
                                                                               "createdAt":  "2023-09-27T18:50:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I think it still makes sense to look at this as a potential opportunity for improvement.  We\u0027d have to evaluate the tradeoff between such a change and who it might break.  With any change to binding behavior there are those who might expect the old behavior.  I\u0027ll move this into 9.0.0 for consideration since it doesn\u0027t represent a gap in the source gen and is an opportunity for us to support a new binding scenario that\u0027s not supported today. ",
                                           "updatedAt":  "2023-09-27T13:35:36Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "ConfigurationBinding: member ignored when value exists and is immutable but has a constructor which could support values",
        "labels":  [
                       "bug",
                       "area-Extensions-Configuration",
                       "needs-further-triage",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92914",
        "createdAt":  "2023-10-02T23:00:44Z",
        "number":  92914,
        "author":  "ericstj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCy_w7Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tarekgh",
                                            "createdAt":  "2023-10-02T23:10:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tornhoof",
                                            "createdAt":  "2023-10-03T08:42:45Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-26T10:44:35Z",
        "body":  "I would expect a well-behaved generator to only execute when code is changed that activates it.  I would expect that generator to demonstrate significantly different performance characteristics when editing code which doesn\u0027t activate it vs code that does activate it (or otherwise influence its outputs).\r\n\r\nThis is not what I observe with the ConfigurationBinder source generator.  It seems to be running and consuming ~ the same amount of CPU regardless of if I make edits to unrelated files vs files which should influence the generator output.\r\n\r\nI tested it with https://github.com/chsienki/GeneratorTracer and a project that gives the generator a lot of work.  I also added explicit events to measure the bulk of the work in the Parse and Emit phases and they agree with this:  https://github.com/ericstj/runtime/commit/c10104cea90ebde28509642d67274d72e90d2867\r\nAnd hacked @chsienki\u0027s tool to measure those: https://github.com/ericstj/GeneratorTracer/commit/c2e33bf713cccf13137bbe6114f645696de11654\r\n\r\nAfter doing this I see lots of executions of the parse and emit phases even when making completely unrelated edits.\r\n\r\nI\u0027m not certain if what I\u0027m observing here is normal and expected or not, but it does disagree with what I would expect from a functioning incremental build pipeline (only rerun when changes are needed).\r\n\r\nI\u0027d like to have a closer look at this with compiler folks and other generator authors to understand if what I see is normal or a problem.\r\n@eiriktsarpalis @CyrusNajmabadi @chsienki @captainsafia \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh2e0cQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5n8aB8",
                                           "createdAt":  "2023-10-02T23:01:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI would expect a well-behaved generator to only execute when code is changed that activates it.  I would expect that generator to demonstrate significantly different performance characteristics when editing code which doesn\u0027t activate it vs code that does activate it (or otherwise influence its outputs).\r\n\r\nThis is not what I observe with the ConfigurationBinder source generator.  It seems to be running and consuming ~ the same amount of CPU regardless of if I make edits to unrelated files vs files which should influence the generator output.\r\n\r\nI tested it with https://github.com/chsienki/GeneratorTracer and a project that gives the generator a lot of work.  I also added explicit events to measure the bulk of the work in the Parse and Emit phases and they agree with this:  https://github.com/ericstj/runtime/commit/c10104cea90ebde28509642d67274d72e90d2867\r\nAnd hacked @chsienki\u0027s tool to measure those: https://github.com/ericstj/GeneratorTracer/commit/c2e33bf713cccf13137bbe6114f645696de11654\r\n\r\nAfter doing this I see lots of executions of the parse and emit phases even when making completely unrelated edits.\r\n\r\nI\u0027m not certain if what I\u0027m observing here is normal and expected or not, but it does disagree with what I would expect from a functioning incremental build pipeline (only rerun when changes are needed).\r\n\r\nI\u0027d like to have a closer look at this with compiler folks and other generator authors to understand if what I see is normal or a problem.\r\n@eiriktsarpalis @CyrusNajmabadi @chsienki @captainsafia \r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eericstj\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Configuration`, `source-generator`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-02T23:01:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5n-TBA",
                                           "createdAt":  "2023-10-03T07:44:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODIgNkw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2023-10-03T16:07:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e After doing this I see lots of executions of the parse and emit phases even when making completely unrelated edits.\r\n\r\nExecutions of the parse phase is expected in unrelated edits, given the current structure of the generator. What is more concerning is the emit phase, which suggests to me that there might be false negative equality comparisons in certain model instances that are not covered by unit testing. \r\n\r\nFWIW I had experienced similar issues while working on STJ incremental values, and it took a bit of debugging until all equality-related bugs were squashed.",
                                           "updatedAt":  "2023-10-03T07:44:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ojOjL",
                                           "createdAt":  "2023-10-09T23:42:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJL9vw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2023-10-10T15:05:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "captainsafia",
                                           "body":  "\u003e Executions of the parse phase is expected in unrelated edits, given the current structure of the generator. \r\n\r\nYes, this meshes with similar things I\u0027ve seen when profiling RDG with the GeneratorTrace tool as well.\r\n\r\nRDG\u0027s \"parse\" phase is particularly expensive because our equality checks need to analyze multiple parts of the invocation syntax (the signature of the delegate parameter, the name of the `Map` action call being invoked, the name of the parameters being passed to the invocation).\r\n\r\nWe can certainly resolve this by making our pipeline more incremental, but it comes at the cost of the generator implementation itself being more complex.\r\n\r\nI think it would be worthwhile to explore the possibility of having generators that don\u0027t run on every edit in the future...\r\n\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2023-10-09T23:42:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5opnYS",
                                           "createdAt":  "2023-10-10T15:54:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJOiVw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "captainsafia",
                                                                               "createdAt":  "2023-10-10T21:35:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I\u0027m moving this issue out of 8.0 - I was able to measure simple usage of ConfigurationBinder and in that case the parse phase is the only phase running on unrelated edits.  \r\n\r\nI did find when testing our the ConfigurationBinder unit tests assembly (lots of Configuration usage) that we regress to running on keypress -- I need to narrow down what\u0027s causing that but given it\u0027s not in the simple case I don\u0027t think it\u0027s blocking 8.0.  \r\n\r\nThis testing did reveal that both the Options and Logging generator run the entire pipeline on every edit.  This is because they Combine with the compilation without any further filtering:\r\nhttps://github.com/dotnet/runtime/blob/e2c319a19c25b8c77f9d060077a4ea5f91a0214a/src/libraries/Microsoft.Extensions.Options/gen/Generator.cs#L27-L28\r\nhttps://github.com/dotnet/runtime/blob/e2c319a19c25b8c77f9d060077a4ea5f91a0214a/src/libraries/Microsoft.Extensions.Logging.Abstractions/gen/LoggerMessageGenerator.Roslyn4.0.cs#L34-L35\r\nSo whenever the compilation changes, their code-generation step will rerun.  They should instead be trying to capture only the relevant portions of the compilation and exposing that in a Select step to better reduce the work from every edit.  This doesn\u0027t appear to be a regression from previous release for 6.0/7.0 - so it\u0027s OK to move that out (while still fixing it in 9.0 with a possibility of backport).\r\n\r\nWe should fix both of these generators and add tests which leverage tracking names to ensure that they remain well-beahved for incremental compilation.\r\n\r\n\u003e think it would be worthwhile to explore the possibility of having generators that don\u0027t run on every edit in the future...\r\n\r\nAgreed.  I\u0027ve raised this question quite a few times during development of the config source generator - what benefit do we really get by regenerating with every edit?  Is it just diagnostics that might result from examining updates to the type graph?  If so - maybe it\u0027s an acceptable tradeoff to defer work until build.\r\n\r\nI chatted with @chsienki about adding the ETW events to our generators and it looks like he has something even better in the works in roslyn itself (hooray!) so these changes don\u0027t need to go in.  ",
                                           "updatedAt":  "2023-10-10T15:54:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HZ7Rx",
                                           "createdAt":  "2024-08-06T16:47:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "We discussed improving the incremental characteristics of the runtime source generators and scoped it out of 9.0",
                                           "updatedAt":  "2024-08-06T16:47:46Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Understand and improve ConfigurationBinder Source Generator incremental behavior",
        "labels":  [
                       "tenet-build-performance",
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93130",
        "createdAt":  "2023-10-06T16:13:25Z",
        "number":  93130,
        "author":  "ericstj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-06T16:47:16Z",
        "body":  "### Description\r\n\r\nRelated: https://github.com/dotnet/runtime/issues/83599, https://github.com/dotnet/runtime/issues/92137, https://github.com/dotnet/runtime/issues/91324\r\n\r\nThe runtime binder will use the runtime type when deciding what members to bind, however the source generator will only use the referenced type - which may be a base type.\r\n\r\nWe could improve this by including cast tests to derived types when handling a base type\u0027s member.\r\nEG:\r\n```C#\r\npublic static void BindCore(IConfiguration configuration, ref Base instance)\r\n{\r\n    if (instance is Derived1 derived1)\r\n        BindCore(configuration, ref derived1);\r\n    else if (instance is Derived2 derived2)\r\n        BindCore(configuration, ref derived2);\r\n    else if (instance is Derived3 derived3)\r\n        BindCore(configuration, ref derived3);\r\n    else \r\n    { \r\n      // abstract binding logic/\r\n    } \r\n}\r\n```\r\n\r\nWe might be able to use some common type multiplexing method to do this, like a bind for object that checks for casting to various types, but it would need to be careful of the order in which to examine types.\r\n\r\nThis approach would create code overlap in handling of members on base types -- we have this overlap today.  If we wanted to try and remove that we could make base bind methods responsible for binding base members - at least for cases where the initialization strategy is parameterless construct.\r\n\r\nIn addition to how we code-gen this we\u0027d need to think about how we discover derived types.  Do we always consider derived types that might be in the compilation?  Do we add some API for developers to express which derived types we should look for?\r\n\r\n\r\n### Reproduction Steps\r\n\r\nNote: requires fix for https://github.com/dotnet/runtime/issues/92137 project: [configAbstract.zip](https://github.com/dotnet/runtime/files/12833175/configAbstract.zip)\r\n\r\n```c#\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nvar c = new ConfigurationBuilder()\r\n    .AddInMemoryCollection(new Dictionary\u003cstring,string?\u003e()\r\n    {\r\n        [\"Value\"] = \"Hello\",\r\n        [\"Member:Value\"] = \"Hello world\",\r\n        [\"Member:Value2\"] = \"Hello world2\"\r\n    })\r\n    .Build();\r\n\r\nMyBase x = new Derived()\r\n{\r\n    Member = new Derived()\r\n};\r\n\r\nc.Bind(x);\r\nConsole.WriteLine(x.Value);\r\nConsole.WriteLine(x.Member?.Value);\r\nConsole.WriteLine(((Derived?)x.Member)?.Value2);\r\n\r\nDerived d = new();\r\nc.GetSection(\"Member\").Bind(d);\r\nConsole.WriteLine(d.Value);\r\nConsole.WriteLine(d.Value2);\r\n\r\npublic abstract class MyBase \r\n{   \r\n    public MyBase() {} \r\n    public virtual string? Value {get; set;}\r\n\r\n    public MyBase? Member { get; set;}\r\n}\r\n\r\npublic class Derived : MyBase\r\n{\r\n    public Derived() : base()\r\n    { }\r\n\r\n    public string? Value2 { get; set; }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nIdeally, the derived type will bind the same way, regardless of bind call:\r\n\r\n```\r\nHello\r\nHello world\r\nHello world2\r\n\r\nHello world\r\nHello world2\r\n```\r\n\r\n### Actual behavior\r\n\r\nOnly the members in the reference type are bound.\r\n```\r\nHello\r\nHello world\r\n\r\nHello world\r\nHello world2\r\n```\r\n\r\n### Regression?\r\n\r\nNo, but it\u0027s a gap between runtime binder and source-gen binder.\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh2ewzw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5oXnmk",
                                           "createdAt":  "2023-10-06T16:13:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nRelated: https://github.com/dotnet/runtime/issues/83599, https://github.com/dotnet/runtime/issues/92137, https://github.com/dotnet/runtime/issues/91324\r\n\r\nThe runtime binder will use the runtime type when deciding what members to bind, however the source generator will only use the referenced type - which may be a base type.\r\n\r\nWe could improve this by including cast tests to derived types when handling a base type\u0027s member.\r\nEG:\r\n```C#\r\npublic static void BindCore(IConfiguration configuration, ref Base instance)\r\n{\r\n    if (instance is Derived1 derived1)\r\n        BindCore(configuration, ref derived1);\r\n    else if (instance is Derived2 derived2)\r\n        BindCore(configuration, ref derived2);\r\n    else if (instance is Derived2 derived3)\r\n        BindCore(configuration, ref derived3);\r\n    else \r\n    { \r\n      // abstract binding logic/\r\n    } \r\n}\r\n```\r\n\r\nWe might be able to use some common type multiplexing method to do this, like a bind for object that checks for casting to various types, but it would need to be careful of the order in which to examine types.\r\n\r\nThis approach would create code overlap in handling of members on base types -- we have this overlap today.  If we wanted to try and remove that we could make base bind methods responsible for binding base members - at least for cases where the initialization strategy is parameterless construct.\r\n\r\nIn addition to how we code-gen this we\u0027d need to think about how we discover derived types.  Do we always consider derived types that might be in the compilation?  Do we add some API for developers to express which derived types we should look for?\r\n\n\n### Reproduction Steps\n\nNote: requires fix for https://github.com/dotnet/runtime/issues/92137 project: [configAbstract.zip](https://github.com/dotnet/runtime/files/12833175/configAbstract.zip)\r\n\r\n```c#\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nvar c = new ConfigurationBuilder()\r\n    .AddInMemoryCollection(new Dictionary\u003cstring,string?\u003e()\r\n    {\r\n        [\"Value\"] = \"Hello\",\r\n        [\"Member:Value\"] = \"Hello world\",\r\n        [\"Member:Value2\"] = \"Hello world2\"\r\n    })\r\n    .Build();\r\n\r\nMyBase x = new Derived()\r\n{\r\n    Member = new Derived()\r\n};\r\n\r\nc.Bind(x);\r\nConsole.WriteLine(x.Value);\r\nConsole.WriteLine(x.Member?.Value);\r\nConsole.WriteLine(((Derived?)x.Member)?.Value2);\r\n\r\nDerived d = new();\r\nc.GetSection(\"Member\").Bind(d);\r\nConsole.WriteLine(d.Value);\r\nConsole.WriteLine(d.Value2);\r\n\r\npublic abstract class MyBase \r\n{   \r\n    public MyBase() {} \r\n    public virtual string? Value {get; set;}\r\n\r\n    public MyBase? Member { get; set;}\r\n}\r\n\r\npublic class Derived : MyBase\r\n{\r\n    public Derived() : base()\r\n    { }\r\n\r\n    public string? Value2 { get; set; }\r\n}\r\n```\n\n### Expected behavior\n\nIdeally, the derived type will bind the same way, regardless of bind call:\r\n\r\n```\r\nHello\r\nHello world\r\nHello world2\r\n\r\nHello world\r\nHello world2\r\n```\n\n### Actual behavior\n\nOnly the members in the reference type are bound.\r\n```\r\nHello\r\nHello world\r\n\r\nHello world\r\nHello world2\r\n```\n\n### Regression?\n\nNo, but it\u0027s a gap between runtime binder and source-gen binder.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eericstj\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-06T16:13:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HZ7DP",
                                           "createdAt":  "2024-08-06T16:47:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Moving out -- haven\u0027t seen requests for this behavior",
                                           "updatedAt":  "2024-08-06T16:47:14Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "ConfigurationBinder polymorphism on bind - does not support binding to derived members",
        "labels":  [
                       "area-Extensions-Configuration",
                       "needs-further-triage",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93335",
        "createdAt":  "2023-10-11T09:53:39Z",
        "number":  93335,
        "author":  "martincostello",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:43:04Z",
        "body":  "### Description\n\nIf the configuration binding source generator is used with a type that uses a custom `[TypeConverter]` to parse the type from a string, the generated code will throw an `InvalidOperationException` at runtime because properties are not present in the configuration that map to the object\u0027s properties when the value is a value in a dictionary.\r\n\r\nFor example, if [this type](https://github.com/martincostello/config-binding-source-generator-typeconverter-repro/blob/e3a9b09a3c8486fb4cf454d4feeb621ba2ca58d7/Repro/Geolocation.cs#L10-L11) is used for [this configuration object](https://github.com/martincostello/config-binding-source-generator-typeconverter-repro/blob/e3a9b09a3c8486fb4cf454d4feeb621ba2ca58d7/Repro/AppOptions.cs#L6-L11) in conjunction with a JSON configuration such as:\r\n\r\n```json\r\n{\r\n  \"Site\": {\r\n    \"Keyed\": {\r\n      \"Somewhere\": \"0,0\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe same issue does not seem to occur if the object is not within a dictionary. I have not tested the behavior when the object is a member of an array.\r\n\n\n### Reproduction Steps\n\n1. Clone [martincostello/config-binding-source-generator-typeconverter-repro](https://github.com/martincostello/config-binding-source-generator-typeconverter-repro)\r\n1. Run `dotnet run --project .\\Repro\\`\r\n\n\n### Expected behavior\n\nThe configuration binding source generator produces code that is able to use the type converter to produce an instance of the given type from the `string Value` property of the `IConfiguration` passed to the generated method.\n\n### Actual behavior\n\nAn `InvalidOperationException` is thrown the first time the application attempts to retrieve the bound configuration object.\r\n\r\n```\r\nUnhandled exception. System.InvalidOperationException: Cannot create instance of type \u0027Repro.Geolocation\u0027 because parameter \u0027latitude\u0027 has no matching config. Each parameter in the constructor that does not have a default value must have a corresponding config entry.\r\n   at Microsoft.Extensions.Configuration.Binder.SourceGeneration.\u003cBindingExtensions_g\u003eFC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__BindingExtensions.InitializeGeolocation(IConfiguration configuration, BinderOptions binderOptions) in .\\config-binding-source-generator-typeconverter-repro\\Repro\\Microsoft.Extensions.Configuration.Binder.SourceGeneration\\Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator\\BindingExtensions.g.cs:line 174\r\n   at Microsoft.Extensions.Configuration.Binder.SourceGeneration.\u003cBindingExtensions_g\u003eFC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__BindingExtensions.BindCore(IConfiguration configuration, IDictionary`2\u0026 instance, Boolean defaultValueIfNotFound, BinderOptions binderOptions) in .\\config-binding-source-generator-typeconverter-repro\\Repro\\Microsoft.Extensions.Configuration.Binder.SourceGeneration\\Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator\\BindingExtensions.g.cs:line 134\r\n   at Microsoft.Extensions.Configuration.Binder.SourceGeneration.\u003cBindingExtensions_g\u003eFC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__BindingExtensions.BindCore(IConfiguration configuration, SiteOptions\u0026 instance, Boolean defaultValueIfNotFound, BinderOptions binderOptions) in .\\config-binding-source-generator-typeconverter-repro\\Repro\\Microsoft.Extensions.Configuration.Binder.SourceGeneration\\Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator\\BindingExtensions.g.cs:line 160\r\n   at Microsoft.Extensions.Configuration.Binder.SourceGeneration.\u003cBindingExtensions_g\u003eFC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__BindingExtensions.BindCoreMain(IConfiguration configuration, Object instance, Type type, Action`1 configureOptions) in .\\config-binding-source-generator-typeconverter-repro\\Repro\\Microsoft.Extensions.Configuration.Binder.SourceGeneration\\Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator\\BindingExtensions.g.cs:line 83\r\n   at Microsoft.Extensions.Configuration.Binder.SourceGeneration.\u003cBindingExtensions_g\u003eFC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__BindingExtensions.\u003c\u003ec__DisplayClass1_0`1.\u003cConfigure\u003eb__0(TOptions instance) in .\\config-binding-source-generator-typeconverter-repro\\Repro\\Microsoft.Extensions.Configuration.Binder.SourceGeneration\\Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator\\BindingExtensions.g.cs:line 58\r\n   at Microsoft.Extensions.Options.OptionsFactory`1.Create(String name)\r\n   at Microsoft.Extensions.Options.UnnamedOptionsManager`1.get_Value()\r\n   at Program.\u003cMain\u003e$(String[] args) in .\\config-binding-source-generator-typeconverter-repro\\Repro\\Program.cs:line 11\r\n```\n\n### Regression?\n\nUnknown compared to the previews and rc.1 - I had the configuration binding source generator disabled before RC2 due to #90851, #90987 and #91258 that prevented my code from running this far.\r\n\n\n### Known Workarounds\n\nDisable the configuration binding source generator or refactor code to not use a custom `[TypeConverter]`.\r\n\n\n### Configuration\n\n.NET SDK `8.0.100-rc.2.23502.2`\r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaNp91w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ovjn9",
                                           "createdAt":  "2023-10-11T09:53:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nIf the configuration binding source generator is used with a type that uses a custom `[TypeConverter]` to parse the type from a string, the generated code will throw an `InvalidOperationException` at runtime because properties are not present in the configuration that map to the object\u0027s properties when the value is a value in a dictionary.\r\n\r\nFor example, if [this type](https://github.com/martincostello/config-binding-source-generator-typeconverter-repro/blob/e3a9b09a3c8486fb4cf454d4feeb621ba2ca58d7/Repro/Geolocation.cs#L10-L11) is used for [this configuration object](https://github.com/martincostello/config-binding-source-generator-typeconverter-repro/blob/e3a9b09a3c8486fb4cf454d4feeb621ba2ca58d7/Repro/AppOptions.cs#L6-L11) in conjunction with a JSON configuration such as:\r\n\r\n```json\r\n{\r\n  \"Site\": {\r\n    \"Keyed\": {\r\n      \"Somewhere\": \"0,0\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe same issue does not seem to occur if the object is not within a dictionary. I have not tested the behavior when the object is a member of an array.\r\n\n\n### Reproduction Steps\n\n1. Clone [martincostello/config-binding-source-generator-typeconverter-repro](https://github.com/martincostello/config-binding-source-generator-typeconverter-repro)\r\n1. Run `dotnet run --project .\\Repro\\`\r\n\n\n### Expected behavior\n\nThe configuration binding source generator produces code that is able to use the type converter to produce an instance of the given type from the `string Value` property of the `IConfiguration` passed to the generated method.\n\n### Actual behavior\n\nAn `InvalidOperationException` is thrown the first time the application attempts to retrieve the bound configuration object.\r\n\r\n```\r\nUnhandled exception. System.InvalidOperationException: Cannot create instance of type \u0027Repro.Geolocation\u0027 because parameter \u0027latitude\u0027 has no matching config. Each parameter in the constructor that does not have a default value must have a corresponding config entry.\r\n   at Microsoft.Extensions.Configuration.Binder.SourceGeneration.\u003cBindingExtensions_g\u003eFC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__BindingExtensions.InitializeGeolocation(IConfiguration configuration, BinderOptions binderOptions) in .\\config-binding-source-generator-typeconverter-repro\\Repro\\Microsoft.Extensions.Configuration.Binder.SourceGeneration\\Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator\\BindingExtensions.g.cs:line 174\r\n   at Microsoft.Extensions.Configuration.Binder.SourceGeneration.\u003cBindingExtensions_g\u003eFC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__BindingExtensions.BindCore(IConfiguration configuration, IDictionary`2\u0026 instance, Boolean defaultValueIfNotFound, BinderOptions binderOptions) in .\\config-binding-source-generator-typeconverter-repro\\Repro\\Microsoft.Extensions.Configuration.Binder.SourceGeneration\\Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator\\BindingExtensions.g.cs:line 134\r\n   at Microsoft.Extensions.Configuration.Binder.SourceGeneration.\u003cBindingExtensions_g\u003eFC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__BindingExtensions.BindCore(IConfiguration configuration, SiteOptions\u0026 instance, Boolean defaultValueIfNotFound, BinderOptions binderOptions) in .\\config-binding-source-generator-typeconverter-repro\\Repro\\Microsoft.Extensions.Configuration.Binder.SourceGeneration\\Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator\\BindingExtensions.g.cs:line 160\r\n   at Microsoft.Extensions.Configuration.Binder.SourceGeneration.\u003cBindingExtensions_g\u003eFC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__BindingExtensions.BindCoreMain(IConfiguration configuration, Object instance, Type type, Action`1 configureOptions) in .\\config-binding-source-generator-typeconverter-repro\\Repro\\Microsoft.Extensions.Configuration.Binder.SourceGeneration\\Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator\\BindingExtensions.g.cs:line 83\r\n   at Microsoft.Extensions.Configuration.Binder.SourceGeneration.\u003cBindingExtensions_g\u003eFC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__BindingExtensions.\u003c\u003ec__DisplayClass1_0`1.\u003cConfigure\u003eb__0(TOptions instance) in .\\config-binding-source-generator-typeconverter-repro\\Repro\\Microsoft.Extensions.Configuration.Binder.SourceGeneration\\Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator\\BindingExtensions.g.cs:line 58\r\n   at Microsoft.Extensions.Options.OptionsFactory`1.Create(String name)\r\n   at Microsoft.Extensions.Options.UnnamedOptionsManager`1.get_Value()\r\n   at Program.\u003cMain\u003e$(String[] args) in .\\config-binding-source-generator-typeconverter-repro\\Repro\\Program.cs:line 11\r\n```\n\n### Regression?\n\nUnknown compared to the previews and rc.1 - I had the configuration binding source generator disabled before RC2 due to #90851, #90987 and #91258 that prevented my code from running this far.\r\n\n\n### Known Workarounds\n\nDisable the configuration binding source generator or refactor code to not use a custom `[TypeConverter]`.\r\n\n\n### Configuration\n\n.NET SDK `8.0.100-rc.2.23502.2`\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emartincostello\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-11T09:53:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oztJU",
                                           "createdAt":  "2023-10-11T19:22:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "This was intentionally out of scope for v1 of the configuration source generator.  Please see https://github.com/dotnet/runtime/issues/83599 for the way we\u0027re thinking about handling this as well as suggested workarounds.\r\n",
                                           "updatedAt":  "2023-10-11T19:22:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5o2n3X",
                                           "createdAt":  "2023-10-12T08:16:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "martincostello",
                                           "body":  "Fair enough - I did think it weird though that it doesn\u0027t work in a dictionary, but it seemed to work outside of one.\r\n\r\nHowever, I just tweaked my code a bit and had another look and in the case of it not being in a dictionary, it instead just silently doesn\u0027t bind anything at all and you get left with the default value, rather than an exception being thrown.\r\n\r\n`Repro/appsettings.json`\r\n\r\n```diff\r\n-    \"Keyed\": {\r\n-      \"Somewhere\": \"0,0\"\r\n-    }\r\n+    \"Single\": \"1,2\"\r\n```\r\n\r\n`Repro/Program.cs`\r\n\r\n```diff\r\n- _ = app.Services.GetRequiredService\u003cIOptions\u003cSiteOptions\u003e\u003e().Value;\r\n+ var opts = app.Services.GetRequiredService\u003cIOptions\u003cSiteOptions\u003e\u003e().Value;\r\n+ Console.WriteLine(opts.Single);\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n0,0\r\n```\r\n",
                                           "updatedAt":  "2023-10-12T08:16:42Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Configuration Binding source generator throws InvalidOperationException at runtime for type with custom [TypeConverter] use within a dictionary",
        "labels":  [
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94071",
        "createdAt":  "2023-10-26T23:14:13Z",
        "number":  94071,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:43:06Z",
        "body":  "### Description\n\nWhen trying to use the ConfigurationBinder source generator with the Azure SDK\u0027s ClientOptions objects I\u0027m getting compile errors. However, the compile errors come from a method that isn\u0027t even invoked.\n\n### Reproduction Steps\n\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cEnableConfigurationBindingGenerator\u003etrue\u003c/EnableConfigurationBindingGenerator\u003e\r\n    \u003cNoWarn\u003e$(NoWarn);SYSLIB1100;SYSLIB1101\u003c/NoWarn\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"8.0.0-rtm.23511.16\" /\u003e\r\n    \u003cPackageReference Include=\"Azure.Storage.Blobs\" Version=\"12.17.0\" Aliases=\"AzureStorageBlobs\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\n```csharp\r\nextern alias AzureStorageBlobs;\r\nglobal using AzureStorageBlobs.Azure.Storage.Blobs;\r\nglobal using AzureStorageBlobs.Azure.Storage.Blobs.Models;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nConsole.WriteLine(\"Hello, World!\");\r\n\r\nstatic void BindToConfiguration(BlobClientOptions options, IConfiguration configuration)\r\n{\r\n    var configurationOptionsSection = configuration.GetSection(\"ConfigurationOptions\");\r\n    configurationOptionsSection.Bind(options);\r\n}\r\n\r\nnamespace Azure.Storage.Blobs.Models { }\r\n```\r\n\r\n(note the alias, global usings, and empty namespace is to work around #93498 and #94065\n\n### Expected behavior\n\nThe source generator should work for these options types. The Azure SDK currently uses the reflection-based config binder here:\r\n\r\nhttps://github.com/Azure/azure-sdk-for-net/blob/6d43c499a7cd6bf6b1aba9ea220ba22e54e6f7e1/sdk/extensions/Microsoft.Extensions.Azure/src/AzureClientBuilderExtensions.cs#L83\n\n### Actual behavior\n\nYou get a build error:\r\n\r\n```\r\nC:\\Users\\eerhardt\\source\\repos\\ConsoleApp101\\ConsoleApp101\\Microsoft.Extensions.Configuration.Binder.SourceGeneration\\Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator\\BindingExtensions.g.cs(450,56,450,58): error CS0266: Cannot implicitly convert type \u0027int\u0027 to \u0027Azure.Storage.Blobs.BlobClientOptions.ServiceVersion\u0027. An explicit conversion exists (are you missing a cast?)\r\n```\r\n\r\nThis is coming from this generated code:\r\n\r\n```csharp\r\n        public static BlobClientOptions InitializeBlobClientOptions(IConfiguration configuration, BinderOptions? binderOptions)\r\n        {\r\n            BlobClientOptions.ServiceVersion version = 17;\r\n            if (configuration[\"Version\"] is string value73)\r\n            {\r\n                version = ParseEnum\u003cBlobClientOptions.ServiceVersion\u003e(value73, () =\u003e configuration.GetSection(\"Version\").Path);\r\n            }\r\n\r\n            return new BlobClientOptions(version);\r\n        }\r\n```\r\n\r\nHowever, this `InitializeBlobClientOptions` method isn\u0027t even called.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOajh32A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5qN9VP",
                                           "createdAt":  "2023-10-26T23:14:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen trying to use the ConfigurationBinder source generator with the Azure SDK\u0027s ClientOptions objects I\u0027m getting compile errors. However, the compile errors come from a method that isn\u0027t even invoked.\n\n### Reproduction Steps\n\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cEnableConfigurationBindingGenerator\u003etrue\u003c/EnableConfigurationBindingGenerator\u003e\r\n    \u003cNoWarn\u003e$(NoWarn);SYSLIB1100;SYSLIB1101\u003c/NoWarn\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"8.0.0-rtm.23511.16\" /\u003e\r\n    \u003cPackageReference Include=\"Azure.Storage.Blobs\" Version=\"12.17.0\" Aliases=\"AzureStorageBlobs\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\n```csharp\r\nextern alias AzureStorageBlobs;\r\nglobal using AzureStorageBlobs.Azure.Storage.Blobs;\r\nglobal using AzureStorageBlobs.Azure.Storage.Blobs.Models;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nConsole.WriteLine(\"Hello, World!\");\r\n\r\nstatic void BindToConfiguration(BlobClientOptions options, IConfiguration configuration)\r\n{\r\n    var configurationOptionsSection = configuration.GetSection(\"ConfigurationOptions\");\r\n    configurationOptionsSection.Bind(options);\r\n}\r\n\r\nnamespace Azure.Storage.Blobs.Models { }\r\n```\r\n\r\n(note the alias, global usings, and empty namespace is to work around #93498 and #94065\n\n### Expected behavior\n\nThe source generator should work for these options types. The Azure SDK currently uses the reflection-based config binder here:\r\n\r\nhttps://github.com/Azure/azure-sdk-for-net/blob/6d43c499a7cd6bf6b1aba9ea220ba22e54e6f7e1/sdk/extensions/Microsoft.Extensions.Azure/src/AzureClientBuilderExtensions.cs#L83\n\n### Actual behavior\n\nYou get a build error:\r\n\r\n```\r\nC:\\Users\\eerhardt\\source\\repos\\ConsoleApp101\\ConsoleApp101\\Microsoft.Extensions.Configuration.Binder.SourceGeneration\\Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator\\BindingExtensions.g.cs(450,56,450,58): error CS0266: Cannot implicitly convert type \u0027int\u0027 to \u0027Azure.Storage.Blobs.BlobClientOptions.ServiceVersion\u0027. An explicit conversion exists (are you missing a cast?)\r\n```\r\n\r\nThis is coming from this generated code:\r\n\r\n```csharp\r\n        public static BlobClientOptions InitializeBlobClientOptions(IConfiguration configuration, BinderOptions? binderOptions)\r\n        {\r\n            BlobClientOptions.ServiceVersion version = 17;\r\n            if (configuration[\"Version\"] is string value73)\r\n            {\r\n                version = ParseEnum\u003cBlobClientOptions.ServiceVersion\u003e(value73, () =\u003e configuration.GetSection(\"Version\").Path);\r\n            }\r\n\r\n            return new BlobClientOptions(version);\r\n        }\r\n```\r\n\r\nHowever, this `InitializeBlobClientOptions` method isn\u0027t even called.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-26T23:14:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qOGuM",
                                           "createdAt":  "2023-10-26T23:48:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I thought this might be type conversion issue but it looks a simple enough fixing it by casting the `int` to the enum [ServiceVersion](https://github.com/Azure/azure-sdk-for-net/blob/6d43c499a7cd6bf6b1aba9ea220ba22e54e6f7e1/sdk/storage/Azure.Storage.Blobs/src/BlobClientOptions.cs#L29C35-L29C35)\r\n\r\n",
                                           "updatedAt":  "2023-10-26T23:48:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qOHfY",
                                           "createdAt":  "2023-10-26T23:53:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLOzmA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2023-10-26T23:56:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidfowl",
                                                                               "createdAt":  "2023-10-28T21:19:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ericstj",
                                           "body":  "The enum bug is already fixed with https://github.com/dotnet/runtime/pull/93160 which we\u0027ll backport in https://github.com/dotnet/runtime/pull/94070.\r\n\r\nThis issue is tracking the fact that we generate a `InitializeBlobClientOptions` method but never call it.\r\n\r\nI was able to isolate that repro down to the case where we only ever `Bind` to a type and that type has a constructor initialization strategy.  Since the generator only produces `Bind` logic (and not `Get`) it never calls the initialization method.  \r\n\r\nSimplified repro: [bindCtor.zip](https://github.com/dotnet/runtime/files/13183682/bindCtor.zip)\r\n\r\nExpect: All methods generated are necessary\r\nActual: InitializeMyConfig is generated but never called.\r\n\r\nIn fixing this we should see if there\u0027s a way to make the unreachable code analyzer catch this sort of thing on our generated code - at least in our tests.\r\n\r\n",
                                           "updatedAt":  "2023-11-03T19:13:36Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "ConfigurationBinder generates initialization logic for root type and never calls it when only generating Bind interceptors",
        "labels":  [
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94105",
        "createdAt":  "2023-10-27T19:24:46Z",
        "number":  94105,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:43:07Z",
        "body":  "### Description\n\nWhen attempting to use the ConfigurationBinder source generator in dotnet/extensions (see https://github.com/dotnet/extensions/pull/4625), I\u0027m getting a nullable warning that is causing the generated code to not compile (I would need to disable nullable validation for the whole project if I wanted to ignore the nullable warning, which isn\u0027t acceptable).\r\n\r\nI\u0027m not sure what the general pattern is here that causes this issue, so I logged the issue for the scenario specifically. I think it might need to include nested generics where one of the nested generic types is nullable.\n\n### Reproduction Steps\n\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cEnableConfigurationBindingGenerator\u003etrue\u003c/EnableConfigurationBindingGenerator\u003e\r\n    \u003cNoWarn\u003e$(NoWarn);SYSLIB1100;SYSLIB1101\u003c/NoWarn\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"8.0.0-rtm.23511.16\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Http.Resilience\" Version=\"8.0.0-rc.2.23510.2\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\n```csharp\r\n// needed to work around https://github.com/dotnet/runtime/issues/94065\r\nglobal using Polly;\r\nglobal using Polly.Hedging;\r\nglobal using Polly.RateLimiting;\r\nglobal using Polly.Timeout;\r\n\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Http.Resilience;\r\n\r\nvar c = new ConfigurationBuilder().Build();\r\nc.Get\u003cHttpStandardHedgingResilienceOptions\u003e();\r\n```\n\n### Expected behavior\n\nShould be without warnings\n\n### Actual behavior\n\nGet a nullable warning from generated code:\r\n\r\n```\r\nCS8619\tNullability of reference types in value of type \u0027Func\u003cHedgingActionGeneratorArguments\u003cHttpResponseMessage\u003e, Func\u003cValueTask\u003cOutcome\u003cHttpResponseMessage\u003e\u003e\u003e?\u003e\u0027 doesn\u0027t match target type \u0027Func\u003cHedgingActionGeneratorArguments\u003cHttpResponseMessage\u003e, Func\u003cValueTask\u003cOutcome\u003cHttpResponseMessage\u003e\u003e\u003e\u003e\u0027.\tConsoleApp101\tC:\\Users\\eerhardt\\source\\repos\\ConsoleApp101\\ConsoleApp101\\Microsoft.Extensions.Configuration.Binder.SourceGeneration\\Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator\\BindingExtensions.g.cs\t1418\t\t\r\n```\r\n\r\nThe generated code looks like:\r\n\r\n```csharp\r\n            if (AsConfigWithChildren(configuration.GetSection(\"ActionGenerator\")) is IConfigurationSection section256)\r\n            {\r\n                Func\u003cHedgingActionGeneratorArguments\u003cHttpResponseMessage\u003e, Func\u003cValueTask\u003cOutcome\u003cHttpResponseMessage\u003e\u003e\u003e\u003e? temp258 = instance.ActionGenerator;\r\n                if (temp258 is not null)\r\n                {\r\n```\r\n\r\nThat middle line is the issue, it is of type:\r\n\r\n`Func\u003cHedgingActionGeneratorArguments\u003cHttpResponseMessage\u003e, Func\u003cValueTask\u003cOutcome\u003cHttpResponseMessage\u003e\u003e\u003e\u003e`\r\nbut the type of `instance.ActionGenerator` is:\r\n`Func\u003cHedgingActionGeneratorArguments\u003cTResult\u003e, Func\u003cValueTask\u003cOutcome\u003cTResult\u003e\u003e\u003e?\u003e`\r\n\r\nNote the `?` inside the last `\u003e` brace.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\ncc @tarekgh @ericstj ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh4ARPA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5qTIgA",
                                           "createdAt":  "2023-10-27T19:24:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen attempting to use the ConfigurationBinder source generator in dotnet/extensions (see https://github.com/dotnet/extensions/pull/4625), I\u0027m getting a nullable warning that is causing the generated code to not compile (I would need to disable nullable validation for the whole project if I wanted to ignore the nullable warning, which isn\u0027t acceptable).\r\n\r\nI\u0027m not sure what the general pattern is here that causes this issue, so I logged the issue for the scenario specifically. I think it might need to include nested generics where one of the nested generic types is nullable.\n\n### Reproduction Steps\n\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cEnableConfigurationBindingGenerator\u003etrue\u003c/EnableConfigurationBindingGenerator\u003e\r\n    \u003cNoWarn\u003e$(NoWarn);SYSLIB1100;SYSLIB1101\u003c/NoWarn\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"8.0.0-rtm.23511.16\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Http.Resilience\" Version=\"8.0.0-rc.2.23510.2\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\n```csharp\r\n// needed to work around https://github.com/dotnet/runtime/issues/94065\r\nglobal using Polly;\r\nglobal using Polly.Hedging;\r\nglobal using Polly.RateLimiting;\r\nglobal using Polly.Timeout;\r\n\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Http.Resilience;\r\n\r\nvar c = new ConfigurationBuilder().Build();\r\nc.Get\u003cHttpStandardHedgingResilienceOptions\u003e();\r\n```\n\n### Expected behavior\n\nShould be without warnings\n\n### Actual behavior\n\nGet a nullable warning from generated code:\r\n\r\n```\r\nCS8619\tNullability of reference types in value of type \u0027Func\u003cHedgingActionGeneratorArguments\u003cHttpResponseMessage\u003e, Func\u003cValueTask\u003cOutcome\u003cHttpResponseMessage\u003e\u003e\u003e?\u003e\u0027 doesn\u0027t match target type \u0027Func\u003cHedgingActionGeneratorArguments\u003cHttpResponseMessage\u003e, Func\u003cValueTask\u003cOutcome\u003cHttpResponseMessage\u003e\u003e\u003e\u003e\u0027.\tConsoleApp101\tC:\\Users\\eerhardt\\source\\repos\\ConsoleApp101\\ConsoleApp101\\Microsoft.Extensions.Configuration.Binder.SourceGeneration\\Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator\\BindingExtensions.g.cs\t1418\t\t\r\n```\r\n\r\nThe generated code looks like:\r\n\r\n```csharp\r\n            if (AsConfigWithChildren(configuration.GetSection(\"ActionGenerator\")) is IConfigurationSection section256)\r\n            {\r\n                Func\u003cHedgingActionGeneratorArguments\u003cHttpResponseMessage\u003e, Func\u003cValueTask\u003cOutcome\u003cHttpResponseMessage\u003e\u003e\u003e\u003e? temp258 = instance.ActionGenerator;\r\n                if (temp258 is not null)\r\n                {\r\n```\r\n\r\nThat middle line is the issue, it is of type:\r\n\r\n`Func\u003cHedgingActionGeneratorArguments\u003cHttpResponseMessage\u003e, Func\u003cValueTask\u003cOutcome\u003cHttpResponseMessage\u003e\u003e\u003e\u003e`\r\nbut the type of `instance.ActionGenerator` is:\r\n`Func\u003cHedgingActionGeneratorArguments\u003cTResult\u003e, Func\u003cValueTask\u003cOutcome\u003cTResult\u003e\u003e\u003e?\u003e`\r\n\r\nNote the `?` inside the last `\u003e` brace.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\ncc @tarekgh @ericstj \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-27T19:24:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qWIs0",
                                           "createdAt":  "2023-10-29T18:15:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "That\u0027s surprising, doesn\u0027t the generated code suppress nullability warnings in source?",
                                           "updatedAt":  "2023-10-29T18:15:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qa0Tw",
                                           "createdAt":  "2023-10-30T15:03:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLW8QA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2023-10-30T16:05:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e That\u0027s surprising, doesn\u0027t the generated code suppress nullability warnings in source?\r\n\r\nNo, it explicitly enables it:\r\n\r\nhttps://github.com/dotnet/runtime/blob/44a5abd54c8c6888cdbb7fac490279fd7ee3334e/src/libraries/Microsoft.Extensions.Configuration.Binder/gen/ConfigurationBindingGenerator.Emitter.cs#L39-L43",
                                           "updatedAt":  "2023-10-30T15:03:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qbU13",
                                           "createdAt":  "2023-10-30T16:08:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "That seems surprising given that this was picked up from the JSON generator:\r\n\r\nhttps://github.com/dotnet/runtime/blob/c1f43410e677b7a4d34113582ae4703aa6c1cc99/src/libraries/System.Text.Json/gen/JsonSourceGenerator.Emitter.cs#L136-L145\r\n\r\nI think we should consistently disable nullability warnings in all generated code (except perhaps in debug builds of the generator?)",
                                           "updatedAt":  "2023-10-30T16:08:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qn-69",
                                           "createdAt":  "2023-11-01T12:23:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "@eerhardt I\u0027m preparing a PR that disables nullability warnings in generated code. I\u0027m not super familiar with this library though, do you know if there\u0027s a minimal repro I can use that doesn\u0027t require the dependency on Polly?",
                                           "updatedAt":  "2023-11-01T12:23:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qoJJ5",
                                           "createdAt":  "2023-11-01T12:55:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Unfortunately, no I don\u0027t. I haven\u0027t had time to pare it down.\r\n\r\nI would try making a type of `Func\u003cHedgingActionGeneratorArguments\u003cTResult\u003e, Func\u003cValueTask\u003cOutcome\u003cTResult\u003e\u003e\u003e?\u003e`\r\n\r\nwhere HedgingActionGeneratorArguments and Outcome are generic types.",
                                           "updatedAt":  "2023-11-01T12:55:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qoMwu",
                                           "createdAt":  "2023-11-01T13:05:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Is that warning a side-effect of the generator erroneously generating binding code for delegate types?",
                                           "updatedAt":  "2023-11-01T13:05:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qoaes",
                                           "createdAt":  "2023-11-01T13:42:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Yes, but I believe the issue will also occur if you replace the `Func` with some other generic types.",
                                           "updatedAt":  "2023-11-01T13:42:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rbtez",
                                           "createdAt":  "2023-11-08T18:25:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "This was addressed in .NET 8 via https://github.com/dotnet/runtime/pull/94267 by disabling nullability warnings altogether. Moving to Future for a fix that addresses the specific annotation issue.",
                                           "updatedAt":  "2023-11-08T18:25:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HgBE8",
                                           "createdAt":  "2024-08-07T12:08:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Moving to 10.0.0",
                                           "updatedAt":  "2024-08-07T12:08:07Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "ConfigurationBinder source generator generates code with the wrong nullable annotations",
        "labels":  [
                       "bug",
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94142",
        "createdAt":  "2023-10-28T18:49:28Z",
        "number":  94142,
        "author":  "ericstj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCzn-Iw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "davidfowl",
                                            "createdAt":  "2023-10-28T18:59:41Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-26T10:47:16Z",
        "body":  "If a type contains no members for binding we shouldn\u0027t generator source for that.  This includes the case where the only members it generates are references to itself.\r\n\r\nConsider the following types:\r\n```C#\r\npublic abstract class MySingleton\r\n{\r\n    public static MySingleton Instance {get; set;}\r\n}\r\n```\r\n\r\n```C#\r\npublic abstract class MyNode\r\n{\r\n  public MyNode Next { get; set; }\r\n}\r\n```\r\n\r\n```C#\r\npublic class MyClass\r\n{\r\n   // all members below are excluded\r\n  public int[,] Matrix { get; set; }\r\n  public Func\u003cstring, int\u003e ParseMethod { get; set; }\r\n}\r\n```\r\n\r\nAll have no bindable members and result in useless code gen today.  It\u0027s harmless - but we should try to identify these types of things through heuristics to reduce the size of the codegen.  We should inform the behavior for non-abstract instance types from the runtime binder to determine if they\u0027ll be initialized or not in these cases -- I don\u0027t think they would.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOa1OzYg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5qVEqx",
                                           "createdAt":  "2023-10-28T19:55:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIf a type contains no members for binding we shouldn\u0027t generator source for that.  This includes the case where the only members it generates are references to itself.\r\n\r\nConsider the following types:\r\n```C#\r\npublic abstract class MySingleton\r\n{\r\n    public static MySingleton Instance {get; set;}\r\n}\r\n```\r\n\r\n```C#\r\npublic abstract class MyNode\r\n{\r\n  public MyNode Next { get; set; }\r\n}\r\n```\r\n\r\n```C#\r\npublic class MyClass\r\n{\r\n   // all members below are excluded\r\n  public int[,] Matrix { get; set; }\r\n  public Func\u003cstring, int\u003e ParseMethod { get; set; }\r\n}\r\n```\r\n\r\nAll have no bindable members and result in useless code gen today.  It\u0027s harmless - but we should try to identify these types of things through heuristics to reduce the size of the codegen.  We should inform the behavior for non-abstract instance types from the runtime binder to determine if they\u0027ll be initialized or not in these cases -- I don\u0027t think they would.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eericstj\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Configuration`, `source-generator`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-28T19:55:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rU7Ni",
                                           "createdAt":  "2023-11-08T00:11:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "The PR https://github.com/dotnet/runtime/pull/94438 should address the third case \r\n\r\n```C#\r\npublic class MyClass\r\n{\r\n   // all members below are excluded\r\n  public int[,] Matrix { get; set; }\r\n  public Func\u003cstring, int\u003e ParseMethod { get; set; }\r\n}\r\n```",
                                           "updatedAt":  "2023-11-09T01:14:37Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "ConfigurationBinder source generator should not generate source for types without members",
        "labels":  [
                       "enhancement",
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94544",
        "createdAt":  "2023-11-08T20:58:03Z",
        "number":  94544,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:46:57Z",
        "body":  "### Description\r\n\r\nWhen passing the result of the ConfigurationBinder `.Get\u003cT\u003e()` directly into a method, I\u0027m still getting AOT/trim warnings.\r\n\r\n### Reproduction Steps\r\n\r\nBuild the following app:\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cEnableConfigurationBindingGenerator\u003etrue\u003c/EnableConfigurationBindingGenerator\u003e\r\n    \u003cEmitCompilerGeneratedFiles\u003etrue\u003c/EmitCompilerGeneratedFiles\u003e\r\n    \u003cPublishAot\u003etrue\u003c/PublishAot\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"9.0.0-alpha.1.23558.3\" /\u003e \r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"9.0.0-alpha.1.23558.3\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\n```C#\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nIConfigurationSection c = new ConfigurationBuilder().Build().GetSection(\"Options\");\r\n#if WORKS\r\nvar o = c.Get\u003cMyOptions\u003e();\r\nSome.Method(o);\r\n#else\r\nSome.Method(c.Get\u003cMyOptions\u003e());\r\n#endif\r\n\r\ninternal static class Some\r\n{\r\n    public static void Method(MyOptions? options) { }\r\n}\r\n\r\npublic class MyOptions\r\n{\r\n    public int MaxRetries { get; set; }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nI shouldn\u0027t get AOT/trim warnings because I\u0027m using the Source Generator.\r\n\r\n### Actual behavior\r\n\r\n```\r\n1\u003eC:\\Users\\eerhardt\\source\\repos\\ConsoleApp101\\ConsoleApp101\\Program.cs(4,13,4,31): warning IL3050: Using member \u0027Microsoft.Extensions.Configuration.ConfigurationBinder.Get\u003cT\u003e(IConfiguration)\u0027 which has \u0027RequiresDynamicCodeAttribute\u0027 can break functionality when AOT compiling. Binding strongly typed objects to configuration values requires generating dynamic code at runtime, for example instantiating generic types.\r\n1\u003eC:\\Users\\eerhardt\\source\\repos\\ConsoleApp101\\ConsoleApp101\\Program.cs(4,13,4,31): warning IL2026: Using member \u0027Microsoft.Extensions.Configuration.ConfigurationBinder.Get\u003cT\u003e(IConfiguration)\u0027 which has \u0027RequiresUnreferencedCodeAttribute\u0027 can break functionality when trimming application code. In case the type is non-primitive, the trimmer cannot statically analyze the object\u0027s type so its members may be trimmed.\r\n```\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nCapture the object into a variable on a separate line, and pass that into the method:\r\n\r\n```C#\r\nvar o = c.Get\u003cMyOptions\u003e();\r\nSome.Method(o);\r\n```\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiFfu0A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5rcnfC",
                                           "createdAt":  "2023-11-08T20:58:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen passing the result of the ConfigurationBinder `.Get\u003cT\u003e()` directly into a method, I\u0027m still getting AOT/trim warnings.\n\n### Reproduction Steps\n\nBuild the following app:\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cEnableConfigurationBindingGenerator\u003etrue\u003c/EnableConfigurationBindingGenerator\u003e\r\n    \u003cPublishAot\u003etrue\u003c/PublishAot\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"9.0.0-dev\" /\u003e \u003c!-- local build of dotnet/runtime main --\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"9.0.0-dev\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\n```C#\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nIConfigurationSection c = new ConfigurationBuilder().Build().GetSection(\"Options\");\r\nSome.Method(c.Get\u003cMyOptions\u003e());\r\n\r\ninternal static class Some\r\n{\r\n    public static void Method(MyOptions? options) { }\r\n}\r\n\r\npublic class MyOptions\r\n{\r\n    public int MaxRetries { get; set; }\r\n}\r\n```\n\n### Expected behavior\n\nI shouldn\u0027t get AOT/trim warnings because I\u0027m using the Source Generator.\n\n### Actual behavior\n\n```\r\n1\u003eC:\\Users\\eerhardt\\source\\repos\\ConsoleApp101\\ConsoleApp101\\Program.cs(4,13,4,31): warning IL3050: Using member \u0027Microsoft.Extensions.Configuration.ConfigurationBinder.Get\u003cT\u003e(IConfiguration)\u0027 which has \u0027RequiresDynamicCodeAttribute\u0027 can break functionality when AOT compiling. Binding strongly typed objects to configuration values requires generating dynamic code at runtime, for example instantiating generic types.\r\n1\u003eC:\\Users\\eerhardt\\source\\repos\\ConsoleApp101\\ConsoleApp101\\Program.cs(4,13,4,31): warning IL2026: Using member \u0027Microsoft.Extensions.Configuration.ConfigurationBinder.Get\u003cT\u003e(IConfiguration)\u0027 which has \u0027RequiresUnreferencedCodeAttribute\u0027 can break functionality when trimming application code. In case the type is non-primitive, the trimmer cannot statically analyze the object\u0027s type so its members may be trimmed.\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nCapture the object into a variable on a separate line, and pass that into the method:\r\n\r\n```C#\r\nvar o = c.Get\u003cMyOptions\u003e();\r\nSome.Method(o);\r\n```\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-08T20:58:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rdIDV",
                                           "createdAt":  "2023-11-08T22:42:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I can reproduce with the latest package from the feed as well.  I see the generator is generating code, but the interceptor attribute isn\u0027t functioning correctly.",
                                           "updatedAt":  "2023-11-08T22:42:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rdxUP",
                                           "createdAt":  "2023-11-09T00:19:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMK1zA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2023-11-09T00:31:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "This looks like it\u0027s actually a problem with the IL analyzer:\r\n```\r\n1\u003eC:\\Users\\eerhardt\\source\\repos\\ConsoleApp101\\ConsoleApp101\\Program.cs(4,13,4,31): warning IL3050: Using member \u0027Microsoft.Extensions.Configuration.ConfigurationBinder.Get\u003cT\u003e(IConfiguration)\u0027 which has \u0027RequiresDynamicCodeAttribute\u0027 can break functionality when AOT compiling. Binding strongly typed objects to configuration values requires generating dynamic code at runtime, for example instantiating generic types.\r\n1\u003eC:\\Users\\eerhardt\\source\\repos\\ConsoleApp101\\ConsoleApp101\\Program.cs(4,13,4,31): warning IL2026: Using member \u0027Microsoft.Extensions.Configuration.ConfigurationBinder.Get\u003cT\u003e(IConfiguration)\u0027 which has \u0027RequiresUnreferencedCodeAttribute\u0027 can break functionality when trimming application code. In case the type is non-primitive, the trimmer cannot statically analyze the object\u0027s type so its members may be trimmed.\r\n```\r\n\r\nIf I disassemble the compiled binary I can see that it\u0027s calling the intercepted method that doesn\u0027t have the unreferenced code attributes.\r\n```c#\r\nprivate static void \u003cMain\u003e$(string[] args)\r\n{\r\n\tIConfigurationSection c = new ConfigurationBuilder().Build().GetSection(\"Options\");\r\n\tSome.Method(\u003cBindingExtensions_g\u003eFC276FD7C89D1ED0B2B3E96BAC8F157FABB86A642EAABC54639B357A857C01D08__BindingExtensions.Get\u003cMyOptions\u003e(c));\r\n}\r\n```",
                                           "updatedAt":  "2023-11-09T00:19:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rdxUp",
                                           "createdAt":  "2023-11-09T00:19:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen passing the result of the ConfigurationBinder `.Get\u003cT\u003e()` directly into a method, I\u0027m still getting AOT/trim warnings.\r\n\r\n### Reproduction Steps\r\n\r\nBuild the following app:\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cEnableConfigurationBindingGenerator\u003etrue\u003c/EnableConfigurationBindingGenerator\u003e\r\n    \u003cEmitCompilerGeneratedFiles\u003etrue\u003c/EmitCompilerGeneratedFiles\u003e\r\n    \u003cPublishAot\u003etrue\u003c/PublishAot\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"9.0.0-alpha.1.23558.3\" /\u003e \r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"9.0.0-alpha.1.23558.3\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\n```C#\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nIConfigurationSection c = new ConfigurationBuilder().Build().GetSection(\"Options\");\r\n#if WORKS\r\nvar o = c.Get\u003cMyOptions\u003e();\r\nSome.Method(o);\r\n#else\r\nSome.Method(c.Get\u003cMyOptions\u003e());\r\n#endif\r\n\r\ninternal static class Some\r\n{\r\n    public static void Method(MyOptions? options) { }\r\n}\r\n\r\npublic class MyOptions\r\n{\r\n    public int MaxRetries { get; set; }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nI shouldn\u0027t get AOT/trim warnings because I\u0027m using the Source Generator.\r\n\r\n### Actual behavior\r\n\r\n```\r\n1\u003eC:\\Users\\eerhardt\\source\\repos\\ConsoleApp101\\ConsoleApp101\\Program.cs(4,13,4,31): warning IL3050: Using member \u0027Microsoft.Extensions.Configuration.ConfigurationBinder.Get\u003cT\u003e(IConfiguration)\u0027 which has \u0027RequiresDynamicCodeAttribute\u0027 can break functionality when AOT compiling. Binding strongly typed objects to configuration values requires generating dynamic code at runtime, for example instantiating generic types.\r\n1\u003eC:\\Users\\eerhardt\\source\\repos\\ConsoleApp101\\ConsoleApp101\\Program.cs(4,13,4,31): warning IL2026: Using member \u0027Microsoft.Extensions.Configuration.ConfigurationBinder.Get\u003cT\u003e(IConfiguration)\u0027 which has \u0027RequiresUnreferencedCodeAttribute\u0027 can break functionality when trimming application code. In case the type is non-primitive, the trimmer cannot statically analyze the object\u0027s type so its members may be trimmed.\r\n```\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nCapture the object into a variable on a separate line, and pass that into the method:\r\n\r\n```C#\r\nvar o = c.Get\u003cMyOptions\u003e();\r\nSome.Method(o);\r\n```\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-09T00:19:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rdyiz",
                                           "createdAt":  "2023-11-09T00:24:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Here\u0027s a simpler repro that doesn\u0027t use the code-generator and demonstrates the bug in the analyzer:\r\n[GetTest.zip](https://github.com/dotnet/runtime/files/13302468/GetTest.zip)\r\n\r\nIn this case I hooked both calls to the method that is annotated - you can see the final binary doesn\u0027t call the annotated method, but the warnings are emitted.\r\n",
                                           "updatedAt":  "2023-11-09T00:24:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5reN7v",
                                           "createdAt":  "2023-11-09T02:54:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMQIhg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2023-11-09T18:30:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Could it be a bug in here?\r\n\r\nhttps://github.com/dotnet/runtime/blob/c422fca30d826b29aadf6a923369e1848a4aac97/src/libraries/Microsoft.Extensions.Configuration.Binder/gen/ConfigurationBindingGenerator.Suppressor.cs#L20-L22\r\n\r\nI thought this was supposed to suppress the trim/AOT warnings once the call was intercepted.",
                                           "updatedAt":  "2023-11-09T02:54:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rjBHb",
                                           "createdAt":  "2023-11-09T18:28:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I think you are right.  My simplified repro shows both diagnostics - indicating it might not be possible for IL analyzer to see interceptor at all.  The original report only hit for one - indicating we suppressed one but not the other.  I wasn\u0027t aware of the suppressor, thank you for sharing that.\r\n\r\nBug is likely here: https://github.com/dotnet/runtime/blob/c422fca30d826b29aadf6a923369e1848a4aac97/src/libraries/Microsoft.Extensions.Configuration.Binder/gen/ConfigurationBindingGenerator.Suppressor.cs#L51-L57",
                                           "updatedAt":  "2023-11-09T18:31:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rjBNc",
                                           "createdAt":  "2023-11-09T18:28:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen passing the result of the ConfigurationBinder `.Get\u003cT\u003e()` directly into a method, I\u0027m still getting AOT/trim warnings.\r\n\r\n### Reproduction Steps\r\n\r\nBuild the following app:\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cEnableConfigurationBindingGenerator\u003etrue\u003c/EnableConfigurationBindingGenerator\u003e\r\n    \u003cEmitCompilerGeneratedFiles\u003etrue\u003c/EmitCompilerGeneratedFiles\u003e\r\n    \u003cPublishAot\u003etrue\u003c/PublishAot\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"9.0.0-alpha.1.23558.3\" /\u003e \r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"9.0.0-alpha.1.23558.3\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\n```C#\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nIConfigurationSection c = new ConfigurationBuilder().Build().GetSection(\"Options\");\r\n#if WORKS\r\nvar o = c.Get\u003cMyOptions\u003e();\r\nSome.Method(o);\r\n#else\r\nSome.Method(c.Get\u003cMyOptions\u003e());\r\n#endif\r\n\r\ninternal static class Some\r\n{\r\n    public static void Method(MyOptions? options) { }\r\n}\r\n\r\npublic class MyOptions\r\n{\r\n    public int MaxRetries { get; set; }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nI shouldn\u0027t get AOT/trim warnings because I\u0027m using the Source Generator.\r\n\r\n### Actual behavior\r\n\r\n```\r\n1\u003eC:\\Users\\eerhardt\\source\\repos\\ConsoleApp101\\ConsoleApp101\\Program.cs(4,13,4,31): warning IL3050: Using member \u0027Microsoft.Extensions.Configuration.ConfigurationBinder.Get\u003cT\u003e(IConfiguration)\u0027 which has \u0027RequiresDynamicCodeAttribute\u0027 can break functionality when AOT compiling. Binding strongly typed objects to configuration values requires generating dynamic code at runtime, for example instantiating generic types.\r\n1\u003eC:\\Users\\eerhardt\\source\\repos\\ConsoleApp101\\ConsoleApp101\\Program.cs(4,13,4,31): warning IL2026: Using member \u0027Microsoft.Extensions.Configuration.ConfigurationBinder.Get\u003cT\u003e(IConfiguration)\u0027 which has \u0027RequiresUnreferencedCodeAttribute\u0027 can break functionality when trimming application code. In case the type is non-primitive, the trimmer cannot statically analyze the object\u0027s type so its members may be trimmed.\r\n```\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nCapture the object into a variable on a separate line, and pass that into the method:\r\n\r\n```C#\r\nvar o = c.Get\u003cMyOptions\u003e();\r\nSome.Method(o);\r\n```\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-09T18:28:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xS68v",
                                           "createdAt":  "2024-01-19T17:11:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Will be good to validate https://github.com/dotnet/runtime/issues/97204 when fixing this issue. ",
                                           "updatedAt":  "2024-01-19T17:11:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-c4KD",
                                           "createdAt":  "2024-05-21T00:53:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "binarydad",
                                           "body":  "Is there a different, AOT-friendly means of deserializing settings data in this case?",
                                           "updatedAt":  "2024-05-21T00:53:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-c8CP",
                                           "createdAt":  "2024-05-21T01:07:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@binarydad in the top, @eerhardt mentioned how to work around this issue. ",
                                           "updatedAt":  "2024-05-21T01:07:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IV-7Q",
                                           "createdAt":  "2024-08-14T00:09:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "This issue and https://github.com/dotnet/runtime/issues/96643 are essentially the same.  We need to make sure our suppressor logic matches what we intercept.",
                                           "updatedAt":  "2024-08-14T00:09:42Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "ConfigurationBinder emits AOT warnings even when using Source Generator when passing result into a method",
        "labels":  [
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94697",
        "createdAt":  "2023-11-14T10:30:04Z",
        "number":  94697,
        "author":  "amoerie",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6Iw_g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KennethHoff",
                                            "createdAt":  "2024-06-12T17:56:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-06-12T18:58:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tr00st",
                                            "createdAt":  "2024-08-13T10:24:37Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-06-12T17:56:35Z",
        "body":  "### Background and motivation\r\n\r\nThis might be a little ambitious, but I think it would add tremendous value if .NET applications would have the ability to automatically generate a JSON schema based on the bound configuration sections (via `ConfigureOptions`).\r\nIt feels almost weird to have all these tools in our toolbelt to enforce strong typing in C#, but when it comes to configuration all bets are off, and we are back in stringly typed JSON files with no assistance or guidance whatsoever.\r\n\r\nI know that an effort was made to provide a very basic JSON schema in SchemaStore [here](https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/appsettings.json), but that only contains a few of the possible sections, does not update automatically and does not include any user defined configuration sections.\r\n\r\nThe most realistic approach developers can take today is take the template from SchemaStore and extend it manually with their custom configuration sections. I still consider that approach flawed, because it is prone to human error and does not update automatically with what exists at runtime. Furthermore, it is duplicate effort to 1) write XML documentation on the C# types and 2) do the same in appsettings.schema.json\r\n\r\nI am currently in the process of trying to automatically generate a JSON schema, but the main hurdle I\u0027m still facing is determining which configuration sections are linked to which options types. As far as I can find, this information is never collected in a single way, so I\u0027m having to jump through A LOT of hoops to do so. Some sections (Kestrel for example) are downright impossible to discover automatically.\r\n\r\nMy proposal is to somehow expose which Options types are linked to which configuration sections, which would then allow to generate a JSON schema using some of the open source libraries that can do so.\r\n\r\nPossible open source libraries:\r\n\r\n- https://github.com/RicoSuter/NJsonSchema (does not support draft 7 and up though)\r\n- https://github.com/gregsdennis/json-everything (does not support XML docs)\r\n\r\n### API Proposal\r\n\r\nI\u0027m not sure if this API approach makes the most sense, but this would be very convenient at least:\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.Configuration\r\n{\r\n    public interface IConfigurationSection : IConfiguration\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// Gets the types that are bound to this configuration section\r\n        /// \u003c/summary\u003e\r\n        IEnumerable\u003cType\u003e BoundTypes { get; }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.AddOptions\u003cRabbitMqOptions\u003e().BindConfiguration(\"RabbitMq\");\r\nvar application = builder.Build();\r\nforeach(var type in application.Configuration.GetSection(\"RabbitMq\").BoundTypes)\r\n{\r\n  Console.WriteLine(type); // Should print RabbitMqOptions\r\n}\r\n\r\npublic record RabbitMqOptions {}\r\n\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nI\u0027m not sure. Any API that allows me to retrieve which C# types are bound against which configuration sections would be a tremendous help.\r\n\r\nEdit: this is what I have today: https://github.com/amoerie/configo/blob/main/src/Configo.Client/JsonSchemaGenerator/BoundConfigurationSectionsDiscoverer.cs\r\n\r\nIt requires capturing the ServiceCollection to use at runtime, and then invoking all `IConfigureOptions` via reflection while recording which configuration sections are called from within.\r\nAfter all of this hassle, this still only works for the case where you use `BindConfiguration(\"...\")`. If you capture the section beforehand during application startup (which is what 90% of the existing code seems to do), this discovery still fails.\r\n\r\nI believe that a comprehensive solution will require modifications to ConfigurationRoot and ConfigurationSection themselves, so that they can keep track of which objects they\u0027re bound against.\r\n\r\n### Risks\r\n\r\nAs far as I can see, Microsoft.Extensions.Options is not built to support the registration of bound types, so it might be a considerable refactor to make this possible. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgPYYGg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5r4YDp",
                                           "createdAt":  "2023-11-14T10:30:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nThis might be a little ambitious, but I think it would add tremendous value if .NET applications would have the ability to automatically generate a JSON schema based on the bound configuration sections (via `ConfigureOptions`).\r\nIt feels almost weird to have all these tools in our toolbelt to enforce strong typing in C#, but when it comes to configuration all bets are off, and we are back in stringly typed JSON files with no assistance or guidance whatsoever.\r\n\r\nI know that an effort was made to provide a very basic JSON schema in SchemaStore [here](https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/appsettings.json), but that only contains a few of the possible sections, does not update automatically and does not include any user defined configuration sections.\r\n\r\nI am currently in the process of trying to automatically generate a JSON schema, but the main hurdle I\u0027m still facing is determining which configuration sections are linked to which options types. As far as I can find, this information is never collected in a single way, so I\u0027m having to jump through A LOT of hoops to do so. Some sections (Kestrel for example) are downright impossible to discover automatically.\r\n\r\nMy proposal is to somehow expose which Options types are linked to which configuration sections, which would then allow to generate a JSON schema using some of the open source libraries that can do so.\r\n\r\nPossible open source libraries:\r\n\r\n- https://github.com/RicoSuter/NJsonSchema (does not support draft 7 and up though)\r\n- https://github.com/gregsdennis/json-everything (does not support XML docs)\n\n### API Proposal\n\nI\u0027m not sure if this API approach makes the most sense, but this would be very convenient at least:\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.Configuration\r\n{\r\n    public interface IConfigurationSection : IConfiguration\r\n    {\r\n        /// \u003csummary\u003e\r\n        /// Gets the types that are bound to this configuration section\r\n        /// \u003c/summary\u003e\r\n        IEnumerable\u003cType\u003e BoundTypes { get; }\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.AddOptions\u003cRabbitMqOptions\u003e().BindConfiguration(\"RabbitMq\");\r\nvar application = builder.Build();\r\nforeach(var type in application.Configuration.GetSection(\"RabbitMq\").BoundTypes)\r\n{\r\n  Console.WriteLine(type); // Should print RabbitMqOptions\r\n}\r\n\r\npublic record RabbitMqOptions {}\r\n\r\n```\r\n\n\n### Alternative Designs\n\nI\u0027m not sure. Any API that allows me to retrieve which C# types are bound against which configuration sections would be a tremendous help.\n\n### Risks\n\nAs far as I can see, Microsoft.Extensions.Options is not built to support the registration of bound types, so it might be a considerable refactor to make this possible. \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eamoerie\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-14T10:30:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A9hga",
                                           "createdAt":  "2024-06-12T17:56:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KennethHoff",
                                           "body":  "With .Net 9 and Json Schema support, being able to define one in appsettings is a natural next step.",
                                           "updatedAt":  "2024-06-12T17:56:34Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: Expose bound configuration sections (so it is possible to generate a JSON schema for appsettings.json)",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95006",
        "createdAt":  "2023-11-20T13:22:37Z",
        "number":  95006,
        "author":  "xmarshal",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODMSOtg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexbereznikov",
                                            "createdAt":  "2023-11-20T16:21:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fubar-coder",
                                            "createdAt":  "2023-12-28T06:35:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ValeriyGourov",
                                            "createdAt":  "2024-01-11T01:46:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexaka1",
                                            "createdAt":  "2024-03-25T07:45:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "N0D4N",
                                            "createdAt":  "2024-04-13T16:05:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hadrienbecle",
                                            "createdAt":  "2024-05-22T09:11:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MaxMahem",
                                            "createdAt":  "2024-06-03T16:14:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mungojam",
                                            "createdAt":  "2024-08-08T17:19:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fourpastmidnight",
                                            "createdAt":  "2024-09-27T03:32:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jasper-d",
                                            "createdAt":  "2024-11-26T17:01:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aromaa",
                                            "createdAt":  "2024-12-23T19:26:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dreamescaper",
                                            "createdAt":  "2025-03-12T12:10:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gitmln",
                                            "createdAt":  "2025-03-14T10:28:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alphaleonis",
                                            "createdAt":  "2025-03-22T14:05:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Noahnc",
                                            "createdAt":  "2025-04-06T12:42:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "suugbut",
                                            "createdAt":  "2025-04-10T14:55:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matt-richardson",
                                            "createdAt":  "2025-05-05T00:09:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LouisMT",
                                            "createdAt":  "2025-05-31T19:21:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wokket",
                                            "createdAt":  "2025-06-28T10:16:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "paule96",
                                            "createdAt":  "2025-08-22T13:20:44Z"
                                        }
                                    ],
                          "totalCount":  20
                      },
        "updatedAt":  "2025-08-21T13:51:53Z",
        "body":  "### Description\r\n\r\nConfigurationBinder source generator generates code that doesn\u0027t compile when using recodrs with requried properties as option Property \r\n\r\n### Reproduction Steps\r\n\r\nbuild this code\r\n\r\n```cs\r\nnamespace BindGeneratorRepro;\r\n\r\nusing System.Reflection;\r\n\r\ninternal class Program\r\n{\r\n    private static void Main(string[] args)\r\n    {\r\n        var builder = WebApplication.CreateSlimBuilder(args);\r\n\r\n        builder.Services.AddOptions();\r\n\r\n        builder.Services.AddOptions\u003cMyOptionA\u003e()\r\n            .BindConfiguration(\"myPath\", options =\u003e options.BindNonPublicProperties = true);\r\n\r\n        var app = builder.Build();\r\n\r\n        app.MapGet(\"/version\", () =\u003e\r\n        {\r\n            var fileVersionAttribute = Assembly.GetExecutingAssembly().GetCustomAttribute\u003cAssemblyFileVersionAttribute\u003e();\r\n\r\n            return Results.Text(fileVersionAttribute!.Version);\r\n        });\r\n\r\n        app.Run();\r\n    }\r\n}\r\n\r\ninternal sealed record MyOptionA\r\n{\r\n    public required string MyParamA { get; init; }\r\n    public required MyOptionB MyParamAB { get; init; }\r\n}\r\n\r\ninternal sealed record MyOptionB\r\n{\r\n    public required string MyParamB { get; init; }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nCode should compiles\r\n\r\n### Actual behavior\r\n\r\nbuild files with error CS9035\r\nBinGeneratorRepro\\Microsoft.Extensions.Configuration.Binder.SourceGeneration\\Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator\\BindingExtensions.g.cs(106,31,106,40): error CS9035: Required member \u0027MyOptionB.MyParamB\u0027 must be set in the object initializer or attribute constructor.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk.Web\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cAccelerateBuildsInVisualStudio\u003etrue\u003c/AccelerateBuildsInVisualStudio\u003e\r\n    \u003cEnableRequestDelegateGenerator\u003etrue\u003c/EnableRequestDelegateGenerator\u003e\r\n    \u003cEnableConfigurationBindingGenerator\u003etrue\u003c/EnableConfigurationBindingGenerator\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv191gA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5sbJnk",
                                           "createdAt":  "2023-11-20T13:22:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nConfigurationBinder source generator generates code that doesn\u0027t compile when using recodrs with requried properties as option Property \n\n### Reproduction Steps\n\nbuild this code\r\n`namespace BindGeneratorRepro;\r\n\r\nusing System.Reflection;\r\n\r\ninternal class Program\r\n{\r\n    private static void Main(string[] args)\r\n    {\r\n        var builder = WebApplication.CreateSlimBuilder(args);\r\n\r\n        builder.Services.AddOptions();\r\n\r\n        builder.Services.AddOptions\u003cMyOptionA\u003e()\r\n            .BindConfiguration(\"myPath\", options =\u003e options.BindNonPublicProperties = true);\r\n\r\n        var app = builder.Build();\r\n\r\n        app.MapGet(\"/version\", () =\u003e\r\n        {\r\n            var fileVersionAttribute = Assembly.GetExecutingAssembly().GetCustomAttribute\u003cAssemblyFileVersionAttribute\u003e();\r\n\r\n            return Results.Text(fileVersionAttribute!.Version);\r\n        });\r\n\r\n        app.Run();\r\n    }\r\n}\r\n\r\ninternal sealed record MyOptionA\r\n{\r\n    public required string MyParamA { get; init; }\r\n    public required MyOptionB MyParamAB { get; init; }\r\n}\r\n\r\ninternal sealed record MyOptionB\r\n{\r\n    public required string MyParamB { get; init; }\r\n}`\n\n### Expected behavior\n\nCode should compiles\n\n### Actual behavior\n\nbuild files with error CS9035\r\nBinGeneratorRepro\\Microsoft.Extensions.Configuration.Binder.SourceGeneration\\Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator\\BindingExtensions.g.cs(106,31,106,40): error CS9035: Required member \u0027MyOptionB.MyParamB\u0027 must be set in the object initializer or attribute constructor.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003exmarshal\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-20T13:22:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sbN21",
                                           "createdAt":  "2023-11-20T13:33:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xmarshal",
                                           "body":  "![image](https://github.com/dotnet/runtime/assets/20635560/acae236e-7ae8-4f3e-b2ba-f8e3e1f54f15)\r\n",
                                           "updatedAt":  "2023-11-20T13:33:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57PpaP",
                                           "createdAt":  "2024-04-20T15:00:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ThaDaVos",
                                           "body":  "Any update on this?",
                                           "updatedAt":  "2024-04-20T15:00:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HrL8M",
                                           "createdAt":  "2024-08-08T16:42:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEWQXAA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "seesharprun",
                                                                               "createdAt":  "2025-03-10T18:45:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "kzu",
                                                                               "createdAt":  "2025-06-11T20:26:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Right now the source generator doesn\u0027t use object initializers at all, nor will it bind to `init` properties.  This would require some significant refactoring of the generated code to support this scenario.  We can consider this in a future release.",
                                           "updatedAt":  "2024-08-08T16:42:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ymfjx",
                                           "createdAt":  "2024-12-23T19:54:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENt1ng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "seesharprun",
                                                                               "createdAt":  "2025-03-10T18:45:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "suugbut",
                                                                               "createdAt":  "2025-04-10T14:55:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "KnapSac",
                                           "body":  "Are there plans to do some work in this area for .NET 10? Anything I can do to help?",
                                           "updatedAt":  "2024-12-23T19:54:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6zEiRL",
                                           "createdAt":  "2025-06-25T10:44:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmannibucau",
                                           "body":  "up?",
                                           "updatedAt":  "2025-06-25T10:44:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-j-bG",
                                           "createdAt":  "2025-08-18T14:09:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "paule96",
                                           "body":  "@ericstj thank you for the explanation.\n\nSomeone should add a warning or note to this [documentation](https://learn.microsoft.com/en-us/dotnet/core/extensions/options-validation-generator).\nBecause it utilizes the required keyword in conjunction with source generation.\nThat\u0027s how I ran into the same issue.",
                                           "updatedAt":  "2025-08-18T14:09:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_X3WA",
                                           "createdAt":  "2025-08-21T13:51:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "snakex64",
                                           "body":  "This is still encouraging unclean programming practices and forcing devs to not use newer more explicit syntaxes. For people in companies where you have to fight to move the mentality towards using nullables, init-only setters and required members this is a slap in the face that it\u0027s still an issue years later, and it just becomes an argument by other devs to never use them",
                                           "updatedAt":  "2025-08-21T13:51:53Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "ConfigurationBinder source generator build fails with CS9035 if option class have Property with requried",
        "labels":  [
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96643",
        "createdAt":  "2024-01-08T22:03:20Z",
        "number":  96643,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:46:59Z",
        "body":  "There are certain cases where the ConfigurationBinder Source Generator won\u0027t intercept a call to `Bind`, for example if the Type is an unsupported type. When this is the case, the Source Generator is still suppressing the IL2026 and IL3050 diagnostics even though it didn\u0027t intercept the call. This can lead to the developer not getting notified that their code isn\u0027t trim/AOT compatible.\r\n\r\n### Repro steps\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cIsAotCompatible\u003etrue\u003c/IsAotCompatible\u003e\r\n    \u003cEnableConfigurationBindingGenerator\u003etrue\u003c/EnableConfigurationBindingGenerator\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"8.0.0\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \r\n\u003c/Project\u003e\r\n```\r\n\r\n```C#\r\nusing Microsoft.Extensions.Configuration;\r\nusing System.Collections;\r\n\r\nnamespace ClassLibrary7;\r\n\r\npublic class Class1\r\n{\r\n    public static void Bind(IConfiguration config)\r\n    {\r\n        var supported = new SupportedType();\r\n        config.Bind(supported);\r\n\r\n        var unsupported = new UnsupportedType();\r\n        config.Bind(unsupported);\r\n    }\r\n}\r\n\r\npublic class SupportedType\r\n{\r\n    public string? Name { get; set; }\r\n}\r\n\r\npublic class UnsupportedType : IEnumerable\u003cKeyValuePair\u003cstring, string\u003e\u003e\r\n{\r\n    public IEnumerator\u003cKeyValuePair\u003cstring, string\u003e\u003e GetEnumerator()\r\n    {\r\n        yield break;\r\n    }\r\n\r\n    IEnumerator IEnumerable.GetEnumerator()\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n```\r\n\r\n### Expected results\r\n\r\nShould still get AOT warnings for the call to `Bind(unsupported)`, since this call wasn\u0027t intercepted by the Source Generator. At runtime it will follow the reflection based implementation and not use a source generated version.\r\n\r\n### Actual results\r\n\r\nNo warnings are emitted for IL2026 and IL3050.\r\n\r\nYou do get `SYSLIB1100` diagnostic to tell you that `UnsupportedType` is unsupported. But this warning is often disabled/NoWarn\u0027d because a lot of times there is just a single property not supported on a Type, and you just want the property to be ignored. Getting this diagnostic isn\u0027t enough to turn off the AOT compatibility warning that should be emitted here.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcOYcPw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5wK2fn",
                                           "createdAt":  "2024-01-08T22:03:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThere are certain cases where the ConfigurationBinder Source Generator won\u0027t intercept a call to `Bind`, for example if the Type is an unsupported type. When this is the case, the Source Generator is still suppressing the IL2026 and IL3050 diagnostics even though it didn\u0027t intercept the call. This can lead to the developer not getting notified that their code isn\u0027t trim/AOT compatible.\r\n\r\n### Repro steps\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cIsAotCompatible\u003etrue\u003c/IsAotCompatible\u003e\r\n    \u003cEnableConfigurationBindingGenerator\u003etrue\u003c/EnableConfigurationBindingGenerator\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"8.0.0\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \r\n\u003c/Project\u003e\r\n```\r\n\r\n```C#\r\nusing Microsoft.Extensions.Configuration;\r\nusing System.Collections;\r\n\r\nnamespace ClassLibrary7;\r\n\r\npublic class Class1\r\n{\r\n    public static void Bind(IConfiguration config)\r\n    {\r\n        var supported = new SupportedType();\r\n        config.Bind(supported);\r\n\r\n        var unsupported = new UnsupportedType();\r\n        config.Bind(unsupported);\r\n    }\r\n}\r\n\r\npublic class SupportedType\r\n{\r\n    public string? Name { get; set; }\r\n}\r\n\r\npublic class UnsupportedType : IEnumerable\u003cKeyValuePair\u003cstring, string\u003e\u003e\r\n{\r\n    public IEnumerator\u003cKeyValuePair\u003cstring, string\u003e\u003e GetEnumerator()\r\n    {\r\n        yield break;\r\n    }\r\n\r\n    IEnumerator IEnumerable.GetEnumerator()\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n```\r\n\r\n### Expected results\r\n\r\nShould still get AOT warnings for the call to `Bind(unsupported)`, since this call wasn\u0027t intercepted by the Source Generator. At runtime it will follow the reflection based implementation and not use a source generated version.\r\n\r\n### Actual results\r\n\r\nNo warnings are emitted for IL2026 and IL3050.\r\n\r\nYou do get `SYSLIB1100` diagnostic to tell you that `UnsupportedType` is unsupported. But this warning is often disabled/NoWarn\u0027d because a lot of times there is just a single property not supported on a Type, and you just want the property to be ignored. Getting this diagnostic isn\u0027t enough to turn off the AOT compatibility warning that should be emitted here.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-08T22:03:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5w5hw_",
                                           "createdAt":  "2024-01-16T16:49:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Bug is in the suppressor.  It shouldn\u0027t be suppressing diagnostics if it didn\u0027t intercept the code.  \r\nhttps://github.com/dotnet/runtime/blob/6dab58f0213ec67157bdbd09630957e7cc3b1027/src/libraries/Microsoft.Extensions.Configuration.Binder/gen/ConfigurationBindingGenerator.Suppressor.cs#L61C38-L61C38",
                                           "updatedAt":  "2024-01-16T16:49:45Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "ConfigurationBinder Source Generator is suppressing IL2026 and IL3050 diagnostics even when it doesn\u0027t actually intercept the call",
        "labels":  [
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96681",
        "createdAt":  "2024-01-09T14:11:12Z",
        "number":  96681,
        "author":  "mikhail-khalizev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC66WSg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kevinoid",
                                            "createdAt":  "2024-09-10T17:22:28Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-01-09T16:53:58Z",
        "body":  "### Description\n\nTrying to combine multiple existing `IConfiguration` into one does not completely override the values.\r\nNamely, `null` and the empty string values are ignored.\n\n### Reproduction Steps\n\n```\r\nusing FluentAssertions;\r\nusing FluentAssertions.Execution;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\npublic class ConfigurationTests\r\n{\r\n    [Fact]\r\n    public void CheckOverrideConfiguration()\r\n    {\r\n        // Init.\r\n        \r\n        var mainConfiguration = new ConfigurationBuilder().AddInMemoryCollection(new[]\r\n        {\r\n            new KeyValuePair\u003cstring, string?\u003e(\"k1\", \"v1\"),\r\n            new KeyValuePair\u003cstring, string?\u003e(\"k2\", \"v2\"),\r\n            new KeyValuePair\u003cstring, string?\u003e(\"k3\", \"v3\"),\r\n        }).Build();\r\n        \r\n        var overrideConfiguration = new ConfigurationBuilder().AddInMemoryCollection(new[]\r\n        {\r\n            new KeyValuePair\u003cstring, string?\u003e(\"k1\", null),\r\n            new KeyValuePair\u003cstring, string?\u003e(\"k2\", \"\"),\r\n            new KeyValuePair\u003cstring, string?\u003e(\"k3\", \"ov3\"),\r\n        }).Build();\r\n\r\n        // Act.\r\n        \r\n        var configurationBuilder = new ConfigurationBuilder();\r\n\r\n        configurationBuilder.AddConfiguration(mainConfiguration);\r\n        configurationBuilder.AddConfiguration(overrideConfiguration);\r\n\r\n        var configurationRoot = configurationBuilder.Build();\r\n\r\n        // Check.\r\n\r\n        using (new AssertionScope())\r\n        {\r\n            configurationRoot[\"k1\"].Should().Be(null);  // failed\r\n            configurationRoot[\"k2\"].Should().Be(\"\");    // failed\r\n            configurationRoot[\"k3\"].Should().Be(\"ov3\"); // passed\r\n        }\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\nTest passed.\n\n### Actual behavior\n\nTest failed with:\r\n\r\nExpected configurationRoot[\"k1\"] to be \u003cnull\u003e, but found \"v1\".\r\nExpected configurationRoot[\"k2\"] to be \"\" with a length of 0, but \"v2\" has a length of 2, differs near \"v2\" (index 0).\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.Net 8.0\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcD4goQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5wPiCh",
                                           "createdAt":  "2024-01-09T14:11:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nTrying to combine multiple existing `IConfiguration` into one does not completely override the values.\r\nNamely, `null` and the empty string values are ignored.\n\n### Reproduction Steps\n\n```\r\nusing FluentAssertions;\r\nusing FluentAssertions.Execution;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\npublic class ConfigurationTests\r\n{\r\n    [Fact]\r\n    public void CheckOverrideConfiguration()\r\n    {\r\n        // Init.\r\n        \r\n        var mainConfiguration = new ConfigurationBuilder().AddInMemoryCollection(new[]\r\n        {\r\n            new KeyValuePair\u003cstring, string?\u003e(\"k1\", \"v1\"),\r\n            new KeyValuePair\u003cstring, string?\u003e(\"k2\", \"v2\"),\r\n            new KeyValuePair\u003cstring, string?\u003e(\"k3\", \"v3\"),\r\n        }).Build();\r\n        \r\n        var overrideConfiguration = new ConfigurationBuilder().AddInMemoryCollection(new[]\r\n        {\r\n            new KeyValuePair\u003cstring, string?\u003e(\"k1\", null),\r\n            new KeyValuePair\u003cstring, string?\u003e(\"k2\", \"\"),\r\n            new KeyValuePair\u003cstring, string?\u003e(\"k3\", \"ov3\"),\r\n        }).Build();\r\n\r\n        // Act.\r\n        \r\n        var configurationBuilder = new ConfigurationBuilder();\r\n\r\n        configurationBuilder.AddConfiguration(mainConfiguration);\r\n        configurationBuilder.AddConfiguration(overrideConfiguration);\r\n\r\n        var configurationRoot = configurationBuilder.Build();\r\n\r\n        // Check.\r\n\r\n        using (new AssertionScope())\r\n        {\r\n            configurationRoot[\"k1\"].Should().Be(null);  // failed\r\n            configurationRoot[\"k2\"].Should().Be(\"\");    // failed\r\n            configurationRoot[\"k3\"].Should().Be(\"ov3\"); // passed\r\n        }\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\nTest passed.\n\n### Actual behavior\n\nTest failed with:\r\n\r\nExpected configurationRoot[\"k1\"] to be \u003cnull\u003e, but found \"v1\".\r\nExpected configurationRoot[\"k2\"] to be \"\" with a length of 0, but \"v2\" has a length of 2, differs near \"v2\" (index 0).\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.Net 8.0\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emikhail-khalizev\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-09T14:11:19Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Combine multiple `IConfiguration` into one does not completely override the values",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98231",
        "createdAt":  "2024-02-09T15:19:58Z",
        "number":  98231,
        "author":  "avendel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-24T23:41:38Z",
        "body":  "### Description\n\nAccording to a [breaking change](https://learn.microsoft.com/en-us/dotnet/core/compatibility/extensions/8.0/configurationbinder-exceptions) in .NET 8, configuration binding should throw an ``InvalidOperationException`` if the value in the configuration can\u0027t be converted to the type of value in the model.\r\n\r\nTo avoid this behavior, the documentation [mentions](https://learn.microsoft.com/en-us/dotnet/core/compatibility/extensions/8.0/configurationbinder-exceptions#recommended-action) that you can avoid this by setting ``BinderOptions.ErrorOnUnknownConfiguration`` to ``false``.\r\n\r\nThis does not work, though, and an exception is thrown when the configuration value can\u0027t be converted to the type in the model.\n\n### Reproduction Steps\n\n```\r\ndotnet new console\r\ndotnet add package Microsoft.Extensions.Configuration\r\ndotnet add package Microsoft.Extensions.Configuration.Binder\r\n```\r\n\r\n```csharp\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nvar builder = new ConfigurationBuilder();\r\nbuilder.AddInMemoryCollection([\r\n    // Empty string, can\u0027t be converted to integer.\r\n    KeyValuePair.Create\u003cstring, string?\u003e(\"IntegerValue\", \"\")\r\n]);\r\nvar configuration = builder.Build();\r\n// This throws an InvalidOperationException.\r\nvar options = configuration.Get\u003cTestOptions\u003e(o =\u003e o.ErrorOnUnknownConfiguration = false);\r\n\r\n// Expect default value of 11\r\nConsole.WriteLine(options?.IntegerValue);\r\n\r\npublic class TestOptions {\r\n    public int IntegerValue { get; set; } = 11;\r\n}\r\n\r\n```\n\n### Expected behavior\n\nNo exception thrown, according to description in https://learn.microsoft.com/en-us/dotnet/core/compatibility/extensions/8.0/configurationbinder-exceptions#recommended-action.\n\n### Actual behavior\n\nException thrown when trying to bind configuration to options instance. This will also occur when using ``.Configure\u003cTOptions\u003e`` and using ``IOptions\u003cTOptions\u003e`` via the DI framework.\r\n\r\n```\r\nUnhandled exception. System.InvalidOperationException: Failed to convert configuration value at \u0027IntegerValue\u0027 to type \u0027System.Int32\u0027.\r\n ---\u003e System.ArgumentException:  is not a valid value for Int32. (Parameter \u0027value\u0027)\r\n ---\u003e System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at System.ComponentModel.BaseNumberConverter.ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, Object value)\r\n   --- End of inner exception stack trace ---\r\n   at System.ComponentModel.BaseNumberConverter.ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, Object value)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.TryConvertValue(Type type, String value, String path, Object\u0026 result, Exception\u0026 error)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.BindInstance(Type type, BindingPoint bindingPoint, IConfiguration config, BinderOptions options, Boolean isParentCollection)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.BindProperty(PropertyInfo property, Object instance, IConfiguration config, BinderOptions options)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.BindProperties(Object instance, IConfiguration configuration, BinderOptions options)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.BindInstance(Type type, BindingPoint bindingPoint, IConfiguration config, BinderOptions options, Boolean isParentCollection)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.Get(IConfiguration configuration, Type type, Action`1 configureOptions)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.Get[T](IConfiguration configuration, Action`1 configureOptions)\r\n```\n\n### Regression?\n\nI haven\u0027t tested, but I assume so, since this was the reason for the breaking change.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 8.0.0\r\nWindows 11\r\nx64\n\n### Other information\n\nRelated issue: #73915",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOglj4AA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5zZsuB",
                                           "createdAt":  "2024-02-09T15:20:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nAccording to a [breaking change](https://learn.microsoft.com/en-us/dotnet/core/compatibility/extensions/8.0/configurationbinder-exceptions) in .NET 8, configuration binding should throw an ``InvalidOperationException`` if the value in the configuration can\u0027t be converted to the type of value in the model.\r\n\r\nTo avoid this behavior, the documentation [mentions](https://learn.microsoft.com/en-us/dotnet/core/compatibility/extensions/8.0/configurationbinder-exceptions#recommended-action) that you can avoid this by setting ``BinderOptions.ErrorOnUnknownConfiguration`` to ``false``.\r\n\r\nThis does not work, though, and an exception is thrown when the configuration value can\u0027t be converted to the type in the model.\n\n### Reproduction Steps\n\n```\r\ndotnet new console\r\ndotnet add package Microsoft.Extensions.Configuration\r\ndotnet add package Microsoft.Extensions.Configuration.Binder\r\n```\r\n\r\n```csharp\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nvar builder = new ConfigurationBuilder();\r\nbuilder.AddInMemoryCollection([\r\n    // Empty string, can\u0027t be converted to integer.\r\n    KeyValuePair.Create\u003cstring, string?\u003e(\"IntegerValue\", \"\")\r\n]);\r\nvar configuration = builder.Build();\r\n// This throws an InvalidOperationException.\r\nvar options = configuration.Get\u003cTestOptions\u003e(o =\u003e o.ErrorOnUnknownConfiguration = false);\r\n\r\n// Expect default value of 11\r\nConsole.WriteLine(options?.IntegerValue);\r\n\r\npublic class TestOptions {\r\n    public int IntegerValue { get; set; } = 11;\r\n}\r\n\r\n```\n\n### Expected behavior\n\nNo exception thrown, according to description in https://learn.microsoft.com/en-us/dotnet/core/compatibility/extensions/8.0/configurationbinder-exceptions#recommended-action.\n\n### Actual behavior\n\nException thrown when trying to bind configuration to options instance. This will also occur when using ``.Configure\u003cTOptions\u003e`` and using ``IOptions\u003cTOptions\u003e`` via the DI framework.\r\n\r\n```\r\nUnhandled exception. System.InvalidOperationException: Failed to convert configuration value at \u0027IntegerValue\u0027 to type \u0027System.Int32\u0027.\r\n ---\u003e System.ArgumentException:  is not a valid value for Int32. (Parameter \u0027value\u0027)\r\n ---\u003e System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at System.ComponentModel.BaseNumberConverter.ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, Object value)\r\n   --- End of inner exception stack trace ---\r\n   at System.ComponentModel.BaseNumberConverter.ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, Object value)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.TryConvertValue(Type type, String value, String path, Object\u0026 result, Exception\u0026 error)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.BindInstance(Type type, BindingPoint bindingPoint, IConfiguration config, BinderOptions options, Boolean isParentCollection)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.BindProperty(PropertyInfo property, Object instance, IConfiguration config, BinderOptions options)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.BindProperties(Object instance, IConfiguration configuration, BinderOptions options)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.BindInstance(Type type, BindingPoint bindingPoint, IConfiguration config, BinderOptions options, Boolean isParentCollection)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.Get(IConfiguration configuration, Type type, Action`1 configureOptions)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.Get[T](IConfiguration configuration, Action`1 configureOptions)\r\n```\n\n### Regression?\n\nI haven\u0027t tested, but I assume so, since this was the reason for the breaking change.\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 8.0.0\r\nWindows 11\r\nx64\n\n### Other information\n\nRelated issue: #73915\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eavendel\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-09T15:20:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zax4E",
                                           "createdAt":  "2024-02-09T18:19:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Regression?\r\n\u003e I haven\u0027t tested, but I assume so, since this was the reason for the breaking change.\r\n\r\nTo clarify, this is not a regression. The current behavior is same as pervious .NET versions behavior. \r\n\r\nIt looks we missed the case that is using type converters. we need to handle the cases when calling `TryConvertValue` to check `ErrorOnUnknownConfiguration`  before throwing.\r\n\r\nhttps://github.com/dotnet/runtime/blob/a79c62ddc8089cf2879ed36eac9aa333b32bde5f/src/libraries/Microsoft.Extensions.Configuration.Binder/src/ConfigurationBinder.cs#L312\r\nhttps://github.com/dotnet/runtime/blob/a79c62ddc8089cf2879ed36eac9aa333b32bde5f/src/libraries/Microsoft.Extensions.Configuration.Binder/src/ConfigurationBinder.cs#L923\r\n\r\n",
                                           "updatedAt":  "2024-02-09T18:26:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56ty7a",
                                           "createdAt":  "2024-04-16T11:04:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODmzdaA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vivinjoy",
                                                                               "createdAt":  "2024-06-21T19:29:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krmayankk",
                                                                               "createdAt":  "2024-06-23T19:02:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "galakt",
                                           "body":  "@tarekgh Hello, any update on this item? Do you have timeline for this fix?",
                                           "updatedAt":  "2024-04-16T11:04:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56vxKR",
                                           "createdAt":  "2024-04-16T15:16:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@galakt We currently have higher-priority tasks at hand. If you\u0027re interested in submitting a pull request for those, we welcome your contribution.",
                                           "updatedAt":  "2024-04-16T15:16:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CQJnu",
                                           "createdAt":  "2024-06-23T19:03:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODmzh1Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vivinjoy",
                                                                               "createdAt":  "2024-06-23T19:27:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "krmayankk",
                                           "body":  "We are also running into this issue and can potentially help fix it with some guidance, if no one else is working on this ",
                                           "updatedAt":  "2024-06-23T19:03:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CSG31",
                                           "createdAt":  "2024-06-24T07:17:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vivinjoy",
                                           "body":  "Can we also get this [breaking change for .Net 8](https://learn.microsoft.com/en-us/dotnet/core/compatibility/extensions/8.0/configurationbinder-exceptions) documentation changed? It\u0027s currently the same behavior as in .Net 6, where type mismatch errors during configuration binding always throws an error by default. ",
                                           "updatedAt":  "2024-06-24T23:41:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CWPgA",
                                           "createdAt":  "2024-06-24T15:39:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@krmayankk feel free to submit a PR if you are interested.  My comment https://github.com/dotnet/runtime/issues/98231#issuecomment-1936399876 explain what need to be done I guess. ",
                                           "updatedAt":  "2024-06-24T15:39:10Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Configuration binding ignores ErrorOnUnknownConfiguration and throws",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99565",
        "createdAt":  "2024-03-11T23:19:35Z",
        "number":  99565,
        "author":  "vdailly",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2ij2w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jem-experience",
                                            "createdAt":  "2024-03-12T08:25:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KennethHoff",
                                            "createdAt":  "2024-03-14T21:14:46Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-05-12T12:56:18Z",
        "body":  "### Background and motivation\n\nIt is not uncommon for some clients I\u0027m working with to have applications deployed on several environments for which I need to debug an application on different environments. Data is often different on each environment which is great to catch issues before going to production.\r\nSecrets (like API Keys, connections strings ...) cannot be stored in regular \"appsettings.json\". It is adviced to store them with the \"secrets.json\" file for development-only purposes.\r\nNevertheless with several non-production environments switching easily from an environment (or secrets of an environment) to another is not straightforward.\r\n\r\nI think it would be great if we could, like with standard `appsettings.json` and `appsettings.Debug.json` use environment secrets files like:\r\n- `secrets.json`\r\n- `secrets.{env}.json`\r\n\r\nIt\u0027s done the same way with `appsettings.json` in method `ApplyDefaultAppConfiguration(HostBuilderContext hostingContext, IConfigurationBuilder appConfigBuilder, string[]? args)` of file `\\src\\libraries\\Microsoft.Extensions.Hosting\\src\\HostingHostBuilderExtensions.cs`.\r\n\r\nDue to an issue regarding a circular dependency build issue when adding these new extensions methods I don\u0027t have a PR to submit (See Risks).\r\nBut preview of the code (and the changes to bring to `Microsoft.Extensions.Configuration.UserSecrets`) are available as a standalone Nuget package [Chrysalit.Extensions.UserSecrets](https://www.nuget.org/packages/Chrysalit.Extensions.UserSecrets/) and the source code available on [Github](https://github.com/CHRYSALIT/Extensions.UserSecrets).\r\n\r\nWhile Visual Studio does fully integrate the `secrets.json` file (`Manage User Secrets` on the project menu in `Solution Explorer`) opening the default `secrets.json` file, adding environment secrets may break this integration, or may require some updates accordingly.\r\n\r\nAn MSBuild solution is proposed as well in the documentation of the Nuget Package [Chrysalit.Extensions.UserSecrets](https://www.nuget.org/packages/Chrysalit.Extensions.UserSecrets/) to easily access the various `secrets` for the project directly from the `Solution Explorer`.\r\n\r\n\n\n### API Proposal\n\nAdding the following extensions methods may help to either:\r\n- use the `environment` defined on the `Host`\r\n- use a custom `environment` factory to let end-user choose the appropriate `environment` name\r\n\r\n```csharp\r\nnamespace Microsoft.Extensions.Configuration.UserSecrets {\r\n\r\npublic static IConfigurationBuilder AddUserSecrets\u003cT\u003e(this IConfigurationBuilder configuration, HostBuilderContext hostBuilderContext) {}\r\n\r\npublic static IConfigurationBuilder AddUserSecrets\u003cT\u003e(this IConfigurationBuilder configuration, IHostEnvironment hostEnvironment) {}\r\n\r\npublic static IConfigurationBuilder AddUserSecrets\u003cT\u003e(this IConfigurationBuilder configuration, Func\u003cstring\u003e environmentDelegate) {}\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n// With the default builder and the .UseEnvironment extension method.\r\nvar host = Host.CreateDefaultBuilder(args)\r\n    .UseEnvironment(\"dev\")\r\n    .ConfigureAppConfiguration((context, config) =\u003e\r\n    {\r\n        config.AddUserSecrets\u003cProgram\u003e(context);\r\n    })\r\n    .Build();\r\n\r\n// with an environment variable DOTNET_ENVIRONMENT = \"dev\"\r\nvar host2 = new HostBuilder()\r\n    .ConfigureHostConfiguration(config =\u003e\r\n    {\r\n        config.AddEnvironmentVariables(\"DOTNET_\");\r\n    })\r\n    .ConfigureAppConfiguration((context, config) =\u003e\r\n    {\r\n        config.AddUserSecrets\u003cProgram\u003e(context.HostingEnvironment);\r\n    })\r\n    .Build()\r\n    \r\n/* with a custom key defined in any configuration file (or elsewhere) and a factory to build the environement value.\r\nappsettings.json\r\n{\r\n   \"customkey\": \"dev\"\r\n}\r\n*/\r\nvar host3 = new HostBuilder()\r\n    .ConfigureHostConfiguration(config =\u003e\r\n    {\r\n        config.AddJsonFile(\"appsettings.json\");\r\n    })\r\n    .ConfigureAppConfiguration(config) =\u003e\r\n    {\r\n        confbuilder.AddUserSecrets\u003cProgram\u003e(() =\u003e config[\"customkey\"]);\r\n    })\r\n    .Build()\r\n```\r\n\r\nBy setting explicitely the environment to \"dev\", the API would load in order:\r\n- the default `secrets.json` file\r\n- a new `secrets.dev.json` file\r\n\r\n\n\n### Alternative Designs\n\nThe dotnet tool `user-secrets` is misleading. The tool accepts a `--configuration` parameter but doesn\u0027t use it anywhere and update only the file `secrets.json`. It would be interesting if the tool, when providing a non null configuration, could write to a `secrets.{configuration}.json` file, while still writing to `secrets.json` file when the parameter is not explicitely defined on the command-line.\r\nUsing this parameter would be fully aligned with the current API proposal.\n\n### Risks\n\nWhile these changes are easy enough to implement, there\u0027s a problem on the where should these methods being implemented:\r\n- `Microsoft.Extensions.Hosting` has a dependency on `Microsoft.Extensions.Configuration.UserSecrets`\r\n- These new methods would create a dependency for `Microsoft.Extensions.Configuration.UserSecrets` on `Microsoft.Extensions.Hosting`\r\n\r\nThis leads to a circular dependency build issue.\r\n\r\nI don\u0027t know where these methods should be implemented.\r\nBut `Microsoft.Extensions.Hosting` uses only one method `AddUserSecrets()` in file `src\\libraries\\Microsoft.Extensions.Hosting\\src\\HostingHostBuilderExtensions.cs`. But I don\u0027t see how this dependency could be reversed.\r\n\r\nPropositions regarding this dependency issue;\r\n- use the provided external standalone Nuget package\r\n- create a new project Microsoft.Extensions.Configuration.UserSecrets.Additions that would enrich the namespace ``Microsoft.Extensions.Configuration.UserSecrets` with these new extensions methods.\r\n- add these new extensions methods in `Microsoft.Extensions.Hosting`\r\n- I don\u0027t how a one way dependency of project `Microsoft.Extensions.Configuration.UserSecrets` with `Microsoft.Extensions.Hosting` package could be achieved.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqzY3ZA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc52l0hY",
                                           "createdAt":  "2024-03-11T23:19:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-11T23:19:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rNjdk",
                                           "createdAt":  "2025-05-12T12:56:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "thompson-tomo",
                                           "body":  "I think my proposal in https://github.com/dotnet/runtime/issues/107849#issuecomment-2872445441 would assist in this topic",
                                           "updatedAt":  "2025-05-12T12:56:17Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: Add environment capability to UserSecrets (secrets.json)",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101012",
        "createdAt":  "2024-04-13T19:19:58Z",
        "number":  101012,
        "author":  "ariellourenco",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODK6tPw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "samnung",
                                            "createdAt":  "2024-04-25T15:05:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mayurankv",
                                            "createdAt":  "2024-06-07T09:02:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StringEpsilon",
                                            "createdAt":  "2024-06-25T15:45:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kands-code",
                                            "createdAt":  "2024-11-30T09:58:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Frestein",
                                            "createdAt":  "2025-08-12T19:02:34Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2024-06-20T17:07:30Z",
        "body":  "### Description\n\nThis is a classic issue raised in any project. Currently .NET runtime pollutes user `$HOME` directory by placing an unnecessary folder there:\r\n\r\n```cs\r\n// For backwards compat, this checks env vars first before using Env.GetFolderPath\r\n string? appData = Environment.GetEnvironmentVariable(\"APPDATA\");\r\n string? root = appData                                                                   // On Windows it goes to %APPDATA%\\Microsoft\\UserSecrets\\\r\n    ?? Environment.GetEnvironmentVariable(\"HOME\")                 // On Mac/Linux it goes to ~/.microsoft/usersecrets/\r\n    ?? Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)\r\n    ?? Environment.GetFolderPath(Environment.SpecialFolder.UserProfile)\r\n    ?? Environment.GetEnvironmentVariable(userSecretsFallbackDir);           \r\n```\r\n\r\nThis is a common pain for a long time for many people on unix-like platforms. Interestingly, on Windows, the runtime is a good citizen and follow Microsoft recommendations for folder locations, storing user secrets under `APPDATA`. However, I cannot say the same for unix-like platforms. \n\n### Reproduction Steps\n\nTo reproduces the problem run the `init` command for the  Secret Manager tool in the project directory.\n\n### Expected behavior\n\nFiles stored by .NET runtime should follow the [XDG Base Directory specification](https://specifications.freedesktop.org/basedir-spec/latest/ar01s03.html) and place user configuration files in `$XDG_DATA_HOME/` (default ~/.local/share). \r\n\r\nOn Mac, we should use `~/Library/Application Support`\n\n### Actual behavior\n\nAs seen on Linux and Mac, .NET runtime leave config files in `~/.microsoft/usersecrets`\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\nThere are a few issues related to this one across Microsoft repos.\r\n\r\n- [https://github.com/dotnet/aspnetcore/issues/43278](https://github.com/dotnet/aspnetcore/issues/43278)\r\n- [https://github.com/dotnet/sdk/issues/8678](https://github.com/dotnet/sdk/issues/8678)\r\n- [https://github.com/microsoft/vscode-dotnettools/issues/514](https://github.com/microsoft/vscode-dotnettools/issues/514)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOemt5Ow==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc56a3hk",
                                           "createdAt":  "2024-04-14T02:33:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-14T02:33:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56a3k7",
                                           "createdAt":  "2024-04-14T02:33:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Offending code: https://github.com/dotnet/runtime/blob/2e8f818677e55ef7570b9cd3b21890fa9ac93b0f/src/libraries/Microsoft.Extensions.Configuration.UserSecrets/src/PathHelper.cs#L59-L67",
                                           "updatedAt":  "2024-04-14T02:33:44Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Use $HOME/.local/share/Microsoft/User-secrets instead of $HOME/.microsoft/usersecrets/ in unix-like environments.",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101738",
        "createdAt":  "2024-04-30T21:04:00Z",
        "number":  101738,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-16T05:58:00Z",
        "body":  "### Description\r\n\r\nThis issue is tracking updating the System.Text.Json and ConfigurationBinder source generators to take advantage of https://github.com/dotnet/roslyn/issues/73292 when it is implemented.\r\n\r\n#### Original Description\r\n\r\nWhen the System.Text.Json and ConfigurationBinder source generators generate code against types that have properties with `[Obsolete(\"message\", DiagnosticId = \"ID01\")]` attributes, the generated code is emitting warnings that I can\u0027t suppress and can\u0027t control. The only thing I can do is suppress the warning globally, which isn\u0027t ideal because I still want those warnings for my \"hand written\" code.\r\n\r\nBoth of those generators already suppress \"normal\" obsoletions with `#pragma warning disable CS0612, CS0618`. But since these obsoletion warnings get their own DiagnosticID, those suppressions don\u0027t work.\r\n\r\n(Note the case I hit was with the Configuration Binder source generator against a class that had an `X509Certificate2` property - which has 3 properties with different DiagnosticIDs - `SYSLIB0026;SYSLIB0027;SYSLIB0028`.)\r\n\r\n### Reproduction Steps\r\n\r\n`dotnet build` the following project:\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n    \u003cEnableConfigurationBindingGenerator\u003etrue\u003c/EnableConfigurationBindingGenerator\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n  \u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Hosting\" Version=\"8.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"8.0.1\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003c/Project\u003e\r\n```\r\n\r\n```C#\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Hosting;\r\nusing System.Text.Json.Serialization;\r\n\r\nvar builder = Host.CreateApplicationBuilder(args);\r\n\r\nvar c = new MyClass();\r\nbuilder.Configuration.Bind(c);\r\n\r\n[JsonSerializable(typeof(MyClass))]\r\npublic partial class JsonContext : JsonSerializerContext\r\n{\r\n}\r\n\r\npublic class MyClass\r\n{\r\n    [Obsolete(\"message\", DiagnosticId = \"EE01\")]\r\n    public string? Name { get; set; }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nI shouldn\u0027t get warnings that I can\u0027t take action against. \r\n\r\n### Actual behavior\r\n\r\nI get the following warnings:\r\n\r\n```\r\n\\ConsoleApp119\\obj\\Debug\\net8.0\\Microsoft.Extensions.Configuration.Binder.SourceGeneration\\Microsoft.Extensions.Configuration.Binder.SourceGeneration.ConfigurationBindingGenerator\\BindingExtensions.g.cs(65,17): warning EE01: \u0027MyClass.Name\u0027 is obsolete: \u0027message\u0027 [C:\\Users\\eerhardt\\source\\repos\\ConsoleApp119\\ConsoleApp119\\ConsoleApp119.csproj]\r\n\\ConsoleApp119\\obj\\Debug\\net8.0\\System.Text.Json.SourceGeneration\\System.Text.Json.SourceGeneration.JsonSourceGenerator\\JsonContext.MyClass.g.cs(53,36): warning EE01: \u0027MyClass.Name\u0027 is obsolete: \u0027message\u0027 [C:\\Users\\eerhardt\\source\\repos\\ConsoleApp119\\ConsoleApp119\\ConsoleApp119.csproj]\r\n\\ConsoleApp119\\obj\\Debug\\net8.0\\System.Text.Json.SourceGeneration\\System.Text.Json.SourceGeneration.JsonSourceGenerator\\JsonContext.MyClass.g.cs(54,45): warning EE01: \u0027MyClass.Name\u0027 is obsolete: \u0027message\u0027 [C:\\Users\\eerhardt\\source\\repos\\ConsoleApp119\\ConsoleApp119\\ConsoleApp119.csproj]\r\n\\ConsoleApp119\\obj\\Debug\\net8.0\\System.Text.Json.SourceGeneration\\System.Text.Json.SourceGeneration.JsonSourceGenerator\\JsonContext.MyClass.g.cs(80,43): warning EE01: \u0027MyClass.Name\u0027 is obsolete: \u0027message\u0027 [C:\\Users\\eerhardt\\source\\repos\\ConsoleApp119\\ConsoleApp119\\ConsoleApp119.csproj]\r\n```\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nglobally `\u003cNoWarn\u003e` these warnings.\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\ncc @ericstj @eiriktsarpalis @tarekgh ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhN4NWg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc58ad0D",
                                           "createdAt":  "2024-04-30T21:04:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-json, @gregsdennis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-30T21:04:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58asnv",
                                           "createdAt":  "2024-04-30T21:23:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-30T21:23:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58asoT",
                                           "createdAt":  "2024-04-30T21:23:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-json, @gregsdennis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-30T21:23:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58atA0",
                                           "createdAt":  "2024-04-30T21:23:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@eiriktsarpalis I marked this for .NET 9.0. Let me know if you want to change that. Thanks!",
                                           "updatedAt":  "2024-04-30T21:23:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58cBDK",
                                           "createdAt":  "2024-04-30T23:36:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "Maybe Roslyn would need to add support for `#pragma warning disable obsolete`?",
                                           "updatedAt":  "2024-04-30T23:36:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58fwzA",
                                           "createdAt":  "2024-05-01T16:15:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "One possible approach that was considered in the past is exposing a `string[] Suppressions { get; set; }` property in the `JsonSourceGenerationOptionsAttribute` that gives users explicit control over what suppressions should be made.",
                                           "updatedAt":  "2024-05-01T16:15:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58gEHW",
                                           "createdAt":  "2024-05-01T17:08:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODhRFIw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2024-05-09T11:14:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e exposing a string[] Suppressions { get; set; } property in the JsonSourceGenerationOptionsAttribute\r\n\r\nOne concern about that is we would need to do that for every source generator that gets/sets user defined properties. And also there are some source generators (like the ConfigurationBinder) that don\u0027t have an \"Options\" API where these things could be placed.\r\n\r\n\u003e Maybe Roslyn would need to add support for #pragma warning disable obsolete?\r\n\r\nThis seems like an interesting idea. A blanket \"suppress obsoletions\" statement.\r\n\r\ncc @RikkiGibson - who implemented [Customizable Obsolete diagnostics (dotnet/roslyn#42518)](https://github.com/dotnet/roslyn/pull/42518)\r\n\r\nWith other Roslyn analyzers, you can opt-in/out of running the analyzer on generated code. But since this one is built into Roslyn itself, I\u0027m not sure how to tell it stop.",
                                           "updatedAt":  "2024-05-01T17:08:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58gOGU",
                                           "createdAt":  "2024-05-01T17:39:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RikkiGibson",
                                           "body":  "A pseudo-diagnostic-id similar to `#pragma warning disable nullable` might be the right thing here. Please file an issue on roslyn.\r\n\r\nOne rather ugly workaround here might be to put the usages of the \"custom obsolete\" members in an obsolete context, which *does* have the effect of blanket suppressing obsolete diagnostics. (seems like this also shows that compiler knows how to blanket suppress the diagnostics already.) [SharpLab](https://sharplab.io/#v2:EYLgtghglgdgNAFxFANnAJiA1AHwAIBMAjALABQ5eAzAASE0CqAzgKYBO5A3uTbzQNoB5YEwD2KFghYAKACJQIAcxiimCKAGMAkuhoBeGgCIAgoYCUAXR59qdIgAYA/DQAKbUQAcanGoskBuGlYEQIBfcnCKMiERcUkWKzJbegBxFhhva15kgBYaAFlpZnYaAFdWNjNMsj5asoqAOjdPfSMAIUN/LJpI0KA=)\r\n\r\n```cs\r\nusing System;\r\n\r\npublic class User\r\n{\r\n    [Obsolete(DiagnosticId = \"A\")]\r\n    public string? Prop { get; set; }\r\n}\r\n\r\n[Obsolete]\r\npublic class Gen {\r\n    public void M(User user) {\r\n        user.Prop = \"B\";\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2024-05-01T17:39:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58g-EI",
                                           "createdAt":  "2024-05-01T19:55:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQdq4A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2024-05-01T20:26:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eerhardt",
                                                                               "createdAt":  "2024-05-01T20:45:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmprieur",
                                                                               "createdAt":  "2025-05-01T16:13:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "RikkiGibson",
                                           "body":  "BTW, it\u0027s also possible to disable all warnings using `#pragma warning disable`. But, this might be considered undesirable if it hides bugs with the generated code itself.",
                                           "updatedAt":  "2024-05-01T19:55:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58xqzp",
                                           "createdAt":  "2024-05-03T16:54:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-03T16:54:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58xqz6",
                                           "createdAt":  "2024-05-03T16:54:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-json, @gregsdennis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-03T16:54:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58xq1V",
                                           "createdAt":  "2024-05-03T16:54:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgiwYw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2024-05-03T17:01:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "This issue applies to both the Configuration Binder and the System Text Json source generators.",
                                           "updatedAt":  "2024-05-03T16:54:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58xuXz",
                                           "createdAt":  "2024-05-03T17:02:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Should we log issue for Roslyn regarding that? ",
                                           "updatedAt":  "2024-05-03T17:02:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58xv9P",
                                           "createdAt":  "2024-05-03T17:04:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgiy3Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2024-05-03T17:06:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "[Each issue/PR should only have one label.](https://github.com/dotnet/runtime/blob/main/docs/issues-pr-management.md#common-policies) It might belong to `area-Meta`, I\u0027m letting you (plural) to decide.\r\n\r\n\u003e Should we log issue for Roslyn regarding that?\r\n\r\nI have opened dotnet/roslyn#73292.",
                                           "updatedAt":  "2024-05-03T17:04:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58xzAo",
                                           "createdAt":  "2024-05-03T17:08:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Tagging it with `area-Meta` may result in it being overlooked by other area owners for tracking purposes.  ",
                                           "updatedAt":  "2024-05-03T17:08:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59UUNp",
                                           "createdAt":  "2024-05-09T11:23:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODhYP-A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gregsdennis",
                                                                               "createdAt":  "2024-05-10T06:58:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e BTW, it\u0027s also possible to disable all warnings using `#pragma warning disable`. But, this might be considered undesirable if it hides bugs with the generated code itself.\r\n\r\nSomething I\u0027ve been thinking about recently is that source generators should be disabling warnings altogether in generated code, since they\u0027re not actionable at all when surfaced to users. We could keep them on for debug builds of the source generator to catch bugs at development time. It could be said that this approach will result in bugs not being reported, but I would argue that it\u0027s not important unless the warning condition results in actual functional bugs that the users report to us.",
                                           "updatedAt":  "2024-05-09T11:23:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59XIDA",
                                           "createdAt":  "2024-05-09T18:38:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Something I\u0027ve been thinking about recently is that source generators should be disabling warnings altogether in generated code, since they\u0027re not actionable at all when surfaced to users.\r\n\r\nCan\u0027t the user utilize `\u003cNoWarn\u003e`  in their project to disable any warning?",
                                           "updatedAt":  "2024-05-09T18:39:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59X9jn",
                                           "createdAt":  "2024-05-09T21:16:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e Something I\u0027ve been thinking about recently is that source generators should be disabling warnings altogether in generated code, since they\u0027re not actionable at all when surfaced to users.\r\n\r\nThey\u0027re not actionable by users, but they\u0027re indicators to the generators that they\u0027re using C# incorrectly.",
                                           "updatedAt":  "2024-05-09T21:16:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59ZNRa",
                                           "createdAt":  "2024-05-10T02:45:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e Can\u0027t the user utilize NoWarn in their project to disable any warning?\r\n\r\nI addressed this in the top comment:\r\n\r\n\u003e The only thing I can do is suppress the warning globally, which isn\u0027t ideal because I still want those warnings for my \"hand written\" code.\r\n",
                                           "updatedAt":  "2024-05-10T02:45:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59bx10",
                                           "createdAt":  "2024-05-10T11:20:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e They\u0027re not actionable by users, but they\u0027re indicators to the generators that they\u0027re using C# incorrectly.\r\n\r\nThe fact that they\u0027re not actionable makes it a pretty poor experience from an end-user perspective. Arguably it should only be a SG bug if the incorrect use of C# results in incorrect functional behaviour of the generated code.",
                                           "updatedAt":  "2024-05-10T11:20:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59c4YY",
                                           "createdAt":  "2024-05-10T14:35:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "I def do not want generators to be able to suppress warnings automatically. If they\u0027re emitting something with a warning I want to know so I can assess the situation. ",
                                           "updatedAt":  "2024-05-10T14:35:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59c68i",
                                           "createdAt":  "2024-05-10T14:41:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I def do not want generators to be able to suppress warnings automatically. If they\u0027re emitting something with a warning I want to know so I can assess the situation.\r\n\r\nYou\u0027re referring to:\r\n\"Something I\u0027ve been thinking about recently is that source generators should be disabling warnings altogether in generated code,\"\r\n?\r\n\r\nWhy shouldn\u0027t the source generator be able to disable warnings on things it itself is generating? Just as it can today with a pragma in the generated code. Lots of source generators, including ours, use #pragma warning disable in the generated code.",
                                           "updatedAt":  "2024-05-10T14:44:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59doXQ",
                                           "createdAt":  "2024-05-10T16:44:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODntHbQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "terrajobst",
                                                                               "createdAt":  "2024-06-28T18:20:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e Why shouldn\u0027t the source generator be able to disable warnings on things it itself is generating?\r\n\r\nI don\u0027t have any issues with generators suppressing specific warnings. I do have issues with a blanket \"let\u0027s automatically suppress all warnings\". That seems like a recipe for letting bad code silently enter generators. ",
                                           "updatedAt":  "2024-05-10T16:44:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59eDiQ",
                                           "createdAt":  "2024-05-10T17:53:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "\u003e That seems like a recipe for letting bad code silently enter generators.\r\n\r\nI think it\u0027s reasonable for warnings to be emitted for debug builds of the source generators. I don\u0027t see much of a point in production builds -- if emitting a warning helps uncover potential bugs, I think users should just be reporting the bugs themselves assuming they exist.",
                                           "updatedAt":  "2024-05-10T17:53:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59eH6n",
                                           "createdAt":  "2024-05-10T18:01:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e . I don\u0027t see much of a point in production builds -\r\n\r\nConsider this exact bug as an example of why we should be emitting in production builds. There is a behavior that the generator author is unaware of. Lacking warnings in production builds the author would never know about it. \r\n\r\nYes in this case the response is \"we could ignore that\". That will not always be the case.",
                                           "updatedAt":  "2024-05-10T18:01:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59eV2f",
                                           "createdAt":  "2024-05-10T18:48:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODhcsKw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jaredpar",
                                                                               "createdAt":  "2024-05-10T18:59:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "RikkiGibson",
                                           "body":  "Is there a similar issue here when the user types include `ExperimentalAttribute` on members? [SharpLab](https://sharplab.io/#v2:EYLgtghglgdgNAFxBAzggPgAQEwEYCwAUJgAwAEmuAdACJQQDmMA9mlAMYpUDCzAJgFMAgjAgAbAJ4ooKANxFMAZgrYy3MgG8iZHWQDaAeWApmYgQgEBdbbqUUALGQCyACgCUmm7t1Pc7+YTeAL5eZKF6AKIAHgAOAgBOUGACMAjiLgBEThLRcYnJqRlu1oG2ypiOvu6aZCGEQUA)",
                                           "updatedAt":  "2024-05-10T18:50:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59gP60",
                                           "createdAt":  "2024-05-11T07:06:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregsdennis",
                                           "body":  "I have worked for employers who have policies of treating warnings as errors.  Warnings from generated code would absolutely break them, but they would still consider blanket-ignoring even specific warnings a bad idea because they don\u0027t want their devs writing code that causes warnings. \n\nI concur that automatically ignoring warnings from generated code is a good thing.\n\nThe only alternative I can see is adding a project property that allows an opt-in or -out for warnings on generated code.",
                                           "updatedAt":  "2024-06-28T18:53:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59hw1B",
                                           "createdAt":  "2024-05-11T19:44:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "Imagine the warning is coming from a security based analyzer. Automatically suppressing that just because it\u0027s generated code is almost certainly the wrong move and would result in uncomfortable conversations. ",
                                           "updatedAt":  "2024-05-11T19:44:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59hxwA",
                                           "createdAt":  "2024-05-11T20:03:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RikkiGibson",
                                           "body":  "I think warnings in the compiler are fairly keyed toward: if we are reporting this, something is almost certainly wrong, and the generator author should think about what\u0027s happening when those warnings occur. It\u0027s possible that suppression is the right thing to do, but not necessarily.\r\n\r\nAnalyzer authors have the ability to configure whether the analyzer runs on generated code or not. And it seems to me like if the analyzer is indicating the intention to run on generated code, the generated code should respect that and not attempt to suppress diagnostics in it--at least, again, not without reasoning out why the suppression is the right thing to do.\r\n\r\nIt also feels reasonable to make sure we have a story for users who get a diagnostic in generated code which they don\u0027t own and they need to get unblocked. Maybe we should make sure the user can write an editorconfig which refers to the path of the generated code (the generated file has a \"path\" according to the compiler even if it is not written to disk), and adjust behavior of diagnostics that way.\r\n\r\nRoslyn also has a concept of \"diagnostic suppressors\". While it might not be the cleanest, the JSON generator might be able to solve its problem by shipping a suppressor which notices that a diagnostic is for an obsolete/experimental/etc. property that the user is asking us to generate a serializer for, and suppresses the warning on it accordingly.\r\n\r\n(BTW, yet another possibility I didn\u0027t see mentioned: It might be possible that the right thing to do is *actually* to attribute the generated methods related to the obsolete/experimental/etc. type with the same obsolete attributes being used on the user members. This suppresses the warnings in the implementation of these methods and forwards the question of how to handle the obsolete-ness/experimental-ness to the user.)",
                                           "updatedAt":  "2024-05-11T20:49:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59h33q",
                                           "createdAt":  "2024-05-11T21:07:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "For obsolete / experimental specifically I was mulling over whether we should consider a named group suppression (as detailed in [73292][pragma]). \r\n\r\n```csharp\r\n#pragma warning disable obsolete\r\n#pragma warning disable experimental\r\n```\r\n\r\nGiven how configurable these types of warnings are I understand how that is an attractive idea. There is some symmetry with nullable in the idea there of just want to ignore warnings from this group. At the same time it also means that generators can essentially use `BinaryFormatter` without a diagnostic. Are we okay with that use case? \r\n\r\nThe named group for nullable was done specifically because nullable warnings can\u0027t impact code semantics (it\u0027s part of the core design principals). Hence suppressing in bulk is not going to have adverse effects on the code. I\u0027m unsure if obsolete falls into the same category because of scenarios like `BinaryFormatter`. Genuinely on the fence about that.\r\n\r\n\u003e It also feels reasonable to make sure we have a story for users who get a diagnostic in generated code which they don\u0027t own and they need to get unblocked. Maybe we should make sure the user can write an editorconfig which refers to the path of the generated code (the generated file has a \"path\" according to the compiler even if it is not written to disk), and adjust behavior of diagnostics that way.\r\n\r\nVery much agree with this. It can be done today with .globalconfig but that\u0027s a bit clunky. Suppressions there apply to all source, not just generated one. Path based suppressions can be used in .editorconfig to suppress in generated files but it\u0027s imprecise. Have to use sections like `[*.Regex.g.cs]` which possibly matches more than you intended.\r\n\r\n\u003e Something I\u0027ve been thinking about recently is that source generators should be disabling warnings altogether in generated code, since they\u0027re not actionable at all when surfaced to user\r\n\r\nI continue to strongly disagree with this viewpoint. \r\n\r\nSource generators need to have the right tools in order to produce code that compiles cleanly. Just like with hand written code that is going to occasionally involve some amount of `#pragma` work (likely more so for generated code because it can\u0027t be as easily tuned as hand written code). I\u0027m certainly sympathetic to cases like this where getting it right for generators is burdensome and recognize we may need to find ways to strike a better balance.\r\n\r\nBut I cannot get behind the idea of disabling all warnings in generated code: either implicitly or with a single switch. Warnings exist to alert users to potential issues in code. The design of the language is that such warnings need to be explicitly dealt with: either by fixing the code or by suppressing the warning.\r\n\r\nThis is not just the feelings of the language, it\u0027s also part of our general security posture. Over the last few years we\u0027ve taken several changes to the [SARIF logger][sarif] to better surface what diagnostics ran in a build, and which diagnostics were suppressed and how were they suppressed. This was at the request of various security teams to ensure they can better audit security analyzers in build: making sure they\u0027re not disabled entirely, individual suppressions are audited, etc ... Having the compiler silently suppress all warnings does not really fit into that model and I have a hard time seeing it being accepted. \r\n\r\n[pragma]: https://github.com/dotnet/roslyn/issues/73292\r\n[sarif]: https://github.com/dotnet/roslyn/commits/main/src/Compilers/Core/Portable/CommandLine/SarifV2ErrorLogger.cs\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2024-05-11T21:07:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59h6Dv",
                                           "createdAt":  "2024-05-11T21:58:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e Analyzer authors have the ability to configure whether the analyzer runs on generated code or not. And it seems to me like if the analyzer is indicating the intention to run on generated code, the generated code should respect that and not attempt to suppress diagnostics in it-\r\n\r\nI strongly agree with this.  Some analyzers already choose to disable them in generated code. Others continue to run.  I think this should be an analyzer decision.",
                                           "updatedAt":  "2024-05-11T21:58:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59j0r-",
                                           "createdAt":  "2024-05-13T02:54:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e At the same time it also means that generators can essentially use BinaryFormatter without a diagnostic. \r\n\r\nThat\u0027s already possible, no? The source generator would just emit `pragma warning disable SYSLIB0011` today. Or it would use a mechanism to access it that the obsolete analyzer can\u0027t see, e.g. reflection.",
                                           "updatedAt":  "2024-05-13T02:54:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59j9p1",
                                           "createdAt":  "2024-05-13T03:45:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e The source generator would just emit pragma warning disable SYSLIB0011 \r\n\r\nCorrect they can do that. But that is an explicit suppression. That would show up if you were auditing code, looking at a SARIF log, etc ... It gives organizations the capability to make policy decisions around that diagnostic. Where as with `#pragma warning disable obsolete` it\u0027s not clear what was suppressed, just anything obsolete related. Can\u0027t make inferences as to whether say `BinaryFormatter` was used or not.\r\n\r\n\r\n",
                                           "updatedAt":  "2024-05-13T03:45:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59mUm-",
                                           "createdAt":  "2024-05-13T10:21:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e That would show up if you were auditing code, looking at a SARIF log, etc\r\n\r\nI\u0027d expect such code auditing to not include Roslyn source generated code, since it\u0027s generally not merged into a repo. \r\n\r\nAnd what stops the C# compiler from logging for `disable obsolete` the actual ids for anything it suppresses rather than a blanket log for the category? It could treat it as if the individual codes actually encountered were suppressed, which the dev can\u0027t necessarily do but the compiler can. ",
                                           "updatedAt":  "2024-05-13T10:49:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59rhhi",
                                           "createdAt":  "2024-05-13T18:44:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e I\u0027d expect such code auditing to not include Roslyn source generated code, since it\u0027s generally not merged into a repo\r\n\r\nAgree that users won\u0027t reasonably audit this. Tooling though does perform these audits and they do consider generated code.\r\n\r\n\u003e And what stops the C# compiler from logging for disable obsolete the actual ids for anything it suppresses rather than a blanket log for the category?  It could treat it as if the individual codes actually encountered were suppressed, which the dev can\u0027t necessarily do but the compiler can.\r\n\r\nThis is an approach we could take. There are some issues with SARIF we\u0027d need to work out. It\u0027s a bit of a twist to the existing use cases: single item suppressing groups of warnings [note 1][nrt] . Should be fine though. \r\n\r\nAgain though, for obsolete / experimental I\u0027m on the fence with whether we should do this. Can also see arguments for this should be a warning. After all the user said \"this obsolete\" and then did an action where we generated code to use it. Was that intentional? What if it wasn\u0027t and now we\u0027re silently consuming a member they didn\u0027t want used. I can convince myself both ways on this one. If we ended up deciding as a group the `#pragma` was the right way I\u0027d probably end up being fine with it.\r\n\r\nThat is not true for other classes of warnings. Bulk suppressing all warnings is not an approach I can see working. \r\n\r\n[nrt]: Yes there is already a group disable for NRT. As I mentioned earlier though these warnings never impact program semantics so it\u0027s never come up as a concern for auditing. ",
                                           "updatedAt":  "2024-05-13T18:44:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59rrFx",
                                           "createdAt":  "2024-05-13T19:05:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODhp6sA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2024-05-13T19:31:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "I agree we shouldn\u0027t disable **all** warnings in generated code. That seems going too far.\r\n\r\n\u003e Again though, for obsolete / experimental I\u0027m on the fence with whether we should do this. Can also see arguments for this should be a warning. After all the user said \"this obsolete\" and then did an action where we generated code to use it. Was that intentional?\r\n\r\nThe JSON source generator already decided it should disable any \"obsolete\" warnings inside the code it generates. That\u0027s why it adds a `#pragma warning disable CS0612, CS0618` line to the top of the generated files:\r\n\r\nhttps://github.com/dotnet/runtime/blob/6c3245ed44e3f205a244d990e50c9510f6e1e9a6/src/libraries/System.Text.Json/gen/JsonSourceGenerator.Emitter.cs#L140-L141\r\n\r\nThis issue is that some obsoletions use their own diagnostic ID, and this list can\u0027t be statically known ahead of time. The JSON source generator could inspect every property it is going to reference and keep a list of the obsoletion IDs and then suppress them (either at the top of the file, or around each usage), but that would need to be done for every source generator that needs this behavior.\r\n\r\nThe logical reason why it is OK to suppress these warnings is because the source generator wants to match the reflection based logic. The reflection based logic happily uses Obsolete (and experimental) properties without warnings. The source generator should behave the same.",
                                           "updatedAt":  "2024-05-13T19:05:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59r2s9",
                                           "createdAt":  "2024-05-13T19:31:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Is it possible we can have a helper method which can get the instances of all obsoletion attribute references in the compilation and from these can get all diagnostics Ids? I don\u0027t think this needs to be checked for every property for such attribute. ",
                                           "updatedAt":  "2024-05-13T19:31:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59sHGN",
                                           "createdAt":  "2024-05-13T20:11:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RikkiGibson",
                                           "body":  "re: suppressing BinaryFormatter. It seems like if we suppressed these, the SARIF logs will still show that the diagnostic for using it is present but suppressed. Right? In this case, I think anyone auditing will have all the information they need about what is going on.\r\n\r\nre: a helper method to get obsolete attribute usages: I think enumerating the set of obsolete diagnostics that *could* occur, prior to generating source, is going to be more computationally expensive than introducing the ability to blanket-suppress all obsolete diagnostics when they occur, because it may force us to bind attributes which we otherwise wouldn\u0027t have bound in the \"primordial compilation\". It also might be tricky to do correctly in all scenarios.\r\n\r\nI paged this area in a little more and recalled that all obsolete diagnostics with a custom ID have a [well-known entry](https://github.com/RikkiGibson/roslyn/blob/b7a9893998197f1d1cac0fb3a287345a88ef8fe6/src/Compilers/Core/Portable/Diagnostic/WellKnownDiagnosticTags.cs#L52) in [CustomTags](https://github.com/dotnet/roslyn/blob/d3ea419bcfddf3d57d68f31a6fd0a10468690ecf/src/Compilers/Core/Portable/Diagnostic/DiagnosticDescriptor.cs#L67).\r\n\r\nI think that writing a DiagnosticSuppressor which suppresses all obsolete diagnostics would be very simple using this.\r\n",
                                           "updatedAt":  "2024-05-13T20:11:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc591wXB",
                                           "createdAt":  "2024-05-14T22:28:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "It seems there are a couple of approaches (in order of impact):\r\n\r\n1. Ability to turn of all obsoletion warnings which the analyzer can emit\r\n1. Roslyn configuration for suppressions that are only applied to generated code\r\n1. Exposing configuration for source generators to suppress user supplied diagnostic IDs (would be custom for each generator)\r\n1. Do nothing, i.e. the user has to suppress them globally.\r\n\r\nPersonally, I think (1) makes the most sense and has the least amount of moving pieces. @jaredpar\u0027s [argument](https://github.com/dotnet/runtime/issues/101738#issuecomment-2105048743) makes sense, but the problem I see is that in practice many developers will simply choose to ignore them anyway. And if their only recourse is to turn it off globally, well, that\u0027s what they are going to do. At least that\u0027s our experience and originally prompted custom diagnostic IDs to begin with. Personally, I\u0027d rather a source generator turns off all obsoletion warnings for its generated code than developers suppressing specific obsoletion diagnostics globally, just to suppress in generated code.\r\n\r\nHowever, if we truly believe the developer should issue the suppressions, not the generator, then I think we\u0027d want a generalized framework to let the user pass them in. This can either be a global context (`\u003cNoWarnInGeneratedCode\u003eSYSLIB001\u003c/\u003cNoWarnInGeneratedCode\u003e`) or as a kind of pairing based on the name the generated syntax tree was given (if we really feel the need for more localization). \r\n\r\nI don\u0027t like the idea of handling this in each and every source generator, either by detecting obsoletions and adding suppression or by configuration. Both feel error prone and/or complicate the developer experience around the feature that uses the generator.\r\n\r\nAnd I really don\u0027t like the last recourse (4) because it undermines the goal of making the developer aware when they use obsolete members in code they write.",
                                           "updatedAt":  "2024-05-14T22:28:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc591zQM",
                                           "createdAt":  "2024-05-14T22:38:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e Do nothing, i.e. the user has to suppress them globally.\r\n\r\nI don\u0027t really see this as a long term option. Yes today the only way to control diagnostics in generated code is globally through a .globalconfig file. That is not a good answer. The general mentality of the compiler is that if there is a warning in generated code that is likely a bug the generator needs to address and over the long term users shouldn\u0027t be suppressing these warnings. In the short term while the generator is working on a fix it would be nice if the diagnostic could be suppressed for the generated code only. @chsienki was going to open an issue for us to track potentially adding that in the future.\r\n\r\n\u003e Roslyn configuration for suppressions that are only applied to generated code\r\n\r\nIf we took action here it would not be to suppress diagnostics only in generated code. It would be geared towards letting diagnostics be suppressed in the generated code for a specific generator. Suppressing in all code leads to cases where you turn off a warning in Generator A, but then Generator B then silently introduces the same bug.\r\n\r\n\u003e Ability to turn of all obsoletion warnings which the analyzer can emit\r\n\r\nIf we take this approach it will be the big hammer style. Basically disable all obsolete diagnostics including ones we\u0027d probably want like `BinaryFormatter`. Don\u0027t see us doing a `#pragma warning disable obsolete except ...` style feature. \r\n\r\n\u003e Personally, I think (1) makes the most sense and has the least amount of moving piece\r\n\r\nIt unfortunately has a number of moving pieces as well. Designing the SARIF angle will be interesting and likely a non-trivial amount of work. \r\n",
                                           "updatedAt":  "2024-05-14T22:38:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C-ito",
                                           "createdAt":  "2024-06-28T18:27:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODntLFw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephentoub",
                                                                               "createdAt":  "2024-06-28T18:29:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "Does this mean we agree on the direction (i.e. support `#pragma warning disable obsolete`), that is, an explicit suppression for all obsoletions, akin to experimental and nullable?",
                                           "updatedAt":  "2024-06-28T18:27:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Di1k9",
                                           "createdAt":  "2024-07-03T18:25:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODoSwzg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "terrajobst",
                                                                               "createdAt":  "2024-07-03T21:57:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "I think it\u0027s the most promising path at this point. ",
                                           "updatedAt":  "2024-07-03T18:25:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DxgQe",
                                           "createdAt":  "2024-07-05T12:29:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Moving to 10.0.0, seems unlikely we\u0027ll get to a solution in 9.",
                                           "updatedAt":  "2024-07-05T12:29:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Es6nc",
                                           "createdAt":  "2024-07-12T21:18:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpk-Hg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2024-07-12T22:20:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "@jaredpar @eiriktsarpalis should this issue be moved to dotnet/roslyn? Looks like we concluded this should be a compiler feature.",
                                           "updatedAt":  "2024-07-12T21:18:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Etg0h",
                                           "createdAt":  "2024-07-12T23:32:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RikkiGibson",
                                           "body":  "It feels reasonable to close this out and track with dotnet/roslyn#73292. (feel free to re-triage if you don\u0027t agree.)",
                                           "updatedAt":  "2024-07-12T23:33:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ewq0-",
                                           "createdAt":  "2024-07-14T13:31:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQdrCg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jaredpar",
                                                                               "createdAt":  "2024-07-14T21:22:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2024-07-15T10:30:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "terrajobst",
                                                                               "createdAt":  "2024-07-15T17:55:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmprieur",
                                                                               "createdAt":  "2025-05-01T16:13:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Note that once https://github.com/dotnet/roslyn/issues/73292 is implemented, we will still need to make the small change in the JSON and Config Binder source generators to take advantage of the new feature - by adding `#pragma warning disable obsolete` (or whatever is decided) to the generated code.",
                                           "updatedAt":  "2024-07-14T13:31:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E3PY6",
                                           "createdAt":  "2024-07-15T17:55:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "@eerhardt presumably you\u0027re suggesting to use this issue to track the needed changes for that? If so, it would be good to update the title / description to reflect this.",
                                           "updatedAt":  "2024-07-15T17:55:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E3XZk",
                                           "createdAt":  "2024-07-15T18:15:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODp0HkQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RikkiGibson",
                                                                               "createdAt":  "2024-07-15T18:26:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "terrajobst",
                                                                               "createdAt":  "2024-07-15T18:37:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "I\u0027ve updated the top comment of this issue with:\r\n\r\n\u003e This issue is tracking updating the System.Text.Json and ConfigurationBinder source generators to take advantage of https://github.com/dotnet/roslyn/issues/73292 when it is implemented.",
                                           "updatedAt":  "2024-07-15T18:15:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E3g1a",
                                           "createdAt":  "2024-07-15T18:38:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "Thanks man, appreciated!",
                                           "updatedAt":  "2024-07-15T18:38:01Z"
                                       }
                                   ],
                         "totalCount":  49
                     },
        "title":  "Obsoletions with a DiagnosticId still get warnings in generated code",
        "labels":  [
                       "area-System.Text.Json",
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102926",
        "createdAt":  "2024-05-31T10:10:04Z",
        "number":  102926,
        "author":  "senabd",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-05T07:31:47Z",
        "body":  "### Describe the bug\r\nISet\u003cT\u003e in .NET 8 not populating from configuration as expected in .NET 6\r\n\r\nI have following option definition:\r\n\r\n\r\n```\r\nusing System.Collections.Generic;\r\n\r\nnamespace WebApplication3;\r\n\r\npublic record TestOptions\r\n{\r\n   public ISet\u003cUri\u003e ISetTest { get; set; } = new HashSet\u003cUri\u003e();\r\n}\r\n```\r\n\r\nThis option class registered in the Startup.cs as usual and In .Net 6 ISetTest property contains values but in .Net 8 it\u0027s empty.\r\n\r\n### Workaround\r\n\r\nUse HashSet instead of ISet:\r\n\r\n`public HashSet\u003cUri\u003e ISetTest { get; set; } = new HashSet\u003cUri\u003e();`\r\n\r\n### To Reproduce\r\n\r\nCreate ASP.NET Core Web API project with .Net 8 LTS.\r\n\r\nCreate option class:\r\n\r\n```\r\npublic record TestOptions\r\n{\r\n\tpublic ISet\u003cUri\u003e ISetTest { get; set; } = new HashSet\u003cUri\u003e();\r\n}\r\n```\r\nAdd settings to appsetting.json:\r\n\r\n```\r\n\"Tests\": {\r\n    \"ISetTest\": [ \"https://testuri.net\" ]\r\n}\r\n```\r\n\r\nRegister options in Startup.cs or Program.cs:\r\n\r\n`builder.Services.Configure\u003cTestOptions\u003e(builder.Configuration.GetSection(\"Tests\"));`\r\n\r\nResolve TestOptions from a controller:\r\n\r\n```\r\npublic WeatherForecastController(IOptions\u003cTestOptions\u003e options)\r\n{\r\n}\r\n```\r\nThen start the application in debug mode and set a breakpoint on the options variable to check its value. The result should look like:\r\n\r\nFor .Net 6: \r\n\r\n![image](https://github.com/dotnet/sdk/assets/10263337/7b397bcf-e154-42a1-95c8-d3e79c69de16)\r\n\r\nFor .Net 8: \r\n\r\n![image](https://github.com/dotnet/sdk/assets/10263337/be3aec81-6687-4e82-8a12-83105f11a55d)\r\n\r\n### Exceptions (if any)\r\n   No exception.\r\n\r\n### Further technical details\r\n- Include the output of `dotnet --info`\r\n```\r\ndotnet --info\r\n.NET SDK:\r\n Version:           8.0.105\r\n Commit:            eae90abaaf\r\n Workload version:  8.0.100-manifests.c1c70047\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.105\\\r\n\r\n.NET workloads installed:\r\n Workload version: 8.0.100-manifests.c1c70047\r\n [maui]\r\n   Installation Source: SDK 8.0.100\r\n   Manifest Version:    8.0.3/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.maui\\8.0.3\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\n [maccatalyst]\r\n   Installation Source: VS 17.8.34322.80\r\n   Manifest Version:    17.0.8478/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.maccatalyst\\17.0.8478\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\n [ios]\r\n   Installation Source: VS 17.8.34322.80\r\n   Manifest Version:    17.0.8478/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.ios\\17.0.8478\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\n [maui-windows]\r\n   Installation Source: VS 17.8.34322.80\r\n   Manifest Version:    8.0.3/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.maui\\8.0.3\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\n [wasm-tools]\r\n   Installation Source: VS 17.8.34322.80\r\n   Manifest Version:    8.0.5/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.workload.mono.toolchain.current\\8.0.5\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\n [android]\r\n   Installation Source: VS 17.8.34322.80\r\n   Manifest Version:    34.0.43/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.android\\34.0.43\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\nHost:\r\n  Version:      8.0.5\r\n  Architecture: x64\r\n  Commit:       087e15321b\r\n\r\n.NET SDKs installed:\r\n  5.0.404 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.302 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.422 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.105 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n```\r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version\r\n   Microsoft Visual Studio Professional 2022 (64-bit) - Current Version 17.8.2\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlivfug==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5_tXqm",
                                           "createdAt":  "2024-05-31T16:15:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODkD8PA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2024-05-31T16:31:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "This belongs in [dotnet/runtime, area-Extensions-Configuration](https://github.com/dotnet/runtime/issues?q=is%3Aopen+is%3Aissue+label%3Aarea-Extensions-Configuration).\r\n\r\nAFAICT, ConfigurationBinder in v6.0.0 does not recognize ISet\\\u003c\\\u003e.  I guess its BindInstance method gets the existing HashSet\\\u003cUri\\\u003e in the `object instance` parameter, detects that the instance supports ICollection\\\u003cUri\\\u003e, and calls BindCollection, which then calls the ICollection\\\u003cUri\\\u003e.Add(Uri) method repeatedly.\r\n\r\nBetween v6.0.0 and v8.0.0, there was a change to make ConfigurationBinder recognize ISet\\\u003c\\\u003e: \u003chttps://github.com/dotnet/runtime/pull/68133\u003e.  Now in v8.0.0, BindInstance is told that the type of the property is ISet\\\u003cUri\\\u003e, and presumably calls BindSet, which gives up:\r\n\r\n\u003chttps://github.com/dotnet/runtime/blob/5535e31a712343a63f5d7d796cd874e563e5ac14/src/libraries/Microsoft.Extensions.Configuration.Binder/src/ConfigurationBinder.cs#L799-L803\u003e",
                                           "updatedAt":  "2024-06-01T03:44:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_tXqs",
                                           "createdAt":  "2024-05-31T16:17:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Limiting this to strings and enums was requested in \u003chttps://github.com/dotnet/runtime/pull/68133#discussion_r864098229\u003e.",
                                           "updatedAt":  "2024-05-31T16:18:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_tX5w",
                                           "createdAt":  "2024-05-31T16:24:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-31T16:24:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_tbA2",
                                           "createdAt":  "2024-05-31T16:33:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "CC @halter73 for the comment https://github.com/dotnet/runtime/issues/102926#issuecomment-2142599852",
                                           "updatedAt":  "2024-05-31T16:33:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Fnaqg",
                                           "createdAt":  "2024-07-21T16:19:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD9qMxg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Ricky-Hao",
                                                                               "createdAt":  "2024-12-05T07:26:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "For keys in an IDictionary\\\u003cTKey, TValue\\\u003e, the string-or-enum restriction makes some sense, because those are converted from JSON property names that can only be strings.\r\n\r\nFor elements of ISet\\\u003cT\\\u003e, the restriction makes less sense, because they are converted from JSON array elements that can have any JSON type.",
                                           "updatedAt":  "2024-07-21T16:19:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WK9-6",
                                           "createdAt":  "2024-12-05T07:31:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ricky-Hao",
                                           "body":  "I also encountered the same issue when I want to use `ISet\u003cint\u003e` with Configuration Binder.\nI think it\u0027s no make sense of this string and Enum restriction. The `int` it\u0027s a valid JSON type in JSON array.\nTest code with Polyglot notebook\n\n```csharp\n#r \"nuget:Microsoft.Extensions.Configuration.Json\"\n#r \"nuget:Microsoft.Extensions.Configuration.Binder\"\n\nusing Microsoft.Extensions.Configuration;\n\npublic class Test\n{\n    public ISet\u003cint\u003e aaa { get; set; } = new HashSet\u003cint\u003e();\n}\n\nvar json = \"\"\"{\"aaa\": [1, 2, 3, 3]}\"\"\";\nvar builder = new ConfigurationBuilder();\nbuilder.AddJsonStream(new System.IO.MemoryStream(System.Text.Encoding.UTF8.GetBytes(json)));\nvar config = builder.Build();\n\nvar obj = new Test();\nconfig.Bind(obj);\n\nSystem.Console.WriteLine(obj.aaa.Count);\n```\n\nOutput: `0`\n",
                                           "updatedAt":  "2024-12-05T07:31:45Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "ISet in .NET 8 not populating from configuration as expected in .NET 6",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105195",
        "createdAt":  "2024-07-21T12:51:35Z",
        "number":  105195,
        "author":  "rchoffardet",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-22T07:02:00Z",
        "body":  "### Description\n\nWhen binding configuration, it\u0027s normally possible to override the conversion by adding a `TypeConverterAttribute` attribute to the field, property, or class declaration. It does work when binding against a `string` value but not against a `IConfigurationSection`.\r\n \n\n### Reproduction Steps\n\nhttps://dotnetfiddle.net/gxB9o3\r\n\r\n```csharp\r\nusing Microsoft.Extensions.Configuration;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Collections.ObjectModel;\r\nusing System.ComponentModel;\r\nusing System.Globalization;\r\n\r\n\r\nvar configuration = new ConfigurationBuilder()\r\n    .AddInMemoryCollection(new Dictionary\u003cstring, string\u003e()\r\n    {\r\n        { \"0\", \"Hello\"},\r\n        { \"1\", \"world\"},\r\n    })\r\n    .Build();\r\n\r\ntry\r\n{\r\n    var options = configuration.Get\u003cItem\u003e();\r\n    Console.WriteLine(\"Binding success.\");\r\n}\r\ncatch (Exception e)\r\n{\r\n    Console.WriteLine(\"Binding failure.\");\r\n}\r\n\r\n[TypeConverter(typeof(ItemConverter))]\r\nclass Item\r\n{\r\n    private string Zero;\r\n    private string One;\r\n\r\n    public Item(string zero, string one)\r\n    {\r\n        Zero = zero;\r\n        One = one;\r\n    }\r\n}\r\n\r\nclass ItemConverter : TypeConverter\r\n{\r\n    public override bool CanConvertFrom(ITypeDescriptorContext? context, Type sourceType)\r\n    {\r\n        return sourceType == typeof(IConfigurationSection);\r\n    }\r\n\r\n    public override object ConvertFrom(ITypeDescriptorContext? context, CultureInfo? culture, object value)\r\n    {\r\n        var section = (IConfigurationSection)value;\r\n        return new Item(section.GetValue\u003cstring\u003e(\"0\"), section.GetValue\u003cstring\u003e(\"1\"));\r\n    }\r\n}\r\n\r\n```\n\n### Expected behavior\n\nItem is correctly bound\n\n### Actual behavior\n\nFailing this message: \"Cannot create instance of type \u0027Item\u0027 because one or more parameters cannot be bound to. Constructor parameters must have corresponding properties. Fields are not supported. Missing properties are: \u0027zero,one\u0027\"\n\n### Regression?\n\nNot that I know of\n\n### Known Workarounds\n\nNone that I know of\n\n### Configuration\n\n- Runtime: .NET 8.0.5\r\n- OS: Windows 11  Version 23H2\r\n- Architecture: x64\r\nIt\u0027s probably not specific to that configuration, AFAIK, it\u0027s the same behavior in .NET 9 preview versions\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhaXAEg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6FnBxg",
                                           "createdAt":  "2024-07-21T12:51:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-21T12:51:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FpcAS",
                                           "createdAt":  "2024-07-22T07:01:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rchoffardet",
                                           "body":  "I\u0027m willing to put effort into this, here is a draft PR for this: https://github.com/dotnet/runtime/pull/105228\r\n",
                                           "updatedAt":  "2024-07-22T07:01:59Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Configuration binding ignores TypeConverter when binding against a IConfigurationSection",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105269",
        "createdAt":  "2024-07-22T18:45:10Z",
        "number":  105269,
        "author":  "ericstj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-22T18:54:49Z",
        "body":  "See https://github.com/dotnet/runtime/issues/101079\r\n\r\nThis issue tracks backport of that feature to .NET 8.0, so that the configuration source generator will continue to work when the compiler removes support for source/line/offset from InterceptsLocationAttribute.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhbqNqQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Fuo2p",
                                           "createdAt":  "2024-07-22T18:45:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-22T18:45:38Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Backport use of GetInterceptableLocation to .NET 8.0",
        "labels":  [
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105311",
        "createdAt":  "2024-07-23T12:43:32Z",
        "number":  105311,
        "author":  "uweigand",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-01T18:09:46Z",
        "body":  "Since https://github.com/dotnet/runtime/pull/104180 was merged, the following test cases are failing on s390x:\r\n```\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Bind_T_BinderOptions [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Collections [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Bind_Instance_BinderOptions [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.BindConfiguration [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Get_T_BinderOptions [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Bind_Instance [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Get_T [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.GetValue_T_Key_DefaultValue [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Bind_CanParseTargetConfigType_FromMethodParam [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Get_TypeOf [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Bind_T [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.UnsupportedTypes [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.GetValue_TypeOf_Key [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.BindConfigurationWithConfigureActions [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Configure_T_name_BinderOptions [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.GetValue_T_Key [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.MinimalGenerationIfNoBindableMembers [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Bind_Key_Instance [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Configure_T [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.DefaultConstructorParameters [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.GetValue_TypeOf_Key_DefaultValue [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Get_TypeOf_BinderOptions [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Primitives [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Configure_T_name [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Configure_T_BinderOptions [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Get_PrimitivesOnly [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.GetValue [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Get [FAIL]\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Bind [FAIL]\r\n```\r\nThe symptom is in all cases of the type:\r\n```\r\n    Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Bind [FAIL]\r\n      Line 38 does not match.\r\n      Expected Line:\r\n              [InterceptsLocation(1, \"/TzDbopkyui/vWzNJfmpq0IBAABzcmMtMC5jcw==\")] // src-0.cs(12,14)\r\n      Actual Line:\r\n              [InterceptsLocation(1, \"6sAEYxbTvjjW269lKa/ayUIBAABzcmMtMC5jcw==\")] // src-0.cs(12,14)\r\n      Stack Trace:\r\n        /home/uweigand/runtime/src/libraries/Microsoft.Extensions.Configuration.Binder/tests/SourceGenerationTests/GeneratorTests.Helpers.cs(175,0): at Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.VerifyAgainstBaselineUsingFile(String filename, String testSourceCode, ExtensionClassType extType, ExpectedDiagnostics expectedDiags)\r\n        /home/uweigand/runtime/src/libraries/Microsoft.Extensions.Configuration.Binder/tests/SourceGenerationTests/GeneratorTests.Baselines.cs(18,0): at Microsoft.Extensions.SourceGeneration.Configuration.Binder.Tests.ConfigurationBindingGeneratorTests.Bind()\r\n```\r\n\r\nIt looks like the difference is in the `InterceptableLocationData`, which is provided by roslyn\u0027s `Microsoft.CodeAnalysis.CSharp.InterceptableLocation1.Data`.  Specifically, the differences are in the `checksum` field, which is computed via the `SourceText:GetContentHash()` routine.  From looking this this routine, it seems to simply re-interpret a string (char sequence) as byte array, see https://github.com/dotnet/roslyn/blob/aea9e82da403c397265f7fd0fefee5ebbb886179/src/Compilers/Core/Portable/Text/SourceText.cs#L645\r\n```\r\nhash.Append(MemoryMarshal.AsBytes(charBuffer.AsSpan(0, charsToCopy)));\r\n```\r\nThis seems to imply that the hash value of the same source code will be different if computed on a big-endian vs. a little-endian machine (because the byte representation of each char will have its two bytes swapped).\r\n\r\nNow my question would be: is the content hash *supposed* to be the same on big- and little-endian machines?   If yes, that code in roslyn needs to be fixed.  If no, then the ConfigurationBindingGeneratorTests will have to take that endian difference into account one way or the other.\r\n\r\nCC @steveharter @tarekgh @directhex @steveisok\r\nFIY @giritrivedi @saitama951 @omajid @tmds ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh6hZbg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6F0k8T",
                                           "createdAt":  "2024-07-23T12:44:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-23T12:44:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6F0yVG",
                                           "createdAt":  "2024-07-23T13:08:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Vishwanatha-HD",
                                           "body":  "Attaching the complete log file of the error which got reproduced..\r\n[NET_runtime_Binder_Test_errors.txt](https://github.com/user-attachments/files/16349890/NET_runtime_Binder_Test_errors.txt)\r\n\r\n",
                                           "updatedAt":  "2024-07-23T14:00:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6F3kXs",
                                           "createdAt":  "2024-07-23T18:15:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@steveharter is this something you can help looking at? ",
                                           "updatedAt":  "2024-07-23T18:15:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6F5Iit",
                                           "createdAt":  "2024-07-23T21:25:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "@RikkiGibson PTAL",
                                           "updatedAt":  "2024-07-23T21:25:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6F5JCy",
                                           "createdAt":  "2024-07-23T21:27:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "This is similar to the question raised in https://github.com/dotnet/runtime/issues/101079#issuecomment-2221225812 where line endings can also vary based on platform.",
                                           "updatedAt":  "2024-07-23T21:27:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6F5TGE",
                                           "createdAt":  "2024-07-23T22:03:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RikkiGibson",
                                           "body":  "I think we expect that if the file content is the same, these hashes should be the same.\r\n\r\n@CyrusNajmabadi is it expected that the result of `GetContentHash()` will vary depending on endianness?\r\n",
                                           "updatedAt":  "2024-07-23T22:03:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6F5bF_",
                                           "createdAt":  "2024-07-23T22:36:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "It should be based entirely on the character content of the source files.   It would be good if both were dumped out (literally every character and its integral value), and the two were compared. \n\nIf they have the same characters, then GetContentHash should be the same. \n\nIf they have different characters, then this is by design. \n\nAre we sure this isn\u0027t an issue around \\r vs \\r\\n?",
                                           "updatedAt":  "2024-07-23T22:36:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6F86l7",
                                           "createdAt":  "2024-07-24T09:19:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "uweigand",
                                           "body":  "\u003e It should be based entirely on the character content of the source files. It would be good if both were dumped out (literally every character and its integral value), and the two were compared.\r\n\u003e \r\n\u003e If they have the same characters, then GetContentHash should be the same.\r\n\r\nI believe they have the same sequence of *characters* but not the same sequence of *bytes*, because each character has two bytes, and the order of those two bytes within a single character is endian-dependent.  The current implementation of GetContentHash only returns the same value on the same sequence of bytes, not characters.\r\n",
                                           "updatedAt":  "2024-07-24T09:19:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GBtM5",
                                           "createdAt":  "2024-07-24T17:51:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "@uweigand I think it makes sense to disable these tests for now as any possible Roslyn change will take a while to come over - what CI pipelines do I need to run to verify? (is it \"runtime-extra-platforms\"?)",
                                           "updatedAt":  "2024-07-24T18:15:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GCwUQ",
                                           "createdAt":  "2024-07-24T20:46:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "directhex",
                                           "body":  "Is there a way to ensure hashes like this are platform-independent without introducing a big byte swap performance overhead on big endian?",
                                           "updatedAt":  "2024-07-24T20:46:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GC1sK",
                                           "createdAt":  "2024-07-24T21:01:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "uweigand",
                                           "body":  "\u003e @uweigand I think it makes sense to disable these tests for now as any possible Roslyn change will take a while to come over - what CI pipelines do I need to run to verify? (is it \"runtime-extra-platforms\"?)\r\n\r\nThe runtime-community pipeline runs on s390x, however this is unfortunately not operational at the moment.  @directhex is working on bringing this back up again.  For the time being, I\u0027m happy to test any suggested fixes on our machines.",
                                           "updatedAt":  "2024-07-24T21:01:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GJ9bI",
                                           "createdAt":  "2024-07-25T15:50:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "@uweigand I put up a PR to disable these tests on https://github.com/dotnet/runtime/pull/105485. Can you give it a try to make sure all of the tests pass now? Thanks",
                                           "updatedAt":  "2024-07-25T15:50:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GLABA",
                                           "createdAt":  "2024-07-25T17:24:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "uweigand",
                                           "body":  "\u003e @uweigand I put up a PR to disable these tests on #105485. Can you give it a try to make sure all of the tests pass now? Thanks\r\n\r\nYes, this makes all tests pass again.  Thanks!",
                                           "updatedAt":  "2024-07-25T17:24:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Go9sd",
                                           "createdAt":  "2024-07-30T17:46:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e It should be based entirely on the character content of the source files. It would be good if both were dumped out (literally every character and its integral value), and the two were compared.\r\n\r\n\u003e If they have the same characters, then GetContentHash should be the same.\r\n\r\n@CyrusNajmabadi my take is that Roslyn may want to calculate the hash on character content, not byte contents. Also, if that is done, and we take a perf hit, does it make sense at that time to normalize line endings so that files saved under Windows\\Linux\\OSX all have the same hash?",
                                           "updatedAt":  "2024-07-30T17:46:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GpAWD",
                                           "createdAt":  "2024-07-30T17:52:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RikkiGibson",
                                           "body":  "At this point the line-endings issue is something we are comfortable with it behaving as it currently does. The file content is different, so the hash is different.\r\n\r\nThe endianness issue may be a real bug from our POV though. The content is the same character-for-character, it is just laid out differently in memory due to an architectural difference. It would be good if we could adjust the way the content hash is calculated on big-endian, so that it matches little-endian, without sacrificing too much perf.\r\n\r\nI will also say that while the intended design is to allow `[InterceptsLocation]` attributes to be written out to disk and consumed on another machine etc. it is not actually a mainline case for us. So, it is prone to hit bugs like these.\r\n\r\nIt might make sense to adjust the creation+consumption of these baselines to basically be insensitive to exactly what attribute arguments are used, and to add (or rely on pre-existing) functional verification that the compilation is successful and the semantics match what you expect.\r\n\r\n@jaredpar for visibility.\r\n",
                                           "updatedAt":  "2024-07-30T17:54:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GrANU",
                                           "createdAt":  "2024-07-31T00:35:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e does it make sense at that time to normalize line endings so that files saved under Windows\\Linux\\OSX all have the same hash?\r\n\r\nUnder no circumstances would we ever do this.  Line ending is *content* and affects the runtime behavior of a program.  Two programs with different line endings should not have the same hash as that would indicate they were identical.  ",
                                           "updatedAt":  "2024-07-31T00:35:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HhYyy",
                                           "createdAt":  "2024-08-07T14:56:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "@CyrusNajmabadi @RikkiGibson is there a tracking Roslyn issue?\r\n\r\nDo you expect this to be fixed in the v9.0 timeframe or should I move this to 10.0?",
                                           "updatedAt":  "2024-08-07T14:56:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HjhAz",
                                           "createdAt":  "2024-08-07T19:51:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RikkiGibson",
                                           "body":  "No, feel free to file an issue on Roslyn for the endianness behavior. I am guessing a fix in 9.0 is unlikely at this point.",
                                           "updatedAt":  "2024-08-07T19:51:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HqFlu",
                                           "createdAt":  "2024-08-08T14:21:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Roslyn issue: https://github.com/dotnet/roslyn/issues/74682\r\n\r\n\u003e I am guessing a fix in 9.0 is unlikely at this point.\r\n\r\nI am moving this to v10.",
                                           "updatedAt":  "2024-08-08T14:21:53Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "New ConfigurationBindingGeneratorTests fail on s390x (endian issue?)",
        "labels":  [
                       "test-bug",
                       "area-Extensions-Configuration",
                       "arch-s390x",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105960",
        "createdAt":  "2024-08-05T16:56:07Z",
        "number":  105960,
        "author":  "eduherminio",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-18T21:32:18Z",
        "body":  "### Description\r\n\r\nPotentially related/similar: https://github.com/dotnet/runtime/issues/36390\r\n\r\nUsing .NET 6 and `Microsoft.Extensions.Configuration` v6 to bind key-value pairs to an `IReadOnlyDictionary` doesn\u0027t work if the property is initialized (to an empty Dictionary).\r\n\r\nIt works when using .NET 8 and `Microsoft.Extensions.Configuration` v8, but I\u0027m not sure whether there\u0027s some fix that needs to be done internally so that this issue doesn\u0027t show up in some other scenario.\r\n\r\nI also want to validate that the suggested workaround is the best way to move forward.\r\n\r\n### Reproduction Steps\r\n\r\nRepro in [Bind-Not-Null-IReadOnlyDictionary repo](https://github.com/eduherminio/Bind-Not-Null-IReadOnlyDictionary)\r\n\r\n```bash\r\ngit clone https://github.com/eduherminio/Bind-Not-Null-IReadOnlyDictionary IReadOnlyDictionary \r\ncd IReadOnlyDictionary\r\ndotnet run --framework net8.0\r\ndotnet run --framework net6.0\r\n```\r\n\r\n`, opt =\u003e opt.ErrorOnUnknownConfiguration = true` can be uncommented to see the exception described below.\r\n\r\n### Expected behavior\r\n\r\nBinding to an initialized `IReadOnlyDictionary` works\r\n\r\n```json\r\n{\r\n  \"Options\": {\r\n    \"Enabled\": true,\r\n\r\n    \"Fields\": {\r\n      \"Name\": \"\",\r\n      \"Id\": \"1\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```csharp\r\npublic class MyOptions\r\n{\r\n    public bool Enabled { get; set; } = false;\r\n    public IReadOnlyDictionary\u003cstring, object\u003e Fields { get; set; } = new Dictionary\u003cstring, object\u003e();\r\n}\r\n```\r\n\r\n### Actual behavior\r\n\r\nBinding to an initialized `IReadOnlyDictionary` doesn\u0027t work and it shows up as empty\r\n\r\nWith `ErrorOnUnknownConfiguration = true` the following exception shows up:\r\n```\r\nUnhandled exception. System.InvalidOperationException: \u0027ErrorOnUnknownConfiguration\u0027 was set on the provided BinderOptions, but the following properties were not found on the instance of System.Collections.Generic.Dictionary`2[System.String,System.Object]: \u0027Id\u0027, \u0027Name\u0027\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.BindNonScalar(IConfiguration configuration, Object instance, BinderOptions options)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.BindInstance(Type type, Object instance, IConfiguration config, BinderOptions options)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.GetPropertyValue(PropertyInfo property, Object instance, IConfiguration config, BinderOptions options)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.BindProperty(PropertyInfo property, Object instance, IConfiguration config, BinderOptions options)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.BindNonScalar(IConfiguration configuration, Object instance, BinderOptions options)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.BindInstance(Type type, Object instance, IConfiguration config, BinderOptions options)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(IConfiguration configuration, Object instance, Action`1 configureOptions)\r\n   at Program.\u003cMain\u003e$(String[] args) in C:\\dev\\dotnet\\IReadOnlyDictionaryIssue\\Program.cs:line 10\r\n```\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nOur use case is a library targeting .NET 6 and .NET 8, so not initializing the `IReadOnlyDictionary` is one of the workarounds\r\n```csharp\r\npublic IReadOnlyDictionary\u003cstring, object\u003e Fields { get; set; }\r\n    //#if NET8_0_OR_GREATER\r\n    //    = new Dictionary\u003cstring, object\u003e();\r\n    //#else\r\n    //    = null!;\r\n    //#endif\r\n```\r\n\r\nAnother one would be to avoid using `IReadOnlyDictionary`, but in our case we can\u0027t change our API surface like that.\r\n\r\n**Can you think of any other workaround that doesn\u0027t imply _pinky promising_ that the property will be initialized somewhere?**\r\n\r\n### Configuration\r\n\r\n.NET SDK `6.0.424`, .NET runtime `Microsoft.NETCore.App 6.0.32`\r\n\r\n```xml\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"6.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"6.0.0\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.Extensions.Options.ConfigurationExtensions\" Version=\"6.0.0\" /\u003e\r\n```\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiNEIgw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6HSdy2",
                                           "createdAt":  "2024-08-05T19:29:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I believe we improved a lot of the handling of pre-initialized collections in 7.0 with https://github.com/dotnet/runtime/pull/81050 and https://github.com/dotnet/runtime/pull/81384.  Sounds like you\u0027ve found one of those cases.  cc @tarekgh \r\n\r\nWhy not just reference the 8.0 package if it has the feature you want?",
                                           "updatedAt":  "2024-08-05T19:29:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HTnET",
                                           "createdAt":  "2024-08-05T23:04:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eduherminio",
                                           "body":  "\u003e Why not just reference the 8.0 package if it has the feature you want?\r\n\r\nWe\u0027re facing this issue in an internal library, and some of the services using it reported issues with `DependencyInjection.Abstractions` v8 transitive dependency when referencing 8.0 packages, so we\u0027re stuck with 6.0 for now.",
                                           "updatedAt":  "2024-08-05T23:04:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6I0QiD",
                                           "createdAt":  "2024-08-18T21:32:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eduherminio",
                                           "body":  "This same issue also exists with `IReadOnlyList\u003cT\u003e` and `IReadOnlySet\u003cT\u003e`.",
                                           "updatedAt":  "2024-08-18T21:32:17Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[.NET 6] Binding to non-null `IReadOnlyDictionary` doesn\u0027t work",
        "labels":  [
                       "question",
                       "area-Extensions-Configuration",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107247",
        "createdAt":  "2024-09-02T08:19:31Z",
        "number":  107247,
        "author":  "bart-vmware",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODC2Pqw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-09-02T13:24:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "plachta11b",
                                            "createdAt":  "2025-05-26T14:06:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Sidonivs",
                                            "createdAt":  "2025-05-27T08:48:01Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-07-26T10:50:56Z",
        "body":  "### Description\r\n\r\nWhen binding a configuration section to a derived class that overrides a virtual property, the `[ConfigurationKeyName(\"alternate-name\")]` annotation on the derived property is not honored.\r\n\r\n### Reproduction Steps\r\n\r\n```c#\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nvar configuration = new ConfigurationBuilder()\r\n    .AddInMemoryCollection(new Dictionary\u003cstring, string?\u003e\r\n    {\r\n        [\"root:alternate-name\"] = \"some\"\r\n    })\r\n    .Build();\r\n\r\nvar derived = new Derived();\r\n\r\nvar section = configuration.GetSection(\"root\");\r\nsection.Bind(derived);\r\n\r\n// Prints \"Name=\" instead of \"Name=some\"\r\nConsole.WriteLine($\"Name={derived.Name}\");\r\n\r\npublic class Base\r\n{\r\n    public virtual string? Name { get; set; }\r\n}\r\n\r\npublic class Derived : Base\r\n{\r\n    [ConfigurationKeyName(\"alternate-name\")]\r\n    public override string? Name { get; set; }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe alternate configuration key name in `[ConfigurationKeyName]` on the derived property is honored.\r\n\r\n### Actual behavior\r\n\r\nThe alternate configuration key name in `[ConfigurationKeyName]` on the derived property is ignored.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n```\r\ndotnet --info\r\n.NET SDK:\r\n Version:           8.0.401\r\n Commit:            811edcc344\r\n Workload version:  8.0.400-manifests.57f7c351\r\n MSBuild version:   17.11.4+37eb419ad\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22631\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.401\\\r\n\r\n.NET workloads installed:\r\nConfigured to use loose manifests when installing new manifests.\r\n [aspire]\r\n   Installation Source: SDK 8.0.400, VS 17.11.35222.181\r\n   Manifest Version:    8.2.0/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.aspire\\8.2.0\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n\r\nHost:\r\n  Version:      8.0.8\r\n  Architecture: x64\r\n  Commit:       08338fcaa5\r\n\r\n.NET SDKs installed:\r\n  8.0.400 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.33 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.33 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 6.0.33 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n```\r\n\r\n### Other information\r\n\r\nI\u0027ve traced this down to [ConfigurationBinder.GetAllProperties](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Configuration.Binder/src/ConfigurationBinder.cs#L1049-L1056):\r\n```c#\r\n// if the property is virtual, only add the base-most definition so\r\n// overridden properties aren\u0027t duplicated in the list.\r\nMethodInfo? setMethod = property.GetSetMethod(true);\r\n\r\nif (setMethod is null || !setMethod.IsVirtual || setMethod == setMethod.GetBaseDefinition())\r\n{\r\n    allProperties.Add(property);\r\n}\r\n```\r\n\r\nBecause the derived `PropertyInfo` is not being added, [ConfigurationBinder.GetPropertyName](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Configuration.Binder/src/ConfigurationBinder.cs#L1105-L1108) won\u0027t find the attribute:\r\n```c#\r\n// Check for a custom property name used for configuration key binding\r\nforeach (var attributeData in property.GetCustomAttributesData())\r\n{\r\n    if (attributeData.AttributeType != typeof(ConfigurationKeyNameAttribute))\r\n    {\r\n        continue;\r\n    }\r\n\r\n    // ....\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiochdg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6KhyF2",
                                           "createdAt":  "2024-09-02T08:19:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-02T08:19:53Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ConfigurationBinder ignores [ConfigurationKeyName] on derived type",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107251",
        "createdAt":  "2024-09-02T09:27:20Z",
        "number":  107251,
        "author":  "ZzZombo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-02T21:11:40Z",
        "body":  "### Background and motivation\r\n\r\nIn our case we\u0027d like to use an ordered dictionary for storing the parsed configuration. However, it\u0027s currently not feasible as the underlying implementation manages this entirely behind the scenes w/ no clean way to influence it. We ended up subclassing `XmlConfigurationProvider` in order to override the `Load()` family of methods and copy-paste the code from .NET source, with the only change to populate an ordered dictionary instead of the regular one. But much of the needed code is not exposed to outside assemblies, meaning that we had to find a way to access the internals from our code. We for now settled on selectively publicizing the members we needed (11 entries with varying degrees of granularity). The most problematic were the `SR` string constants used in the localized error messages, as there are several different source definitions of the symbol, causing immense confusion w/o a clear recourse. We ended up copying them too where we couldn\u0027t resolve the conflicts.\r\n\r\nThe order is important because some of the configuration settings may trigger side effects when set and so it matters for correct program execution. The customer has also asked to keep the configuration files largely intact when writing modified configuration back to disk, so we needed to preserve the order of existing entries.\r\n\r\n### API Proposal\r\n\r\nWe do not have a clear API in mind. I personally think that it should be possible to use the concrete instance of `ConfigurationProvider.Data` when populating the entries within `XmlStreamConfigurationProvider.Read()`, possibly it could take an additional `IDictionary\u003c,\u003e` parameter. Then our subclass could just instantiate the proper concrete dictionary instance in the constructor once. The rest of the code should also preserve the custom provided instance instead of the generic one, as there are several places where it initializes a brand new `Dictionary\u003c,\u003e` instance.\r\n\r\n```csharp\r\nXmlStreamConfigurationProvider.Read(Stream stream, XmlDocumentDecryptor decryptor, IDictionary\u003cstring, string?\u003e data)\r\n```\r\n\r\n### API Usage\r\n\r\n```csharp\r\nclass OrderedXmlProvider: XmlConfigurationProvider {\r\n\tOrderedXmlProvider() =\u003e this.Data = new OrderedDictionary\u003cstring, string\u003e();\r\n}\r\n\r\n// The underlying `XmlStreamConfigurationProvider.Read()` is passed the value of `this.Data` as the dictionary to use. If it is `null` then it may instantiate `Dictionary\u003cstring, string\u003e` instead.\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nWith the fresh addition of a build-in ordered dictionary implementation in .NET 9, this issue could be solved by using it as the backing store of parsed configuration; I doubt it may have any implications because nobody should rely on any order with the currently used `Dictionary\u003c,\u003e`; I think it has merit outside of our use case to make it the default, at least I can\u0027t think of downside for doing so for other user code. Another possibility is to open up the involved classes for easier subclassing in user code, although it would still also require a certain level of refactoring because as it stands currently, `XmlStreamConfigurationProvider.Read()` will not be going to cooperate with the goal of populating the user-provided dictionary type/instance as is.\r\n\r\n### Risks\r\n\r\n* There shouldn\u0027t be any in the first approach as it should be easy to fallback to using the regular dictionary if it\u0027s not set explicitly from within `XmlConfigurationProvider`; `XmlStreamConfigurationProvider.Read()` could be given a new overload taking the user-provided dictionary instead of creating one itself, so no public API is affected negatively. \r\n* The second should have no negative changes, because of the non-determenistic key order in `Dictionary\u003c,\u003e` nobody should have relied on any particular order of entries, and the used API return/make use of `IDictionary\u003c,\u003e` rather than a concrete type.\r\n* The third should probably be the most challenging to get right.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiolttw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6KiW23",
                                           "createdAt":  "2024-09-02T09:27:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-02T09:27:52Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: Use user-provided `IDictionary\u003cTK, TV\u003e` instance in `Microsoft.Extensions.Configuration.Xml.XmlConfigurationProvider` ",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107413",
        "createdAt":  "2024-09-05T17:36:46Z",
        "number":  107413,
        "author":  "carlossanlop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T03:02:16Z",
        "body":  "## Build Information\r\n\r\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=796437\r\nBuild error leg or test failing: Microsoft.Extensions.Configuration.Binder.Tests\r\n\r\n## Error Message\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\" : \"ConfigurationBinderTests.cs(769,0)\",\r\n  \"BuildRetry\" : false,\r\n  \"ExcludeConsoleLog\" : false\r\n}\r\n```\r\n\r\n- Found in an unrelated PR https://github.com/dotnet/runtime/pull/107161\r\n- Queue: `Build Libraries Test Run checked coreclr windows x64 Release`\r\n- Job result: https://dev.azure.com/dnceng-public/public/_build/results?buildId=796437\u0026view=logs\u0026j=51e4640a-c078-5be6-cc1b-f971e75d762f\u0026t=a795459e-9f5a-52e6-9047-d38ac6fe5fb4\u0026l=56\r\n- Log file: https://helixre107v0xd1eu3ibi6ka.blob.core.windows.net/dotnet-runtime-refs-pull-107161-merge-7fa52758a6084b85a1/Microsoft.Extensions.Configuration.Binder.Tests/1/console.1e5e9a94.log?helixlogtype=result\r\n- Output:\r\n```\r\n    Microsoft.Extensions.Configuration.Binder.Tests.ConfigurationBinderTests.BindCanReadStaticProperty [FAIL]\r\n      Assert.Equal() Failure\r\n                \u0019 (pos 0)\r\n      Expected: other stuff\r\n      Actual:   stuff\r\n                \u0018 (pos 0)\r\n      Stack Trace:\r\n        /_/src/libraries/Microsoft.Extensions.Configuration.Binder/tests/Common/ConfigurationBinderTests.cs(769,0): at Microsoft.Extensions.Configuration.Binder.Tests.ConfigurationBinderTests.BindCanReadStaticProperty()\r\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs(57,0): at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=796437\r\n**Error message validated:** `[ConfigurationBinderTests.cs(769,0)`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 9/5/2024 5:37:09 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiwPwTQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6LA_BN",
                                           "createdAt":  "2024-09-05T17:37:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-05T17:37:09Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[8.0] Test assert failure in Microsoft.Extensions.Configuration.Binder.Tests.ConfigurationBinderTests.BindCanReadStaticProperty",
        "labels":  [
                       "test-failure",
                       "os-windows",
                       "arch-x64",
                       "runtime-coreclr",
                       "area-Extensions-Configuration",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107470",
        "createdAt":  "2024-09-06T15:04:12Z",
        "number":  107470,
        "author":  "philipborg",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-09T12:42:49Z",
        "body":  "### Description\r\n\r\nThe XML-Doc says_\r\n`\u003creturns\u003eAn \u003csee cref=\"IChangeToken\"/\u003e token if this provider supports change tracking, \u003csee langword=\"null\"/\u003e otherwise.\u003c/returns\u003e`\r\nwhile the return type annotation claims that it shouldn\u0027t return null, directly contradicting the XML-Doc.\r\n\r\n### Reproduction Steps\r\n\r\nRead this https://github.com/dotnet/runtime/blob/d4601d390b6ca9177d62a5ac29b74d30cc16d63d/src/libraries/Microsoft.Extensions.Configuration.Abstractions/src/IConfigurationProvider.cs#L32-L33\r\n\r\n### Expected behavior\r\n\r\nThe nullable annotation is consistent with the XML-Doc.\r\n\r\n### Actual behavior\r\n\r\nThe nullable annotation contradicts the XML-Doc.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi1tl3w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6LI4XV",
                                           "createdAt":  "2024-09-06T15:55:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-06T15:55:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LJEac",
                                           "createdAt":  "2024-09-06T16:24:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Looking at the implementations of `GetReloadToken`, this method never returns `null`. We may need to fix the Xml-doc and the public doc too. The [doc of IConfiguration](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.iconfiguration.getreloadtoken?view=net-8.0#definition) seems correct but the [Xml-doc](https://source.dot.net/#Microsoft.Extensions.Configuration.Abstractions/IConfiguration.cs,41) seems not.\r\n\r\n@philipborg are you interested to submit a PR to fix the Xml-doc and the public doc too?",
                                           "updatedAt":  "2024-09-06T16:24:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LW2Xf",
                                           "createdAt":  "2024-09-09T12:42:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODxiwAQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2024-09-09T15:44:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "philipborg",
                                           "body":  "@tarekgh I could make time to fix it sometime during the week.",
                                           "updatedAt":  "2024-09-09T12:42:48Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "IConfigurationProvider.GetReloadToken nullable annotation",
        "labels":  [
                       "documentation",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107856",
        "createdAt":  "2024-09-16T09:59:47Z",
        "number":  107856,
        "author":  "RichardD2",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC90fbA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shmuelie",
                                            "createdAt":  "2024-11-09T23:37:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cfbao",
                                            "createdAt":  "2024-11-29T19:06:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aromaa",
                                            "createdAt":  "2024-12-23T19:26:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wokket",
                                            "createdAt":  "2025-01-02T02:14:22Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-07-26T10:50:40Z",
        "body":  "### Description\n\nI am trying to migration some (working) configuration code to use the new configuration source binding generator. However, the source generator never initializes the properties of the configuration object, and no warning or error is generated to highlight the issue.\n\n### Reproduction Steps\n\nConfiguration section:\r\n\r\n```\r\npublic class SqlServerSettings\r\n{\r\n    public int? CompatibilityLevel { get; init; }\r\n}\r\n```\r\n\r\nUsage:\r\n\r\n```\r\nprivate static int? GetCompatibilityLevel(IConfiguration configuration)\r\n{\r\n    return configuration.GetSection(\"SqlServer\").Get\u003cSqlServerSettings\u003e()?.CompatibilityLevel;\r\n}\r\n```\r\n\r\nappSettings.json:\r\n\r\n```\r\n{\r\n    \"SqlServer\": {\r\n        \"CompatibilityLevel\": 130\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\nIdeally, `GetCompatibilityLevel` should return `130` _(probably impossible)_.\r\n\r\nAlternatively, a compiler warning / error should be issued to highlight the fact that the source generator cannot set `init`-only properties.\n\n### Actual behavior\n\n`GetCompatibilityLevel` returns `0`.\r\n\r\nThe generated `BindCore` method does not attempt to set any properties:\r\n\r\n```\r\npublic static void BindCore(IConfiguration configuration, ref SqlServerSettings instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)\r\n{\r\n    ValidateConfigurationKeys(typeof(SqlServerSettings), s_configKeys_SqlServerSettings, configuration, binderOptions);\r\n}\r\n```\r\n\r\nNo errors or warnings are issued.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nChanging the `init`-only property to a writeable property restores the correct behaviour.\r\n\r\n```\r\npublic class SqlServerSettings\r\n{\r\n    public int? CompatibilityLevel { get; set; }\r\n}\r\n```\r\n\r\n```\r\npublic static void BindCore(IConfiguration configuration, ref SqlServerSettings instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)\r\n{\r\n    ValidateConfigurationKeys(typeof(SqlServerSettings), s_configKeys_SqlServerSettings, configuration, binderOptions);\r\n\r\n    if (configuration[\"CompatibilityLevel\"] is string value2)\r\n    {\r\n        instance.CompatibilityLevel = ParseInt(value2, () =\u003e configuration.GetSection(\"CompatibilityLevel\").Path);\r\n    }\r\n}\r\n```\n\n### Configuration\n\n.NET SDK:\r\n Version:           8.0.400\r\n Commit:            36fe6dda56\r\n Workload version:  8.0.400-manifests.6c274a57\r\n MSBuild version:   17.11.3+0c8610977\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22631\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.400\\\r\n\r\nVisual Studio 2022 v17.11.3\n\n### Other information\n\nPossibly related to #92638?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtIXh9Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6MOAUZ",
                                           "createdAt":  "2024-09-16T10:00:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-16T10:00:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MQ_eV",
                                           "createdAt":  "2024-09-16T15:37:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Similar issue to https://github.com/dotnet/runtime/issues/95006",
                                           "updatedAt":  "2024-09-16T15:37:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YugLg",
                                           "createdAt":  "2024-12-26T08:48:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "If the type does not have a parameterless constructor, and the source generator uses a constructor with parameters, then it correctly initialises the init-only properties.  I posted an example of that in \u003chttps://github.com/dotnet/runtime/issues/110909#issuecomment-2559926531\u003e.  I think the source generator should be changed to use ObjectInstantiationStrategy.ParameterizedConstructor whenever there are any init-only properties, even if there is a parameterless constructor.\n\n\u003chttps://github.com/dotnet/runtime/blob/9d5a6a9aa463d6d10b0b0ba6d5982cc82f363dc3/src/libraries/Microsoft.Extensions.Configuration.Binder/gen/ConfigurationBindingGenerator.Parser.cs#L699\u003e",
                                           "updatedAt":  "2024-12-26T08:48:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60heH1",
                                           "createdAt":  "2025-07-02T17:29:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "smophat7",
                                           "body":  "Duplicate issue #117247 identifies some relevant locations in the source generator code:\n\u003e The source generator decides how to instantiate an object based on the type\u0027s determined `ObjectInstantiationStrategy`. If the strategy is `ObjectInstantiationStrategy.ParameterizedConstructor`, then an initialize method is generated and used. If the strategy is `ObjectInstantiationStrategy.ParameterlessConstructor`, then no initialize method is generated.\n\u003e \n\u003e This boils down to a few places in the `ConfigurationBindingGenerator`:\n\u003e 1. [`ConfigurationBindingGenerator.Emitter.EmitInitializeMethods`](https://github.com/dotnet/runtime/blob/1584e493603cfc4e9b36b77d6d4afe97de6363f9/src/libraries/Microsoft.Extensions.Configuration.Binder/gen/Emitter/CoreBindingHelpers.cs#L306): An initialize method (e.g., `InitializeExampleOptions`) is only generated for registered types.\n\u003e 2. [`ConfigurationBindingGenerator.Builder.TryRegisterTransitiveTypesForMethodGen`](https://github.com/dotnet/runtime/blob/c02569bcf67543806f6b0ba8923ff3a313f830f2/src/libraries/Microsoft.Extensions.Configuration.Binder/gen/Specs/BindingHelperInfo.cs#L187): A type is only registered for initialize method generation if its `InstantiationStrategy` is `ObjectInstantiationStrategy.ParameterizedConstructor`.\n\u003e 3. [`ConfigurationBindingGenerator.Parser.CreateObjectSpec`](https://github.com/dotnet/runtime/blob/1584e493603cfc4e9b36b77d6d4afe97de6363f9/src/libraries/Microsoft.Extensions.Configuration.Binder/gen/ConfigurationBindingGenerator.Parser.cs#L637): The `InstantiationStrategy` for a type is set to either `ObjectInstantiationStrategy.ParameterlessConstructor` or `ObjectInstantiationStrategy.ParameterizedConstructor` depending on the number of parameters in the chosen constructor. The chosen constructor is determined by the constructors available and [whether or not the type is a value type](https://github.com/dotnet/runtime/blob/1584e493603cfc4e9b36b77d6d4afe97de6363f9/src/libraries/Microsoft.Extensions.Configuration.Binder/gen/ConfigurationBindingGenerator.Parser.cs#L624).\n\u003e 4. [`ConfigurationBindingGenerator.Emitter.EmitObjectInit`](https://github.com/dotnet/runtime/blob/1584e493603cfc4e9b36b77d6d4afe97de6363f9/src/libraries/Microsoft.Extensions.Configuration.Binder/gen/Emitter/CoreBindingHelpers.cs#L1137): The `ObjectInstantiationStrategy` for the type dictates whether or not a generated initialize method is used to instantiate the object.\n\u003e \n\u003e So, the source generator would need to be modified to also generate and use an initializer method for types whose chosen construtor is parameterless. This could be restricted further to only generate and use an initializer method for parameterless constructor types that also have init-only properties, but that may not be required (for example, see [this](https://github.com/dotnet/runtime/blob/1584e493603cfc4e9b36b77d6d4afe97de6363f9/src/libraries/Microsoft.Extensions.Configuration.Binder/gen/Emitter/CoreBindingHelpers.cs#L359) method, which already just generates a regular non-initializer `new()`-style invocation if there are no init-only properties for the type).",
                                           "updatedAt":  "2025-07-02T17:29:54Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "ConfigurationBinding source generator ignores init-only properties without warning",
        "labels":  [
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108111",
        "createdAt":  "2024-09-22T16:40:38Z",
        "number":  108111,
        "author":  "rmannibucau",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-23T22:15:33Z",
        "body":  "### Background and motivation\n\nSupporting AOT for the binder API is done using a source generator but dotnet compiler has only 1 (2) passes so it makes it impossible to use it within another generator forcing the other generator to reimplement pretty much the same logic.\r\n\r\nIt would be neat to have a middle-ground solution.\n\n### API Proposal\n\n```csharp\r\nnamespace Whatever;\r\n\r\n[ReflectionLessBoundableConfiguration]\r\npublic class ConfigClass\r\n{\r\n//...\r\n}\r\n```\r\n\r\n\r\nside note: i\u0027m not fan of the name but guess it is sufficient to get started, what is important is to have a marker attribute\r\n\r\nThen it would generate a ConfigClass.Binder class which would be usable as binder (ConfigClass.Binder.Bind(configuration, instance))\n\n### API Usage\n\n```csharp\r\n// Fancy the value\r\nvar c = new MyFancyCollection\u003cint\u003e();\r\nConfigClass.Binder.Bind(new ConfigurationBuilder()...., c)\r\n```\r\n\n\n### Alternative Designs\n\nEnable to call the generator from another generator (but it is fishy as design and will lead to a spaghetti solution)\n\n### Risks\n\nno real risk there (except if you already have a binder nested class but if so you don\u0027t use this API which is new so risk is really 0)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjScG-Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6NE4E7",
                                           "createdAt":  "2024-09-22T16:40:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-22T16:40:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NJTYa",
                                           "createdAt":  "2024-09-23T12:08:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "This would have to be \u003ccode\u003epublic \u003cins\u003epartial\u003c/ins\u003e class ConfigClass\u003c/code\u003e, right?  So that the source generator can add another part that defines the nested class ConfigClass.Binder.\r\n\r\nA potential problem is if the class already has a property named `Binder`; then it cannot have a nested class with the same name.  Could be solved with `[ReflectionLessBoundableConfiguration(NestedTypeName = \"AlternativeBinder\")]`.",
                                           "updatedAt":  "2024-09-23T12:08:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NJaIP",
                                           "createdAt":  "2024-09-23T12:20:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmannibucau",
                                           "body":  "@KalleOlaviNiemitalo not sure it needs partial, if it generates a nested class by convention this is sufficient and less dev work. It can be needed for cases you want to explicitly use that factory from user code (and not generators as my case).\r\nFor the conflicting name issue I guess starting with what I mentionned, ie there will be no issue and not a single case where it can happen, is sufficient (since it is a new API which enables explicitly the feature it shouldn\u0027t occur), but no issue to enable to name it as you proposed too.",
                                           "updatedAt":  "2024-09-23T12:20:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NJbNE",
                                           "createdAt":  "2024-09-23T12:22:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I don\u0027t see how the source generator can inject the nested class if the outer class is not `partial`.  What kind of source code would it generate?",
                                           "updatedAt":  "2024-09-23T12:22:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NJiq4",
                                           "createdAt":  "2024-09-23T12:35:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmannibucau",
                                           "body":  "@KalleOlaviNiemitalo what I had in mind was something along the line `var conf = MyModel.Binder.Bind(iconfiguration, new MyModel());` or even the shortcut `var conf = MyModel.Binder.Bind(iconfiguration);`. If you want to to explicit the config class you need to add it in the attribute (which must be on the model not the reflectionless \"factory\" to ensure the classes are identifiable, in particular if you enable to break the binder convention).\r\n\r\nside note: happy to get another solution, the current source generator is really good, it just doesn\u0027t work with other source generators so a more elegant solution would be welcomed - even if it means using dotnet 10 ;).",
                                           "updatedAt":  "2024-09-23T12:35:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NJqQR",
                                           "createdAt":  "2024-09-23T12:47:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I mean, if the application source code contains\r\n\r\n```csharp\r\n[ReflectionLessBoundableConfiguration]\r\npublic class ConfigClass\r\n{\r\n    public string Property1 { get; set; }\r\n}\r\n```\r\n\r\nand the source generator generates code like\r\n\r\n```csharp\r\npartial class ConfigClass\r\n{\r\n    public class Binder\r\n    {\r\n        public static ConfigClass Bind(IConfiguration configuration, ConfigClass? instance)\r\n        {\r\n            instance ??= new ConfigClass();\r\n            instance.Property1 = configuration[\"Property1\"];\r\n            return instance;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nthen the build will fail:\r\n\r\n\u003e error CS0260: Missing partial modifier on declaration of type \u0027ConfigClass\u0027; another partial declaration of this type exists\r\n",
                                           "updatedAt":  "2024-09-23T12:47:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NJwb5",
                                           "createdAt":  "2024-09-23T12:55:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rmannibucau",
                                           "body":  "@KalleOlaviNiemitalo I see, had more a static class in mind and thought the partial was avoidable there but if not it is ok for me to add partial for that need, good catch.",
                                           "updatedAt":  "2024-09-23T12:55:59Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[API Proposal]: [ReflectionLessBoundableConfiguration]",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109588",
        "createdAt":  "2024-10-23T10:27:11Z",
        "number":  109588,
        "author":  "ckuetbach",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC97-8Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "boba2fett",
                                            "createdAt":  "2024-10-25T06:44:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marcopaul79",
                                            "createdAt":  "2024-11-15T10:17:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bastianschaffeld",
                                            "createdAt":  "2025-01-07T14:51:28Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-11-06T20:05:37Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nIn our deployments, we use multiple folders for different configuration values.\n\n```\n/var/configs/database1/connectionString\n/var/configs/database2/connectionString\n```\n\nThe KeyPerFile mechanism seems unable to load data recursively and cannot add a prefix to each key named by a file.\n\nWe cannot change some configuration names, such as “connectionString”. If we want to use two different databases, the keys may conflict.\n\n### Describe the solution you\u0027d like\n\nI\u0027d like to add a custom prefix to every variable \n\n```\nnew ConfigurationBuilder()\n    .AddKeyPerFile(\"/var/configs/database1\", optional: true, keyPrefix: \"db1:\")\n    .AddKeyPerFile(\"/var/configs/database2\", optional: true, keyPrefix: \"canary:\");\n\n```\nUsing following file structure:\n```\n/var/configs/database1/connectionString\n/var/configs/database1/someValue\n\n/var/configs/database2/connectionString\n/var/configs/database2/someOtherValue\n\n```\nThe configuration will now have following keys:\n\n```\ndb1:connectionString\ndb1:someValue\ncanary:connectionString\ncanary:someOtherValue\n```\nAs an alternative for the same structure above: \n\n```\nnew ConfigurationBuilder()\n    .AddKeyPerFile(\"/var/configs\", optional: true, recursive: true);\n```\nWould lead to following configuration.\n```\ndatabase1:connectionString\ndatabase1:someValue\ndatabase2:connectionString\ndatabase2:someOtherValue\n```\n\n### Additional context\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkqlvgQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6SqW-B",
                                           "createdAt":  "2024-11-06T19:15:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-06T19:15:16Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Enable the KeyForFile-Configuration to handle multiple files with the same name but different locations",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109199",
        "createdAt":  "2024-10-24T21:23:32Z",
        "number":  109199,
        "author":  "stasberkov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODA84yg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2024-11-05T18:23:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StephenHodgson",
                                            "createdAt":  "2024-12-11T15:52:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Varorbc",
                                            "createdAt":  "2025-04-08T00:06:37Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-12-11T15:57:27Z",
        "body":  "### Background and motivation\n\nCurrently, ASP.NET Core supports configuration providers for JSON, XML, and INI files. However, YAML is a popular configuration format due to its readability and support for complex data structures. Adding a YAML configuration provider would enhance the flexibility and usability of ASP.NET Core applications, especially for developers who prefer or require YAML for their configuration needs.\n\nBenefits:\n\n- Increased flexibility in configuration file formats.\n- Improved readability and maintainability of configuration files for developers who prefer YAML.\n- Enhanced support for complex configuration scenarios.\n\nYAML is widely used in various applications and tools, such as Kubernetes and Ansible, making it a valuable addition to the ASP.NET Core configuration system. By supporting YAML, ASP.NET Core can better align with the preferences and needs of a broader developer community.\n\n### API Proposal\n\n```csharp\nbuilder.Configuration\n    .AddYamlFile(\"appsettings.yaml\", optional: false, reloadOnChange: true)\n    .AddYamlFile($\"appsettings.{builder.Environment.EnvironmentName}.yaml\", optional: true, reloadOnChange: true);\n```\n\n\n### API Usage\n\n```csharp\nbuilder.Configuration\n    .AddYamlFile(\"appsettings.yaml\", optional: false, reloadOnChange: true)\n    .AddYamlFile($\"appsettings.{builder.Environment.EnvironmentName}.yaml\", optional: true, reloadOnChange: true);\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOly4xxg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6RN_F_",
                                           "createdAt":  "2024-10-24T21:23:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-24T21:23:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ROMbF",
                                           "createdAt":  "2024-10-24T22:04:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD-lupw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "StephenHodgson",
                                                                               "createdAt":  "2024-12-11T15:51:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "Currently, runtime libraries do not offer built-in support for YAML serialization, which is the prerequisite of this feature request. However, there are community-driven YAML serialization packages like YamlDotNet, which serve as the foundation for various extensions, such as NetEscapades.Configuration.Yaml (https://www.nuget.org/packages/NetEscapades.Configuration.Yaml) and SharpDotYaml.Extensions.Configuration (https://www.nuget.org/packages/SharpDotYaml.Extensions.Configuration). Do these options meet the requirements of your use case?",
                                           "updatedAt":  "2024-10-24T22:04:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RVNUo",
                                           "createdAt":  "2024-10-25T16:23:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD-luvQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StephenHodgson",
                                                                               "createdAt":  "2024-12-11T15:51:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stasberkov",
                                           "body":  "Yeah, I saw these libs. I would like to minimize dependency on 3rd party libs for core functionality. I believe configuration is a part of application core.",
                                           "updatedAt":  "2024-10-25T16:23:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RVVUw",
                                           "createdAt":  "2024-10-25T16:38:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "\u003e I would like to minimize dependency on 3rd party libs for core functionality. \n\nSee this discussion https://github.com/dotnet/runtime/issues/83313#issuecomment-1465282960, generally third party libraries is the way to go when it comes to YAML. https://github.com/dotnet/runtime/issues/83313 is the prerequisite, and other similar proposals before that (which were not accepted).",
                                           "updatedAt":  "2024-10-25T16:38:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6XLjHG",
                                           "createdAt":  "2024-12-11T15:55:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenHodgson",
                                           "body":  "As much as I\u0027d love to see a native yaml parser in .net, I think since json is a subset of yaml, probably better to just use the json format for this specific purpose.\n\nThat being said most people prefer yaml for configuration files.",
                                           "updatedAt":  "2024-12-11T15:57:27Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[API Proposal]: YAML configuration provider",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109759",
        "createdAt":  "2024-11-13T00:39:43Z",
        "number":  109759,
        "author":  "ciaozhang",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:54:35Z",
        "body":  "Description\nWhen trying to use the Configuration Binder source generator in Microsoft.IdentityModel.S2S.DstsExtensions project, I\u0027m getting compile errors.\nBranch: https://identitydivision.visualstudio.com/DevEx/_git/Microsoft-IdentityModel-S2S/commit/57acb8a13628371366f73cb0730d3f7abe8a712a?refName=refs%2Fheads%2FXiao%2FTrimDsts\n\nReproduction Steps\nbuild [Microsoft.IdentityModel.S2S.DstsExtensions](https://identitydivision.visualstudio.com/DevEx/_git/Microsoft-IdentityModel-S2S?path=%2Fsrc%2FMicrosoft.IdentityModel.S2S.DstsExtensions\u0026version=GBXiao%2FTrimDsts\u0026_a=contents) project with VS\n\nExpected behavior\nThe project should build successfully.\n\nActual behavior\nThere are 3build errors:\n\n![Image](https://github.com/user-attachments/assets/80ebb385-3341-429e-8a14-7c3611b877d7)\n\nHere is the generated code:\n\nhttps://microsoft-my.sharepoint-df.com/:w:/p/zhangxia/EQOQ4EWvfOdLoTSeUkg552wBEdsfceiutcTixc-Sg_xVgA?e=pOfPuJ\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOk6YsoA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6TWDYM",
                                           "createdAt":  "2024-11-13T00:40:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-13T00:40:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TWXFT",
                                           "createdAt":  "2024-11-13T01:24:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@ciaozhang I didn\u0027t try it yet but maybe it is worth trying the configuration package v9.0.0. We have fixed some issues like https://github.com/dotnet/runtime/issues?q=is%3Aissue%20label%3Aarea-Extensions-Configuration%20label%3Asource-generator%20CredentialDescription.",
                                           "updatedAt":  "2024-11-13T01:24:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TWXJe",
                                           "createdAt":  "2024-11-13T01:24:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "CC @ericstj @eerhardt ",
                                           "updatedAt":  "2024-11-13T01:24:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Tph7O",
                                           "createdAt":  "2024-11-14T18:30:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ciaozhang",
                                           "body":  "@tarekgh I tried configuration package v9.0.0 per @eerhardt suggestion but still get the same error.",
                                           "updatedAt":  "2024-11-14T18:30:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Tpiyg",
                                           "createdAt":  "2024-11-14T18:32:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Thanks @ciaozhang for trying it and letting us know the issue still reproduce. ",
                                           "updatedAt":  "2024-11-14T18:32:26Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Configuration Binder source generator creates namespace ambiguity and not found error",
        "labels":  [
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109904",
        "createdAt":  "2024-11-18T02:00:24Z",
        "number":  109904,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T03:03:13Z",
        "body":  "**Failed in:** [runtime-coreclr libraries-pgo 20241117.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=871724\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=22726266\u0026resultId=100420\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-x64-fullpgo_random_gdv_methodprofiling_only-Windows.10.Amd64.Open\n    - Microsoft.Extensions.Configuration.EnvironmentVariables.Test.EnvironmentVariablesTest.BindingDoesNotThrowIfReloadedDuringBinding\n```\n\n**Error message:**\n```\n System.NullReferenceException : Object reference not set to an instance of an object.\n```\n\n**Stack trace:**\n```\n   at Microsoft.Extensions.Configuration.EnvironmentVariables.Test.EnvironmentVariablesTest.BindingDoesNotThrowIfReloadedDuringBinding() in /_/src/libraries/Microsoft.Extensions.Configuration.EnvironmentVariables/tests/EnvironmentVariablesTest.cs:line 319\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```\n\n\u003c!-- Error message template  --\u003e\n### Known Issue Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": [ \"Microsoft.Extensions.Configuration.EnvironmentVariables.Test.EnvironmentVariablesTest.BindingDoesNotThrowIfReloadedDuringBinding [FAIL]\", \"System.NullReferenceException : Object reference not set to an instance of an object.\"],\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** \r\n**Result validation:** :warning: Provided build not found. Provide a valid build in the \"**Build:** :mag_right:\" line.\r\n**Validation performed at:** 3/26/2025 2:50:26 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1151401](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151401)|dotnet/runtime|[Microsoft.Extensions.Configuration.EnvironmentVariables.Test.EnvironmentVariablesTest.BindingDoesNotThrowIfReloadedDuringBinding](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1151401\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31808148\u0026resultId=101093)|dotnet/runtime#119828|\r\n|[1145565](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145565)|dotnet/runtime|[Microsoft.Extensions.Configuration.EnvironmentVariables.Test.EnvironmentVariablesTest.BindingDoesNotThrowIfReloadedDuringBinding](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145565\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31606882\u0026resultId=100683)|dotnet/runtime#119590|\r\n|[1141821](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141821)|dotnet/runtime|[Microsoft.Extensions.Configuration.EnvironmentVariables.Test.EnvironmentVariablesTest.BindingDoesNotThrowIfReloadedDuringBinding](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141821\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31473660\u0026resultId=101686)|dotnet/runtime#117583|\r\n|[1141761](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141761)|dotnet/runtime|[Microsoft.Extensions.Configuration.EnvironmentVariables.Test.EnvironmentVariablesTest.BindingDoesNotThrowIfReloadedDuringBinding](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1141761\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31470528\u0026resultId=101517)|dotnet/runtime#119052|\r\n|[1134023](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134023)|dotnet/runtime|[Microsoft.Extensions.Configuration.EnvironmentVariables.Test.EnvironmentVariablesTest.BindingDoesNotThrowIfReloadedDuringBinding](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1134023\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31212648\u0026resultId=101392)|dotnet/runtime#119173|\r\n|[1130612](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130612)|dotnet/runtime|[Microsoft.Extensions.Configuration.EnvironmentVariables.Test.EnvironmentVariablesTest.BindingDoesNotThrowIfReloadedDuringBinding](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1130612\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31101800\u0026resultId=101349)|dotnet/runtime#118958|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|1|6|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsXdztw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6UC7jJ",
                                           "createdAt":  "2024-11-18T18:20:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "amanasifkhalid",
                                           "body":  "cc @dotnet/jit-contrib, might be bad codegen",
                                           "updatedAt":  "2024-11-18T18:20:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UC774",
                                           "createdAt":  "2024-11-18T18:21:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT, @jakobbotsch\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-18T18:21:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Vt_mt",
                                           "createdAt":  "2024-12-02T15:33:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "amanasifkhalid",
                                           "body":  "This test has been passing in `runtime-coreclr libraries-pgo` for a few weeks now.",
                                           "updatedAt":  "2024-12-02T15:33:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kGQYc",
                                           "createdAt":  "2025-03-26T02:48:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This failed again in #113872 on net10.0-windows-Debug-x86-coreclr_checked-Windows.10.Amd64.Open (without any jit stress, etc.):\n\n```\n  Starting:    Microsoft.Extensions.Configuration.EnvironmentVariables.Tests (parallel test collections = on [4 threads], stop on fail = off)\n    Microsoft.Extensions.Configuration.EnvironmentVariables.Test.EnvironmentVariablesTest.BindingDoesNotThrowIfReloadedDuringBinding [FAIL]\n      System.NullReferenceException : Object reference not set to an instance of an object.\n      Stack Trace:\n        /_/src/libraries/Microsoft.Extensions.Configuration.EnvironmentVariables/tests/EnvironmentVariablesTest.cs(319,0): at Microsoft.Extensions.Configuration.EnvironmentVariables.Test.EnvironmentVariablesTest.BindingDoesNotThrowIfReloadedDuringBinding()\n           at System.RuntimeMethodHandle.InvokeMethod(ObjectHandleOnStack target, Void** arguments, ObjectHandleOnStack sig, BOOL isConstructor, ObjectHandleOnStack result)\n        /_/src/coreclr/System.Private.CoreLib/src/System/RuntimeHandles.cs(1159,0): at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\n        /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs(36,0): at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\n        /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs(57,0): at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\n  Finished:    Microsoft.Extensions.Configuration.EnvironmentVariables.Tests\n```",
                                           "updatedAt":  "2025-03-26T02:48:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xd3O3",
                                           "createdAt":  "2025-06-16T17:08:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kunalspathak",
                                           "body":  "Failed again on 6/15\n\nhttps://[helixr1107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-heads-main-2edd797575674d92af/Microsoft.Extensions.Configuration.EnvironmentVariables.Tests/1/console.c6c8c18c.log?helixlogtype=result](https://helixr1107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-heads-main-2edd797575674d92af/Microsoft.Extensions.Configuration.EnvironmentVariables.Tests/1/console.c6c8c18c.log?helixlogtype=result)",
                                           "updatedAt":  "2025-06-16T17:08:58Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Test failure: Microsoft.Extensions.Configuration.EnvironmentVariables.Test.EnvironmentVariablesTest.BindingDoesNotThrowIfReloadedDuringBinding",
        "labels":  [
                       "os-windows",
                       "arch-x64",
                       "blocking-clean-ci",
                       "area-Extensions-Configuration",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110051",
        "createdAt":  "2024-11-21T15:23:24Z",
        "number":  110051,
        "author":  "drauch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-26T21:46:47Z",
        "body":  "For internal reasons we create and validate the IConfiguration instance before building hosts. The .NET 6 WebApplicationBuilder lets us register this instance directly at the container:\n```\nvar builder = WebApplicationBuilder.CreateBuilder();\nOurConfigurationUtility.SetUp(builder.Configuration);\n\nbuilder.Services.AddSingleton\u003cIConfiguration\u003e(builder.Configuration);\n \nvar startup = new Startup(builder.Configuration);\nstartup.ConfigureServices(builder.Services);\n \nvar app = builder.Build();\n \nstartup.Configure(app, app.Environment);\n \napp.Run();\n```\nHowever, for our non-web background services we can\u0027t do the same with `HostBuilder`. To our knowledge there is only the `ConfigureAppConfiguration` method which already puts in some defaults and lets you work with a `ConfigurationBuilder` but there is no way to put a finished `IConfiguration` instance in, is there?\n\nBest regards,\nD.R.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlSFt3A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Uh8yk",
                                           "createdAt":  "2024-11-21T18:05:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "You should still be able to register your own singleton instance the exact same way using `ConfigureServices`:\n\n```csharp\n.ConfigureServices((context, services) =\u003e\n{\n    OurConfigurationUtility.SetUp(context.Configuration);\n    \n    services.AddSingleton\u003cIConfiguration\u003e(context.Configuration);\n})\n```\n\nI\u0027m just confused by your usage there... you pass in the `configuration`, and then your method does mutations to it? Regardless... I believe the above should still work, although I\u0027m not sure whether that registration will be overridden by the `Host.Build()` call later.\n\nWhy do you have this external configuration method in the first place?",
                                           "updatedAt":  "2024-11-21T18:05:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ui-23",
                                           "createdAt":  "2024-11-21T20:24:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Can\u0027t you do something like:\n\n\n```C#\nhostBuilder.ConfigureAppConfiguration((context, config) =\u003e\n{\n    config.Sources.Clear(); // Clear existing configuration sources\n    // then add your configuration the config\n});\n```",
                                           "updatedAt":  "2024-11-21T20:24:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VHr-X",
                                           "createdAt":  "2024-11-26T20:06:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD8nSFw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-11-26T20:28:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "drauch",
                                           "body":  "@julealgon : Unfortunately, it looks like the registration of the HostBuilder takes precedences as it is registered _later_ on.\n@tarekgh : I already have an IConfiguration instance, so clearing the sources does not do anything. Except there is a way to put an IConfiguration back in as a configuration source  ... but that sounds like a hack at best.\n\nBest regards,\nD.R.",
                                           "updatedAt":  "2024-11-26T20:06:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VH_nY",
                                           "createdAt":  "2024-11-26T20:44:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e I already have an IConfiguration instance, so clearing the sources does not do anything. Except there is a way to put an IConfiguration back in as a configuration source ... but that sounds like a hack at best.\n\n@drauch you could technically add an inmemory configuration provider and pass your settings from your previously built `IConfiguration`.\n\n```csharp\nhostBuilder.ConfigureAppConfiguration((context, config) =\u003e\n{\n    config.Sources.Clear();\n    config.AddInMemoryCollection(yourPreBuiltConfiguration.AsEnumerable());\n});\n```\n\nI\u0027m not sure how efficient this is, but it should work at least as a temporary workaround for you.",
                                           "updatedAt":  "2024-11-26T20:44:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VIW3c",
                                           "createdAt":  "2024-11-26T21:46:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD81h1g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-11-26T21:48:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "drauch",
                                                                               "createdAt":  "2024-11-28T09:26:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "@julealgon, that doesn\u0027t look compatible with configuration reloading; even if `yourPreBuiltConfiguration.GetReloadToken()` is able to return a reload token that indicates that the configuration has changed, the in-memory collection won\u0027t pass that notification through.\n\nChainedBuilderExtensions.AddConfiguration is better in that respect.",
                                           "updatedAt":  "2024-11-26T21:46:46Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[API Proposal]: Like WebApplicationBuilder allow us to put a finished IConfiugration instance into a HostBuilder",
        "labels":  [
                       "question",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110157",
        "createdAt":  "2024-11-25T17:36:33Z",
        "number":  110157,
        "author":  "OlzhabaevSh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-05T09:11:16Z",
        "body":  "## Issue\n\nIn many applications, it is crucial to have visibility into the configuration system, especially when debugging issues related to configuration loading and changes. \nCurrently, the .NET Configuration system does not provide built-in logging for when a new `ConfigurationProvider` is added or when a configuration provider reads configurations from.\n\n### Details\n\nNot having this feature can mislead the debugging process because configurations often come from various sources such as environment variables, initialization files, multiple appsettings files, etc. \nBy default, there is no built-in mechanism to get a list of all configuration providers and the order in which they are registered in the Dependency Injection (DI) container during runtime. \nThis can be particularly tricky as different configuration values might override each other without clear visibility into the source and order of these configurations.\n\nAdditionally, most of the time, configuration setup can be obtained from a library, and you may not have direct access to the source code to see how the configurations are set up. \nThis lack of visibility can make it challenging to debug and understand the configuration hierarchy and precedence.\n\n## Feature description\n\nAdding built-in logs for next events:\n\n| Event | Fields |\n| --- | --- |\n| IConfigurationProvider added | ConfigProviderName |\n| A config item was read | ConfigProviderName, KeyName, Value |\n\n### Benifits\n\nAdding these logs will help developers:\n\n* Debug configuration-related issues more effectively.\n* Gain insights into the configuration loading process.\n* Ensure that configuration changes are tracked and monitored.\n* Identify and resolve issues related to configuration value overrides.\n* Understand the configuration setup when using third-party libraries without direct access to their source code.\n\n## Risks\n\nDuring the implementation of this feature, we should consider that some configuration keys may contain sensitive or restricted values.\nThese values could include passwords, connection strings, API keys, and other confidential information that should not be exposed in logs.\nLogging such sensitive information could lead to security vulnerabilities and data breaches.\n\n### Mitigation Strategies\n\n1. Do Not Log Actual Values\n2. Sanitize Values\n\n#### Do Not Log Actual Values\n\nAvoid logging the actual values of configuration keys. Instead, log only the key names and the source of the configuration. This approach ensures that no sensitive information is exposed in the logs.\n\n#### Sanitize Values\n\nImplement logic to sanitize certain values before logging. For example, you can mask or redact values that contain sensitive information.\nSpecifically, you can:\n\n* Sanitize all values from keys that contain \"connectionstring\" or \"secret\" in their names.\n* Apply a general sanitization rule to mask any value that matches a pattern commonly used for sensitive data (e.g., passwords, API keys).\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoPNoOQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6U7kWC",
                                           "createdAt":  "2024-11-25T17:37:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-25T17:37:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6g82g5",
                                           "createdAt":  "2025-03-05T09:11:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Microsoft.Extensions.Logging.Configuration seems somewhat a problem here: if that is used, then the configuration is read while logging is being initialized.  So you cannot just inject an ILogger to the ConfigurationRoot constructor.\n\nConfiguration could report its events via System.Diagnostics.DiagnosticSource, though.  The application would then be able to listen to those events before logging has been initialized.",
                                           "updatedAt":  "2025-03-05T09:11:14Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Request to Add Logging for Configuration Events",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111022",
        "createdAt":  "2025-01-01T16:55:05Z",
        "number":  111022,
        "author":  "codeaphex",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-27T13:32:57Z",
        "body":  "### Description\n\nIf I try to resolve the IConfiguration inside a loaded plugin, the serviceProvider fails to resolve the instance, even if it is listed with its resolve-function inside the service descriptors.\n\nI basically followed this tutorial: https://learn.microsoft.com/en-us/dotnet/core/tutorials/creating-app-with-plugin-support\nChanged the console app to use GenericHost to enable DI and Configuration usage.\nAnd tried to access the IConfiguration instance inside the plugin.\n\n~~Relevant output from StackTrace: **Method System.Reflection.MemberInfo.get_CustomAttributes cannot be called in this context**~~ actually not related 🥴\n\nAdditionalInfo:\nIConfiguration is listed in the ServiceDescriptors with\n- Lifetime = Singleton\n- ServiceType = \"Microsoft.Extensions.Configuration.IConfiguration\"\n- ImplementationFactory = Microsoft.Extensions.Configuration.IConfiguration \u003cPopulateServiceCollection\u003eb__0(System.IServiceProvider)\n\nI also can not create a Scope from the injected ServiceProvider.\n\n### Reproduction Steps\n\n1. Clone the repro: \u003chttps://github.com/codeaphex/pluginIConfigRepro\u003e\n2. Enable either the direct constructor injection of IConfiguration, or retrieval of IConfiguration from the serviceProvider in \u003chttps://github.com/codeaphex/pluginIConfigRepro/blob/main/HelloPlugin/HelloCommand.cs\u003e\n\n\n### Expected behavior\n\nIConfiguration should be resolved inside the plugin just like the service provider.\n\n\n### Actual behavior\n\n1. Get an error indicating that no type has been registered for IConfiguration\n2. Stack Trace shows some error saying: Method System.Reflection.MemberInfo.get_CustomAttributes cannot be called in this context\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 9\nWindows 11\nx64\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOm-dQuw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ZAwNU",
                                           "createdAt":  "2025-01-01T18:54:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEAwGaw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2025-01-01T19:59:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "codeaphex",
                                                                               "createdAt":  "2025-01-01T21:41:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I think the problem is that the plugin has its own copy of the Microsoft.Extensions.Configuration.Abstractions assembly, and PluginLoadContext resolves to that, so there are two copies of the IConfiguration type.\n\nDoes it work if you change the package references in HelloPlugin to these (i.e. use the \\*.Abstractions packages and exclude runtime assets):\n\n```XML\n  \u003cItemGroup\u003e\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration.Abstractions\" Version=\"9.0.0\"\u003e \n      \u003cExcludeAssets\u003eruntime\u003c/ExcludeAssets\u003e\n    \u003c/PackageReference\u003e\n    \u003cPackageReference Include=\"Microsoft.Extensions.DependencyInjection.Abstractions\" Version=\"9.0.0\"\u003e\n      \u003cExcludeAssets\u003eruntime\u003c/ExcludeAssets\u003e\n    \u003c/PackageReference\u003e\n  \u003c/ItemGroup\u003e\n```\n\nAlternatively, I guess you could change PluginLoadContext to force the plugin to use the application\u0027s copies of those assemblies; but it seems better to exclude the assets so that they are not unnecessarily deployed with the plugin.",
                                           "updatedAt":  "2025-01-01T18:54:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZA2KJ",
                                           "createdAt":  "2025-01-01T20:26:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e Relevant output from StackTrace: **Method System.Reflection.MemberInfo.get_CustomAttributes cannot be called in this context**\n\nI didn\u0027t find the \"cannot be called in this context\" message anywhere in the .NET Runtime source code.",
                                           "updatedAt":  "2025-01-01T20:26:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZA7dt",
                                           "createdAt":  "2025-01-01T21:52:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "codeaphex",
                                           "body":  "\u003e Does it work if you change the package references in HelloPlugin to these (i.e. use the *.Abstractions packages and exclude runtime assets):\n\nAwesome, this fixed it. This seems to be explained in the docs somehow, but was confused as the serviceType still showed as registered with the serviceProvider. Didnt think about having it twice and then not receiving any.",
                                           "updatedAt":  "2025-01-01T21:52:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZBM2r",
                                           "createdAt":  "2025-01-02T02:15:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEA1DYA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "codeaphex",
                                                                               "createdAt":  "2025-01-02T16:12:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Perhaps the DI container implementation could be changed so that, if it is going to throw an exception because a service is required but has not been registered, then it would check if a service has been registered for an identically-named but distinct type, and change Exception.Message to mention that as a probable reason of the error.",
                                           "updatedAt":  "2025-01-02T07:23:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZENy0",
                                           "createdAt":  "2025-01-02T16:12:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "codeaphex",
                                           "body":  "\u003e Perhaps the DI container implementation could be changed so that, if it is going to throw an exception because a service is required but has not been registered, then it would check if a service has been registered for an identically-named but distinct type, and change Exception.Message to mention that as a probable reason of the error.\n\nIf I understand you correctly this would be a reasonable solution. So the current problem was that there were two IConfiguration types which are of different types because they were loaded from different assemblies (the plugin and the project one).\nThe plugin tries to get the implementation from its own interface which has no registrations of IConfiguration obviously.\nThe service provider showed the IConfiguration type that is registered with the main application, and the dev has currently no way to see this difference other than not getting the implementation back.\n\nSo with your solution the plugin developer, would get a warning that there is an identical type registered and probably point to the suggested solution in the docs to exclude the assets at runtime?",
                                           "updatedAt":  "2025-01-02T16:12:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZESv1",
                                           "createdAt":  "2025-01-02T16:26:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEI0lQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "codeaphex",
                                                                               "createdAt":  "2025-01-27T13:24:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "It could be part of [ServiceProviderOptions.ValidateOnBuild](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.serviceprovideroptions.validateonbuild?view=net-9.0-pp#microsoft-extensions-dependencyinjection-serviceprovideroptions-validateonbuild) too.  If validation fails, then BuildServiceProvider would compare the type names in order to detect whether an assembly loading problem is the cause.  So the developer would get a better error message in the \"development\" environment where this validation is enabled by default.  If implemented that way, I hope the extra checks would not hurt performance in production environments.",
                                           "updatedAt":  "2025-01-27T12:20:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZEUfU",
                                           "createdAt":  "2025-01-02T16:32:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEEIz_w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "codeaphex",
                                                                               "createdAt":  "2025-01-27T13:23:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "In your plugin scenario, it might be best to make the PluginBase project reference the Microsoft.Extensions.Configuration.Abstractions package and let HelloPlugin get the reference from there.  If plugins require IConfiguration to be available for injection into their constructors, then that is part of the plugin contract even if PluginBase.ICommand does not reference IConfiguration.  If the set of assemblies that the host provides to plugins changes over time, then it is nicer to define it centrally in PluginBase than separately in each plugin. ",
                                           "updatedAt":  "2025-01-02T16:32:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6b51C7",
                                           "createdAt":  "2025-01-27T12:27:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Re \"throw an exception because a service is required but has not been registered\", this should preferably happen in all three cases:\n\n- when the DI container internally detects a dependency (for constructor argument injection or for `required` property injection) of a service it\u0027s trying to create\n- when the DI container internally detects a dependency during validation\n- when ISupportRequiredService.GetRequiredService(Type serviceType) is called\n\nCurrently though, Microsoft.Extensions.DependencyInjection.ServiceProvider is sealed and does not implement ISupportRequiredService; that was not part of \u003chttps://github.com/aspnet/DependencyInjection/pull/384\u003e.  Adding ISupportRequiredService would thus be a (non-breaking) API change.\n\nFor internally detected dependencies and for validation, I think the clearer error message can be implemented without an API change.",
                                           "updatedAt":  "2025-01-27T12:29:55Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "IConfiguration not resolving inside plugins",
        "labels":  [
                       "area-Extensions-Configuration",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111517",
        "createdAt":  "2025-01-17T03:35:48Z",
        "number":  111517,
        "author":  "keegan-caruso",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODMMWjw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2025-08-08T12:57:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JoshLozensky",
                                            "createdAt":  "2025-08-21T20:57:05Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-08-08T13:03:44Z",
        "body":  "### Description\n\nThe configuration binder source generator can generate code that won\u0027t compile. It can generate code of the form `new (value1, value2)()`\n\nWhich gives an error of: `\u0027new\u0027 cannot be used with tuple type. Use a literal expression instead.`\n\n\n\n### Reproduction Steps\n\nEnable source generated configuration binder:\n\n```xml\n\u003cEnableConfigurationBindingGenerator\u003etrue\u003c/EnableConfigurationBindingGenerator\u003e\n```\n\nTry to bind a class that has a getter that includes a property of the class in a value tuple.\n\n```cs\n    public class ExampleOptions\n    {\n        public List\u003cstring\u003e ExampleCollection { get; set; }\n\n        internal List\u003c(string, ICollection\u003cstring\u003e?)\u003e UsesCollection =\u003e\n                [\n                    (\"Label-1\", ExampleCollection )\n                ];\n    }\n\n    builder.Services.Configure\u003cExampleOptions\u003e(\"Repro\", builder.Configuration.GetSection(\"Repro\"));\n```\n\nThe generated code that fails to compile:\n\n```cs\n        public static void BindCore(IConfiguration configuration, ref global::System.Collections.Generic.List\u003c(string, global::System.Collections.Generic.ICollection\u003cstring\u003e)\u003e instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)\n        {\n            foreach (IConfigurationSection section in configuration.GetChildren())\n            {\n                if (!string.IsNullOrEmpty(section.Value) \u0026\u0026 !section.GetChildren().Any())\n                {\n                    continue;\n                }\n                var value = new (string, global::System.Collections.Generic.ICollection\u003cstring\u003e)();\n                instance.Add(value);\n            }\n        }\n```\n\nAdditionally, is not clear to me why it is generating code to bind against a property that only has a getter.\n\n\n### Expected behavior\n\nThe generated code should compile.\n\n### Actual behavior\n\nThe generated code does not compile.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET SDK:\n Version:           9.0.102\n Commit:            cb83cd4923\n Workload version:  9.0.100-manifests.221265b2\n MSBuild version:   17.12.18+ed8c6aec5\n\nThis reproduction was created off of the net9.0 ASP.NET Core Web API template.\n\nThe version of Microsoft.Extensions.Configuration.Binder.SourceGeneration used was 9.0.11.11010\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvNFrlg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6a0KU9",
                                           "createdAt":  "2025-01-17T03:36:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-17T03:36:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc680WuW",
                                           "createdAt":  "2025-08-08T13:03:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "0xfeeddeadbeef",
                                           "body":  "Is there a workaround for this problem?",
                                           "updatedAt":  "2025-08-08T13:03:44Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Configuration Binder source generator can generate code that won\u0027t compile",
        "labels":  [
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111870",
        "createdAt":  "2025-01-27T17:42:38Z",
        "number":  111870,
        "author":  "romfir",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-27T18:37:01Z",
        "body":  "### Description\n\nUsing  `ConfigurationBuilder` with `AddEnvironmentVariables` its not possible to make a collection empty, its only possible to make specific items null (using eg `Some__Collection__0`)\n\n```csharp\n\tEnvironment.SetEnvironmentVariable(\"Some__Collection\", \"{}\"); //the same with empty string and \"[]\"\n\t\n\tvar x = new ConfigurationBuilder()\n\t\t\t\t.AddJsonFile(\"test.json\", optional: false, reloadOnChange: true)\n//{\n//\t\t\"Some\": {\n//\t\t\t\"Collection\": [\n//\t\t\t\t\"value1\"\n//\t\t\t]\n//\t\t}\n//\t}\t\t\t\t\n\t\t\t\t.AddEnvironmentVariables()\n\t\t\t\t.Build();\n\t\t\t\t\n\t\t\t\tx.GetSection(\"Some:Collection\").Get\u003cIEnumerable\u003cstring\u003e\u003e(); // always have value1\n```\n\n### Reproduction Steps\n\nRun code included in the description\n\n### Expected behavior\n\nAdd and document a way to make a collection empty using env variables\n\n### Actual behavior\n\nOriginal values are always read\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 9\nMicrosoft.Extensions.Configuration: 9.0.1\nMicrosoft.Extensions.Configuration.EnvironmentVariables: 9.0.1\nMicrosoft.Extensions.Configuration.Json: 9.0.1\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOm_Yu-Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6b9WRr",
                                           "createdAt":  "2025-01-27T18:11:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Why do you need to define an empty collection in the first place? You can simply avoid defining it altogether or assign it an empty string. This way, the configuration will have a `null` collection, which you can easily check for.",
                                           "updatedAt":  "2025-01-27T18:11:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6b9ZO5",
                                           "createdAt":  "2025-01-27T18:17:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "romfir",
                                           "body":  "I need to have a default value which is present in an appsettings file, but on one of the environments I want to make it empty (using envrionment variables defined inside docker compose file), of course I can add an additional setting `EnableZxc`, but I thought that removing all items from this collection would be cleaner.\n\n\n\u003e assign it an empty string.\n\nAssigning it to an empty string does not work, please see included code.",
                                           "updatedAt":  "2025-01-27T18:17:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6b9dIm",
                                           "createdAt":  "2025-01-27T18:25:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Assigning it to an empty string does not work, please see included code.\n\nI mean having empty string value will make the read collection value is `null` which you can check for instead. I don\u0027t think we currently support defining empty collection in the environment variable provider.",
                                           "updatedAt":  "2025-01-27T18:27:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6b9i75",
                                           "createdAt":  "2025-01-27T18:37:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "romfir",
                                           "body":  "but `x.GetSection(\"Some:Collection\").Get\u003cIEnumerable\u003cstring\u003e\u003e()` would still return all the items from the file, event when `Some__Collection` would be assisgned to an empty string, reading `x.GetSection(\"Some:Collection\").Get\u003cstring\u003e()` would return this empty string (not null) but this would require some manual checks on the consumer side. \nOr are you perhaps talking about making items null via `Some__Collection__0`, `Some__Collection__1` etc? Then yes this is a working workaround",
                                           "updatedAt":  "2025-01-27T18:37:00Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Using ConfigurationBuilder and AddEnvironmentVariables it is not possible to make collection of values empty",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112365",
        "createdAt":  "2025-02-10T19:46:49Z",
        "number":  112365,
        "author":  "matthiaslischka",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC--DRw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cmaart",
                                            "createdAt":  "2025-02-11T09:12:46Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-02-11T02:28:16Z",
        "body":  "### Description\n\nNot sure if that is a bug or just not expected by me, but:\nNested options that I resolve by name have values from the parent set instead of nulls.\n\n### Reproduction Steps\n\nGiven appsettings like\n```json\n{\n    \"MySettings\": {\n        \"SomeValue\": \"foo1\",\n        \"AnotherValue\": \"bar1\",\n\n        \"AnotherMySettings\": {\n            \"SomeValue\": \"foo2\"\n        }\n    }\n}\n```\n\nRegister both configs - default and named:\n\n```c#\n.Configure\u003cMySettings\u003e(null, GetConfiguration().GetSection(\"MySettings\"))\n.Configure\u003cMySettings\u003e(\"AnotherMySettings\", GetConfiguration().GetSection(\"MySettings:AnotherMySettings\"))\n```\n\nResolve `AnotherMySettings`:\n```c#\npublic MyService(IOptionsSnapshot\u003cMySettings\u003e mySettings)\n{\n    _mySettings = mySettings.Get(\"AnotherMySettings\");\n}\n```\n\n### Expected behavior\n\n`_mySettings.SomeValue` = `foo2`\n`_mySettings.AnotherValue` = **`null`**\n\n### Actual behavior\n\n`_mySettings.SomeValue` = `foo2`\n`_mySettings.AnotherValue` = **`bar1`**\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\nDemo Project: https://github.com/matthiaslischka/NamedOptions/",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOneuw2w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6d5bRg",
                                           "createdAt":  "2025-02-10T19:47:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-10T19:47:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6d509N",
                                           "createdAt":  "2025-02-10T20:38:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Related comment in the source code: \u003chttps://github.com/dotnet/runtime/blob/02f99e5609a45bf8568f3d49a01ee126576fd206/src/libraries/Microsoft.Extensions.Options/src/ConfigureNamedOptions.cs#L100-L109\u003e\n\nIf you want to configure only the default options, I think you\u0027ll need to use [Options.DefaultName](https://learn.microsoft.com/dotnet/api/microsoft.extensions.options.options.defaultname?view=netstandard-2.0-pp) rather than `null`; or omit the argument altogether.\n\nHowever, if this is by design, then it seems worth mentioning in the [OptionsConfigurationServiceCollectionExtensions.Configure](https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.optionsconfigurationservicecollectionextensions.configure?view=netstandard-2.0-pp) documentation.",
                                           "updatedAt":  "2025-02-10T20:38:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6d6Kh5",
                                           "createdAt":  "2025-02-10T21:22:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "The behavior looks inconsistent in that, after the `.Configure\u003cMySettings\u003e(null, GetConfiguration().GetSection(\"MySettings\"))` registration, IOptionsChangeTokenSource\\\u003cTOptions\\\u003e.Name will be Options.DefaultName rather than null, even though MySettings options with all names should be reloaded.",
                                           "updatedAt":  "2025-02-10T21:22:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6d67Db",
                                           "createdAt":  "2025-02-10T23:15:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-10T23:15:06Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Named Options inherit values from parent?",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113123",
        "createdAt":  "2025-03-04T12:10:54Z",
        "number":  113123,
        "author":  "sb-viktor",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_r-QQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2025-03-04T14:38:50Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-03-12T08:40:03Z",
        "body":  "I\u0027m using `Microsoft.Extensions.Configuration.Ini` v:9.0.2 and I get a `FormatException` every time I open the .ini file. For example I have this ini:\n```ini\n...\n\n[UART]\nUse = 1\nBaudrate = 115200\nCOM = 31\nCOM = 25\n\n...\n```\nAnd I build it into a configuration object:\n```c#\nIConfiguration config = new ConfigurationBuilder()\n    .AddIniFile(filePath)\n    .Build()\n```\nThen we get:\n\u003e System.IO.InvalidDataException: \u0027Failed to load configuration from file \u0027filePath\u0027.\u0027\nInner Exception\nFormatException: A duplicate key \u0027UART:COM\u0027 was found.\n\n---\n\nI want `IConfigurationBuilder` to overwrite the value itself. The last written value will be the value that will get to `IConfigurationBuilder`. If we consider the same example, the final `COM` value will be `25`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOofMeKw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6gxh40",
                                           "createdAt":  "2025-03-04T12:11:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-04T12:11:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6g0hFu",
                                           "createdAt":  "2025-03-04T15:53:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Can\u0027t you fix the `ini` file? why you have duplicate values there in the first place?  ",
                                           "updatedAt":  "2025-03-04T15:53:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6g26NX",
                                           "createdAt":  "2025-03-04T19:50:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIlE-w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sb-viktor",
                                                                               "createdAt":  "2025-03-05T07:29:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e Can\u0027t you fix the `ini` file? why you have duplicate values there in the first place?\n\nI think the issue is that you could argue \"there is nothing wrong with the `ini` file\" too @tarekgh . At least according to Wikipedia, this part of the format is provider-dependent:\n- https://en.wikipedia.org/wiki/INI_file#Duplicate_names\n\nDue to this, I think providing which behavior you want explicitly would be an interesting change.",
                                           "updatedAt":  "2025-03-04T19:50:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6g3Jj3",
                                           "createdAt":  "2025-03-04T20:19:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIlE7w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2025-03-05T00:40:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sb-viktor",
                                                                               "createdAt":  "2025-03-05T07:29:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Well, I was not trying to argue here more than figuring out if this is acceptable workaround. But looking at the link you pasted it states the following:\n\n```\nDuplicate names\nMost implementations only support having one property with a given name in a section. The second occurrence of a property name may cause an [abort](https://en.wikipedia.org/wiki/Abort_(computing)), it may be ignored (and the value discarded), or it may override the first occurrence (with the first value discarded). Some programs use duplicate property names to implement multi-valued properties.\n\nInterpretation of multiple section declarations with the same name also varies. In some implementations, duplicate sections simply merge their properties, as if they occurred contiguously. Others may abort, or ignore some aspect of the INI file.\n```\n\nIt is up to the implementation to decide what to do with the duplicate entries. The option to `abort` is what currently the configuration does which still comply to this spec. \n\nAnyway, I am not objecting to the idea in this issue, but I am seeing this is low priority to consider in the current time. ",
                                           "updatedAt":  "2025-03-04T20:19:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6g8BMa",
                                           "createdAt":  "2025-03-05T07:29:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sb-viktor",
                                           "body":  "\u003e Can\u0027t you fix the `ini` file? why you have duplicate values there in the first place?\n\nThat\u0027s a good question, @tarekgh. Of course I can do that, but I\u0027m working on a project that the old development team left. They left over 300 configs and all of them have key duplication:\n\n\u003cimg src=\"https://github.com/user-attachments/assets/312d8917-4a7f-4442-9b93-45522d02fa33\" width=\"700\"\u003e\n\nApparently the parser they used for the old project could easily accept duplication and just overwrite the value.\n\nI can also write a parser to fully manage the data and work with the file, but I still want to use the modern features of `.NET`\n\nI do not think there should be duplication in the `ini` . At least it creates problems with the readability of the config. But I need both to maintain the old project (because many people use it) and to use modern `.NET` technologies rather than writing shitty parsers.\n\n*Correction:* You might think the problem is that I\u0027m just lazy and can\u0027t rewrite the configs. **I\u0027m not.** The problem is that the old project and the configs are used by a lot of people, and if you rewrite them, there is a chance that they will not work (or will not work properly) with the old project.",
                                           "updatedAt":  "2025-03-05T07:46:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6g84JK",
                                           "createdAt":  "2025-03-05T09:13:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIpWFQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2025-03-05T16:19:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Duplicate keys were also discussed in \u003chttps://github.com/dotnet/runtime/issues/36557\u003e and \u003chttps://github.com/dotnet/runtime/issues/99535\u003e.",
                                           "updatedAt":  "2025-03-05T09:14:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hBO5R",
                                           "createdAt":  "2025-03-05T16:28:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@KalleOlaviNiemitalo thanks for the links. \n\n\u003e The problem is that the old project and the configs are used by a lot of people, and if you rewrite them, there is a chance that they will not work (or will not work properly) with the old project.\n\n@sb-viktor thanks for your detailed reply. I do not fully understand this. If you write a simple tool sanitize the `ini` files just one time act, how will this break anyone using the old projects? Do you think old projects depend on duplicate values in the ini? That will be very weird and wrong behavior anyway. ",
                                           "updatedAt":  "2025-03-05T16:28:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hBPMQ",
                                           "createdAt":  "2025-03-05T16:28:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "CC @ericstj ",
                                           "updatedAt":  "2025-03-05T16:28:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6h8x4r",
                                           "createdAt":  "2025-03-12T08:40:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sb-viktor",
                                           "body":  "\u003e Do you think old projects depend on duplicate values in the `ini`? That will be very weird and wrong behavior anyway.\n\n@tarekgh honestly, I don\u0027t know how it works.\n\n\u003e If you write a simple tool sanitize the `ini` files just one time act, how will this break anyone using the old projects?\n\nThat\u0027s not a problem, and that\u0027s what I\u0027m doing. I just want this feature to be in the `Microsoft.Extensions.Configuration` itself.",
                                           "updatedAt":  "2025-03-12T08:40:02Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Microsoft.Extensions.Configuration add the ability to bypass \"FormatException: A duplicate key\"",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113272",
        "createdAt":  "2025-03-07T19:04:34Z",
        "number":  113272,
        "author":  "bbartels",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-07T22:18:24Z",
        "body":  "### Description\n\nWhen binding root-level configuration properties using Microsoft.Extensions.Configuration.Binder, binding to a record defined with a positional parameter decorated with [ConfigurationKeyName] fails to bind the expected value (throws Exception), while binding to a class with an attributed property works as expected. The following minimal reproducible example demonstrates the issue.\n\n### Reproduction Steps\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing Microsoft.Extensions.Configuration;\n#nullable disable\n\nvar inMemorySettings = new Dictionary\u003cstring, string\u003e\n{\n    { \"example-secret-key\", \"my-secret-value\" }\n};\n\nIConfiguration configuration = new ConfigurationBuilder()\n    .AddInMemoryCollection(inMemorySettings)\n    .Build();\n\nvar secretsClass = configuration.Get\u003cExampleSecretsClass\u003e();\nConsole.WriteLine(\"ExampleSecretsClass.SecretKey: \" + (secretsClass?.SecretKey ?? \"null\"));\n\nvar secretsRecord = configuration.Get\u003cExampleSecretsRecord\u003e();\nConsole.WriteLine(\"ExampleSecretsRecord.SecretKey: \" + (secretsRecord?.SecretKey ?? \"null\"));\n\npublic class ExampleSecretsClass\n{\n    [ConfigurationKeyName(\"example-secret-key\")]\n    public string SecretKey { get; init; } = string.Empty;\n}\n\npublic record ExampleSecretsRecord([property: ConfigurationKeyName(\"example-secret-key\")] string SecretKey);\n```\n\n### Expected behavior\n\nWhen using constructor binding with ConfigurationKeyName, the binding fails and an Exception is thrown\n\n### Actual behavior\n\nIt should bind even when constructor binding is used\n\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoWK0uA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6hXKg2",
                                           "createdAt":  "2025-03-07T19:05:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-07T19:05:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hX7T6",
                                           "createdAt":  "2025-03-07T20:40:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Seems like this is a feature request to honor attributes on properties when mapping those to constructor parameters.  Today it looks like the binder will only use the exact parameter names when mapping to configuration properties https://github.com/dotnet/runtime/blob/8a9d492444f06df20fcc5dfdcf7a6395af18361f/src/libraries/Microsoft.Extensions.Configuration.Binder/src/ConfigurationBinder.cs#L591-L598\n\nI can also imagine that we allow for applying the attribute to the constructor parameter.\n",
                                           "updatedAt":  "2025-03-07T20:40:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hX8Lm",
                                           "createdAt":  "2025-03-07T20:42:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Looks similar to https://github.com/dotnet/runtime/issues/79957 which may be a duplicate / superset of this.",
                                           "updatedAt":  "2025-03-07T20:42:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hYrS4",
                                           "createdAt":  "2025-03-07T22:18:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@bbartels as a workaround you can try\n```\npublic record ExampleSecretsRecord([property: ConfigurationKeyName(\"example-secret-key\")] string SecretKey)\n{\n    public ExampleSecretsRecord() : this(string.Empty) { }\n}\n```\n\nThat would allow the ConfigurationBinder to construct the object and bind to the properties instead of constructor parameters.\n\nNote that neither type here will work well with the source-generator because it doesn\u0027t support init properties.  https://github.com/dotnet/runtime/issues/107856",
                                           "updatedAt":  "2025-03-07T22:18:23Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Constructor Binding with ConfigurationKeyName attribute fails to bind correctly",
        "labels":  [
                       "feature-request",
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115560",
        "createdAt":  "2025-05-14T13:01:27Z",
        "number":  115560,
        "author":  "Kumima",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-14T17:37:50Z",
        "body":  "# Description\nWhen using the `ConfigurationBindingGenerator` for `MicrosoftIdentityOptions` from `Microsoft.Identity.Web`, the binding does not work. There are warning level messages but no error level messages.\n\nTo remove the `\u003cEnableConfigurationBindingGenerator\u003etrue\u003c/EnableConfigurationBindingGenerator\u003e`, things work. So I think it causes by this source generator mode.\n\n# Code\n```csharp\nbuilder.Services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)\n    .AddMicrosoftIdentityWebApp(\n        options =\u003e builder.Configuration.GetRequiredSection(nameof(MicrosoftIdentityOptions)).Bind(options))\n// As an example options.AccessDeniedPath fails binding\n```\n\n# Warning Log\n```\n~： warning SYSLIB1100: Cannot create instance of type \u0027Microsoft.IdentityModel.Protocols.IConfigurationManager\u003cOpenIdConnectConfiguration\u003e\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027ConfigurationManager\u0027 on type \u0027Microsoft.Identity.Web.MicrosoftIdentityOptions\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027Microsoft.AspNetCore.Authentication.ISecureDataFormat\u003cAuthenticationProperties\u003e\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027StateDataFormat\u0027 on type \u0027Microsoft.Identity.Web.MicrosoftIdentityOptions\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027Microsoft.AspNetCore.Authentication.ISecureDataFormat\u003cstring\u003e\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027StringDataFormat\u0027 on type \u0027Microsoft.Identity.Web.MicrosoftIdentityOptions\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027Microsoft.IdentityModel.Tokens.ISecurityTokenValidator\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027SecurityTokenValidator\u0027 on type \u0027Microsoft.Identity.Web.MicrosoftIdentityOptions\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027Microsoft.IdentityModel.Tokens.TokenHandler\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027TokenHandler\u0027 on type \u0027Microsoft.Identity.Web.MicrosoftIdentityOptions\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027System.Net.Http.HttpMessageHandler\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027BackchannelHttpHandler\u0027 on type \u0027Microsoft.Identity.Web.MicrosoftIdentityOptions\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027Microsoft.AspNetCore.DataProtection.IDataProtectionProvider\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027DataProtectionProvider\u0027 on type \u0027Microsoft.Identity.Web.MicrosoftIdentityOptions\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027System.TimeProvider\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027TimeProvider\u0027 on type \u0027Microsoft.Identity.Web.MicrosoftIdentityOptions\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimAction\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1100: The collection element type is not supported: \u0027Microsoft.AspNetCore.Authentication.OAuth.Claims.ClaimActionCollection\u0027. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027ClaimActions\u0027 on type \u0027Microsoft.Identity.Web.MicrosoftIdentityOptions\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027Microsoft.IdentityModel.Tokens.BaseConfigurationManager\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027ConfigurationManager\u0027 on type \u0027Microsoft.IdentityModel.Tokens.TokenValidationParameters\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1101: Property \u0027TokenValidationParameters\u0027 on type \u0027Microsoft.Identity.Web.MicrosoftIdentityOptions\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027Microsoft.IdentityModel.Tokens.SecurityKey\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027IssuerSigningKey\u0027 on type \u0027Microsoft.IdentityModel.Tokens.TokenValidationParameters\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027Microsoft.IdentityModel.Tokens.ITokenReplayCache\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027TokenReplayCache\u0027 on type \u0027Microsoft.IdentityModel.Tokens.TokenValidationParameters\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027System.Net.IWebProxy\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027DefaultProxy\u0027 on type \u0027System.Net.Http.HttpClient\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1101: Property \u0027Backchannel\u0027 on type \u0027Microsoft.Identity.Web.MicrosoftIdentityOptions\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027System.Net.Http.Headers.HttpRequestHeaders\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027DefaultRequestHeaders\u0027 on type \u0027System.Net.Http.HttpClient\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027System.TimeZoneInfo\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027LocalTimeZone\u0027 on type \u0027System.TimeProvider\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027Microsoft.IdentityModel.Tokens.CryptoProviderCache\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027CryptoProviderCache\u0027 on type \u0027Microsoft.IdentityModel.Tokens.CryptoProviderFactory\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1101: Property \u0027CryptoProviderFactory\u0027 on type \u0027Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectProtocolValidator\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1101: Property \u0027ProtocolValidator\u0027 on type \u0027Microsoft.Identity.Web.MicrosoftIdentityOptions\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027Microsoft.IdentityModel.Tokens.ICryptoProvider\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027CustomCryptoProvider\u0027 on type \u0027Microsoft.IdentityModel.Tokens.CryptoProviderFactory\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027Microsoft.IdentityModel.Tokens.BaseConfiguration\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027LastKnownGoodConfiguration\u0027 on type \u0027Microsoft.IdentityModel.Tokens.BaseConfigurationManager\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027System.Net.ICredentials\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027Credentials\u0027 on type \u0027System.Net.IWebProxy\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: The collection type is not supported: \u0027System.Net.Http.Headers.HttpHeaderValueCollection\u003cMediaTypeWithQualityHeaderValue\u003e\u0027. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027Accept\u0027 on type \u0027System.Net.Http.Headers.HttpRequestHeaders\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: The collection type is not supported: \u0027System.Net.Http.Headers.HttpHeaderValueCollection\u003cStringWithQualityHeaderValue\u003e\u0027. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027AcceptCharset\u0027 on type \u0027System.Net.Http.Headers.HttpRequestHeaders\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027System.Net.Http.Headers.AuthenticationHeaderValue\u0027 because it has multiple public parameterized constructors. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027Authorization\u0027 on type \u0027System.Net.Http.Headers.HttpRequestHeaders\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: The collection type is not supported: \u0027System.Net.Http.Headers.HttpHeaderValueCollection\u003cstring\u003e\u0027. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027Connection\u0027 on type \u0027System.Net.Http.Headers.HttpRequestHeaders\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: The collection type is not supported: \u0027System.Net.Http.Headers.HttpHeaderValueCollection\u003cNameValueWithParametersHeaderValue\u003e\u0027. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027Expect\u0027 on type \u0027System.Net.Http.Headers.HttpRequestHeaders\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: The collection type is not supported: \u0027System.Net.Http.Headers.HttpHeaderValueCollection\u003cEntityTagHeaderValue\u003e\u0027. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027IfMatch\u0027 on type \u0027System.Net.Http.Headers.HttpRequestHeaders\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027System.Net.Http.Headers.RangeConditionHeaderValue\u0027 because it has multiple public parameterized constructors. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027IfRange\u0027 on type \u0027System.Net.Http.Headers.HttpRequestHeaders\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: The collection type is not supported: \u0027System.Net.Http.Headers.HttpHeaderValueCollection\u003cNameValueHeaderValue\u003e\u0027. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027Pragma\u0027 on type \u0027System.Net.Http.Headers.HttpRequestHeaders\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: The collection type is not supported: \u0027System.Net.Http.Headers.HttpHeaderValueCollection\u003cTransferCodingWithQualityHeaderValue\u003e\u0027. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027TE\u0027 on type \u0027System.Net.Http.Headers.HttpRequestHeaders\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: The collection type is not supported: \u0027System.Net.Http.Headers.HttpHeaderValueCollection\u003cTransferCodingHeaderValue\u003e\u0027. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027TransferEncoding\u0027 on type \u0027System.Net.Http.Headers.HttpRequestHeaders\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: The collection type is not supported: \u0027System.Net.Http.Headers.HttpHeaderValueCollection\u003cProductHeaderValue\u003e\u0027. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027Upgrade\u0027 on type \u0027System.Net.Http.Headers.HttpRequestHeaders\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: The collection type is not supported: \u0027System.Net.Http.Headers.HttpHeaderValueCollection\u003cProductInfoHeaderValue\u003e\u0027. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027UserAgent\u0027 on type \u0027System.Net.Http.Headers.HttpRequestHeaders\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: The collection type is not supported: \u0027System.Net.Http.Headers.HttpHeaderValueCollection\u003cViaHeaderValue\u003e\u0027. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027Via\u0027 on type \u0027System.Net.Http.Headers.HttpRequestHeaders\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: The collection type is not supported: \u0027System.Net.Http.Headers.HttpHeaderValueCollection\u003cWarningHeaderValue\u003e\u0027. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027Warning\u0027 on type \u0027System.Net.Http.Headers.HttpRequestHeaders\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027System.Security.Cryptography.X509Certificates.X500DistinguishedName\u0027 because it has multiple public parameterized constructors. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027IssuerName\u0027 on type \u0027System.Security.Cryptography.X509Certificates.X509Certificate2\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1101: Property \u0027Certificate\u0027 on type \u0027Microsoft.Identity.Web.CertificateDescription\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: The collection element type is not supported: \u0027System.Collections.Generic.IEnumerable\u003cCertificateDescription\u003e\u0027. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027ClientCertificates\u0027 on type \u0027Microsoft.Identity.Web.MicrosoftIdentityOptions\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027System.Security.Cryptography.AsymmetricAlgorithm\u0027 because it is missing a public instance constructor. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027PrivateKey\u0027 on type \u0027System.Security.Cryptography.X509Certificates.X509Certificate2\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027System.Security.Cryptography.X509Certificates.PublicKey\u0027 because it has multiple public parameterized constructors. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027PublicKey\u0027 on type \u0027System.Security.Cryptography.X509Certificates.X509Certificate2\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027System.Net.Http.Headers.EntityTagHeaderValue\u0027 because it has multiple public parameterized constructors. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027EntityTag\u0027 on type \u0027System.Net.Http.Headers.RangeConditionHeaderValue\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027System.Security.Cryptography.X509Certificates.X509Extension\u0027 because it has multiple public parameterized constructors. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1100: The collection element type is not supported: \u0027System.Security.Cryptography.X509Certificates.X509ExtensionCollection\u0027. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027Extensions\u0027 on type \u0027System.Security.Cryptography.X509Certificates.X509Certificate2\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027System.Security.Cryptography.AsnEncodedData\u0027 because it has multiple public parameterized constructors. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027EncodedKeyValue\u0027 on type \u0027System.Security.Cryptography.X509Certificates.PublicKey\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1100: Cannot create instance of type \u0027System.Net.Http.Headers.NameValueHeaderValue\u0027 because it has multiple public parameterized constructors. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1100: The collection element type is not supported: \u0027System.Collections.Generic.ICollection\u003cNameValueHeaderValue\u003e\u0027. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1100)\n~： warning SYSLIB1101: Property \u0027Extensions\u0027 on type \u0027System.Net.Http.Headers.CacheControlHeaderValue\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n~： warning SYSLIB1101: Property \u0027CacheControl\u0027 on type \u0027System.Net.Http.Headers.HttpRequestHeaders\u0027 is not supported. (https://learn.microsoft.com/dotnet/fundamentals/syslib-diagnostics/syslib1101)\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOq6yM2A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6rrIzY",
                                           "createdAt":  "2025-05-14T13:16:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-14T13:16:01Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ConfigurationBindingGenerator binding fails without error",
        "labels":  [
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116226",
        "createdAt":  "2025-06-02T19:50:44Z",
        "number":  116226,
        "author":  "tarekgh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-02T19:58:16Z",
        "body":  "In https://github.com/dotnet/runtime/pull/116037, we added support for additional connection string prefixes to EnvironmentVariablesConfigurationProvider. This issue is intended to track whether any provider names need to be associated with the newly supported connection strings.\n\nBelow is a list of potential provider names, but they haven\u0027t been validated yet. We need to determine whether these are the correct values or if we should continue using `null` as the provider\u0027s name, as we currently do.\n\n- **Cosmos DB**: Uses REST APIs or SDK (`Microsoft.Azure.Cosmos`)\n- **Event Hubs**: Uses AMQP protocol (`Azure.Messaging.EventHubs`)\n- **Notification Hubs**: Uses REST APIs (`Microsoft.Azure.NotificationHubs`)\n- **Redis Cache**: Uses Redis protocol (`StackExchange.Redis`)\n- **Service Bus**: Uses AMQP protocol (`Azure.Messaging.ServiceBus`)\n- **API Hub**: Generic API connections, no specific provider \u003c--- Null provider\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrsaPLA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6uxkrm",
                                           "createdAt":  "2025-06-02T19:52:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "https://github.com/dotnet/runtime/issues/36123\nhttps://learn.microsoft.com/en-us/azure/app-service/reference-app-settings?tabs=kudu%2Cdotnet#variable-prefixes\nhttps://learn.microsoft.com/en-us/cli/azure/webapp/config/connection-string?view=azure-cli-latest#az-webapp-config-connection-string-set",
                                           "updatedAt":  "2025-06-02T19:58:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uxo8s",
                                           "createdAt":  "2025-06-02T19:55:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-02T19:55:42Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Follow-up on provider names for the newly added connection strings to EnvironmentVariablesConfigurationProvider",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116648",
        "createdAt":  "2025-06-13T18:47:02Z",
        "number":  116648,
        "author":  "goldsam",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODJh_KA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lennartb-",
                                            "createdAt":  "2025-07-08T05:17:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gintarasd-bentley",
                                            "createdAt":  "2025-08-01T15:30:50Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-06-14T17:58:12Z",
        "body":  "The current options binding implementation only supports the following Dictionary key types:\n- integers\n- strings\n- enums\n\nhttps://github.com/dotnet/runtime/blob/3875b54e7b10b10606b105340199946d0b877754/src/libraries/Microsoft.Extensions.Configuration.Binder/src/ConfigurationBinder.cs#L617-L634\n\nWhile #36540 would greatly enhance usability by adding extensibility for custom string-\u003ekey conversions, adding direct support for `Guid` keys in in the interim would be enormously valuable.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsTMrsw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6xKIx9",
                                           "createdAt":  "2025-06-14T03:51:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-options\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-14T03:51:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xMyuz",
                                           "createdAt":  "2025-06-14T17:58:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-14T17:58:12Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add support for Guid Dictionary keys in IOptions binding.",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116928",
        "createdAt":  "2025-06-23T19:11:58Z",
        "number":  116928,
        "author":  "tarekgh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-23T19:17:14Z",
        "body":  "The configuration source generator currently supports binding a `byte[]` only from Base64-encoded strings. This issue aims to enhance byte array binding to align with the behavior of runtime reflection-based binding. The improvements should include:\n\n* **Support for array values in configuration**: Enable binding from array-style configuration values (e.g., JSON entries like `byteArray: [1, 2, 3, 4]`) in addition to Base64 strings.\n* **Preserve and extend existing arrays**: When binding to an already-initialized (non-null) byte array, the configuration values should be appended to the existing array rather than replacing it—consistent with the behavior of other array types.\n* **Error handling for invalid values**: If invalid configuration values are encountered, an exception should be thrown when the `BindingOption.ErrorOnUnknownConfiguration` flag is enabled.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsqzo3A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6yrL6O",
                                           "createdAt":  "2025-06-23T19:12:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-23T19:12:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6yrOjc",
                                           "createdAt":  "2025-06-23T19:17:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Tests like \n\nhttps://github.com/dotnet/runtime/blob/6da0fa9a95ab50d9dd14496f3625cf10eeffefab/src/libraries/Microsoft.Extensions.Configuration.Binder/tests/Common/ConfigurationBinderTests.cs#L2962\nhttps://github.com/dotnet/runtime/blob/6da0fa9a95ab50d9dd14496f3625cf10eeffefab/src/libraries/Microsoft.Extensions.Configuration.Binder/tests/Common/ConfigurationBinderTests.cs#L3002\n\nNeed to be fixed along with fixing this issue.",
                                           "updatedAt":  "2025-06-23T19:17:14Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Improve the Byte array binding in the configuration source generator",
        "labels":  [
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118204",
        "createdAt":  "2025-07-30T11:44:10Z",
        "number":  118204,
        "author":  "s97712",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODR9qdA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "chkbkn",
                                            "createdAt":  "2025-08-11T07:02:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HristoYankovTR",
                                            "createdAt":  "2025-09-19T16:33:53Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-08-01T15:58:38Z",
        "body":  "### Description\n\nI am writing this issue because I am very frustrated with how .NET configuration handles arrays.\n\nThis has caused a lot of problems for my team and me. We spent a lot of time fixing strange bugs, only to find out that the root cause was that arrays in our configuration were being merged instead of replaced, which we did not expect.\n\nWhen we use multiple configuration files, like a base appsettings.json and appsettings.Development.json, our intuition is that an array in the second file should completely overwrite the same array from the first file. But this is not what happens.\n\n\n### Reproduction Steps\n\n\n1.  Create an `appsettings.json` file:\n\n    ```json\n    {\n      \"MySettings\": {\n        \"Items\": [\"A\", \"B\"]\n      }\n    }\n    ```\n\n2.  Create an `appsettings.Development.json` file, which we expect to replace the entire `Items` array:\n\n    ```json\n    {\n      \"MySettings\": {\n        \"Items\": [\"C\"]\n      }\n    }\n    ```\n\n3.  Load the configuration and bind it to a class.\n\n### Expected behavior\n\n\nI expect the final `Items` array to contain only one element: `[\"C\"]`. This is because `appsettings.Development.json` should overwrite the settings from `appsettings.json`.\n\n### Actual behavior\n\nIn reality, the final `Items` array becomes `[\"C\", \"B\"]`.\n\nThe old values are not completely replaced. This is very strange and caused unexpected behavior in our application. Nobody would expect this result.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nThis default behavior is not intuitive at all and makes managing configuration difficult. Finding and fixing bugs because of this is a huge waste of time. **What makes it even more frustrating is that there seems to be no official, simple solution for this long-standing problem.**\nWe believe a good framework should have simple, predictable behavior. Please consider changing the default behavior to **replace** arrays, or at least provide a simple option to do so. The current behavior feels like a trap.\n\n### Configuration\n\n_No response_\n\n### Other information\n\nhttps://github.com/dotnet/runtime/issues/36384\n\nhttps://github.com/dotnet/runtime/issues/36569\n\nhttps://github.com/dotnet/aspnetcore/issues/3666\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOu3WWkg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6679rw",
                                           "createdAt":  "2025-07-30T13:08:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-30T13:08:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67PThU",
                                           "createdAt":  "2025-07-31T21:11:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "The current behavior reflects what many users have requested repeatedly, and we decided to implement it based on that feedback. The previous approach—replacing the entire collection—was a common source of complaints. We have done this change with documenting it as a breaking change https://learn.microsoft.com/en-us/dotnet/core/compatibility/extensions/7.0/config-bind-dictionary.\n\nAt this point, we don\u0027t plan to revert the behavior, as doing so would likely lead to renewed complaints. That said, I\u0027ll keep this issue open to address the problem in the provided example. After merging, the resulting collection should correctly contain [\"A\", \"B\", \"C\"].",
                                           "updatedAt":  "2025-08-01T00:51:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67Q5XA",
                                           "createdAt":  "2025-08-01T00:49:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "As a potential workaround for the missing items in merged arrays, try loading one configuration at a time instead of loading them all together. This isn\u0027t a perfect solution, but it might help if anyone is currently blocked by the issue. Here\u0027s an example:\n\n```C#\nstring jsonConfig1 = @\"\n {\n     \"\"Settings\"\": {\n         \"\"Items\"\": [\"\"A\"\", \"\"B\"\"],\n     },\n }\";\n\nstring jsonConfig2 = @\"\n {\n     \"\"Settings\"\": {\n         \"\"Items\"\": [\"\"C\"\"],\n     },\n }\";\n\n// Load first configuration\nvar configuration = new ConfigurationBuilder()\n            .AddJsonStream(new MemoryStream(Encoding.UTF8.GetBytes(jsonConfig1)))\n            .Build().GetSection(\"Settings\");\n\n// bind to the first configuration\nSettings? result = configuration.Get\u003cSettings\u003e();\n\n// Now load the second configuration\nconfiguration = new ConfigurationBuilder()\n            .AddJsonStream(new MemoryStream(Encoding.UTF8.GetBytes(jsonConfig2)))\n            .Build().GetSection(\"Settings\");\n\n// Bind the second configuration should result the arrays merged correctly \nconfiguration.Bind(result!);\n\npublic class Settings\n{\n    public string[]? Items { get; set; }\n}\n```",
                                           "updatedAt":  "2025-08-01T00:49:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67aAwC",
                                           "createdAt":  "2025-08-01T10:53:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rjgotten",
                                           "body":  "\u003e @tarekgh \n\u003e The current behavior reflects what many users have requested repeatedly, and we decided to implement it based on that feedback. The previous approach—replacing the entire collection—was a common source of complaints. We have done this change with documenting it as a breaking change https://learn.microsoft.com/en-us/dotnet/core/compatibility/extensions/7.0/config-bind-dictionary.\n\u003e \n\u003e At this point, we don\u0027t plan to revert the behavior, as doing so would likely lead to renewed complaints. That said, I\u0027ll keep this issue open to address the problem in the provided example. After merging, the resulting collection should correctly contain [\"A\", \"B\", \"C\"].\n\nI don\u0027t think this has anything to do with the configuration binder and how it was changed to mutate values that already exist in the object being bound to. What this issue is reporting appears to be the nuisance of array configuration being merged/flattened by index.\n\nThe problem which stems from the fact that under the hood, the array is represented as a set of config key-values: \n```\n[\"MySettings:Items:0\"] = \"A\"\n[\"MySettings:Items:1\"] = \"B\"\n```\n\nwhere the environment-specific configuration is\n```\n[\"MySettings:Items:0\"] = \"C\"\n```\n\nand both are merged left-to-right to produce\n```\n[\"MySettings:Items:0\"] = \"C\"\n[\"MySettings:Items:1\"] = \"B\"\n```\n\nAnd then _that_ is what gets shipped to the binder.\nWhere things can get _especially_ bad if these actually aren\u0027t strings but are complex objects.\nBecause then you can get sub-properties from objects _intended_ to be different from one another, flattened/merged into one very unexpected mish-mash.\n\n\nGoing to admit - both myself and my direct colleagues have also been bitten more than a few times by how the config system\u0027s weird ideosyncrasies wrt index property merging end up working. To the point that we now have a hard rule: if it goes in config and needs to be mergeable/overridable per environment, then it may never be an array but _must_ be a map \u0026mdash; i.e. object.\nSo we end up binding to dictionaries inside `Options\u003cT\u003e` and then where those are consumed iterate over the dictionary `.Values` collection, ignoring the keys.\nNot pretty - but by god; it\u0027s worth not having to handle this stupid key-merging headache.",
                                           "updatedAt":  "2025-08-01T11:09:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc67dZaS",
                                           "createdAt":  "2025-08-01T15:58:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e I don\u0027t think this has anything to do with the configuration binder and how it was changed to mutate values that already exist in the object being bound to. What this issue is reporting appears to be the nuisance of array configuration being merged/flattened by index.\n\nThere are two parts to this issue. One involves what you\u0027re describing—how configuration read and flatten indexed keys, which can override values during collection merging. The other part relates to the Binder itself. Take a look at the workaround I shared here: https://github.com/dotnet/runtime/issues/118204#issuecomment-3141768640. It demonstrates how loading configurations at different times allows the Binder to merge values instead of replacing them. \n\nIf we decide to address this issue, we have two options:\n\n- Fix the first part to properly merge array values without relying on numeric indexes, and leave the Binder unchanged.\n- Alternatively, update the first part to always replace the entire array and adjust the Binder to follow the same behavior.\n\nPersonally, I\u0027m leaning toward the first solution.",
                                           "updatedAt":  "2025-08-01T15:58:38Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Default configuration array merging is confusing and error-prone",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118630",
        "createdAt":  "2025-08-12T09:19:41Z",
        "number":  118630,
        "author":  "ZzZombo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-13T23:24:00Z",
        "body":  "### Description\n\n```c#\nvar dict = conf.GetSection(sectionPrefix).Get\u003cIDictionary\u003cstring, string\u003e\u003e();\n```\ngenerates code w/o the correct `System.Collections.Generic` namespace for `public static void ValidateConfigurationKeys(Type type, Lazy\u003cHashSet\u003cstring\u003e\u003e keys, IConfiguration configuration, BinderOptions? binderOptions)` where it declares a `Lazy\u003cHashSet\u003cstring\u003e\u003e` argument.\n\n### Reproduction Steps\n\nSee above.\n\n### Expected behavior\n\nThe generator produces compliable code.\n\n### Actual behavior\n\nBut it doesn\u0027t.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nGlobal/implicit `using` directives can be used as a workaround.\n\n### Configuration\nWhich version of .NET is the code running on? .NET 9.0.\nWhat OS and version, and what distro if applicable? Windows 10.\nWhat is the architecture (x64, x86, ARM, ARM64)? x64.\nDo you know whether it is specific to that configuration? No idea.\nIf you\u0027re using Blazor, which web browser(s) do you see this issue in? N/A.\n\n### Other information\n\nThe line https://github.com/dotnet/runtime/blob/811da242e182f376b4d915ec7abb16c1e852462e/src/libraries/Microsoft.Extensions.Configuration.Binder/gen/Specs/BindingHelperInfo.cs#L170 adds this namespace to the generated output only in one case: `ObjectSpec` root type, but it generates the validation method assuming the namespace is added unconditionally. I think just making it do so should fix this, worst case scenario it adds a redundant used namespace declaration, which I think is negligible.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvej8nA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc69dD1P",
                                           "createdAt":  "2025-08-12T09:26:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "Possible related and/or duplicate issues:\n- https://github.com/dotnet/runtime/issues/93498\n- https://github.com/dotnet/runtime/pull/94267",
                                           "updatedAt":  "2025-08-12T09:26:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69dFoo",
                                           "createdAt":  "2025-08-12T09:28:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEd_4Zg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "RenderMichael",
                                                                               "createdAt":  "2025-08-12T13:50:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ZzZombo",
                                           "body":  "They are not relevant at all, no.",
                                           "updatedAt":  "2025-08-12T09:28:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69gvYh",
                                           "createdAt":  "2025-08-12T14:00:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-12T14:00:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69j1he",
                                           "createdAt":  "2025-08-12T17:20:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "https://github.com/dotnet/runtime/issues/109759 not directly same but kind of related handling namespaces in general. ",
                                           "updatedAt":  "2025-08-12T17:20:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69qEam",
                                           "createdAt":  "2025-08-13T01:47:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ZzZombo",
                                           "body":  "Just found another way to trigger this, for `conf.GetSection(key).Get\u003cstring[]\u003e()`.",
                                           "updatedAt":  "2025-08-13T01:47:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69zPL8",
                                           "createdAt":  "2025-08-13T15:10:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Just found another way to trigger this, for conf.GetSection(key).Get\u003cstring[]\u003e().\n\nWhat do you mean here? `string` type doesn\u0027t need to be qualified with the namespace because it is language specific keyword. ",
                                           "updatedAt":  "2025-08-13T15:10:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc696MO2",
                                           "createdAt":  "2025-08-13T23:16:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ZzZombo",
                                           "body":  "I mean this call triggers the same bug.",
                                           "updatedAt":  "2025-08-13T23:16:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc696Pyc",
                                           "createdAt":  "2025-08-13T23:23:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Yes, I am wondering what is the error in this case? it shouldn\u0027t produce code having `System.Collections.Generic` I guess. I\u0027ll try it myself when I get some cycles.",
                                           "updatedAt":  "2025-08-13T23:24:00Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "The configuration binder source generator fails to add the correct namespace when dealing with a dictionary root type",
        "labels":  [
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119114",
        "createdAt":  "2025-08-26T19:52:24Z",
        "number":  119114,
        "author":  "X-Celcius",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-26T20:10:47Z",
        "body":  "### Description\n\nWhen enabling `ErrorOnUnknownConfiguration` I expect an error to be thrown when a configuration value is found that could not be bound to the options class. This works on plain properties. \nBut when adding a `ConfigurationKeyName` attribute to the property the attribute is ignored and an InvalidOperationException is raised even if the configuration contains a key that matches the key specified in the attribute. \nThis is in contrast to the behavior of the actual binding that would happen when not using `ErrorOnUnknownConfiguration`. \n\n### Reproduction Steps\n\n```csharp\nvar builder = Host.CreateApplicationBuilder(args);\n\nbuilder.Services.AddOptions\u003cOptions\u003e()\n                .Bind(builder.Configuration.GetSection(\"Section\"),\n                      options =\u003e options.ErrorOnUnknownConfiguration = true)\n                .ValidateOnStart();\n\nbuilder.Configuration[\"Section:Foo\"] = \"...\"; // Fails - \"the following properties were not found on the instance of Options: \u0027Foo\u0027\"\n//builder.Configuration[\"Section:Bar\"] = \"...\"; // Works\n\nvar host = builder.Build();\nhost.Run();\n\nclass Options\n{\n    [ConfigurationKeyName(\"Foo\")]\n    public required string Bar { get; init; }\n}\n```\n\n### Expected behavior\n\nI expect `ErrorOnUnknownConfiguration` to respect the `ConfigurationKeyNameAttribute` just as it would during binding of the property. \n\n### Actual behavior\n\n`ErrorOnUnknownConfiguration` throws when a configuration key is found that matches the configuration key attribute but does not match any of the properties of the bound class. \nThe exact error mesage for the code snippet above is: \n```\nSystem.InvalidOperationException: \u0027ErrorOnUnknownConfiguration\u0027 was set on the provided BinderOptions, but the following properties were not found on the instance of Options: \u0027Foo\u0027\n```\n\n### Regression?\n\nProbably broken from the very beginning. \n\n### Known Workarounds\n\nNone that I can think of other than not using `ErrorOnUnknownConfiguration`\n\n### Configuration\n\n.NET 9, Windows 11, x64\nBut very likely not related to the configuration. \n\n### Other information\n\nOne can easily see the issue here for example: https://source.dot.net/#Microsoft.Extensions.Configuration.Binder/ConfigurationBinder.cs,224\nThe current implementation will simply retrieve a list of `PropertyInfo` objects without considering the attribute. \n```csharp\nHashSet\u003cstring\u003e propertyNames = new(modelProperties.Select(mp =\u003e mp.Name), StringComparer.OrdinalIgnoreCase);\n```\nWhen it should probably be something like this:\n```csharp\nHashSet\u003cstring\u003e propertyNames = new(modelProperties.Select(mp =\u003e GetPropertyName(mp)), StringComparer.OrdinalIgnoreCase);\n```\nThere may be other locations that have a similar issue. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwEHMmw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7AQcyb",
                                           "createdAt":  "2025-08-26T19:53:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-26T19:53:21Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ErrorOnUnknownConfiguration ignores ConfigurationKeyName",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119458",
        "createdAt":  "2025-09-08T11:35:26Z",
        "number":  119458,
        "author":  "alex-lutsenko",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-17T15:52:42Z",
        "body":  "### Description\n\nConfiguration Binder source generator generates duplicate field names where the same class name is present in different namespaces e.g.\n\nNamespace1.Config\nNamespace2.Config\n\nresults in\n\n #region Core binding extensions.\nprivate readonly static Lazy\u003cHashSet\u003cstring\u003e\u003e s_configKeys_Config = new(() =\u003e ......\nprivate readonly static Lazy\u003cHashSet\u003cstring\u003e\u003e s_configKeys_Config = new(() =\u003e ......\n\n\nthis generates an error:\n\"Ambiguity between \u0027BindingExtensions.s_configKeys_Config\u0027 and \u0027BindingExtensions.s_configKeys_Config\u0027\"\n\n### Reproduction Steps\n\nCreate a new console app.\nAdd\nMicrosoft.Extensions.Configuration  v9.0.8\nMicrosoft.Extensions.Configuration.Json  v9.0.8\nMicrosoft.Extensions.Configuration.Binder  v9.0.8\n\n### Project File\nAdd\n` \u003cEnableConfigurationBindingGenerator\u003etrue\u003c/EnableConfigurationBindingGenerator\u003e`\n\n### appsettings.json\n\n```json\n{\n\t\"NS1\": {\n\t\t\"Op1\": \"option1\"\n\t},\n\t\"NS2\": {\n\t\t\"Op2\": \"option2\",\n\t\t\"Op3\": \"option3\"\n\t}\n}\n```\n\n### Program.cs\n\n```C#\nusing Microsoft.Extensions.Configuration;\n\nnamespace CodeGenBugRepo{\t\n\tnamespace NS1{\n\t\tinternal class Config{\n\t\t\tpublic string Op1 { get; set; }\n\t\t}\n\t}\n\tnamespace NS2{\n\t\tinternal class Config{\n\t\t\tpublic string Op2 { get; set; }\n\t\t\tpublic string Op3 { get; set; }\n\t\t}\n\t}\n\tinternal class Program{\n\t\tstatic void Main( string[] args )\n\t\t{\n\t\t\tvar configuration = new ConfigurationBuilder().SetBasePath( Directory.GetCurrentDirectory() )\n\t\t\t\t.AddJsonFile( \"appsettings.json\", optional: true, reloadOnChange: false )\n\t\t\t\t.Build();\n\t\t\tConsole.WriteLine( configuration.GetSection( \"NS1\" ).Get\u003cNS1.Config\u003e().Op1 );\n\t\t\tConsole.WriteLine( configuration.GetSection( \"NS2\" ).Get\u003cNS2.Config\u003e().Op3 );\n\t\t}\n\t}\n}\n```\n\n### Expected behavior\n\nCode is compiles successfully.\n\n### Actual behavior\n\nCode fails to compile.\nWith the following errors:\nThe type \u0027BindingExtensions\u0027 already contains a definition for \u0027s_configKeys_Config\u0027\nAmbiguity between \u0027BindingExtensions.s_configKeys_Config\u0027 and \u0027BindingExtensions.s_configKeys_Config\u0027\n\n```\n.....\n\n        #region Core binding extensions.\n        private readonly static Lazy\u003cHashSet\u003cstring\u003e\u003e s_configKeys_Config = new(() =\u003e new HashSet\u003cstring\u003e(StringComparer.OrdinalIgnoreCase) { \"Op1\" });\n        private readonly static Lazy\u003cHashSet\u003cstring\u003e\u003e s_configKeys_Config = new(() =\u003e new HashSet\u003cstring\u003e(StringComparer.OrdinalIgnoreCase) { \"Op2\", \"Op3\" });\n\n.....\n```\n\n### Regression?\n\nN/A\n\n### Known Workarounds\n\nProvide unique type names across different namespaces.\ne.g. renaming NS2.Config -\u003e NS2.Config2 solves the problem.\n\n### Configuration\n\n    Which version of .NET is the code running on?\n8.0, 9.0\n    What OS and version, and what distro if applicable?\nWin 11\n    What is the architecture (x64, x86, ARM, ARM64)?\nx64\n    Do you know whether it is specific to that configuration?\nNot sure\n    If you\u0027re using Blazor, which web browser(s) do you see this issue in?\nN/A\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxOlcrg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7CqaDP",
                                           "createdAt":  "2025-09-08T11:39:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "I\u0027m a bot. Here are possible related and/or duplicate issues (I may be wrong):\n- https://github.com/dotnet/runtime/issues/90969\n- https://github.com/dotnet/runtime/issues/90976",
                                           "updatedAt":  "2025-09-08T11:39:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CqkZL",
                                           "createdAt":  "2025-09-08T11:52:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alex-lutsenko",
                                           "body":  "Same issue as #90969. Based on comments it should have been fixed in #90976 ?",
                                           "updatedAt":  "2025-09-08T11:52:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Cu0iq",
                                           "createdAt":  "2025-09-08T16:22:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Looks not completely fixed. I tried that on .NET 10 and I can reproduce the problem:\n\n```\nBindingExtensions.g.cs(45,55): error CS0102: The type \u0027BindingExtensions\u0027 already contains a definition for \u0027s_configKeys_Config\u0027\n```\n\n```C#\n        #region Core binding extensions.\n        private readonly static Lazy\u003cHashSet\u003cstring\u003e\u003e s_configKeys_Config = new(() =\u003e new HashSet\u003cstring\u003e(StringComparer.OrdinalIgnoreCase) { \"Op1\" });\n        private readonly static Lazy\u003cHashSet\u003cstring\u003e\u003e s_configKeys_Config = new(() =\u003e new HashSet\u003cstring\u003e(StringComparer.OrdinalIgnoreCase) { \"Op2\", \"Op3\" });\n```",
                                           "updatedAt":  "2025-09-08T16:22:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7E1g9N",
                                           "createdAt":  "2025-09-17T10:31:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alex-lutsenko",
                                           "body":  "Can this issue be assigned to me? I think I have a fix for it.",
                                           "updatedAt":  "2025-09-17T10:31:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7E6Vyu",
                                           "createdAt":  "2025-09-17T15:52:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@alex-lutsenko thanks for willing to help with that. You can just submit a PR and tag me there. ",
                                           "updatedAt":  "2025-09-17T15:52:42Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Configuration Binder source generator generates duplicate field names",
        "labels":  [
                       "area-Extensions-Configuration",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119883",
        "createdAt":  "2025-09-19T07:56:13Z",
        "number":  119883,
        "author":  "Erwinvandervalk",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T16:10:54Z",
        "body":  "### Description\n\nI have two classes that are bound to the same IConfiguration data. I\u0027m using IOptionsMonitor to observe changes to the configuration data. \n\nI noticed that data that\u0027s loaded at startup OR after the first reload updates both IOptionsMonitor instances, but after that, only the first IOptionsMonitor instance is updated (unless I trigger another Reload()).\n\nI realize this description is a bit weird, but I created a repro in an xunit test to show the behavior. \n\nThis behavior became apparent when I have bound the IConfiguration to multiple files. When I copy in a file, it secretly trigger two updates (one for the file dropping in and the second one for the file being loaded), so my config changes are available everywhere. \n\nBut if I rename a file (IE: change the extendsion from .not_json to .json), and the file is picked up by the configuration system, the filesystemwatcher only triggers a single reload and my configuration is inconsistent. \n\n\n\n### Reproduction Steps\n\n``` csharp\npublic class OptionsMonitorExplorationTests\n{\n    /// \u003csummary\u003e\n    /// I found a problematic / inconsistent situation with binding two classes to the same IConfiguration and\n    /// how this then updates the IOptionsMonitor instances.\n    /// \u003c/summary\u003e\n    [Fact]\n    public void OptionMonitors_Are_Updated_Inconsistently()\n    {\n        var builder = Host.CreateApplicationBuilder();\n\n        var provider = new CustomConfigurationProvider();\n\n        // Bind the configuration to the CustomConfigurationProvider\n        var customConfigurationSource = new CustomConfigurationSource(provider);\n        builder.Configuration.Sources.Add(customConfigurationSource);\n\n        // Important: I\u0027m binding two classes to the same IConfiguration instance\n        // The different classes are mapped to the same data. \n        builder.Services.Configure\u003cMyConfig\u003e(builder.Configuration);\n        builder.Services.Configure\u003cMyConfig2\u003e(builder.Configuration);\n\n        using var host = builder.Build();\n\n        // Get a monitor for both classes. \n        var monitor1 = host.Services.GetRequiredService\u003cIOptionsMonitor\u003cMyConfig\u003e\u003e();\n        var monitor2 = host.Services.GetRequiredService\u003cIOptionsMonitor\u003cMyConfig2\u003e\u003e();\n\n        // Count for each data what the number of items is when the first monitor changes.\n        var countMyConfig1 = 0;\n        var countMyConfig2 = 0;\n        monitor1.OnChange(c =\u003e\n        {\n            countMyConfig1 = c.Items.Count;\n            countMyConfig2 = monitor2.CurrentValue.Items.Count;\n        });\n\n        // Now we load a single data item and trigger a (single) reload. \n        provider.LoadDataWithOneItem();\n        provider.Reload();\n        Task.Delay(200);\n\n        // After first reload both monitors have 1 item.\n        countMyConfig1.ShouldBe(1);\n        countMyConfig2.ShouldBe(1);\n\n        // Now reload the configuration, but with two items\n        provider.LoadDataWithSecondItem();\n        provider.Reload();\n        Task.Delay(200);\n\n        // The first config is updated (as expected)\n        countMyConfig1.ShouldBe(2);\n\n        // But the second config is NOT updated (not expected)\n        // The second options monitor isn\u0027t updated. This behavior\n        // is different from the initial load (which has both IOptionMonitors updated)\n        // or the first reload (which also updates both IOptionsMonitors)\n        countMyConfig2.ShouldBe(1, \"I would have expected this to be 2\");\n\n        // A second reload now causes both providers to be reloaded. \n        customConfigurationSource.Provider.Reload();\n\n        Task.Delay(200);\n\n        // and now the optionmontors for BOTH are updated. \n        countMyConfig1.ShouldBe(2);\n        countMyConfig2.ShouldBe(2);\n    }\n\n\n    public class CustomConfigurationSource(CustomConfigurationProvider provider) : IConfigurationSource\n    {\n        public CustomConfigurationProvider Provider { get; set; } = provider;\n\n        public IConfigurationProvider Build(IConfigurationBuilder builder) =\u003e Provider;\n    }\n\n    public class CustomConfigurationProvider : ConfigurationProvider\n    {\n        public void LoadDataWithOneItem()\n        {\n            Data = new Dictionary\u003cstring, string?\u003e(StringComparer.OrdinalIgnoreCase);\n            Data[\"Items:Item1:Name\"] = \"FirstSet_Item1\";\n            Data[\"Items:Item1:Name\"] = \"FirstSet_Item1\";\n        }\n\n        public void LoadDataWithSecondItem()\n        {\n            Data = new Dictionary\u003cstring, string?\u003e(StringComparer.OrdinalIgnoreCase);\n            Data[\"Items:Item1:Name\"] = \"FirstSet_Item1\";\n            Data[\"Items:Item1:Name\"] = \"FirstSet_Item1\";\n            Data[\"Items:Item2:Name\"] = \"FirstSet_Item2\";\n            Data[\"Items:Item2:Name\"] = \"FirstSet_Item2\";\n        }\n\n        public void Reload() =\u003e OnReload();\n\n        public override void Load()\n        {\n\n        }\n    }\n\n    public class MyConfig\n    {\n        public Dictionary\u003cstring, MyConfigItem\u003e Items { get; set; } = new();\n    }\n\n    public class MyConfig2 : MyConfig\n    {\n    }\n\n    public class MyConfigItem\n    {\n        public string Name { get; set; } = null!;\n    }\n\n}\n```\n\n``` xml\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\n\n  \u003cPropertyGroup\u003e\n    \u003cTargetFramework\u003enet9.0\u003c/TargetFramework\u003e\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\n    \u003cIsPackable\u003efalse\u003c/IsPackable\u003e\n  \u003c/PropertyGroup\u003e\n\n  \u003cItemGroup\u003e\n    \u003cPackageReference Include=\"coverlet.collector\" Version=\"6.0.2\" /\u003e\n    \u003cPackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"9.0.9\" /\u003e\n    \u003cPackageReference Include=\"Microsoft.Extensions.Hosting\" Version=\"9.0.9\" /\u003e\n    \u003cPackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.12.0\" /\u003e\n    \u003cPackageReference Include=\"xunit\" Version=\"2.9.2\" /\u003e\n    \u003cPackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.8.2\" /\u003e\n  \u003c/ItemGroup\u003e\n\n  \u003cItemGroup\u003e\n    \u003cUsing Include=\"Xunit\" /\u003e\n  \u003c/ItemGroup\u003e\n\n\u003c/Project\u003e\n\n```\n\n### Expected behavior\n\nI would expect consistent behavior. \n\nSo, either that on the first data change, only the first optionsmonitor has the data, and the second doesn\u0027t. And this behavior would continue to happen. whenever I reload the data. \n\nBut preferably, I think both IOptionsMonitors would need to be updated before triggering the OnChange events. This makes the behavior consistent with an initial load. \n\n### Actual behavior\n\nIf I load data at startup, then the IOptionsMonitors reflect the same data. \nIf I change the data one time and trigger one reload, in the OnChange of the first IOptionsMonitor, both IOptionMonitors are updated. \n\nHowever, on the second change, in the OnChange event, only the first IOptionsMonitor is updated and the second one isn\u0027t yet. \n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nTriggering the reload twice would resolve this issue. It\u0027s unexpected though.\n\nNot reading the data from the IOptionsMonitor, but reading the data directly from the IConfigurationRoot also gives me the latest value. \n\n### Configuration\n\n.net 9\nWindows 11, x64\nHaven\u0027t tried this on different operating systems. \n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxWrDgg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7FasOC",
                                           "createdAt":  "2025-09-19T12:59:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-19T12:59:57Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Configuration reloading updates IOptionsMonitor Inconsistently",
        "labels":  [
                       "area-Extensions-Configuration"
                   ]
    }
]
